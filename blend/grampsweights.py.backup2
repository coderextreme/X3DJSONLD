import bpy
from pprint import pprint
from inspect import getmembers
from types import FunctionType


objs = bpy.data.objects
objs.remove(objs["Cube"], do_unlink=True)
bpy.ops.wm.collada_import(
    filepath = "gramps-ANIM.dae",
    auto_connect = True,
    find_chains = True,
    fix_orientation = True)
#bpy.ops.import_scene.fbx(filepath = "../../WinterAndSpring/InputDir73/maya to c4d files/gramps_my_c4d_anim.fbx")
#bpy.ops.import_scene.gltf(filepath = "../../WinterAndSpring/HAnimDecoratorAssembly/gramps73/gramps_c4d_omni.gltf")

skinCoordInfo = {}

for obj in bpy.context.scene.objects:
    if obj.type == 'ARMATURE':
        armature = obj
        armature.select_set(True)
        bpy.context.view_layer.objects.active = armature
        bpy.ops.object.mode_set(mode='POSE')

        armature_bones = {bone.name for bone in armature.pose.bones}
        for obj in bpy.data.objects:
            if obj.type == 'MESH':
                if obj.parent == armature:
                    group_to_bone = {i: group.name for i, group in enumerate(obj.vertex_groups)}
        
                    # determine the bone weights associated with each vertex
                    mesh = obj.data
                    for vertex in mesh.vertices: ##in each vertex of the mesh
                        #print('Vertex', vertex.index)
                        for group in vertex.groups: #first loop to calculate the total weight and the space allowed if some are locked
                            group_index = group.group
                            group_bone = group_to_bone[group_index]
                            if group_bone in armature_bones: ##if it's a bone
                                # print(group_bone, vertex.index, group.weight)
                                try:
                                    if skinCoordInfo[group_bone] is None:
                                        skinCoordInfo = {**skinCoordInfo, group_bone : { 'indices' : [], 'weights': []}}
                                except:
                                        skinCoordInfo = {**skinCoordInfo, group_bone : { 'indices' : [], 'weights': []}}
                                skinCoordInfo[group_bone]['indices'].append(vertex.index)
                                skinCoordInfo[group_bone]['weights'].append(group.weight)
                            else:
                                print('NOT_A_BONE', vertex.index, group.weight)
for group_bone in skinCoordInfo:
    try:
        info = skinCoordInfo[group_bone]
        print(f"\n<{group_bone}>\n")
        indices = info['indices']
        weights = info['weights']
        for i in range(len(info['indices'])):
            print(f"({indices[i]}) = {weights[i]}")
    except:
        pass
