import bpy;

output_path = "C:/Users/john/WinterAndSpring/blender.humanoid.json"

armature = None
for obj in bpy.context.scene.objects:
    if obj.type == 'ARMATURE':
        armature = obj
        break

if armature:
    for bone in armature.pose.bones:
        # Access bone name, location, rotation, and scale
        bone_name = bone.name
        bone_location = bone.location
        bone_rotation = bone.rotation_euler
        bone_scale = bone.scale
        # Do something with this bone information
        print(f"Bone: {bone_name}")
        print(f"Location: {bone_location}")
        print(f"Rotation: {bone_rotation}")
        print(f"Scale: {bone_scale}")

if armature:
    # obj = bpy.data.objects['YourMeshObjectName']
    for obj in bpy.context.selected_objects:
        if obj.type == 'MESH':
            mesh_data = obj.data
            for vertex in mesh_data.vertices:
                    # Access vertex coordinates  
                    vertex_index = vertex.index
                    vertex_coords = vertex.co
                    # Do something with this vertex information
                    print(f"Vertex Coordinates {vertex_index} {vertex_coords}")
            vertex_groups = obj.vertex_groups
            for group in vertex_groups:
                group_name = group.name
                for index, weight in group.weight_paint:
                    # 'index' is the vertex index, and 'weight' is the weight value
                    print(f"Group: {group_name}, Vertex Index: {index}, Weight: {weight}")



if armature:
    # Get the animation data for the armature
    animation_data = armature.animation_data
    if animation_data:
        # Access the action (animation) associated with the armature
        action = animation_data.action
        if action:
            # Create a data structure to store animation data
            animation_data = {
                "frames": [],
                "bone_animations": {}
            }

            # Collect animation data for each frame
            for frame in range(int(action.frame_range.x), int(action.frame_range.y) + 1):
                bpy.context.scene.frame_set(frame)
                
                frame_data = {
                    "frame_number": frame,
                    "bone_transforms": {}
                }

                # Collect bone transformation data for each bone
                for bone in armature.pose.bones:
                    bone_data = {
                        "location": bone.location[:],
                        "rotation": bone.rotation_euler[:],
                        "scale": bone.scale[:]
                    }
                    frame_data["bone_transforms"][bone.name] = bone_data

                animation_data["frames"].append(frame_data)

            # Export the animation data to your custom format
            with open(output_path, 'w') as file:
                # Implement your custom export format logic here
                # Write animation_data to the file in your desired format
                file.write(json.dumps(animation_data))

            print(f"Animation data exported to {output_path}")
        else:
            print("No animation data associated with the armature.")
    else:
        print("No animation data found for the armature.")
else:
    print("No armature found in the scene.")
