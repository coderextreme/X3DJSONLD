{ "X3D": {
    "encoding": "UTF-8",
    "@profile": "Immersive",
    "@version": "4.0",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-4.0.xsd",
    "JSON schema": "http://www.web3d.org/specifications/x3d-4.0-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "title",
          "@content": "CameraPrototypes.x3d"
        },
        {
          "@name": "description",
          "@content": "Camera, CameraShot and CameraMovement prototypes that demonstrate storyboard capabilities and precise camera operation. This is a developmental effort for potential X3D Specification improvement."
        },
        {
          "@name": "creator",
          "@content": "Don Brutzman and Jeff Weekley"
        },
        {
          "@name": "created",
          "@content": "16 March 2009"
        },
        {
          "@name": "modified",
          "@content": "25 October 2016"
        },
        {
          "@name": "TODO",
          "@content": "Schematron rules, backed up by initialize() checks"
        },
        {
          "@name": "reference",
          "@content": "BeyondViewpointCameraNodesWeb3D2009.pdf"
        },
        {
          "@name": "reference",
          "@content": "https://www.web3d.org/x3d/specifications/ISO-IEC-FDIS-19775-1.2-X3D-AbstractSpecification/Part01/components/navigation.html"
        },
        {
          "@name": "reference",
          "@content": "CameraExamples.x3d"
        },
        {
          "@name": "reference",
          "@content": "http://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d"
        },
        {
          "@name": "subject",
          "@content": "Camera nodes for Viewpoint navigation control"
        },
        {
          "@name": "identifier",
          "@content": "https://www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d"
        },
        {
          "@name": "generator",
          "@content": "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
        },
        {
          "@name": "license",
          "@content": "../license.html"
        },
        {
          "@name": "converter",
          "@content": "x3d-tidy V1.0.56, https://www.npmjs.com/package/x3d-tidy"
        },
        {
          "@name": "converted",
          "@content": "Mon, 04 Sep 2023 07:50:10 GMT"
        }
      ]
    },
    "Scene": {
      "-children": [
        { "ProtoDeclare":
          {
            "@name":"Camera",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@type": "SFString",
                  "@name": "description"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFVec3f",
                  "@name": "position",
                  "@value": [ 0, 0, 10 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFRotation",
                  "@name": "orientation"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "fieldOfView",
                  "@value": 0.7854
                },
                {
                  "@accessType": "inputOnly",
                  "@type": "SFFloat",
                  "@name": "set_fraction"
                },
                {
                  "@accessType": "inputOnly",
                  "@type": "SFBool",
                  "@name": "set_bind"
                },
                {
                  "@accessType": "outputOnly",
                  "@type": "SFTime",
                  "@name": "bindTime"
                },
                {
                  "@accessType": "outputOnly",
                  "@type": "SFBool",
                  "@name": "isBound"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "nearClipPlane",
                  "@value": 0.25
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "farClipPlane"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "MFNode",
                  "@name": "shots"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFBool",
                  "@name": "headlight",
                  "@value": true
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFColor",
                  "@name": "headlightColor",
                  "@value": [ 1, 1, 1 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "headlightIntensity",
                  "@value": 1
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFColor",
                  "@name": "filterColor",
                  "@value": [ 1, 1, 1 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "filterTransparency",
                  "@value": 1
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFVec3f",
                  "@name": "upVector",
                  "@value": [ 0, 1, 0 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "fStop",
                  "@value": 5.6
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "focusDistance",
                  "@value": 10
                },
                {
                  "@accessType": "outputOnly",
                  "@type": "SFBool",
                  "@name": "isActive"
                },
                {
                  "@accessType": "outputOnly",
                  "@type": "SFTime",
                  "@name": "totalDuration"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFNode",
                  "@name": "offlineRender"
                },
                {
                  "@accessType": "initializeOnly",
                  "@type": "SFBool",
                  "@name": "traceEnabled"
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                { "Viewpoint":
                  {
                    "@DEF": "CameraViewpoint",
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "set_bind",
                          "@protoField": "set_bind"
                        },
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "position",
                          "@protoField": "position"
                        },
                        {
                          "@nodeField": "orientation",
                          "@protoField": "orientation"
                        },
                        {
                          "@nodeField": "fieldOfView",
                          "@protoField": "fieldOfView"
                        },
                        {
                          "@nodeField": "isBound",
                          "@protoField": "isBound"
                        },
                        {
                          "@nodeField": "bindTime",
                          "@protoField": "bindTime"
                        }
                      ]
                    }
                  }
                },
                { "NavigationInfo":
                  {
                    "@DEF": "CameraNavInfo",
                    "@type": [
                      "EXAMINE",
                      "FLY",
                      "ANY"
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "set_bind",
                          "@protoField": "set_bind"
                        },
                        {
                          "@nodeField": "headlight",
                          "@protoField": "headlight"
                        },
                        {
                          "@nodeField": "visibilityLimit",
                          "@protoField": "farClipPlane"
                        }
                      ]
                    }
                  }
                },
                { "DirectionalLight":
                  {
                    "@DEF": "CameraDirectionalLight",
                    "@global": true,
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "on",
                          "@protoField": "headlight"
                        },
                        {
                          "@nodeField": "color",
                          "@protoField": "headlightColor"
                        },
                        {
                          "@nodeField": "intensity",
                          "@protoField": "headlightIntensity"
                        }
                      ]
                    }
                  }
                },
                { "PositionInterpolator":
                  {
                    "@DEF": "CameraPositionInterpolator",
                    "@key": [
                      0,
                      1
                    ],
                    "@keyValue": [
                      0, 0, 0,
                      0, 0, 0
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "set_fraction",
                          "@protoField": "set_fraction"
                        }
                      ]
                    }
                  }
                },
                { "OrientationInterpolator":
                  {
                    "@DEF": "CameraOrientationInterpolator",
                    "@key": [
                      0,
                      1
                    ],
                    "@keyValue": [
                      0, 1, 0, 0,
                      0, 1, 0, 0
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "set_fraction",
                          "@protoField": "set_fraction"
                        }
                      ]
                    }
                  }
                },
                { "Script":
                  {
                    "@DEF": "CameraScript",
                    "@directOutput": true,
                    "@mustEvaluate": true,
                    "field": [
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFString",
                        "@name": "description"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFVec3f",
                        "@name": "position"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFRotation",
                        "@name": "orientation"
                      },
                      {
                        "@accessType": "inputOnly",
                        "@type": "SFFloat",
                        "@name": "set_fraction"
                      },
                      {
                        "@accessType": "inputOnly",
                        "@type": "SFBool",
                        "@name": "set_bind"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "fieldOfView"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "nearClipPlane"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "farClipPlane"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "MFNode",
                        "@name": "shots"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFColor",
                        "@name": "filterColor"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "filterTransparency"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFVec3f",
                        "@name": "upVector"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "fStop"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "focusDistance"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@type": "SFBool",
                        "@name": "isActive"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@type": "SFTime",
                        "@name": "totalDuration"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFNode",
                        "@name": "offlineRender"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFNode",
                        "@name": "ViewpointNode",
                        "-children": [
                          { "Viewpoint":
                            {
                              "@USE": "CameraViewpoint"
                            }
                          }
                        ]
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFNode",
                        "@name": "NavInfoNode",
                        "-children": [
                          { "NavigationInfo":
                            {
                              "@USE": "CameraNavInfo"
                            }
                          }
                        ]
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFNode",
                        "@name": "CameraPI",
                        "-children": [
                          { "PositionInterpolator":
                            {
                              "@USE": "CameraPositionInterpolator"
                            }
                          }
                        ]
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFNode",
                        "@name": "CameraOI",
                        "-children": [
                          { "OrientationInterpolator":
                            {
                              "@USE": "CameraOrientationInterpolator"
                            }
                          }
                        ]
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "MFFloat",
                        "@name": "key"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "MFVec3f",
                        "@name": "keyValuePosition"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "MFRotation",
                        "@name": "keyValueOrientation"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFBool",
                        "@name": "animated"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFBool",
                        "@name": "initialized"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFInt32",
                        "@name": "shotCount"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFInt32",
                        "@name": "movesCount"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFFloat",
                        "@name": "frameCount"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFTime",
                        "@name": "startTime"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFTime",
                        "@name": "priorTraceTime"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFBool",
                        "@name": "traceEnabled"
                      }
                    ],
                    "#sourceText": [
                      "\r",
                      "ecmascript:\r",
                      "function initialize () // CameraScript\r",
                      "{\r",
                      "//  tracePrint ('initialize start...');\r",
                      "\r",
                      "    NavInfoNode.avatarSize[0]   = nearClipPlane;\r",
                      "\r",
                      "    // remaining setups deferred to invocation of checkShots() method\r",
                      "    // thanks to Yvonne Jung Fraunhofer for diagnosing better approach to function initialization\r",
                      "    alwaysPrint ('initialize complete');\r",
                      "}\r",
                      "\r",
                      "function checkShots (eventValue)\r",
                      "{\r",
                      "    tracePrint ('checkShots() method should only occur after initialize() methods in all other Scripts are complete');\r",
                      "\r",
                      "    // compute totalDuration by summing durations from contained CameraShot and CameraMovement nodes\r",
                      "    totalDuration= 0;\r",
                      "    shotCount  = shots.length;\r",
                      "    movesCount = 0;\r",
                      "    for (i = 0; i < shotCount; i++) // shots index\r",
                      "    {\r",
                      "       tracePrint ('shots[' + i + '].moves.length=' + shots[i].moves.length);\r",
                      "       movesCount   += shots[i].moves.length;\r",
                      "       totalDuration = totalDuration + shots[i].shotDuration;\r",
                      "       if (shots[i].moves.length == 0)\r",
                      "       {\r",
                      "          alwaysPrint ('warning: CameraShot[' + i + '][' + shots[i].description + '] has no contained CameraMove nodes');\r",
                      "       }\r",
                      "    }\r",
                      "    // size checks before proceeding\r",
                      "    if (shotCount == 0)\r",
                      "    {\r",
                      "       alwaysPrint ('warning: no CameraShot nodes found for the shots, nothing to do!');\r",
                      "       return;\r",
                      "    }\r",
                      "    else if (movesCount == 0)\r",
                      "    {\r",
                      "       alwaysPrint ('warning: no CameraMove nodes found for the shots, nothing to do!');\r",
                      "       return;\r",
                      "    }\r",
                      "    else if (totalDuration == 0)\r",
                      "    {\r",
                      "       alwaysPrint ('warning: totalDuration = 0 seconds, nothing to do!');\r",
                      "       return;\r",
                      "    }\r",
                      "    tracePrint ('number of contained CameraShot nodes=' + shotCount);\r",
                      "    tracePrint ('number of contained CameraMove nodes=' + movesCount);\r",
                      "    tracePrint ('totalDuration=' + totalDuration + ' seconds for all shots and moves');\r",
                      "\r",
                      "    // compute interpolators\r",
                      "    var k = 0; // index for latest key, keyValuePosition, keyValueOrientation\r",
                      "    for (i = 0; i < shotCount; i++) // shots index\r",
                      "    {\r",
                      "        if (i==0) // initial entries\r",
                      "        {\r",
                      "           key[0]                   = 0.0; // no previous move\r",
                      "           keyValuePosition[0]      = shots[i].initialPosition;\r",
                      "           keyValueOrientation[0]   = shots[i].initialOrientation;\r",
                      "        }\r",
                      "        else     // new shot repositions, reorients camera as clean break from preceding shot/move\r",
                      "        {\r",
                      "           key[k+1]                 = key[k]; // start from end from previous move\r",
                      "           keyValuePosition[k+1]    = shots[i].initialPosition;\r",
                      "           keyValueOrientation[k+1] = shots[i].initialOrientation;\r",
                      "           k++;\r",
                      "        }\r",
                      "        tracePrint (shots[i].description);\r",
                      "        tracePrint ('shots[i].moves.length=' + shots[i].moves.length);\r",
                      "\r",
                      "        for (j = 0; j < shots[i].moves.length; j++) // moves index\r",
                      "        {\r",
                      "            var durationFloat =              shots[i].moves[j].duration;  // implicit type conversion from SFTime\r",
                      "            //  durationFloat = new SFFloat (shots[i].moves[j].duration); // explicit type conversion from SFTime\r",
                      "            //  tracePrint ('durationFloat=' + durationFloat);\r",
                      "            key[k+1]               = key[k] + (durationFloat / totalDuration);\r",
                      "            keyValuePosition[k+1]  = shots[i].moves[j].goalPosition;\r",
                      "            if (!animated)\r",
                      "            {\r",
                      "                 keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;\r",
                      "            }\r",
                      "            else\r",
                      "            {\r",
                      "                // using constructor SFRotation (SFVec3f fromVector, SFVec3f toVector)\r",
                      "                // see X3D ECMAScript binding Table 7.18 — SFRotation instance creation functions\r",
                      "\r",
                      "                // test if difference vector is zero, if so maintain previous rotation\r",
                      "                var shotVector = ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize();\r",
                      "                if (shotVector.length() >= 0)\r",
                      "                {\r",
                      "                    // default view direction is along -Z axis\r",
                      "                    shots[i].moves[j].goalOrientation = new SFRotation (new SFVec3f (0, 0, 1), shotVector);\r",
                      "                    keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;\r",
                      "                }\r",
                      "                else // note (k > 0)\r",
                      "                {\r",
                      "                    keyValueOrientation[k+1] = keyValueOrientation[k];  // no change\r",
                      "                }\r",
                      "\r",
                      "                tracePrint ('shots[' + i + '].moves[' + j + '].goalAimPoint=' + shots[i].moves[j].goalAimPoint.toString());\r",
                      "                tracePrint ('        ViewpointNode.position=' + ViewpointNode.position.toString());\r",
                      "                tracePrint ('          shotVector     delta=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).toString());\r",
                      "                tracePrint ('          shotVector normalize=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize().toString());\r",
                      "                tracePrint ('               goalOrientation=' + shots[i].moves[j].goalOrientation.toString());\r",
                      "                tracePrint ('      keyValueOrientation[k+1]=' + keyValueOrientation[k+1].toString() + '\\n');\r",
                      "            }\r",
                      "            k++; // update index to match latest key, keyValuePosition, keyValueOrientation\r",
                      "\r",
                      "            // check animated parameter:  set true if any of moves are tracking moves\r",
                      "            if (!animated)  animated = shots[i].moves[j].tracking; // once true, remains true\r",
                      "         // tracePrint ('shots[' + i + '].moves[' + j + '].tracking=' + shots[i].moves[j].tracking + ', animated=' + animated);\r",
                      "\r",
                      "            // intermediate trace\r",
                      "            tracePrint ('                key=' + key);\r",
                      "            tracePrint ('   keyValuePosition=' + keyValuePosition);\r",
                      "            tracePrint ('keyValueOrientation=' + keyValueOrientation);\r",
                      "            tracePrint ('- ' + shots[i].moves[j].description);\r",
                      "        }\r",
                      "    }\r",
                      "    tracePrint ('                key=' + key);\r",
                      "    tracePrint ('   keyValuePosition=' + keyValuePosition);\r",
                      "    tracePrint ('keyValueOrientation=' + keyValueOrientation);\r",
                      "    if (key.length != keyValuePosition.length)\r",
                      "    {\r",
                      "      alwaysPrint ('warning: internal error during array construction, ' +\r",
                      "                  'key.length=' + key.length + ' must equal ' +\r",
                      "                  'keyValuePosition.length=' + keyValuePosition.length);\r",
                      "    }\r",
                      "    if (key.length != keyValueOrientation.length)\r",
                      "    {\r",
                      "      alwaysPrint ('warning: internal error during array construction, ' +\r",
                      "                  'key.length=' + key.length + ' must equal ' +\r",
                      "                  'keyValueOrientation.length=' + keyValueOrientation.length);\r",
                      "    }\r",
                      "    if (key.length != (shotCount + movesCount))\r",
                      "    {\r",
                      "      alwaysPrint ('warning: internal error during array construction, ' +\r",
                      "                  'key.length=' + key.length + ' must equal ' +\r",
                      "                  '(shotCount + movesCount)=' + (shotCount + movesCount));\r",
                      "    }\r",
                      "    tracePrint ('           animated=' + animated);\r",
                      "    // set node values\r",
                      "    CameraPI.key      = key;\r",
                      "    CameraOI.key      = key;\r",
                      "    CameraPI.keyValue = keyValuePosition;\r",
                      "    CameraOI.keyValue = keyValueOrientation;\r",
                      "\r",
                      "    if (!animated) // output results\r",
                      "    {\r",
                      "        tracePrint ('<PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');\r",
                      "        tracePrint ('<OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');\r",
                      "    }\r",
                      "    tracePrint ('checkShots() complete');\r",
                      "}\r",
                      "\r",
                      "function stripBrackets (fieldArray)\r",
                      "{\r",
                      "    // some browsers add brackets to array output strings, this function strips them\r",
                      "    outputString = '';\r",
                      "    for (i = 0; i < fieldArray.length; i++)\r",
                      "    {\r",
                      "       outputString += fieldArray[i].toString();\r",
                      "       if (i < fieldArray.length - 1) outputString += ' ';\r",
                      "    }\r",
                      "    return outputString;\r",
                      "}\r",
                      "\r",
                      "function set_fraction (eventValue, timestamp) // input event received for inputOnly field\r",
                      "{\r",
                      "   // traceEnabled = false;  // for testing purposes\r",
                      "\r",
                      "   // if Camera is being animated, immediately recompute interpolator settings\r",
                      "   if (animated) checkShots (true);\r",
                      "\r",
                      "   // trace progress on console with reduced output frequency\r",
                      "   if (frameCount == 0)\r",
                      "   {\r",
                      "      alwaysPrint ('Animation loop commencing, timestamp=' + timestamp);\r",
                      "      startTime      = timestamp;\r",
                      "      priorTraceTime = timestamp;\r",
                      "      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\r",
                      "\r",
                      "      if (animated) // output results\r",
                      "      {\r",
                      "        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\r",
                      "        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');\r",
                      "        tracePrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');\r",
                      "      }\r",
                      "   }\r",
                      "   else if ((timestamp - priorTraceTime) >= 1.0) // 1 second trace interval\r",
                      "   {\r",
                      "      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\r",
                      "      priorTraceTime = timestamp;\r",
                      "\r",
                      "      if (animated) // output results\r",
                      "      {\r",
                      "        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\r",
                      "        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');\r",
                      "        alwaysPrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');\r",
                      "      }\r",
                      "   }\r",
                      "   if (eventValue == 0)\r",
                      "   {\r",
                      "      // note that zero value is not necessarily sent first by TimeSensor, so otherwise ignored\r",
                      "      frameCount++;\r",
                      "   }\r",
                      "   else if (eventValue == 1)\r",
                      "   {\r",
                      "      alwaysPrint ('shotClock=' + (timestamp - startTime) + ', frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\r",
                      "      if (animated) // output results\r",
                      "      {\r",
                      "        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\r",
                      "      }\r",
                      "      alwaysPrint ('Animation loop complete.');\r",
                      "      // do not unbind the Viewpoint and NavigationInfo nodes, let that be controlled externally\r",
                      "   }\r",
                      "   else\r",
                      "   {\r",
                      "      frameCount++;\r",
                      "   }\r",
                      "}\r",
                      "\r",
                      "function set_bind (eventValue) // input event received for inputOnly field\r",
                      "{\r",
                      "   // need to ensure CameraShot nodes are properly initialized\r",
                      "   if (initialized == false)\r",
                      "   {\r",
                      "      checkShots (true);\r",
                      "      initialized = true;\r",
                      "   }\r",
                      "   if (eventValue)\r",
                      "   {\r",
                      "       tracePrint ('Camera has been bound');\r",
                      "   }\r",
                      "   else\r",
                      "   {\r",
                      "       tracePrint ('Camera has been unbound');\r",
                      "   }\r",
                      "}\r",
                      "\r",
                      "function set_description (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    description = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_position (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    position = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_orientation (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    orientation = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_fieldOfView (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    fieldOfView = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_nearClipPlane (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    nearClipPlane = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_farClipPlane (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    farClipPlane = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_shots (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    shots = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_filterColor (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    filterColor = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_filterTransparency (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    filterTransparency = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_upVector (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    upVector = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_fStop (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    fStop = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_focusDistance (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    focusDistance = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_offlineRender (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    offlineRender = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_key (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    key = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_keyValuePosition (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    keyValuePosition = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_keyValueOrientation (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    keyValueOrientation = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_animated (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    animated = eventValue;\r",
                      "}\r",
                      "\r",
                      "function tracePrint (outputValue)\r",
                      "{\r",
                      "\tif (traceEnabled) alwaysPrint (outputValue);\r",
                      "}\r",
                      "function alwaysPrint (outputValue)\r",
                      "{\r",
                      "    // try to ensure outputValue is converted to string despite Browser.println idiosyncracies\r",
                      "    var outputString = outputValue.toString(); // utility function according to spec\r",
                      "    if (outputString == null) outputString = outputValue; // direct cast\r",
                      "\r",
                      "    if  (description.length > 0)\r",
                      "         Browser.print ('[Camera: ' + description + '] ' + outputString + '\\n');\r",
                      "    else\r",
                      "         Browser.print ('[Camera] ' + outputString + '\\n');\r",
                      "}\r",
                      ""
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "position",
                          "@protoField": "position"
                        },
                        {
                          "@nodeField": "orientation",
                          "@protoField": "orientation"
                        },
                        {
                          "@nodeField": "set_fraction",
                          "@protoField": "set_fraction"
                        },
                        {
                          "@nodeField": "set_bind",
                          "@protoField": "set_bind"
                        },
                        {
                          "@nodeField": "fieldOfView",
                          "@protoField": "fieldOfView"
                        },
                        {
                          "@nodeField": "nearClipPlane",
                          "@protoField": "nearClipPlane"
                        },
                        {
                          "@nodeField": "farClipPlane",
                          "@protoField": "farClipPlane"
                        },
                        {
                          "@nodeField": "shots",
                          "@protoField": "shots"
                        },
                        {
                          "@nodeField": "filterColor",
                          "@protoField": "filterColor"
                        },
                        {
                          "@nodeField": "filterTransparency",
                          "@protoField": "filterTransparency"
                        },
                        {
                          "@nodeField": "upVector",
                          "@protoField": "upVector"
                        },
                        {
                          "@nodeField": "fStop",
                          "@protoField": "fStop"
                        },
                        {
                          "@nodeField": "focusDistance",
                          "@protoField": "focusDistance"
                        },
                        {
                          "@nodeField": "isActive",
                          "@protoField": "isActive"
                        },
                        {
                          "@nodeField": "totalDuration",
                          "@protoField": "totalDuration"
                        },
                        {
                          "@nodeField": "offlineRender",
                          "@protoField": "offlineRender"
                        },
                        {
                          "@nodeField": "traceEnabled",
                          "@protoField": "traceEnabled"
                        }
                      ]
                    }
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "CameraPositionInterpolator",
                    "@fromField": "value_changed",
                    "@toNode": "CameraViewpoint",
                    "@toField": "position"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "CameraOrientationInterpolator",
                    "@fromField": "value_changed",
                    "@toNode": "CameraViewpoint",
                    "@toField": "orientation"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "CameraScript",
                    "@fromField": "position",
                    "@toNode": "CameraViewpoint",
                    "@toField": "position"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "CameraScript",
                    "@fromField": "orientation",
                    "@toNode": "CameraViewpoint",
                    "@toField": "orientation"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "CameraScript",
                    "@fromField": "isActive",
                    "@toNode": "CameraViewpoint",
                    "@toField": "set_bind"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "CameraScript",
                    "@fromField": "isActive",
                    "@toNode": "CameraNavInfo",
                    "@toField": "set_bind"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "CameraScript",
                    "@fromField": "isActive",
                    "@toNode": "CameraDirectionalLight",
                    "@toField": "on"
                  }
                }
              ]
            }
          }
        },
        { "ProtoDeclare":
          {
            "@name":"CameraShot",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@type": "SFString",
                  "@name": "description"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFBool",
                  "@name": "enabled",
                  "@value": true
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "MFNode",
                  "@name": "moves"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFVec3f",
                  "@name": "initialPosition",
                  "@value": [ 0, 0, 10 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFRotation",
                  "@name": "initialOrientation"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFVec3f",
                  "@name": "initialAimPoint"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "initialFieldOfView",
                  "@value": 0.7854
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "initialFStop",
                  "@value": 5.6
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "initialFocusDistance",
                  "@value": 10
                },
                {
                  "@accessType": "outputOnly",
                  "@type": "SFTime",
                  "@name": "shotDuration"
                },
                {
                  "@accessType": "outputOnly",
                  "@type": "SFBool",
                  "@name": "isActive"
                },
                {
                  "@accessType": "initializeOnly",
                  "@type": "SFBool",
                  "@name": "traceEnabled"
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                { "Script":
                  {
                    "@DEF": "CameraShotScript",
                    "@directOutput": true,
                    "@mustEvaluate": true,
                    "field": [
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFString",
                        "@name": "description"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFBool",
                        "@name": "enabled"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "MFNode",
                        "@name": "moves"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFVec3f",
                        "@name": "initialPosition"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFRotation",
                        "@name": "initialOrientation"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFVec3f",
                        "@name": "initialAimPoint"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "initialFieldOfView"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "initialFStop"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "initialFocusDistance"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@type": "SFTime",
                        "@name": "shotDuration"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@type": "SFBool",
                        "@name": "isActive"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFBool",
                        "@name": "traceEnabled"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "MFFloat",
                        "@name": "key"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "MFVec3f",
                        "@name": "keyValuePosition"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "MFRotation",
                        "@name": "keyValueOrientation"
                      }
                    ],
                    "#sourceText": [
                      "\r",
                      "ecmascript:\r",
                      "function initialize () // CameraShotScript\r",
                      "{\r",
                      "//  tracePrint ('initialize start...');\r",
                      "\r",
                      "    // compute shotDuration by summing durations from contained CameraMovement nodes\r",
                      "    shotDuration = 0;\r",
                      "    for (i = 0; i < moves.length; i++)\r",
                      "    {\r",
                      "        shotDuration = shotDuration + moves[i].duration;\r",
                      "    }\r",
                      "    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');\r",
                      "\r",
                      "//  tracePrint ('... initialize() complete');\r",
                      "}\r",
                      "\r",
                      "function set_description (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    description = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_enabled (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    enabled = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_moves (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    moves = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_initialPosition (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    initialPosition = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_initialOrientation (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    initialOrientation = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_initialAimPoint (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    initialAimPoint = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_initialFieldOfView (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    initialFieldOfView = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_initialFStop (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    initialFStop = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_initialFocusDistance (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    initialFocusDistance = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_key (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    key = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_keyValuePosition (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    keyValuePosition = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_keyValueOrientation (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    keyValueOrientation = eventValue;\r",
                      "}\r",
                      "\r",
                      "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive\r",
                      "\r",
                      "function tracePrint (outputValue)\r",
                      "{\r",
                      "\tif (traceEnabled) alwaysPrint (outputValue);\r",
                      "}\r",
                      "function alwaysPrint (outputValue)\r",
                      "{\r",
                      "\t// try to ensure outputValue is converted to string despite browser idiosyncracies\r",
                      "    var outputString = outputValue.toString(); // utility function according to spec\r",
                      "    if (outputString == null) outputString = outputValue; // direct cast\r",
                      "\r",
                      "    if  (description.length > 0)\r",
                      "         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\\n');\r",
                      "    else\r",
                      "         Browser.print ('[CameraShot] ' + outputString + '\\n');\r",
                      "}\r",
                      ""
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "enabled",
                          "@protoField": "enabled"
                        },
                        {
                          "@nodeField": "moves",
                          "@protoField": "moves"
                        },
                        {
                          "@nodeField": "initialPosition",
                          "@protoField": "initialPosition"
                        },
                        {
                          "@nodeField": "initialOrientation",
                          "@protoField": "initialOrientation"
                        },
                        {
                          "@nodeField": "initialAimPoint",
                          "@protoField": "initialAimPoint"
                        },
                        {
                          "@nodeField": "initialFieldOfView",
                          "@protoField": "initialFieldOfView"
                        },
                        {
                          "@nodeField": "initialFStop",
                          "@protoField": "initialFStop"
                        },
                        {
                          "@nodeField": "initialFocusDistance",
                          "@protoField": "initialFocusDistance"
                        },
                        {
                          "@nodeField": "shotDuration",
                          "@protoField": "shotDuration"
                        },
                        {
                          "@nodeField": "isActive",
                          "@protoField": "isActive"
                        },
                        {
                          "@nodeField": "traceEnabled",
                          "@protoField": "traceEnabled"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        { "ProtoDeclare":
          {
            "@name":"CameraMovement",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@type": "SFString",
                  "@name": "description"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFBool",
                  "@name": "enabled",
                  "@value": true
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "duration"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFVec3f",
                  "@name": "goalPosition",
                  "@value": [ 0, 0, 10 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFRotation",
                  "@name": "goalOrientation"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFBool",
                  "@name": "tracking"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFVec3f",
                  "@name": "goalAimPoint"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "goalFieldOfView",
                  "@value": 0.7854
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "goalFStop",
                  "@value": 5.6
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "goalFocusDistance",
                  "@value": 10
                },
                {
                  "@accessType": "outputOnly",
                  "@type": "SFBool",
                  "@name": "isActive"
                },
                {
                  "@accessType": "initializeOnly",
                  "@type": "SFBool",
                  "@name": "traceEnabled"
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                { "Script":
                  {
                    "@DEF": "CameraMovementScript",
                    "@directOutput": true,
                    "@mustEvaluate": true,
                    "field": [
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFString",
                        "@name": "description"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFBool",
                        "@name": "enabled"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "duration"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFVec3f",
                        "@name": "goalPosition"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFRotation",
                        "@name": "goalOrientation"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFBool",
                        "@name": "tracking"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFVec3f",
                        "@name": "goalAimPoint"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "goalFieldOfView"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "goalFStop"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "goalFocusDistance"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@type": "SFBool",
                        "@name": "isActive"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFBool",
                        "@name": "traceEnabled"
                      }
                    ],
                    "#sourceText": [
                      "\r",
                      "ecmascript:\r",
                      "function initialize () // CameraMovementScript\r",
                      "{\r",
                      "//  tracePrint ('initialize start...');\r",
                      "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +\r",
                      "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()\r",
                      "                           );\r",
                      "    if (duration < 0)\r",
                      "    {\r",
                      "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');\r",
                      "       duration = 0;\r",
                      "    }\r",
                      "    else if (duration == 0)\r",
                      "    {\r",
                      "       alwaysPrint ('warning: duration=0, nothing to do!');\r",
                      "    }\r",
                      "    tracePrint ('... initialize complete');\r",
                      "}\r",
                      "\r",
                      "function set_goalAimPoint (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    goalAimPoint_changed = eventValue;\r",
                      "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());\r",
                      "\r",
                      "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator\r",
                      "}\r",
                      "\r",
                      "function set_description (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    description = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_enabled (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    enabled = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_duration (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    duration = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_goalPosition (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    goalPosition = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_goalOrientation (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    goalOrientation = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_tracking (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    tracking = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_goalFieldOfView (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    goalFieldOfView = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_goalFStop (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    goalFStop = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_goalFocusDistance (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    goalFocusDistance = eventValue;\r",
                      "}\r",
                      "\r",
                      "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive\r",
                      "\r",
                      "function tracePrint (outputValue)\r",
                      "{\r",
                      "\tif (traceEnabled) alwaysPrint (outputValue);\r",
                      "}\r",
                      "\r",
                      "function alwaysPrint (outputValue)\r",
                      "{\r",
                      "\t// try to ensure outputValue is converted to string despite browser idiosyncracies\r",
                      "    var outputString = outputValue.toString(); // utility function according to spec\r",
                      "    if (outputString == null) outputString = outputValue; // direct cast\r",
                      "\r",
                      "    if  (description.length > 0)\r",
                      "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\\n');\r",
                      "    else\r",
                      "         Browser.print ('[CameraMovement] ' + outputString + '\\n');\r",
                      "}\r",
                      ""
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "enabled",
                          "@protoField": "enabled"
                        },
                        {
                          "@nodeField": "duration",
                          "@protoField": "duration"
                        },
                        {
                          "@nodeField": "goalPosition",
                          "@protoField": "goalPosition"
                        },
                        {
                          "@nodeField": "goalOrientation",
                          "@protoField": "goalOrientation"
                        },
                        {
                          "@nodeField": "tracking",
                          "@protoField": "tracking"
                        },
                        {
                          "@nodeField": "goalAimPoint",
                          "@protoField": "goalAimPoint"
                        },
                        {
                          "@nodeField": "goalFieldOfView",
                          "@protoField": "goalFieldOfView"
                        },
                        {
                          "@nodeField": "goalFStop",
                          "@protoField": "goalFStop"
                        },
                        {
                          "@nodeField": "goalFocusDistance",
                          "@protoField": "goalFocusDistance"
                        },
                        {
                          "@nodeField": "isActive",
                          "@protoField": "isActive"
                        },
                        {
                          "@nodeField": "traceEnabled",
                          "@protoField": "traceEnabled"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        { "ProtoDeclare":
          {
            "@name":"OfflineRender",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@type": "SFString",
                  "@name": "description"
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFBool",
                  "@name": "enabled",
                  "@value": true
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "frameRate",
                  "@value": 30
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFVec2f",
                  "@name": "frameSize",
                  "@value": [ 640, 480 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "pixelAspectRatio",
                  "@value": 1.33
                },
                {
                  "@accessType": "inputOnly",
                  "@type": "SFTime",
                  "@name": "set_startTime"
                },
                {
                  "@accessType": "outputOnly",
                  "@type": "SFFloat",
                  "@name": "progress"
                },
                {
                  "@accessType": "outputOnly",
                  "@type": "SFTime",
                  "@name": "renderCompleteTime"
                },
                {
                  "@accessType": "initializeOnly",
                  "@type": "MFString",
                  "@name": "movieFormat",
                  "@value": [
                    "mpeg"
                  ]
                },
                {
                  "@accessType": "initializeOnly",
                  "@type": "MFString",
                  "@name": "imageFormat",
                  "@value": [
                    "png"
                  ]
                },
                {
                  "@accessType": "initializeOnly",
                  "@type": "SFBool",
                  "@name": "traceEnabled"
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                { "Script":
                  {
                    "@DEF": "OfflineRenderScript",
                    "@mustEvaluate": true,
                    "field": [
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFString",
                        "@name": "description"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFBool",
                        "@name": "enabled"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "frameRate"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFVec2f",
                        "@name": "frameSize"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@name": "pixelAspectRatio"
                      },
                      {
                        "@accessType": "inputOnly",
                        "@type": "SFTime",
                        "@name": "set_startTime"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@type": "SFFloat",
                        "@name": "progress"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@type": "SFTime",
                        "@name": "renderCompleteTime"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "MFString",
                        "@name": "movieFormat"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "MFString",
                        "@name": "imageFormat"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@type": "SFBool",
                        "@name": "traceEnabled"
                      }
                    ],
                    "#sourceText": [
                      "\r",
                      "ecmascript:\r",
                      "function initialize () // OfflineRenderScript\r",
                      "{\r",
                      "//  tracePrint ('initialize start...');\r",
                      "\r",
                      "    tracePrint ('... initialize complete');\r",
                      "}\r",
                      "\r",
                      "function set_description (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    description = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_enabled (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    enabled = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_frameRate (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    frameRate = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_frameSize (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    frameSize = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_pixelAspectRatio (eventValue) // input event received for inputOutput field\r",
                      "{\r",
                      "    pixelAspectRatio = eventValue;\r",
                      "}\r",
                      "\r",
                      "function set_startTime (eventValue) // input event received for inputOnly field\r",
                      "{\r",
                      "   // do something with input eventValue;\r",
                      "}\r",
                      "\r",
                      "function tracePrint (outputValue)\r",
                      "{\r",
                      "\tif (traceEnabled) alwaysPrint (outputValue);\r",
                      "}\r",
                      "\r",
                      "function alwaysPrint (outputValue)\r",
                      "{\r",
                      "\t// try to ensure outputValue is converted to string despite browser idiosyncracies\r",
                      "    var outputString = outputValue.toString(); // utility function according to spec\r",
                      "    if (outputString == null) outputString = outputValue; // direct cast\r",
                      "\r",
                      "    if  (description.length > 0)\r",
                      "         Browser.print ('[OfflineRender: ' + description + '] ' + outputString + '\\n');\r",
                      "    else\r",
                      "         Browser.print ('[OfflineRender] ' + outputString + '\\n');\r",
                      "}\r",
                      ""
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "enabled",
                          "@protoField": "enabled"
                        },
                        {
                          "@nodeField": "frameRate",
                          "@protoField": "frameRate"
                        },
                        {
                          "@nodeField": "frameSize",
                          "@protoField": "frameSize"
                        },
                        {
                          "@nodeField": "pixelAspectRatio",
                          "@protoField": "pixelAspectRatio"
                        },
                        {
                          "@nodeField": "set_startTime",
                          "@protoField": "set_startTime"
                        },
                        {
                          "@nodeField": "progress",
                          "@protoField": "progress"
                        },
                        {
                          "@nodeField": "renderCompleteTime",
                          "@protoField": "renderCompleteTime"
                        },
                        {
                          "@nodeField": "movieFormat",
                          "@protoField": "movieFormat"
                        },
                        {
                          "@nodeField": "imageFormat",
                          "@protoField": "imageFormat"
                        },
                        {
                          "@nodeField": "traceEnabled",
                          "@protoField": "traceEnabled"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        { "Background":
          {
            "@skyColor": [
              0.282353, 0.380392, 0.470588
            ]
          }
        },
        { "Anchor":
          {
            "@description": "launch CameraExample scene",
            "@url": [
              "CameraExamples.x3d",
              "https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.x3d",
              "CameraExamples.wrl",
              "https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.wrl"
            ],
            "-children": [
              { "Transform":
                {
                  "-children": [
                    { "Shape":
                      {
                        "-appearance": { "Appearance":
                          {
                            "-material": { "Material":
                              {
                                "@diffuseColor": [ 1, 1, 0.2 ]
                              }
                            }
                          }
                        },
                        "-geometry": { "Text":
                          {
                            "@string": [
                              "CameraPrototypes.x3d",
                              "defines multiple prototype nodes",
                              "",
                              "Click on this text to see",
                              "CameraExamples.x3d scene"
                            ],
                            "-fontStyle": { "FontStyle":
                              {
                                "@justify": [
                                  "MIDDLE",
                                  "MIDDLE"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    }
  }
}