<svrl:schematron-output xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" title="X3D Graphics Validity Checks using Schematron" schemaVersion=""><!--   
		   
		   
		 -->
   <svrl:active-pattern document="file:/C:/Users/jcarl/X3DJSONLD/src/main/data/LOA1_KneelAnimation.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 was approved by Web3D Consortium and ISO in 2023.</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 offers many new features including interoperability with HTML5, glTF
         2.0 Physically Based Rendering (PBR), and Web Audio API.</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:fired-rule context="ProtoInterface"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="boolean(parent::ProtoInterface) and boolean(ancestor::ProtoDeclare) and (count(ancestor::ProtoDeclare/ProtoBody//IS/connect[@protoField = $fieldName]) = 0)" role="warning" location="/X3D/Scene/ProtoDeclare/ProtoInterface/field[10]">
      <svrl:text>Missing connection for field in ProtoBody: &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoInterface&gt; &lt;field name='lower_body_rotation_changed' accessType='outputOnly' type='SFRotation'/&gt; is unused with no &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoBody&gt; ... &lt;IS&gt; &lt;connect protoField='lower_body_rotation_changed' nodeField='someParentNodeFieldName'/&gt; found in corresponding ProtoBody content </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="boolean(parent::ProtoInterface) and boolean(ancestor::ProtoDeclare) and (count(ancestor::ProtoDeclare/ProtoBody//IS/connect[@protoField = $fieldName]) = 0)" role="warning" location="/X3D/Scene/ProtoDeclare/ProtoInterface/field[14]">
      <svrl:text>Missing connection for field in ProtoBody: &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoInterface&gt; &lt;field name='l_midtarsal_rotation_changed' accessType='outputOnly' type='SFRotation'/&gt; is unused with no &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoBody&gt; ... &lt;IS&gt; &lt;connect protoField='l_midtarsal_rotation_changed' nodeField='someParentNodeFieldName'/&gt; found in corresponding ProtoBody content </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="boolean(parent::ProtoInterface) and boolean(ancestor::ProtoDeclare) and (count(ancestor::ProtoDeclare/ProtoBody//IS/connect[@protoField = $fieldName]) = 0)" role="warning" location="/X3D/Scene/ProtoDeclare/ProtoInterface/field[18]">
      <svrl:text>Missing connection for field in ProtoBody: &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoInterface&gt; &lt;field name='r_midtarsal_rotation_changed' accessType='outputOnly' type='SFRotation'/&gt; is unused with no &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoBody&gt; ... &lt;IS&gt; &lt;connect protoField='r_midtarsal_rotation_changed' nodeField='someParentNodeFieldName'/&gt; found in corresponding ProtoBody content </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="boolean(parent::ProtoInterface) and boolean(ancestor::ProtoDeclare) and (count(ancestor::ProtoDeclare/ProtoBody//IS/connect[@protoField = $fieldName]) = 0)" role="warning" location="/X3D/Scene/ProtoDeclare/ProtoInterface/field[20]">
      <svrl:text>Missing connection for field in ProtoBody: &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoInterface&gt; &lt;field name='skullbase_rotation_changed' accessType='outputOnly' type='SFRotation'/&gt; is unused with no &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoBody&gt; ... &lt;IS&gt; &lt;connect protoField='skullbase_rotation_changed' nodeField='someParentNodeFieldName'/&gt; found in corresponding ProtoBody content </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="boolean(parent::ProtoInterface) and boolean(ancestor::ProtoDeclare) and (count(ancestor::ProtoDeclare/ProtoBody//IS/connect[@protoField = $fieldName]) = 0)" role="warning" location="/X3D/Scene/ProtoDeclare/ProtoInterface/field[23]">
      <svrl:text>Missing connection for field in ProtoBody: &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoInterface&gt; &lt;field name='l_wrist_rotation_changed' accessType='outputOnly' type='SFRotation'/&gt; is unused with no &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoBody&gt; ... &lt;IS&gt; &lt;connect protoField='l_wrist_rotation_changed' nodeField='someParentNodeFieldName'/&gt; found in corresponding ProtoBody content </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="boolean(parent::ProtoInterface) and boolean(ancestor::ProtoDeclare) and (count(ancestor::ProtoDeclare/ProtoBody//IS/connect[@protoField = $fieldName]) = 0)" role="warning" location="/X3D/Scene/ProtoDeclare/ProtoInterface/field[26]">
      <svrl:text>Missing connection for field in ProtoBody: &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoInterface&gt; &lt;field name='r_wrist_rotation_changed' accessType='outputOnly' type='SFRotation'/&gt; is unused with no &lt;ProtoDeclare name='LOA1_KneelAnimation'&gt; &lt;ProtoBody&gt; ... &lt;IS&gt; &lt;connect protoField='r_wrist_rotation_changed' nodeField='someParentNodeFieldName'/&gt; found in corresponding ProtoBody content </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoBody"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="Anchor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
</svrl:schematron-output>