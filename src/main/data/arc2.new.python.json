{
    "X3D":,
    {
        "encoding":"UTF-8",
        "$id":   "https://www.web3d.org/specifications/x3d-4.0-JSONSchema.json",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "@version":"4.0",
        "@profile":"Immersive",
    "head":
    {
        "meta":
        {
      {
        "@content":"arc2.x3d",
        "@name":"title"
      }
    },
        "meta":
        {
      {
        "@content":"Lost, Doug Sanden I think",
        "@name":"creator"
      }
    },
        "meta":
        {
      {
        "@content":"manual",
        "@name":"generator"
      }
    },
        "meta":
        {
      {
        "@content":"https://coderextreme.net/X3DJSONLD/src/main/data/arc1.x3d",
        "@name":"identifier"
      }
    },
        "meta":
        {
      {
        "@content":"a generic proto to connect two objects",
        "@name":"description"
      }
    },
    }    "Scene":
    {
        "Viewpoint":
        {
      {
        "@description":"Only Viewpoint",
        "@position":"0 0 5"
      }
    },
        "Background":
        {
    },
        "Transform":
        {
      {
        "@DEF":"G1"
      }
            "Transform":
            {
      {
        "@DEF":"DECLpoint_INSTANCE_node"
      }
                "Shape":
                {
                    "Appearance":
                    {
                        "Material":
                        {
      {
        "@diffuseColor":"1 0 0"
      }
    },
                    }                    "Sphere":
                    {
      {
        "@radius":"0.1"
      }
    },
                }                "PositionInterpolator":
                {
      {
        "@DEF":"DECLpoint_INSTANCE_PI1",
        "@key":"0 1"
      }
    },
                "Script":
                {
      {
        "@DEF":"DECLpoint_INSTANCE_MB1",
        "@sourceCode":"ecmascript:
&quot;+
&quot;               function set_location(value) {
&quot;+
&quot;                    old = translation;
&quot;+
&quot;                    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);
&quot;+
&quot;                    keyValue = new MFVec3f([old, translation]);
&quot;+
&quot;               }"
      }
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@name":"translation",
        "@type":"SFVec3f",
        "@value":"[0, 0, 0]"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@name":"old",
        "@type":"SFVec3f",
        "@value":"[0, 0, 0]"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOnly",
        "@name":"set_location",
        "@type":"SFTime"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@name":"keyValue",
        "@type":"MFVec3f"
      }
    },
                }                "TimeSensor":
                {
      {
        "@DEF":"DECLpoint_INSTANCE_CL1",
        "@cycleInterval":"3",
        "@loop":"true"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"cycleTime",
        "@fromNode":"DECLpoint_INSTANCE_CL1",
        "@toField":"set_location",
        "@toNode":"DECLpoint_INSTANCE_MB1"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"fraction_changed",
        "@fromNode":"DECLpoint_INSTANCE_CL1",
        "@toField":"set_fraction",
        "@toNode":"DECLpoint_INSTANCE_PI1"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"keyValue",
        "@fromNode":"DECLpoint_INSTANCE_MB1",
        "@toField":"keyValue",
        "@toNode":"DECLpoint_INSTANCE_PI1"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"value_changed",
        "@fromNode":"DECLpoint_INSTANCE_PI1",
        "@toField":"set_translation",
        "@toNode":"DECLpoint_INSTANCE_node"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"translation_changed",
        "@fromNode":"DECLpoint_INSTANCE_MB1",
        "@toField":"set_translation",
        "@toNode":"DECLpoint_INSTANCE_node"
      }
    },
            }        }        "Transform":
        {
      {
        "@DEF":"G2"
      }
            "Transform":
            {
      {
        "@DEF":"DECLpoint_INSTANCE1000_node"
      }
                "Shape":
                {
                    "Appearance":
                    {
                        "Material":
                        {
      {
        "@diffuseColor":"1 0 0"
      }
    },
                    }                    "Sphere":
                    {
      {
        "@radius":"0.1"
      }
    },
                }                "PositionInterpolator":
                {
      {
        "@DEF":"DECLpoint_INSTANCE1000_PI1",
        "@key":"0 1"
      }
    },
                "Script":
                {
      {
        "@DEF":"DECLpoint_INSTANCE1000_MB1",
        "@sourceCode":"ecmascript:
&quot;+
&quot;               function set_location(value) {
&quot;+
&quot;                    old = translation;
&quot;+
&quot;                    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);
&quot;+
&quot;                    keyValue = new MFVec3f([old, translation]);
&quot;+
&quot;               }"
      }
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@name":"translation",
        "@type":"SFVec3f",
        "@value":"[0, 0, 0]"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@name":"old",
        "@type":"SFVec3f",
        "@value":"[0, 0, 0]"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOnly",
        "@name":"set_location",
        "@type":"SFTime"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@name":"keyValue",
        "@type":"MFVec3f"
      }
    },
                }                "TimeSensor":
                {
      {
        "@DEF":"DECLpoint_INSTANCE1000_CL1",
        "@cycleInterval":"3",
        "@loop":"true"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"cycleTime",
        "@fromNode":"DECLpoint_INSTANCE1000_CL1",
        "@toField":"set_location",
        "@toNode":"DECLpoint_INSTANCE1000_MB1"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"fraction_changed",
        "@fromNode":"DECLpoint_INSTANCE1000_CL1",
        "@toField":"set_fraction",
        "@toNode":"DECLpoint_INSTANCE1000_PI1"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"keyValue",
        "@fromNode":"DECLpoint_INSTANCE1000_MB1",
        "@toField":"keyValue",
        "@toNode":"DECLpoint_INSTANCE1000_PI1"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"value_changed",
        "@fromNode":"DECLpoint_INSTANCE1000_PI1",
        "@toField":"set_translation",
        "@toNode":"DECLpoint_INSTANCE1000_node"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"translation_changed",
        "@fromNode":"DECLpoint_INSTANCE1000_MB1",
        "@toField":"set_translation",
        "@toNode":"DECLpoint_INSTANCE1000_node"
      }
    },
            }        }        "Transform":
        {
      {
        "@DEF":"transC1"
      }
            "Transform":
            {
      {
        "@DEF":"rotscaleC1"
      }
                "Shape":
                {
                    "Appearance":
                    {
                        "Material":
                        {
      {
        "@diffuseColor":"0.2 0.7 0.7",
        "@transparency":"0.5"
      }
    },
                    }                    "Cylinder":
                    {
      {
        "@radius":"0.05"
      }
    },
                }            }        }        "Script":
        {
      {
        "@DEF":"DECLx3dconnector_connector1_S1",
        "@sourceCode":"ecmascript:
&quot;+
&quot;        function recompute(startpoint,endpoint){
&quot;+
&quot;	    if (typeof endpoint === 'undefined') {
&quot;+
&quot;		return;
&quot;+
&quot;	    }
&quot;+
&quot;            var dif = endpoint.subtract(startpoint);
&quot;+
&quot;            var dist = dif.length()*0.5;
&quot;+
&quot;            var dif2 = dif.multiply(0.5);
&quot;+
&quot;            var norm = dif.normalize();
&quot;+
&quot;            var transl = startpoint.add(dif2);
&quot;+
&quot;	    if (typeof Quaternion !== 'undefined') {
&quot;+
&quot;		    return {
&quot;+
&quot;			    scale : new SFVec3f(1.0,dist,1.0),
&quot;+
&quot;			    translation : transl,
&quot;+
&quot;			    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)
&quot;+
&quot;		    };
&quot;+
&quot;	    } else {
&quot;+
&quot;		    return {
&quot;+
&quot;			    scale : new SFVec3f(1.0,dist,1.0),
&quot;+
&quot;			    translation : transl,
&quot;+
&quot;			    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)
&quot;+
&quot;		    };
&quot;+
&quot;	    }
&quot;+
&quot;	}
&quot;+
&quot;	function recompute_and_route(startpoint, endpoint) {
&quot;+
&quot;	      var trafo = recompute(startpoint, endpoint);
&quot;+
&quot;	      transC1.translation = trafo.translation;
&quot;+
&quot;	      rotscaleC1.rotation = trafo.rotation;
&quot;+
&quot;	      rotscaleC1.scale = trafo.scale;
&quot;+
&quot;	}
&quot;+
&quot;        function initialize(){
&quot;+
&quot;            recompute_and_route(startnode.translation,endnode.translation);
&quot;+
&quot;        }
&quot;+
&quot;        function set_startpoint(val,t){
&quot;+
&quot;            recompute_and_route(val,endnode.translation);
&quot;+
&quot;        }
&quot;+
&quot;        function set_endpoint(val,t){
&quot;+
&quot;            recompute_and_route(startnode.translation,val);
&quot;+
&quot;        }"
      }
            "field":
            {
      {
        "@accessType":"initializeOnly",
        "@name":"startnode",
        "@type":"SFNode"
      }
                "Transform":
                {
      {
        "@USE":"G1"
      }
    },
            }            "field":
            {
      {
        "@accessType":"initializeOnly",
        "@name":"endnode",
        "@type":"SFNode"
      }
                "Transform":
                {
      {
        "@USE":"G2"
      }
    },
            }            "field":
            {
      {
        "@accessType":"initializeOnly",
        "@name":"transC1",
        "@type":"SFNode"
      }
                "Transform":
                {
      {
        "@USE":"transC1"
      }
    },
            }            "field":
            {
      {
        "@accessType":"initializeOnly",
        "@name":"rotscaleC1",
        "@type":"SFNode"
      }
                "Transform":
                {
      {
        "@USE":"rotscaleC1"
      }
    },
            }            "field":
            {
      {
        "@accessType":"inputOnly",
        "@name":"set_startpoint",
        "@type":"SFVec3f"
      }
    },
            "field":
            {
      {
        "@accessType":"inputOnly",
        "@name":"set_endpoint",
        "@type":"SFVec3f"
      }
    },
        }        "ROUTE":
        {
      {
        "@fromField":"translation_changed",
        "@fromNode":"G1",
        "@toField":"set_startpoint",
        "@toNode":"DECLx3dconnector_connector1_S1"
      }
    },
        "ROUTE":
        {
      {
        "@fromField":"translation_changed",
        "@fromNode":"G2",
        "@toField":"set_endpoint",
        "@toNode":"DECLx3dconnector_connector1_S1"
      }
    },
    }}
