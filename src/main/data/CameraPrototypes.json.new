{
  "X3D": {
    "@profile": "Immersive",
    "@version": "3.2",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-3.2.xsd",
    "head": {
      "meta": [
        {
          "@content": "CameraPrototypes.x3d",
          "@name": "title"
        },
        {
          "@content": "Camera, CameraShot and CameraMovement prototypes that demonstrate storyboard capabilities and precise camera operation. This is a developmental effort for potential X3D Specification improvement.",
          "@name": "description"
        },
        {
          "@content": "Don Brutzman and Jeff Weekley",
          "@name": "creator"
        },
        {
          "@content": "16 March 2009",
          "@name": "created"
        },
        {
          "@content": "25 October 2016",
          "@name": "modified"
        },
        {
          "@content": "Schematron rules, backed up by initialize() checks",
          "@name": "TODO"
        },
        {
          "@content": "BeyondViewpointCameraNodesWeb3D2009.pdf",
          "@name": "reference"
        },
        {
          "@content": "http://www.web3d.org/x3d/specifications/ISO-IEC-FDIS-19775-1.2-X3D-AbstractSpecification/Part01/components/navigation.html",
          "@name": "reference"
        },
        {
          "@content": "Camera nodes for Viewpoint navigation control",
          "@name": "subject"
        },
        {
          "@content": "CameraExamples.x3d",
          "@name": "reference"
        },
        {
          "@content": "http://www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d",
          "@name": "identifier"
        },
        {
          "@content": "http://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d",
          "@name": "reference"
        },
        {
          "@content": "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit",
          "@name": "generator"
        },
        {
          "@content": "../license.html",
          "@name": "license"
        },
        {
          "@name": "translated",
          "@content": "6 March 2018"
        },
        {
          "@name": "generator",
          "@content": "DOM2JSONSerializer.js, https://github.com/coderextreme/X3DJSONLD/blob/master/src/main/node/DOM2JSONSerializer.js"
        },
        {
          "@name": "reference",
          "@content": "X3D JSON encoding: http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
        }
      ]
    },
    "Scene": {
      "-children": [
        {
          "#comment": " =============== Camera ============== "
        },
        {
          "ProtoDeclare": {
            "@appinfo": "Camera node provides direct control of scene view to enable cinematic camera animation shot by shot and move by move along with still digital-photography settings for offline rendering of camera images.",
            "@name": "Camera",
            "ProtoInterface": {
              "-children": [
                {
                  "#comment": " Viewpoint-related fields, NavigationInfo-related fields and Camera-unique fields "
                }
              ],
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Text description to be displayed for this Camera",
                  "@name": "description",
                  "@type": "SFString"
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Camera position in local transformation frame, which is default prior to first CameraShot initialPosition getting activated",
                  "@name": "position",
                  "@type": "SFVec3f",
                  "@value": [
                    0,
                    0,
                    10
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Camera rotation in local transformation frame, which is default prior to first CameraShot initialPosition getting activated",
                  "@name": "orientation",
                  "@type": "SFRotation",
                  "@value": [
                    0,
                    0,
                    1,
                    0
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "pi/4",
                  "@name": "fieldOfView",
                  "@type": "SFFloat",
                  "@value": 0.7854
                },
                {
                  "@accessType": "inputOnly",
                  "@appinfo": "input fraction drives interpolators",
                  "@name": "set_fraction",
                  "@type": "SFFloat"
                },
                {
                  "@accessType": "inputOnly",
                  "@appinfo": "input event binds or unbinds this Camera",
                  "@name": "set_bind",
                  "@type": "SFBool"
                },
                {
                  "@accessType": "outputOnly",
                  "@appinfo": "output event indicates when this Camera is bound",
                  "@name": "bindTime",
                  "@type": "SFTime"
                },
                {
                  "@accessType": "outputOnly",
                  "@appinfo": "output event indicates whether this Camera is bound or unbound",
                  "@name": "isBound",
                  "@type": "SFBool"
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Vector distance to near clipping plane corresponds to NavigationInfo.avatarSize[0]",
                  "@name": "nearClipPlane",
                  "@type": "SFFloat",
                  "@value": 0.25
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Vector distance to far clipping plane corresponds to NavigationInfo.visibilityLimit",
                  "@name": "farClipPlane",
                  "@type": "SFFloat",
                  "@value": 0
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Array of CameraShot nodes which in turn contain CameraMovement nodes",
                  "@name": "shots",
                  "@type": "MFNode",
                  "-children": [
                    {
                      "#comment": " initialization nodes (if any) go here "
                    }
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Whether camera headlight is on or off",
                  "@name": "headlight",
                  "@type": "SFBool",
                  "@value": true
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Camera headlight color",
                  "@name": "headlightColor",
                  "@type": "SFColor",
                  "@value": [
                    1,
                    1,
                    1
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Camera headlight intensity",
                  "@name": "headlightIntensity",
                  "@type": "SFFloat",
                  "@value": 1
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Camera filter color that modifies virtual lens capture",
                  "@name": "filterColor",
                  "@type": "SFColor",
                  "@value": [
                    1,
                    1,
                    1
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Camera filter transparency that modifies virtual lens capture",
                  "@name": "filterTransparency",
                  "@type": "SFFloat",
                  "@value": 1
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "upVector changes modify camera orientation (and possibly vice versa)",
                  "@name": "upVector",
                  "@type": "SFVec3f",
                  "@value": [
                    0,
                    1,
                    0
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                  "@name": "fStop",
                  "@type": "SFFloat",
                  "@value": 5.6
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Distance to focal plane of sharpest focus",
                  "@name": "focusDistance",
                  "@type": "SFFloat",
                  "@value": 10
                },
                {
                  "@accessType": "outputOnly",
                  "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                  "@name": "isActive",
                  "@type": "SFBool"
                },
                {
                  "@accessType": "outputOnly",
                  "@appinfo": "Total duration of contained enabled CameraShot (and thus CameraMovement) move durations",
                  "@name": "totalDuration",
                  "@type": "SFTime"
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "OfflineRender node",
                  "@name": "offlineRender",
                  "@type": "SFNode",
                  "-children": [
                    {
                      "#comment": " initialization node (if any) goes here "
                    }
                  ]
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "enable console output to trace script computations and prototype progress",
                  "@name": "traceEnabled",
                  "@type": "SFBool",
                  "@value": false
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                {
                  "Viewpoint": {
                    "@DEF": "CameraViewpoint",
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "position",
                          "@protoField": "position"
                        },
                        {
                          "@nodeField": "orientation",
                          "@protoField": "orientation"
                        },
                        {
                          "@nodeField": "fieldOfView",
                          "@protoField": "fieldOfView"
                        },
                        {
                          "@nodeField": "set_bind",
                          "@protoField": "set_bind"
                        },
                        {
                          "@nodeField": "bindTime",
                          "@protoField": "bindTime"
                        },
                        {
                          "@nodeField": "isBound",
                          "@protoField": "isBound"
                        }
                      ]
                    }
                  }
                },
                {
                  "#comment": " NavInfo EXAMINE used since some browsers (InstantReality) try to lock view to vertical when flying to avoid disorientation "
                },
                {
                  "NavigationInfo": {
                    "@DEF": "CameraNavInfo",
                    "@type": [
                      "EXAMINE",
                      "FLY",
                      "ANY"
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "set_bind",
                          "@protoField": "set_bind"
                        },
                        {
                          "@nodeField": "headlight",
                          "@protoField": "headlight"
                        },
                        {
                          "@nodeField": "visibilityLimit",
                          "@protoField": "farClipPlane"
                        }
                      ],
                      "-children": [
                        {
                          "#comment": " No need to bind outputs bindTime, isBound from NavigationInfo since Viewpoint outputs will suffice. TODO inform BitManagement that bindTime field is missing. "
                        }
                      ]
                    }
                  }
                },
                {
                  "#comment": " this DirectionalLight replaces NavigationInfo headlight in order to add color capability "
                },
                {
                  "DirectionalLight": {
                    "@DEF": "CameraDirectionalLight",
                    "@global": true,
                    "-children": [
                      {
                        "#comment": " TODO confirm other default field values match NavigationInfo spec "
                      }
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "on",
                          "@protoField": "headlight"
                        },
                        {
                          "@nodeField": "color",
                          "@protoField": "headlightColor"
                        },
                        {
                          "@nodeField": "intensity",
                          "@protoField": "headlightIntensity"
                        }
                      ]
                    }
                  }
                },
                {
                  "PositionInterpolator": {
                    "@DEF": "CameraPositionInterpolator",
                    "@key": [
                      0,
                      1
                    ],
                    "@keyValue": [
                      0,
                      0,
                      0,
                      0,
                      0,
                      0
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "set_fraction",
                          "@protoField": "set_fraction"
                        }
                      ]
                    }
                  }
                },
                {
                  "OrientationInterpolator": {
                    "@DEF": "CameraOrientationInterpolator",
                    "@key": [
                      0,
                      1
                    ],
                    "@keyValue": [
                      0,
                      1,
                      0,
                      0,
                      0,
                      1,
                      0,
                      0
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "set_fraction",
                          "@protoField": "set_fraction"
                        }
                      ]
                    }
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "value_changed",
                    "@fromNode": "CameraPositionInterpolator",
                    "@toField": "position",
                    "@toNode": "CameraViewpoint"
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "value_changed",
                    "@fromNode": "CameraOrientationInterpolator",
                    "@toField": "orientation",
                    "@toNode": "CameraViewpoint"
                  }
                },
                {
                  "Script": {
                    "@DEF": "CameraScript",
                    "@directOutput": true,
                    "@mustEvaluate": true,
                    "-children": [
                      {
                        "#comment": " binding is controlled externally, all camera operations proceed the same regardless of whether bound or not "
                      }
                    ],
                    "field": [
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Text description to be displayed for this Camera",
                        "@name": "description",
                        "@type": "SFString"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Camera position in local transformation frame",
                        "@name": "position",
                        "@type": "SFVec3f"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Camera rotation in local transformation frame",
                        "@name": "orientation",
                        "@type": "SFRotation"
                      },
                      {
                        "@accessType": "inputOnly",
                        "@appinfo": "input fraction drives interpolators",
                        "@name": "set_fraction",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOnly",
                        "@appinfo": "input event binds or unbinds this Camera",
                        "@name": "set_bind",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "pi/4",
                        "@name": "fieldOfView",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Vector distance to near clipping plane",
                        "@name": "nearClipPlane",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Vector distance to far clipping plane",
                        "@name": "farClipPlane",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Array of CameraShot nodes which in turn contain CameraMovement nodes",
                        "@name": "shots",
                        "@type": "MFNode",
                        "-children": [
                          {
                            "#comment": " initialization nodes (if any) go here "
                          }
                        ]
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Camera filter color that modifies virtual lens capture",
                        "@name": "filterColor",
                        "@type": "SFColor"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Camera filter transparency that modifies virtual lens capture",
                        "@name": "filterTransparency",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "upVector changes modify camera orientation (and possibly vice versa)",
                        "@name": "upVector",
                        "@type": "SFVec3f"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                        "@name": "fStop",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Distance to focal plane of sharpest focus",
                        "@name": "focusDistance",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                        "@name": "isActive",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "Total duration of contained enabled CameraShot (and thus CameraMovement) move durations",
                        "@name": "totalDuration",
                        "@type": "SFTime"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "OfflineRender node",
                        "@name": "offlineRender",
                        "@type": "SFNode",
                        "-children": [
                          {
                            "#comment": " initialization node (if any) goes here "
                          }
                        ]
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "node reference to permit getting setting fields from within Script",
                        "@name": "ViewpointNode",
                        "@type": "SFNode",
                        "-children": [
                          {
                            "Viewpoint": {
                              "@USE": "CameraViewpoint"
                            }
                          }
                        ]
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "node reference to permit getting setting fields from within Script",
                        "@name": "NavInfoNode",
                        "@type": "SFNode",
                        "-children": [
                          {
                            "NavigationInfo": {
                              "@USE": "CameraNavInfo"
                            }
                          }
                        ]
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "node reference to permit getting setting fields from within Script",
                        "@name": "CameraPI",
                        "@type": "SFNode",
                        "-children": [
                          {
                            "PositionInterpolator": {
                              "@USE": "CameraPositionInterpolator"
                            }
                          }
                        ]
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "node reference to permit getting setting fields from within Script",
                        "@name": "CameraOI",
                        "@type": "SFNode",
                        "-children": [
                          {
                            "OrientationInterpolator": {
                              "@USE": "CameraOrientationInterpolator"
                            }
                          }
                        ]
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "key array for interpolators",
                        "@name": "key",
                        "@type": "MFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "keyValue array for PositionInterpolator",
                        "@name": "keyValuePosition",
                        "@type": "MFVec3f"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "keyValue array for OrientationInterpolator",
                        "@name": "keyValueOrientation",
                        "@type": "MFRotation"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "whether internal CameraShot and CameraMove nodes are tracking or changed via ROUTE events",
                        "@name": "animated",
                        "@type": "SFBool",
                        "@value": false
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "perform checkShots() function once immediately after initialization",
                        "@name": "initialized",
                        "@type": "SFBool",
                        "@value": false
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "how many CameraShot nodes are contained in shots array",
                        "@name": "shotCount",
                        "@type": "SFInt32",
                        "@value": 0
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "how many CameraMove nodes are contained in moves array",
                        "@name": "movesCount",
                        "@type": "SFInt32",
                        "@value": 0
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "how many frames were created in current loop",
                        "@name": "frameCount",
                        "@type": "SFFloat",
                        "@value": 0
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "holding variable",
                        "@name": "startTime",
                        "@type": "SFTime",
                        "@value": 0
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "holding variable",
                        "@name": "priorTraceTime",
                        "@type": "SFTime",
                        "@value": 0
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "enable console output to trace script computations and prototype progress",
                        "@name": "traceEnabled",
                        "@type": "SFBool"
                      }
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "position",
                          "@protoField": "position"
                        },
                        {
                          "@nodeField": "orientation",
                          "@protoField": "orientation"
                        },
                        {
                          "@nodeField": "set_fraction",
                          "@protoField": "set_fraction"
                        },
                        {
                          "@nodeField": "set_bind",
                          "@protoField": "set_bind"
                        },
                        {
                          "@nodeField": "fieldOfView",
                          "@protoField": "fieldOfView"
                        },
                        {
                          "@nodeField": "nearClipPlane",
                          "@protoField": "nearClipPlane"
                        },
                        {
                          "@nodeField": "farClipPlane",
                          "@protoField": "farClipPlane"
                        },
                        {
                          "@nodeField": "shots",
                          "@protoField": "shots"
                        },
                        {
                          "@nodeField": "filterColor",
                          "@protoField": "filterColor"
                        },
                        {
                          "@nodeField": "filterTransparency",
                          "@protoField": "filterTransparency"
                        },
                        {
                          "@nodeField": "upVector",
                          "@protoField": "upVector"
                        },
                        {
                          "@nodeField": "fStop",
                          "@protoField": "fStop"
                        },
                        {
                          "@nodeField": "focusDistance",
                          "@protoField": "focusDistance"
                        },
                        {
                          "@nodeField": "isActive",
                          "@protoField": "isActive"
                        },
                        {
                          "@nodeField": "totalDuration",
                          "@protoField": "totalDuration"
                        },
                        {
                          "@nodeField": "offlineRender",
                          "@protoField": "offlineRender"
                        },
                        {
                          "@nodeField": "traceEnabled",
                          "@protoField": "traceEnabled"
                        }
                      ]
                    },
                    "#sourceText": [
                      "\necmascript:\nfunction initialize () // CameraScript\n{\n//  tracePrint ('initialize start...');\n\n    NavInfoNode.avatarSize[0]   = nearClipPlane;\n\n    // remaining setups deferred to invocation of checkShots() method\n    // thanks to Yvonne Jung Fraunhofer for diagnosing better approach to function initialization\n    alwaysPrint ('initialize complete');\n}\n\nfunction checkShots (eventValue)\n{\n    tracePrint ('checkShots() method should only occur after initialize() methods in all other Scripts are complete');\n\n    // compute totalDuration by summing durations from contained CameraShot and CameraMovement nodes\n    totalDuration= 0;\n    shotCount  = shots.length;\n    movesCount = 0;\n    for (i = 0; i < shotCount; i++) // shots index\n    {\n       tracePrint ('shots[' + i + '].moves.length=' + shots[i].moves.length);\n       movesCount   += shots[i].moves.length;\n       totalDuration = totalDuration + shots[i].shotDuration;\n       if (shots[i].moves.length == 0)\n       {\n          alwaysPrint ('warning: CameraShot[' + i + '][' + shots[i].description + '] has no contained CameraMove nodes');\n       }\n    }\n    // size checks before proceeding\n    if (shotCount == 0)\n    {\n       alwaysPrint ('warning: no CameraShot nodes found for the shots, nothing to do!');\n       return;\n    }\n    else if (movesCount == 0)\n    {\n       alwaysPrint ('warning: no CameraMove nodes found for the shots, nothing to do!');\n       return;\n    }\n    else if (totalDuration == 0)\n    {\n       alwaysPrint ('warning: totalDuration = 0 seconds, nothing to do!');\n       return;\n    }\n    tracePrint ('number of contained CameraShot nodes=' + shotCount);\n    tracePrint ('number of contained CameraMove nodes=' + movesCount);\n    tracePrint ('totalDuration=' + totalDuration + ' seconds for all shots and moves');\n\n    // compute interpolators\n    var k = 0; // index for latest key, keyValuePosition, keyValueOrientation\n    for (i = 0; i < shotCount; i++) // shots index\n    {\n        if (i==0) // initial entries\n        {\n           key[0]                   = 0.0; // no previous move\n           keyValuePosition[0]      = shots[i].initialPosition;\n           keyValueOrientation[0]   = shots[i].initialOrientation;\n        }\n        else     // new shot repositions, reorients camera as clean break from preceding shot/move\n        {\n           key[k+1]                 = key[k]; // start from end from previous move\n           keyValuePosition[k+1]    = shots[i].initialPosition;\n           keyValueOrientation[k+1] = shots[i].initialOrientation;\n           k++;\n        }\n        tracePrint (shots[i].description);\n        tracePrint ('shots[i].moves.length=' + shots[i].moves.length);\n\n        for (j = 0; j < shots[i].moves.length; j++) // moves index\n        {\n            var durationFloat =              shots[i].moves[j].duration;  // implicit type conversion from SFTime\n            //  durationFloat = new SFFloat (shots[i].moves[j].duration); // explicit type conversion from SFTime\n            //  tracePrint ('durationFloat=' + durationFloat);\n            key[k+1]               = key[k] + (durationFloat / totalDuration);\n            keyValuePosition[k+1]  = shots[i].moves[j].goalPosition;\n            if (!animated)\n            {\n                 keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;\n            }\n            else\n            {\n                // using constructor SFRotation (SFVec3f fromVector, SFVec3f toVector)\n                // see X3D ECMAScript binding Table 7.18 — SFRotation instance creation functions\n\n                // test if difference vector is zero, if so maintain previous rotation\n                var shotVector = ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize();\n                if (shotVector.length() >= 0)\n                {\n                    // default view direction is along -Z axis\n                    shots[i].moves[j].goalOrientation = new SFRotation (new SFVec3f (0, 0, 1), shotVector);\n                    keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;\n                }\n                else // note (k > 0)\n                {\n                    keyValueOrientation[k+1] = keyValueOrientation[k];  // no change\n                }\n\n                tracePrint ('shots[' + i + '].moves[' + j + '].goalAimPoint=' + shots[i].moves[j].goalAimPoint.toString());\n                tracePrint ('        ViewpointNode.position=' + ViewpointNode.position.toString());\n                tracePrint ('          shotVector     delta=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).toString());\n                tracePrint ('          shotVector normalize=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize().toString());\n                tracePrint ('               goalOrientation=' + shots[i].moves[j].goalOrientation.toString());\n                tracePrint ('      keyValueOrientation[k+1]=' + keyValueOrientation[k+1].toString() + '\\\\n');\n            }\n            k++; // update index to match latest key, keyValuePosition, keyValueOrientation\n\n            // check animated parameter:  set true if any of moves are tracking moves\n            if (!animated)  animated = shots[i].moves[j].tracking; // once true, remains true\n         // tracePrint ('shots[' + i + '].moves[' + j + '].tracking=' + shots[i].moves[j].tracking + ', animated=' + animated);\n\n            // intermediate trace\n            tracePrint ('                key=' + key);\n            tracePrint ('   keyValuePosition=' + keyValuePosition);\n            tracePrint ('keyValueOrientation=' + keyValueOrientation);\n            tracePrint ('- ' + shots[i].moves[j].description);\n        }\n    }\n    tracePrint ('                key=' + key);\n    tracePrint ('   keyValuePosition=' + keyValuePosition);\n    tracePrint ('keyValueOrientation=' + keyValueOrientation);\n    if (key.length != keyValuePosition.length)\n    {\n      alwaysPrint ('warning: internal error during array construction, ' +\n                  'key.length=' + key.length + ' must equal ' +\n                  'keyValuePosition.length=' + keyValuePosition.length);\n    }\n    if (key.length != keyValueOrientation.length)\n    {\n      alwaysPrint ('warning: internal error during array construction, ' +\n                  'key.length=' + key.length + ' must equal ' +\n                  'keyValueOrientation.length=' + keyValueOrientation.length);\n    }\n    if (key.length != (shotCount + movesCount))\n    {\n      alwaysPrint ('warning: internal error during array construction, ' +\n                  'key.length=' + key.length + ' must equal ' +\n                  '(shotCount + movesCount)=' + (shotCount + movesCount));\n    }\n    tracePrint ('           animated=' + animated);\n    // set node values\n    CameraPI.key      = key;\n    CameraOI.key      = key;\n    CameraPI.keyValue = keyValuePosition;\n    CameraOI.keyValue = keyValueOrientation;\n\n    if (!animated) // output results\n    {\n        tracePrint ('<PositionInterpolator    DEF=\\\\'CameraPositionInterpolator\\\\'    key=\\\\'' + stripBrackets(CameraPI.key) + '\\\\' keyValue=\\\\'' + stripBrackets(CameraPI.keyValue) + '\\\\'/>');\n        tracePrint ('<OrientationInterpolator DEF=\\\\'CameraOrientationInterpolator\\\\' key=\\\\'' + stripBrackets(CameraOI.key) + '\\\\' keyValue=\\\\'' + stripBrackets(CameraOI.keyValue) + '\\\\'/>');\n    }\n    tracePrint ('checkShots() complete');\n}\n\nfunction stripBrackets (fieldArray)\n{\n    // some browsers add brackets to array output strings, this function strips them\n    outputString = '';\n    for (i = 0; i < fieldArray.length; i++)\n    {\n       outputString += fieldArray[i].toString();\n       if (i < fieldArray.length - 1) outputString += ' ';\n    }\n    return outputString;\n}\n\nfunction set_fraction (eventValue, timestamp) // input event received for inputOnly field\n{\n   // traceEnabled = false;  // for testing purposes\n\n   // if Camera is being animated, immediately recompute interpolator settings\n   if (animated) checkShots (true);\n\n   // trace progress on console with reduced output frequency\n   if (frameCount == 0)\n   {\n      alwaysPrint ('Animation loop commencing, timestamp=' + timestamp);\n      startTime      = timestamp;\n      priorTraceTime = timestamp;\n      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\n\n      if (animated) // output results\n      {\n        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\n        tracePrint ('  <PositionInterpolator    DEF=\\\\'CameraPositionInterpolator\\\\'    key=\\\\'' + stripBrackets(CameraPI.key) + '\\\\' keyValue=\\\\'' + stripBrackets(CameraPI.keyValue) + '\\\\'/>');\n        tracePrint ('  <OrientationInterpolator DEF=\\\\'CameraOrientationInterpolator\\\\' key=\\\\'' + stripBrackets(CameraOI.key) + '\\\\' keyValue=\\\\'' + stripBrackets(CameraOI.keyValue) + '\\\\'/>');\n      }\n   }\n   else if ((timestamp - priorTraceTime) >= 1.0) // 1 second trace interval\n   {\n      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\n      priorTraceTime = timestamp;\n\n      if (animated) // output results\n      {\n        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\n        tracePrint ('  <PositionInterpolator    DEF=\\\\'CameraPositionInterpolator\\\\'    key=\\\\'' + stripBrackets(CameraPI.key) + '\\\\' keyValue=\\\\'' + stripBrackets(CameraPI.keyValue) + '\\\\'/>');\n        alwaysPrint ('  <OrientationInterpolator DEF=\\\\'CameraOrientationInterpolator\\\\' key=\\\\'' + stripBrackets(CameraOI.key) + '\\\\' keyValue=\\\\'' + stripBrackets(CameraOI.keyValue) + '\\\\'/>');\n      }\n   }\n   if (eventValue == 0)\n   {\n      // note that zero value is not necessarily sent first by TimeSensor, so otherwise ignored\n      frameCount++;\n   }\n   else if (eventValue == 1)\n   {\n      alwaysPrint ('shotClock=' + (timestamp - startTime) + ', frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\n      if (animated) // output results\n      {\n        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\n      }\n      alwaysPrint ('Animation loop complete.');\n      // do not unbind the Viewpoint and NavigationInfo nodes, let that be controlled externally\n   }\n   else\n   {\n      frameCount++;\n   }\n}\n\nfunction set_bind (eventValue) // input event received for inputOnly field\n{\n   // need to ensure CameraShot nodes are properly initialized\n   if (initialized == false)\n   {\n      checkShots (true);\n      initialized = true;\n   }\n   if (eventValue)\n   {\n       tracePrint ('Camera has been bound');\n   }\n   else\n   {\n       tracePrint ('Camera has been unbound');\n   }\n}\n\nfunction set_description (eventValue) // input event received for inputOutput field\n{\n    description = eventValue;\n}\n\nfunction set_position (eventValue) // input event received for inputOutput field\n{\n    position = eventValue;\n}\n\nfunction set_orientation (eventValue) // input event received for inputOutput field\n{\n    orientation = eventValue;\n}\n\nfunction set_fieldOfView (eventValue) // input event received for inputOutput field\n{\n    fieldOfView = eventValue;\n}\n\nfunction set_nearClipPlane (eventValue) // input event received for inputOutput field\n{\n    nearClipPlane = eventValue;\n}\n\nfunction set_farClipPlane (eventValue) // input event received for inputOutput field\n{\n    farClipPlane = eventValue;\n}\n\nfunction set_shots (eventValue) // input event received for inputOutput field\n{\n    shots = eventValue;\n}\n\nfunction set_filterColor (eventValue) // input event received for inputOutput field\n{\n    filterColor = eventValue;\n}\n\nfunction set_filterTransparency (eventValue) // input event received for inputOutput field\n{\n    filterTransparency = eventValue;\n}\n\nfunction set_upVector (eventValue) // input event received for inputOutput field\n{\n    upVector = eventValue;\n}\n\nfunction set_fStop (eventValue) // input event received for inputOutput field\n{\n    fStop = eventValue;\n}\n\nfunction set_focusDistance (eventValue) // input event received for inputOutput field\n{\n    focusDistance = eventValue;\n}\n\nfunction set_offlineRender (eventValue) // input event received for inputOutput field\n{\n    offlineRender = eventValue;\n}\n\nfunction set_key (eventValue) // input event received for inputOutput field\n{\n    key = eventValue;\n}\n\nfunction set_keyValuePosition (eventValue) // input event received for inputOutput field\n{\n    keyValuePosition = eventValue;\n}\n\nfunction set_keyValueOrientation (eventValue) // input event received for inputOutput field\n{\n    keyValueOrientation = eventValue;\n}\n\nfunction set_animated (eventValue) // input event received for inputOutput field\n{\n    animated = eventValue;\n}\n\nfunction tracePrint (outputValue)\n{\n\tif (traceEnabled) alwaysPrint (outputValue);\n}\nfunction alwaysPrint (outputValue)\n{\n    // try to ensure outputValue is converted to string despite Browser.println idiosyncracies\n    var outputString = outputValue.toString(); // utility function according to spec\n    if (outputString == null) outputString = outputValue; // direct cast\n\n    if  (description.length > 0)\n         Browser.print ('[Camera: ' + description + '] ' + outputString + '\\\\n');\n    else\n         Browser.print ('[Camera] ' + outputString + '\\\\n');\n}\n"
                    ]
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "position",
                    "@fromNode": "CameraScript",
                    "@toField": "position",
                    "@toNode": "CameraViewpoint"
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "orientation",
                    "@fromNode": "CameraScript",
                    "@toField": "orientation",
                    "@toNode": "CameraViewpoint"
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "isActive",
                    "@fromNode": "CameraScript",
                    "@toField": "set_bind",
                    "@toNode": "CameraViewpoint"
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "isActive",
                    "@fromNode": "CameraScript",
                    "@toField": "set_bind",
                    "@toNode": "CameraNavInfo"
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "isActive",
                    "@fromNode": "CameraScript",
                    "@toField": "on",
                    "@toNode": "CameraDirectionalLight"
                  }
                }
              ]
            }
          }
        },
        {
          "#comment": " =============== CameraShot ============== "
        },
        {
          "ProtoDeclare": {
            "@appinfo": "CameraShot collects a specific set of CameraMovement animations that make up an individual shot.",
            "@name": "CameraShot",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Text description to be displayed for this CameraShot",
                  "@name": "description",
                  "@type": "SFString"
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Whether this CameraShot can be activated",
                  "@name": "enabled",
                  "@type": "SFBool",
                  "@value": true
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Set of CameraMovement nodes",
                  "@name": "moves",
                  "@type": "MFNode",
                  "-children": [
                    {
                      "#comment": " initializing CameraMovement nodes are inserted here by scene author using ProtoInstance "
                    }
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Setup to reinitialize camera position for this shot",
                  "@name": "initialPosition",
                  "@type": "SFVec3f",
                  "@value": [
                    0,
                    0,
                    10
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Setup to reinitialize camera rotation for this shot",
                  "@name": "initialOrientation",
                  "@type": "SFRotation",
                  "@value": [
                    0,
                    0,
                    1,
                    0
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
                  "@name": "initialAimPoint",
                  "@type": "SFVec3f",
                  "@value": [
                    0,
                    0,
                    0
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "pi/4",
                  "@name": "initialFieldOfView",
                  "@type": "SFFloat",
                  "@value": 0.7854
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                  "@name": "initialFStop",
                  "@type": "SFFloat",
                  "@value": 5.6
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Distance to focal plane of sharpest focus",
                  "@name": "initialFocusDistance",
                  "@type": "SFFloat",
                  "@value": 10
                },
                {
                  "@accessType": "outputOnly",
                  "@appinfo": "Subtotal duration of contained CameraMovement move durations",
                  "@name": "shotDuration",
                  "@type": "SFTime"
                },
                {
                  "@accessType": "outputOnly",
                  "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                  "@name": "isActive",
                  "@type": "SFBool"
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "enable console output to trace script computations and prototype progress",
                  "@name": "traceEnabled",
                  "@type": "SFBool",
                  "@value": false
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                {
                  "Script": {
                    "@DEF": "CameraShotScript",
                    "@directOutput": true,
                    "@mustEvaluate": true,
                    "field": [
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Text description to be displayed for this CameraShot",
                        "@name": "description",
                        "@type": "SFString"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Whether this CameraShot can be activated",
                        "@name": "enabled",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Set of CameraMovement nodes",
                        "@name": "moves",
                        "@type": "MFNode",
                        "-children": [
                          {
                            "#comment": " initialization nodes (if any) go here "
                          }
                        ]
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Setup to reinitialize camera position for this shot",
                        "@name": "initialPosition",
                        "@type": "SFVec3f"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Setup to reinitialize camera rotation for this shot",
                        "@name": "initialOrientation",
                        "@type": "SFRotation"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
                        "@name": "initialAimPoint",
                        "@type": "SFVec3f"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "pi/4",
                        "@name": "initialFieldOfView",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                        "@name": "initialFStop",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Distance to focal plane of sharpest focus",
                        "@name": "initialFocusDistance",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "Subtotal duration of contained CameraMovement move durations",
                        "@name": "shotDuration",
                        "@type": "SFTime"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                        "@name": "isActive",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "enable console output to trace script computations and prototype progress",
                        "@name": "traceEnabled",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "key array for interpolators",
                        "@name": "key",
                        "@type": "MFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "keyValue array for PositionInterpolator",
                        "@name": "keyValuePosition",
                        "@type": "MFVec3f"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "keyValue array for OrientationInterpolator",
                        "@name": "keyValueOrientation",
                        "@type": "MFRotation"
                      }
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "enabled",
                          "@protoField": "enabled"
                        },
                        {
                          "@nodeField": "moves",
                          "@protoField": "moves"
                        },
                        {
                          "@nodeField": "initialPosition",
                          "@protoField": "initialPosition"
                        },
                        {
                          "@nodeField": "initialOrientation",
                          "@protoField": "initialOrientation"
                        },
                        {
                          "@nodeField": "initialAimPoint",
                          "@protoField": "initialAimPoint"
                        },
                        {
                          "@nodeField": "initialFieldOfView",
                          "@protoField": "initialFieldOfView"
                        },
                        {
                          "@nodeField": "initialFStop",
                          "@protoField": "initialFStop"
                        },
                        {
                          "@nodeField": "initialFocusDistance",
                          "@protoField": "initialFocusDistance"
                        },
                        {
                          "@nodeField": "shotDuration",
                          "@protoField": "shotDuration"
                        },
                        {
                          "@nodeField": "isActive",
                          "@protoField": "isActive"
                        },
                        {
                          "@nodeField": "traceEnabled",
                          "@protoField": "traceEnabled"
                        }
                      ]
                    },
                    "#sourceText": [
                      "\necmascript:\nfunction initialize () // CameraShotScript\n{\n//  tracePrint ('initialize start...');\n\n    // compute shotDuration by summing durations from contained CameraMovement nodes\n    shotDuration = 0;\n    for (i = 0; i < moves.length; i++)\n    {\n        shotDuration = shotDuration + moves[i].duration;\n    }\n    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');\n\n//  tracePrint ('... initialize() complete');\n}\n\nfunction set_description (eventValue) // input event received for inputOutput field\n{\n    description = eventValue;\n}\n\nfunction set_enabled (eventValue) // input event received for inputOutput field\n{\n    enabled = eventValue;\n}\n\nfunction set_moves (eventValue) // input event received for inputOutput field\n{\n    moves = eventValue;\n}\n\nfunction set_initialPosition (eventValue) // input event received for inputOutput field\n{\n    initialPosition = eventValue;\n}\n\nfunction set_initialOrientation (eventValue) // input event received for inputOutput field\n{\n    initialOrientation = eventValue;\n}\n\nfunction set_initialAimPoint (eventValue) // input event received for inputOutput field\n{\n    initialAimPoint = eventValue;\n}\n\nfunction set_initialFieldOfView (eventValue) // input event received for inputOutput field\n{\n    initialFieldOfView = eventValue;\n}\n\nfunction set_initialFStop (eventValue) // input event received for inputOutput field\n{\n    initialFStop = eventValue;\n}\n\nfunction set_initialFocusDistance (eventValue) // input event received for inputOutput field\n{\n    initialFocusDistance = eventValue;\n}\n\nfunction set_key (eventValue) // input event received for inputOutput field\n{\n    key = eventValue;\n}\n\nfunction set_keyValuePosition (eventValue) // input event received for inputOutput field\n{\n    keyValuePosition = eventValue;\n}\n\nfunction set_keyValueOrientation (eventValue) // input event received for inputOutput field\n{\n    keyValueOrientation = eventValue;\n}\n\n// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive\n\nfunction tracePrint (outputValue)\n{\n\tif (traceEnabled) alwaysPrint (outputValue);\n}\nfunction alwaysPrint (outputValue)\n{\n\t// try to ensure outputValue is converted to string despite browser idiosyncracies\n    var outputString = outputValue.toString(); // utility function according to spec\n    if (outputString == null) outputString = outputValue; // direct cast\n\n    if  (description.length > 0)\n         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\\\\n');\n    else\n         Browser.print ('[CameraShot] ' + outputString + '\\\\n');\n}\n"
                    ]
                  }
                },
                {
                  "#comment": " Add any ROUTEs here, going from Script to other nodes within ProtoBody "
                }
              ]
            }
          }
        },
        {
          "#comment": " =============== CameraMovement ============== "
        },
        {
          "ProtoDeclare": {
            "@appinfo": "CameraMovement node defines a single camera movement animation including goalPosition, goalOrientation, goalAimPoint and goalFieldOfView.",
            "@name": "CameraMovement",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Text description to be displayed for this CameraMovement",
                  "@name": "description",
                  "@type": "SFString"
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Whether this CameraMovement can be activated",
                  "@name": "enabled",
                  "@type": "SFBool",
                  "@value": true
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Duration in seconds for this move",
                  "@name": "duration",
                  "@type": "SFFloat",
                  "@value": 0
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Goal camera position for this move",
                  "@name": "goalPosition",
                  "@type": "SFVec3f",
                  "@value": [
                    0,
                    0,
                    10
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Goal camera rotation for this move",
                  "@name": "goalOrientation",
                  "@type": "SFRotation",
                  "@value": [
                    0,
                    0,
                    1,
                    0
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                  "@name": "tracking",
                  "@type": "SFBool",
                  "@value": false
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                  "@name": "goalAimPoint",
                  "@type": "SFVec3f",
                  "@value": [
                    0,
                    0,
                    0
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Goal fieldOfView for this move",
                  "@name": "goalFieldOfView",
                  "@type": "SFFloat",
                  "@value": 0.7854
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                  "@name": "goalFStop",
                  "@type": "SFFloat",
                  "@value": 5.6
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Distance to focal plane of sharpest focus",
                  "@name": "goalFocusDistance",
                  "@type": "SFFloat",
                  "@value": 10
                },
                {
                  "@accessType": "outputOnly",
                  "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                  "@name": "isActive",
                  "@type": "SFBool"
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "enable console output to trace script computations and prototype progress",
                  "@name": "traceEnabled",
                  "@type": "SFBool",
                  "@value": false
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                {
                  "#comment": " First node determines node type of this prototype "
                },
                {
                  "#comment": " Subsequent nodes do not render, but still must be a valid X3D subgraph "
                },
                {
                  "#comment": " Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events "
                },
                {
                  "Script": {
                    "@DEF": "CameraMovementScript",
                    "@directOutput": true,
                    "@mustEvaluate": true,
                    "field": [
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Text description to be displayed for this CameraMovement",
                        "@name": "description",
                        "@type": "SFString"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Whether this CameraMovement can be activated",
                        "@name": "enabled",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Duration in seconds for this move",
                        "@name": "duration",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Goal camera position for this move",
                        "@name": "goalPosition",
                        "@type": "SFVec3f"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Goal camera rotation for this move",
                        "@name": "goalOrientation",
                        "@type": "SFRotation"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                        "@name": "tracking",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                        "@name": "goalAimPoint",
                        "@type": "SFVec3f"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Goal fieldOfView for this move",
                        "@name": "goalFieldOfView",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                        "@name": "goalFStop",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Distance to focal plane of sharpest focus",
                        "@name": "goalFocusDistance",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                        "@name": "isActive",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "enable console output to trace script computations and prototype progress",
                        "@name": "traceEnabled",
                        "@type": "SFBool"
                      }
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "enabled",
                          "@protoField": "enabled"
                        },
                        {
                          "@nodeField": "duration",
                          "@protoField": "duration"
                        },
                        {
                          "@nodeField": "goalPosition",
                          "@protoField": "goalPosition"
                        },
                        {
                          "@nodeField": "goalOrientation",
                          "@protoField": "goalOrientation"
                        },
                        {
                          "@nodeField": "tracking",
                          "@protoField": "tracking"
                        },
                        {
                          "@nodeField": "goalAimPoint",
                          "@protoField": "goalAimPoint"
                        },
                        {
                          "@nodeField": "goalFieldOfView",
                          "@protoField": "goalFieldOfView"
                        },
                        {
                          "@nodeField": "goalFStop",
                          "@protoField": "goalFStop"
                        },
                        {
                          "@nodeField": "goalFocusDistance",
                          "@protoField": "goalFocusDistance"
                        },
                        {
                          "@nodeField": "isActive",
                          "@protoField": "isActive"
                        },
                        {
                          "@nodeField": "traceEnabled",
                          "@protoField": "traceEnabled"
                        }
                      ]
                    },
                    "#sourceText": [
                      "\necmascript:\nfunction initialize () // CameraMovementScript\n{\n//  tracePrint ('initialize start...');\n    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +\n                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()\n                           );\n    if (duration < 0)\n    {\n       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');\n       duration = 0;\n    }\n    else if (duration == 0)\n    {\n       alwaysPrint ('warning: duration=0, nothing to do!');\n    }\n    tracePrint ('... initialize complete');\n}\n\nfunction set_goalAimPoint (eventValue) // input event received for inputOutput field\n{\n    goalAimPoint_changed = eventValue;\n    tracePrint ('goalAimPoint=' + goalAimPoint.toString());\n\n    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator\n}\n\nfunction set_description (eventValue) // input event received for inputOutput field\n{\n    description = eventValue;\n}\n\nfunction set_enabled (eventValue) // input event received for inputOutput field\n{\n    enabled = eventValue;\n}\n\nfunction set_duration (eventValue) // input event received for inputOutput field\n{\n    duration = eventValue;\n}\n\nfunction set_goalPosition (eventValue) // input event received for inputOutput field\n{\n    goalPosition = eventValue;\n}\n\nfunction set_goalOrientation (eventValue) // input event received for inputOutput field\n{\n    goalOrientation = eventValue;\n}\n\nfunction set_tracking (eventValue) // input event received for inputOutput field\n{\n    tracking = eventValue;\n}\n\nfunction set_goalFieldOfView (eventValue) // input event received for inputOutput field\n{\n    goalFieldOfView = eventValue;\n}\n\nfunction set_goalFStop (eventValue) // input event received for inputOutput field\n{\n    goalFStop = eventValue;\n}\n\nfunction set_goalFocusDistance (eventValue) // input event received for inputOutput field\n{\n    goalFocusDistance = eventValue;\n}\n\n// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive\n\nfunction tracePrint (outputValue)\n{\n\tif (traceEnabled) alwaysPrint (outputValue);\n}\n\nfunction alwaysPrint (outputValue)\n{\n\t// try to ensure outputValue is converted to string despite browser idiosyncracies\n    var outputString = outputValue.toString(); // utility function according to spec\n    if (outputString == null) outputString = outputValue; // direct cast\n\n    if  (description.length > 0)\n         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\\\\n');\n    else\n         Browser.print ('[CameraMovement] ' + outputString + '\\\\n');\n}\n"
                    ]
                  }
                },
                {
                  "#comment": " Add any ROUTEs here, going from Script to other nodes within ProtoBody "
                }
              ]
            }
          }
        },
        {
          "#comment": " =============== OfflineRender ============== "
        },
        {
          "ProtoDeclare": {
            "@appinfo": "OfflineRender defines a parameters for offline rendering of Camera animation output to a movie file (or possibly a still shot).",
            "@name": "OfflineRender",
            "ProtoInterface": {
              "-children": [
                {
                  "#comment": " TODO non-photorealistic rendering (NPR) parameters "
                }
              ],
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Text description to be displayed for this OfflineRender",
                  "@name": "description",
                  "@type": "SFString"
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Whether this OfflineRender can be activated",
                  "@name": "enabled",
                  "@type": "SFBool",
                  "@value": true
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Frames per second recorded for this rendering",
                  "@name": "frameRate",
                  "@type": "SFFloat",
                  "@value": 30
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Size of frame in number of pixels width and height",
                  "@name": "frameSize",
                  "@type": "SFVec2f",
                  "@value": [
                    640,
                    480
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "Relative dimensions of pixel height/width typically 1.33 or 1",
                  "@name": "pixelAspectRatio",
                  "@type": "SFFloat",
                  "@value": 1.33
                },
                {
                  "@accessType": "inputOnly",
                  "@appinfo": "Begin render operation",
                  "@name": "set_startTime",
                  "@type": "SFTime"
                },
                {
                  "@accessType": "outputOnly",
                  "@appinfo": "Progress performing render operation (0..1)",
                  "@name": "progress",
                  "@type": "SFFloat"
                },
                {
                  "@accessType": "outputOnly",
                  "@appinfo": "Render operation complete",
                  "@name": "renderCompleteTime",
                  "@type": "SFTime"
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "Format of rendered output movie (mpeg mp4 etc.), use first supported format",
                  "@name": "movieFormat",
                  "@type": "MFString",
                  "@value": [
                    "mpeg"
                  ]
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "Format of rendered output images (png jpeg gif tiff etc.) use first supported format",
                  "@name": "imageFormat",
                  "@type": "MFString",
                  "@value": [
                    "png"
                  ]
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "enable console output to trace script computations and prototype progress",
                  "@name": "traceEnabled",
                  "@type": "SFBool",
                  "@value": false
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                {
                  "#comment": " First node determines node type of this prototype "
                },
                {
                  "#comment": " Subsequent nodes do not render, but still must be a valid X3D subgraph "
                },
                {
                  "Script": {
                    "@DEF": "OfflineRenderScript",
                    "@mustEvaluate": true,
                    "field": [
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Text description to be displayed for this OfflineRender",
                        "@name": "description",
                        "@type": "SFString"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Whether this OfflineRender can be activated",
                        "@name": "enabled",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Frames per second recorded for this rendering",
                        "@name": "frameRate",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Size of frame in number of pixels width and height",
                        "@name": "frameSize",
                        "@type": "SFVec2f"
                      },
                      {
                        "@accessType": "inputOutput",
                        "@appinfo": "Relative dimensions of pixel height/width typically 1.33 or 1",
                        "@name": "pixelAspectRatio",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "inputOnly",
                        "@appinfo": "Begin render operation",
                        "@name": "set_startTime",
                        "@type": "SFTime"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "Progress performing render operation (0..1)",
                        "@name": "progress",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "Render operation complete",
                        "@name": "renderCompleteTime",
                        "@type": "SFTime"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "Format of rendered output movie (mpeg mp4 etc.)",
                        "@name": "movieFormat",
                        "@type": "MFString"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "Format of rendered output images (png jpeg gif tiff etc.)",
                        "@name": "imageFormat",
                        "@type": "MFString"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "enable console output to trace script computations and prototype progress",
                        "@name": "traceEnabled",
                        "@type": "SFBool"
                      }
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "description",
                          "@protoField": "description"
                        },
                        {
                          "@nodeField": "enabled",
                          "@protoField": "enabled"
                        },
                        {
                          "@nodeField": "frameRate",
                          "@protoField": "frameRate"
                        },
                        {
                          "@nodeField": "frameSize",
                          "@protoField": "frameSize"
                        },
                        {
                          "@nodeField": "pixelAspectRatio",
                          "@protoField": "pixelAspectRatio"
                        },
                        {
                          "@nodeField": "set_startTime",
                          "@protoField": "set_startTime"
                        },
                        {
                          "@nodeField": "progress",
                          "@protoField": "progress"
                        },
                        {
                          "@nodeField": "renderCompleteTime",
                          "@protoField": "renderCompleteTime"
                        },
                        {
                          "@nodeField": "movieFormat",
                          "@protoField": "movieFormat"
                        },
                        {
                          "@nodeField": "imageFormat",
                          "@protoField": "imageFormat"
                        },
                        {
                          "@nodeField": "traceEnabled",
                          "@protoField": "traceEnabled"
                        }
                      ]
                    },
                    "#sourceText": [
                      "\necmascript:\nfunction initialize () // OfflineRenderScript\n{\n//  tracePrint ('initialize start...');\n\n    tracePrint ('... initialize complete');\n}\n\nfunction set_description (eventValue) // input event received for inputOutput field\n{\n    description = eventValue;\n}\n\nfunction set_enabled (eventValue) // input event received for inputOutput field\n{\n    enabled = eventValue;\n}\n\nfunction set_frameRate (eventValue) // input event received for inputOutput field\n{\n    frameRate = eventValue;\n}\n\nfunction set_frameSize (eventValue) // input event received for inputOutput field\n{\n    frameSize = eventValue;\n}\n\nfunction set_pixelAspectRatio (eventValue) // input event received for inputOutput field\n{\n    pixelAspectRatio = eventValue;\n}\n\nfunction set_startTime (eventValue) // input event received for inputOnly field\n{\n   // do something with input eventValue;\n}\n\nfunction tracePrint (outputValue)\n{\n\tif (traceEnabled) alwaysPrint (outputValue);\n}\n\nfunction alwaysPrint (outputValue)\n{\n\t// try to ensure outputValue is converted to string despite browser idiosyncracies\n    var outputString = outputValue.toString(); // utility function according to spec\n    if (outputString == null) outputString = outputValue; // direct cast\n\n    if  (description.length > 0)\n         Browser.print ('[OfflineRender: ' + description + '] ' + outputString + '\\\\n');\n    else\n         Browser.print ('[OfflineRender] ' + outputString + '\\\\n');\n}\n"
                    ]
                  }
                },
                {
                  "#comment": " Add any ROUTEs here, going from Script to other nodes within ProtoBody "
                }
              ]
            }
          }
        },
        {
          "#comment": " =============== Launch Prototype Example ============== "
        },
        {
          "Background": {
            "@skyColor": [
              0.282353,
              0.380392,
              0.470588
            ]
          }
        },
        {
          "Anchor": {
            "@description": "launch CameraExample scene",
            "@url": [
              "CameraExamples.x3d",
              "http://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.x3d",
              "CameraExamples.wrl",
              "http://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.wrl"
            ],
            "-children": [
              {
                "Transform": {
                  "-children": [
                    {
                      "Shape": {
                        "-geometry": {
                          "Text": {
                            "@string": [
                              "CameraPrototypes.x3d",
                              "defines multiple prototype nodes",
                              "",
                              "Click on this text to see",
                              "CameraExamples.x3d scene"
                            ],
                            "-fontStyle": {
                              "FontStyle": {
                                "@justify": [
                                  "MIDDLE",
                                  "MIDDLE"
                                ]
                              }
                            }
                          }
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@diffuseColor": [
                                  1,
                                  1,
                                  0.2
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    "encoding": "UTF-8",
    "JSON schema": "http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json"
  }
}