<svrl:schematron-output xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" title="X3D Graphics Validity Checks using Schematron" schemaVersion=""><!--   
		   
		   
		 -->
   <svrl:active-pattern document="file:/C:/Users/jcarl/X3DJSONLD/src/main/data/JinScaledV2L1LOA4Sites07f.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 was approved by Web3D Consortium and ISO in 2023.</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 offers many new features including interoperability with HTML5, glTF
         2.0 Physically Based Rendering (PBR), and Web Audio API.</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:successful-report test="(meta/@name='identifier') and (string-length($title) &gt; 0) and not(contains($identifier, $title))" role="warning" location="/X3D/head">
      <svrl:text>X3D/head/meta title (i.e. filename 'JinScaledV2L1LOA4Sites07f.x3d') is expected at end of identifier (url) value </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:successful-report test="not($hasPriorDuplicate) and preceding::meta[@name = $name] and $hasSingletonName" role="error" location="/X3D/head/meta[7]">
      <svrl:text>&lt;meta name='modified' content='25 March 2024'/&gt; has duplicate prior element </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="NavigationInfo"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:successful-report test="not((local-name(..)='HAnimSite') and (local-name(../..)='HAnimHumanoid')) and not($defaultHeights) and not(string-length(@orientation) = 0) and not((normalize-space(@orientation) = '0 1 0 0') or (normalize-space(@orientation) = '0.0 1.0 0.0 0.0') or (normalize-space(@orientation) = '0 0 1 0') or (normalize-space(@orientation) = '0.0 0.0 1.0 0.0')) and (starts-with(normalize-space(@orientation),'0 1 0 ') or starts-with(normalize-space(@orientation),'0.0 1.0 0.0 ')) and (number($centerOfRotationY) != number($positionY))" role="warning" location="/X3D/Scene/Group[1]/Viewpoint[6]">
      <svrl:text>&lt;Viewpoint DEF=''/&gt; centerOfRotation='0 0.9149 0.0016' has mismatched Y-value height of 0.9149 compared to position='2.6 0.8 0' which has Y-value height of 0.8</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:successful-report test="not((local-name(..)='HAnimSite') and (local-name(../..)='HAnimHumanoid')) and not($defaultHeights) and not(string-length(@orientation) = 0) and not((normalize-space(@orientation) = '0 1 0 0') or (normalize-space(@orientation) = '0.0 1.0 0.0 0.0') or (normalize-space(@orientation) = '0 0 1 0') or (normalize-space(@orientation) = '0.0 0.0 1.0 0.0')) and (starts-with(normalize-space(@orientation),'0 1 0 ') or starts-with(normalize-space(@orientation),'0.0 1.0 0.0 ')) and (number($centerOfRotationY) != number($positionY))" role="warning" location="/X3D/Scene/Group[1]/Viewpoint[7]">
      <svrl:text>&lt;Viewpoint DEF=''/&gt; centerOfRotation='0 0.9149 0.0016' has mismatched Y-value height of 0.9149 compared to position='1 0.8 0.5' which has Y-value height of 0.8</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:successful-report test="not((local-name(..)='HAnimSite') and (local-name(../..)='HAnimHumanoid')) and not($defaultHeights) and not(string-length(@orientation) = 0) and not((normalize-space(@orientation) = '0 1 0 0') or (normalize-space(@orientation) = '0.0 1.0 0.0 0.0') or (normalize-space(@orientation) = '0 0 1 0') or (normalize-space(@orientation) = '0.0 0.0 1.0 0.0')) and (starts-with(normalize-space(@orientation),'0 1 0 ') or starts-with(normalize-space(@orientation),'0.0 1.0 0.0 ')) and (number($centerOfRotationY) != number($positionY))" role="warning" location="/X3D/Scene/Group[1]/Viewpoint[8]">
      <svrl:text>&lt;Viewpoint DEF=''/&gt; centerOfRotation='0 0.9149 0.0016' has mismatched Y-value height of 0.9149 compared to position='-1 0.8 0.5' which has Y-value height of 0.8</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:successful-report test="not((local-name(..)='HAnimSite') and (local-name(../..)='HAnimHumanoid')) and not($defaultHeights) and not(string-length(@orientation) = 0) and not((normalize-space(@orientation) = '0 1 0 0') or (normalize-space(@orientation) = '0.0 1.0 0.0 0.0') or (normalize-space(@orientation) = '0 0 1 0') or (normalize-space(@orientation) = '0.0 0.0 1.0 0.0')) and (starts-with(normalize-space(@orientation),'0 1 0 ') or starts-with(normalize-space(@orientation),'0.0 1.0 0.0 ')) and (number($centerOfRotationY) != number($positionY))" role="warning" location="/X3D/Scene/Group[1]/Viewpoint[9]">
      <svrl:text>&lt;Viewpoint DEF=''/&gt; centerOfRotation='0 0.9149 0.0016' has mismatched Y-value height of 0.9149 compared to position='-2.6 0.8 0' which has Y-value height of 0.8</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 146</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 146</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 118</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; has mismatched HAnimJoint    node counts, 146 within skeleton hierarchy and 0 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; has mismatched HAnimSegment  node counts, 146 within skeleton hierarchy and 0 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSites = $countUSEsites)" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; has mismatched HAnimSite     node counts, 118 within skeleton hierarchy and 0 USE nodes in sites field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="MetadataSet"/>
   <svrl:successful-report test="(local-name(..) = 'HAnimHumanoid') and (@name='HAnimHumanoid.info') and $HAnimHumanoid.info.MetaNode.gender and not($HAnimHumanoid.info.MetaNode.gender/@value = 'male') and not($HAnimHumanoid.info.MetaNode.gender/@value = 'female') and not($HAnimHumanoid.info.MetaNode.gender/@value = 'neutral')" role="warning" location="/X3D/Scene/HAnimHumanoid/MetadataSet">
      <svrl:text>HAnimHumanoid/&lt;MetadataSet DEF='' name='HAnimHumanoid.info'/&gt; contains MetadataString name='gender' value='"female"' which is expected to be 'male' or 'female' or 'neutral' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataFloat | MetadataDouble"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_pelvis' name='pelvis'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 0.707 -0.016' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_trochanter') and not(contains(.,'trochanterion'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_trochanterion_pt' name='r_trochanterion_pt'/&gt; is an HAnimSite alias for 'r_trochanterion', recommend updating X3D model source
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_trochanter') and not(contains(.,'trochanterion'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[4]">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_trochanterion_pt' name='l_trochanterion_pt'/&gt; is an HAnimSite alias for 'l_trochanterion', recommend updating X3D model source
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_thigh' name='l_thigh'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.095 0.8266 -0.0183' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_femoral_medial_epicondyles')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimSegment/Group/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_femoral_medial_epicondyles_pt' name='l_femoral_medial_epicondyles_pt'/&gt; is an HAnimSite alias for 'l_femoral_medial_epicondyle', recommend updating X3D
         model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_femoral_lateral_epicondyles')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimSegment/Group/HAnimSite[3]">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_femoral_lateral_epicondyles_pt' name='l_femoral_lateral_epicondyles_pt'/&gt; is an HAnimSite alias for 'l_femoral_lateral_epicondyle', recommend updating X3D
         model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_calf' name='l_calf'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.09261001 0.408825 -0.01943775' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_talus' name='l_talus'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.08883 0.09544501 -0.010451251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_navicular' name='l_navicular'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.07830001 0.036900003 0.0048645' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_1' name='l_cuneiform_1'/&gt; DEF value does not contain correctly modified version of name value (for example,
         DEF='myPrefix_nameValue' e.g. DEF='myPrefix_l_cuneiform_1') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_1' name='l_cuneiform_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.067365 0.032107502 0.018391501' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metatarsal_1' name='l_metatarsal_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.06462 0.023242502 0.04419' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_proximal_phalanx_1' name='l_tarsal_proximal_phalanx_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.0621225 0.014424751 0.0936225' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_metatarsal')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_metatarsal_phalanx_1_pt' name='l_metatarsal_phalanx_1_pt'/&gt; contains an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model
         source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (count(//*[@DEF=$USE]) = 0)" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite/Shape">
      <svrl:text>&lt;Shape USE='HAnimSiteShapeB'/&gt; USE node has no matching DEF node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_distal_phalanx_1' name='l_tarsal_distal_phalanx_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.062 0.012 0.115' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_tarsal_distal_phalanx_1_tip' name='l_tarsal_distal_phalanx_1_tip'/&gt; contains an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_cuneiform_2' name='l_cuneiform_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.0814275 0.033525 0.02142675' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metatarsal_2' name='l_metatarsal_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.08019 0.0261 0.041062504' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_proximal_phalanx_2' name='l_tarsal_proximal_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.08253 0.014976 0.097830005' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_middle_phalanx_2' name='l_tarsal_middle_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.0843075 0.012647251 0.1140075' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_distal_phalanx_2' name='l_tarsal_distal_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.0843075 0.00982575 0.123435006' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_tarsal_distal_phalanx_2_tip' name='l_tarsal_distal_phalanx_2_tip'/&gt; contains an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_cuneiform_3' name='l_cuneiform_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.092970006 0.03339 0.019818' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metatarsal_3' name='l_metatarsal_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.09459 0.0261 0.039397504' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_proximal_phalanx_3' name='l_tarsal_proximal_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.096480004 0.015057 0.09542251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_middle_phalanx_3' name='l_tarsal_middle_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.098865 0.011922751 0.110475' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_distal_phalanx_3' name='l_tarsal_distal_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1004175 0.00982575 0.11970001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_tarsal_distal_phalanx_3_tip' name='l_tarsal_distal_phalanx_3_tip'/&gt; contains an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_calcaneus' name='l_calcaneus'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.0891 0.0579825 -0.025965001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_cuboid' name='l_cuboid'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1106325 0.03528 0.002089125' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metatarsal_4' name='l_metatarsal_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1064925 0.0245475 0.03843' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_proximal_phalanx_4' name='l_tarsal_proximal_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.109867506 0.01435275 0.091170006' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_middle_phalanx_4' name='l_tarsal_middle_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.114165 0.0122445 0.1063125' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_distal_phalanx_4' name='l_tarsal_distal_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1156725 0.009369 0.11369251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_tarsal_distal_phalanx_4_tip' name='l_tarsal_distal_phalanx_4_tip'/&gt; contains an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metatarsal_5' name='l_metatarsal_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.120825 0.020945251 0.03474' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_proximal_phalanx_5' name='l_tarsal_proximal_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.124065004 0.013671 0.0865575' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_middle_phalanx_5' name='l_tarsal_middle_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1263825 0.01085625 0.09414' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_metatarsal')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_metatarsal_phalanx_5_pt' name='l_metatarsal_phalanx_5_pt'/&gt; contains an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model
         source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_distal_phalanx_5' name='l_tarsal_distal_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1272825 0.008563501 0.10188' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_tarsal_distal_phalanx_5_tip' name='l_tarsal_distal_phalanx_5_tip'/&gt; contains an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_thigh' name='r_thigh'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.094657496 0.8266501 -0.018348752' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_femoral_medial_epicondyles')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment/Group/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_femoral_medial_epicondyles_pt' name='r_femoral_medial_epicondyles_pt'/&gt; is an HAnimSite alias for 'r_femoral_medial_epicondyle', recommend updating X3D
         model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_femoral_lateral_epicondyles')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment/Group/HAnimSite[3]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_femoral_lateral_epicondyles_pt' name='r_femoral_lateral_epicondyles_pt'/&gt; is an HAnimSite alias for 'r_femoral_lateral_epicondyle', recommend updating X3D
         model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_calf' name='r_calf'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.09261001 0.408825 -0.01943775' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment/Group/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_medial_malleolus_pt' name='r_medial_malleolus_ptt'/&gt; DEF value does not contain correctly modified version of name value (for example,
         DEF='myPrefix_nameValue' e.g. DEF='myPrefix_r_medial_malleolus_ptt') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(ends-with(@name,'_tip')) and not(ends-with(@name,'_view')) and not(ends-with(@name,'_pt')) and not(@USE)" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment/Group/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_medial_malleolus_pt' name='r_medial_malleolus_ptt'/&gt; has incomplete name that must have suffix '_tip' or '_view' or '_pt' appended,
         depending on function </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_talus' name='r_talus'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.088447504 0.09544501 -0.010451251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_navicular' name='r_navicular'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.07794 0.036900003 0.0048645' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_cuneiform_1' name='r_cuneiform_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.0669825 0.032107502 0.018391501' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metatarsal_1' name='r_metatarsal_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.06426 0.023242502 0.04419' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_proximal_phalanx_1' name='r_tarsal_proximal_phalanx_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.0617625 0.014424751 0.0936225' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_distal_phalanx_1' name='r_tarsal_distal_phalanx_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.06174 0.0121365 0.1153125' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_tarsal_distal_phalanx_1_tip' name='r_tarsal_distal_phalanx_1_tip'/&gt; contains an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_cuneiform_2' name='r_cuneiform_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.081045 0.033525 0.02142675' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metatarsal_2' name='r_metatarsal_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.079830006 0.0261 0.041062504' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_proximal_phalanx_2' name='r_tarsal_proximal_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.0821475 0.014976 0.097830005' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_middle_phalanx_2' name='r_tarsal_middle_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.083925 0.012647251 0.1140075' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_distal_phalanx_2' name='r_tarsal_distal_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.083925 0.00982575 0.123435006' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_tarsal_distal_phalanx_2_tip' name='r_tarsal_distal_phalanx_2_tip'/&gt; contains an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_cuneiform_3' name='r_cuneiform_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.09261001 0.03339 0.019818' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metatarsal_3' name='r_metatarsal_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.09423001 0.0261 0.039397504' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_proximal_phalanx_3' name='r_tarsal_proximal_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.0960975 0.015057 0.09542251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_middle_phalanx_3' name='r_tarsal_middle_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.098505 0.011922751 0.110475' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_distal_phalanx_3' name='r_tarsal_distal_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.100035004 0.00982575 0.11970001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_tarsal_distal_phalanx_3_tip' name='r_tarsal_distal_phalanx_3_tip'/&gt; contains an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_calcaneus' name='r_calcaneus'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.088717505 0.0579825 -0.025965001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_cuboid' name='r_cuboid'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.110272504 0.03528 0.002089125' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metatarsal_4' name='r_metatarsal_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.10613251 0.0245475 0.03843' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_proximal_phalanx_4' name='r_tarsal_proximal_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.10950751 0.01435275 0.091170006' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_middle_phalanx_4' name='r_tarsal_middle_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.11378251 0.0122445 0.1063125' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_distal_phalanx_4' name='r_tarsal_distal_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.1153125 0.009369 0.11369251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_tarsal_distal_phalanx_4_tip' name='r_tarsal_distal_phalanx_4_tip'/&gt; contains an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metatarsal_5' name='r_metatarsal_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.12044251 0.020945251 0.03474' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_proximal_phalanx_5' name='r_tarsal_proximal_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.12368251 0.013671 0.0865575' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_middle_phalanx_5' name='r_tarsal_middle_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.126 0.01085625 0.09414' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_distal_phalanx_5' name='r_tarsal_distal_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.1269225 0.008563501 0.10188' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_tarsal_distal_phalanx_5_tip' name='r_tarsal_distal_phalanx_5_tip'/&gt; contains an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="$isHAnim2 and (@name='vl5') and parent::HAnimJoint[not(@name='humanoid_root')]" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]">
      <svrl:text>&lt;HAnimJoint DEF='hanim_vl5' name='vl5'/&gt; has parent HAnimJoint name='sacroiliac' rather than expected parent name='humanoid_root', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l5' name='l5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 0.92542505 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'waist_preferred_ant') and not(contains(.,'waist_preferred_anterior'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimSegment/Group/HAnimSite[3]">
      <svrl:text>&lt;HAnimSite DEF='hanim_waist_preferred_anterior_pt' name='waist_preferred_anterior_pt'/&gt; is an HAnimSite alias for 'waist_preferred_anterior', recommend updating X3D model
         source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'waist_preferred_post') and not(contains(.,'waist_preferred_posterior'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimSegment/Group/HAnimSite[4]">
      <svrl:text>&lt;HAnimSite DEF='hanim_waist_preferred_posterior_pt' name='waist_preferred_posterior_pt'/&gt; is an HAnimSite alias for 'waist_preferred_posterior', recommend updating X3D
         model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l4' name='l4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 0.94972503 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l3' name='l3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 0.96592504 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l2' name='l2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 0.98235005 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')" role="info" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[1]">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_rib_10_pt' name='l_rib_10_pt'/&gt; is not a recognized name for HAnim2 HAnimSite </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')" role="info" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_rib_10_pt' name='r_rib_10_pt'/&gt; is not a recognized name for HAnim2 HAnimSite </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l1' name='l1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 0.99967504 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t12' name='t12'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.0230751 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t11' name='t11'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.0467 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t10' name='t10'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.0638 -0.013785751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t9' name='t9'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.078425 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (count(//*[@DEF=$USE]) = 0)" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[4]/Shape">
      <svrl:text>&lt;Shape USE='HAnimSiteShapeB'/&gt; USE node has no matching DEF node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t8' name='t8'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.0930501 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t7' name='t7'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.1088 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t6' name='t6'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.1216251 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t5' name='t5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.13715 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t4' name='t4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.1524501 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t3' name='t3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.1709001 -0.013763251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t2' name='t2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.19565 -0.013785751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_t1' name='t1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.22 -0.0138' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_c7' name='c7'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.245375 -0.015063751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_c6' name='c6'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.2575251 -0.015063751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_c5' name='c5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.2699 -0.015063751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_c4' name='c4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.2822751 -0.015063751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_c3' name='c3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.2951001 -0.015063751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_c2' name='c2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.307 -0.0150' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_c1' name='c1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.3185 -0.015063751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_skull' name='skull'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.3126501 -0.01544175' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'nuchal') and not(contains(.,'nuchale'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[8]">
      <svrl:text>&lt;HAnimSite DEF='hanim_nuchale_pt' name='nuchale_pt'/&gt; is an HAnimSite alias for 'nuchale', recommend updating X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_eyelid' name='l_eyelid'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.0505125 1.42425 0.03294' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_eyelid' name='r_eyelid'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.0505125 1.42425 0.03294' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_eyeball' name='l_eyeball'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.048127502 1.4049001 0.0830475' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_eyeball' name='r_eyeball'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.048127502 1.4049001 0.0830475' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_eyebrow' name='l_eyebrow'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.021748502 1.4139 0.1069425' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[6]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_eyebrow' name='r_eyebrow'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.021748502 1.4139 0.1069425' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[7]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_jaw' name='jaw'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0 1.312875 0.015378751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_clavicle' name='l_clavicle'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.038475003 1.2087001 -0.013785751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')" role="info" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_clavicale_pt' name='l_clavicale_pt'/&gt; is not a recognized name for HAnim2 HAnimSite </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_clavicale')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_clavicale_pt' name='l_clavicale_pt'/&gt; is an HAnimSite alias for 'l_clavicle', recommend updating X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_scapula' name='l_scapula'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.12294001 1.191825 -0.012897001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment/Group/HAnimSite[4]">
      <svrl:text>&lt;HAnimSite DEF='l_axilla_posterior_folds_pt' name='l_axilla_posterior_folds_pt'/&gt; DEF value does not contain correctly modified version of name value (for example,
         DEF='myPrefix_nameValue' e.g. DEF='myPrefix_l_axilla_posterior_folds_pt') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_axilla_post')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment/Group/HAnimSite[4]">
      <svrl:text>&lt;HAnimSite DEF='l_axilla_posterior_folds_pt' name='l_axilla_posterior_folds_pt'/&gt; is an HAnimSite alias for 'l_axilla_distal', recommend updating X3D model source
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_upperarm' name='l_upperarm'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.16506 1.1785501 -0.0032670002' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_humeral_lateral_epicondyles')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[1]">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_humeral_lateral_epicondyles_pt' name='l_humeral_lateral_epicondyles_pt'/&gt; is an HAnimSite alias for 'l_humeral_lateral_epicondyle', recommend updating X3D
         model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_humeral_medial_epicondyles')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_humeral_medial_epicondyles_pt' name='l_humeral_medial_epicondyles_pt'/&gt; is an HAnimSite alias for 'l_humeral_medial_epicondyle', recommend updating X3D
         model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_forearm' name='l_forearm'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18209252 0.9288 -0.0056295004' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal' name='l_carpal'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18193501 0.724275 -0.00502425' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_trapezium' name='l_trapezium'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1812825 0.70605004 0.0193275' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metacarpal_1' name='l_metacarpal_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18049501 0.69255006 0.0259875' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_metacarpal_phalanx_2_pt' name='l_metacarpal_phalanx_2_pt'/&gt; is an HAnimSite alias for 'l_metacarpal_phalanx_2', recommend updating X3D model
         source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_proximal_phalanx_1' name='l_carpal_proximal_phalanx_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.181035 0.67275 0.035775002' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_distal_phalanx_1' name='l_carpal_distal_phalanx_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.182655 0.654075 0.0496575' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_carpal_distal_phalanx_1_tip' name='l_carpal_distal_phalanx_1_tip'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_trapezoid' name='l_trapezoid'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1812825 0.70695 0.008417251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metacarpal_2' name='l_metacarpal_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1812825 0.6876 0.009729' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_proximal_phalanx_2' name='l_carpal_proximal_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18373501 0.6372 0.015075001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_middle_phalanx_2' name='l_carpal_middle_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18171 0.606825 0.014184001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_distal_phalanx_2' name='l_carpal_distal_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.180675 0.58162504 0.013385251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_carpal_distal_phalanx_2_tip' name='l_carpal_distal_phalanx_2_tip'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_capitate' name='l_capitate'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18108001 0.708525 -0.0047970004' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metacarpal_3' name='l_metacarpal_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18108001 0.6858 -0.0062527503' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="not(ends-with(@name,'_tip')) and not(ends-with(@name,'_view')) and not(ends-with(@name,'_pt')) and not(@USE)" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_metacarpal_phalanx_3' name='l_metacarpal_phalanx_3'/&gt; has incomplete name that must have suffix '_tip' or '_view' or '_pt' appended,
         depending on function </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_metacarpal_phalanx_3' name='l_metacarpal_phalanx_3'/&gt; is an HAnimSite alias for 'l_metacarpal_phalanx_2', recommend updating X3D model
         source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_proximal_phalanx_3' name='l_carpal_proximal_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18369 0.63495 -0.00391725' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_middle_phalanx_3' name='l_carpal_middle_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18171 0.603225 -0.003537' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_distal_phalanx_3' name='l_carpal_distal_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.180675 0.575325 -0.0037597502' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_carpal_distal_phalanx_3_tip' name='l_carpal_distal_phalanx_3_tip'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_hamate' name='l_hamate'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18108001 0.70582503 -0.025740001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metacarpal_4' name='l_metacarpal_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18108001 0.68625003 -0.01991925' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_proximal_phalanx_4' name='l_carpal_proximal_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18369 0.63405 -0.02144025' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_middle_phalanx_4' name='l_carpal_middle_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18171 0.6066 -0.020646' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_distal_phalanx_4' name='l_carpal_distal_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.180675 0.580725 -0.019777501' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_carpal_distal_phalanx_4_tip' name='l_carpal_distal_phalanx_4_tip'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="$isHAnim2 and (@name='l_carpometacarpal_5') and parent::HAnimJoint[not(@name='l_midcarpal_4_5')]" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]">
      <svrl:text>&lt;HAnimJoint DEF='hanim_l_carpometacarpal_5' name='l_carpometacarpal_5'/&gt; has parent HAnimJoint name='l_radiocarpal' rather than expected parent name='l_midcarpal_4_5', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_metacarpal_5' name='l_metacarpal_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.1816425 0.68827504 -0.032782502' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_metacarpal_phalanx_5_pt' name='l_metacarpal_phalanx_5_pt'/&gt; is an HAnimSite alias for 'l_metacarpal_phalanx_2', recommend updating X3D model
         source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_proximal_phalanx_5' name='l_carpal_proximal_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18333 0.6381 -0.0370575' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_middle_phalanx_5' name='l_carpal_middle_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18166502 0.62100005 -0.037147503' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_carpal_distal_phalanx_5' name='l_carpal_distal_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='0.18081002 0.602325 -0.0369675' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_l_carpal_distal_phalanx_5_tip' name='l_carpal_distal_phalanx_5_tip'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_clavicle' name='r_clavicle'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.038475003 1.2087001 -0.013785751' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')" role="info" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_clavicale_pt' name='r_clavicale_pt'/&gt; is not a recognized name for HAnim2 HAnimSite </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_clavicale')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_clavicale_pt' name='r_clavicale_pt'/&gt; is an HAnimSite alias for 'r_clavicle', recommend updating X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_scapula' name='r_scapula'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.12294001 1.191825 -0.012897001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_axilla_post')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimSegment/Group/HAnimSite[4]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_axilla_posterior_folds_pt' name='r_axilla_posterior_folds_pt'/&gt; is an HAnimSite alias for 'r_axilla_distal', recommend updating X3D model source
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_upperarm' name='r_upperarm'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.16470002 1.1785501 -0.0032670002' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_humeral_lateral_epicondyles')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[1]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_humeral_lateral_epicondyles_pt' name='r_humeral_lateral_epicondyles_pt'/&gt; is an HAnimSite alias for 'r_humeral_lateral_epicondyle', recommend updating X3D
         model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_humeral_medial_epicondyles')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_humeral_medial_epicondyles_pt' name='r_humeral_medial_epicondyles_pt'/&gt; is an HAnimSite alias for 'r_humeral_medial_epicondyle', recommend updating X3D
         model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_forearm' name='r_forearm'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.1817325 0.9288 -0.0056295004' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal' name='r_carpal'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.181575 0.724275 -0.005022' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_trapezium' name='r_trapezium'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18096751 0.70605004 0.0193275' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metacarpal_1' name='r_metacarpal_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.180135 0.69255006 0.0259875' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_metacarpal_phalanx_2_pt' name='r_metacarpal_phalanx_2_pt'/&gt; is an HAnimSite alias for 'r_metacarpal_phalanx_2', recommend updating X3D model
         source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_proximal_phalanx_1' name='r_carpal_proximal_phalanx_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18065251 0.67275 0.035775002' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_distal_phalanx_1' name='r_carpal_distal_phalanx_1'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18227251 0.654075 0.0496575' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_carpal_distal_phalanx_1_tip' name='r_carpal_distal_phalanx_1_tip'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_trapezoid' name='r_trapezoid'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18096751 0.70695 0.008417251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metacarpal_2' name='r_metacarpal_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18090001 0.6876 0.009729' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_proximal_phalanx_2' name='r_carpal_proximal_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18335252 0.6372 0.015075001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_middle_phalanx_2' name='r_carpal_middle_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.1813275 0.606825 0.014184001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_distal_phalanx_2' name='r_carpal_distal_phalanx_2'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.1802925 0.58162504 0.013385251' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_carpal_distal_phalanx_2_tip' name='r_carpal_distal_phalanx_2_tip'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_capitate' name='r_capitate'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18072 0.708525 -0.0047970004' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metacarpal_3' name='r_metacarpal_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18072 0.6858 -0.0062527503' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="not(ends-with(@name,'_tip')) and not(ends-with(@name,'_view')) and not(ends-with(@name,'_pt')) and not(@USE)" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_metacarpal_phalanx_3' name='r_metacarpal_phalanx_3'/&gt; has incomplete name that must have suffix '_tip' or '_view' or '_pt' appended,
         depending on function </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_metacarpal_phalanx_3' name='r_metacarpal_phalanx_3'/&gt; is an HAnimSite alias for 'r_metacarpal_phalanx_2', recommend updating X3D model
         source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_proximal_phalanx_3' name='r_carpal_proximal_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18330751 0.63495 -0.00391725' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_middle_phalanx_3' name='r_carpal_middle_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.1813275 0.603225 -0.003537' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_distal_phalanx_3' name='r_carpal_distal_phalanx_3'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.1802925 0.575325 -0.0037597502' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite[1]">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_carpal_distal_phalanx_3_tip' name='r_carpal_distal_phalanx_3_tip'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_hamate' name='r_hamate'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18072 0.70582503 -0.025740001' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metacarpal_4' name='r_metacarpal_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18072 0.68625003 -0.01991925' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_proximal_phalanx_4' name='r_carpal_proximal_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18330751 0.63405 -0.02144025' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_middle_phalanx_4' name='r_carpal_middle_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.1813275 0.6066 -0.020646' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_distal_phalanx_4' name='r_carpal_distal_phalanx_4'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.1802925 0.580725 -0.019777501' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[4]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_carpal_distal_phalanx_4_tip' name='r_carpal_distal_phalanx_4_tip'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="$isHAnim2 and (@name='r_carpometacarpal_5') and parent::HAnimJoint[not(@name='r_midcarpal_4_5')]" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]">
      <svrl:text>&lt;HAnimJoint DEF='hanim_r_carpometacarpal_5' name='r_carpometacarpal_5'/&gt; has parent HAnimJoint name='r_radiocarpal' rather than expected parent name='r_midcarpal_4_5', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_metacarpal_5' name='r_metacarpal_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18126 0.68827504 -0.032782502' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_metacarpal_phalanx_5_pt' name='r_metacarpal_phalanx_5_pt'/&gt; is an HAnimSite alias for 'r_metacarpal_phalanx_2', recommend updating X3D model
         source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_proximal_phalanx_5' name='r_carpal_proximal_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18297 0.6381 -0.0370575' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_middle_phalanx_5' name='r_carpal_middle_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18130499 0.62100005 -0.037147503' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(parent::HAnimJoint) and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_carpal_distal_phalanx_5' name='r_carpal_distal_phalanx_5'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation
         value matching parent HAnimJoint/translation='-0.18045002 0.602325 -0.0369675' in order to be in the right location </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment/Group/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_r_carpal_distal_phalanx_5_tip' name='r_carpal_distal_phalanx_5_tip'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating
         X3D model source </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[107]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_metacarpophalangeal_3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_metacarpophalangeal_3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[135]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_metacarpophalangeal_3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_metacarpophalangeal_3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[15]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_l_eyeball_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_l_eyeball_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_eyeball_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_eyeball_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[18]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[24]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[28]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[29]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[30]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_index1_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_index1_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[31]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_index2_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_index2_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[32]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_index3_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_index3_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[15]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitches_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitches_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitches_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitches_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitches_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitches_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[15]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaws_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaws_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaws_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaws_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaws_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaws_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[15]">
      <svrl:text>&lt;OrientationInterpolator DEF='Rolls_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Rolls_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Rolls_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Rolls_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Rolls_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Rolls_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[8]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[14]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_lower_body_RotationInterpolator_Run'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_lower_body_RotationInterpolator_Run' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_neck_RotationInterpolator_Run'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_neck_RotationInterpolator_Run' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_upper_body_RotationInterpolator_Run'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_upper_body_RotationInterpolator_Run' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[8]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[10]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[2]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[6]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[7]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[8]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[12]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[18]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[11]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Color"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="ProximitySensor | VisibilitySensor | TransformSensor"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
</svrl:schematron-output>