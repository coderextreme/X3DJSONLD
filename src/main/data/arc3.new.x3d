<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Immersive' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
    <head>
        <meta name='title' content='x3dconnectorProto'/>
        <meta name='creator' content='Lost, Doug Sanden I think'/>
        <meta name='generator' content='manual'/>
        <meta name='identifier' content='https://coderextreme.net/X3DJSONLD/x3dconnectorProto.x3d'/>
        <meta name='description' content='a generic proto to connect two objects'/>
    </head>
    <Scene>
        <Viewpoint description='Only Viewpoint' position='0 0 5'/>
        <Background skyColor='0.4 0.4 0.4'/>
        <Transform DEF='DECLpoint_G1_node'>
            <Shape>
                <Appearance>
                    <Material diffuseColor='1 0 0'/>
                </Appearance>
                <Sphere radius='0.1'/>
            </Shape>
            <PositionInterpolator DEF='DECLpoint_G1_PI1' key='0 1' keyValue='0 0 0 0 5 0'/>
            <Script DEF='DECLpoint_G1_MB1'>
                <field name='translation' accessType='inputOutput' type='SFVec3f' value='0 0 0'/>
                <field name='old' accessType='inputOutput' type='SFVec3f' value='0 0 0'/>
                <field name='set_location' accessType='inputOnly' type='SFTime'/>
                <field name='keyValue' accessType='inputOutput' type='MFVec3f' value='0 0 0 0 5 0'/>
<![CDATA[
ecmascript:
		function set_location(value) {
                    old = translation;
		    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);
                    keyValue = new MFVec3f([old, translation]);
		    // Browser.println(keyValue);
		}
]]>
            </Script>
            <TimeSensor DEF='DECLpoint_G1_CL1' cycleInterval='3.0' loop='true'/>
            <ROUTE fromField='cycleTime' fromNode='DECLpoint_G1_CL1' toField='set_location' toNode='DECLpoint_G1_MB1'/>
            <ROUTE fromField='fraction_changed' fromNode='DECLpoint_G1_CL1' toField='set_fraction' toNode='DECLpoint_G1_PI1'/>
            <ROUTE fromField='keyValue' fromNode='DECLpoint_G1_MB1' toField='keyValue' toNode='DECLpoint_G1_PI1'/>
            <ROUTE fromField='value_changed' fromNode='DECLpoint_G1_PI1' toField='set_translation' toNode='DECLpoint_G1_node'/>
        </Transform>
        <Transform DEF='DECLpoint_G2_node'>
            <Shape>
                <Appearance>
                    <Material diffuseColor='1 0 0'/>
                </Appearance>
                <Sphere radius='0.1'/>
            </Shape>
            <PositionInterpolator DEF='DECLpoint_G2_PI1' key='0 1' keyValue='0 0 0 0 5 0'/>
            <Script DEF='DECLpoint_G2_MB1'>
                <field name='translation' accessType='inputOutput' type='SFVec3f' value='0 0 0'/>
                <field name='old' accessType='inputOutput' type='SFVec3f' value='0 0 0'/>
                <field name='set_location' accessType='inputOnly' type='SFTime'/>
                <field name='keyValue' accessType='inputOutput' type='MFVec3f' value='0 0 0 0 5 0'/>
<![CDATA[
ecmascript:
		function set_location(value) {
                    old = translation;
		    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);
                    keyValue = new MFVec3f([old, translation]);
		    // Browser.println(keyValue);
		}
]]>
            </Script>
            <TimeSensor DEF='DECLpoint_G2_CL1' cycleInterval='3.0' loop='true'/>
            <ROUTE fromField='cycleTime' fromNode='DECLpoint_G2_CL1' toField='set_location' toNode='DECLpoint_G2_MB1'/>
            <ROUTE fromField='fraction_changed' fromNode='DECLpoint_G2_CL1' toField='set_fraction' toNode='DECLpoint_G2_PI1'/>
            <ROUTE fromField='keyValue' fromNode='DECLpoint_G2_MB1' toField='keyValue' toNode='DECLpoint_G2_PI1'/>
            <ROUTE fromField='value_changed' fromNode='DECLpoint_G2_PI1' toField='set_translation' toNode='DECLpoint_G2_node'/>
        </Transform>
        <Group>
            <Transform DEF='DECLx3dconnector_connector1_trans'>
                <Transform DEF='DECLx3dconnector_connector1_rotscale'>
                    <Shape>
                        <Appearance>
                            <Material diffuseColor='0.2 0.7 0.7' transparency='0.5'/>
                        </Appearance>
                        <Cylinder radius='0.05'/>
                    </Shape>
                </Transform>
            </Transform>
            <Script DEF='DECLx3dconnector_connector1_S1'>
                <field name='startnode' accessType='initializeOnly' type='SFNode'>
                    <Group USE='DECLpoint_G1_node'/>
                </field>
                <field name='endnode' accessType='initializeOnly' type='SFNode'>
                    <Group USE='DECLpoint_G2_node'/>
                </field>
                <field name='position' accessType='inputOutput' type='SFNode'>
                    <Transform USE='DECLx3dconnector_connector1_trans'/>
                </field>
                <field name='rotscale' accessType='inputOutput' type='SFNode'>
                    <Transform USE='DECLx3dconnector_connector1_rotscale'/>
                </field>
                <field name='set_startpoint' accessType='inputOnly' type='SFVec3f'/>
                <field name='set_endpoint' accessType='inputOnly' type='SFVec3f'/>
<![CDATA[
ecmascript:
        function recompute(startpoint,endpoint){
	    if (typeof endpoint === 'undefined') {
		return;
	    }
            var dif = endpoint.subtract(startpoint);
            var dist = dif.length()*0.5;
            var dif2 = dif.multiply(0.5);
            var norm = dif.normalize();
            var transl = startpoint.add(dif2);
	    if (typeof Quaternion !== 'undefined') {
		    return {
			    scale : new SFVec3f(1.0,dist,1.0),
			    translation : transl,
			    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)
		    };
	    } else if (typeof SFRotation !== 'undefined') {
		    return {
			    scale : new SFVec3f(1.0,dist,1.0),
			    translation : transl,
			    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)
		    };
	    } else {
		    return {
			    scale : new SFVec3f(1.0,dist,1.0),
			    translation : transl
		    };
	    }
	}
	function recompute_and_route(startpoint, endpoint) {
	      var trafo = recompute(startpoint, endpoint);
	      position.translation = trafo.translation;
	      rotscale.rotation = trafo.rotation;
	      rotscale.scale = trafo.scale;
	}
        function initialize(){
            recompute_and_route(startnode.translation,endnode.translation);
        }
        function set_startpoint(val,t){
            recompute_and_route(val,endnode.translation);
        }
        function set_endpoint(val,t){
            recompute_and_route(startnode.translation,val);
        }
]]>
            </Script>
        </Group>
        <ROUTE fromField='translation' fromNode='DECLpoint_G1_node' toField='set_startpoint' toNode='DECLx3dconnector_connector1_S1'/>
        <ROUTE fromField='translation' fromNode='DECLpoint_G2_node' toField='set_endpoint' toNode='DECLx3dconnector_connector1_S1'/>
    </Scene>
</X3D>
