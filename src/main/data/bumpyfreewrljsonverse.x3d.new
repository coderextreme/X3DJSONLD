<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "https://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Full" version="4.0" xsd:noNamespaceSchemaLocation="https://www.web3d.org/specifications/x3d-4.0.xsd" ><head><component name="Scripting" level="1"></component>
<component name="EnvironmentalEffects" level="3"></component>
<component name="Shaders" level="1"></component>
<component name="CubeMapTexturing" level="1"></component>
<component name="Texturing" level="1"></component>
<component name="Rendering" level="1"></component>
<component name="Grouping" level="3"></component>
<component name="Core" level="1"></component>
<component name="DIS" level="2"></component>
<!--<component name='Shape' level='4'></component>--><!--Additional authoring resources for meta-tags: http://www.dublincore.org/documents/dcmi-terms http://www.dublincore.org/documents/dces http://www.w3.org/TR/html4/struct/global.html#h-7.4.4 http://vancouver-webpages.com/META http://vancouver-webpages.com/META/about-mk-metas2.html Additional authoring resources for language codes: ftp://ftp.isi.edu/in-notes/bcp/bcp47.txt http://www.loc.gov/standards/iso639-2/langhome.html http://www.iana.org/numbers.html#L--><meta name="title" content="bumpyfreewrljsonverse.x3d"></meta>
<meta name="description" content="*enter description here, short-sentence summaries preferred*"></meta>
<meta name="creator" content="Doug Sanden, Christoph Valentin, John Carlson"></meta>
<meta name="translator" content="*if manually translating VRML-to-X3D, enter name of person translating here*"></meta>
<meta name="created" content="*enter date of initial version here*"></meta>
<meta name="translated" content="*enter date of translation here*"></meta>
<meta name="modified" content="*enter date of latest revision here*"></meta>
<meta name="version" content="*enter version here, if any*"></meta>
<meta name="reference" content="*enter reference citation or relative/online url here*"></meta>
<meta name="reference" content="*enter additional url/bibliographic reference information here*"></meta>
<meta name="requires" content="*enter reference resource here if required to support function, delivery, or coherence of content*"></meta>
<meta name="rights" content="*enter copyright information here* Example: Copyright (c) Web3D Consortium Inc. 2008, 2024"></meta>
<meta name="drawing" content="*enter drawing filename/url here*"></meta>
<meta name="MovingImage" content="*enter movie filename/url here*"></meta>
<meta name="photo" content="*enter photo filename/url here*"></meta>
<meta name="subject" content="*enter subject keywords here*"></meta>
<meta name="accessRights" content="*enter permission statements or url here*"></meta>
<meta name="identifier" content="*enter online Uniform Resource Identifier (URI) or Uniform Resource Locator (URL) address for this file here*"></meta>
<meta name="generator" content="PSPad, http://www.pspad.com/"></meta>
<meta name="license" content="license.html"></meta>
</head>
<!--"The Flower Review (TPREV)", a simple MU scene using DIS Sensor Event Distribution, It is assumed the reviewers (users) have a non-X3D voice channel (e.g. TeamSpeak) open for their "discussion about the teapot"--><Scene><!--basic nodes, which might be present in any scene--><NavigationInfo type="&quot;EXAMINE&quot;" avatarSize="0.25 1.75 0.75"></NavigationInfo>
<DirectionalLight ambientIntensity="0.2" direction="0 -1 0"></DirectionalLight>
<DirectionalLight ambientIntensity="0.2" direction="-1 -0.1 -1"></DirectionalLight>
<Viewpoint description="My Overview" fieldOfView="1.570796" position="0 1.75 60"></Viewpoint>
<!--LayerSet with two layers, navigation happens in layer 1--><LayerSet activeLayer="1" order="1 2"><!--the first Layer contains the main scenery - "The Review of the Flower (DIS Multiuser)"--><!--the second layer contains the sliders that are moved with the user's display like a HUD (heads up display)--><Layer pickable="true" objectType="&quot;ALL&quot;"><!--this group contains the red/green/blue 3D crosshair--><Group><!--Arrow X--><Transform translation="25 0 0" rotation="0 0 -1 1.57"><Shape><Cylinder DEF="Shaft" radius="0.35" height="50"></Cylinder>
<Appearance containerField="appearance"><Material containerField="material" DEF="RED" diffuseColor="1 0 0" emissiveColor="1 0 0"></Material>
</Appearance>
</Shape>
</Transform>
<Transform translation="50 0 0" rotation="0 0 -1 1.57"><Shape><Cone DEF="Tip" bottomRadius="0.8" height="3"></Cone>
<Appearance containerField="appearance"><Material containerField="material" USE="RED"></Material>
</Appearance>
</Shape>
</Transform>
<!--Arrow Y--><Transform translation="0 25 0"><Shape><Cylinder USE="Shaft"></Cylinder>
<Appearance containerField="appearance"><Material containerField="material" DEF="GREEN" diffuseColor="0 1 0" emissiveColor="0 1 0"></Material>
</Appearance>
</Shape>
</Transform>
<Transform translation="0 50 0"><Shape><Cone USE="Tip"></Cone>
<Appearance containerField="appearance"><Material containerField="material" USE="GREEN"></Material>
</Appearance>
</Shape>
</Transform>
<!--Arrow Z--><Transform translation="0 0 25" rotation="1 0 0 1.57"><Shape><Cylinder USE="Shaft"></Cylinder>
<Appearance containerField="appearance"><Material containerField="material" DEF="BLUE" diffuseColor="0 0 1" emissiveColor="0 0 1"></Material>
</Appearance>
</Shape>
</Transform>
<Transform translation="0 0 50" rotation="1 0 0 1.57"><Shape><Cone USE="Tip"></Cone>
<Appearance containerField="appearance"><Material containerField="material" USE="BLUE"></Material>
</Appearance>
</Shape>
</Transform>
</Group>
<!--the model that is being reviewed by the users of this scene--><Transform DEF="FlowerTransform"><!--<Inline DEF="Flower" url='"bumpyfreewrl.x3d"' ></Inline>--><!--Images courtesy of Paul Debevec's Light Probe Image Gallery--><Background backUrl="&quot;../resources/images/all_probes/stpeters_cross/stpeters_back.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_back.png&quot;" bottomUrl="&quot;../resources/images/all_probes/stpeters_cross/stpeters_bottom.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_bottom.png&quot;" frontUrl="&quot;../resources/images/all_probes/stpeters_cross/stpeters_front.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_front.png&quot;" leftUrl="&quot;../resources/images/all_probes/stpeters_cross/stpeters_left.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_left.png&quot;" rightUrl="&quot;../resources/images/all_probes/stpeters_cross/stpeters_right.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_right.png&quot;" topUrl="&quot;../resources/images/all_probes/stpeters_cross/stpeters_top.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_top.png&quot;"></Background>
<Transform><Shape><!--<Sphere radius='40'></Sphere>--><IndexedFaceSet convex="false" DEF="Orbit"><Coordinate DEF="OrbitCoordinates"></Coordinate>
</IndexedFaceSet>
<Appearance containerField="appearance"><Material containerField="material" diffuseColor="0.7 0.7 0.7" specularColor="0.5 0.5 0.5"></Material>
<ComposedCubeMapTexture containerField="texture" DEF="texture"><ImageTexture containerField="back" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_back.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_back.png&quot;"></ImageTexture>
<ImageTexture containerField="bottom" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_bottom.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_bottom.png&quot;"></ImageTexture>
<ImageTexture containerField="front" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_front.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_front.png&quot;"></ImageTexture>
<ImageTexture containerField="left" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_left.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_left.png&quot;"></ImageTexture>
<ImageTexture containerField="right" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_right.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_right.png&quot;"></ImageTexture>
<ImageTexture containerField="top" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_top.png&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_top.png&quot;"></ImageTexture>
</ComposedCubeMapTexture>
<ComposedShader DEF="freewrlShader" language="GLSL"><field name="chromaticDispertion" accessType="inputOnly" type="SFVec3f" value="0.98 1 1.033"></field>
<field name="fw_textureCoordGenType" accessType="inputOnly" type="SFInt32" value="0"></field>
<field name="bias" type="SFFloat" accessType="inputOnly" value="0.5"></field>
<field name="scale" type="SFFloat" accessType="inputOnly" value="0.5"></field>
<field name="power" type="SFFloat" accessType="inputOnly" value="2"></field>
<field name="a" type="SFFloat" accessType="inputOutput" value="15"></field>
<field name="b" type="SFFloat" accessType="inputOutput" value="5"></field>
<field name="c" type="SFFloat" accessType="inputOutput" value="5"></field>
<field name="d" type="SFFloat" accessType="inputOutput" value="5"></field>
<field name="tdelta" type="SFFloat" accessType="inputOutput" value="0"></field>
<field name="pdelta" type="SFFloat" accessType="inputOutput" value="0"></field>
<ShaderPart url="&quot;../shaders/freewrl_flowers_chromatic.vs&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/shaders/freewrl_flowers_chromatic.vs&quot;" type="VERTEX"></ShaderPart>
<ShaderPart url="&quot;../shaders/freewrl.fs&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/shaders/freewrl_bubbles.fs&quot;" type="FRAGMENT"></ShaderPart>
<!--TO CONVERT TO A SPHERE <ShaderPart url='"../shaders/freewrl.vs"' type="VERTEX" containerField='parts'></ShaderPart> <ShaderPart url='"../shaders/freewrl_bubbles.fs"' containerField='parts' type='FRAGMENT'></ShaderPart>--></ComposedShader>
</Appearance>
</Shape>
</Transform>
</Transform>
<Script DEF="OrbitScript"><field name="coordinates" accessType="inputOutput" type="MFVec3f"></field>
<field name="coordIndexes" accessType="outputOnly" type="MFInt32"></field>
<field name="a" type="SFFloat" accessType="inputOutput" value="10"></field>
<field name="b" type="SFFloat" accessType="inputOutput" value="10"></field>
<field name="c" type="SFFloat" accessType="inputOutput" value="2"></field>
<field name="d" type="SFFloat" accessType="inputOutput" value="2"></field>
<field name="pdelta" type="SFFloat" accessType="inputOutput" value="0"></field>
<field name="tdelta" type="SFFloat" accessType="inputOutput" value="0"></field>
<![CDATA[ecmascript:
function initialize() {
     var resolution = 100;
     var theta = 0.0;
     var phi = 0.0;
     var delta = (2 * 3.141592653) / (resolution-1);
     var crds = new MFVec3f();
     var vecCount = 0;
     for ( i = 0; i < resolution; i++) {
     	for ( j = 0; j < resolution; j++) {
		var rho = a + b * Math.cos(c * theta + tdelta) * Math.cos(d * phi + pdelta);
		crds[vecCount] = new SFVec3f(
			rho * Math.cos(phi) * Math.cos(theta),
			rho * Math.cos(phi) * Math.sin(theta),
			rho * Math.sin(phi)
		);
		vecCount++;
		theta += delta;
	}
	phi += delta;
     }
     coordinates = crds;
     // coordinates = new MFVec3f(...crds);


     var cis = new MFInt32();
     var intCount = 0;
     for ( i = 0; i < resolution-1; i++) {
     	for ( j = 0; j < resolution-1; j++) {
	     cis[intCount++] = i*resolution+j;
	     cis[intCount++] = i*resolution+j+1;
	     cis[intCount++] = (i+1)*resolution+j+1;
	     cis[intCount++] = (i+1)*resolution+j;
	     cis[intCount++] = -1;
	}
    }
    coordIndexes = cis;
    // coordIndexes = new MFInt32(...cis);
}]]></Script>
<ROUTE fromField="coordIndexes" fromNode="OrbitScript" toField="set_coordIndex" toNode="Orbit"></ROUTE>
<ROUTE fromField="coordinates" fromNode="OrbitScript" toField="set_point" toNode="OrbitCoordinates"></ROUTE>
<!--DIS multiuser facilities--><DISEntityManager readInterval="3" DEF="EntityManager" networkMode="networkReader"><DISEntityTypeMapping readInterval="3" category="77" specific="1" url="&quot;../data/Gramps8Final.x3d&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/data/Gramps8Final.x3d&quot;"></DISEntityTypeMapping>
<DISEntityTypeMapping readInterval="3" category="77" specific="2" url="&quot;../data/Leif8Final.x3d&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/data/Leif8Final.x3d&quot;"></DISEntityTypeMapping>
<DISEntityTypeMapping readInterval="3" category="77" specific="3" url="&quot;../data/Lily8Final.x3d&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/data/Lily8Final.x3d&quot;"></DISEntityTypeMapping>
<DISEntityTypeMapping readInterval="3" category="77" specific="4" url="&quot;../data/Tufani8Final.x3d&quot; &quot;https://coderextreme.net/X3DJSONLD/src/main/data/Tufani8Final.x3d&quot;"></DISEntityTypeMapping>
</DISEntityManager>
<Collision enabled="false"><Group DEF="AvatarHolder"></Group>
</Collision>
<ROUTE fromField="addedEntities" fromNode="EntityManager" toField="addChildren" toNode="AvatarHolder"></ROUTE>
<ROUTE fromField="removedEntities" fromNode="EntityManager" toField="removeChildren" toNode="AvatarHolder"></ROUTE>
</Layer>
<LayoutLayer pickable="true" objectType="&quot;ALL&quot;"><!--positioning the LayoutLayer--><!--clipping the LayoutLayer--><!--the content (children) of the LayoutLayer--><!--first, the slider for scaling the model--><Transform translation="0 0 -3"><Shape><Appearance containerField="appearance"><Material containerField="material" diffuseColor="0 0 0" transparency="0.7"></Material>
</Appearance>
<Box size="100 100 0.02"></Box>
</Shape>
</Transform>
<Transform DEF="equationTransform"><Transform translation="0 0 -20"><Shape><Text DEF="equation" string="&quot;r = a + b * cos(c * theta + tdelta) * cos (d * phi + pdelta)&quot;"><FontStyle containerField="fontStyle" size="0.09"></FontStyle>
</Text>
<Appearance containerField="appearance"><Material containerField="material" diffuseColor="1 1 0"></Material>
</Appearance>
</Shape>
</Transform>
</Transform>
<ProtoDeclare name="SliderProto"><ProtoInterface><field name="sliderTranslation" accessType="inputOutput" type="SFVec3f" value="0 0.7 0"></field>
<field name="transformTranslation" accessType="inputOutput" type="SFVec3f" value="0 0 0.1"></field>
<field name="sensorTranslation" accessType="inputOutput" type="SFVec3f" value="0 0 0"></field>
<field name="textString" accessType="inputOutput" type="MFString" value="&quot;a=&quot;"></field>
<field name="parameterScale" accessType="inputOutput" type="SFFloat" value="30"></field>
<field name="parameterName" accessType="inputOutput" type="SFString" value="a"></field>
<field name="shaderNode" accessType="inputOutput" type="SFNode"></field>
</ProtoInterface>
<ProtoBody><Group><Transform DEF="protoSlider" translation="0 0.7 0"><IS><connect nodeField="translation" protoField="sliderTranslation"></connect>
</IS>
<Transform DEF="protoTransform" translation="0 0 0.1"><IS><connect nodeField="translation" protoField="sensorTranslation"></connect>
</IS>
<PlaneSensor DEF="protoSensor" maxPosition="1 0"></PlaneSensor>
<Transform translation="0 0 0"><TouchSensor DEF="protoTS"></TouchSensor>
</Transform>
<Transform><Shape><Text DEF="protoText" string="&quot;a=&quot;"><IS><connect nodeField="string" protoField="textString"></connect>
</IS>
<FontStyle containerField="fontStyle" size="0.23"></FontStyle>
</Text>
<Appearance containerField="appearance"><Material containerField="material"></Material>
</Appearance>
</Shape>
</Transform>
</Transform>
</Transform>
<Script DEF="protoValueTransformerScript" directOutput="true" mustEvaluate="true"><field name="protoScale" accessType="inputOutput" type="SFFloat" value="30"></field>
<field name="protoParameterName" accessType="inputOutput" type="SFString" value="a"></field>
<field name="shader" accessType="inputOutput" type="SFNode"></field>
<field name="newTranslation" accessType="inputOnly" type="SFVec3f" value="1 1 1"></field>
<field name="protoValue_changed" accessType="outputOnly" type="SFFloat" value="1"></field>
<field name="protoText_changed" accessType="outputOnly" type="MFString" value="&quot;1.0&quot;"></field>
<IS><connect nodeField="protoScale" protoField="parameterScale"></connect>
<connect nodeField="protoParameterName" protoField="parameterName"></connect>
<connect nodeField="shader" protoField="shaderNode"></connect>
</IS>
<![CDATA[ecmascript:
const newTranslation = function(Value) {
	'use strict';
	protoValue_changed = Value.x * protoScale;
	protoText_changed = new MFString(protoParameterName+'='+protoValue_changed.toFixed(2));

        var orientation = Value.x;

        var ps = Browser.currentScene.getNamedNode("protoSensor");
        var t = Browser.currentScene.getNamedNode("protoTransform");
        var txt = Browser.currentScene.getNamedNode("protoText");
        if (shader) {
            X3DUser.LOG("old", shader.getField(protoParameterName).getValue());
            shader.getField(protoParameterName).setValue(orientation * protoScale);
            X3DUser.LOG("new", shader.getField(protoParameterName).getValue());
        } else {
            X3DUser.LOG('ComposedShader not found');
        }
        if (txt) {
            var stringField = txt.getField("string");
            X3DUser.LOG("old", stringField.getValue());
            var label = protoParameterName;
            stringField.setValue(new MFString(label+"="+(orientation * protoScale).toFixed(2)));
            X3DUser.LOG("new", stringField.getValue());
        } else {
            X3DUser.LOG('ComposedShader not found');
        }
        if (ps) {
            ps.offset = new SFVec3f(orientation, ps.offset[1], ps.offset[2]);
        } else {
            X3DUser.LOG("Not found protoSensor");
        }
        if (t) {
            t.translation = new SFVec3f(orientation, t.translation[1], t.translation[2]);
        } else {
            X3DUser.LOG("Not found protoTransform");
        }
}]]></Script>
<ROUTE fromField="translation_changed" fromNode="protoSensor" toField="set_translation" toNode="protoTransform"></ROUTE>
<ROUTE fromField="translation_changed" fromNode="protoSensor" toField="newTranslation" toNode="protoValueTransformerScript"></ROUTE>
<ROUTE fromField="protoText_changed" fromNode="protoValueTransformerScript" toField="string" toNode="protoText"></ROUTE>
</Group>
</ProtoBody>
</ProtoDeclare>
<ProtoInstance name="SliderProto" DEF="aPI"><fieldValue name="sliderTranslation" value="0 0.7 0"></fieldValue>
<fieldValue name="transformTranslation" value="0 0 0.1"></fieldValue>
<fieldValue name="sensorTranslation" value="0 0 0"></fieldValue>
<fieldValue name="textString" value="&quot;a=&quot;"></fieldValue>
<fieldValue name="parameterScale" value="30"></fieldValue>
<fieldValue name="parameterName" value="a"></fieldValue>
<fieldValue name="shaderNode"><ComposedShader USE="freewrlShader"></ComposedShader>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="SliderProto" DEF="bPI"><fieldValue name="sliderTranslation" value="0 0.4 0"></fieldValue>
<fieldValue name="transformTranslation" value="0 0 0.1"></fieldValue>
<fieldValue name="sensorTranslation" value="0 0 0"></fieldValue>
<fieldValue name="textString" value="&quot;b=&quot;"></fieldValue>
<fieldValue name="parameterScale" value="30"></fieldValue>
<fieldValue name="parameterName" value="b"></fieldValue>
<fieldValue name="shaderNode"><ComposedShader USE="freewrlShader"></ComposedShader>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="SliderProto" DEF="cPI"><fieldValue name="sliderTranslation" value="0 0.1 0"></fieldValue>
<fieldValue name="transformTranslation" value="0 0 0.1"></fieldValue>
<fieldValue name="sensorTranslation" value="0 0 0"></fieldValue>
<fieldValue name="textString" value="&quot;c=&quot;"></fieldValue>
<fieldValue name="parameterScale" value="20"></fieldValue>
<fieldValue name="parameterName" value="c"></fieldValue>
<fieldValue name="shaderNode"><ComposedShader USE="freewrlShader"></ComposedShader>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="SliderProto" DEF="dPI"><fieldValue name="sliderTranslation" value="0 -0.2 0"></fieldValue>
<fieldValue name="transformTranslation" value="0 0 0.1"></fieldValue>
<fieldValue name="sensorTranslation" value="0 0 0"></fieldValue>
<fieldValue name="textString" value="&quot;d=&quot;"></fieldValue>
<fieldValue name="parameterScale" value="20"></fieldValue>
<fieldValue name="parameterName" value="d"></fieldValue>
<fieldValue name="shaderNode"><ComposedShader USE="freewrlShader"></ComposedShader>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="SliderProto" DEF="tdeltaPI"><fieldValue name="sliderTranslation" value="0 -0.5 0"></fieldValue>
<fieldValue name="transformTranslation" value="0 0 0.1"></fieldValue>
<fieldValue name="sensorTranslation" value="0 0 0"></fieldValue>
<fieldValue name="textString" value="&quot;tdelta=&quot;"></fieldValue>
<fieldValue name="parameterScale" value="6.28"></fieldValue>
<fieldValue name="parameterName" value="tdelta"></fieldValue>
<fieldValue name="shaderNode"><ComposedShader USE="freewrlShader"></ComposedShader>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="SliderProto" DEF="pdeltaPI"><fieldValue name="sliderTranslation" value="0 -0.8 0"></fieldValue>
<fieldValue name="transformTranslation" value="0 0 0.1"></fieldValue>
<fieldValue name="sensorTranslation" value="0 0 0"></fieldValue>
<fieldValue name="textString" value="&quot;pdelta=&quot;"></fieldValue>
<fieldValue name="parameterScale" value="6.28"></fieldValue>
<fieldValue name="parameterName" value="pdelta"></fieldValue>
<fieldValue name="shaderNode"><ComposedShader USE="freewrlShader"></ComposedShader>
</fieldValue>
</ProtoInstance>
<Layout containerField="layout" align="&quot;LEFT&quot; &quot;BOTTOM&quot;" offset="-0.2 0.19" offsetUnits="&quot;WORLD&quot; &quot;WORLD&quot;" scaleMode="&quot;NONE&quot; &quot;NONE&quot;" size="0.4 0.6" sizeUnits="&quot;WORLD&quot; &quot;WORLD&quot;"></Layout>
<Viewport clipBoundary="0 1 0 1"></Viewport>
</LayoutLayer>
</LayerSet>
</Scene>
</X3D>