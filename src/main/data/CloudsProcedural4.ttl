@prefix : <https://www.web3d.org/semantics/scenes/X3dScene1#> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <http://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix x3d: <https://www.web3d.org/semantics/ontologies/X3dOntology4.0#> .

[ rdf:type owl:Ontology ;
   owl:imports <file:/E:/Rackstation-SVN/Papers/2019/IC3D-X3D/Paper/Files/X3dOntology4.0.ttl>
 ] .

:Scene-anonymous rdf:type owl:NamedIndividual , x3d:Scene .
:Viewpoint-anonymous rdf:type owl:NamedIndividual , x3d:Viewpoint ;
	x3d:description "Main" ;
	x3d:jump "false" ;
	x3d:orientation "0 1 0 1.57" ;
	x3d:position "50000 1000 42000" ;
	x3d:fieldOfView "0.7854" ;
	x3d:centerOfRotation "0 0 0" ;
	x3d:retainUserOffsets "false" ;
	x3d:containerField "children" .
:Viewpoint-anonymous rdf:type owl:NamedIndividual , x3d:Viewpoint ;
	x3d:description "Light House Tower" ;
	x3d:jump "false" ;
	x3d:orientation "0 1 0 1.3" ;
	x3d:position "45000 1290 44000" ;
	x3d:fieldOfView "0.7854" ;
	x3d:centerOfRotation "0 0 0" ;
	x3d:retainUserOffsets "false" ;
	x3d:containerField "children" .
:Viewpoint-anonymous rdf:type owl:NamedIndividual , x3d:Viewpoint ;
	x3d:description "centerWest" ;
	x3d:jump "false" ;
	x3d:orientation "0 1 0 2.5" ;
	x3d:position "48000 1000 20000" ;
	x3d:fieldOfView "0.7854" ;
	x3d:centerOfRotation "0 0 0" ;
	x3d:retainUserOffsets "false" ;
	x3d:containerField "children" .
:Background-anonymous rdf:type owl:NamedIndividual , x3d:Background ;
	x3d:groundColor "0 0 1" ;
	x3d:skyColor "0 0 1" ;
	x3d:transparency "0" ;
	x3d:containerField "children" .
:DirectionalLight-anonymous rdf:type owl:NamedIndividual , x3d:DirectionalLight ;
	x3d:ambientIntensity "1" ;
	x3d:direction "-1 0 0" ;
	x3d:global "true" ;
	x3d:color "1 1 1" ;
	x3d:intensity "1" ;
	x3d:on "true" ;
	x3d:containerField "children" .
:Terrain rdf:type owl:NamedIndividual , x3d:Group ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Terrain x3d:hasTransform :Transform-anonymous .
:Transform-anonymous rdf:type owl:NamedIndividual , x3d:Transform ;
	x3d:scale "50 50 50" ;
	x3d:translation "25000 0 25000" ;
	x3d:center "0 0 0" ;
	x3d:rotation "0 0 1 0" ;
	x3d:scaleOrientation "0 0 1 0" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Inline-anonymous rdf:type owl:NamedIndividual , x3d:Inline ;
	x3d:url "MontereyBayLargeMesh.x3d https://savage.nps.edu/Savage/Environment/Atmosphere/MontereyBayLargeMesh.x3d MontereyBayLargeMesh.wrl https://savage.nps.edu/Savage/Environment/Atmosphere/MontereyBayLargeMesh.wrl" ;
	x3d:load "true" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Terrain x3d:hasTransform :Transform-anonymous .
:Transform-anonymous rdf:type owl:NamedIndividual , x3d:Transform ;
	x3d:rotation "1 0 0 1.57" ;
	x3d:translation "25000 0 25000" ;
	x3d:center "0 0 0" ;
	x3d:scale "1 1 1" ;
	x3d:scaleOrientation "0 0 1 0" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Shape-anonymous rdf:type owl:NamedIndividual , x3d:Shape ;
	x3d:containerField "children" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" .
:Rectangle2D-anonymous rdf:type owl:NamedIndividual , x3d:Rectangle2D ;
	x3d:size "77000 55000" ;
	x3d:solid "false" ;
	x3d:containerField "geometry" .
:Appearance-anonymous rdf:type owl:NamedIndividual , x3d:Appearance ;
	x3d:containerField "appearance" .
:ImageTexture-anonymous rdf:type owl:NamedIndividual , x3d:ImageTexture ;
	x3d:url "ocean.png https://savage.nps.edu/Savage/Environment/Atmosphere/ocean.png" ;
	x3d:repeatS "true" ;
	x3d:repeatT "true" ;
	x3d:containerField "texture" .
:Placemarks rdf:type owl:NamedIndividual , x3d:Group ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Placemarks x3d:hasTransform :Transform-anonymous .
:Transform-anonymous rdf:type owl:NamedIndividual , x3d:Transform ;
	x3d:scale "50 50 50" ;
	x3d:translation "45000 30 44000" ;
	x3d:center "0 0 0" ;
	x3d:rotation "0 0 1 0" ;
	x3d:scaleOrientation "0 0 1 0" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Inline-anonymous rdf:type owl:NamedIndividual , x3d:Inline ;
	x3d:url "Lighthouse.x3d https://savage.nps.edu/Savage/Environment/Atmosphere/Lighthouse.x3d Lighthouse.wrl https://savage.nps.edu/Savage/Environment/Atmosphere/Lighthouse.wrl" ;
	x3d:load "true" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Clouds rdf:type owl:NamedIndividual , x3d:Group ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Clouds x3d:hasTransform :Cumulus .
:Cumulus rdf:type owl:NamedIndividual , x3d:Transform ;
	x3d:center "0 0 0" ;
	x3d:rotation "0 0 1 0" ;
	x3d:scale "1 1 1" ;
	x3d:scaleOrientation "0 0 1 0" ;
	x3d:translation "0 0 0" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Clouds x3d:hasTransform :Cirrus .
:Cirrus rdf:type owl:NamedIndividual , x3d:Transform ;
	x3d:center "0 0 0" ;
	x3d:rotation "0 0 1 0" ;
	x3d:scale "1 1 1" ;
	x3d:scaleOrientation "0 0 1 0" ;
	x3d:translation "0 0 0" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Clouds x3d:hasTransform :Fog .
:Fog rdf:type owl:NamedIndividual , x3d:Transform ;
	x3d:center "0 0 0" ;
	x3d:rotation "0 0 1 0" ;
	x3d:scale "1 1 1" ;
	x3d:scaleOrientation "0 0 1 0" ;
	x3d:translation "0 0 0" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .
:Clouds x3d:hasScript :PixelScript .
:PixelScript rdf:type owl:NamedIndividual , x3d:Script ;
	x3d:directOutput "true" ;
	x3d:mustEvaluate "false" ;
	x3d:containerField "children" .

        :PixelScript x3d:hasfield :field-anonymous .
:field-anonymous rdf:type owl:NamedIndividual , x3d:field ;
	x3d:accessType "initializeOnly" ;
	x3d:name "Cumulus" .
:Transform-anonymous rdf:type owl:NamedIndividual , x3d:Transform ;
	x3d:USE "Cumulus" ;
	x3d:center "0 0 0" ;
	x3d:rotation "0 0 1 0" ;
	x3d:scale "1 1 1" ;
	x3d:scaleOrientation "0 0 1 0" ;
	x3d:translation "0 0 0" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .

        :PixelScript x3d:hasfield :field-anonymous .
:field-anonymous rdf:type owl:NamedIndividual , x3d:field ;
	x3d:accessType "initializeOnly" ;
	x3d:name "Cirrus" .
:Transform-anonymous rdf:type owl:NamedIndividual , x3d:Transform ;
	x3d:USE "Cirrus" ;
	x3d:center "0 0 0" ;
	x3d:rotation "0 0 1 0" ;
	x3d:scale "1 1 1" ;
	x3d:scaleOrientation "0 0 1 0" ;
	x3d:translation "0 0 0" ;
	x3d:bboxCenter "0 0 0" ;
	x3d:bboxSize "-1 -1 -1" ;
	x3d:containerField "children" .

        :PixelScript x3d:hasfield :field-anonymous .
:field-anonymous rdf:type owl:NamedIndividual , x3d:field ;
	x3d:accessType "initializeOnly" ;
	x3d:name "Fog" .

        
ecmascript:


function cumulustranslation() // These values designate the boundary location of the cloud
{
	X = 50000*Math.random();          //  X horizontal range
	Y = 1000 + 300*Math.random();	 //  Y vertical base + range
	Z = 50000*Math.random();         // z horizontal range

	randomt = new String(X+' '+Y+' '+Z);

	return randomt;
	
}



function cumulusscale() // these values scale a cloud within a designated size
{

	var maxscale = 1;

	scale = Math.round(9+maxscale*Math.random());
	X = 1.5*scale;
	Y = scale;
	Z = scale;

	randomscale = new String(X+' '+Y+' '+Z);

	return randomscale;
	
}


function cirrustranslation() // These values designate the boundary location of the cloud
{
	X = 50000*Math.random();          //  X horizontal range
	Y = 8000 + 1000*Math.random();	 //  Y vertical base + range
	Z = 50000*Math.random();         // z horizontal range

	randomt = new String(X+' '+Y+' '+Z);

	return randomt;
	
}



function cirrusscale() // these values scale a cloud within a designated size
{

	var maxscale = 1;

	scale = Math.round(9+maxscale*Math.random());
	X = 1.5*scale;
	Y = 2*Math.random();
	Z = 1.5*scale;

	randomscale = new String(X+' '+Y+' '+Z);

	return randomscale;
	
}


function cumulussectiontranslation() // These random values place another portion of cumulus type cloud
{

	randomtheta = 6.28319*Math.random();
	randomphi = .7854*Math.random();
	randomradius = 90 + 5*Math.random();//the first whole number should be close to the sectionradius

	X = randomradius*Math.cos(randomtheta)*Math.sin(randomphi);
	Z = randomradius*Math.sin(randomtheta)*Math.sin(randomphi);
	Y = randomradius*Math.cos(randomphi);
	

	randomt = new String(X+' '+Y+' '+Z);

	return randomt;
	
}

function cirrussectiontranslation() // These random values place another portion of cirrus type cloud
{

	randomtheta = 6.28319*Math.random();
	randomphi = .7854*Math.random();
	randomradius = 90 + 5*Math.random();//the first whole number should be close to the sectionradius

	X = randomradius*Math.cos(randomtheta)*Math.sin(randomphi);
	Z = randomradius*Math.sin(randomtheta)*Math.sin(randomphi);
	Y = randomradius*Math.cos(randomphi);
	

	randomt = new String(X+' '+Y+' '+Z);

	return randomt;
	
}


function rotation() // This random value is for the billboard rotation not used in this script
{


	radians = 6.28*Math.random();

	randomr = new String('0 0 1 ' + radians );
	
	
	return randomr;
	
}

function cumulus()
{

var maxi = 20;  // number of clouds

var maxj = 5; // denotes how many portions affecting the size of the cloud

var maxk = 8;  // number of billboards indicating cloud density

var sectionradius = 100;  //radius of individual cloud sections





for (var i=0; i < maxi; i++) 
{



CloudStringA = '	Transform {		\n' +
'    scale '+ cumulusscale() + '               	\n' +
'    translation '+ cumulustranslation() + '    \n' +    // cloud placement
'    children [	                                \n';


CloudStringB = new Array();
CloudStringF = new Array();

   	for (var j=0; j < maxj; j++)
   	{

	radius = 0;

	CloudStringB[j]= '  Transform {		    	       \n' +
	'    translation '+ cumulussectiontranslation() + '    \n' +     // section placement
	'    children [	                                       \n';

	
	CloudStringC = new Array();
	image = new String();

      		for (var k=1; k < maxk; k++)  // maxk value denotes how many textured billboards make up the cloud 
      		{


		randomtheta = 6.28319*Math.random();
		randomphi = 1.57079*Math.random();
		radius = radius+(sectionradius/maxk); // radius incremental steps based on billow radius and max billboards

		X = radius*Math.cos(randomtheta)*Math.sin(randomphi);
		Z = radius*Math.sin(randomtheta)*Math.sin(randomphi);
		Y = radius*Math.cos(randomphi);


		if (Y <= 30) //cloud shading and lighting control
  	{	
	image = ' \"CloudTexture1_5.png\" \"https://savage.nps.edu/Savage/Environment/Spheretexture.png\" \n';
  	}

  		else
  	{	
	image = ' \"CloudTexture1_4.png\" \"https://savage.nps.edu/Savage/Environment/Spheretexture.png\" \n';
  	}

	
		
		Billboardtranslation = new String(X+' '+Y+' '+Z);

		CloudStringC[k] = '	Transform {		                \n' +
		'            translation '+ Billboardtranslation   + '          \n' +     // random billboard placement within radius designated above
		'	  children [	                                        \n' +
		'	      Billboard {	                                \n' +
		'	        axisOfRotation 0 0 0	                        \n' +     // 0 0 0 designates rotation on all axis
		'	        children [	                                \n' +
		'	            Transform {	                		\n' +
		'	              rotation  0 0 0 0 		        \n' +     // a rotation of the individual billboards can be defined
		'	              children [	                        \n' +
		'	                  Shape {	                        \n' +
		'	                    appearance Appearance {	        \n' +
		'				material Material {		\n' +
		'				                }  		\n' +
		'	                      texture ImageTexture {	        \n' +
		'	                        url [ ' + image + ' ]           \n' + 
		'	                      }	                                \n' +
		'	                    }	                                \n' +
		'	                    geometry IndexedFaceSet {	        \n' +     // define type of geometry to texture
		'	                      coordIndex [ 0, 1, 2, 3 ]	        \n' +
		'			      solid FALSE		        \n' +
		'	                      coord Coordinate {	        \n' +
		'	                        point [ 50 50 0,	        \n' +     // define size of the geometry. Here 100 meter 2D square.
		'	                                50 -50 0,	        \n' +
		'	                               -50 -50 0,	        \n' +
		'	                               -50 50 0 ]	        \n' +
		'	                      }	                                \n' +
		'	                    }	                                \n' +
		'	                  }	                                \n' +
		'	              ]	                                        \n' +
		'	            }	                                        \n' +
		'	       ]	                                        \n' +
		'	   }	                                                \n' +
		'      ]	                                                \n' +
		'     }	                                                        \n';      
		

		}

	CloudStringD = CloudStringC.join(' ');

	
	CloudStringE = '   ]	                 \n' +
	'	}	                         \n';

	CloudStringF[j] = CloudStringB[j] + CloudStringD +CloudStringE;


	}

CloudStringG = CloudStringF.join(' ');

CloudStringH = '      ]	                                        \n' +
'     }	                                                        \n' +
'#########################################################      \n';

CloudString = CloudStringA + CloudStringG + CloudStringH;



newNode = Browser.createVrmlFromString(CloudString);
Cumulus.children[i] = newNode[0];


   }

}

function cirrus()

{

var maxi = 2;  // number of clouds

var maxj = 5; // denotes how many portions affecting the size of the cloud

var maxk = 8;  // number of billboards indicating cloud density

var sectionradius = 1000;  //radius of individual cloud sections





for (var i=0; i < maxi; i++) 
{



CloudStringA = '	Transform {		 \n' +
'    scale '+ cirrusscale() + '               	 \n' +
'    translation '+ cirrustranslation() + '      \n' +    // cloud placement
'    children [	                                 \n';


CloudStringB = new Array();
CloudStringF = new Array();

   	for (var j=0; j < maxj; j++)
   	{

	radius = 0;

	CloudStringB[j]= '  Transform {		    	      \n' +
	'    translation '+ cirrussectiontranslation() + '    \n' +     // section placement
	'    children [	                                      \n';

	
	CloudStringC = new Array();

      		for (var k=1; k < maxk; k++)  // maxk value denotes how many textured billboards make up the cloud 
      		{


		randomtheta = 6.28319*Math.random();
		randomphi = 1.57079*Math.random();
		radius = radius+(sectionradius/maxk); // radius incremental steps based on section radius and max billboards

		X = radius*Math.cos(randomtheta)*Math.sin(randomphi);
		Z = radius*Math.sin(randomtheta)*Math.sin(randomphi);
		Y = radius*Math.cos(randomphi);
		
		Billboardtranslation = new String(X+' '+Y+' '+Z);

		CloudStringC[k] = '	Transform {		                \n' +
		'            translation '+ Billboardtranslation   + '          \n' +     // random billboard placement within radius designated above
		'	  children [	                                        \n' +
		'	      Billboard {	                                \n' +
		'	        axisOfRotation 0 0 0	                        \n' +     // 0 0 0 designates rotation on all axis
		'	        children [	                                \n' +
		'	            Transform {	                		\n' +
		'	              rotation '  + rotation() + '	        \n' +
		'	              children [	                        \n' +
		'	                  Shape {	                        \n' +
		'	                    appearance Appearance {	        \n' +
		'			    material Material {			\n' +
		'			    }					\n' +
 		'	                      texture ImageTexture {	        \n' +
		'	                        url [\"cloudtexture3.png\" \"https://savage.nps.edu/Savage/Environment/cloudtexture1_4.png\" ] \n' +
		'	                      }	                                \n' +
		'	                    }	                                \n' +
		'	                    geometry IndexedFaceSet {	        \n' +     // define type of geometry to texture
		'	                      coordIndex [ 0, 1, 2, 3 ]	        \n' +
		'			      solid FALSE		        \n' +
		'	                      coord Coordinate {	        \n' +
		'	                        point [ 500 500 0,	        \n' +     // define size of the geometry. Here 100 meter 2D square.
		'	                                500 -500 0,	        \n' +
		'	                               -500 -500 0,	        \n' +
		'	                               -500 500 0 ]	        \n' +
		'	                      }	                                \n' +
		'	                    }	                                \n' +
		'	                  }	                                \n' +
		'	              ]	                                        \n' +
		'	            }	                                        \n' +
		'	       ]	                                        \n' +
		'	   }	                                                \n' +
		'      ]	                                                \n' +
		'     }	                                                        \n';      
		

		}

	CloudStringD = CloudStringC.join(' ');

	CloudStringE = '   ]	                 \n' +
	'	}	                         \n';

	CloudStringF[j] = CloudStringB[j] + CloudStringD +CloudStringE;


	}

CloudStringG = CloudStringF.join(' ');

CloudStringH = '      ]	                                        \n' +
'     }	                                                        \n' +
'#########################################################      \n';

CloudString = CloudStringA + CloudStringG + CloudStringH;



newNode = Browser.createVrmlFromString(CloudString);
Cirrus.children[i] = newNode[0];

  }

}


function initialize()

{

cumulus();

cirrus();
}

      :Clouds x3d:hasDirectionalLight :DirectionalLight-anonymous .
:DirectionalLight-anonymous rdf:type owl:NamedIndividual , x3d:DirectionalLight ;
	x3d:ambientIntensity "1" ;
	x3d:color "1 0 0" ;
	x3d:direction "-1 -1 0" ;
	x3d:global "true" ;
	x3d:intensity "1" ;
	x3d:on "true" ;
	x3d:containerField "children" .
