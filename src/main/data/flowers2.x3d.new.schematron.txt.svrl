<svrl:schematron-output xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" title="X3D Graphics Validity Checks using Schematron" schemaVersion=""><!--   
		   
		   
		 -->
   <svrl:active-pattern document="file:/C:/Users/jcarl/X3DJSONLD/src/main/data/flowers2.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 was approved by Web3D Consortium and ISO in 2023.</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 offers many new features including interoperability with HTML5, glTF
         2.0 Physically Based Rendering (PBR), and Web Audio API.</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:fired-rule context="NavigationInfo"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="DirectionalLight | PointLight | SpotLight"/>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:fired-rule context="ProtoInterface"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="ProtoBody"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="Script"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="parent::Script and not(../@url) and ((@accessType='outputOnly') or (@accessType='inputOutput')) and not(starts-with(@type,'MF')) and not(contains($CDATAblock,concat(' ',@name,'='))) and not(contains($CDATAblock,concat(' ',@name,' ='))) and not(contains($CDATAblock,concat(' ',@name,'['))) and not(contains($CDATAblock,concat(' ',@name,' [')))" role="warning" location="/X3D/Scene/Group/ProtoDeclare/ProtoBody/Group/Script/field[4]">
      <svrl:text>&lt;Script DEF='OrbitScript'&gt; &lt;field name='e' accessType='inputOutput'/&gt; does not send output event via assignment statement e=___; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="parent::Script and not(../@url) and ((@accessType='outputOnly') or (@accessType='inputOutput')) and not(starts-with(@type,'MF')) and not(contains($CDATAblock,concat(' ',@name,'='))) and not(contains($CDATAblock,concat(' ',@name,' ='))) and not(contains($CDATAblock,concat(' ',@name,'['))) and not(contains($CDATAblock,concat(' ',@name,' [')))" role="warning" location="/X3D/Scene/Group/ProtoDeclare/ProtoBody/Group/Script/field[8]">
      <svrl:text>&lt;Script DEF='OrbitScript'&gt; &lt;field name='resolution' accessType='inputOutput'/&gt; does not send output event via assignment statement resolution=___; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and $protoFound and (@value=(//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@value))" role="hint" location="/X3D/Scene/Group/ProtoInstance[1]/fieldValue[1]">
      <svrl:text>&lt;ProtoInstance name='orbit' DEF=''&gt; &lt;fieldValue name='translation' value='-8 0 0'/&gt; with defined type='SFVec3f' accessType='inputOutput' has default value and so this fieldValue is optional </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and $protoFound and (@value=(//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@value))" role="hint" location="/X3D/Scene/Group/ProtoInstance[1]/fieldValue[2]">
      <svrl:text>&lt;ProtoInstance name='orbit' DEF=''&gt; &lt;fieldValue name='diffuseColor' value='1 0.5 0'/&gt; with defined type='SFColor' accessType='inputOutput' has default value and so this fieldValue is optional </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and $protoFound and (@value=(//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@value))" role="hint" location="/X3D/Scene/Group/ProtoInstance[1]/fieldValue[3]">
      <svrl:text>&lt;ProtoInstance name='orbit' DEF=''&gt; &lt;fieldValue name='specularColor' value='1 0.5 0'/&gt; with defined type='SFColor' accessType='inputOutput' has default value and so this fieldValue is optional </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and $protoFound and (@value=(//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@value))" role="hint" location="/X3D/Scene/Group/ProtoInstance[1]/fieldValue[4]">
      <svrl:text>&lt;ProtoInstance name='orbit' DEF=''&gt; &lt;fieldValue name='transparency' value='0.75'/&gt; with defined type='SFFloat' accessType='inputOutput' has default value and so this fieldValue is optional </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
</svrl:schematron-output>