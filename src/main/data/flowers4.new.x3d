<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Immersive' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <component name='Shaders' level='1'/>
    <component name='CubeMapTexturing' level='1'/>
    <meta content='flowers4.x3d' name='title'/>
    <meta content='John Carlson' name='creator'/>
    <meta content='manual' name='generator'/>
    <meta content='https://coderextreme.net/X3DJSONLD/flowers4.x3d' name='identifier'/>
    <meta content='an animated flower' name='description'/>
  </head>
  <Scene>
    <NavigationInfo avatarSize='0.25 1.6 0.75' transitionType='"LINEAR"' type='"EXAMINE" "ANY"'/>
    <Background backUrl='"../resources/images/all_probes/stpeters_cross/stpeters_back.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_back.png"' bottomUrl='"../resources/images/all_probes/stpeters_cross/stpeters_bottom.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_bottom.png"' frontUrl='"../resources/images/all_probes/stpeters_cross/stpeters_front.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_front.png"' leftUrl='"../resources/images/all_probes/stpeters_cross/stpeters_left.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_left.png"' rightUrl='"../resources/images/all_probes/stpeters_cross/stpeters_right.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_right.png"' topUrl='"../resources/images/all_probes/stpeters_cross/stpeters_top.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_top.png"'/>
    <Transform DEF='transform'>
      <Shape>
        <Appearance>
          <Material diffuseColor='0.7 0.7 0.7' specularColor='0.5 0.5 0.5'/>
          <ComposedShader DEF='shader' language='GLSL'>
            <field name='cube' accessType='inputOutput' type='SFInt32' value='0'/>
            <field name='chromaticDispertion' accessType='inputOutput' type='SFVec3f' value='0.98 1 1.033'/>
            <field name='bias' accessType='inputOutput' type='SFFloat' value='0.5'/>
            <field name='scale' accessType='inputOutput' type='SFFloat' value='0.5'/>
            <field name='power' accessType='inputOutput' type='SFFloat' value='2.0'/>
            <ShaderPart url='"../shaders/x3dom.vs" "https://coderextreme.net/X3DJSONLD/src/main/shaders/x3dom.vs"'/>
            <ShaderPart type='FRAGMENT' url='"../shaders/pc_bubbles.fs" "https://coderextreme.net/X3DJSONLD/src/main/shaders/pc_bubbles.fs"'/>
          </ComposedShader>
          <ComposedCubeMapTexture>
            <ImageTexture containerField='back' url='"../resources/images/all_probes/stpeters_cross/stpeters_back.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_back.png"'/>
            <ImageTexture containerField='bottom' url='"../resources/images/all_probes/stpeters_cross/stpeters_bottom.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_bottom.png"'/>
            <ImageTexture containerField='front' url='"../resources/images/all_probes/stpeters_cross/stpeters_front.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_front.png"'/>
            <ImageTexture containerField='left' url='"../resources/images/all_probes/stpeters_cross/stpeters_left.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_left.png"'/>
            <ImageTexture containerField='right' url='"../resources/images/all_probes/stpeters_cross/stpeters_right.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_right.png"'/>
            <ImageTexture containerField='top' url='"../resources/images/all_probes/stpeters_cross/stpeters_top.png" "https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_top.png"'/>
          </ComposedCubeMapTexture>
        </Appearance>
        <IndexedFaceSet DEF='Orbit' convex='false'>
          <Coordinate DEF='OrbitCoordinates'/>
        </IndexedFaceSet>
      </Shape>
    </Transform>
    <Script DEF='OrbitScript'>
      <field name='set_fraction' accessType='inputOnly' type='SFFloat'/>
      <field name='coordinates' accessType='inputOutput' type='MFVec3f'/>
      <field name='coordIndexes' accessType='outputOnly' type='MFInt32'/>
<![CDATA[
ecmascript:
"+
"
"+
"var e = 5;
"+
"var f = 5;
"+
"var g = 5;
"+
"var h = 5;
"+
"
"+
"function initialize() {
"+
"     var resolution = 100;
"+
"     updateCoordinates(resolution);
"+
"     var cis = [];
"+
"     for ( i = 0; i < resolution-1; i++) {
"+
"     	for ( j = 0; j < resolution-1; j++) {
"+
"	     cis.push(i*resolution+j);
"+
"	     cis.push(i*resolution+j+1);
"+
"	     cis.push((i+1)*resolution+j+1);
"+
"	     cis.push((i+1)*resolution+j);
"+
"	     cis.push(-1);
"+
"	}
"+
"    }
"+
"    coordIndexes = new MFInt32(cis);
"+
"}
"+
"
"+
"function updateCoordinates(resolution) {
"+
"     var theta = 0.0;
"+
"     var phi = 0.0;
"+
"     var delta = (2 * 3.141592653) / (resolution-1);
"+
"     var crds = [];
"+
"     for ( i = 0; i < resolution; i++) {
"+
"     	for ( j = 0; j < resolution; j++) {
"+
"		var rho = e + f * Math.cos(g * theta) * Math.cos(h * phi);
"+
"		crds.push(new SFVec3f(
"+
"			rho * Math.cos(phi) * Math.cos(theta),
"+
"			rho * Math.cos(phi) * Math.sin(theta),
"+
"			rho * Math.sin(phi)
"+
"		));
"+
"		theta += delta;
"+
"	}
"+
"	phi += delta;
"+
"     }
"+
"     coordinates = new MFVec3f(crds);
"+
"}
"+
"
"+
"function set_fraction(fraction, eventTime) {
"+
"	var choice = Math.floor(Math.random() * 4);
"+
"	switch (choice) {
"+
"	case 0:
"+
"		e += Math.floor(Math.random() * 2) * 2 - 1;
"+
"		break;
"+
"	case 1:
"+
"		f += Math.floor(Math.random() * 2) * 2 - 1;
"+
"		break;
"+
"	case 2:
"+
"		g += Math.floor(Math.random() * 2) * 2 - 1;
"+
"		break;
"+
"	case 3:
"+
"		h += Math.floor(Math.random() * 2) * 2 - 1;
"+
"		break;
"+
"	}
"+
"	if (f < 1) {
"+
"		f = 10;
"+
"	}
"+
"	if (g < 1) {
"+
"		g = 4;
"+
"	}
"+
"	if (h < 1) {
"+
"		h = 4;
"+
"	}
"+
"	var resolution = 100;
"+
"	updateCoordinates(resolution);
"+
"}
]]>
    </Script>
    <TimeSensor DEF='Clock' cycleInterval='16.0' loop='true'/>
    <ROUTE fromField='coordIndexes' fromNode='OrbitScript' toField='set_coordIndex' toNode='Orbit'/>
    <ROUTE fromField='coordinates' fromNode='OrbitScript' toField='set_point' toNode='OrbitCoordinates'/>
    <ROUTE fromField='fraction_changed' fromNode='Clock' toField='set_fraction' toNode='OrbitScript'/>
  </Scene>
</X3D>
