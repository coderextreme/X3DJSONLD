@prefix : <http://www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.ttl#> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <http://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix x3d: <https://www.web3d.org/semantics/ontologies/X3dOntology4.0#> .

:Scene rdf:type owl:NamedIndividual, x3d:Scene .
:ProtoDeclare_2 rdf:type owl:NamedIndividual, x3d:ProtoDeclare ;
  x3d:appinfo "Camera node provides direct control of scene view to enable cinematic camera animation shot by shot and move by move along with still digital-photography settings for offline rendering of camera images." ;
  x3d:name "Camera" .
:ProtoInterface_2_1 rdf:type owl:NamedIndividual, x3d:ProtoInterface .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Text description to be displayed for this Camera" ;
  x3d:name "description" ;
  x3d:type "SFString" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera position in local transformation frame, which is default prior to first CameraShot initialPosition getting activated" ;
  x3d:name "position" ;
  x3d:type "SFVec3f" ;
  x3d:value "0 0 10" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera rotation in local transformation frame, which is default prior to first CameraShot initialPosition getting activated" ;
  x3d:name "orientation" ;
  x3d:type "SFRotation" ;
  x3d:value "0 0 1 0" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "pi/4" ;
  x3d:name "fieldOfView" ;
  x3d:type "SFFloat" ;
  x3d:value "0.7854" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOnly" ;
  x3d:appinfo "input fraction drives interpolators" ;
  x3d:name "set_fraction" ;
  x3d:type "SFFloat" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOnly" ;
  x3d:appinfo "input event binds or unbinds this Camera" ;
  x3d:name "set_bind" ;
  x3d:type "SFBool" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "output event indicates when this Camera is bound" ;
  x3d:name "bindTime" ;
  x3d:type "SFTime" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "output event indicates whether this Camera is bound or unbound" ;
  x3d:name "isBound" ;
  x3d:type "SFBool" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Vector distance to near clipping plane corresponds to NavigationInfo.avatarSize[0]" ;
  x3d:name "nearClipPlane" ;
  x3d:type "SFFloat" ;
  x3d:value "0.25" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Vector distance to far clipping plane corresponds to NavigationInfo.visibilityLimit" ;
  x3d:name "farClipPlane" ;
  x3d:type "SFFloat" ;
  x3d:value "0.0" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Array of CameraShot nodes which in turn contain CameraMovement nodes" ;
  x3d:name "shots" ;
  x3d:type "MFNode" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Whether camera headlight is on or off" ;
  x3d:name "headlight" ;
  x3d:type "SFBool" ;
  x3d:value "true" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera headlight color" ;
  x3d:name "headlightColor" ;
  x3d:type "SFColor" ;
  x3d:value "1 1 1" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera headlight intensity" ;
  x3d:name "headlightIntensity" ;
  x3d:type "SFFloat" ;
  x3d:value "1" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera filter color that modifies virtual lens capture" ;
  x3d:name "filterColor" ;
  x3d:type "SFColor" ;
  x3d:value "1 1 1" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera filter transparency that modifies virtual lens capture" ;
  x3d:name "filterTransparency" ;
  x3d:type "SFFloat" ;
  x3d:value "1" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "upVector changes modify camera orientation (and possibly vice versa)" ;
  x3d:name "upVector" ;
  x3d:type "SFVec3f" ;
  x3d:value "0 1 0" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Focal length divided effective aperture diameter indicating width of focal plane" ;
  x3d:name "fStop" ;
  x3d:type "SFFloat" ;
  x3d:value "5.6" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Distance to focal plane of sharpest focus" ;
  x3d:name "focusDistance" ;
  x3d:type "SFFloat" ;
  x3d:value "10" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Mark start/stop with true/false output respectively useful to trigger external animations" ;
  x3d:name "isActive" ;
  x3d:type "SFBool" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Total duration of contained enabled CameraShot (and thus CameraMovement) move durations" ;
  x3d:name "totalDuration" ;
  x3d:type "SFTime" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "OfflineRender node" ;
  x3d:name "offlineRender" ;
  x3d:type "SFNode" .
:field_2_1_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "enable console output to trace script computations and prototype progress" ;
  x3d:name "traceEnabled" ;
  x3d:type "SFBool" ;
  x3d:value "false" .
:ProtoBody_2_1 rdf:type owl:NamedIndividual, x3d:ProtoBody .
:CameraViewpoint rdf:type owl:NamedIndividual, x3d:Viewpoint .
:CameraViewpoint x3d:hasIS :IS_2_1_2_1 .
:IS_2_1_2_1 rdf:type owl:NamedIndividual, x3d:IS .
:connect_2_1_2_1_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "description" ;
  x3d:protoField "description" .
:connect_2_1_2_1_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "position" ;
  x3d:protoField "position" .
:connect_2_1_2_1_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "orientation" ;
  x3d:protoField "orientation" .
:connect_2_1_2_1_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "fieldOfView" ;
  x3d:protoField "fieldOfView" .
:connect_2_1_2_1_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "set_bind" ;
  x3d:protoField "set_bind" .
:connect_2_1_2_1_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "bindTime" ;
  x3d:protoField "bindTime" .
:connect_2_1_2_1_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "isBound" ;
  x3d:protoField "isBound" .
:CameraNavInfo rdf:type owl:NamedIndividual, x3d:NavigationInfo ;
  x3d:type "EXAMINE FLY ANY" .
:CameraNavInfo x3d:hasIS :IS_2_1_2_2 .
:IS_2_1_2_2 rdf:type owl:NamedIndividual, x3d:IS .
:connect_2_1_2_2_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "set_bind" ;
  x3d:protoField "set_bind" .
:connect_2_1_2_2_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "headlight" ;
  x3d:protoField "headlight" .
:connect_2_1_2_2_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "visibilityLimit" ;
  x3d:protoField "farClipPlane" .
:CameraDirectionalLight rdf:type owl:NamedIndividual, x3d:DirectionalLight ;
  x3d:global "true" .
:CameraDirectionalLight x3d:hasIS :IS_2_1_2_3 .
:IS_2_1_2_3 rdf:type owl:NamedIndividual, x3d:IS .
:connect_2_1_2_3_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "on" ;
  x3d:protoField "headlight" .
:connect_2_1_2_3_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "color" ;
  x3d:protoField "headlightColor" .
:connect_2_1_2_3_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "intensity" ;
  x3d:protoField "headlightIntensity" .
:CameraPositionInterpolator rdf:type owl:NamedIndividual, x3d:PositionInterpolator ;
  x3d:key "0 1" ;
  x3d:keyValue "0 0 0 0 0 0" .
:CameraPositionInterpolator x3d:hasIS :IS_2_1_2_4 .
:IS_2_1_2_4 rdf:type owl:NamedIndividual, x3d:IS .
:connect_2_1_2_4_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "set_fraction" ;
  x3d:protoField "set_fraction" .
:CameraOrientationInterpolator rdf:type owl:NamedIndividual, x3d:OrientationInterpolator ;
  x3d:key "0 1" ;
  x3d:keyValue "0 1 0 0 0 1 0 0" .
:CameraOrientationInterpolator x3d:hasIS :IS_2_1_2_5 .
:IS_2_1_2_5 rdf:type owl:NamedIndividual, x3d:IS .
:connect_2_1_2_5_1 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "set_fraction" ;
  x3d:protoField "set_fraction" .
:ROUTE_2_1_2 rdf:type owl:NamedIndividual, x3d:ROUTE ;
  x3d:fromField "value_changed" ;
  x3d:fromNode "CameraPositionInterpolator" ;
  x3d:toField "position" ;
  x3d:toNode "CameraViewpoint" .
:ROUTE_2_1_2 rdf:type owl:NamedIndividual, x3d:ROUTE ;
  x3d:fromField "value_changed" ;
  x3d:fromNode "CameraOrientationInterpolator" ;
  x3d:toField "orientation" ;
  x3d:toNode "CameraViewpoint" .
:CameraScript rdf:type owl:NamedIndividual, x3d:Script ;
  x3d:directOutput "true" ;
  x3d:mustEvaluate "true" .

          
          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Text description to be displayed for this Camera" ;
  x3d:name "description" ;
  x3d:type "SFString" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera position in local transformation frame" ;
  x3d:name "position" ;
  x3d:type "SFVec3f" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera rotation in local transformation frame" ;
  x3d:name "orientation" ;
  x3d:type "SFRotation" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOnly" ;
  x3d:appinfo "input fraction drives interpolators" ;
  x3d:name "set_fraction" ;
  x3d:type "SFFloat" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOnly" ;
  x3d:appinfo "input event binds or unbinds this Camera" ;
  x3d:name "set_bind" ;
  x3d:type "SFBool" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "pi/4" ;
  x3d:name "fieldOfView" ;
  x3d:type "SFFloat" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Vector distance to near clipping plane" ;
  x3d:name "nearClipPlane" ;
  x3d:type "SFFloat" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Vector distance to far clipping plane" ;
  x3d:name "farClipPlane" ;
  x3d:type "SFFloat" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Array of CameraShot nodes which in turn contain CameraMovement nodes" ;
  x3d:name "shots" ;
  x3d:type "MFNode" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera filter color that modifies virtual lens capture" ;
  x3d:name "filterColor" ;
  x3d:type "SFColor" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Camera filter transparency that modifies virtual lens capture" ;
  x3d:name "filterTransparency" ;
  x3d:type "SFFloat" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "upVector changes modify camera orientation (and possibly vice versa)" ;
  x3d:name "upVector" ;
  x3d:type "SFVec3f" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Focal length divided effective aperture diameter indicating width of focal plane" ;
  x3d:name "fStop" ;
  x3d:type "SFFloat" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Distance to focal plane of sharpest focus" ;
  x3d:name "focusDistance" ;
  x3d:type "SFFloat" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Mark start/stop with true/false output respectively useful to trigger external animations" ;
  x3d:name "isActive" ;
  x3d:type "SFBool" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Total duration of contained enabled CameraShot (and thus CameraMovement) move durations" ;
  x3d:name "totalDuration" ;
  x3d:type "SFTime" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "OfflineRender node" ;
  x3d:name "offlineRender" ;
  x3d:type "SFNode" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "node reference to permit getting setting fields from within Script" ;
  x3d:name "ViewpointNode" ;
  x3d:type "SFNode" .
:CameraViewpoint-USE-1 rdf:type owl:NamedIndividual, x3d:Viewpoint .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "node reference to permit getting setting fields from within Script" ;
  x3d:name "NavInfoNode" ;
  x3d:type "SFNode" .
:CameraNavInfo-USE-1 rdf:type owl:NamedIndividual, x3d:NavigationInfo .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "node reference to permit getting setting fields from within Script" ;
  x3d:name "CameraPI" ;
  x3d:type "SFNode" .
:CameraPositionInterpolator-USE-1 rdf:type owl:NamedIndividual, x3d:PositionInterpolator .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "node reference to permit getting setting fields from within Script" ;
  x3d:name "CameraOI" ;
  x3d:type "SFNode" .
:CameraOrientationInterpolator-USE-1 rdf:type owl:NamedIndividual, x3d:OrientationInterpolator .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "key array for interpolators" ;
  x3d:name "key" ;
  x3d:type "MFFloat" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "keyValue array for PositionInterpolator" ;
  x3d:name "keyValuePosition" ;
  x3d:type "MFVec3f" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "keyValue array for OrientationInterpolator" ;
  x3d:name "keyValueOrientation" ;
  x3d:type "MFRotation" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "whether internal CameraShot and CameraMove nodes are tracking or changed via ROUTE events" ;
  x3d:name "animated" ;
  x3d:type "SFBool" ;
  x3d:value "false" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "perform checkShots() function once immediately after initialization" ;
  x3d:name "initialized" ;
  x3d:type "SFBool" ;
  x3d:value "false" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "how many CameraShot nodes are contained in shots array" ;
  x3d:name "shotCount" ;
  x3d:type "SFInt32" ;
  x3d:value "0" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "how many CameraMove nodes are contained in moves array" ;
  x3d:name "movesCount" ;
  x3d:type "SFInt32" ;
  x3d:value "0" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "how many frames were created in current loop" ;
  x3d:name "frameCount" ;
  x3d:type "SFFloat" ;
  x3d:value "0" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "holding variable" ;
  x3d:name "startTime" ;
  x3d:type "SFTime" ;
  x3d:value "0" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "holding variable" ;
  x3d:name "priorTraceTime" ;
  x3d:type "SFTime" ;
  x3d:value "0" .

          :CameraScript x3d:hasfield :field_2_1_2_8 .
:field_2_1_2_8 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "enable console output to trace script computations and prototype progress" ;
  x3d:name "traceEnabled" ;
  x3d:type "SFBool" .

          :CameraScript x3d:hasIS :IS_2_1_2_8 .
:IS_2_1_2_8 rdf:type owl:NamedIndividual, x3d:IS .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "description" ;
  x3d:protoField "description" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "position" ;
  x3d:protoField "position" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "orientation" ;
  x3d:protoField "orientation" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "set_fraction" ;
  x3d:protoField "set_fraction" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "set_bind" ;
  x3d:protoField "set_bind" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "fieldOfView" ;
  x3d:protoField "fieldOfView" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "nearClipPlane" ;
  x3d:protoField "nearClipPlane" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "farClipPlane" ;
  x3d:protoField "farClipPlane" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "shots" ;
  x3d:protoField "shots" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "filterColor" ;
  x3d:protoField "filterColor" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "filterTransparency" ;
  x3d:protoField "filterTransparency" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "upVector" ;
  x3d:protoField "upVector" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "fStop" ;
  x3d:protoField "fStop" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "focusDistance" ;
  x3d:protoField "focusDistance" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "isActive" ;
  x3d:protoField "isActive" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "totalDuration" ;
  x3d:protoField "totalDuration" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "offlineRender" ;
  x3d:protoField "offlineRender" .
:connect_2_1_2_8_33 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "traceEnabled" ;
  x3d:protoField "traceEnabled" .

          
ecmascript:
function initialize () // CameraScript
{
//  tracePrint ('initialize start...');

    NavInfoNode.avatarSize[0]   = nearClipPlane;

    // remaining setups deferred to invocation of checkShots() method
    // thanks to Yvonne Jung Fraunhofer for diagnosing better approach to function initialization
    alwaysPrint ('initialize complete');
}

function checkShots (eventValue)
{
    tracePrint ('checkShots() method should only occur after initialize() methods in all other Scripts are complete');

    // compute totalDuration by summing durations from contained CameraShot and CameraMovement nodes
    totalDuration= 0;
    shotCount  = shots.length;
    movesCount = 0;
    for (i = 0; i < shotCount; i++) // shots index
    {
       tracePrint ('shots[' + i + '].moves.length=' + shots[i].moves.length);
       movesCount   += shots[i].moves.length;
       totalDuration = totalDuration + shots[i].shotDuration;
       if (shots[i].moves.length == 0)
       {
          alwaysPrint ('warning: CameraShot[' + i + '][' + shots[i].description + '] has no contained CameraMove nodes');
       }
    }
    // size checks before proceeding
    if (shotCount == 0)
    {
       alwaysPrint ('warning: no CameraShot nodes found for the shots, nothing to do!');
       return;
    }
    else if (movesCount == 0)
    {
       alwaysPrint ('warning: no CameraMove nodes found for the shots, nothing to do!');
       return;
    }
    else if (totalDuration == 0)
    {
       alwaysPrint ('warning: totalDuration = 0 seconds, nothing to do!');
       return;
    }
    tracePrint ('number of contained CameraShot nodes=' + shotCount);
    tracePrint ('number of contained CameraMove nodes=' + movesCount);
    tracePrint ('totalDuration=' + totalDuration + ' seconds for all shots and moves');

    // compute interpolators
    var k = 0; // index for latest key, keyValuePosition, keyValueOrientation
    for (i = 0; i < shotCount; i++) // shots index
    {
        if (i==0) // initial entries
        {
           key[0]                   = 0.0; // no previous move
           keyValuePosition[0]      = shots[i].initialPosition;
           keyValueOrientation[0]   = shots[i].initialOrientation;
        }
        else     // new shot repositions, reorients camera as clean break from preceding shot/move
        {
           key[k+1]                 = key[k]; // start from end from previous move
           keyValuePosition[k+1]    = shots[i].initialPosition;
           keyValueOrientation[k+1] = shots[i].initialOrientation;
           k++;
        }
        tracePrint (shots[i].description);
        tracePrint ('shots[i].moves.length=' + shots[i].moves.length);

        for (j = 0; j < shots[i].moves.length; j++) // moves index
        {
            var durationFloat =              shots[i].moves[j].duration;  // implicit type conversion from SFTime
            //  durationFloat = new SFFloat (shots[i].moves[j].duration); // explicit type conversion from SFTime
            //  tracePrint ('durationFloat=' + durationFloat);
            key[k+1]               = key[k] + (durationFloat / totalDuration);
            keyValuePosition[k+1]  = shots[i].moves[j].goalPosition;
            if (!animated)
            {
                 keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;
            }
            else
            {
                // using constructor SFRotation (SFVec3f fromVector, SFVec3f toVector)
                // see X3D ECMAScript binding Table 7.18 — SFRotation instance creation functions

                // test if difference vector is zero, if so maintain previous rotation
                var shotVector = ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize();
                if (shotVector.length() >= 0)
                {
                    // default view direction is along -Z axis
                    shots[i].moves[j].goalOrientation = new SFRotation (new SFVec3f (0, 0, 1), shotVector);
                    keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;
                }
                else // note (k > 0)
                {
                    keyValueOrientation[k+1] = keyValueOrientation[k];  // no change
                }

                tracePrint ('shots[' + i + '].moves[' + j + '].goalAimPoint=' + shots[i].moves[j].goalAimPoint.toString());
                tracePrint ('        ViewpointNode.position=' + ViewpointNode.position.toString());
                tracePrint ('          shotVector     delta=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).toString());
                tracePrint ('          shotVector normalize=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize().toString());
                tracePrint ('               goalOrientation=' + shots[i].moves[j].goalOrientation.toString());
                tracePrint ('      keyValueOrientation[k+1]=' + keyValueOrientation[k+1].toString() + '\n');
            }
            k++; // update index to match latest key, keyValuePosition, keyValueOrientation

            // check animated parameter:  set true if any of moves are tracking moves
            if (!animated)  animated = shots[i].moves[j].tracking; // once true, remains true
         // tracePrint ('shots[' + i + '].moves[' + j + '].tracking=' + shots[i].moves[j].tracking + ', animated=' + animated);

            // intermediate trace
            tracePrint ('                key=' + key);
            tracePrint ('   keyValuePosition=' + keyValuePosition);
            tracePrint ('keyValueOrientation=' + keyValueOrientation);
            tracePrint ('- ' + shots[i].moves[j].description);
        }
    }
    tracePrint ('                key=' + key);
    tracePrint ('   keyValuePosition=' + keyValuePosition);
    tracePrint ('keyValueOrientation=' + keyValueOrientation);
    if (key.length != keyValuePosition.length)
    {
      alwaysPrint ('warning: internal error during array construction, ' +
                  'key.length=' + key.length + ' must equal ' +
                  'keyValuePosition.length=' + keyValuePosition.length);
    }
    if (key.length != keyValueOrientation.length)
    {
      alwaysPrint ('warning: internal error during array construction, ' +
                  'key.length=' + key.length + ' must equal ' +
                  'keyValueOrientation.length=' + keyValueOrientation.length);
    }
    if (key.length != (shotCount + movesCount))
    {
      alwaysPrint ('warning: internal error during array construction, ' +
                  'key.length=' + key.length + ' must equal ' +
                  '(shotCount + movesCount)=' + (shotCount + movesCount));
    }
    tracePrint ('           animated=' + animated);
    // set node values
    CameraPI.key      = key;
    CameraOI.key      = key;
    CameraPI.keyValue = keyValuePosition;
    CameraOI.keyValue = keyValueOrientation;

    if (!animated) // output results
    {
        tracePrint ('<PositionInterpolator    DEF=\'CameraPositionInterpolator\'    key=\'' + stripBrackets(CameraPI.key) + '\' keyValue=\'' + stripBrackets(CameraPI.keyValue) + '\'/>');
        tracePrint ('<OrientationInterpolator DEF=\'CameraOrientationInterpolator\' key=\'' + stripBrackets(CameraOI.key) + '\' keyValue=\'' + stripBrackets(CameraOI.keyValue) + '\'/>');
    }
    tracePrint ('checkShots() complete');
}

function stripBrackets (fieldArray)
{
    // some browsers add brackets to array output strings, this function strips them
    outputString = '';
    for (i = 0; i < fieldArray.length; i++)
    {
       outputString += fieldArray[i].toString();
       if (i < fieldArray.length - 1) outputString += ' ';
    }
    return outputString;
}

function set_fraction (eventValue, timestamp) // input event received for inputOnly field
{
   // traceEnabled = false;  // for testing purposes

   // if Camera is being animated, immediately recompute interpolator settings
   if (animated) checkShots (true);

   // trace progress on console with reduced output frequency
   if (frameCount == 0)
   {
      alwaysPrint ('Animation loop commencing, timestamp=' + timestamp);
      startTime      = timestamp;
      priorTraceTime = timestamp;
      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());

      if (animated) // output results
      {
        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());
        tracePrint ('  <PositionInterpolator    DEF=\'CameraPositionInterpolator\'    key=\'' + stripBrackets(CameraPI.key) + '\' keyValue=\'' + stripBrackets(CameraPI.keyValue) + '\'/>');
        tracePrint ('  <OrientationInterpolator DEF=\'CameraOrientationInterpolator\' key=\'' + stripBrackets(CameraOI.key) + '\' keyValue=\'' + stripBrackets(CameraOI.keyValue) + '\'/>');
      }
   }
   else if ((timestamp - priorTraceTime) >= 1.0) // 1 second trace interval
   {
      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());
      priorTraceTime = timestamp;

      if (animated) // output results
      {
        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());
        tracePrint ('  <PositionInterpolator    DEF=\'CameraPositionInterpolator\'    key=\'' + stripBrackets(CameraPI.key) + '\' keyValue=\'' + stripBrackets(CameraPI.keyValue) + '\'/>');
        alwaysPrint ('  <OrientationInterpolator DEF=\'CameraOrientationInterpolator\' key=\'' + stripBrackets(CameraOI.key) + '\' keyValue=\'' + stripBrackets(CameraOI.keyValue) + '\'/>');
      }
   }
   if (eventValue == 0)
   {
      // note that zero value is not necessarily sent first by TimeSensor, so otherwise ignored
      frameCount++;
   }
   else if (eventValue == 1)
   {
      alwaysPrint ('shotClock=' + (timestamp - startTime) + ', frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());
      if (animated) // output results
      {
        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());
      }
      alwaysPrint ('Animation loop complete.');
      // do not unbind the Viewpoint and NavigationInfo nodes, let that be controlled externally
   }
   else
   {
      frameCount++;
   }
}

function set_bind (eventValue) // input event received for inputOnly field
{
   // need to ensure CameraShot nodes are properly initialized
   if (initialized == false)
   {
      checkShots (true);
      initialized = true;
   }
   if (eventValue)
   {
       tracePrint ('Camera has been bound');
   }
   else
   {
       tracePrint ('Camera has been unbound');
   }
}

function set_description (eventValue) // input event received for inputOutput field
{
    description = eventValue;
}

function set_position (eventValue) // input event received for inputOutput field
{
    position = eventValue;
}

function set_orientation (eventValue) // input event received for inputOutput field
{
    orientation = eventValue;
}

function set_fieldOfView (eventValue) // input event received for inputOutput field
{
    fieldOfView = eventValue;
}

function set_nearClipPlane (eventValue) // input event received for inputOutput field
{
    nearClipPlane = eventValue;
}

function set_farClipPlane (eventValue) // input event received for inputOutput field
{
    farClipPlane = eventValue;
}

function set_shots (eventValue) // input event received for inputOutput field
{
    shots = eventValue;
}

function set_filterColor (eventValue) // input event received for inputOutput field
{
    filterColor = eventValue;
}

function set_filterTransparency (eventValue) // input event received for inputOutput field
{
    filterTransparency = eventValue;
}

function set_upVector (eventValue) // input event received for inputOutput field
{
    upVector = eventValue;
}

function set_fStop (eventValue) // input event received for inputOutput field
{
    fStop = eventValue;
}

function set_focusDistance (eventValue) // input event received for inputOutput field
{
    focusDistance = eventValue;
}

function set_offlineRender (eventValue) // input event received for inputOutput field
{
    offlineRender = eventValue;
}

function set_key (eventValue) // input event received for inputOutput field
{
    key = eventValue;
}

function set_keyValuePosition (eventValue) // input event received for inputOutput field
{
    keyValuePosition = eventValue;
}

function set_keyValueOrientation (eventValue) // input event received for inputOutput field
{
    keyValueOrientation = eventValue;
}

function set_animated (eventValue) // input event received for inputOutput field
{
    animated = eventValue;
}

function tracePrint (outputValue)
{
	if (traceEnabled) alwaysPrint (outputValue);
}
function alwaysPrint (outputValue)
{
    // try to ensure outputValue is converted to string despite Browser.println idiosyncracies
    var outputString = outputValue.toString(); // utility function according to spec
    if (outputString == null) outputString = outputValue; // direct cast

    if  (description.length > 0)
         Browser.print ('[Camera: ' + description + '] ' + outputString + '\n');
    else
         Browser.print ('[Camera] ' + outputString + '\n');
}

        :ROUTE_2_1_2 rdf:type owl:NamedIndividual, x3d:ROUTE ;
  x3d:fromField "position" ;
  x3d:fromNode "CameraScript" ;
  x3d:toField "position" ;
  x3d:toNode "CameraViewpoint" .
:ROUTE_2_1_2 rdf:type owl:NamedIndividual, x3d:ROUTE ;
  x3d:fromField "orientation" ;
  x3d:fromNode "CameraScript" ;
  x3d:toField "orientation" ;
  x3d:toNode "CameraViewpoint" .
:ROUTE_2_1_2 rdf:type owl:NamedIndividual, x3d:ROUTE ;
  x3d:fromField "isActive" ;
  x3d:fromNode "CameraScript" ;
  x3d:toField "set_bind" ;
  x3d:toNode "CameraViewpoint" .
:ROUTE_2_1_2 rdf:type owl:NamedIndividual, x3d:ROUTE ;
  x3d:fromField "isActive" ;
  x3d:fromNode "CameraScript" ;
  x3d:toField "set_bind" ;
  x3d:toNode "CameraNavInfo" .
:ROUTE_2_1_2 rdf:type owl:NamedIndividual, x3d:ROUTE ;
  x3d:fromField "isActive" ;
  x3d:fromNode "CameraScript" ;
  x3d:toField "on" ;
  x3d:toNode "CameraDirectionalLight" .
:ProtoDeclare_2 rdf:type owl:NamedIndividual, x3d:ProtoDeclare ;
  x3d:appinfo "CameraShot collects a specific set of CameraMovement animations that make up an individual shot." ;
  x3d:name "CameraShot" .
:ProtoInterface_2_2 rdf:type owl:NamedIndividual, x3d:ProtoInterface .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Text description to be displayed for this CameraShot" ;
  x3d:name "description" ;
  x3d:type "SFString" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Whether this CameraShot can be activated" ;
  x3d:name "enabled" ;
  x3d:type "SFBool" ;
  x3d:value "true" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Set of CameraMovement nodes" ;
  x3d:name "moves" ;
  x3d:type "MFNode" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Setup to reinitialize camera position for this shot" ;
  x3d:name "initialPosition" ;
  x3d:type "SFVec3f" ;
  x3d:value "0 0 10" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Setup to reinitialize camera rotation for this shot" ;
  x3d:name "initialOrientation" ;
  x3d:type "SFRotation" ;
  x3d:value "0 0 1 0" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Setup to reinitialize aimpoint (relative location for camera direction) for this shot" ;
  x3d:name "initialAimPoint" ;
  x3d:type "SFVec3f" ;
  x3d:value "0 0 0" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "pi/4" ;
  x3d:name "initialFieldOfView" ;
  x3d:type "SFFloat" ;
  x3d:value "0.7854" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Focal length divided effective aperture diameter indicating width of focal plane" ;
  x3d:name "initialFStop" ;
  x3d:type "SFFloat" ;
  x3d:value "5.6" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Distance to focal plane of sharpest focus" ;
  x3d:name "initialFocusDistance" ;
  x3d:type "SFFloat" ;
  x3d:value "10" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Subtotal duration of contained CameraMovement move durations" ;
  x3d:name "shotDuration" ;
  x3d:type "SFTime" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Mark start/stop with true/false output respectively useful to trigger external animations" ;
  x3d:name "isActive" ;
  x3d:type "SFBool" .
:field_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "enable console output to trace script computations and prototype progress" ;
  x3d:name "traceEnabled" ;
  x3d:type "SFBool" ;
  x3d:value "false" .
:ProtoBody_2_2 rdf:type owl:NamedIndividual, x3d:ProtoBody .
:CameraShotScript rdf:type owl:NamedIndividual, x3d:Script ;
  x3d:directOutput "true" ;
  x3d:mustEvaluate "true" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Text description to be displayed for this CameraShot" ;
  x3d:name "description" ;
  x3d:type "SFString" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Whether this CameraShot can be activated" ;
  x3d:name "enabled" ;
  x3d:type "SFBool" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Set of CameraMovement nodes" ;
  x3d:name "moves" ;
  x3d:type "MFNode" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Setup to reinitialize camera position for this shot" ;
  x3d:name "initialPosition" ;
  x3d:type "SFVec3f" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Setup to reinitialize camera rotation for this shot" ;
  x3d:name "initialOrientation" ;
  x3d:type "SFRotation" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Setup to reinitialize aimpoint (relative location for camera direction) for this shot" ;
  x3d:name "initialAimPoint" ;
  x3d:type "SFVec3f" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "pi/4" ;
  x3d:name "initialFieldOfView" ;
  x3d:type "SFFloat" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Focal length divided effective aperture diameter indicating width of focal plane" ;
  x3d:name "initialFStop" ;
  x3d:type "SFFloat" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Distance to focal plane of sharpest focus" ;
  x3d:name "initialFocusDistance" ;
  x3d:type "SFFloat" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Subtotal duration of contained CameraMovement move durations" ;
  x3d:name "shotDuration" ;
  x3d:type "SFTime" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Mark start/stop with true/false output respectively useful to trigger external animations" ;
  x3d:name "isActive" ;
  x3d:type "SFBool" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "enable console output to trace script computations and prototype progress" ;
  x3d:name "traceEnabled" ;
  x3d:type "SFBool" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "key array for interpolators" ;
  x3d:name "key" ;
  x3d:type "MFFloat" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "keyValue array for PositionInterpolator" ;
  x3d:name "keyValuePosition" ;
  x3d:type "MFVec3f" .

          :CameraShotScript x3d:hasfield :field_2_2_2_1 .
:field_2_2_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "keyValue array for OrientationInterpolator" ;
  x3d:name "keyValueOrientation" ;
  x3d:type "MFRotation" .

          :CameraShotScript x3d:hasIS :IS_2_2_2_1 .
:IS_2_2_2_1 rdf:type owl:NamedIndividual, x3d:IS .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "description" ;
  x3d:protoField "description" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "enabled" ;
  x3d:protoField "enabled" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "moves" ;
  x3d:protoField "moves" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "initialPosition" ;
  x3d:protoField "initialPosition" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "initialOrientation" ;
  x3d:protoField "initialOrientation" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "initialAimPoint" ;
  x3d:protoField "initialAimPoint" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "initialFieldOfView" ;
  x3d:protoField "initialFieldOfView" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "initialFStop" ;
  x3d:protoField "initialFStop" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "initialFocusDistance" ;
  x3d:protoField "initialFocusDistance" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "shotDuration" ;
  x3d:protoField "shotDuration" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "isActive" ;
  x3d:protoField "isActive" .
:connect_2_2_2_1_16 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "traceEnabled" ;
  x3d:protoField "traceEnabled" .

          
ecmascript:
function initialize () // CameraShotScript
{
//  tracePrint ('initialize start...');

    // compute shotDuration by summing durations from contained CameraMovement nodes
    shotDuration = 0;
    for (i = 0; i < moves.length; i++)
    {
        shotDuration = shotDuration + moves[i].duration;
    }
    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');

//  tracePrint ('... initialize() complete');
}

function set_description (eventValue) // input event received for inputOutput field
{
    description = eventValue;
}

function set_enabled (eventValue) // input event received for inputOutput field
{
    enabled = eventValue;
}

function set_moves (eventValue) // input event received for inputOutput field
{
    moves = eventValue;
}

function set_initialPosition (eventValue) // input event received for inputOutput field
{
    initialPosition = eventValue;
}

function set_initialOrientation (eventValue) // input event received for inputOutput field
{
    initialOrientation = eventValue;
}

function set_initialAimPoint (eventValue) // input event received for inputOutput field
{
    initialAimPoint = eventValue;
}

function set_initialFieldOfView (eventValue) // input event received for inputOutput field
{
    initialFieldOfView = eventValue;
}

function set_initialFStop (eventValue) // input event received for inputOutput field
{
    initialFStop = eventValue;
}

function set_initialFocusDistance (eventValue) // input event received for inputOutput field
{
    initialFocusDistance = eventValue;
}

function set_key (eventValue) // input event received for inputOutput field
{
    key = eventValue;
}

function set_keyValuePosition (eventValue) // input event received for inputOutput field
{
    keyValuePosition = eventValue;
}

function set_keyValueOrientation (eventValue) // input event received for inputOutput field
{
    keyValueOrientation = eventValue;
}

// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive

function tracePrint (outputValue)
{
	if (traceEnabled) alwaysPrint (outputValue);
}
function alwaysPrint (outputValue)
{
	// try to ensure outputValue is converted to string despite browser idiosyncracies
    var outputString = outputValue.toString(); // utility function according to spec
    if (outputString == null) outputString = outputValue; // direct cast

    if  (description.length > 0)
         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\n');
    else
         Browser.print ('[CameraShot] ' + outputString + '\n');
}

        :ProtoDeclare_2 rdf:type owl:NamedIndividual, x3d:ProtoDeclare ;
  x3d:appinfo "CameraMovement node defines a single camera movement animation including goalPosition, goalOrientation, goalAimPoint and goalFieldOfView." ;
  x3d:name "CameraMovement" .
:ProtoInterface_2_3 rdf:type owl:NamedIndividual, x3d:ProtoInterface .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Text description to be displayed for this CameraMovement" ;
  x3d:name "description" ;
  x3d:type "SFString" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Whether this CameraMovement can be activated" ;
  x3d:name "enabled" ;
  x3d:type "SFBool" ;
  x3d:value "true" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Duration in seconds for this move" ;
  x3d:name "duration" ;
  x3d:type "SFFloat" ;
  x3d:value "0" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Goal camera position for this move" ;
  x3d:name "goalPosition" ;
  x3d:type "SFVec3f" ;
  x3d:value "0 0 10" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Goal camera rotation for this move" ;
  x3d:name "goalOrientation" ;
  x3d:type "SFRotation" ;
  x3d:value "0 0 1 0" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Whether or not camera direction is tracking towards the aimPoint" ;
  x3d:name "tracking" ;
  x3d:type "SFBool" ;
  x3d:value "false" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Goal aimPoint for this move, ignored if tracking=false" ;
  x3d:name "goalAimPoint" ;
  x3d:type "SFVec3f" ;
  x3d:value "0 0 0" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Goal fieldOfView for this move" ;
  x3d:name "goalFieldOfView" ;
  x3d:type "SFFloat" ;
  x3d:value "0.7854" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Focal length divided effective aperture diameter indicating width of focal plane" ;
  x3d:name "goalFStop" ;
  x3d:type "SFFloat" ;
  x3d:value "5.6" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Distance to focal plane of sharpest focus" ;
  x3d:name "goalFocusDistance" ;
  x3d:type "SFFloat" ;
  x3d:value "10" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Mark start/stop with true/false output respectively useful to trigger external animations" ;
  x3d:name "isActive" ;
  x3d:type "SFBool" .
:field_2_3_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "enable console output to trace script computations and prototype progress" ;
  x3d:name "traceEnabled" ;
  x3d:type "SFBool" ;
  x3d:value "false" .
:ProtoBody_2_3 rdf:type owl:NamedIndividual, x3d:ProtoBody .
:CameraMovementScript rdf:type owl:NamedIndividual, x3d:Script ;
  x3d:directOutput "true" ;
  x3d:mustEvaluate "true" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Text description to be displayed for this CameraMovement" ;
  x3d:name "description" ;
  x3d:type "SFString" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Whether this CameraMovement can be activated" ;
  x3d:name "enabled" ;
  x3d:type "SFBool" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Duration in seconds for this move" ;
  x3d:name "duration" ;
  x3d:type "SFFloat" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Goal camera position for this move" ;
  x3d:name "goalPosition" ;
  x3d:type "SFVec3f" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Goal camera rotation for this move" ;
  x3d:name "goalOrientation" ;
  x3d:type "SFRotation" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Whether or not camera direction is tracking towards the aimPoint" ;
  x3d:name "tracking" ;
  x3d:type "SFBool" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Goal aimPoint for this move, ignored if tracking=false" ;
  x3d:name "goalAimPoint" ;
  x3d:type "SFVec3f" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Goal fieldOfView for this move" ;
  x3d:name "goalFieldOfView" ;
  x3d:type "SFFloat" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Focal length divided effective aperture diameter indicating width of focal plane" ;
  x3d:name "goalFStop" ;
  x3d:type "SFFloat" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Distance to focal plane of sharpest focus" ;
  x3d:name "goalFocusDistance" ;
  x3d:type "SFFloat" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Mark start/stop with true/false output respectively useful to trigger external animations" ;
  x3d:name "isActive" ;
  x3d:type "SFBool" .

          :CameraMovementScript x3d:hasfield :field_2_3_2_1 .
:field_2_3_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "enable console output to trace script computations and prototype progress" ;
  x3d:name "traceEnabled" ;
  x3d:type "SFBool" .

          :CameraMovementScript x3d:hasIS :IS_2_3_2_1 .
:IS_2_3_2_1 rdf:type owl:NamedIndividual, x3d:IS .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "description" ;
  x3d:protoField "description" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "enabled" ;
  x3d:protoField "enabled" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "duration" ;
  x3d:protoField "duration" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "goalPosition" ;
  x3d:protoField "goalPosition" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "goalOrientation" ;
  x3d:protoField "goalOrientation" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "tracking" ;
  x3d:protoField "tracking" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "goalAimPoint" ;
  x3d:protoField "goalAimPoint" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "goalFieldOfView" ;
  x3d:protoField "goalFieldOfView" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "goalFStop" ;
  x3d:protoField "goalFStop" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "goalFocusDistance" ;
  x3d:protoField "goalFocusDistance" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "isActive" ;
  x3d:protoField "isActive" .
:connect_2_3_2_1_13 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "traceEnabled" ;
  x3d:protoField "traceEnabled" .

          
ecmascript:
function initialize () // CameraMovementScript
{
//  tracePrint ('initialize start...');
    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +
                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()
                           );
    if (duration < 0)
    {
       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');
       duration = 0;
    }
    else if (duration == 0)
    {
       alwaysPrint ('warning: duration=0, nothing to do!');
    }
    tracePrint ('... initialize complete');
}

function set_goalAimPoint (eventValue) // input event received for inputOutput field
{
    goalAimPoint_changed = eventValue;
    tracePrint ('goalAimPoint=' + goalAimPoint.toString());

    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator
}

function set_description (eventValue) // input event received for inputOutput field
{
    description = eventValue;
}

function set_enabled (eventValue) // input event received for inputOutput field
{
    enabled = eventValue;
}

function set_duration (eventValue) // input event received for inputOutput field
{
    duration = eventValue;
}

function set_goalPosition (eventValue) // input event received for inputOutput field
{
    goalPosition = eventValue;
}

function set_goalOrientation (eventValue) // input event received for inputOutput field
{
    goalOrientation = eventValue;
}

function set_tracking (eventValue) // input event received for inputOutput field
{
    tracking = eventValue;
}

function set_goalFieldOfView (eventValue) // input event received for inputOutput field
{
    goalFieldOfView = eventValue;
}

function set_goalFStop (eventValue) // input event received for inputOutput field
{
    goalFStop = eventValue;
}

function set_goalFocusDistance (eventValue) // input event received for inputOutput field
{
    goalFocusDistance = eventValue;
}

// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive

function tracePrint (outputValue)
{
	if (traceEnabled) alwaysPrint (outputValue);
}

function alwaysPrint (outputValue)
{
	// try to ensure outputValue is converted to string despite browser idiosyncracies
    var outputString = outputValue.toString(); // utility function according to spec
    if (outputString == null) outputString = outputValue; // direct cast

    if  (description.length > 0)
         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');
    else
         Browser.print ('[CameraMovement] ' + outputString + '\n');
}

        :ProtoDeclare_2 rdf:type owl:NamedIndividual, x3d:ProtoDeclare ;
  x3d:appinfo "OfflineRender defines a parameters for offline rendering of Camera animation output to a movie file (or possibly a still shot)." ;
  x3d:name "OfflineRender" .
:ProtoInterface_2_4 rdf:type owl:NamedIndividual, x3d:ProtoInterface .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Text description to be displayed for this OfflineRender" ;
  x3d:name "description" ;
  x3d:type "SFString" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Whether this OfflineRender can be activated" ;
  x3d:name "enabled" ;
  x3d:type "SFBool" ;
  x3d:value "true" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Frames per second recorded for this rendering" ;
  x3d:name "frameRate" ;
  x3d:type "SFFloat" ;
  x3d:value "30" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Size of frame in number of pixels width and height" ;
  x3d:name "frameSize" ;
  x3d:type "SFVec2f" ;
  x3d:value "640 480" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Relative dimensions of pixel height/width typically 1.33 or 1" ;
  x3d:name "pixelAspectRatio" ;
  x3d:type "SFFloat" ;
  x3d:value "1.33" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOnly" ;
  x3d:appinfo "Begin render operation" ;
  x3d:name "set_startTime" ;
  x3d:type "SFTime" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Progress performing render operation (0..1)" ;
  x3d:name "progress" ;
  x3d:type "SFFloat" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Render operation complete" ;
  x3d:name "renderCompleteTime" ;
  x3d:type "SFTime" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "Format of rendered output movie (mpeg mp4 etc.), use first supported format" ;
  x3d:name "movieFormat" ;
  x3d:type "MFString" ;
  x3d:value "mpeg" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "Format of rendered output images (png jpeg gif tiff etc.) use first supported format" ;
  x3d:name "imageFormat" ;
  x3d:type "MFString" ;
  x3d:value "png" .
:field_2_4_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "enable console output to trace script computations and prototype progress" ;
  x3d:name "traceEnabled" ;
  x3d:type "SFBool" ;
  x3d:value "false" .
:ProtoBody_2_4 rdf:type owl:NamedIndividual, x3d:ProtoBody .
:OfflineRenderScript rdf:type owl:NamedIndividual, x3d:Script ;
  x3d:mustEvaluate "true" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Text description to be displayed for this OfflineRender" ;
  x3d:name "description" ;
  x3d:type "SFString" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Whether this OfflineRender can be activated" ;
  x3d:name "enabled" ;
  x3d:type "SFBool" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Frames per second recorded for this rendering" ;
  x3d:name "frameRate" ;
  x3d:type "SFFloat" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Size of frame in number of pixels width and height" ;
  x3d:name "frameSize" ;
  x3d:type "SFVec2f" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOutput" ;
  x3d:appinfo "Relative dimensions of pixel height/width typically 1.33 or 1" ;
  x3d:name "pixelAspectRatio" ;
  x3d:type "SFFloat" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "inputOnly" ;
  x3d:appinfo "Begin render operation" ;
  x3d:name "set_startTime" ;
  x3d:type "SFTime" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Progress performing render operation (0..1)" ;
  x3d:name "progress" ;
  x3d:type "SFFloat" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "outputOnly" ;
  x3d:appinfo "Render operation complete" ;
  x3d:name "renderCompleteTime" ;
  x3d:type "SFTime" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "Format of rendered output movie (mpeg mp4 etc.)" ;
  x3d:name "movieFormat" ;
  x3d:type "MFString" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "Format of rendered output images (png jpeg gif tiff etc.)" ;
  x3d:name "imageFormat" ;
  x3d:type "MFString" .

          :OfflineRenderScript x3d:hasfield :field_2_4_2_1 .
:field_2_4_2_1 rdf:type owl:NamedIndividual, x3d:field ;
  x3d:accessType "initializeOnly" ;
  x3d:appinfo "enable console output to trace script computations and prototype progress" ;
  x3d:name "traceEnabled" ;
  x3d:type "SFBool" .

          :OfflineRenderScript x3d:hasIS :IS_2_4_2_1 .
:IS_2_4_2_1 rdf:type owl:NamedIndividual, x3d:IS .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "description" ;
  x3d:protoField "description" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "enabled" ;
  x3d:protoField "enabled" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "frameRate" ;
  x3d:protoField "frameRate" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "frameSize" ;
  x3d:protoField "frameSize" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "pixelAspectRatio" ;
  x3d:protoField "pixelAspectRatio" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "set_startTime" ;
  x3d:protoField "set_startTime" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "progress" ;
  x3d:protoField "progress" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "renderCompleteTime" ;
  x3d:protoField "renderCompleteTime" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "movieFormat" ;
  x3d:protoField "movieFormat" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "imageFormat" ;
  x3d:protoField "imageFormat" .
:connect_2_4_2_1_12 rdf:type owl:NamedIndividual, x3d:connect ;
  x3d:nodeField "traceEnabled" ;
  x3d:protoField "traceEnabled" .

          
ecmascript:
function initialize () // OfflineRenderScript
{
//  tracePrint ('initialize start...');

    tracePrint ('... initialize complete');
}

function set_description (eventValue) // input event received for inputOutput field
{
    description = eventValue;
}

function set_enabled (eventValue) // input event received for inputOutput field
{
    enabled = eventValue;
}

function set_frameRate (eventValue) // input event received for inputOutput field
{
    frameRate = eventValue;
}

function set_frameSize (eventValue) // input event received for inputOutput field
{
    frameSize = eventValue;
}

function set_pixelAspectRatio (eventValue) // input event received for inputOutput field
{
    pixelAspectRatio = eventValue;
}

function set_startTime (eventValue) // input event received for inputOnly field
{
   // do something with input eventValue;
}

function tracePrint (outputValue)
{
	if (traceEnabled) alwaysPrint (outputValue);
}

function alwaysPrint (outputValue)
{
	// try to ensure outputValue is converted to string despite browser idiosyncracies
    var outputString = outputValue.toString(); // utility function according to spec
    if (outputString == null) outputString = outputValue; // direct cast

    if  (description.length > 0)
         Browser.print ('[OfflineRender: ' + description + '] ' + outputString + '\n');
    else
         Browser.print ('[OfflineRender] ' + outputString + '\n');
}

        :Background_2 rdf:type owl:NamedIndividual, x3d:Background ;
  x3d:skyColor "0.282353 0.380392 0.470588" .
:Anchor_2 rdf:type owl:NamedIndividual, x3d:Anchor ;
  x3d:description "launch CameraExample scene" ;
  x3d:url "CameraExamples.x3d http://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.x3d CameraExamples.wrl http://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.wrl" .
:Transform_2_6 rdf:type owl:NamedIndividual, x3d:Transform .
:Shape_2_6_1 rdf:type owl:NamedIndividual, x3d:Shape .
:Text_2_6_1_1 rdf:type owl:NamedIndividual, x3d:Text ;
  x3d:string "CameraPrototypes.x3d defines multiple prototype nodes  Click on this text to see CameraExamples.x3d scene" .
:FontStyle_2_6_1_1_1 rdf:type owl:NamedIndividual, x3d:FontStyle ;
  x3d:justify "MIDDLE MIDDLE" .
:Appearance_2_6_1_1 rdf:type owl:NamedIndividual, x3d:Appearance .
:Material_2_6_1_1_2 rdf:type owl:NamedIndividual, x3d:Material ;
  x3d:diffuseColor "1 1 0.2" .
