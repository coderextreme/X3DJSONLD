<svrl:schematron-output xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" title="X3D Graphics Validity Checks using Schematron" schemaVersion=""><!--   
		   
		   
		 -->
   <svrl:active-pattern document="file:/C:/Users/jcarl/X3DJSONLD/src/main/data/particleballs.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 was approved by Web3D Consortium and ISO in 2023.</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 offers many new features including interoperability with HTML5, glTF
         2.0 Physically Based Rendering (PBR), and Web Audio API.</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:failed-assert test="(meta/@name='generator')" role="info" location="/X3D/head">
      <svrl:text>It is good practice to identify editor(s) used, for example &lt;meta name='generator'
         content='X3D-Edit, https://savage.nps.edu/X3D-Edit'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="NavigationInfo"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="Background"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="ParticleSystem"/>
   <svrl:fired-rule context="BoundedPhysicsModel | ConeEmitter | ExplosionEmitter | ForcePhysicsModel"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:failed-assert test="parent::Collision or parent::Shape or parent::ProtoBody or parent::field or parent::fieldValue" role="error" location="/X3D/Scene/Transform/ParticleSystem/BoundedPhysicsModel/Sphere">
      <svrl:text>&lt;Sphere DEF=''/&gt; geometry node must have Shape node as parent </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="BoundedPhysicsModel | ConeEmitter | ExplosionEmitter | ForcePhysicsModel"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:failed-assert test="parent::Collision or parent::Shape or parent::ProtoBody or parent::field or parent::fieldValue" role="error" location="/X3D/Scene/Transform/ParticleSystem/Sphere">
      <svrl:text>&lt;Sphere DEF=''/&gt; geometry node must have Shape node as parent </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Appearance"/>
   <svrl:failed-assert test="parent::Shape | parent::ProtoBody | parent::field | parent::fieldValue" role="error" location="/X3D/Scene/Transform/ParticleSystem/Appearance">
      <svrl:text>&lt;Appearance DEF=''/&gt; found outside of a parent Shape, ProtoBody, field or fieldValue element </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ComposedCubeMapTexture"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="ComposedShader | ProgramShader"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="ComposedCubeMapTexture"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="ShaderPart | ShaderProgram"/>
   <svrl:successful-report test="(local-name(.)='ShaderPart') and not(local-name(..)!='ComposedShader')" role="error" location="/X3D/Scene/Transform/ParticleSystem/Appearance/ComposedShader/ShaderPart[1]">
      <svrl:text>&lt;ShaderPart DEF='' value=''/&gt; needs to be contained by a &lt;ComposedShader&gt; node rather than a &lt;ComposedShader&gt; node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ShaderPart | ShaderProgram"/>
   <svrl:successful-report test="(local-name(.)='ShaderPart') and not(local-name(..)!='ComposedShader')" role="error" location="/X3D/Scene/Transform/ParticleSystem/Appearance/ComposedShader/ShaderPart[2]">
      <svrl:text>&lt;ShaderPart DEF='commonfs' value=''/&gt; needs to be contained by a &lt;ComposedShader&gt; node rather than a &lt;ComposedShader&gt; node </svrl:text>
   </svrl:successful-report>
</svrl:schematron-output>