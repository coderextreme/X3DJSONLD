<svrl:schematron-output xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" title="X3D Graphics Validity Checks using Schematron" schemaVersion=""><!--   
		   
		   
		 -->
   <svrl:active-pattern document="file:/C:/Users/jcarl/X3DJSONLD/src/main/data/CaliforniaCampuses.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:successful-report test="$profileLegal and (//Inline[not(MetadataString)][not(@USE)]) and not($fullProfile)" role="info" location="/X3D">
      <svrl:text>&lt;X3D profile='Immersive'&gt; is satisfactory for this model - also ensure that child Inline models do not exceed
         this profile/component combination, since this parent scene must have an equal or
         higher combination </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 was approved by Web3D Consortium and ISO in 2023.</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 offers many new features including interoperability with HTML5, glTF
         2.0 Physically Based Rendering (PBR), and Web Audio API.</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]"/>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/head/meta[13]">
      <svrl:text>&lt;meta name='warning' content='under development'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]"/>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/head/meta[14]">
      <svrl:text>&lt;meta name='warning' content='mmog.ern.nps.edu restricted to internal access within NPS firewall only'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="Switch"/>
   <svrl:fired-rule context="Inline"/>
   <svrl:fired-rule context="NavigationInfo"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:failed-assert test="//ProtoInstance[@name=$name]" role="warning" location="/X3D/Scene/ExternProtoDeclare[2]">
      <svrl:text>&lt;ExternProtoDeclare name="HeadsUpDisplay"/&gt; has no corresponding ProtoInstance </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="GeoLocation"/>
   <svrl:fired-rule context="Billboard"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:successful-report test="../Billboard" role="warning" location="/X3D/Scene/GeoLocation/TouchSensor">
      <svrl:text>&lt;TouchSensor DEF='TourTouch'/&gt; has peer Billboard node which may make user selection of geometry difficult, consider
         superimposing additional transparent Shape geometry to assist selection </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="BooleanToggle"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
</svrl:schematron-output>