<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Immersive" version="3.3" xsd:noNamespaceSchemaLocation="https://www.web3d.org/specifications/x3d-3.3.xsd">
<head>        
        <meta name='title' content='x3dconnector.x3d'/>
        <meta name='creator' content='Lost, Doug Sanden I think'/>
        <meta name='generator' content='manual'/>
	<meta name='identifier' content='https://coderextreme.net/X3DJSONLD/src/main/data/x3dconnectorProto.x3d'/>
        <meta name='description' content='a generic proto to connect two objects'/>
</head>
<Scene>
	<Viewpoint position='0 0 5' description="Only Viewpoint" />
	<Background skyColor='0.4 0.4 0.4'/>
	<Transform DEF='G1'>
		<Shape>
			<Appearance><Material diffuseColor='0.7 0.2 0.2'></Material></Appearance>
			<Sphere radius='.1'/>
		</Shape>
		<PlaneSensor description="Grab to move" DEF='PS1'/>
		<ROUTE fromNode='PS1' fromField='translation_changed' toNode='G1' toField='set_translation' />
	</Transform>              
        
	<Transform DEF='G2' translation='1 -1 .01'>
		<Shape>
			<Appearance><Material diffuseColor='0.2 0.7 0.2'></Material></Appearance>
			<Sphere radius='.1'/>
		</Shape>
		<PlaneSensor description="Grab to move"  offset='1 -1 .01' DEF='PS2'/>
		<ROUTE fromNode='PS2' fromField='translation_changed' toNode='G2' toField='set_translation' />
	</Transform>
	<Transform DEF='transC1' >
	<Transform DEF='rotscaleC1' >
		<Shape>
			<Appearance><Material diffuseColor='0.2 0.7 0.7' transparency='.5'/></Appearance>
			<Cylinder radius='.05'/>
		</Shape>
        </Transform>
        </Transform>
    
    <ProtoDeclare name='x3dconnector'>
    <ProtoInterface>
        <field accessType='initializeOnly' name='startnode' type='SFNode'/>
        <field accessType='initializeOnly' name='endnode' type='SFNode'/>
        <field accessType='initializeOnly' name='transnode' type='SFNode'/>
        <field accessType='initializeOnly' name='rotscalenode' type='SFNode'/>
        <field accessType='inputOnly' name='set_startpoint' type='SFVec3f'/>
        <field accessType='inputOnly' name='set_endpoint' type='SFVec3f'/>
    </ProtoInterface>
    <ProtoBody>
        <Script DEF='S1'>
            <field accessType='initializeOnly' name='startnode' type='SFNode'/>
            <field accessType='initializeOnly' name='endnode' type='SFNode'/>
            <field accessType='initializeOnly' name='transnode' type='SFNode'/>
            <field accessType='initializeOnly' name='rotscalenode' type='SFNode'/>
            <field accessType='inputOnly' name='set_startpoint' type='SFVec3f'/>
            <field accessType='inputOnly' name='set_endpoint' type='SFVec3f'/>
            <IS>
                <connect nodeField='startnode' protoField='startnode'/>
                <connect nodeField='endnode' protoField='endnode'/>
                <connect nodeField='transnode' protoField='transnode'/>
                <connect nodeField='rotscalenode' protoField='rotscalenode'/>
                <connect nodeField='set_startpoint' protoField='set_startpoint'/>
                <connect nodeField='set_endpoint' protoField='set_endpoint'/>
            </IS>
            <![CDATA[ecmascript:
        function recompute(startpoint,endpoint){
	    if (typeof endpoint === 'undefined') {
		return;
	    }
            var dif = endpoint.subtract(startpoint);
            var dist = dif.length()*0.5;
            var dif2 = dif.multiply(0.5);
            var norm = dif.normalize();
            var transl = startpoint.add(dif2);
	    if (typeof Quaternion !== 'undefined') {
		    return {
			    scale : new SFVec3f(1.0,dist,1.0),
			    translation : transl,
			    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)
		    };
	    } else {
		    return {
			    scale : new SFVec3f(1.0,dist,1.0),
			    translation : transl,
			    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)
		    };
	    }
	}
	function recompute_and_route(startpoint, endpoint) {
	      var trafo = recompute(startpoint, endpoint);
	      if (trafo) {
		      transnode.translation = trafo.translation;
		      rotscalenode.rotation = trafo.rotation;
		      rotscalenode.scale = trafo.scale;
	      }
	}
        function initialize(){
            recompute_and_route(startnode.translation,endnode.translation);
        }
        function set_startpoint(val,t){
            recompute_and_route(val,endnode.translation);
        }
        function set_endpoint(val,t){
            recompute_and_route(startnode.translation,val);
        }
            ]]>
        </Script>
    </ProtoBody>
    </ProtoDeclare>
    <ProtoInstance name='x3dconnector' DEF='connector1'>
        <fieldValue name='startnode'>
            <Transform USE='G1'/>
        </fieldValue>
        <fieldValue name='endnode'>
            <Transform USE='G2'/>
        </fieldValue>
        <fieldValue name='transnode'>
            <Transform USE='transC1'/>
        </fieldValue>
        <fieldValue name='rotscalenode'>
            <Transform USE='rotscaleC1'/>
        </fieldValue>
        <fieldValue name='set_startpoint'>
        </fieldValue>
        <fieldValue name='set_endpoint'>
        </fieldValue>
    </ProtoInstance>
    <ROUTE fromNode='G1' fromField='translation_changed' toNode='connector1' toField='set_startpoint'/>
    <ROUTE fromNode='G2' fromField='translation_changed' toNode='connector1' toField='set_endpoint'/>
</Scene>
</X3D>
