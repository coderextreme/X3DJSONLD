<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.2//EN" "http://www.web3d.org/specifications/x3d-3.2.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Immersive" version="3.2" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.2.xsd"><head><meta content="CloudsProcedural4.x3d" name="title"></meta>
<meta content="X3D utilizing ecmascript to develop quasi volumetric 3D clouds from png image textured billboard nodes." name="description"></meta>
<meta content="Capt Darren W. Murphy" name="creator"></meta>
<meta content="1 November 2007" name="created"></meta>
<meta content="14 January 2014" name="modified"></meta>
<meta content="https://savage.nps.edu/Savage/Environment/Atmosphere/CloudsProcedural4.x3d" name="identifier"></meta>
<meta content="X3D-Edit, http://www.web3d.org/x3d/content/README.X3D-Edit.html" name="generator"></meta>
<meta content="../../license.html" name="license"></meta>
<meta content="fix links" name="TODO"></meta>
</head>
<Scene><!-- A png image file for the cloud texture must be designated in the ecmascript node. --><Viewpoint description="Main" jump="false" orientation="0 1 0 1.57" position="50000 1000 42000"></Viewpoint>
<Viewpoint description="Light House Tower" jump="false" orientation="0 1 0 1.3" position="45000 1290 44000"></Viewpoint>
<Viewpoint description="centerWest" jump="false" orientation="0 1 0 2.5" position="48000 1000 20000"></Viewpoint>
<Background groundColor="0 0 1" skyColor="0 0 1"></Background>
<DirectionalLight ambientIntensity="1" direction="-1 0 0" global="true"></DirectionalLight>
<Group DEF="Terrain"><Transform scale="50 50 50" translation="25000 0 25000"><Inline url="&quot;MontereyBayLargeMesh.x3d&quot; &quot;https://savage.nps.edu/Savage/Environment/Atmosphere/MontereyBayLargeMesh.x3d&quot; &quot;MontereyBayLargeMesh.wrl&quot; &quot;https://savage.nps.edu/Savage/Environment/Atmosphere/MontereyBayLargeMesh.wrl&quot;"></Inline>
</Transform>
<Transform rotation="1 0 0 1.57" translation="25000 0 25000"><Shape><Rectangle2D containerField="geometry" size="77000 55000"></Rectangle2D>
<Appearance containerField="appearance"><ImageTexture containerField="texture" url="&quot;ocean.png&quot; &quot;https://savage.nps.edu/Savage/Environment/Atmosphere/ocean.png&quot;"></ImageTexture>
</Appearance>
</Shape>
</Transform>
</Group>
<Group DEF="Placemarks"><Transform scale="50 50 50" translation="45000 30 44000"><Inline url="&quot;Lighthouse.x3d&quot; &quot;https://savage.nps.edu/Savage/Environment/Atmosphere/Lighthouse.x3d&quot; &quot;Lighthouse.wrl&quot; &quot;https://savage.nps.edu/Savage/Environment/Atmosphere/Lighthouse.wrl&quot;"></Inline>
</Transform>
</Group>
<Group DEF="Clouds"><Transform DEF="Cumulus"></Transform>
<Transform DEF="Cirrus"></Transform>
<Transform DEF="Fog"></Transform>
<Script DEF="PixelScript" directOutput="true"><field accessType="initializeOnly" name="Cumulus" type="SFNode"><Transform USE="Cumulus"></Transform>
</field>
<field accessType="initializeOnly" name="Cirrus" type="SFNode"><Transform USE="Cirrus"></Transform>
</field>
<field accessType="initializeOnly" name="Fog" type="SFNode"></field>
<![CDATA[
ecmascript:


function cumulustranslation() // These values designate the boundary location of the cloud
{
	X = 50000*Math.random();          //  X horizontal range
	Y = 1000 + 300*Math.random();	 //  Y vertical base + range
	Z = 50000*Math.random();         // z horizontal range

	randomt = new String(X+' '+Y+' '+Z);\n\n	return randomt;\n	\n}\n\n\n\nfunction cumulusscale() // these values scale a cloud within a designated size\n{\n\n	maxscale = 1;\n\n	scale = Math.round(9+maxscale*Math.random());\n	X = 1.5*scale;\n	Y = scale;\n	Z = scale;\n\n	randomscale = new String(X+' '+Y+' '+Z);\n\n	return randomscale;\n	\n}\n\n\nfunction cirrustranslation() // These values designate the boundary location of the cloud\n{\n	X = 50000*Math.random();          //  X horizontal range\n	Y = 8000 + 1000*Math.random();	 //  Y vertical base + range\n	Z = 50000*Math.random();         // z horizontal range\n\n	randomt = new String(X+' '+Y+' '+Z);\n\n	return randomt;\n	\n}\n\n\n\nfunction cirrusscale() // these values scale a cloud within a designated size\n{\n\n	maxscale = 1;\n\n	scale = Math.round(9+maxscale*Math.random());\n	X = 1.5*scale;\n	Y = 2*Math.random();\n	Z = 1.5*scale;\n\n	randomscale = new String(X+' '+Y+' '+Z);\n\n	return randomscale;\n	\n}\n\n\nfunction cumulussectiontranslation() // These random values place another portion of cumulus type cloud\n{\n\n	randomtheta = 6.28319*Math.random();\n	randomphi = .7854*Math.random();\n	randomradius = 90 + 5*Math.random();//the first whole number should be close to the sectionradius\n\n	X = randomradius*Math.cos(randomtheta)*Math.sin(randomphi);\n	Z = randomradius*Math.sin(randomtheta)*Math.sin(randomphi);\n	Y = randomradius*Math.cos(randomphi);\n	\n\n	randomt = new String(X+' '+Y+' '+Z);\n\n	return randomt;\n	\n}\n\nfunction cirrussectiontranslation() // These random values place another portion of cirrus type cloud\n{\n\n	randomtheta = 6.28319*Math.random();\n	randomphi = .7854*Math.random();\n	randomradius = 90 + 5*Math.random();//the first whole number should be close to the sectionradius\n\n	X = randomradius*Math.cos(randomtheta)*Math.sin(randomphi);\n	Z = randomradius*Math.sin(randomtheta)*Math.sin(randomphi);\n	Y = randomradius*Math.cos(randomphi);\n	\n\n	randomt = new String(X+' '+Y+' '+Z);\n\n	return randomt;\n	\n}\n\n\nfunction rotation() // This random value is for the billboard rotation not used in this script\n{\n\n\n	radians = 6.28*Math.random();\n\n	randomr = new String('0 0 1 ' + radians );\n	\n	\n	return randomr;\n	\n}\n\nfunction cumulus()\n{\n\nmaxi = 20;  // number of clouds\n\nmaxj = 5; // denotes how many portions affecting the size of the cloud\n\nmaxk = 8;  // number of billboards indicating cloud density\n\nsectionradius = 100;  //radius of individual cloud sections\n\n\n\n\n\nfor (var i=0; i < maxi; i++) \n{\n\n\n\nCloudStringA = '	Transform {		\n' +\n'    scale '+ cumulusscale() + '               	\n' +\n'    translation '+ cumulustranslation() + '    \n' +    // cloud placement\n'    children [	                                \n';\n\n\nCloudStringB = new Array();\nCloudStringF = new Array();\n\n   	for (var j=0; j < maxj; j++)\n   	{\n\n	radius = 0;\n\n	CloudStringB[j]= '  Transform {		    	       \n' +\n	'    translation '+ cumulussectiontranslation() + '    \n' +     // section placement\n	'    children [	                                       \n';\n\n	\n	CloudStringC = new Array();\n	image = new String();\n\n      		for (var k=1; k < maxk; k++)  // maxk value denotes how many textured billboards make up the cloud \n      		{\n\n\n		randomtheta = 6.28319*Math.random();\n		randomphi = 1.57079*Math.random();\n		radius = radius+(sectionradius/maxk); // radius incremental steps based on billow radius and max billboards\n\n		X = radius*Math.cos(randomtheta)*Math.sin(randomphi);\n		Z = radius*Math.sin(randomtheta)*Math.sin(randomphi);\n		Y = radius*Math.cos(randomphi);\n\n\n		if (Y <= 30) //cloud shading and lighting control\n  	{	\n	image = ' \"CloudTexture1_5.png\" \"https://savage.nps.edu/Savage/Environment/Spheretexture.png\" \n';\n  	}\n\n  		else\n  	{	\n	image = ' \"CloudTexture1_4.png\" \"https://savage.nps.edu/Savage/Environment/Spheretexture.png\" \n';\n  	}\n\n	\n		\n		Billboardtranslation = new String(X+' '+Y+' '+Z);\n\n		CloudStringC[k] = '	Transform {		                \n' +\n		'            translation '+ Billboardtranslation   + '          \n' +     // random billboard placement within radius designated above\n		'	  children [	                                        \n' +\n		'	      Billboard {	                                \n' +\n		'	        axisOfRotation 0 0 0	                        \n' +     // 0 0 0 designates rotation on all axis\n		'	        children [	                                \n' +\n		'	            Transform {	                		\n' +\n		'	              rotation  0 0 0 0 		        \n' +     // a rotation of the individual billboards can be defined\n		'	              children [	                        \n' +\n		'	                  Shape {	                        \n' +\n		'	                    appearance Appearance {	        \n' +\n		'				material Material {		\n' +\n		'				                }  		\n' +\n		'	                      texture ImageTexture {	        \n' +\n		'	                        url [ ' + image + ' ]           \n' + \n		'	                      }	                                \n' +\n		'	                    }	                                \n' +\n		'	                    geometry IndexedFaceSet {	        \n' +     // define type of geometry to texture\n		'	                      coordIndex [ 0, 1, 2, 3 ]	        \n' +\n		'			      solid FALSE		        \n' +\n		'	                      coord Coordinate {	        \n' +\n		'	                        point [ 50 50 0,	        \n' +     // define size of the geometry. Here 100 meter 2D square.\n		'	                                50 -50 0,	        \n' +\n		'	                               -50 -50 0,	        \n' +\n		'	                               -50 50 0 ]	        \n' +\n		'	                      }	                                \n' +\n		'	                    }	                                \n' +\n		'	                  }	                                \n' +\n		'	              ]	                                        \n' +\n		'	            }	                                        \n' +\n		'	       ]	                                        \n' +\n		'	   }	                                                \n' +\n		'      ]	                                                \n' +\n		'     }	                                                        \n';      \n		\n\n		}\n\n	CloudStringD = CloudStringC.join(' ');\n\n	\n	CloudStringE = '   ]	                 \n' +\n	'	}	                         \n';\n\n	CloudStringF[j] = CloudStringB[j] + CloudStringD +CloudStringE;\n\n\n	}\n\nCloudStringG = CloudStringF.join(' ');\n\nCloudStringH = '      ]	                                        \n' +\n'     }	                                                        \n' +\n'#########################################################      \n';\n\nCloudString = CloudStringA + CloudStringG + CloudStringH;\n\n\n\nnewNode = Browser.createVrmlFromString(CloudString);\nCumulus.children[i] = newNode[0];\n\n\n   }\n\n}\n\nfunction cirrus()\n\n{\n\nmaxi = 2;  // number of clouds\n\nmaxj = 5; // denotes how many portions affecting the size of the cloud\n\nmaxk = 8;  // number of billboards indicating cloud density\n\nsectionradius = 1000;  //radius of individual cloud sections\n\n\n\n\n\nfor (var i=0; i < maxi; i++) \n{\n\n\n\nCloudStringA = '	Transform {		 \n' +\n'    scale '+ cirrusscale() + '               	 \n' +\n'    translation '+ cirrustranslation() + '      \n' +    // cloud placement\n'    children [	                                 \n';\n\n\nCloudStringB = new Array();\nCloudStringF = new Array();\n\n   	for (var j=0; j < maxj; j++)\n   	{\n\n	radius = 0;\n\n	CloudStringB[j]= '  Transform {		    	      \n' +\n	'    translation '+ cirrussectiontranslation() + '    \n' +     // section placement\n	'    children [	                                      \n';\n\n	\n	CloudStringC = new Array();\n\n      		for (var k=1; k < maxk; k++)  // maxk value denotes how many textured billboards make up the cloud \n      		{\n\n\n		randomtheta = 6.28319*Math.random();\n		randomphi = 1.57079*Math.random();\n		radius = radius+(sectionradius/maxk); // radius incremental steps based on section radius and max billboards\n\n		X = radius*Math.cos(randomtheta)*Math.sin(randomphi);\n		Z = radius*Math.sin(randomtheta)*Math.sin(randomphi);\n		Y = radius*Math.cos(randomphi);\n		\n		Billboardtranslation = new String(X+' '+Y+' '+Z);\n\n		CloudStringC[k] = '	Transform {		                \n' +\n		'            translation '+ Billboardtranslation   + '          \n' +     // random billboard placement within radius designated above\n		'	  children [	                                        \n' +\n		'	      Billboard {	                                \n' +\n		'	        axisOfRotation 0 0 0	                        \n' +     // 0 0 0 designates rotation on all axis\n		'	        children [	                                \n' +\n		'	            Transform {	                		\n' +\n		'	              rotation '  + rotation() + '	        \n' +\n		'	              children [	                        \n' +\n		'	                  Shape {	                        \n' +\n		'	                    appearance Appearance {	        \n' +\n		'			    material Material {			\n' +\n		'			    }					\n' +\n 		'	                      texture ImageTexture {	        \n' +\n		'	                        url [\"cloudtexture3.png\" \"https://savage.nps.edu/Savage/Environment/cloudtexture1_4.png\" ] \n' +\n		'	                      }	                                \n' +\n		'	                    }	                                \n' +\n		'	                    geometry IndexedFaceSet {	        \n' +     // define type of geometry to texture\n		'	                      coordIndex [ 0, 1, 2, 3 ]	        \n' +\n		'			      solid FALSE		        \n' +\n		'	                      coord Coordinate {	        \n' +\n		'	                        point [ 500 500 0,	        \n' +     // define size of the geometry. Here 100 meter 2D square.\n		'	                                500 -500 0,	        \n' +\n		'	                               -500 -500 0,	        \n' +\n		'	                               -500 500 0 ]	        \n' +\n		'	                      }	                                \n' +\n		'	                    }	                                \n' +\n		'	                  }	                                \n' +\n		'	              ]	                                        \n' +\n		'	            }	                                        \n' +\n		'	       ]	                                        \n' +\n		'	   }	                                                \n' +\n		'      ]	                                                \n' +\n		'     }	                                                        \n';      \n		\n\n		}\n\n	CloudStringD = CloudStringC.join(' ');\n\n	CloudStringE = '   ]	                 \n' +\n	'	}	                         \n';\n\n	CloudStringF[j] = CloudStringB[j] + CloudStringD +CloudStringE;\n\n\n	}\n\nCloudStringG = CloudStringF.join(' ');\n\nCloudStringH = '      ]	                                        \n' +\n'     }	                                                        \n' +\n'#########################################################      \n';

CloudString = CloudStringA + CloudStringG + CloudStringH;



newNode = Browser.createVrmlFromString(CloudString);
Cirrus.children[i] = newNode[0];

  }

}


function initialize()

{

cumulus();

cirrus();
}
]]></Script>
<DirectionalLight ambientIntensity="1" color="1 0 0" direction="-1 -1 0" global="true"></DirectionalLight>
</Group>
</Scene>
</X3D>