<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Immersive' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
    <head>
        <meta name='title' content='arc.x3d'/>
        <meta name='creator' content='John Carlson'/>
        <meta name='generator' content='manual'/>
        <meta name='identifier' content='https://coderextreme.net/X3DJSONLD/arc.x3d'/>
        <meta name='description' content='an attempt to implement an arc in a graph'/>
    </head>
    <Scene>
        <Viewpoint description='a moving graph' position='0 0 5'/>
        <Background skyColor='0.4 0.4 0.4'/>
        <Transform DEF='trans1'>
            <Transform DEF='rotscale1'>
                <Shape>
                    <Appearance>
                        <Material diffuseColor='0.2 0.7 0.7'/>
                    </Appearance>
                    <Cylinder radius='0.1'/>
                </Shape>
            </Transform>
        </Transform>
        <Transform DEF='trans2'>
            <Transform DEF='rotscale2'>
                <Shape>
                    <Appearance>
                        <Material diffuseColor='0.2 0.7 0.7'/>
                    </Appearance>
                    <Cylinder radius='0.1'/>
                </Shape>
            </Transform>
        </Transform>
        <Transform DEF='trans3'>
            <Transform DEF='rotscale3'>
                <Shape>
                    <Appearance>
                        <Material diffuseColor='0.2 0.7 0.7'/>
                    </Appearance>
                    <Cylinder radius='0.1'/>
                </Shape>
            </Transform>
        </Transform>
        <ProtoDeclare name='point'>
            <ProtoInterface>
                <field name='translation' accessType='inputOutput' type='SFVec3f' value='0 0 0'/>
            </ProtoInterface>
            <ProtoBody>
                <Transform DEF='node'>
                    <IS>
                        <connect nodeField='translation' protoField='translation'/>
                    </IS>
                    <Shape>
                        <Appearance>
                            <Material diffuseColor='1 0 0'/>
                        </Appearance>
                        <Sphere radius='0.1'/>
                    </Shape>
                    <PositionInterpolator DEF='PI1' key='0 1' keyValue='0 0 0 0 5 0'/>
                    <Script DEF='MB1'>
                        <field name='translation' accessType='inputOutput' type='SFVec3f' value='50 50 0'/>
                        <field name='old' accessType='inputOutput' type='SFVec3f' value='0 0 0'/>
                        <field name='set_location' accessType='inputOnly' type='SFTime'/>
                        <field name='keyValue' accessType='outputOnly' type='MFVec3f'/>
<![CDATA[
ecmascript:
		function set_location(value) {
                    old = translation;
		    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);
                    keyValue = new MFVec3f([old, translation]);
		    // Browser.println(translation);
		}
]]>
                    </Script>
                    <TimeSensor DEF='CL1' cycleInterval='3.0' loop='true'/>
                    <ROUTE fromField='cycleTime' fromNode='CL1' toField='set_location' toNode='MB1'/>
                    <ROUTE fromField='fraction_changed' fromNode='CL1' toField='set_fraction' toNode='PI1'/>
                    <ROUTE fromField='keyValue' fromNode='MB1' toField='keyValue' toNode='PI1'/>
                    <ROUTE fromField='value_changed' fromNode='PI1' toField='set_translation' toNode='node'/>
                </Transform>
            </ProtoBody>
        </ProtoDeclare>
        <!-- from doug sanden -->
        <ProtoDeclare name='x3dconnector'>
            <ProtoInterface>
                <field name='startnode' accessType='inputOutput' type='SFNode'/>
                <field name='endnode' accessType='inputOutput' type='SFNode'/>
                <field name='transnode' accessType='inputOutput' type='SFNode'/>
                <field name='rotscalenode' accessType='inputOutput' type='SFNode'/>
                <field name='set_startpoint' accessType='inputOnly' type='SFVec3f'/>
                <field name='set_endpoint' accessType='inputOnly' type='SFVec3f'/>
            </ProtoInterface>
            <ProtoBody>
                <Script DEF='S1'>
                    <field name='startnode' accessType='inputOutput' type='SFNode'/>
                    <field name='endnode' accessType='inputOutput' type='SFNode'/>
                    <field name='transnode' accessType='inputOutput' type='SFNode'/>
                    <field name='rotscalenode' accessType='inputOutput' type='SFNode'/>
                    <field name='set_startpoint' accessType='inputOnly' type='SFVec3f'/>
                    <field name='set_endpoint' accessType='inputOnly' type='SFVec3f'/>
                    <IS>
                        <connect nodeField='startnode' protoField='startnode'/>
                        <connect nodeField='endnode' protoField='endnode'/>
                        <connect nodeField='transnode' protoField='transnode'/>
                        <connect nodeField='rotscalenode' protoField='rotscalenode'/>
                        <connect nodeField='set_startpoint' protoField='set_startpoint'/>
                        <connect nodeField='set_endpoint' protoField='set_endpoint'/>
                    </IS>
<![CDATA[
ecmascript:
        function recompute(startpoint,endpoint){
	    if (typeof endpoint === 'undefined') {
		return;
	    }
            var dif = endpoint.subtract(startpoint);
            var dist = dif.length()*0.5;
            var dif2 = dif.multiply(0.5);
            var norm = dif.normalize();
            var transl = startpoint.add(dif2);
	    if (typeof Quaternion !== 'undefined') {
		    return {
			    scale : new SFVec3f(1.0,dist,1.0),
			    translation : transl,
			    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)
		    };
	    } else {
		    return {
			    scale : new SFVec3f(1.0,dist,1.0),
			    translation : transl,
			    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)
		    };
	    }
	}
	function recompute_and_route(startpoint, endpoint) {
		var trafo = recompute(startpoint, endpoint);
		if (typeof trafo !== 'undefined') {
			transnode.translation = trafo.translation;
			rotscalenode.rotation = trafo.rotation;
			rotscalenode.scale = trafo.scale;
		} else {
			Browser.print("recompute returned undefined");
		}
	}
        function initialize(){
            recompute_and_route(startnode.translation,endnode.translation);
        }
        function set_startpoint(val,t){
            recompute_and_route(val || startnode.translation,endnode.translation);
        }
        function set_endpoint(val,t){
            recompute_and_route(startnode.translation,val || endnode.translation);
        }
]]>
                </Script>
            </ProtoBody>
        </ProtoDeclare>
        <ProtoInstance DEF='G1' name='point'/>
        <ProtoInstance DEF='G2' name='point'/>
        <ProtoInstance DEF='G3' name='point'/>
        <ProtoInstance DEF='G4' name='point'/>
        <ProtoInstance DEF='connector1' name='x3dconnector'>
            <fieldValue name='startnode'>
                <ProtoInstance USE='G1'/>
            </fieldValue>
            <fieldValue name='endnode'>
                <ProtoInstance USE='G2'/>
            </fieldValue>
            <fieldValue name='transnode'>
                <Transform USE='trans1'/>
            </fieldValue>
            <fieldValue name='rotscalenode'>
                <Transform USE='rotscale1'/>
            </fieldValue>
        </ProtoInstance>
        <ProtoInstance DEF='connector2' name='x3dconnector'>
            <fieldValue name='startnode'>
                <ProtoInstance USE='G1'/>
            </fieldValue>
            <fieldValue name='endnode'>
                <ProtoInstance USE='G3'/>
            </fieldValue>
            <fieldValue name='transnode'>
                <Transform USE='trans2'/>
            </fieldValue>
            <fieldValue name='rotscalenode'>
                <Transform USE='rotscale2'/>
            </fieldValue>
        </ProtoInstance>
        <ProtoInstance DEF='connector3' name='x3dconnector'>
            <fieldValue name='startnode'>
                <ProtoInstance USE='G1'/>
            </fieldValue>
            <fieldValue name='endnode'>
                <ProtoInstance USE='G4'/>
            </fieldValue>
            <fieldValue name='transnode'>
                <Transform USE='trans3'/>
            </fieldValue>
            <fieldValue name='rotscalenode'>
                <Transform USE='rotscale3'/>
            </fieldValue>
        </ProtoInstance>
        <ROUTE fromField='translation_changed' fromNode='G1' toField='set_startpoint' toNode='connector1'/>
        <ROUTE fromField='translation_changed' fromNode='G2' toField='set_endpoint' toNode='connector1'/>
        <ROUTE fromField='translation_changed' fromNode='G1' toField='set_startpoint' toNode='connector2'/>
        <ROUTE fromField='translation_changed' fromNode='G3' toField='set_endpoint' toNode='connector2'/>
        <ROUTE fromField='translation_changed' fromNode='G1' toField='set_startpoint' toNode='connector3'/>
        <ROUTE fromField='translation_changed' fromNode='G4' toField='set_endpoint' toNode='connector3'/>
    </Scene>
</X3D>
