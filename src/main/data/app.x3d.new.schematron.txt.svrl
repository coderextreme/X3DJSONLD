<svrl:schematron-output xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" title="X3D Graphics Validity Checks using Schematron" schemaVersion=""><!--   
		   
		   
		 -->
   <svrl:active-pattern document="file:/C:/Users/jcarl/X3DJSONLD/src/main/data/app.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:successful-report test="$profileLegal and not($profileMatch) and not(/X3D/head/component) and $cadInterchangeProfile" role="info" location="/X3D">
      <svrl:text>&lt;X3D profile='Immersive'&gt; definition is insufficient since nodes in scene have actual profile='CADInterchange'
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$profileLegal and not($profileMatch) and not(/X3D/head/component) and $medicalInterchangeProfile" role="info" location="/X3D">
      <svrl:text>&lt;X3D profile='Immersive'&gt; definition is insufficient since nodes in scene have actual profile='MedicalInterchange'
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$profileLegal and not($profileMatch) and not(/X3D/head/component) and $interchangeProfile" role="info" location="/X3D">
      <svrl:text>&lt;X3D profile='Immersive'&gt; definition is insufficient since nodes in scene have actual profile='Interchange'
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 was approved by Web3D Consortium and ISO in 2023.</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 offers many new features including interoperability with HTML5, glTF
         2.0 Physically Based Rendering (PBR), and Web Audio API.</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:failed-assert test="(meta/@name='identifier')" role="warning" location="/X3D/head">
      <svrl:text>Correct url for X3D file should appear in &lt;meta name='identifier' content='https://someAddress/somePath/FileName.x3d'/&gt;
         </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(meta/@name='description')" role="info" location="/X3D/head">
      <svrl:text>Missing X3D scene description in meta tag, should appear as &lt;meta name='description'
         content='topic sentence plus good summary'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(meta/@name='generator')" role="info" location="/X3D/head">
      <svrl:text>It is good practice to identify editor(s) used, for example &lt;meta name='generator'
         content='X3D-Edit, https://savage.nps.edu/X3D-Edit'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])" role="warning" location="/X3D/Scene/Transform">
      <svrl:text>&lt;Transform DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
</svrl:schematron-output>