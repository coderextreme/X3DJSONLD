<svrl:schematron-output xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" title="X3D Graphics Validity Checks using Schematron" schemaVersion=""><!--   
		   
		   
		 -->
   <svrl:active-pattern document="file:/C:/Users/jcarl/X3DJSONLD/src/main/data/DesignPatternsApparelMedicalSkinLayers.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:successful-report test="not($profileSufficient) and not(/X3D/head/component)" role="error" location="/X3D">
      <svrl:text>&lt;X3D profile='Immersive'&gt; doesn't match contained nodes, increase profile or add needed &lt;X3D&gt;&lt;head&gt;&lt;component&gt;
         statements </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$profileLegal and not($profileMatch) and not(/X3D/head/component) and $fullProfile" role="info" location="/X3D">
      <svrl:text>&lt;X3D profile='Immersive'&gt; definition is insufficient since nodes in scene have actual profile='Full' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 was approved by Web3D Consortium and ISO in 2023.</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 offers many new features including interoperability with HTML5, glTF
         2.0 Physically Based Rendering (PBR), and Web Audio API.</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]"/>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/head/meta[12]">
      <svrl:text>&lt;meta name='warning' content='Under development. This template example does not produce renderable HAnim models.'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="Background"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))" role="error" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton'/&gt; has 0 component statements with X3D profile='Immersive', but requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt;
         or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(count(preceding-sibling::HAnimHumanoid) = 0) and (count(following-sibling::HAnimHumanoid) &gt; 0)" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; HAnim specification section E.4 recommends a common parent &lt;Group DEF='HumanoidGroup'/&gt;
         when multiple HAnimHumanoid models are present in a single scene </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; has mismatched HAnimJoint    node counts, 1 within skeleton hierarchy and 0 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; has mismatched HAnimSegment  node counts, 1 within skeleton hierarchy and 0 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSites = $countUSEsites)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='a_SimpleSkeleton' name='SimpleSkeleton'/&gt; has mismatched HAnimSite     node counts, 1 within skeleton hierarchy and 0 USE nodes in sites field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[1]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a following HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))" role="error" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has 0 component statements with X3D profile='Immersive', but requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt;
         or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a following HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))" role="error" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has 0 component statements with X3D profile='Immersive', but requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt;
         or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/Shape[1]">
      <svrl:text>&lt;Shape DEF='JointVisualization'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/Shape[1]">
      <svrl:text>&lt;Shape DEF='JointVisualization'/&gt; found without child Appearance node, or child Color node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/Shape[1]">
      <svrl:text>&lt;Shape DEF='JointVisualization'/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/Shape[2]">
      <svrl:text>&lt;Shape DEF='SegmentVisualization'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/Shape[2]">
      <svrl:text>&lt;Shape DEF='SegmentVisualization'/&gt; found without child Appearance node, or child Color node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/Shape[2]">
      <svrl:text>&lt;Shape DEF='SegmentVisualization'/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))" role="error" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='a_feature01_tip'/&gt; has 0 component statements with X3D profile='Immersive', but requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt;
         or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(@USE) and ends-with(normalize-space(@name),'_tip') and not(@name=concat(ancestor::HAnimSegment/@name,'_tip'))" role="error" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='a_feature01_tip' name='feature01_tip'/&gt; needs to match name of parent &lt;HAnimSegment name='sacrum' (meaning name='sacrum_tip') </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')" role="info" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='a_feature01_tip' name='feature01_tip'/&gt; is not a recognized name for HAnim2 HAnimSite </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/HAnimSite/Shape">
      <svrl:text>&lt;Shape DEF='SiteVisualization'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/HAnimSite/Shape">
      <svrl:text>&lt;Shape DEF='SiteVisualization'/&gt; found without child Appearance node, or child Color node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[1]/HAnimJoint/HAnimSegment/HAnimSite/Shape">
      <svrl:text>&lt;Shape DEF='SiteVisualization'/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; has mismatched HAnimJoint    node counts, 1 within skeleton hierarchy and 0 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='b_SimpleSkeletonMesh' name='SimpleSkeletonMesh'/&gt; has mismatched HAnimSegment  node counts, 1 within skeleton hierarchy and 0 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[2]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[2]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a following HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[2]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a preceding HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a following HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[2]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a preceding HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[2]/HAnimJoint/HAnimSegment/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance node, or child Color node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; has mismatched HAnimJoint    node counts, 1 within skeleton hierarchy and 0 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>&lt;HAnimHumanoid DEF='c_SkinIndexedGeometry' name='SkinIndexedGeometry'/&gt; has mismatched HAnimSegment  node counts, 1 within skeleton hierarchy and 0 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[3]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[3]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a following HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[3]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a preceding HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[3]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a following HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[3]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a preceding HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:failed-assert test="parent::Collision or parent::Shape or parent::ProtoBody or parent::field or parent::fieldValue" role="error" location="/X3D/Scene/Group/HAnimHumanoid[3]/IndexedFaceSet">
      <svrl:text>&lt;IndexedFaceSet DEF='SkinMeshIFS'/&gt; geometry node must have Shape node as parent </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; has mismatched HAnimJoint    node counts, 1 within skeleton hierarchy and 0 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>&lt;HAnimHumanoid DEF='d_SkinShapeIndexedGeometry' name='SkinShapeIndexedGeometry'/&gt; has mismatched HAnimSegment  node counts, 1 within skeleton hierarchy and 0 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[4]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[4]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a following HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[4]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a preceding HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[4]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a following HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[4]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a preceding HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[4]/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance node, or child Color node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; has mismatched HAnimJoint    node counts, 1 within skeleton hierarchy and 0 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>&lt;HAnimHumanoid DEF='e_SkinSwitchShapeIndexedGeometry' name='SkinSwitchShapeIndexedGeometry'/&gt; has mismatched HAnimSegment  node counts, 1 within skeleton hierarchy and 0 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[5]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[5]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a following HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[5]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a preceding HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[5]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a following HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[5]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a preceding HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[5]/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance node, or child Color node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:failed-assert test="@point or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='point']) or (//ProtoDeclare/ProtoInterface/field/*[@DEF=$USE]) or comment()" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[5]/Shape/IndexedFaceSet/Coordinate">
      <svrl:text>&lt;Coordinate DEF='SkinMeshCoordinate'/&gt; contains no data in point array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; has mismatched HAnimJoint    node counts, 1 within skeleton hierarchy and 0 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>&lt;HAnimHumanoid DEF='f_SynthesizedSkinShapeIndexedTwoPartGeometry' name='SynthesizedSkinShapeIndexedTwoPartGeometry'/&gt; has mismatched HAnimSegment  node counts, 1 within skeleton hierarchy and 0 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[6]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[6]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a following HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[6]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a preceding HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[6]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a following HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[6]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a preceding HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[6]/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance node, or child Color node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:failed-assert test="@point or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='point']) or (//ProtoDeclare/ProtoInterface/field/*[@DEF=$USE]) or comment()" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[6]/Shape/IndexedFaceSet/Coordinate">
      <svrl:text>&lt;Coordinate DEF='TwoPartSkinMesh'/&gt; contains no data in point array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; has mismatched HAnimJoint    node counts, 1 within skeleton hierarchy and 0 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>&lt;HAnimHumanoid DEF='g_ApparelSkinIndexedGeometryMultipleShapes' name='ApparelSkinIndexedGeometryMultipleShapes'/&gt; has mismatched HAnimSegment  node counts, 1 within skeleton hierarchy and 0 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[7]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[7]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a following HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[7]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a preceding HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[7]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a following HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[7]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a preceding HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[7]/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[7]/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance node, or child Color node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[7]/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; has mismatched HAnimJoint    node counts, 1 within skeleton hierarchy and 0 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>&lt;HAnimHumanoid DEF='h_AnatomySkinIndexedGeometryMultipleShapes' name='AnatomySkinIndexedGeometryMultipleShapes'/&gt; has mismatched HAnimSegment  node counts, 1 within skeleton hierarchy and 0 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/Group/HAnimHumanoid[8]">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[8]/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; has the same name='humanoid_root' as a preceding HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[8]/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF=''/&gt; has the same name='sacrum' as a preceding HAnimSegment node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[8]/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[8]/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance node, or child Color node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))" role="warning" location="/X3D/Scene/Group/HAnimHumanoid[8]/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="Anchor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
</svrl:schematron-output>