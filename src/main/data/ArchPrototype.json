{
  "X3D": {
    "@profile": "Immersive",
    "@version": "3.3",
    "@xsd:noNamespaceSchemaLocation": "https://www.web3d.org/specifications/x3d-3.3.xsd",
    "head": {
      "meta": [
        {
          "@content": "ArchPrototype.x3d",
          "@name": "title"
        },
        {
          "@content": "Create an arch. Can modify general parameters: clearSpanWidth, riseHeight, depth, topAbutmentHeight, pierWidth, pierHeight. See the reference file ArchModelingDiagrams.pdf to find further information. See also ArchPrototypeScript_more_readable.js.",
          "@name": "description"
        },
        {
          "@content": "Possibility to create shapes related to arch: ArchHalf; IntradosOnly; ArchFilled; ArchHalfFilled; Lintel. See the reference file ArchModelingDiagrams.pdf to find further information.",
          "@name": "description"
        },
        {
          "@content": "Michele Foti, Don Brutzman",
          "@name": "creator"
        },
        {
          "@content": "15 December 2014",
          "@name": "created"
        },
        {
          "@content": "27 November 2015",
          "@name": "modified"
        },
        {
          "@content": "ArchModelingDiagrams.pdf",
          "@name": "reference"
        },
        {
          "@content": "https://en.wikipedia.org/wiki/Arch",
          "@name": "reference"
        },
        {
          "@content": "http://X3dGraphics.com/examples/X3dForAdvancedModeling/Buildings/ArchPrototype.x3d",
          "@name": "identifier"
        },
        {
          "@content": "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit",
          "@name": "generator"
        },
        {
          "@content": "../license.html",
          "@name": "license"
        },
        {
          "@name": "translated",
          "@content": "7 January 2021"
        },
        {
          "@name": "generator",
          "@content": "DOM2JSONSerializer.js, https://github.com/coderextreme/X3DJSONLD/blob/master/src/main/node/DOM2JSONSerializer.js"
        },
        {
          "@name": "reference",
          "@content": "X3D JSON encoding: https://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
        }
      ]
    },
    "Scene": {
      "-children": [
        {
          "ProtoDeclare": {
            "@appinfo": "Create an arch. Can modify general parameters: clearSpanWidth, riseHeight, depth, topAbutmentHeight, pierWidth, pierHeight. - Possibility to create shapes related to an arch: ArchHalf; IntradosOnly; ArchFilled; ArchHalfFilled; Lintel. See the reference file ArchModelingDiagrams.pdf to find further information. See also ArchPrototypeScript_more_readable.js.js.",
            "@name": "ArchPrototype",
            "ProtoInterface": {
              "-children": [
                {
                  "#comment": " COLOR OF ARCH "
                },
                {
                  "#comment": " INPUT PARAMETERS "
                },
                {
                  "#comment": " General parameters: measures in meters "
                },
                {
                  "#comment": " Parameters to create to create shapes related to arch: put true to apply "
                }
              ],
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "color of arch",
                  "@name": "diffuseColor",
                  "@type": "SFColor",
                  "@value": [
                    0.2,
                    0.8,
                    0.8
                  ]
                },
                {
                  "@accessType": "inputOutput",
                  "@appinfo": "color of arch",
                  "@name": "emissiveColor",
                  "@type": "SFColor",
                  "@value": [
                    0.2,
                    0.8,
                    0.8
                  ]
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "clearSpanWidth: clearSpanWidth must be double of riseHeight to obtain an half circumference",
                  "@name": "clearSpanWidth",
                  "@type": "SFFloat",
                  "@value": 4
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "riseHeight: riseHeight must be half of clearSpanWidth to obtain an half circumference",
                  "@name": "riseHeight",
                  "@type": "SFFloat",
                  "@value": 2
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "depth",
                  "@name": "depth",
                  "@type": "SFFloat",
                  "@value": 3
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "topAbutmentHeight:topAbutmentHeight=0 means no topAbutment",
                  "@name": "topAbutmentHeight",
                  "@type": "SFFloat",
                  "@value": 0.5
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "pierWidth:pierWidtht=0 means no pierWidth",
                  "@name": "pierWidth",
                  "@type": "SFFloat",
                  "@value": 0.5
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "pierHeight: pierHeight=0 means no pierHeight",
                  "@name": "pierHeight",
                  "@type": "SFFloat",
                  "@value": 1
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "archHalf: can modify also clearSpanWidth, riseHeight, depth, pierWidth, pierHeight, topAbutmentHeight, archHalfExtensionWidth at purpose, clearSpanWidth measure refers to a full arc, consider clearSpanWidth/2 for the archHalf width",
                  "@name": "archHalf",
                  "@type": "SFBool",
                  "@value": false
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "archHalfExtensionWidth: measure in meters, use only if archHalf=true, it is the width of the etension of the abutment of the archHalf. See the reference file ArchModelingDiagrams.pdf to find further information.",
                  "@name": "archHalfExtensionWidth",
                  "@type": "SFFloat",
                  "@value": 0
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "onlyIntrados: note it is a flat curved surface, can modify also clearSpanWidth, riseHeight, depth at purpose, if needed apply archHalf=true.",
                  "@name": "onlyIntrados",
                  "@type": "SFBool",
                  "@value": false
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "archFilled: note it is an half cylinder, can modify also clearSpanWidth, riseHeight, depth at purpose.",
                  "@name": "archFilled",
                  "@type": "SFBool",
                  "@value": false
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "archHalfFilled: note it is a quarter cylinder, can modify also clearSpanWidth, riseHeight, depth at purpose, clearSpanWidth measure refers to a full arc, consider clearSpanWidth/2 for the archHalfFilled width.",
                  "@name": "archHalfFilled",
                  "@type": "SFBool",
                  "@value": false
                },
                {
                  "@accessType": "initializeOnly",
                  "@appinfo": "lintel: no arc is rendered, but a lintel: topAbutmentHeight on pierHeight, total height is pierHeight + topAbutmentHeight, if needed apply archHalf=true.",
                  "@name": "lintel",
                  "@type": "SFBool",
                  "@value": false
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                {
                  "#comment": " First node determines node type of this prototype "
                },
                {
                  "#comment": " IndexedFaceset creates arch "
                },
                {
                  "Transform": {
                    "@DEF": "ArchTransform",
                    "-children": [
                      {
                        "Shape": {
                          "@DEF": "Arch",
                          "-children": [
                            {
                              "#comment": " note that convex='false' (meaning concave geometry) is crucial for this IFS of a geometric chord to render properly "
                            },
                            {
                              "IndexedFaceSet": {
                                "@DEF": "ArchIndex",
                                "@convex": false,
                                "@creaseAngle": 0,
                                "@solid": false,
                                "-children": [
                                  {
                                    "Coordinate": {
                                      "@DEF": "ArchChord"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "Appearance": {
                                "-children": [
                                  {
                                    "Material": {
                                      "@DEF": "MaterialNode",
                                      "IS": {
                                        "connect": [
                                          {
                                            "@nodeField": "emissiveColor",
                                            "@protoField": "emissiveColor"
                                          },
                                          {
                                            "@nodeField": "diffuseColor",
                                            "@protoField": "diffuseColor"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "#comment": " Subsequent nodes do not render, but still must be a valid X3D subgraph "
                },
                {
                  "#comment": " This embedded Script provides the X3D author with additional visibility and control over prototype inputs and outputs "
                },
                {
                  "Script": {
                    "@DEF": "ArchPrototypeScript",
                    "@url": [
                      "../node/ArchPrototypeScript.js",
                      "https://coderextreme.net/X3DJSONLD/src/main/node/ArchPrototypeScript.js"
                    ],
                    "-children": [
                      {
                        "#comment": " INPUT PARAMETERS "
                      },
                      {
                        "#comment": " General parameters "
                      },
                      {
                        "#comment": " Parameters to create to create shapes related to arch: put true to apply "
                      },
                      {
                        "#comment": " OUTPUT PARAMETERS "
                      }
                    ],
                    "field": [
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for clearSpanWidth parameter",
                        "@name": "clearSpanWidth",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for riseHeight parameter",
                        "@name": "riseHeight",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for depth parameter",
                        "@name": "depth",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for topAbutmentHeight parameter",
                        "@name": "topAbutmentHeight",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for pierWidth parameter",
                        "@name": "pierWidth",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for pierHeight parameter",
                        "@name": "pierHeight",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for archHalf parameter",
                        "@name": "archHalf",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for archHalfExtensionWidth parameter",
                        "@name": "archHalfExtensionWidth",
                        "@type": "SFFloat"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for onlyIntrados parameter",
                        "@name": "onlyIntrados",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for archFilled parameter",
                        "@name": "archFilled",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for archHalfFilled parameter",
                        "@name": "archHalfFilled",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "initializeOnly",
                        "@appinfo": "user or default input for lintel parameter",
                        "@name": "lintel",
                        "@type": "SFBool"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "computedScale: modify scale field - NOTE it is not used to modify the whole arch, but to modify clearSpanWidth, riseHeight, depth. It does not affect topAbutmentHeight, pierWidth, pierHeight, archHalfExtensionWidth",
                        "@name": "computedScale",
                        "@type": "SFVec3f"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "send computed points to the Coordinate node",
                        "@name": "pointOut",
                        "@type": "MFVec3f"
                      },
                      {
                        "@accessType": "outputOnly",
                        "@appinfo": "send computed indices to the IndexedFaceSet node",
                        "@name": "indexOut",
                        "@type": "MFInt32"
                      }
                    ],
                    "IS": {
                      "connect": [
                        {
                          "@nodeField": "clearSpanWidth",
                          "@protoField": "clearSpanWidth"
                        },
                        {
                          "@nodeField": "riseHeight",
                          "@protoField": "riseHeight"
                        },
                        {
                          "@nodeField": "depth",
                          "@protoField": "depth"
                        },
                        {
                          "@nodeField": "pierWidth",
                          "@protoField": "pierWidth"
                        },
                        {
                          "@nodeField": "topAbutmentHeight",
                          "@protoField": "topAbutmentHeight"
                        },
                        {
                          "@nodeField": "pierHeight",
                          "@protoField": "pierHeight"
                        },
                        {
                          "@nodeField": "archHalf",
                          "@protoField": "archHalf"
                        },
                        {
                          "@nodeField": "archHalfExtensionWidth",
                          "@protoField": "archHalfExtensionWidth"
                        },
                        {
                          "@nodeField": "onlyIntrados",
                          "@protoField": "onlyIntrados"
                        },
                        {
                          "@nodeField": "archFilled",
                          "@protoField": "archFilled"
                        },
                        {
                          "@nodeField": "archHalfFilled",
                          "@protoField": "archHalfFilled"
                        },
                        {
                          "@nodeField": "lintel",
                          "@protoField": "lintel"
                        }
                      ]
                    }
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "computedScale",
                    "@fromNode": "ArchPrototypeScript",
                    "@toField": "scale",
                    "@toNode": "ArchTransform"
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "pointOut",
                    "@fromNode": "ArchPrototypeScript",
                    "@toField": "point",
                    "@toNode": "ArchChord"
                  }
                },
                {
                  "ROUTE": {
                    "@fromField": "indexOut",
                    "@fromNode": "ArchPrototypeScript",
                    "@toField": "set_coordIndex",
                    "@toNode": "ArchIndex"
                  }
                }
              ]
            }
          }
        },
        {
          "ProtoInstance": {
            "@DEF": "ArchInstance",
            "@name": "ArchPrototype",
            "fieldValue": [
              {
                "@name": "diffuseColor",
                "@value": [
                  0.5,
                  0.3,
                  0.6
                ]
              },
              {
                "@name": "emissiveColor",
                "@value": [
                  0.5,
                  0.3,
                  0.6
                ]
              },
              {
                "@name": "clearSpanWidth",
                "@value": 5
              },
              {
                "@name": "riseHeight",
                "@value": 2.5
              },
              {
                "@name": "depth",
                "@value": 2
              },
              {
                "@name": "topAbutmentHeight",
                "@value": 0.6
              },
              {
                "@name": "pierWidth",
                "@value": 1
              },
              {
                "@name": "pierHeight",
                "@value": 2
              }
            ]
          }
        },
        {
          "#comment": " Add any ROUTEs here that connect ProtoInstance to/from prior nodes in Scene (and outside of ProtoDeclare) "
        },
        {
          "Inline": {
            "@DEF": "CoordinateAxes",
            "@url": [
              "../data/CoordinateAxes.x3d"
            ]
          }
        }
      ]
    },
    "encoding": "UTF-8",
    "JSON schema": "https://www.web3d.org/specifications/x3d-4.0-JSONSchema.json"
  }
}