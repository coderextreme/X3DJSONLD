<svrl:schematron-output xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" title="X3D Graphics Validity Checks using Schematron" schemaVersion=""><!--   
		   
		   
		 -->
   <svrl:active-pattern document="file:/C:/Users/jcarl/X3DJSONLD/src/main/data/JinLOA4.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 was approved by Web3D Consortium and ISO in 2023.</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@version='4.0')" role="diagnostic" location="/X3D">
      <svrl:text>X3D version 4.0 offers many new features including interoperability with HTML5, glTF
         2.0 Physically Based Rendering (PBR), and Web Audio API.</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="NavigationInfo"/>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; version='2.0' with X3D version='4.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 146</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 146</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 146</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 146</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='hanim_JinLOA4' name='JinLOA4'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()" role="diagnostic" location="/X3D/Scene/HAnimHumanoid">
      <svrl:text>====================================================================================================================
         </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="MetadataSet"/>
   <svrl:successful-report test="(local-name(..) = 'HAnimHumanoid') and (@name='HAnimHumanoid.info') and $HAnimHumanoid.info.MetaNode.gender and not($HAnimHumanoid.info.MetaNode.gender/@value = 'male') and not($HAnimHumanoid.info.MetaNode.gender/@value = 'female') and not($HAnimHumanoid.info.MetaNode.gender/@value = 'neutral')" role="warning" location="/X3D/Scene/HAnimHumanoid/MetadataSet">
      <svrl:text>HAnimHumanoid/&lt;MetadataSet DEF='' name='HAnimHumanoid.info'/&gt; contains MetadataString name='gender' value='"female"' which is expected to be 'male' or 'female' or 'neutral' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="MetadataFloat | MetadataDouble"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or (@name='humanoid_root') or (@name='sacroiliac') or (@name='l_hip') or (@name='l_knee') or (@name='l_talocrural') or (@name='l_talocalcaneonavicular') or (@name='l_cuneonavicular_1') or (@name='l_tarsometatarsal_1') or (@name='l_metatarsophalangeal_1') or (@name='l_tarsal_interphalangeal_1') or (@name='l_cuneonavicular_2') or (@name='l_tarsometatarsal_2') or (@name='l_metatarsophalangeal_2') or (@name='l_tarsal_proximal_interphalangeal_2') or (@name='l_tarsal_distal_interphalangeal_2') or (@name='l_cuneonavicular_3') or (@name='l_tarsometatarsal_3') or (@name='l_metatarsophalangeal_3') or (@name='l_tarsal_proximal_interphalangeal_3') or (@name='l_tarsal_distal_interphalangeal_3') or (@name='l_calcaneocuboid') or (@name='l_transversetarsal') or (@name='l_tarsometatarsal_4') or (@name='l_metatarsophalangeal_4') or (@name='l_tarsal_proximal_interphalangeal_4') or (@name='l_tarsal_distal_interphalangeal_4') or (@name='l_tarsometatarsal_5') or (@name='l_metatarsophalangeal_5') or (@name='l_tarsal_proximal_interphalangeal_5') or (@name='l_tarsal_distal_interphalangeal_5') or (@name='r_hip') or (@name='r_knee') or (@name='r_talocrural') or (@name='r_talocalcaneonavicular') or (@name='r_cuneonavicular_1') or (@name='r_tarsometatarsal_1') or (@name='r_metatarsophalangeal_1') or (@name='r_tarsal_interphalangeal_1') or (@name='r_cuneonavicular_2') or (@name='r_tarsometatarsal_2') or (@name='r_metatarsophalangeal_2') or (@name='r_tarsal_proximal_interphalangeal_2') or (@name='r_tarsal_distal_interphalangeal_2') or (@name='r_cuneonavicular_3') or (@name='r_tarsometatarsal_3') or (@name='r_metatarsophalangeal_3') or (@name='r_tarsal_proximal_interphalangeal_3') or (@name='r_tarsal_distal_interphalangeal_3') or (@name='r_calcaneocuboid') or (@name='r_transversetarsal') or (@name='r_tarsometatarsal_4') or (@name='r_metatarsophalangeal_4') or (@name='r_tarsal_proximal_interphalangeal_4') or (@name='r_tarsal_distal_interphalangeal_4') or (@name='r_tarsometatarsal_5') or (@name='r_metatarsophalangeal_5') or (@name='r_tarsal_proximal_interphalangeal_5') or (@name='r_tarsal_distal_interphalangeal_5') or (@name='vl5') or (@name='vl4') or (@name='vl3') or (@name='vl2') or (@name='vl1') or (@name='vt12') or (@name='vt11') or (@name='vt10') or (@name='vt9') or (@name='vt8') or (@name='vt7') or (@name='vt6') or (@name='vt5') or (@name='vt4') or (@name='vt3') or (@name='vt2') or (@name='vt1') or (@name='vc7') or (@name='vc6') or (@name='vc5') or (@name='vc4') or (@name='vc3') or (@name='vc2') or (@name='vc1') or (@name='skullbase') or (@name='l_eyelid_joint') or (@name='r_eyelid_joint') or (@name='l_eyeball_joint') or (@name='r_eyeball_joint') or (@name='l_eyebrow_joint') or (@name='r_eyebrow_joint') or (@name='temporomandibular') or (@name='l_sternoclavicular') or (@name='l_acromioclavicular') or (@name='l_shoulder') or (@name='l_elbow') or (@name='l_radiocarpal') or (@name='l_midcarpal_1') or (@name='l_carpometacarpal_1') or (@name='l_metacarpophalangeal_1') or (@name='l_carpal_interphalangeal_1') or (@name='l_midcarpal_2') or (@name='l_carpometacarpal_2') or (@name='l_metacarpophalangeal_2') or (@name='l_carpal_proximal_interphalangeal_2') or (@name='l_carpal_distal_interphalangeal_2') or (@name='l_midcarpal_3') or (@name='l_carpometacarpal_3') or (@name='l_metacarpophalangeal_3') or (@name='l_carpal_proximal_interphalangeal_3') or (@name='l_carpal_distal_interphalangeal_3') or (@name='l_midcarpal_4_5') or (@name='l_carpometacarpal_4') or (@name='l_metacarpophalangeal_4') or (@name='l_carpal_proximal_interphalangeal_4') or (@name='l_carpal_distal_interphalangeal_4') or (@name='l_carpometacarpal_5') or (@name='l_metacarpophalangeal_5') or (@name='l_carpal_proximal_interphalangeal_5') or (@name='l_carpal_distal_interphalangeal_5') or (@name='r_sternoclavicular') or (@name='r_acromioclavicular') or (@name='r_shoulder') or (@name='r_elbow') or (@name='r_radiocarpal') or (@name='r_midcarpal_1') or (@name='r_carpometacarpal_1') or (@name='r_metacarpophalangeal_1') or (@name='r_carpal_interphalangeal_1') or (@name='r_midcarpal_2') or (@name='r_carpometacarpal_2') or (@name='r_metacarpophalangeal_2') or (@name='r_carpal_proximal_interphalangeal_2') or (@name='r_carpal_distal_interphalangeal_2') or (@name='r_midcarpal_3') or (@name='r_carpometacarpal_3') or (@name='r_metacarpophalangeal_3') or (@name='r_carpal_proximal_interphalangeal_3') or (@name='r_carpal_distal_interphalangeal_3') or (@name='r_midcarpal_4_5') or (@name='r_carpometacarpal_4') or (@name='r_metacarpophalangeal_4') or (@name='r_carpal_proximal_interphalangeal_4') or (@name='r_carpal_distal_interphalangeal_4') or (@name='r_carpometacarpal_5') or (@name='r_metacarpophalangeal_5') or (@name='r_carpal_proximal_interphalangeal_5') or (@name='r_carpal_distal_interphalangeal_5')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint[1]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF='hanim_l_tarsal_distal_interphalangeal_1' name='l_tarsal_distal_interphalangeal_1'/&gt; is not a recognized name for HAnim2 HAnimJoint </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='l_tarsal_interphalangeal_1')]" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint[1]/HAnimJoint/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_l_tarsal_distal_phalanx_1' name='l_tarsal_distal_phalanx_1'/&gt; has parent HAnimJoint name='l_tarsal_distal_interphalangeal_1' rather than expected parent name='l_tarsal_interphalangeal_1', recommend checking
         model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or (@name='humanoid_root') or (@name='sacroiliac') or (@name='l_hip') or (@name='l_knee') or (@name='l_talocrural') or (@name='l_talocalcaneonavicular') or (@name='l_cuneonavicular_1') or (@name='l_tarsometatarsal_1') or (@name='l_metatarsophalangeal_1') or (@name='l_tarsal_interphalangeal_1') or (@name='l_cuneonavicular_2') or (@name='l_tarsometatarsal_2') or (@name='l_metatarsophalangeal_2') or (@name='l_tarsal_proximal_interphalangeal_2') or (@name='l_tarsal_distal_interphalangeal_2') or (@name='l_cuneonavicular_3') or (@name='l_tarsometatarsal_3') or (@name='l_metatarsophalangeal_3') or (@name='l_tarsal_proximal_interphalangeal_3') or (@name='l_tarsal_distal_interphalangeal_3') or (@name='l_calcaneocuboid') or (@name='l_transversetarsal') or (@name='l_tarsometatarsal_4') or (@name='l_metatarsophalangeal_4') or (@name='l_tarsal_proximal_interphalangeal_4') or (@name='l_tarsal_distal_interphalangeal_4') or (@name='l_tarsometatarsal_5') or (@name='l_metatarsophalangeal_5') or (@name='l_tarsal_proximal_interphalangeal_5') or (@name='l_tarsal_distal_interphalangeal_5') or (@name='r_hip') or (@name='r_knee') or (@name='r_talocrural') or (@name='r_talocalcaneonavicular') or (@name='r_cuneonavicular_1') or (@name='r_tarsometatarsal_1') or (@name='r_metatarsophalangeal_1') or (@name='r_tarsal_interphalangeal_1') or (@name='r_cuneonavicular_2') or (@name='r_tarsometatarsal_2') or (@name='r_metatarsophalangeal_2') or (@name='r_tarsal_proximal_interphalangeal_2') or (@name='r_tarsal_distal_interphalangeal_2') or (@name='r_cuneonavicular_3') or (@name='r_tarsometatarsal_3') or (@name='r_metatarsophalangeal_3') or (@name='r_tarsal_proximal_interphalangeal_3') or (@name='r_tarsal_distal_interphalangeal_3') or (@name='r_calcaneocuboid') or (@name='r_transversetarsal') or (@name='r_tarsometatarsal_4') or (@name='r_metatarsophalangeal_4') or (@name='r_tarsal_proximal_interphalangeal_4') or (@name='r_tarsal_distal_interphalangeal_4') or (@name='r_tarsometatarsal_5') or (@name='r_metatarsophalangeal_5') or (@name='r_tarsal_proximal_interphalangeal_5') or (@name='r_tarsal_distal_interphalangeal_5') or (@name='vl5') or (@name='vl4') or (@name='vl3') or (@name='vl2') or (@name='vl1') or (@name='vt12') or (@name='vt11') or (@name='vt10') or (@name='vt9') or (@name='vt8') or (@name='vt7') or (@name='vt6') or (@name='vt5') or (@name='vt4') or (@name='vt3') or (@name='vt2') or (@name='vt1') or (@name='vc7') or (@name='vc6') or (@name='vc5') or (@name='vc4') or (@name='vc3') or (@name='vc2') or (@name='vc1') or (@name='skullbase') or (@name='l_eyelid_joint') or (@name='r_eyelid_joint') or (@name='l_eyeball_joint') or (@name='r_eyeball_joint') or (@name='l_eyebrow_joint') or (@name='r_eyebrow_joint') or (@name='temporomandibular') or (@name='l_sternoclavicular') or (@name='l_acromioclavicular') or (@name='l_shoulder') or (@name='l_elbow') or (@name='l_radiocarpal') or (@name='l_midcarpal_1') or (@name='l_carpometacarpal_1') or (@name='l_metacarpophalangeal_1') or (@name='l_carpal_interphalangeal_1') or (@name='l_midcarpal_2') or (@name='l_carpometacarpal_2') or (@name='l_metacarpophalangeal_2') or (@name='l_carpal_proximal_interphalangeal_2') or (@name='l_carpal_distal_interphalangeal_2') or (@name='l_midcarpal_3') or (@name='l_carpometacarpal_3') or (@name='l_metacarpophalangeal_3') or (@name='l_carpal_proximal_interphalangeal_3') or (@name='l_carpal_distal_interphalangeal_3') or (@name='l_midcarpal_4_5') or (@name='l_carpometacarpal_4') or (@name='l_metacarpophalangeal_4') or (@name='l_carpal_proximal_interphalangeal_4') or (@name='l_carpal_distal_interphalangeal_4') or (@name='l_carpometacarpal_5') or (@name='l_metacarpophalangeal_5') or (@name='l_carpal_proximal_interphalangeal_5') or (@name='l_carpal_distal_interphalangeal_5') or (@name='r_sternoclavicular') or (@name='r_acromioclavicular') or (@name='r_shoulder') or (@name='r_elbow') or (@name='r_radiocarpal') or (@name='r_midcarpal_1') or (@name='r_carpometacarpal_1') or (@name='r_metacarpophalangeal_1') or (@name='r_carpal_interphalangeal_1') or (@name='r_midcarpal_2') or (@name='r_carpometacarpal_2') or (@name='r_metacarpophalangeal_2') or (@name='r_carpal_proximal_interphalangeal_2') or (@name='r_carpal_distal_interphalangeal_2') or (@name='r_midcarpal_3') or (@name='r_carpometacarpal_3') or (@name='r_metacarpophalangeal_3') or (@name='r_carpal_proximal_interphalangeal_3') or (@name='r_carpal_distal_interphalangeal_3') or (@name='r_midcarpal_4_5') or (@name='r_carpometacarpal_4') or (@name='r_metacarpophalangeal_4') or (@name='r_carpal_proximal_interphalangeal_4') or (@name='r_carpal_distal_interphalangeal_4') or (@name='r_carpometacarpal_5') or (@name='r_metacarpophalangeal_5') or (@name='r_carpal_proximal_interphalangeal_5') or (@name='r_carpal_distal_interphalangeal_5')" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint[1]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint">
      <svrl:text>&lt;HAnimJoint DEF='hanim_r_tarsal_distal_interphalangeal_1' name='r_tarsal_distal_interphalangeal_1'/&gt; is not a recognized name for HAnim2 HAnimJoint </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='r_tarsal_interphalangeal_1')]" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint[1]/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint[1]/HAnimJoint[1]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='hanim_r_tarsal_distal_phalanx_1' name='r_tarsal_distal_phalanx_1'/&gt; has parent HAnimJoint name='r_tarsal_distal_interphalangeal_1' rather than expected parent name='r_tarsal_interphalangeal_1', recommend checking
         model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="$isHAnim2 and (@name='vl5') and parent::HAnimJoint[not(@name='humanoid_root')]" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint[1]/HAnimJoint/HAnimJoint[3]">
      <svrl:text>&lt;HAnimJoint DEF='hanim_vl5' name='vl5'/&gt; has parent HAnimJoint name='sacroiliac' rather than expected parent name='humanoid_root', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="$isHAnim2 and (@name='l_carpometacarpal_5') and parent::HAnimJoint[not(@name='l_midcarpal_4_5')]" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint[1]/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[2]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]">
      <svrl:text>&lt;HAnimJoint DEF='hanim_l_carpometacarpal_5' name='l_carpometacarpal_5'/&gt; has parent HAnimJoint name='l_radiocarpal' rather than expected parent name='l_midcarpal_4_5', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="$isHAnim2 and (@name='r_carpometacarpal_5') and parent::HAnimJoint[not(@name='r_midcarpal_4_5')]" role="warning" location="/X3D/Scene/HAnimHumanoid/HAnimJoint[1]/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[3]/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint/HAnimJoint[5]">
      <svrl:text>&lt;HAnimJoint DEF='hanim_r_carpometacarpal_5' name='r_carpometacarpal_5'/&gt; has parent HAnimJoint name='r_radiocarpal' rather than expected parent name='r_midcarpal_4_5', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[2]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_sacroiliac_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_sacroiliac_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[6]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_subtalar_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_subtalar_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[7]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_metatarsal_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_metatarsal_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[11]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_subtalar_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_subtalar_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[12]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_metatarsal_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_metatarsal_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[14]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vl4_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vl4_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[15]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vl3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vl3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vl2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vl2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vl1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vl1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[18]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt12_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt12_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt11_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt11_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt10_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt10_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt9_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt9_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt8_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt8_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt7_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt7_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[24]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt6_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt6_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt5_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt5_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt4_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt4_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[28]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[29]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vt1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vt1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[30]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vc7_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vc7_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[31]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vc6_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vc6_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[32]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vc5_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vc5_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[33]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vc4_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vc4_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[34]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vc3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vc3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[35]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vc2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vc2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[36]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_vc1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_vc1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[38]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_eyeball_joint_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_eyeball_joint_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[39]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_eyeball_joint_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_eyeball_joint_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[40]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_sternoclavicular_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_sternoclavicular_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[41]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_acromioclavicular_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_acromioclavicular_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[45]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_thumb1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_thumb1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[46]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_thumb2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_thumb2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[47]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_thumb3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_thumb3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[48]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_index0_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_index0_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[49]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_index1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_index1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[50]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_index2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_index2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[51]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_index3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_index3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[52]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_middle0_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_middle0_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[53]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_middle1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_middle1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[54]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_middle2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_middle2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[55]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_middle3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_middle3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[56]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_ring0_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_ring0_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[57]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_ring1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_ring1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[58]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_ring2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_ring2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[59]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_ring3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_ring3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[60]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_pinky0_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_pinky0_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[61]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_pinky1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_pinky1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[62]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_pinky2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_pinky2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[63]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_l_pinky3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_l_pinky3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[64]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_sternoclavicular_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_sternoclavicular_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[65]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_acromioclavicular_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_acromioclavicular_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[69]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_thumb1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_thumb1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[70]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_thumb2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_thumb2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[71]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_thumb3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_thumb3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[72]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_index0_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_index0_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[73]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_index1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_index1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[74]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_index2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_index2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[75]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_index3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_index3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[76]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_middle0_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_middle0_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[77]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_middle1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_middle1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[78]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_middle2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_middle2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[79]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_middle3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_middle3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[80]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_ring0_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_ring0_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[81]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_ring1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_ring1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[82]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_ring2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_ring2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[83]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_ring3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_ring3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[84]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_pinky0_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_pinky0_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[85]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_pinky1_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_pinky1_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[86]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_pinky2_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_pinky2_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[1]/OrientationInterpolator[87]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stop_r_pinky3_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stop_r_pinky3_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[15]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_l_eyeball_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_l_eyeball_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_eyeball_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_eyeball_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[18]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[24]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[28]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[29]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[30]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_index1_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_index1_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[31]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_index2_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_index2_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[2]/OrientationInterpolator[32]">
      <svrl:text>&lt;OrientationInterpolator DEF='Stand_r_index3_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Stand_r_index3_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[15]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitches_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitches_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitches_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitches_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitches_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitches_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[3]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Pitch_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Pitch_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[15]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaws_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaws_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaws_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaws_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaws_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaws_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[4]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Yaw_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Yaw_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[15]">
      <svrl:text>&lt;OrientationInterpolator DEF='Rolls_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Rolls_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Rolls_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Rolls_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Rolls_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Rolls_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[5]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Roll_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Roll_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[8]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[6]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Walk_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Walk_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[14]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_lower_body_RotationInterpolator_Run'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_lower_body_RotationInterpolator_Run' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_neck_RotationInterpolator_Run'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_neck_RotationInterpolator_Run' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_upper_body_RotationInterpolator_Run'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_upper_body_RotationInterpolator_Run' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[7]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Run_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Run_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[8]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[16]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[17]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[20]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[26]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[8]/OrientationInterpolator[27]">
      <svrl:text>&lt;OrientationInterpolator DEF='Jump_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Jump_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[1]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_l_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_l_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[2]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_l_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_l_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[6]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_l_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_l_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[7]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_r_sternoclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_r_sternoclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[8]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_r_acromioclavicular_RollInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_r_acromioclavicular_RollInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[12]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_r_thumb1_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_r_thumb1_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[18]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_r_metatarsal_PitchInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_r_metatarsal_PitchInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[19]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_sacroiliac_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_sacroiliac_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[21]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_vc6_YawInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_vc6_YawInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[22]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_lower_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_lower_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[23]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_upper_body_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_upper_body_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')" role="warning" location="/X3D/Scene/Group[9]/OrientationInterpolator[25]">
      <svrl:text>&lt;OrientationInterpolator DEF='Kick_neck_RotationInterpolator'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Kick_neck_RotationInterpolator' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="Color"/>
   <svrl:fired-rule context="ProximitySensor | VisibilitySensor | TransformSensor"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
</svrl:schematron-output>