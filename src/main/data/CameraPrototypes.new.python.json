{
    "X3D":,
    {
        "encoding":"UTF-8",
        "$id":   "https://www.web3d.org/specifications/x3d-4.0-JSONSchema.json",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "@version":"4.0",
        "@profile":"Immersive",
    "head":
    {
        "meta":
        {
      {
        "@content":"CameraPrototypes.x3d",
        "@name":"title"
      }
    },
        "meta":
        {
      {
        "@content":"Camera, CameraShot and CameraMovement prototypes that demonstrate storyboard capabilities and precise camera operation. This is a developmental effort for potential X3D Specification improvement.",
        "@name":"description"
      }
    },
        "meta":
        {
      {
        "@content":"Don Brutzman and Jeff Weekley",
        "@name":"creator"
      }
    },
        "meta":
        {
      {
        "@content":"16 March 2009",
        "@name":"created"
      }
    },
        "meta":
        {
      {
        "@content":"25 October 2016",
        "@name":"modified"
      }
    },
        "meta":
        {
      {
        "@content":"Schematron rules, backed up by initialize() checks",
        "@name":"TODO"
      }
    },
        "meta":
        {
      {
        "@content":"BeyondViewpointCameraNodesWeb3D2009.pdf",
        "@name":"reference"
      }
    },
        "meta":
        {
      {
        "@content":"https://www.web3d.org/x3d/specifications/ISO-IEC-FDIS-19775-1.2-X3D-AbstractSpecification/Part01/components/navigation.html",
        "@name":"reference"
      }
    },
        "meta":
        {
      {
        "@content":"Camera nodes for Viewpoint navigation control",
        "@name":"subject"
      }
    },
        "meta":
        {
      {
        "@content":"CameraExamples.x3d",
        "@name":"reference"
      }
    },
        "meta":
        {
      {
        "@content":"https://www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d",
        "@name":"identifier"
      }
    },
        "meta":
        {
      {
        "@content":"http://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d",
        "@name":"reference"
      }
    },
        "meta":
        {
      {
        "@content":"X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit",
        "@name":"generator"
      }
    },
        "meta":
        {
      {
        "@content":"../license.html",
        "@name":"license"
      }
    },
    }    "Scene":
    {
        "ProtoDeclare":
        {
      {
        "@appinfo":"Camera node provides direct control of scene view to enable cinematic camera animation shot by shot and move by move along with still digital-photography settings for offline rendering of camera images.",
        "@name":"Camera"
      }
            "ProtoInterface":
            {
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Text description to be displayed for this Camera",
        "@name":"description",
        "@type":"SFString"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera position in local transformation frame, which is default prior to first CameraShot initialPosition getting activated",
        "@name":"position",
        "@type":"SFVec3f",
        "@value":"[0, 0, 10]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera rotation in local transformation frame, which is default prior to first CameraShot initialPosition getting activated",
        "@name":"orientation",
        "@type":"SFRotation",
        "@value":"[0, 0, 1, 0]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"pi/4",
        "@name":"fieldOfView",
        "@type":"SFFloat",
        "@value":"0.7854"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOnly",
        "@appinfo":"input fraction drives interpolators",
        "@name":"set_fraction",
        "@type":"SFFloat"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOnly",
        "@appinfo":"input event binds or unbinds this Camera",
        "@name":"set_bind",
        "@type":"SFBool"
      }
    },
                "field":
                {
      {
        "@accessType":"outputOnly",
        "@appinfo":"output event indicates when this Camera is bound",
        "@name":"bindTime",
        "@type":"SFTime"
      }
    },
                "field":
                {
      {
        "@accessType":"outputOnly",
        "@appinfo":"output event indicates whether this Camera is bound or unbound",
        "@name":"isBound",
        "@type":"SFBool"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Vector distance to near clipping plane corresponds to NavigationInfo.avatarSize[0]",
        "@name":"nearClipPlane",
        "@type":"SFFloat",
        "@value":"0.25"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Vector distance to far clipping plane corresponds to NavigationInfo.visibilityLimit",
        "@name":"farClipPlane",
        "@type":"SFFloat"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Array of CameraShot nodes which in turn contain CameraMovement nodes",
        "@name":"shots",
        "@type":"MFNode"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Whether camera headlight is on or off",
        "@name":"headlight",
        "@type":"SFBool",
        "@value":"True"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera headlight color",
        "@name":"headlightColor",
        "@type":"SFColor",
        "@value":"[1, 1, 1]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera headlight intensity",
        "@name":"headlightIntensity",
        "@type":"SFFloat",
        "@value":"1"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera filter color that modifies virtual lens capture",
        "@name":"filterColor",
        "@type":"SFColor",
        "@value":"[1, 1, 1]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera filter transparency that modifies virtual lens capture",
        "@name":"filterTransparency",
        "@type":"SFFloat",
        "@value":"1"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"upVector changes modify camera orientation (and possibly vice versa)",
        "@name":"upVector",
        "@type":"SFVec3f",
        "@value":"[0, 1, 0]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Focal length divided effective aperture diameter indicating width of focal plane",
        "@name":"fStop",
        "@type":"SFFloat",
        "@value":"5.6"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Distance to focal plane of sharpest focus",
        "@name":"focusDistance",
        "@type":"SFFloat",
        "@value":"10"
      }
    },
                "field":
                {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Mark start/stop with true/false output respectively useful to trigger external animations",
        "@name":"isActive",
        "@type":"SFBool"
      }
    },
                "field":
                {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Total duration of contained enabled CameraShot (and thus CameraMovement) move durations",
        "@name":"totalDuration",
        "@type":"SFTime"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"OfflineRender node",
        "@name":"offlineRender",
        "@type":"SFNode"
      }
    },
                "field":
                {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"enable console output to trace script computations and prototype progress",
        "@name":"traceEnabled",
        "@type":"SFBool"
      }
    },
            }            "ProtoBody":
            {
                "Viewpoint":
                {
      {
        "@DEF":"CameraViewpoint"
      }
                    "IS":
                    {
                        "connect":
                        {
      {
        "@nodeField":"description",
        "@protoField":"description"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"position",
        "@protoField":"position"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"orientation",
        "@protoField":"orientation"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"fieldOfView",
        "@protoField":"fieldOfView"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"set_bind",
        "@protoField":"set_bind"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"bindTime",
        "@protoField":"bindTime"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"isBound",
        "@protoField":"isBound"
      }
    },
                    }                }                "NavigationInfo":
                {
      {
        "@DEF":"CameraNavInfo",
        "@type":""EXAMINE" "FLY" "ANY""
      }
                    "IS":
                    {
                        "connect":
                        {
      {
        "@nodeField":"set_bind",
        "@protoField":"set_bind"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"headlight",
        "@protoField":"headlight"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"visibilityLimit",
        "@protoField":"farClipPlane"
      }
    },
                    }                }                "DirectionalLight":
                {
      {
        "@DEF":"CameraDirectionalLight",
        "@global":"true"
      }
                    "IS":
                    {
                        "connect":
                        {
      {
        "@nodeField":"on",
        "@protoField":"headlight"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"color",
        "@protoField":"headlightColor"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"intensity",
        "@protoField":"headlightIntensity"
      }
    },
                    }                }                "PositionInterpolator":
                {
      {
        "@DEF":"CameraPositionInterpolator",
        "@key":"0 1"
      }
                    "IS":
                    {
                        "connect":
                        {
      {
        "@nodeField":"set_fraction",
        "@protoField":"set_fraction"
      }
    },
                    }                }                "OrientationInterpolator":
                {
      {
        "@DEF":"CameraOrientationInterpolator",
        "@key":"0 1"
      }
                    "IS":
                    {
                        "connect":
                        {
      {
        "@nodeField":"set_fraction",
        "@protoField":"set_fraction"
      }
    },
                    }                }                "ROUTE":
                {
      {
        "@fromField":"value_changed",
        "@fromNode":"CameraPositionInterpolator",
        "@toField":"position",
        "@toNode":"CameraViewpoint"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"value_changed",
        "@fromNode":"CameraOrientationInterpolator",
        "@toField":"orientation",
        "@toNode":"CameraViewpoint"
      }
    },
                "Script":
                {
      {
        "@DEF":"CameraScript",
        "@directOutput":"true",
        "@mustEvaluate":"true",
        "@sourceCode":"ecmascript:
&quot;+
&quot;function initialize () // CameraScript
&quot;+
&quot;{
&quot;+
&quot;//  tracePrint ('initialize start...');
&quot;+
&quot;
&quot;+
&quot;    NavInfoNode.avatarSize[0]   = nearClipPlane;
&quot;+
&quot;
&quot;+
&quot;    // remaining setups deferred to invocation of checkShots() method
&quot;+
&quot;    // thanks to Yvonne Jung Fraunhofer for diagnosing better approach to function initialization
&quot;+
&quot;    alwaysPrint ('initialize complete');
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function checkShots (eventValue)
&quot;+
&quot;{
&quot;+
&quot;    tracePrint ('checkShots() method should only occur after initialize() methods in all other Scripts are complete');
&quot;+
&quot;
&quot;+
&quot;    // compute totalDuration by summing durations from contained CameraShot and CameraMovement nodes
&quot;+
&quot;    totalDuration= 0;
&quot;+
&quot;    shotCount  = shots.length;
&quot;+
&quot;    movesCount = 0;
&quot;+
&quot;    for (i = 0; i < shotCount; i++) // shots index
&quot;+
&quot;    {
&quot;+
&quot;       tracePrint ('shots[' + i + '].moves.length=' + shots[i].moves.length);
&quot;+
&quot;       movesCount   += shots[i].moves.length;
&quot;+
&quot;       totalDuration = totalDuration + shots[i].shotDuration;
&quot;+
&quot;       if (shots[i].moves.length == 0)
&quot;+
&quot;       {
&quot;+
&quot;          alwaysPrint ('warning: CameraShot[' + i + '][' + shots[i].description + '] has no contained CameraMove nodes');
&quot;+
&quot;       }
&quot;+
&quot;    }
&quot;+
&quot;    // size checks before proceeding
&quot;+
&quot;    if (shotCount == 0)
&quot;+
&quot;    {
&quot;+
&quot;       alwaysPrint ('warning: no CameraShot nodes found for the shots, nothing to do!');
&quot;+
&quot;       return;
&quot;+
&quot;    }
&quot;+
&quot;    else if (movesCount == 0)
&quot;+
&quot;    {
&quot;+
&quot;       alwaysPrint ('warning: no CameraMove nodes found for the shots, nothing to do!');
&quot;+
&quot;       return;
&quot;+
&quot;    }
&quot;+
&quot;    else if (totalDuration == 0)
&quot;+
&quot;    {
&quot;+
&quot;       alwaysPrint ('warning: totalDuration = 0 seconds, nothing to do!');
&quot;+
&quot;       return;
&quot;+
&quot;    }
&quot;+
&quot;    tracePrint ('number of contained CameraShot nodes=' + shotCount);
&quot;+
&quot;    tracePrint ('number of contained CameraMove nodes=' + movesCount);
&quot;+
&quot;    tracePrint ('totalDuration=' + totalDuration + ' seconds for all shots and moves');
&quot;+
&quot;
&quot;+
&quot;    // compute interpolators
&quot;+
&quot;    var k = 0; // index for latest key, keyValuePosition, keyValueOrientation
&quot;+
&quot;    for (i = 0; i < shotCount; i++) // shots index
&quot;+
&quot;    {
&quot;+
&quot;        if (i==0) // initial entries
&quot;+
&quot;        {
&quot;+
&quot;           key[0]                   = 0.0; // no previous move
&quot;+
&quot;           keyValuePosition[0]      = shots[i].initialPosition;
&quot;+
&quot;           keyValueOrientation[0]   = shots[i].initialOrientation;
&quot;+
&quot;        }
&quot;+
&quot;        else     // new shot repositions, reorients camera as clean break from preceding shot/move
&quot;+
&quot;        {
&quot;+
&quot;           key[k+1]                 = key[k]; // start from end from previous move
&quot;+
&quot;           keyValuePosition[k+1]    = shots[i].initialPosition;
&quot;+
&quot;           keyValueOrientation[k+1] = shots[i].initialOrientation;
&quot;+
&quot;           k++;
&quot;+
&quot;        }
&quot;+
&quot;        tracePrint (shots[i].description);
&quot;+
&quot;        tracePrint ('shots[i].moves.length=' + shots[i].moves.length);
&quot;+
&quot;
&quot;+
&quot;        for (j = 0; j < shots[i].moves.length; j++) // moves index
&quot;+
&quot;        {
&quot;+
&quot;            var durationFloat =              shots[i].moves[j].duration;  // implicit type conversion from SFTime
&quot;+
&quot;            //  durationFloat = new SFFloat (shots[i].moves[j].duration); // explicit type conversion from SFTime
&quot;+
&quot;            //  tracePrint ('durationFloat=' + durationFloat);
&quot;+
&quot;            key[k+1]               = key[k] + (durationFloat / totalDuration);
&quot;+
&quot;            keyValuePosition[k+1]  = shots[i].moves[j].goalPosition;
&quot;+
&quot;            if (!animated)
&quot;+
&quot;            {
&quot;+
&quot;                 keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;
&quot;+
&quot;            }
&quot;+
&quot;            else
&quot;+
&quot;            {
&quot;+
&quot;                // using constructor SFRotation (SFVec3f fromVector, SFVec3f toVector)
&quot;+
&quot;                // see X3D ECMAScript binding Table 7.18 — SFRotation instance creation functions
&quot;+
&quot;
&quot;+
&quot;                // test if difference vector is zero, if so maintain previous rotation
&quot;+
&quot;                var shotVector = ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize();
&quot;+
&quot;                if (shotVector.length() >= 0)
&quot;+
&quot;                {
&quot;+
&quot;                    // default view direction is along -Z axis
&quot;+
&quot;                    shots[i].moves[j].goalOrientation = new SFRotation (new SFVec3f (0, 0, 1), shotVector);
&quot;+
&quot;                    keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;
&quot;+
&quot;                }
&quot;+
&quot;                else // note (k > 0)
&quot;+
&quot;                {
&quot;+
&quot;                    keyValueOrientation[k+1] = keyValueOrientation[k];  // no change
&quot;+
&quot;                }
&quot;+
&quot;
&quot;+
&quot;                tracePrint ('shots[' + i + '].moves[' + j + '].goalAimPoint=' + shots[i].moves[j].goalAimPoint.toString());
&quot;+
&quot;                tracePrint ('        ViewpointNode.position=' + ViewpointNode.position.toString());
&quot;+
&quot;                tracePrint ('          shotVector     delta=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).toString());
&quot;+
&quot;                tracePrint ('          shotVector normalize=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize().toString());
&quot;+
&quot;                tracePrint ('               goalOrientation=' + shots[i].moves[j].goalOrientation.toString());
&quot;+
&quot;                tracePrint ('      keyValueOrientation[k+1]=' + keyValueOrientation[k+1].toString() + '\n');
&quot;+
&quot;            }
&quot;+
&quot;            k++; // update index to match latest key, keyValuePosition, keyValueOrientation
&quot;+
&quot;
&quot;+
&quot;            // check animated parameter:  set true if any of moves are tracking moves
&quot;+
&quot;            if (!animated)  animated = shots[i].moves[j].tracking; // once true, remains true
&quot;+
&quot;         // tracePrint ('shots[' + i + '].moves[' + j + '].tracking=' + shots[i].moves[j].tracking + ', animated=' + animated);
&quot;+
&quot;
&quot;+
&quot;            // intermediate trace
&quot;+
&quot;            tracePrint ('                key=' + key);
&quot;+
&quot;            tracePrint ('   keyValuePosition=' + keyValuePosition);
&quot;+
&quot;            tracePrint ('keyValueOrientation=' + keyValueOrientation);
&quot;+
&quot;            tracePrint ('- ' + shots[i].moves[j].description);
&quot;+
&quot;        }
&quot;+
&quot;    }
&quot;+
&quot;    tracePrint ('                key=' + key);
&quot;+
&quot;    tracePrint ('   keyValuePosition=' + keyValuePosition);
&quot;+
&quot;    tracePrint ('keyValueOrientation=' + keyValueOrientation);
&quot;+
&quot;    if (key.length != keyValuePosition.length)
&quot;+
&quot;    {
&quot;+
&quot;      alwaysPrint ('warning: internal error during array construction, ' +
&quot;+
&quot;                  'key.length=' + key.length + ' must equal ' +
&quot;+
&quot;                  'keyValuePosition.length=' + keyValuePosition.length);
&quot;+
&quot;    }
&quot;+
&quot;    if (key.length != keyValueOrientation.length)
&quot;+
&quot;    {
&quot;+
&quot;      alwaysPrint ('warning: internal error during array construction, ' +
&quot;+
&quot;                  'key.length=' + key.length + ' must equal ' +
&quot;+
&quot;                  'keyValueOrientation.length=' + keyValueOrientation.length);
&quot;+
&quot;    }
&quot;+
&quot;    if (key.length != (shotCount + movesCount))
&quot;+
&quot;    {
&quot;+
&quot;      alwaysPrint ('warning: internal error during array construction, ' +
&quot;+
&quot;                  'key.length=' + key.length + ' must equal ' +
&quot;+
&quot;                  '(shotCount + movesCount)=' + (shotCount + movesCount));
&quot;+
&quot;    }
&quot;+
&quot;    tracePrint ('           animated=' + animated);
&quot;+
&quot;    // set node values
&quot;+
&quot;    CameraPI.key      = key;
&quot;+
&quot;    CameraOI.key      = key;
&quot;+
&quot;    CameraPI.keyValue = keyValuePosition;
&quot;+
&quot;    CameraOI.keyValue = keyValueOrientation;
&quot;+
&quot;
&quot;+
&quot;    if (!animated) // output results
&quot;+
&quot;    {
&quot;+
&quot;        tracePrint ('<PositionInterpolator    DEF=\'CameraPositionInterpolator\'    key=\'' + stripBrackets(CameraPI.key) + '\' keyValue=\'' + stripBrackets(CameraPI.keyValue) + '\'/>');
&quot;+
&quot;        tracePrint ('<OrientationInterpolator DEF=\'CameraOrientationInterpolator\' key=\'' + stripBrackets(CameraOI.key) + '\' keyValue=\'' + stripBrackets(CameraOI.keyValue) + '\'/>');
&quot;+
&quot;    }
&quot;+
&quot;    tracePrint ('checkShots() complete');
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function stripBrackets (fieldArray)
&quot;+
&quot;{
&quot;+
&quot;    // some browsers add brackets to array output strings, this function strips them
&quot;+
&quot;    outputString = '';
&quot;+
&quot;    for (i = 0; i < fieldArray.length; i++)
&quot;+
&quot;    {
&quot;+
&quot;       outputString += fieldArray[i].toString();
&quot;+
&quot;       if (i < fieldArray.length - 1) outputString += ' ';
&quot;+
&quot;    }
&quot;+
&quot;    return outputString;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_fraction (eventValue, timestamp) // input event received for inputOnly field
&quot;+
&quot;{
&quot;+
&quot;   // traceEnabled = false;  // for testing purposes
&quot;+
&quot;
&quot;+
&quot;   // if Camera is being animated, immediately recompute interpolator settings
&quot;+
&quot;   if (animated) checkShots (true);
&quot;+
&quot;
&quot;+
&quot;   // trace progress on console with reduced output frequency
&quot;+
&quot;   if (frameCount == 0)
&quot;+
&quot;   {
&quot;+
&quot;      alwaysPrint ('Animation loop commencing, timestamp=' + timestamp);
&quot;+
&quot;      startTime      = timestamp;
&quot;+
&quot;      priorTraceTime = timestamp;
&quot;+
&quot;      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());
&quot;+
&quot;
&quot;+
&quot;      if (animated) // output results
&quot;+
&quot;      {
&quot;+
&quot;        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());
&quot;+
&quot;        tracePrint ('  <PositionInterpolator    DEF=\'CameraPositionInterpolator\'    key=\'' + stripBrackets(CameraPI.key) + '\' keyValue=\'' + stripBrackets(CameraPI.keyValue) + '\'/>');
&quot;+
&quot;        tracePrint ('  <OrientationInterpolator DEF=\'CameraOrientationInterpolator\' key=\'' + stripBrackets(CameraOI.key) + '\' keyValue=\'' + stripBrackets(CameraOI.keyValue) + '\'/>');
&quot;+
&quot;      }
&quot;+
&quot;   }
&quot;+
&quot;   else if ((timestamp - priorTraceTime) >= 1.0) // 1 second trace interval
&quot;+
&quot;   {
&quot;+
&quot;      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());
&quot;+
&quot;      priorTraceTime = timestamp;
&quot;+
&quot;
&quot;+
&quot;      if (animated) // output results
&quot;+
&quot;      {
&quot;+
&quot;        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());
&quot;+
&quot;        tracePrint ('  <PositionInterpolator    DEF=\'CameraPositionInterpolator\'    key=\'' + stripBrackets(CameraPI.key) + '\' keyValue=\'' + stripBrackets(CameraPI.keyValue) + '\'/>');
&quot;+
&quot;        alwaysPrint ('  <OrientationInterpolator DEF=\'CameraOrientationInterpolator\' key=\'' + stripBrackets(CameraOI.key) + '\' keyValue=\'' + stripBrackets(CameraOI.keyValue) + '\'/>');
&quot;+
&quot;      }
&quot;+
&quot;   }
&quot;+
&quot;   if (eventValue == 0)
&quot;+
&quot;   {
&quot;+
&quot;      // note that zero value is not necessarily sent first by TimeSensor, so otherwise ignored
&quot;+
&quot;      frameCount++;
&quot;+
&quot;   }
&quot;+
&quot;   else if (eventValue == 1)
&quot;+
&quot;   {
&quot;+
&quot;      alwaysPrint ('shotClock=' + (timestamp - startTime) + ', frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());
&quot;+
&quot;      if (animated) // output results
&quot;+
&quot;      {
&quot;+
&quot;        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());
&quot;+
&quot;      }
&quot;+
&quot;      alwaysPrint ('Animation loop complete.');
&quot;+
&quot;      // do not unbind the Viewpoint and NavigationInfo nodes, let that be controlled externally
&quot;+
&quot;   }
&quot;+
&quot;   else
&quot;+
&quot;   {
&quot;+
&quot;      frameCount++;
&quot;+
&quot;   }
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_bind (eventValue) // input event received for inputOnly field
&quot;+
&quot;{
&quot;+
&quot;   // need to ensure CameraShot nodes are properly initialized
&quot;+
&quot;   if (initialized == false)
&quot;+
&quot;   {
&quot;+
&quot;      checkShots (true);
&quot;+
&quot;      initialized = true;
&quot;+
&quot;   }
&quot;+
&quot;   if (eventValue)
&quot;+
&quot;   {
&quot;+
&quot;       tracePrint ('Camera has been bound');
&quot;+
&quot;   }
&quot;+
&quot;   else
&quot;+
&quot;   {
&quot;+
&quot;       tracePrint ('Camera has been unbound');
&quot;+
&quot;   }
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_description (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    description = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_position (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    position = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_orientation (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    orientation = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_fieldOfView (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    fieldOfView = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_nearClipPlane (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    nearClipPlane = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_farClipPlane (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    farClipPlane = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_shots (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    shots = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_filterColor (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    filterColor = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_filterTransparency (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    filterTransparency = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_upVector (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    upVector = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_fStop (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    fStop = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_focusDistance (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    focusDistance = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_offlineRender (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    offlineRender = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_key (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    key = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_keyValuePosition (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    keyValuePosition = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_keyValueOrientation (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    keyValueOrientation = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_animated (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    animated = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function tracePrint (outputValue)
&quot;+
&quot;{
&quot;+
&quot;	if (traceEnabled) alwaysPrint (outputValue);
&quot;+
&quot;}
&quot;+
&quot;function alwaysPrint (outputValue)
&quot;+
&quot;{
&quot;+
&quot;    // try to ensure outputValue is converted to string despite Browser.println idiosyncracies
&quot;+
&quot;    var outputString = outputValue.toString(); // utility function according to spec
&quot;+
&quot;    if (outputString == null) outputString = outputValue; // direct cast
&quot;+
&quot;
&quot;+
&quot;    if  (description.length > 0)
&quot;+
&quot;         Browser.print ('[Camera: ' + description + '] ' + outputString + '\n');
&quot;+
&quot;    else
&quot;+
&quot;         Browser.print ('[Camera] ' + outputString + '\n');
&quot;+
&quot;}"
      }
                    "IS":
                    {
                        "connect":
                        {
      {
        "@nodeField":"description",
        "@protoField":"description"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"position",
        "@protoField":"position"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"orientation",
        "@protoField":"orientation"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"set_fraction",
        "@protoField":"set_fraction"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"set_bind",
        "@protoField":"set_bind"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"fieldOfView",
        "@protoField":"fieldOfView"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"nearClipPlane",
        "@protoField":"nearClipPlane"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"farClipPlane",
        "@protoField":"farClipPlane"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"shots",
        "@protoField":"shots"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"filterColor",
        "@protoField":"filterColor"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"filterTransparency",
        "@protoField":"filterTransparency"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"upVector",
        "@protoField":"upVector"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"fStop",
        "@protoField":"fStop"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"focusDistance",
        "@protoField":"focusDistance"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"isActive",
        "@protoField":"isActive"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"totalDuration",
        "@protoField":"totalDuration"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"offlineRender",
        "@protoField":"offlineRender"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"traceEnabled",
        "@protoField":"traceEnabled"
      }
    },
                    }                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Text description to be displayed for this Camera",
        "@name":"description",
        "@type":"SFString"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera position in local transformation frame",
        "@name":"position",
        "@type":"SFVec3f"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera rotation in local transformation frame",
        "@name":"orientation",
        "@type":"SFRotation"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOnly",
        "@appinfo":"input fraction drives interpolators",
        "@name":"set_fraction",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOnly",
        "@appinfo":"input event binds or unbinds this Camera",
        "@name":"set_bind",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"pi/4",
        "@name":"fieldOfView",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Vector distance to near clipping plane",
        "@name":"nearClipPlane",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Vector distance to far clipping plane",
        "@name":"farClipPlane",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Array of CameraShot nodes which in turn contain CameraMovement nodes",
        "@name":"shots",
        "@type":"MFNode"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera filter color that modifies virtual lens capture",
        "@name":"filterColor",
        "@type":"SFColor"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Camera filter transparency that modifies virtual lens capture",
        "@name":"filterTransparency",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"upVector changes modify camera orientation (and possibly vice versa)",
        "@name":"upVector",
        "@type":"SFVec3f"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Focal length divided effective aperture diameter indicating width of focal plane",
        "@name":"fStop",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Distance to focal plane of sharpest focus",
        "@name":"focusDistance",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Mark start/stop with true/false output respectively useful to trigger external animations",
        "@name":"isActive",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Total duration of contained enabled CameraShot (and thus CameraMovement) move durations",
        "@name":"totalDuration",
        "@type":"SFTime"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"OfflineRender node",
        "@name":"offlineRender",
        "@type":"SFNode"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"node reference to permit getting setting fields from within Script",
        "@name":"ViewpointNode",
        "@type":"SFNode"
      }
                        "Viewpoint":
                        {
      {
        "@USE":"CameraViewpoint"
      }
    },
                    }                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"node reference to permit getting setting fields from within Script",
        "@name":"NavInfoNode",
        "@type":"SFNode"
      }
                        "NavigationInfo":
                        {
      {
        "@USE":"CameraNavInfo"
      }
    },
                    }                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"node reference to permit getting setting fields from within Script",
        "@name":"CameraPI",
        "@type":"SFNode"
      }
                        "PositionInterpolator":
                        {
      {
        "@USE":"CameraPositionInterpolator"
      }
    },
                    }                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"node reference to permit getting setting fields from within Script",
        "@name":"CameraOI",
        "@type":"SFNode"
      }
                        "OrientationInterpolator":
                        {
      {
        "@USE":"CameraOrientationInterpolator"
      }
    },
                    }                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"key array for interpolators",
        "@name":"key",
        "@type":"MFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"keyValue array for PositionInterpolator",
        "@name":"keyValuePosition",
        "@type":"MFVec3f"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"keyValue array for OrientationInterpolator",
        "@name":"keyValueOrientation",
        "@type":"MFRotation"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"whether internal CameraShot and CameraMove nodes are tracking or changed via ROUTE events",
        "@name":"animated",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"perform checkShots() function once immediately after initialization",
        "@name":"initialized",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"how many CameraShot nodes are contained in shots array",
        "@name":"shotCount",
        "@type":"SFInt32"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"how many CameraMove nodes are contained in moves array",
        "@name":"movesCount",
        "@type":"SFInt32"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"how many frames were created in current loop",
        "@name":"frameCount",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"holding variable",
        "@name":"startTime",
        "@type":"SFTime"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"holding variable",
        "@name":"priorTraceTime",
        "@type":"SFTime"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"enable console output to trace script computations and prototype progress",
        "@name":"traceEnabled",
        "@type":"SFBool"
      }
    },
                }                "ROUTE":
                {
      {
        "@fromField":"position",
        "@fromNode":"CameraScript",
        "@toField":"position",
        "@toNode":"CameraViewpoint"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"orientation",
        "@fromNode":"CameraScript",
        "@toField":"orientation",
        "@toNode":"CameraViewpoint"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"isActive",
        "@fromNode":"CameraScript",
        "@toField":"set_bind",
        "@toNode":"CameraViewpoint"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"isActive",
        "@fromNode":"CameraScript",
        "@toField":"set_bind",
        "@toNode":"CameraNavInfo"
      }
    },
                "ROUTE":
                {
      {
        "@fromField":"isActive",
        "@fromNode":"CameraScript",
        "@toField":"on",
        "@toNode":"CameraDirectionalLight"
      }
    },
            }        }        "ProtoDeclare":
        {
      {
        "@appinfo":"CameraShot collects a specific set of CameraMovement animations that make up an individual shot.",
        "@name":"CameraShot"
      }
            "ProtoInterface":
            {
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Text description to be displayed for this CameraShot",
        "@name":"description",
        "@type":"SFString"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Whether this CameraShot can be activated",
        "@name":"enabled",
        "@type":"SFBool",
        "@value":"True"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Set of CameraMovement nodes",
        "@name":"moves",
        "@type":"MFNode"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Setup to reinitialize camera position for this shot",
        "@name":"initialPosition",
        "@type":"SFVec3f",
        "@value":"[0, 0, 10]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Setup to reinitialize camera rotation for this shot",
        "@name":"initialOrientation",
        "@type":"SFRotation",
        "@value":"[0, 0, 1, 0]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
        "@name":"initialAimPoint",
        "@type":"SFVec3f",
        "@value":"[0, 0, 0]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"pi/4",
        "@name":"initialFieldOfView",
        "@type":"SFFloat",
        "@value":"0.7854"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Focal length divided effective aperture diameter indicating width of focal plane",
        "@name":"initialFStop",
        "@type":"SFFloat",
        "@value":"5.6"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Distance to focal plane of sharpest focus",
        "@name":"initialFocusDistance",
        "@type":"SFFloat",
        "@value":"10"
      }
    },
                "field":
                {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Subtotal duration of contained CameraMovement move durations",
        "@name":"shotDuration",
        "@type":"SFTime"
      }
    },
                "field":
                {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Mark start/stop with true/false output respectively useful to trigger external animations",
        "@name":"isActive",
        "@type":"SFBool"
      }
    },
                "field":
                {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"enable console output to trace script computations and prototype progress",
        "@name":"traceEnabled",
        "@type":"SFBool"
      }
    },
            }            "ProtoBody":
            {
                "Script":
                {
      {
        "@DEF":"CameraShotScript",
        "@directOutput":"true",
        "@mustEvaluate":"true",
        "@sourceCode":"ecmascript:
&quot;+
&quot;function initialize () // CameraShotScript
&quot;+
&quot;{
&quot;+
&quot;//  tracePrint ('initialize start...');
&quot;+
&quot;
&quot;+
&quot;    // compute shotDuration by summing durations from contained CameraMovement nodes
&quot;+
&quot;    shotDuration = 0;
&quot;+
&quot;    for (i = 0; i < moves.length; i++)
&quot;+
&quot;    {
&quot;+
&quot;        shotDuration = shotDuration + moves[i].duration;
&quot;+
&quot;    }
&quot;+
&quot;    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');
&quot;+
&quot;
&quot;+
&quot;//  tracePrint ('... initialize() complete');
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_description (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    description = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_enabled (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    enabled = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_moves (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    moves = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_initialPosition (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    initialPosition = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_initialOrientation (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    initialOrientation = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_initialAimPoint (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    initialAimPoint = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_initialFieldOfView (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    initialFieldOfView = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_initialFStop (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    initialFStop = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_initialFocusDistance (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    initialFocusDistance = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_key (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    key = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_keyValuePosition (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    keyValuePosition = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_keyValueOrientation (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    keyValueOrientation = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive
&quot;+
&quot;
&quot;+
&quot;function tracePrint (outputValue)
&quot;+
&quot;{
&quot;+
&quot;	if (traceEnabled) alwaysPrint (outputValue);
&quot;+
&quot;}
&quot;+
&quot;function alwaysPrint (outputValue)
&quot;+
&quot;{
&quot;+
&quot;	// try to ensure outputValue is converted to string despite browser idiosyncracies
&quot;+
&quot;    var outputString = outputValue.toString(); // utility function according to spec
&quot;+
&quot;    if (outputString == null) outputString = outputValue; // direct cast
&quot;+
&quot;
&quot;+
&quot;    if  (description.length > 0)
&quot;+
&quot;         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\n');
&quot;+
&quot;    else
&quot;+
&quot;         Browser.print ('[CameraShot] ' + outputString + '\n');
&quot;+
&quot;}"
      }
                    "IS":
                    {
                        "connect":
                        {
      {
        "@nodeField":"description",
        "@protoField":"description"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"enabled",
        "@protoField":"enabled"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"moves",
        "@protoField":"moves"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"initialPosition",
        "@protoField":"initialPosition"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"initialOrientation",
        "@protoField":"initialOrientation"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"initialAimPoint",
        "@protoField":"initialAimPoint"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"initialFieldOfView",
        "@protoField":"initialFieldOfView"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"initialFStop",
        "@protoField":"initialFStop"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"initialFocusDistance",
        "@protoField":"initialFocusDistance"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"shotDuration",
        "@protoField":"shotDuration"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"isActive",
        "@protoField":"isActive"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"traceEnabled",
        "@protoField":"traceEnabled"
      }
    },
                    }                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Text description to be displayed for this CameraShot",
        "@name":"description",
        "@type":"SFString"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Whether this CameraShot can be activated",
        "@name":"enabled",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Set of CameraMovement nodes",
        "@name":"moves",
        "@type":"MFNode"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Setup to reinitialize camera position for this shot",
        "@name":"initialPosition",
        "@type":"SFVec3f"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Setup to reinitialize camera rotation for this shot",
        "@name":"initialOrientation",
        "@type":"SFRotation"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
        "@name":"initialAimPoint",
        "@type":"SFVec3f"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"pi/4",
        "@name":"initialFieldOfView",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Focal length divided effective aperture diameter indicating width of focal plane",
        "@name":"initialFStop",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Distance to focal plane of sharpest focus",
        "@name":"initialFocusDistance",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Subtotal duration of contained CameraMovement move durations",
        "@name":"shotDuration",
        "@type":"SFTime"
      }
    },
                    "field":
                    {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Mark start/stop with true/false output respectively useful to trigger external animations",
        "@name":"isActive",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"enable console output to trace script computations and prototype progress",
        "@name":"traceEnabled",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"key array for interpolators",
        "@name":"key",
        "@type":"MFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"keyValue array for PositionInterpolator",
        "@name":"keyValuePosition",
        "@type":"MFVec3f"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"keyValue array for OrientationInterpolator",
        "@name":"keyValueOrientation",
        "@type":"MFRotation"
      }
    },
                }            }        }        "ProtoDeclare":
        {
      {
        "@appinfo":"CameraMovement node defines a single camera movement animation including goalPosition, goalOrientation, goalAimPoint and goalFieldOfView.",
        "@name":"CameraMovement"
      }
            "ProtoInterface":
            {
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Text description to be displayed for this CameraMovement",
        "@name":"description",
        "@type":"SFString"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Whether this CameraMovement can be activated",
        "@name":"enabled",
        "@type":"SFBool",
        "@value":"True"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Duration in seconds for this move",
        "@name":"duration",
        "@type":"SFFloat"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Goal camera position for this move",
        "@name":"goalPosition",
        "@type":"SFVec3f",
        "@value":"[0, 0, 10]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Goal camera rotation for this move",
        "@name":"goalOrientation",
        "@type":"SFRotation",
        "@value":"[0, 0, 1, 0]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Whether or not camera direction is tracking towards the aimPoint",
        "@name":"tracking",
        "@type":"SFBool"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Goal aimPoint for this move, ignored if tracking=false",
        "@name":"goalAimPoint",
        "@type":"SFVec3f",
        "@value":"[0, 0, 0]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Goal fieldOfView for this move",
        "@name":"goalFieldOfView",
        "@type":"SFFloat",
        "@value":"0.7854"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Focal length divided effective aperture diameter indicating width of focal plane",
        "@name":"goalFStop",
        "@type":"SFFloat",
        "@value":"5.6"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Distance to focal plane of sharpest focus",
        "@name":"goalFocusDistance",
        "@type":"SFFloat",
        "@value":"10"
      }
    },
                "field":
                {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Mark start/stop with true/false output respectively useful to trigger external animations",
        "@name":"isActive",
        "@type":"SFBool"
      }
    },
                "field":
                {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"enable console output to trace script computations and prototype progress",
        "@name":"traceEnabled",
        "@type":"SFBool"
      }
    },
            }            "ProtoBody":
            {
                "Script":
                {
      {
        "@DEF":"CameraMovementScript",
        "@directOutput":"true",
        "@mustEvaluate":"true",
        "@sourceCode":"ecmascript:
&quot;+
&quot;function initialize () // CameraMovementScript
&quot;+
&quot;{
&quot;+
&quot;//  tracePrint ('initialize start...');
&quot;+
&quot;    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +
&quot;+
&quot;                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()
&quot;+
&quot;                           );
&quot;+
&quot;    if (duration < 0)
&quot;+
&quot;    {
&quot;+
&quot;       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');
&quot;+
&quot;       duration = 0;
&quot;+
&quot;    }
&quot;+
&quot;    else if (duration == 0)
&quot;+
&quot;    {
&quot;+
&quot;       alwaysPrint ('warning: duration=0, nothing to do!');
&quot;+
&quot;    }
&quot;+
&quot;    tracePrint ('... initialize complete');
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_goalAimPoint (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    goalAimPoint_changed = eventValue;
&quot;+
&quot;    tracePrint ('goalAimPoint=' + goalAimPoint.toString());
&quot;+
&quot;
&quot;+
&quot;    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_description (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    description = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_enabled (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    enabled = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_duration (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    duration = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_goalPosition (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    goalPosition = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_goalOrientation (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    goalOrientation = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_tracking (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    tracking = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_goalFieldOfView (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    goalFieldOfView = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_goalFStop (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    goalFStop = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_goalFocusDistance (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    goalFocusDistance = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive
&quot;+
&quot;
&quot;+
&quot;function tracePrint (outputValue)
&quot;+
&quot;{
&quot;+
&quot;	if (traceEnabled) alwaysPrint (outputValue);
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function alwaysPrint (outputValue)
&quot;+
&quot;{
&quot;+
&quot;	// try to ensure outputValue is converted to string despite browser idiosyncracies
&quot;+
&quot;    var outputString = outputValue.toString(); // utility function according to spec
&quot;+
&quot;    if (outputString == null) outputString = outputValue; // direct cast
&quot;+
&quot;
&quot;+
&quot;    if  (description.length > 0)
&quot;+
&quot;         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');
&quot;+
&quot;    else
&quot;+
&quot;         Browser.print ('[CameraMovement] ' + outputString + '\n');
&quot;+
&quot;}"
      }
                    "IS":
                    {
                        "connect":
                        {
      {
        "@nodeField":"description",
        "@protoField":"description"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"enabled",
        "@protoField":"enabled"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"duration",
        "@protoField":"duration"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"goalPosition",
        "@protoField":"goalPosition"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"goalOrientation",
        "@protoField":"goalOrientation"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"tracking",
        "@protoField":"tracking"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"goalAimPoint",
        "@protoField":"goalAimPoint"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"goalFieldOfView",
        "@protoField":"goalFieldOfView"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"goalFStop",
        "@protoField":"goalFStop"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"goalFocusDistance",
        "@protoField":"goalFocusDistance"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"isActive",
        "@protoField":"isActive"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"traceEnabled",
        "@protoField":"traceEnabled"
      }
    },
                    }                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Text description to be displayed for this CameraMovement",
        "@name":"description",
        "@type":"SFString"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Whether this CameraMovement can be activated",
        "@name":"enabled",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Duration in seconds for this move",
        "@name":"duration",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Goal camera position for this move",
        "@name":"goalPosition",
        "@type":"SFVec3f"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Goal camera rotation for this move",
        "@name":"goalOrientation",
        "@type":"SFRotation"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Whether or not camera direction is tracking towards the aimPoint",
        "@name":"tracking",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Goal aimPoint for this move, ignored if tracking=false",
        "@name":"goalAimPoint",
        "@type":"SFVec3f"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Goal fieldOfView for this move",
        "@name":"goalFieldOfView",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Focal length divided effective aperture diameter indicating width of focal plane",
        "@name":"goalFStop",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Distance to focal plane of sharpest focus",
        "@name":"goalFocusDistance",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Mark start/stop with true/false output respectively useful to trigger external animations",
        "@name":"isActive",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"enable console output to trace script computations and prototype progress",
        "@name":"traceEnabled",
        "@type":"SFBool"
      }
    },
                }            }        }        "ProtoDeclare":
        {
      {
        "@appinfo":"OfflineRender defines a parameters for offline rendering of Camera animation output to a movie file (or possibly a still shot).",
        "@name":"OfflineRender"
      }
            "ProtoInterface":
            {
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Text description to be displayed for this OfflineRender",
        "@name":"description",
        "@type":"SFString"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Whether this OfflineRender can be activated",
        "@name":"enabled",
        "@type":"SFBool",
        "@value":"True"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Frames per second recorded for this rendering",
        "@name":"frameRate",
        "@type":"SFFloat",
        "@value":"30"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Size of frame in number of pixels width and height",
        "@name":"frameSize",
        "@type":"SFVec2f",
        "@value":"[640, 480]"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Relative dimensions of pixel height/width typically 1.33 or 1",
        "@name":"pixelAspectRatio",
        "@type":"SFFloat",
        "@value":"1.33"
      }
    },
                "field":
                {
      {
        "@accessType":"inputOnly",
        "@appinfo":"Begin render operation",
        "@name":"set_startTime",
        "@type":"SFTime"
      }
    },
                "field":
                {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Progress performing render operation (0..1)",
        "@name":"progress",
        "@type":"SFFloat"
      }
    },
                "field":
                {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Render operation complete",
        "@name":"renderCompleteTime",
        "@type":"SFTime"
      }
    },
                "field":
                {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"Format of rendered output movie (mpeg mp4 etc.), use first supported format",
        "@name":"movieFormat",
        "@type":"MFString",
        "@value":"['mpeg']"
      }
    },
                "field":
                {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"Format of rendered output images (png jpeg gif tiff etc.) use first supported format",
        "@name":"imageFormat",
        "@type":"MFString",
        "@value":"['png']"
      }
    },
                "field":
                {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"enable console output to trace script computations and prototype progress",
        "@name":"traceEnabled",
        "@type":"SFBool"
      }
    },
            }            "ProtoBody":
            {
                "Script":
                {
      {
        "@DEF":"OfflineRenderScript",
        "@mustEvaluate":"true",
        "@sourceCode":"ecmascript:
&quot;+
&quot;function initialize () // OfflineRenderScript
&quot;+
&quot;{
&quot;+
&quot;//  tracePrint ('initialize start...');
&quot;+
&quot;
&quot;+
&quot;    tracePrint ('... initialize complete');
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_description (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    description = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_enabled (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    enabled = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_frameRate (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    frameRate = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_frameSize (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    frameSize = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_pixelAspectRatio (eventValue) // input event received for inputOutput field
&quot;+
&quot;{
&quot;+
&quot;    pixelAspectRatio = eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function set_startTime (eventValue) // input event received for inputOnly field
&quot;+
&quot;{
&quot;+
&quot;   // do something with input eventValue;
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function tracePrint (outputValue)
&quot;+
&quot;{
&quot;+
&quot;	if (traceEnabled) alwaysPrint (outputValue);
&quot;+
&quot;}
&quot;+
&quot;
&quot;+
&quot;function alwaysPrint (outputValue)
&quot;+
&quot;{
&quot;+
&quot;	// try to ensure outputValue is converted to string despite browser idiosyncracies
&quot;+
&quot;    var outputString = outputValue.toString(); // utility function according to spec
&quot;+
&quot;    if (outputString == null) outputString = outputValue; // direct cast
&quot;+
&quot;
&quot;+
&quot;    if  (description.length > 0)
&quot;+
&quot;         Browser.print ('[OfflineRender: ' + description + '] ' + outputString + '\n');
&quot;+
&quot;    else
&quot;+
&quot;         Browser.print ('[OfflineRender] ' + outputString + '\n');
&quot;+
&quot;}"
      }
                    "IS":
                    {
                        "connect":
                        {
      {
        "@nodeField":"description",
        "@protoField":"description"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"enabled",
        "@protoField":"enabled"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"frameRate",
        "@protoField":"frameRate"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"frameSize",
        "@protoField":"frameSize"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"pixelAspectRatio",
        "@protoField":"pixelAspectRatio"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"set_startTime",
        "@protoField":"set_startTime"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"progress",
        "@protoField":"progress"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"renderCompleteTime",
        "@protoField":"renderCompleteTime"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"movieFormat",
        "@protoField":"movieFormat"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"imageFormat",
        "@protoField":"imageFormat"
      }
    },
                        "connect":
                        {
      {
        "@nodeField":"traceEnabled",
        "@protoField":"traceEnabled"
      }
    },
                    }                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Text description to be displayed for this OfflineRender",
        "@name":"description",
        "@type":"SFString"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Whether this OfflineRender can be activated",
        "@name":"enabled",
        "@type":"SFBool"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Frames per second recorded for this rendering",
        "@name":"frameRate",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Size of frame in number of pixels width and height",
        "@name":"frameSize",
        "@type":"SFVec2f"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOutput",
        "@appinfo":"Relative dimensions of pixel height/width typically 1.33 or 1",
        "@name":"pixelAspectRatio",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"inputOnly",
        "@appinfo":"Begin render operation",
        "@name":"set_startTime",
        "@type":"SFTime"
      }
    },
                    "field":
                    {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Progress performing render operation (0..1)",
        "@name":"progress",
        "@type":"SFFloat"
      }
    },
                    "field":
                    {
      {
        "@accessType":"outputOnly",
        "@appinfo":"Render operation complete",
        "@name":"renderCompleteTime",
        "@type":"SFTime"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"Format of rendered output movie (mpeg mp4 etc.)",
        "@name":"movieFormat",
        "@type":"MFString"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"Format of rendered output images (png jpeg gif tiff etc.)",
        "@name":"imageFormat",
        "@type":"MFString"
      }
    },
                    "field":
                    {
      {
        "@accessType":"initializeOnly",
        "@appinfo":"enable console output to trace script computations and prototype progress",
        "@name":"traceEnabled",
        "@type":"SFBool"
      }
    },
                }            }        }        "Background":
        {
    },
        "Anchor":
        {
      {
        "@description":"launch CameraExample scene",
        "@url":""CameraExamples.x3d" "https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.x3d" "CameraExamples.wrl" "https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.wrl""
      }
            "Transform":
            {
                "Shape":
                {
                    "Appearance":
                    {
                        "Material":
                        {
      {
        "@diffuseColor":"1 1 0.2"
      }
    },
                    }                    "Text":
                    {
      {
        "@string":""CameraPrototypes.x3d" "defines multiple prototype nodes" "" "Click on this text to see" "CameraExamples.x3d scene""
      }
                        "FontStyle":
                        {
      {
        "@justify":""MIDDLE" "MIDDLE""
      }
    },
                    }                }            }        }    }}
