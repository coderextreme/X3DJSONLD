{
  "X3D": {
    "@profile": "Immersive",
    "@version": "3.0",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-3.0.xsd",
    "head": {
      "meta": [
        {
          "@content": "title",
          "@name": "flowers2.x3d"
        },
        {
          "@content": "John Carlson",
          "@name": "creator"
        },
        {
          "@content": "John Carlson",
          "@name": "transcriber"
        },
        {
          "@content": "23 January 2005",
          "@name": "created"
        },
        {
          "@content": "21 March 2018",
          "@name": "modified"
        },
        {
          "@content": "2 random mathematical roses in spherical dimensions. rho = a + b * cos(c * theta) * cos(d * phi)",
          "@name": "description"
        },
        {
          "@content": "https://coderextreme.net/X3DJSONLD/src/main/data/flowers2.x3d",
          "@name": "identifier"
        },
        {
          "@content": "manually written",
          "@name": "generator"
        },
        {
          "@content": "http://www.web3d.org/x3d/content/examples/license.html",
          "@name": "license"
        },
        {
          "@name": "translated",
          "@content": "21 March 2018"
        },
        {
          "@name": "generator",
          "@content": "DOM2JSONSerializer.js, https://github.com/coderextreme/X3DJSONLD/blob/master/src/main/node/DOM2JSONSerializer.js"
        },
        {
          "@name": "reference",
          "@content": "X3D JSON encoding: http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
        }
      ]
    },
    "Scene": {
      "-children": [
        {
          "NavigationInfo": {
            "@type": [
              "EXAMINE",
              "ANY"
            ]
          }
        },
        {
          "Viewpoint": {
            "@description": "Two mathematical orbitals",
            "@position": [
              0,
              0,
              50
            ]
          }
        },
        {
          "Group": {
            "-children": [
              {
                "DirectionalLight": {
                  "@direction": [
                    1,
                    1,
                    1
                  ]
                }
              },
              {
                "TimeSensor": {
                  "@DEF": "Clock",
                  "@cycleInterval": 16,
                  "@loop": true
                }
              },
              {
                "OrientationInterpolator": {
                  "@DEF": "OrbitPath",
                  "@key": [
                    0,
                    0.5,
                    1
                  ],
                  "@keyValue": [
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    3.14,
                    1,
                    0,
                    0,
                    6.28
                  ]
                }
              },
              {
                "ProtoDeclare": {
                  "@name": "orbit",
                  "ProtoInterface": {
                    "field": [
                      {
                        "@name": "translation",
                        "@accessType": "inputOutput",
                        "@type": "SFVec3f",
                        "@value": [
                          -8,
                          0,
                          0
                        ]
                      },
                      {
                        "@name": "diffuseColor",
                        "@accessType": "inputOutput",
                        "@type": "SFVec3f",
                        "@value": [
                          1,
                          0.5,
                          0
                        ]
                      },
                      {
                        "@name": "specularColor",
                        "@accessType": "inputOutput",
                        "@type": "SFVec3f",
                        "@value": [
                          1,
                          0.5,
                          0
                        ]
                      },
                      {
                        "@name": "transparency",
                        "@accessType": "inputOutput",
                        "@type": "SFFloat",
                        "@value": 0.75
                      }
                    ]
                  },
                  "ProtoBody": {
                    "-children": [
                      {
                        "Group": {
                          "-children": [
                            {
                              "Transform": {
                                "@DEF": "OrbitTransform",
                                "IS": {
                                  "connect": [
                                    {
                                      "@nodeField": "translation",
                                      "@protoField": "translation"
                                    }
                                  ]
                                },
                                "-children": [
                                  {
                                    "Shape": {
                                      "-appearance": {
                                        "Appearance": {
                                          "-material": {
                                            "Material": {
                                              "IS": {
                                                "connect": [
                                                  {
                                                    "@nodeField": "diffuseColor",
                                                    "@protoField": "diffuseColor"
                                                  },
                                                  {
                                                    "@nodeField": "specularColor",
                                                    "@protoField": "specularColor"
                                                  },
                                                  {
                                                    "@nodeField": "transparency",
                                                    "@protoField": "transparency"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "-geometry": {
                                        "IndexedFaceSet": {
                                          "@DEF": "Orbit",
                                          "@creaseAngle": 0,
                                          "-coord": {
                                            "Coordinate": {
                                              "@DEF": "OrbitCoordinates"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "Script": {
                                "@DEF": "OrbitScript",
                                "field": [
                                  {
                                    "@accessType": "inputOnly",
                                    "@name": "set_fraction",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@accessType": "outputOnly",
                                    "@name": "coordinates",
                                    "@type": "MFVec3f"
                                  },
                                  {
                                    "@accessType": "outputOnly",
                                    "@name": "coordIndexes",
                                    "@type": "MFInt32"
                                  },
                                  {
                                    "@accessType": "inputOutput",
                                    "@name": "e",
                                    "@type": "SFFloat",
                                    "@value": 5
                                  },
                                  {
                                    "@accessType": "inputOutput",
                                    "@name": "f",
                                    "@type": "SFFloat",
                                    "@value": 5
                                  },
                                  {
                                    "@accessType": "inputOutput",
                                    "@name": "g",
                                    "@type": "SFFloat",
                                    "@value": 5
                                  },
                                  {
                                    "@accessType": "inputOutput",
                                    "@name": "h",
                                    "@type": "SFFloat",
                                    "@value": 5
                                  },
                                  {
                                    "@accessType": "inputOutput",
                                    "@name": "resolution",
                                    "@type": "SFInt32",
                                    "@value": 50
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "\t\t\tecmascript:",
                                  "",
                                  "\t\t\tvar e = 5;",
                                  "\t\t\tvar f = 5;",
                                  "\t\t\tvar g = 5;",
                                  "\t\t\tvar h = 5;",
                                  "\t\t\tvar resolution = 100;",
                                  "",
                                  "\t\t\tfunction initialize() {",
                                  "\t\t\t     generateCoordinates();",
                                  "\t\t\t     var localci = [];",
                                  "\t\t\t     for ( i = 0; i < resolution-1; i++) {",
                                  "\t\t\t\tfor ( j = 0; j < resolution-1; j++) {",
                                  "\t\t\t\t     localci.push(i*resolution+j);",
                                  "\t\t\t\t     localci.push(i*resolution+j+1);",
                                  "\t\t\t\t     localci.push((i+1)*resolution+j+1);",
                                  "\t\t\t\t     localci.push((i+1)*resolution+j);",
                                  "\t\t\t\t     localci.push(-1);",
                                  "\t\t\t\t}",
                                  "\t\t\t    }",
                                  "\t\t\t    coordIndexes = new MFInt32(localci);",
                                  "\t\t\t}",
                                  "",
                                  "\t\t\tfunction generateCoordinates() {",
                                  "\t\t\t     theta = 0.0;",
                                  "\t\t\t     phi = 0.0;",
                                  "\t\t\t     delta = (2 * 3.141592653) / (resolution-1);",
                                  "\t\t\t     var localc = [];",
                                  "\t\t\t     for ( i = 0; i < resolution; i++) {",
                                  "\t\t\t\tfor ( j = 0; j < resolution; j++) {",
                                  "\t\t\t\t\trho = e + f * Math.cos(g * theta) * Math.cos(h * phi);",
                                  "\t\t\t\t\tlocalc.push(new SFVec3f(",
                                  "\t\t\t\t\t\trho * Math.cos(phi) * Math.cos(theta),",
                                  "\t\t\t\t\t\trho * Math.cos(phi) * Math.sin(theta),",
                                  "\t\t\t\t\t\trho * Math.sin(phi)",
                                  "\t\t\t\t\t));",
                                  "\t\t\t\t\ttheta += delta;",
                                  "\t\t\t\t}",
                                  "\t\t\t\tphi += delta;",
                                  "\t\t\t     }",
                                  "\t\t\t     ",
                                  "\t\t\t     coordinates = new MFVec3f(localc);",
                                  "\t\t\t}",
                                  "",
                                  "\t\t\tfunction set_fraction(fraction, eventTime) {",
                                  "\t\t\t\tchoice = Math.floor(Math.random() * 4);",
                                  "\t\t\t\tswitch (choice) {",
                                  "\t\t\t\tcase 0:",
                                  "\t\t\t\t\te += Math.floor(Math.random() * 2) * 2 - 1;",
                                  "\t\t\t\t\tbreak;",
                                  "\t\t\t\tcase 1:",
                                  "\t\t\t\t\tf += Math.floor(Math.random() * 2) * 2 - 1;",
                                  "\t\t\t\t\tbreak;",
                                  "\t\t\t\tcase 2:",
                                  "\t\t\t\t\tg += Math.floor(Math.random() * 2) * 2 - 1;",
                                  "\t\t\t\t\tbreak;",
                                  "\t\t\t\tcase 3:",
                                  "\t\t\t\t\th += Math.floor(Math.random() * 2) * 2 - 1;",
                                  "\t\t\t\t\tbreak;",
                                  "\t\t\t\t}",
                                  "\t\t\t\tif (f < 1) {",
                                  "\t\t\t\t\tf = 10;",
                                  "\t\t\t\t}",
                                  "\t\t\t\tif (g < 1) {",
                                  "\t\t\t\t\tg = 4;",
                                  "\t\t\t\t}",
                                  "\t\t\t\tif (h < 1) {",
                                  "\t\t\t\t\th = 4;",
                                  "\t\t\t\t}",
                                  "\t\t\t\tgenerateCoordinates();",
                                  "\t\t\t}",
                                  "\t\t\t      "
                                ]
                              }
                            },
                            {
                              "ROUTE": {
                                "@fromNode": "OrbitScript",
                                "@fromField": "coordIndexes",
                                "@toNode": "Orbit",
                                "@toField": "coordIndex"
                              }
                            },
                            {
                              "ROUTE": {
                                "@fromNode": "OrbitScript",
                                "@fromField": "coordinates",
                                "@toNode": "OrbitCoordinates",
                                "@toField": "point"
                              }
                            },
                            {
                              "ROUTE": {
                                "@fromNode": "Clock",
                                "@fromField": "fraction_changed",
                                "@toNode": "OrbitScript",
                                "@toField": "set_fraction"
                              }
                            },
                            {
                              "ROUTE": {
                                "@fromNode": "OrbitPath",
                                "@fromField": "value_changed",
                                "@toNode": "OrbitTransform",
                                "@toField": "rotation"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              {
                "ProtoInstance": {
                  "@name": "orbit",
                  "fieldValue": [
                    {
                      "@name": "translation",
                      "@value": [
                        -8,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "diffuseColor",
                      "@value": [
                        1,
                        0.5,
                        0
                      ]
                    },
                    {
                      "@name": "specularColor",
                      "@value": [
                        1,
                        0.5,
                        0
                      ]
                    },
                    {
                      "@name": "transparency",
                      "@value": 0.75
                    }
                  ]
                }
              },
              {
                "ProtoInstance": {
                  "@name": "orbit",
                  "fieldValue": [
                    {
                      "@name": "translation",
                      "@value": [
                        8,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "diffuseColor",
                      "@value": [
                        0,
                        0.5,
                        1
                      ]
                    },
                    {
                      "@name": "specularColor",
                      "@value": [
                        0,
                        0.5,
                        1
                      ]
                    },
                    {
                      "@name": "transparency",
                      "@value": 0.5
                    }
                  ]
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "Clock",
                  "@fromField": "fraction_changed",
                  "@toNode": "OrbitPath",
                  "@toField": "set_fraction"
                }
              }
            ]
          }
        }
      ]
    },
    "encoding": "UTF-8",
    "JSON schema": "http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json"
  }
}