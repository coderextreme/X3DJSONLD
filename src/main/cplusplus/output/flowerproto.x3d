<?xml version="1.0" encoding="UTF-8" standalone="no" ?><X3D profile="Immersive" version="3.3" xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" xsd:noNamespaceSchemaLocation="https://www.web3d.org/specifications/x3d-3.3.xsd"><head><component level="1.000000" name="Shaders"/><component level="1.000000" name="CubeMapTexturing"/><component level="1.000000" name="Texturing"/><component level="1.000000" name="Rendering"/><component level="4.000000" name="Shape"/><component level="3.000000" name="Grouping"/><meta content="flowerproto.x3d" name="title"/><meta content="John Carlson" name="creator"/><meta content="A flower proto with configurable shaders" name="description"/><meta content="X3D-Edit, https://savage.nps.edu/X3D-Edit" name="generator"/><meta content="https://coderextreme.net/X3DJSONLD/flowerproto.x3d" name="identifier"/><meta content="21 November 2020" name="translated"/><meta content="X3dToJson.xslt, https://www.web3d.org/x3d/stylesheets/X3dToJson.html" name="generator"/><meta content="X3D JSON encoding: https://www.web3d.org/wiki/index.php/X3D_JSON_Encoding" name="reference"/></head><Scene><ProtoDeclare name="FlowerProto"><ProtoInterface><field accessType="inputOutput" name="vertex" type="MFString" value="&quot;../shaders/gl_flowers_chromatic.vs&quot;"/><field accessType="inputOutput" name="fragment" type="MFString" value="&quot;../shaders/pc_flowers.fs&quot;"/></ProtoInterface><ProtoBody><Transform DEF="transform"><Shape><Appearance containerField="appearance"><Material containerField="material" diffuseColor="0.7 0.7 0.7" specularColor="0.5 0.5 0.5"/><ComposedCubeMapTexture DEF="texture" containerField="texture"><ImageTexture containerField="back" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_back.png&quot; &quot;https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_back.png&quot;"/><ImageTexture containerField="bottom" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_bottom.png&quot; &quot;https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_bottom.png&quot;"/><ImageTexture containerField="front" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_front.png&quot; &quot;https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_front.png&quot;"/><ImageTexture containerField="left" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_left.png&quot; &quot;https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_left.png&quot;"/><ImageTexture containerField="right" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_right.png&quot; &quot;https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_right.png&quot;"/><ImageTexture containerField="top" url="&quot;../resources/images/all_probes/stpeters_cross/stpeters_top.png&quot; &quot;https://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_top.png&quot;"/></ComposedCubeMapTexture><ComposedShader DEF="shader" containerField="shaders" language="GLSL"><field accessType="inputOutput" containerField="shaders" name="cube" type="SFInt32" value="0.000000"/><field accessType="initializeOnly" containerField="shaders" name="chromaticDispertion" type="SFVec3f" value="0.98 1 1.033"/><field accessType="inputOutput" containerField="shaders" name="bias" type="SFFloat" value="0.500000"/><field accessType="inputOutput" containerField="shaders" name="scale" type="SFFloat" value="0.500000"/><field accessType="inputOutput" containerField="shaders" name="power" type="SFFloat" value="2.000000"/><field accessType="inputOutput" containerField="shaders" name="a" type="SFFloat" value="10.000000"/><field accessType="inputOutput" containerField="shaders" name="b" type="SFFloat" value="1.000000"/><field accessType="inputOutput" containerField="shaders" name="c" type="SFFloat" value="20.000000"/><field accessType="inputOutput" containerField="shaders" name="d" type="SFFloat" value="20.000000"/><field accessType="inputOutput" containerField="shaders" name="tdelta" type="SFFloat" value="0.000000"/><field accessType="inputOutput" containerField="shaders" name="pdelta" type="SFFloat" value="0.000000"/><!--<field name='cube' type='SFNode' accessType="inputOutput"> <ComposedCubeMapTexture USE="texture"/> </field>--><ShaderPart containerField="parts" type="VERTEX"><IS containerField="parts"><connect containerField="parts" nodeField="url" protoField="vertex"/></IS></ShaderPart><ShaderPart containerField="parts" type="FRAGMENT"><IS containerField="parts"><connect containerField="parts" nodeField="url" protoField="fragment"/></IS></ShaderPart></ComposedShader></Appearance><Sphere containerField="geometry"/></Shape><Script DEF="Animate"><field accessType="inputOutput" name="translation" type="SFVec3f" value="0 0 0"/><field accessType="inputOutput" name="velocity" type="SFVec3f" value="0 0 0"/><field accessType="inputOnly" name="set_fraction" type="SFFloat"/><field accessType="inputOutput" name="a" type="SFFloat" value="0.500000"/><field accessType="inputOutput" name="b" type="SFFloat" value="0.500000"/><field accessType="inputOutput" name="c" type="SFFloat" value="3.000000"/><field accessType="inputOutput" name="d" type="SFFloat" value="3.000000"/><field accessType="inputOutput" name="tdelta" type="SFFloat" value="0.500000"/><field accessType="inputOutput" name="pdelta" type="SFFloat" value="0.500000"/><![CDATA[


ecmascript:
			function initialize() {
			    translation = new SFVec3f(0, 0, 0);
			    velocity = new SFVec3f(
			    	Math.random() - 0.5,
				Math.random() - 0.5,
				Math.random() - 0.5);
			}
			function set_fraction() {
			    translation = new SFVec3f(
			    	translation.x + velocity.x,
				translation.y + velocity.y,
				translation.z + velocity.z);
			    for (var j = 0; j <= 2; j++) {
				    if (Math.abs(translation.x) > 10) {
					initialize();
				    } else if (Math.abs(translation.y) > 10) {
					initialize();
				    } else if (Math.abs(translation.z) > 10) {
					initialize();
				    } else {
					velocity.x += Math.random() * 0.2 - 0.1;
					velocity.y += Math.random() * 0.2 - 0.1;
					velocity.z += Math.random() * 0.2 - 0.1;
				    }
			    }
			    animate_flowers();
			}

			function animate_flowers(fraction, eventTime) {
				var choice = Math.floor(Math.random() * 4);
				switch (choice) {
				case 0:
					a += Math.random() * 0.2 - 0.1;
					break;
				case 1:
					b += Math.rani]]></Script><TimeSensor DEF="TourTime" cycleInterval="5.000000" loop="TRUE"/><ROUTE fromField="fraction_changed" fromNode="TourTime" toField="set_fraction" toNode="Animate"/><ROUTE fromField="translation_changed" fromNode="Animate" toField="set_translation" toNode="transform"/><ROUTE fromField="a" fromNode="Animate" toField="a" toNode="shader"/><ROUTE fromField="b" fromNode="Animate" toField="b" toNode="shader"/><ROUTE fromField="c" fromNode="Animate" toField="c" toNode="shader"/><ROUTE fromField="d" fromNode="Animate" toField="d" toNode="shader"/><ROUTE fromField="tdelta" fromNode="Animate" toField="tdelta" toNode="shader"/><ROUTE fromField="pdelta" fromNode="Animate" toField="pdelta" toNode="shader"/></Transform></ProtoBody></ProtoDeclare></Scene></X3D>