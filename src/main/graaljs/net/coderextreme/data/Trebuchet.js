CommentsBlock = Java.type("org.web3d.x3d.jsail.Core.CommentsBlock")
AcousticProperties = Java.type('org.web3d.x3d.jsail.Shape.AcousticProperties')
Analyser = Java.type('org.web3d.x3d.jsail.Sound.Analyser')
Anchor = Java.type('org.web3d.x3d.jsail.Networking.Anchor')
Appearance = Java.type('org.web3d.x3d.jsail.Shape.Appearance')
Arc2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Arc2D')
ArcClose2D = Java.type('org.web3d.x3d.jsail.Geometry2D.ArcClose2D')
AudioClip = Java.type('org.web3d.x3d.jsail.Sound.AudioClip')
AudioDestination = Java.type('org.web3d.x3d.jsail.Sound.AudioDestination')
Background = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.Background')
BallJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.BallJoint')
Billboard = Java.type('org.web3d.x3d.jsail.Navigation.Billboard')
BiquadFilter = Java.type('org.web3d.x3d.jsail.Sound.BiquadFilter')
BlendedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.BlendedVolumeStyle')
BooleanFilter = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanFilter')
BooleanSequencer = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanSequencer')
BooleanToggle = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanToggle')
BooleanTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanTrigger')
BoundaryEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.BoundaryEnhancementVolumeStyle')
BoundedPhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.BoundedPhysicsModel')
Box = Java.type('org.web3d.x3d.jsail.Geometry3D.Box')
BufferAudioSource = Java.type('org.web3d.x3d.jsail.Sound.BufferAudioSource')
CADAssembly = Java.type('org.web3d.x3d.jsail.CADGeometry.CADAssembly')
CADFace = Java.type('org.web3d.x3d.jsail.CADGeometry.CADFace')
CADLayer = Java.type('org.web3d.x3d.jsail.CADGeometry.CADLayer')
CADPart = Java.type('org.web3d.x3d.jsail.CADGeometry.CADPart')
CartoonVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.CartoonVolumeStyle')
ChannelMerger = Java.type('org.web3d.x3d.jsail.Sound.ChannelMerger')
ChannelSelector = Java.type('org.web3d.x3d.jsail.Sound.ChannelSelector')
ChannelSplitter = Java.type('org.web3d.x3d.jsail.Sound.ChannelSplitter')
Circle2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Circle2D')
ClipPlane = Java.type('org.web3d.x3d.jsail.Rendering.ClipPlane')
CollidableOffset = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollidableOffset')
CollidableShape = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollidableShape')
Collision = Java.type('org.web3d.x3d.jsail.Navigation.Collision')
CollisionCollection = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionCollection')
CollisionSensor = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSensor')
CollisionSpace = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSpace')
Color = Java.type('org.web3d.x3d.jsail.Rendering.Color')
ColorChaser = Java.type('org.web3d.x3d.jsail.Followers.ColorChaser')
ColorDamper = Java.type('org.web3d.x3d.jsail.Followers.ColorDamper')
ColorInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.ColorInterpolator')
ColorRGBA = Java.type('org.web3d.x3d.jsail.Rendering.ColorRGBA')
ComposedCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.ComposedCubeMapTexture')
ComposedShader = Java.type('org.web3d.x3d.jsail.Shaders.ComposedShader')
ComposedTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.ComposedTexture3D')
ComposedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ComposedVolumeStyle')
Cone = Java.type('org.web3d.x3d.jsail.Geometry3D.Cone')
ConeEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.ConeEmitter')
Contact = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.Contact')
Contour2D = Java.type('org.web3d.x3d.jsail.NURBS.Contour2D')
ContourPolyline2D = Java.type('org.web3d.x3d.jsail.NURBS.ContourPolyline2D')
Convolver = Java.type('org.web3d.x3d.jsail.Sound.Convolver')
Coordinate = Java.type('org.web3d.x3d.jsail.Rendering.Coordinate')
CoordinateChaser = Java.type('org.web3d.x3d.jsail.Followers.CoordinateChaser')
CoordinateDamper = Java.type('org.web3d.x3d.jsail.Followers.CoordinateDamper')
CoordinateDouble = Java.type('org.web3d.x3d.jsail.Rendering.CoordinateDouble')
CoordinateInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator')
CoordinateInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator2D')
Cylinder = Java.type('org.web3d.x3d.jsail.Geometry3D.Cylinder')
CylinderSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.CylinderSensor')
Delay = Java.type('org.web3d.x3d.jsail.Sound.Delay')
DirectionalLight = Java.type('org.web3d.x3d.jsail.Lighting.DirectionalLight')
DISEntityManager = Java.type('org.web3d.x3d.jsail.DIS.DISEntityManager')
DISEntityTypeMapping = Java.type('org.web3d.x3d.jsail.DIS.DISEntityTypeMapping')
Disk2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Disk2D')
DoubleAxisHingeJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.DoubleAxisHingeJoint')
DynamicsCompressor = Java.type('org.web3d.x3d.jsail.Sound.DynamicsCompressor')
EaseInEaseOut = Java.type('org.web3d.x3d.jsail.Interpolation.EaseInEaseOut')
EdgeEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.EdgeEnhancementVolumeStyle')
ElevationGrid = Java.type('org.web3d.x3d.jsail.Geometry3D.ElevationGrid')
EspduTransform = Java.type('org.web3d.x3d.jsail.DIS.EspduTransform')
ExplosionEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.ExplosionEmitter')
Extrusion = Java.type('org.web3d.x3d.jsail.Geometry3D.Extrusion')
FillProperties = Java.type('org.web3d.x3d.jsail.Shape.FillProperties')
FloatVertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.FloatVertexAttribute')
Fog = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.Fog')
FogCoordinate = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.FogCoordinate')
FontStyle = Java.type('org.web3d.x3d.jsail.Text.FontStyle')
ForcePhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.ForcePhysicsModel')
Gain = Java.type('org.web3d.x3d.jsail.Sound.Gain')
GeneratedCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.GeneratedCubeMapTexture')
GeoCoordinate = Java.type('org.web3d.x3d.jsail.Geospatial.GeoCoordinate')
GeoElevationGrid = Java.type('org.web3d.x3d.jsail.Geospatial.GeoElevationGrid')
GeoLocation = Java.type('org.web3d.x3d.jsail.Geospatial.GeoLocation')
GeoLOD = Java.type('org.web3d.x3d.jsail.Geospatial.GeoLOD')
GeoMetadata = Java.type('org.web3d.x3d.jsail.Geospatial.GeoMetadata')
GeoOrigin = Java.type('org.web3d.x3d.jsail.Geospatial.GeoOrigin')
GeoPositionInterpolator = Java.type('org.web3d.x3d.jsail.Geospatial.GeoPositionInterpolator')
GeoProximitySensor = Java.type('org.web3d.x3d.jsail.Geospatial.GeoProximitySensor')
GeoTouchSensor = Java.type('org.web3d.x3d.jsail.Geospatial.GeoTouchSensor')
GeoTransform = Java.type('org.web3d.x3d.jsail.Geospatial.GeoTransform')
GeoViewpoint = Java.type('org.web3d.x3d.jsail.Geospatial.GeoViewpoint')
Group = Java.type('org.web3d.x3d.jsail.Grouping.Group')
HAnimDisplacer = Java.type('org.web3d.x3d.jsail.HAnim.HAnimDisplacer')
HAnimHumanoid = Java.type('org.web3d.x3d.jsail.HAnim.HAnimHumanoid')
HAnimJoint = Java.type('org.web3d.x3d.jsail.HAnim.HAnimJoint')
HAnimMotion = Java.type('org.web3d.x3d.jsail.HAnim.HAnimMotion')
HAnimSegment = Java.type('org.web3d.x3d.jsail.HAnim.HAnimSegment')
HAnimSite = Java.type('org.web3d.x3d.jsail.HAnim.HAnimSite')
ImageCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.ImageCubeMapTexture')
ImageTexture = Java.type('org.web3d.x3d.jsail.Texturing.ImageTexture')
ImageTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.ImageTexture3D')
IndexedFaceSet = Java.type('org.web3d.x3d.jsail.Geometry3D.IndexedFaceSet')
IndexedLineSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedLineSet')
IndexedQuadSet = Java.type('org.web3d.x3d.jsail.CADGeometry.IndexedQuadSet')
IndexedTriangleFanSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleFanSet')
IndexedTriangleSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleSet')
IndexedTriangleStripSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleStripSet')
Inline = Java.type('org.web3d.x3d.jsail.Networking.Inline')
IntegerSequencer = Java.type('org.web3d.x3d.jsail.EventUtilities.IntegerSequencer')
IntegerTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.IntegerTrigger')
IsoSurfaceVolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.IsoSurfaceVolumeData')
KeySensor = Java.type('org.web3d.x3d.jsail.KeyDeviceSensor.KeySensor')
Layer = Java.type('org.web3d.x3d.jsail.Layering.Layer')
LayerSet = Java.type('org.web3d.x3d.jsail.Layering.LayerSet')
Layout = Java.type('org.web3d.x3d.jsail.Layout.Layout')
LayoutGroup = Java.type('org.web3d.x3d.jsail.Layout.LayoutGroup')
LayoutLayer = Java.type('org.web3d.x3d.jsail.Layout.LayoutLayer')
LinePickSensor = Java.type('org.web3d.x3d.jsail.Picking.LinePickSensor')
LineProperties = Java.type('org.web3d.x3d.jsail.Shape.LineProperties')
LineSet = Java.type('org.web3d.x3d.jsail.Rendering.LineSet')
ListenerPointSource = Java.type('org.web3d.x3d.jsail.Sound.ListenerPointSource')
LoadSensor = Java.type('org.web3d.x3d.jsail.Networking.LoadSensor')
LocalFog = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.LocalFog')
LOD = Java.type('org.web3d.x3d.jsail.Navigation.LOD')
Material = Java.type('org.web3d.x3d.jsail.Shape.Material')
Matrix3VertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.Matrix3VertexAttribute')
Matrix4VertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.Matrix4VertexAttribute')
MetadataBoolean = Java.type('org.web3d.x3d.jsail.Core.MetadataBoolean')
MetadataDouble = Java.type('org.web3d.x3d.jsail.Core.MetadataDouble')
MetadataFloat = Java.type('org.web3d.x3d.jsail.Core.MetadataFloat')
MetadataInteger = Java.type('org.web3d.x3d.jsail.Core.MetadataInteger')
MetadataSet = Java.type('org.web3d.x3d.jsail.Core.MetadataSet')
MetadataString = Java.type('org.web3d.x3d.jsail.Core.MetadataString')
MicrophoneSource = Java.type('org.web3d.x3d.jsail.Sound.MicrophoneSource')
MotorJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.MotorJoint')
MovieTexture = Java.type('org.web3d.x3d.jsail.Texturing.MovieTexture')
MultiTexture = Java.type('org.web3d.x3d.jsail.Texturing.MultiTexture')
MultiTextureCoordinate = Java.type('org.web3d.x3d.jsail.Texturing.MultiTextureCoordinate')
MultiTextureTransform = Java.type('org.web3d.x3d.jsail.Texturing.MultiTextureTransform')
NavigationInfo = Java.type('org.web3d.x3d.jsail.Navigation.NavigationInfo')
Normal = Java.type('org.web3d.x3d.jsail.Rendering.Normal')
NormalInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.NormalInterpolator')
NurbsCurve = Java.type('org.web3d.x3d.jsail.NURBS.NurbsCurve')
NurbsCurve2D = Java.type('org.web3d.x3d.jsail.NURBS.NurbsCurve2D')
NurbsOrientationInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsOrientationInterpolator')
NurbsPatchSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsPatchSurface')
NurbsPositionInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsPositionInterpolator')
NurbsSet = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSet')
NurbsSurfaceInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSurfaceInterpolator')
NurbsSweptSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSweptSurface')
NurbsSwungSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSwungSurface')
NurbsTextureCoordinate = Java.type('org.web3d.x3d.jsail.NURBS.NurbsTextureCoordinate')
NurbsTrimmedSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsTrimmedSurface')
OpacityMapVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.OpacityMapVolumeStyle')
OrientationChaser = Java.type('org.web3d.x3d.jsail.Followers.OrientationChaser')
OrientationDamper = Java.type('org.web3d.x3d.jsail.Followers.OrientationDamper')
OrientationInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.OrientationInterpolator')
OrthoViewpoint = Java.type('org.web3d.x3d.jsail.Navigation.OrthoViewpoint')
OscillatorSource = Java.type('org.web3d.x3d.jsail.Sound.OscillatorSource')
PackagedShader = Java.type('org.web3d.x3d.jsail.Shaders.PackagedShader')
ParticleSystem = Java.type('org.web3d.x3d.jsail.ParticleSystems.ParticleSystem')
PeriodicWave = Java.type('org.web3d.x3d.jsail.Sound.PeriodicWave')
PhysicalMaterial = Java.type('org.web3d.x3d.jsail.Shape.PhysicalMaterial')
PickableGroup = Java.type('org.web3d.x3d.jsail.Picking.PickableGroup')
PixelTexture = Java.type('org.web3d.x3d.jsail.Texturing.PixelTexture')
PixelTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.PixelTexture3D')
PlaneSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.PlaneSensor')
PointEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.PointEmitter')
PointLight = Java.type('org.web3d.x3d.jsail.Lighting.PointLight')
PointPickSensor = Java.type('org.web3d.x3d.jsail.Picking.PointPickSensor')
PointProperties = Java.type('org.web3d.x3d.jsail.Shape.PointProperties')
PointSet = Java.type('org.web3d.x3d.jsail.Rendering.PointSet')
Polyline2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Polyline2D')
PolylineEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.PolylineEmitter')
Polypoint2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Polypoint2D')
PositionChaser = Java.type('org.web3d.x3d.jsail.Followers.PositionChaser')
PositionChaser2D = Java.type('org.web3d.x3d.jsail.Followers.PositionChaser2D')
PositionDamper = Java.type('org.web3d.x3d.jsail.Followers.PositionDamper')
PositionDamper2D = Java.type('org.web3d.x3d.jsail.Followers.PositionDamper2D')
PositionInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.PositionInterpolator')
PositionInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.PositionInterpolator2D')
PrimitivePickSensor = Java.type('org.web3d.x3d.jsail.Picking.PrimitivePickSensor')
ProgramShader = Java.type('org.web3d.x3d.jsail.Shaders.ProgramShader')
ProjectionVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ProjectionVolumeStyle')
ProtoInstance = Java.type('org.web3d.x3d.jsail.Core.ProtoInstance')
ProximitySensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.ProximitySensor')
QuadSet = Java.type('org.web3d.x3d.jsail.CADGeometry.QuadSet')
ReceiverPdu = Java.type('org.web3d.x3d.jsail.DIS.ReceiverPdu')
Rectangle2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Rectangle2D')
RigidBody = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.RigidBody')
RigidBodyCollection = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.RigidBodyCollection')
ScalarChaser = Java.type('org.web3d.x3d.jsail.Followers.ScalarChaser')
ScalarDamper = Java.type('org.web3d.x3d.jsail.Followers.ScalarDamper')
ScalarInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.ScalarInterpolator')
ScreenFontStyle = Java.type('org.web3d.x3d.jsail.Layout.ScreenFontStyle')
ScreenGroup = Java.type('org.web3d.x3d.jsail.Layout.ScreenGroup')
Script = Java.type('org.web3d.x3d.jsail.Scripting.Script')
SegmentedVolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.SegmentedVolumeData')
ShadedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ShadedVolumeStyle')
ShaderPart = Java.type('org.web3d.x3d.jsail.Shaders.ShaderPart')
ShaderProgram = Java.type('org.web3d.x3d.jsail.Shaders.ShaderProgram')
Shape = Java.type('org.web3d.x3d.jsail.Shape.Shape')
SignalPdu = Java.type('org.web3d.x3d.jsail.DIS.SignalPdu')
SilhouetteEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.SilhouetteEnhancementVolumeStyle')
SingleAxisHingeJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.SingleAxisHingeJoint')
SliderJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.SliderJoint')
Sound = Java.type('org.web3d.x3d.jsail.Sound.Sound')
SpatialSound = Java.type('org.web3d.x3d.jsail.Sound.SpatialSound')
Sphere = Java.type('org.web3d.x3d.jsail.Geometry3D.Sphere')
SphereSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.SphereSensor')
SplinePositionInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator')
SplinePositionInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator2D')
SplineScalarInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SplineScalarInterpolator')
SpotLight = Java.type('org.web3d.x3d.jsail.Lighting.SpotLight')
SquadOrientationInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SquadOrientationInterpolator')
StaticGroup = Java.type('org.web3d.x3d.jsail.Grouping.StaticGroup')
StreamAudioDestination = Java.type('org.web3d.x3d.jsail.Sound.StreamAudioDestination')
StreamAudioSource = Java.type('org.web3d.x3d.jsail.Sound.StreamAudioSource')
StringSensor = Java.type('org.web3d.x3d.jsail.KeyDeviceSensor.StringSensor')
SurfaceEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.SurfaceEmitter')
Switch = Java.type('org.web3d.x3d.jsail.Grouping.Switch')
TexCoordChaser2D = Java.type('org.web3d.x3d.jsail.Followers.TexCoordChaser2D')
TexCoordDamper2D = Java.type('org.web3d.x3d.jsail.Followers.TexCoordDamper2D')
Text = Java.type('org.web3d.x3d.jsail.Text.Text')
TextureBackground = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.TextureBackground')
TextureCoordinate = Java.type('org.web3d.x3d.jsail.Texturing.TextureCoordinate')
TextureCoordinate3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureCoordinate3D')
TextureCoordinate4D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureCoordinate4D')
TextureCoordinateGenerator = Java.type('org.web3d.x3d.jsail.Texturing.TextureCoordinateGenerator')
TextureProjector = Java.type('org.web3d.x3d.jsail.TextureProjection.TextureProjector')
TextureProjectorParallel = Java.type('org.web3d.x3d.jsail.TextureProjection.TextureProjectorParallel')
TextureProperties = Java.type('org.web3d.x3d.jsail.Texturing.TextureProperties')
TextureTransform = Java.type('org.web3d.x3d.jsail.Texturing.TextureTransform')
TextureTransform3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureTransform3D')
TextureTransformMatrix3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureTransformMatrix3D')
TimeSensor = Java.type('org.web3d.x3d.jsail.Time.TimeSensor')
TimeTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.TimeTrigger')
ToneMappedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ToneMappedVolumeStyle')
TouchSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.TouchSensor')
Transform = Java.type('org.web3d.x3d.jsail.Grouping.Transform')
TransformSensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.TransformSensor')
TransmitterPdu = Java.type('org.web3d.x3d.jsail.DIS.TransmitterPdu')
TriangleFanSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleFanSet')
TriangleSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleSet')
TriangleSet2D = Java.type('org.web3d.x3d.jsail.Geometry2D.TriangleSet2D')
TriangleStripSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleStripSet')
TwoSidedMaterial = Java.type('org.web3d.x3d.jsail.Shape.TwoSidedMaterial')
UniversalJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.UniversalJoint')
UnlitMaterial = Java.type('org.web3d.x3d.jsail.Shape.UnlitMaterial')
Viewpoint = Java.type('org.web3d.x3d.jsail.Navigation.Viewpoint')
ViewpointGroup = Java.type('org.web3d.x3d.jsail.Navigation.ViewpointGroup')
Viewport = Java.type('org.web3d.x3d.jsail.Layering.Viewport')
VisibilitySensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.VisibilitySensor')
VolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.VolumeData')
VolumeEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.VolumeEmitter')
VolumePickSensor = Java.type('org.web3d.x3d.jsail.Picking.VolumePickSensor')
WaveShaper = Java.type('org.web3d.x3d.jsail.Sound.WaveShaper')
WindPhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.WindPhysicsModel')
WorldInfo = Java.type('org.web3d.x3d.jsail.Core.WorldInfo')
component = Java.type('org.web3d.x3d.jsail.Core.component')
connect = Java.type('org.web3d.x3d.jsail.Core.connect')
EXPORT = Java.type('org.web3d.x3d.jsail.Networking.EXPORT')
ExternProtoDeclare = Java.type('org.web3d.x3d.jsail.Core.ExternProtoDeclare')
field = Java.type('org.web3d.x3d.jsail.Core.field')
fieldValue = Java.type('org.web3d.x3d.jsail.Core.fieldValue')
head = Java.type('org.web3d.x3d.jsail.Core.head')
IMPORT = Java.type('org.web3d.x3d.jsail.Networking.IMPORT')
IS = Java.type('org.web3d.x3d.jsail.Core.IS')
meta = Java.type('org.web3d.x3d.jsail.Core.meta')
ProtoBody = Java.type('org.web3d.x3d.jsail.Core.ProtoBody')
ProtoDeclare = Java.type('org.web3d.x3d.jsail.Core.ProtoDeclare')
ProtoInterface = Java.type('org.web3d.x3d.jsail.Core.ProtoInterface')
ROUTE = Java.type('org.web3d.x3d.jsail.Core.ROUTE')
Scene = Java.type('org.web3d.x3d.jsail.Core.Scene')
unit = Java.type('org.web3d.x3d.jsail.Core.unit')
X3D = Java.type('org.web3d.x3d.jsail.Core.X3D')
SFBool = Java.type('org.web3d.x3d.jsail.fields.SFBool')
MFBool = Java.type('org.web3d.x3d.jsail.fields.MFBool')
SFColor = Java.type('org.web3d.x3d.jsail.fields.SFColor')
MFColor = Java.type('org.web3d.x3d.jsail.fields.MFColor')
SFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.SFColorRGBA')
MFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.MFColorRGBA')
SFDouble = Java.type('org.web3d.x3d.jsail.fields.SFDouble')
MFDouble = Java.type('org.web3d.x3d.jsail.fields.MFDouble')
SFFloat = Java.type('org.web3d.x3d.jsail.fields.SFFloat')
MFFloat = Java.type('org.web3d.x3d.jsail.fields.MFFloat')
SFImage = Java.type('org.web3d.x3d.jsail.fields.SFImage')
MFImage = Java.type('org.web3d.x3d.jsail.fields.MFImage')
SFInt32 = Java.type('org.web3d.x3d.jsail.fields.SFInt32')
MFInt32 = Java.type('org.web3d.x3d.jsail.fields.MFInt32')
SFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3d')
MFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3d')
SFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3f')
MFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3f')
SFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4d')
MFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4d')
SFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4f')
MFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4f')
SFNode = Java.type('org.web3d.x3d.jsail.fields.SFNode')
MFNode = Java.type('org.web3d.x3d.jsail.fields.MFNode')
SFRotation = Java.type('org.web3d.x3d.jsail.fields.SFRotation')
MFRotation = Java.type('org.web3d.x3d.jsail.fields.MFRotation')
SFString = Java.type('org.web3d.x3d.jsail.fields.SFString')
MFString = Java.type('org.web3d.x3d.jsail.fields.MFString')
SFTime = Java.type('org.web3d.x3d.jsail.fields.SFTime')
MFTime = Java.type('org.web3d.x3d.jsail.fields.MFTime')
SFVec2d = Java.type('org.web3d.x3d.jsail.fields.SFVec2d')
MFVec2d = Java.type('org.web3d.x3d.jsail.fields.MFVec2d')
SFVec2f = Java.type('org.web3d.x3d.jsail.fields.SFVec2f')
MFVec2f = Java.type('org.web3d.x3d.jsail.fields.MFVec2f')
SFVec3d = Java.type('org.web3d.x3d.jsail.fields.SFVec3d')
MFVec3d = Java.type('org.web3d.x3d.jsail.fields.MFVec3d')
SFVec3f = Java.type('org.web3d.x3d.jsail.fields.SFVec3f')
MFVec3f = Java.type('org.web3d.x3d.jsail.fields.MFVec3f')
SFVec4d = Java.type('org.web3d.x3d.jsail.fields.SFVec4d')
MFVec4d = Java.type('org.web3d.x3d.jsail.fields.MFVec4d')
SFVec4f = Java.type('org.web3d.x3d.jsail.fields.SFVec4f')
MFVec4f = Java.type('org.web3d.x3d.jsail.fields.MFVec4f')
var ConfigurationProperties = Packages.org.web3d.x3d.jsail.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
ConfigurationProperties.setStripDefaultAttributes(true);
function doubleToFloat(d) {
    if (Float32Array)
	return new Float32Array([d])[0];
}
      var X3D0 =  new X3D().setProfile("Immersive").setVersion("3.0")
      .setHead(new head()
        .addMeta(new meta().setName("title").setContent("Trebuchet.x3d"))
        .addMeta(new meta().setName("description").setContent("Working model of a 14th century Trebuchet Catapult."))
        .addMeta(new meta().setName("creator").setContent("LT Joe Roth"))
        .addMeta(new meta().setName("created").setContent("20 June 2001"))
        .addMeta(new meta().setName("modified").setContent("20 October 2019"))
        .addMeta(new meta().setName("version").setContent("7.8"))
        .addMeta(new meta().setName("identifier").setContent("https://www.web3d.org/x3d/content/examples/Basic/StudentProjects/Trebuchet.x3d"))
        .addMeta(new meta().setName("reference").setContent("http://trebuchet.com"))
        .addMeta(new meta().setName("reference").setContent("http://members.home.net/dimona"))
        .addMeta(new meta().setName("subject").setContent("trebuchet catapult Monty Python"))
        .addMeta(new meta().setName("reference").setContent("Permission granted for use of the VRML chicken I own a copy of Monty Python and the Holy Grail I have requested permission to use for non profit use. No response received. I will use the sound clips under \"Fair Use\" clause of the DMCA"))
        .addMeta(new meta().setName("reference").setContent("https://www.web3d.org/WorkingGroups/media/textures/nature/leaves_5.jpg.htm"))
        .addMeta(new meta().setName("reference").setContent("http://www.revemonde.net/UniversalMedia/textures/nature/leaves_5.jpg.htm"))
        .addMeta(new meta().setName("generator").setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"))
        .addMeta(new meta().setName("license").setContent("../license.html")))
      .setScene(new Scene()
        .addChild(new WorldInfo().setTitle("Trebuchet.x3d"))
        .addChild(new Background().setBackUrl(Java.to(["https://www.web3d.org/WorkingGroups/media/textures/panoramas/meadow_2_back.jpg"], Java.type("java.lang.String[]"))).setBottomUrl(Java.to(["https://www.web3d.org/WorkingGroups/media/textures/panoramas/meadow_2_bottom.jpg"], Java.type("java.lang.String[]"))).setFrontUrl(Java.to(["https://www.web3d.org/WorkingGroups/media/textures/panoramas/meadow_2_front.jpg"], Java.type("java.lang.String[]"))).setGroundAngle(Java.to([doubleToFloat(1.309),doubleToFloat(1.570796)], Java.type("float[]"))).setGroundColor(Java.to([doubleToFloat(0.1),doubleToFloat(0.1),doubleToFloat(0),doubleToFloat(0.4),doubleToFloat(0.25),doubleToFloat(0.2),doubleToFloat(0.6),doubleToFloat(0.6),doubleToFloat(0.6)], Java.type("float[]"))).setLeftUrl(Java.to(["https://www.web3d.org/WorkingGroups/media/textures/panoramas/meadow_2_left.jpg"], Java.type("java.lang.String[]"))).setRightUrl(Java.to(["https://www.web3d.org/WorkingGroups/media/textures/panoramas/meadow_2_right.jpg"], Java.type("java.lang.String[]"))).setSkyAngle(Java.to([doubleToFloat(1.309),doubleToFloat(1.57079)], Java.type("float[]"))).setSkyColor(Java.to([doubleToFloat(0),doubleToFloat(0.2),doubleToFloat(0.7),doubleToFloat(0),doubleToFloat(0.5),doubleToFloat(1),doubleToFloat(1),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))).setTopUrl(Java.to(["https://www.web3d.org/WorkingGroups/media/textures/panoramas/meadow_2_top.jpg"], Java.type("java.lang.String[]"))))
        .addChild(new Sound().setMaxBack(1000).setMaxFront(1000)
          .setSource(new AudioClip().setDEF("HolyGrail").setDescription("HolyGrail").setLoop(true).setUrl(Java.to(["holygral.mp3","http://www.nps.navy.mil/code32/vrml/holygral.mp3"], Java.type("java.lang.String[]")))))
        .addChild(new Shape()
          .setGeometry(new Box().setSize(Java.to([doubleToFloat(10000),doubleToFloat(1),doubleToFloat(10000)], Java.type("float[]"))))
          .setAppearance(new Appearance()
            .setTexture(new ImageTexture().setUrl(Java.to(["grass.jpg","https://www.web3d.org/x3d/content/examples/Basic/StudentProjects/grass.jpg"], Java.type("java.lang.String[]"))))))
        .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.5),doubleToFloat(0.5),doubleToFloat(0.5)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(10.5),doubleToFloat(6.5),doubleToFloat(4.5)], Java.type("float[]")))
          .addChild(new Shape()
            .setAppearance(new Appearance().setDEF("TextAppearance")
              .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setEmissiveColor(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(0)], Java.type("float[]")))))
            .setGeometry(new Text().setString(Java.to(["Click Sling to Select Projectile"], Java.type("java.lang.String[]")))
              .setFontStyle(new FontStyle()))))
        .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.5),doubleToFloat(0.5),doubleToFloat(0.5)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(11),doubleToFloat(5.5),doubleToFloat(6)], Java.type("float[]")))
          .addChild(new Switch().setDEF("Weight").setWhichChoice(0)
            .addChild(new Group()
              .addChild(new Shape()
                .setAppearance(new Appearance().setUSE("TextAppearance"))
                .setGeometry(new Text().setString(Java.to(["Click Here to Change Counter Weight (50 lbs)"], Java.type("java.lang.String[]"))))))
            .addChild(new Group()
              .addChild(new Shape()
                .setAppearance(new Appearance().setUSE("TextAppearance"))
                .setGeometry(new Text().setString(Java.to(["Click Here to Change Counter Weight (500 lbs)"], Java.type("java.lang.String[]"))))))
            .addChild(new Group()
              .addChild(new Shape()
                .setAppearance(new Appearance().setUSE("TextAppearance"))
                .setGeometry(new Text().setString(Java.to(["Click Here to Change Counter Weight (1000 lbs)"], Java.type("java.lang.String[]"))))))
            .addChild(new Group()
              .addChild(new Shape()
                .setAppearance(new Appearance().setUSE("TextAppearance"))
                .setGeometry(new Text().setString(Java.to(["Click Here to Change Counter Weight (10000 lbs)"], Java.type("java.lang.String[]")))))))
          .addChild(new TouchSensor().setDEF("weightselector").setDescription("weight selector"))
          .addChild(new Transform().setTranslation(Java.to([doubleToFloat(8),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
            .addChild(new Shape()
              .setGeometry(new Box().setSize(Java.to([doubleToFloat(20),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))
              .setAppearance(new Appearance()
                .setMaterial(new Material().setTransparency(1))))))
        .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(10),doubleToFloat(0.5),doubleToFloat(4.5)], Java.type("float[]")))
          .addChild(new Transform().setDEF("launch").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(2),doubleToFloat(5)], Java.type("float[]")))
            .addChild(new Billboard()
              .addChild(new Shape()
                .setAppearance(new Appearance()
                  .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))
                .setGeometry(new Text().setString(Java.to(["LAUNCH"], Java.type("java.lang.String[]")))
                  .setFontStyle(new FontStyle())))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(2),doubleToFloat(0.3),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Shape()
                  .setGeometry(new Box().setSize(Java.to([doubleToFloat(5),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setTransparency(1)))))
              .addChild(new Switch().setDEF("PigdogMonk").setWhichChoice(-1)
                .addChild(new Group()
                  .addChild(new Sound().setMaxBack(1000).setMaxFront(1000)
                    .setSource(new AudioClip().setDEF("PigDogSound").setDescription("PigDogSound").setUrl(Java.to(["pigdog.wav","http://www.nps.navy.mil/code32/vrml/pigdog.wav"], Java.type("java.lang.String[]"))))))
                .addChild(new Group()
                  .addChild(new Sound().setMaxBack(1000).setMaxFront(1000)
                    .setSource(new AudioClip().setDEF("MonkSound").setDescription("MonkSound").setUrl(Java.to(["monks.wav","http://www.nps.navy.mil/code32/vrml/monks.wav"], Java.type("java.lang.String[]"))))))))
            .addChild(new TouchSensor().setDEF("Launch").setDescription("launch!")))
          .addChild(new Transform()
            .addChild(new Switch().setDEF("projectilename").setWhichChoice(0)
              .addChild(new Group()
                .addChild(new Shape()
                  .setAppearance(new Appearance().setUSE("TextAppearance"))
                  .setGeometry(new Text().setString(Java.to(["Bowling Ball (10 lbs)"], Java.type("java.lang.String[]")))
                    .setFontStyle(new FontStyle().setSize(0.5))))
                .addChild(new Sound().setMaxBack(1000).setMaxFront(1000).setPriority(1)
                  .setSource(new AudioClip().setDEF("HolyHandGrenadeSound").setDescription("HolyHandGrenadeSound").setUrl(Java.to(["grenade.wav","http://www.nps.navy.mil/code32/vrml/grenade.wav"], Java.type("java.lang.String[]"))))))
              .addChild(new Group()
                .addChild(new Shape()
                  .setAppearance(new Appearance().setUSE("TextAppearance"))
                  .setGeometry(new Text().setString(Java.to(["Cow (1000 lbs)"], Java.type("java.lang.String[]")))
                    .setFontStyle(new FontStyle().setSize(0.5))))
                .addChild(new Sound().setMaxBack(1000).setMaxFront(1000)
                  .setSource(new AudioClip().setDEF("CowSound").setDescription("CowSound").setUrl(Java.to(["lavache.wav","http://www.nps.navy.mil/code32/vrml/lavache.wav"], Java.type("java.lang.String[]"))))))
              .addChild(new Group()
                .addChild(new Shape()
                  .setAppearance(new Appearance().setUSE("TextAppearance"))
                  .setGeometry(new Text().setString(Java.to(["Chicken (5 lbs)"], Java.type("java.lang.String[]")))
                    .setFontStyle(new FontStyle().setSize(0.5))))
                .addChild(new Sound().setMaxBack(1000).setMaxFront(1000).setPriority(1)
                  .setSource(new AudioClip().setDEF("HamsterSound").setDescription("HamsterSound").setUrl(Java.to(["hamster.wav","http://www.nps.navy.mil/code32/vrml/hamster.wav"], Java.type("java.lang.String[]")))))))))
        .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(-1.67)], Java.type("float[]")))
          .addChild(new Transform().setDEF("aft").setTranslation(Java.to([doubleToFloat(5),doubleToFloat(5),doubleToFloat(15)], Java.type("float[]")))
            .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-2.5),doubleToFloat(-4.5),doubleToFloat(-2)], Java.type("float[]")))
              .addChild(new Transform().setUSE("launch")))))
        .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(3),doubleToFloat(0)], Java.type("float[]")))
          .addChild(new Shape().setDEF("plank")
            .setGeometry(new Box().setSize(Java.to([doubleToFloat(25),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))
            .setAppearance(new Appearance().setDEF("wood")
              .setTexture(new ImageTexture().setDEF("woodTexture").setUrl(Java.to(["wood.gif","https://www.web3d.org/x3d/content/examples/Basic/StudentProjects/wood.gif"], Java.type("java.lang.String[]"))))))
          .addChild(new Transform().setDEF("angledsupport").setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(-5),doubleToFloat(10),doubleToFloat(0)], Java.type("float[]")))
            .addChild(new Shape().setUSE("plank")))
          .addChild(new Transform().setDEF("angledsupport2").setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-1)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(5),doubleToFloat(10),doubleToFloat(0)], Java.type("float[]")))
            .addChild(new Shape().setUSE("plank")))
          .addChild(new Transform().setDEF("verticalsupport").setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.9),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(11),doubleToFloat(0)], Java.type("float[]")))
            .addChild(new Shape().setUSE("plank"))
            .addComments(new CommentsBlock("Main Verticle Support")))
          .addChild(new Transform().setDEF("horizontalsupport").setScale(Java.to([doubleToFloat(0.4),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(10),doubleToFloat(0)], Java.type("float[]")))
            .addChild(new Shape().setUSE("plank")))
          .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.6),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(5),doubleToFloat(10)], Java.type("float[]")))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(0.4)], Java.type("float[]")))
              .addChild(new Shape().setUSE("plank"))))
          .addChild(new Transform().setDEF("panel").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(18.2),doubleToFloat(-0.3)], Java.type("float[]")))
            .addChild(new Shape()
              .setGeometry(new Box().setSize(Java.to([doubleToFloat(5),doubleToFloat(5),doubleToFloat(0.5)], Java.type("float[]"))))
              .setAppearance(new Appearance().setUSE("wood"))))
          .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0.6),doubleToFloat(2.5)], Java.type("float[]")))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]")))
              .addChild(new Shape()
                .setGeometry(new Extrusion().setBeginCap(false).setCrossSection(Java.to([doubleToFloat(1),doubleToFloat(-0.38),doubleToFloat(0.92),doubleToFloat(-0.38),doubleToFloat(0.71),doubleToFloat(-0.71),doubleToFloat(0.38),doubleToFloat(-0.92),doubleToFloat(0),doubleToFloat(-1),doubleToFloat(-0.38),doubleToFloat(-0.92),doubleToFloat(-0.71),doubleToFloat(-0.71),doubleToFloat(-0.92),doubleToFloat(-0.38),doubleToFloat(-1),doubleToFloat(-0.38),doubleToFloat(-1),doubleToFloat(-1.1),doubleToFloat(1),doubleToFloat(-1.1),doubleToFloat(1),doubleToFloat(-0.38)], Java.type("float[]"))).setEndCap(false).setSolid(false).setSpine(Java.to([doubleToFloat(0),doubleToFloat(6),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-11),doubleToFloat(0)], Java.type("float[]"))))
                .setAppearance(new Appearance().setUSE("wood")))))
          .addChild(new Transform().setDEF("flinger").setCenter(Java.to([doubleToFloat(7),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(0.82)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.9),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(-7),doubleToFloat(18),doubleToFloat(2.5)], Java.type("float[]")))
            .addChild(new Transform()
              .addChild(new Shape()
                .setGeometry(new Box().setSize(Java.to([doubleToFloat(35),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))
                .setAppearance(new Appearance().setUSE("wood")))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(7),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Shape()
                  .setGeometry(new Box().setSize(Java.to([doubleToFloat(8),doubleToFloat(2),doubleToFloat(2)], Java.type("float[]"))))
                  .setAppearance(new Appearance().setUSE("wood")))))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.2),doubleToFloat(0.2),doubleToFloat(0.2)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(-15),doubleToFloat(-1),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Shape().setDEF("Torus")
                .setAppearance(new Appearance()
                  .setMaterial(new Material().setSpecularColor(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]")))))
                .setGeometry(new Extrusion().setBeginCap(false).setConvex(false).setCreaseAngle(1.57).setCrossSection(Java.to([doubleToFloat(0.9),doubleToFloat(0),doubleToFloat(0.81),doubleToFloat(-0.34),doubleToFloat(0.63),doubleToFloat(-0.63),doubleToFloat(0.34),doubleToFloat(-0.83),doubleToFloat(0),doubleToFloat(-0.9),doubleToFloat(-0.34),doubleToFloat(-0.81),doubleToFloat(-0.63),doubleToFloat(-0.63),doubleToFloat(-0.81),doubleToFloat(-0.34),doubleToFloat(-0.9),doubleToFloat(0),doubleToFloat(-0.81),doubleToFloat(0.34),doubleToFloat(-0.63),doubleToFloat(0.63),doubleToFloat(-0.34),doubleToFloat(0.81),doubleToFloat(0),doubleToFloat(0.9),doubleToFloat(0.38),doubleToFloat(0.81),doubleToFloat(0.63),doubleToFloat(0.63),doubleToFloat(0.81),doubleToFloat(0.34),doubleToFloat(0.9),doubleToFloat(0)], Java.type("float[]"))).setEndCap(false).setSpine(Java.to([doubleToFloat(2),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.85),doubleToFloat(0),doubleToFloat(0.77),doubleToFloat(1.41),doubleToFloat(0),doubleToFloat(1.41),doubleToFloat(0.77),doubleToFloat(0),doubleToFloat(1.85),doubleToFloat(0),doubleToFloat(0),doubleToFloat(2),doubleToFloat(-0.77),doubleToFloat(0),doubleToFloat(1.85),doubleToFloat(-1.41),doubleToFloat(0),doubleToFloat(1.41),doubleToFloat(-1.85),doubleToFloat(0),doubleToFloat(0.77),doubleToFloat(-2),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-1.85),doubleToFloat(0),doubleToFloat(-0.77),doubleToFloat(-1.41),doubleToFloat(0),doubleToFloat(-1.41),doubleToFloat(-0.77),doubleToFloat(0),doubleToFloat(-1.85),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-2),doubleToFloat(0.77),doubleToFloat(0),doubleToFloat(-1.85),doubleToFloat(1.41),doubleToFloat(0),doubleToFloat(-1.41),doubleToFloat(1.85),doubleToFloat(0),doubleToFloat(-0.77),doubleToFloat(2),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(2)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance().setDEF("rope")
                    .setTexture(new ImageTexture().setUSE("woodTexture")))
                  .setGeometry(new Sphere().setRadius(1.5)))
                .addComments(new CommentsBlock("knott"))))
            .addComments(new CommentsBlock("The Unicorn"))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.2)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.2),doubleToFloat(0.2),doubleToFloat(0.2)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(-18.3),doubleToFloat(0.3),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Shape()
                .setGeometry(new Cylinder().setHeight(10))
                .setAppearance(new Appearance()
                  .setMaterial(new Material().setSpecularColor(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-2.5),doubleToFloat(0)], Java.type("float[]")))
                .addComments(new CommentsBlock("The Unicorn"))
                .addChild(new Shape().setUSE("Torus"))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-2),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setGeometry(new Sphere().setRadius(1.5))
                    .setAppearance(new Appearance().setUSE("rope")))
                  .addComments(new CommentsBlock("Knott"))))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.2)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(15),doubleToFloat(55),doubleToFloat(-11)], Java.type("float[]")))
                .addChild(new Transform().setScale(Java.to([doubleToFloat(5),doubleToFloat(5),doubleToFloat(5)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setAppearance(new Appearance().setUSE("rope"))
                    .setGeometry(new Extrusion().setBeginCap(false).setCreaseAngle(0.76).setCrossSection(Java.to([doubleToFloat(0.1),doubleToFloat(0),doubleToFloat(0.092),doubleToFloat(-0.038),doubleToFloat(0.071),doubleToFloat(-0.071),doubleToFloat(0.038),doubleToFloat(-0.092),doubleToFloat(0),doubleToFloat(-0.1),doubleToFloat(-0.038),doubleToFloat(-0.092),doubleToFloat(-0.071),doubleToFloat(-0.071),doubleToFloat(-0.092),doubleToFloat(-0.038),doubleToFloat(-0.1),doubleToFloat(0),doubleToFloat(-0.092),doubleToFloat(0.038),doubleToFloat(-0.071),doubleToFloat(0.071),doubleToFloat(-0.038),doubleToFloat(0.092),doubleToFloat(0),doubleToFloat(0.1),doubleToFloat(0.038),doubleToFloat(0.092),doubleToFloat(0.071),doubleToFloat(0.071),doubleToFloat(0.092),doubleToFloat(0.038),doubleToFloat(0.1),doubleToFloat(0)], Java.type("float[]"))).setEndCap(false).setSolid(false).setSpine(Java.to([doubleToFloat(-15.2),doubleToFloat(1.4),doubleToFloat(2.2),doubleToFloat(-12),doubleToFloat(-0.8),doubleToFloat(2.2)], Java.type("float[]"))))))))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-1.7)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(-17),doubleToFloat(-4.5),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Transform().setScale(Java.to([doubleToFloat(0.2),doubleToFloat(0.2),doubleToFloat(0.2)], Java.type("float[]")))
                .addComments(new CommentsBlock("Knot"))
                .addChild(new Shape().setUSE("Torus"))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-1),doubleToFloat(0),doubleToFloat(1.7)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setGeometry(new Sphere().setRadius(1.5))
                    .setAppearance(new Appearance().setUSE("rope"))))))
            .addChild(new Transform().setDEF("RnS")
              .addChild(new Transform().setDEF("ropes")
                .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-0.82)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(7),doubleToFloat(-26),doubleToFloat(-2.5)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setAppearance(new Appearance().setUSE("rope"))
                    .setGeometry(new Extrusion().setBeginCap(false).setCreaseAngle(0.76).setCrossSection(Java.to([doubleToFloat(0.1),doubleToFloat(0),doubleToFloat(0.092),doubleToFloat(-0.038),doubleToFloat(0.071),doubleToFloat(-0.071),doubleToFloat(0.038),doubleToFloat(-0.092),doubleToFloat(0),doubleToFloat(-0.1),doubleToFloat(-0.038),doubleToFloat(-0.092),doubleToFloat(-0.071),doubleToFloat(-0.071),doubleToFloat(-0.092),doubleToFloat(-0.038),doubleToFloat(-0.1),doubleToFloat(0),doubleToFloat(-0.092),doubleToFloat(0.038),doubleToFloat(-0.071),doubleToFloat(0.071),doubleToFloat(-0.038),doubleToFloat(0.092),doubleToFloat(0),doubleToFloat(0.1),doubleToFloat(0.038),doubleToFloat(0.092),doubleToFloat(0.071),doubleToFloat(0.071),doubleToFloat(0.092),doubleToFloat(0.038),doubleToFloat(0.1),doubleToFloat(0)], Java.type("float[]"))).setEndCap(false).setSolid(false).setSpine(Java.to([doubleToFloat(-33),doubleToFloat(0.9),doubleToFloat(2.5),doubleToFloat(-18.5),doubleToFloat(1.9),doubleToFloat(2.55)], Java.type("float[]")))))
                  .addChild(new Shape()
                    .setAppearance(new Appearance().setUSE("rope"))
                    .setGeometry(new Extrusion().setBeginCap(false).setCreaseAngle(0.76).setCrossSection(Java.to([doubleToFloat(0.1),doubleToFloat(0),doubleToFloat(0.092),doubleToFloat(-0.038),doubleToFloat(0.071),doubleToFloat(-0.071),doubleToFloat(0.038),doubleToFloat(-0.092),doubleToFloat(0),doubleToFloat(-0.1),doubleToFloat(-0.038),doubleToFloat(-0.092),doubleToFloat(-0.071),doubleToFloat(-0.071),doubleToFloat(-0.092),doubleToFloat(-0.038),doubleToFloat(-0.1),doubleToFloat(0),doubleToFloat(-0.092),doubleToFloat(0.038),doubleToFloat(-0.071),doubleToFloat(0.071),doubleToFloat(-0.038),doubleToFloat(0.092),doubleToFloat(0),doubleToFloat(0.1),doubleToFloat(0.038),doubleToFloat(0.092),doubleToFloat(0.071),doubleToFloat(0.071),doubleToFloat(0.092),doubleToFloat(0.038),doubleToFloat(0.1),doubleToFloat(0)], Java.type("float[]"))).setEndCap(false).setSolid(false).setSpine(Java.to([doubleToFloat(-35.7),doubleToFloat(-0.8),doubleToFloat(2.5),doubleToFloat(-18.8),doubleToFloat(-0.8),doubleToFloat(2.55)], Java.type("float[]")))))))
              .addChild(new Transform().setDEF("sling").setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-0.82)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(-4),doubleToFloat(-15.3),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Transform()
                  .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(-1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(1),doubleToFloat(1.3),doubleToFloat(1)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0.5),doubleToFloat(0),doubleToFloat(-1)], Java.type("float[]")))
                    .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]")))
                      .addChild(new Transform().setScale(Java.to([doubleToFloat(0.3),doubleToFloat(0.3),doubleToFloat(0.3)], Java.type("float[]")))
                        .addChild(new Shape().setDEF("halfsling")
                          .setAppearance(new Appearance().setDEF("clear")
                            .setMaterial(new Material().setTransparency(0.5)))
                          .setGeometry(new Extrusion().setCrossSection(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0),doubleToFloat(5),doubleToFloat(0.5),doubleToFloat(7),doubleToFloat(1),doubleToFloat(8),doubleToFloat(2),doubleToFloat(9),doubleToFloat(3),doubleToFloat(11),doubleToFloat(3.5),doubleToFloat(11.2),doubleToFloat(4),doubleToFloat(11),doubleToFloat(5),doubleToFloat(9),doubleToFloat(6),doubleToFloat(8),doubleToFloat(6.5),doubleToFloat(7),doubleToFloat(6.7),doubleToFloat(5),doubleToFloat(6.7),doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setSpine(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))
                        .addChild(new Transform().setScale(Java.to([doubleToFloat(0.3),doubleToFloat(0.3),doubleToFloat(0.3)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-3.5),doubleToFloat(11.5)], Java.type("float[]")))
                          .addChild(new Shape().setUSE("Torus"))
                          .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(2)], Java.type("float[]")))
                            .addChild(new Shape()
                              .setAppearance(new Appearance().setUSE("rope"))
                              .setGeometry(new Sphere().setRadius(1.5))))))
                      .addChild(new Transform().setScale(Java.to([doubleToFloat(0.3),doubleToFloat(0.3),doubleToFloat(0.3)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(2),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                        .addChild(new Shape().setUSE("halfsling"))
                        .addChild(new Transform().setScale(Java.to([doubleToFloat(0.3),doubleToFloat(0.3),doubleToFloat(0.3)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-3.5),doubleToFloat(11.3)], Java.type("float[]")))
                          .addChild(new Shape().setUSE("Torus"))
                          .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(2)], Java.type("float[]")))
                            .addChild(new Shape()
                              .setAppearance(new Appearance().setUSE("rope"))
                              .setGeometry(new Sphere().setRadius(1.5))))))
                      .addChild(new Transform().setTranslation(Java.to([doubleToFloat(1),doubleToFloat(-1),doubleToFloat(0)], Java.type("float[]")))
                        .addChild(new Shape()
                          .setGeometry(new Extrusion().setBeginCap(false).setCreaseAngle(0.785).setCrossSection(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0.92),doubleToFloat(-0.38),doubleToFloat(0.71),doubleToFloat(-0.71),doubleToFloat(0.38),doubleToFloat(-0.92),doubleToFloat(0),doubleToFloat(-1),doubleToFloat(-0.38),doubleToFloat(-0.92),doubleToFloat(-0.71),doubleToFloat(-0.71),doubleToFloat(-0.92),doubleToFloat(-0.38),doubleToFloat(-1),doubleToFloat(0)], Java.type("float[]"))).setEndCap(false).setSolid(false).setSpine(Java.to([doubleToFloat(0),doubleToFloat(-1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(0)], Java.type("float[]"))))
                          .setAppearance(new Appearance().setUSE("clear")))))
                    .addChild(new TouchSensor().setDEF("LauncheeChoice").setDescription("launcher choice")))
                  .addChild(new Transform().setDEF("projectiletransform").setScale(Java.to([doubleToFloat(0.01),doubleToFloat(0.01),doubleToFloat(0.01)], Java.type("float[]")))
                    .addChild(new Switch().setDEF("projectile").setWhichChoice(0)
                      .addChild(new Group()
                        .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0.7),doubleToFloat(0)], Java.type("float[]")))
                          .addChild(new Shape()
                            .setGeometry(new Sphere().setRadius(0.7))
                            .setAppearance(new Appearance().setDEF("black")
                              .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setSpecularColor(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))))))
                      .addChild(new Group()
                        .addChild(new Transform()
                          .addChild(new Inline().setUrl(Java.to(["cow.wrl","http://www.uoguelph.ca/~dchiu/cow.wrl"], Java.type("java.lang.String[]"))))))
                      .addChild(new Group()
                        .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.4),doubleToFloat(0.4),doubleToFloat(0.4)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0.7),doubleToFloat(0)], Java.type("float[]")))
                          .addChild(new Inline().setUrl(Java.to(["vrml_ginger.wrl","http://home.inreach.com/ntamura/vrml/vrml_ginger.wrl"], Java.type("java.lang.String[]"))))))))))))
          .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(18),doubleToFloat(2.5)], Java.type("float[]")))
            .addChild(new Shape()
              .setGeometry(new Cylinder().setHeight(8).setRadius(0.4))
              .setAppearance(new Appearance()
                .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setSpecularColor(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))))
            .addComments(new CommentsBlock("Top Pivot")))
          .addChild(new Transform().setDEF("verticalweight")
            .addChild(new Transform().setTranslation(Java.to([doubleToFloat(4),doubleToFloat(18),doubleToFloat(1.8)], Java.type("float[]")))
              .addChild(new Shape()
                .setGeometry(new Box().setSize(Java.to([doubleToFloat(1),doubleToFloat(10),doubleToFloat(0.5)], Java.type("float[]"))))
                .setAppearance(new Appearance().setUSE("wood"))))
            .addChild(new Transform().setTranslation(Java.to([doubleToFloat(4),doubleToFloat(18),doubleToFloat(3.2)], Java.type("float[]")))
              .addChild(new Shape()
                .setGeometry(new Box().setSize(Java.to([doubleToFloat(1),doubleToFloat(10),doubleToFloat(0.5)], Java.type("float[]"))))
                .setAppearance(new Appearance().setUSE("wood"))))
            .addChild(new Transform().setTranslation(Java.to([doubleToFloat(4),doubleToFloat(14),doubleToFloat(2.5)], Java.type("float[]")))
              .addComments(new CommentsBlock("CounterWeight"))
              .addChild(new Shape()
                .setGeometry(new Cylinder().setHeight(4).setRadius(1.5))
                .setAppearance(new Appearance()
                  .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setSpecularColor(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]")))))))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(4),doubleToFloat(22),doubleToFloat(2.5)], Java.type("float[]")))
              .addChild(new Shape()
                .setGeometry(new Cylinder().setHeight(2.5).setRadius(0.3))
                .setAppearance(new Appearance()
                  .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setSpecularColor(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))))))
          .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.2),doubleToFloat(0.2),doubleToFloat(0.2)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(-11.5),doubleToFloat(-1),doubleToFloat(2)], Java.type("float[]")))
            .addChild(new Transform().setDEF("screw").setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]")))
              .addChild(new Shape().setUSE("Torus"))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(7)], Java.type("float[]")))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setHeight(10).setRadius(0.7))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setSpecularColor(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))))))
            .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(7)], Java.type("float[]")))
              .addChild(new Transform().setUSE("screw")))
            .addComments(new CommentsBlock("Release Pin"))
            .addChild(new Transform().setDEF("Pin").setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(-3)], Java.type("float[]")))
              .addChild(new Transform().setUSE("screw"))))
          .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(5)], Java.type("float[]")))
            .addChild(new Shape().setUSE("plank"))
            .addChild(new Transform().setUSE("angledsupport"))
            .addChild(new Transform().setUSE("angledsupport2"))
            .addChild(new Transform().setUSE("verticalsupport"))
            .addChild(new Transform().setUSE("horizontalsupport"))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.6),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-11),doubleToFloat(-2.5)], Java.type("float[]")))
              .addChild(new Transform().setUSE("horizontalsupport")))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-1.57)], Java.type("float[]"))).setScale(Java.to([doubleToFloat(0.6),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(5),doubleToFloat(-10)], Java.type("float[]")))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(0.4)], Java.type("float[]")))
                .addChild(new Shape().setUSE("plank"))))
            .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.6)], Java.type("float[]")))
              .addChild(new Transform().setUSE("panel"))))
          .addChild(new Transform().setTranslation(Java.to([doubleToFloat(10),doubleToFloat(-1),doubleToFloat(2.5)], Java.type("float[]")))
            .addChild(new Shape().setDEF("Axle")
              .setGeometry(new Box().setSize(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(8)], Java.type("float[]"))))
              .setAppearance(new Appearance().setUSE("wood")))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(4.5)], Java.type("float[]")))
              .addChild(new Shape().setDEF("wheel")
                .setGeometry(new Cylinder().setRadius(2))
                .setAppearance(new Appearance().setUSE("wood")))
              .addChild(new Shape().setDEF("tracks")
                .setGeometry(new Sphere().setRadius(1.5))
                .setAppearance(new Appearance().setUSE("black")))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0.55),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Shape().setDEF("hub")
                  .setGeometry(new Sphere().setRadius(1.5))
                  .setAppearance(new Appearance().setUSE("black")))))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(-4.5)], Java.type("float[]")))
              .addChild(new Shape().setUSE("wheel"))
              .addChild(new Shape().setUSE("tracks"))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-0.55),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Shape().setUSE("hub")))))
          .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-10),doubleToFloat(-1),doubleToFloat(2.5)], Java.type("float[]")))
            .addChild(new Shape().setUSE("Axle"))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(4.5)], Java.type("float[]")))
              .addChild(new Shape().setUSE("wheel"))
              .addChild(new Shape().setUSE("tracks"))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0.55),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Shape().setUSE("hub"))))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(-4.5)], Java.type("float[]")))
              .addChild(new Shape().setUSE("wheel"))
              .addChild(new Shape().setUSE("tracks"))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-0.55),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Shape().setUSE("hub"))))
            .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(-0.6)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(100),doubleToFloat(400)], Java.type("float[]")))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(1),doubleToFloat(3),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Viewpoint().setDescription("Side")))
              .addChild(new Transform().setUSE("launch"))
              .addChild(new Transform()
                .addChild(new TouchSensor().setUSE("LauncheeChoice"))
                .addChild(new Switch().setUSE("projectilename"))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(2.5),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setGeometry(new Box().setSize(Java.to([doubleToFloat(5),doubleToFloat(0.5),doubleToFloat(0.5)], Java.type("float[]"))))
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setTransparency(1))))))
              .addChild(new Transform().setScale(Java.to([doubleToFloat(0.5),doubleToFloat(0.5),doubleToFloat(0.5)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-1),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new TouchSensor().setUSE("weightselector"))
                .addChild(new Switch().setUSE("Weight"))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(8),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setGeometry(new Box().setSize(Java.to([doubleToFloat(17),doubleToFloat(1),doubleToFloat(0.5)], Java.type("float[]"))))
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setTransparency(1)))))))
            .addChild(new Transform().setDEF("ProjectileTransform").setTranslation(Java.to([doubleToFloat(14.25),doubleToFloat(1.25),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Switch().setUSE("projectile"))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]"))).setTranslation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Viewpoint().setDescription("Projectile Cam").setPosition(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(15)], Java.type("float[]"))))))
            .addChild(new Transform().setTranslation(Java.to([doubleToFloat(20),doubleToFloat(2),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Transform().setDEF("Front").setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Viewpoint().setDescription("Fore"))))
            .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-8),doubleToFloat(4),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(-1.57)], Java.type("float[]")))
                .addChild(new Viewpoint().setDescription("Aft"))))
            .addChild(new Script().setDEF("WeightScript")
              .addField(new field().setType(field.TYPE_SFBOOL).setName("set_boolean").setAccessType(field.ACCESSTYPE_INPUTONLY))
              .addField(new field().setType(field.TYPE_SFINT32).setName("whichchoice").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("CounterWeight").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
              .setSourceCode(`ecmascript:


function initialize ()
{
	whichchoice =0;
	CounterWeight=100;
}

function set_boolean ( boolean_input, eventTime)
{

	if ( boolean_input== false ) { return; } // ignore the unclick
        whichchoice = whichchoice +1;
	if (whichchoice == 0)CounterWeight=50.00;
	if (whichchoice == 1)CounterWeight=500.00;
	if (whichchoice == 2)CounterWeight=1000.00;
	if (whichchoice == 3)CounterWeight=10000.00;
        if ( whichchoice ==4 ) { whichchoice = 0; CounterWeight=50; }


        Browser.println ('CounterWeight ='+CounterWeight);
}`))
            .addChild(new Script().setDEF("LauncheeScript")
              .addField(new field().setType(field.TYPE_SFBOOL).setName("set_boolean").setAccessType(field.ACCESSTYPE_INPUTONLY))
              .addField(new field().setType(field.TYPE_SFINT32).setName("whichchoice").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("ProjectileWeight").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
              .setSourceCode(`ecmascript:

function set_boolean (boolean_input, eventTime)
{
	if ( boolean_input== false ) { return; } // ignore unclick
        whichchoice = whichchoice +1;
        if (whichchoice == 0)ProjectileWeight=10.00;
        if (whichchoice == 1)ProjectileWeight=1000.00;
	if (whichchoice == 2)ProjectileWeight=5;

	if ( whichchoice ==3 ) { whichchoice = 0; ProjectileWeight=10.00; }
	Browser.println ('Projectile Weight'+ProjectileWeight);
}`))
            .addChild(new Script().setDEF("PigdogMonkScript")
              .addField(new field().setType(field.TYPE_SFBOOL).setName("set_boolean").setAccessType(field.ACCESSTYPE_INPUTONLY))
              .addField(new field().setType(field.TYPE_SFINT32).setName("whichchoice").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
              .setSourceCode(`ecmascript:

function set_boolean (boolean_input, eventTime)
{
	if ( boolean_input== false ) { return; } // ignore unclick

        whichchoice = whichchoice +1;

        if ( whichchoice ==2 )  whichchoice = 0;


}`))
            .addChild(new Script().setDEF("Mover")
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("set_fraction").setAccessType(field.ACCESSTYPE_INPUTONLY))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("set_MassCounterWeight").setAccessType(field.ACCESSTYPE_INPUTONLY))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("set_MassProjectileWeight").setAccessType(field.ACCESSTYPE_INPUTONLY))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("MassCounterWeight").setAccessType(field.ACCESSTYPE_INITIALIZEONLY).setValue("1"))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("MassProjectileWeight").setAccessType(field.ACCESSTYPE_INITIALIZEONLY).setValue("1"))
              .addField(new field().setType(field.TYPE_SFVEC3F).setName("transparent").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
              .addField(new field().setType(field.TYPE_SFVEC3F).setName("value_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
              .setSourceCode(`ecmascript:

function initialize ()
{
	MassCounterWeight=100;
	MassProjectileWeight=10;
	Browser.println ('MassCounterWeight =' + MassCounterWeight);
	Browser.println ('MassProjectileWeight =' + MassProjectileWeight);
}

function set_MassProjectileWeight (value, timestamp)
{
	MassProjectileWeight = value;
	Browser.println ('new MassProjectileWeight =' + MassProjectileWeight);
}
function set_MassCounterWeight (value2, timestamp)
{
	MassCounterWeight = value2;
	Browser.println ('new MassCounterWeight =' + MassCounterWeight);
}


function set_fraction ( fraction, eventTime )
{
	var TrebuchetHeight=45;
	var Height =25;
      	x = (2*(MassCounterWeight/MassProjectileWeight)*Height*fraction)-.5*TrebuchetHeight;
	// start at TrebuchetHeight and keep along z axis (z=zero)
	y =  (MassCounterWeight/MassProjectileWeight)*Height*Math.sin(fraction*3.14);
        z = 0;
        transparent = new SFVec3f (1,1,1);
     if (y <1.5*TrebuchetHeight  )if (x<TrebuchetHeight)
		{
		x=x-10;
		y=y+1;
		transparent = new SFVec3f(.01, .01, .01);
			}

	value_changed = new SFVec3f (x, y, z);
	Browser.println ('x=' + value_changed[0] + ' y=' + value_changed[1] + ' z=' + value_changed[2]);
}`))))
        .addChild(new TimeSensor().setDEF("clock").setCycleInterval(10))
        .addChild(new PositionInterpolator().setDEF("verticalweightpath").setKey(Java.to([doubleToFloat(0),doubleToFloat(0.1),doubleToFloat(0.2),doubleToFloat(0.2),doubleToFloat(0.3),doubleToFloat(0.9)], Java.type("float[]"))).setKeyValue(Java.to([doubleToFloat(1.4),doubleToFloat(1.6),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-8),doubleToFloat(0),doubleToFloat(-3.5),doubleToFloat(-12),doubleToFloat(0),doubleToFloat(-3.5),doubleToFloat(-12),doubleToFloat(0),doubleToFloat(1.2),doubleToFloat(-8),doubleToFloat(0),doubleToFloat(1.4),doubleToFloat(1.6),doubleToFloat(0)], Java.type("float[]"))))
        .addChild(new OrientationInterpolator().setDEF("flingerangles").setKey(Java.to([doubleToFloat(0),doubleToFloat(0.1),doubleToFloat(0.2),doubleToFloat(0.2),doubleToFloat(0.3),doubleToFloat(0.9)], Java.type("float[]"))).setKeyValue(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(0.82),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-0.77),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-1.57),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-1.57),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-0.77),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(0.82)], Java.type("float[]"))))
        .addChild(new PositionInterpolator().setDEF("pinpath").setKey(Java.to([doubleToFloat(0),doubleToFloat(0.01),doubleToFloat(0.95),doubleToFloat(1)], Java.type("float[]"))).setKeyValue(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(-3),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-10),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-10),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-3)], Java.type("float[]"))))
        .addChild(new OrientationInterpolator().setDEF("RnSAngels").setKey(Java.to([doubleToFloat(0),doubleToFloat(0.7),doubleToFloat(1)], Java.type("float[]"))).setKeyValue(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(-3.14),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(0)], Java.type("float[]"))))
        .addChild(new PositionInterpolator().setDEF("invisiable").setKey(Java.to([doubleToFloat(0),doubleToFloat(0.2),doubleToFloat(0.98),doubleToFloat(0.99)], Java.type("float[]"))).setKeyValue(Java.to([doubleToFloat(1),doubleToFloat(1),doubleToFloat(1),doubleToFloat(0.01),doubleToFloat(0.01),doubleToFloat(0.01),doubleToFloat(0.01),doubleToFloat(0.01),doubleToFloat(0.01),doubleToFloat(1),doubleToFloat(1),doubleToFloat(1)], Java.type("float[]"))))
        .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("clock").setToField("set_fraction").setToNode("invisiable"))
        .addChild(new ROUTE().setFromField("value_changed").setFromNode("invisiable").setToField("set_scale").setToNode("projectiletransform"))
        .addChild(new ROUTE().setFromField("CounterWeight").setFromNode("WeightScript").setToField("set_MassCounterWeight").setToNode("Mover"))
        .addChild(new ROUTE().setFromField("ProjectileWeight").setFromNode("LauncheeScript").setToField("set_MassProjectileWeight").setToNode("Mover"))
        .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("clock").setToField("set_fraction").setToNode("Mover"))
        .addChild(new ROUTE().setFromField("value_changed").setFromNode("Mover").setToField("set_translation").setToNode("ProjectileTransform"))
        .addChild(new ROUTE().setFromField("transparent").setFromNode("Mover").setToField("set_scale").setToNode("ProjectileTransform"))
        .addChild(new ROUTE().setFromField("touchTime").setFromNode("Launch").setToField("set_startTime").setToNode("clock"))
        .addChild(new ROUTE().setFromField("isActive").setFromNode("Launch").setToField("set_boolean").setToNode("PigdogMonkScript"))
        .addChild(new ROUTE().setFromField("touchTime").setFromNode("Launch").setToField("set_startTime").setToNode("PigDogSound"))
        .addChild(new ROUTE().setFromField("touchTime").setFromNode("Launch").setToField("set_startTime").setToNode("MonkSound"))
        .addChild(new ROUTE().setFromField("whichchoice").setFromNode("PigdogMonkScript").setToField("whichChoice").setToNode("PigdogMonk"))
        .addChild(new ROUTE().setFromField("touchTime").setFromNode("LauncheeChoice").setToField("set_startTime").setToNode("HolyHandGrenadeSound"))
        .addChild(new ROUTE().setFromField("touchTime").setFromNode("LauncheeChoice").setToField("set_startTime").setToNode("CowSound"))
        .addChild(new ROUTE().setFromField("touchTime").setFromNode("LauncheeChoice").setToField("set_startTime").setToNode("HamsterSound"))
        .addChild(new ROUTE().setFromField("isActive").setFromNode("LauncheeChoice").setToField("set_boolean").setToNode("LauncheeScript"))
        .addChild(new ROUTE().setFromField("whichchoice").setFromNode("LauncheeScript").setToField("whichChoice").setToNode("projectile"))
        .addChild(new ROUTE().setFromField("whichchoice").setFromNode("LauncheeScript").setToField("whichChoice").setToNode("projectilename"))
        .addChild(new ROUTE().setFromField("isActive").setFromNode("weightselector").setToField("set_boolean").setToNode("WeightScript"))
        .addChild(new ROUTE().setFromField("whichchoice").setFromNode("WeightScript").setToField("whichChoice").setToNode("Weight"))
        .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("clock").setToField("set_fraction").setToNode("flingerangles"))
        .addChild(new ROUTE().setFromField("value_changed").setFromNode("flingerangles").setToField("set_rotation").setToNode("flinger"))
        .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("clock").setToField("set_fraction").setToNode("verticalweightpath"))
        .addChild(new ROUTE().setFromField("value_changed").setFromNode("verticalweightpath").setToField("set_translation").setToNode("verticalweight"))
        .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("clock").setToField("set_fraction").setToNode("pinpath"))
        .addChild(new ROUTE().setFromField("value_changed").setFromNode("pinpath").setToField("set_translation").setToNode("Pin")))      ;
    X3D0.toFileX3D("../data/Trebuchet.new.graal.x3d");
    X3D0.toFileJSON("../data/Trebuchet.new.graal.json");
