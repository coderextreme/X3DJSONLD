CommentsBlock = Java.type("org.web3d.x3d.jsail.Core.CommentsBlock")
AcousticProperties = Java.type('org.web3d.x3d.jsail.Shape.AcousticProperties')
Analyser = Java.type('org.web3d.x3d.jsail.Sound.Analyser')
Anchor = Java.type('org.web3d.x3d.jsail.Networking.Anchor')
Appearance = Java.type('org.web3d.x3d.jsail.Shape.Appearance')
Arc2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Arc2D')
ArcClose2D = Java.type('org.web3d.x3d.jsail.Geometry2D.ArcClose2D')
AudioClip = Java.type('org.web3d.x3d.jsail.Sound.AudioClip')
AudioDestination = Java.type('org.web3d.x3d.jsail.Sound.AudioDestination')
Background = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.Background')
BallJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.BallJoint')
Billboard = Java.type('org.web3d.x3d.jsail.Navigation.Billboard')
BiquadFilter = Java.type('org.web3d.x3d.jsail.Sound.BiquadFilter')
BlendedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.BlendedVolumeStyle')
BooleanFilter = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanFilter')
BooleanSequencer = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanSequencer')
BooleanToggle = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanToggle')
BooleanTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanTrigger')
BoundaryEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.BoundaryEnhancementVolumeStyle')
BoundedPhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.BoundedPhysicsModel')
Box = Java.type('org.web3d.x3d.jsail.Geometry3D.Box')
BufferAudioSource = Java.type('org.web3d.x3d.jsail.Sound.BufferAudioSource')
CADAssembly = Java.type('org.web3d.x3d.jsail.CADGeometry.CADAssembly')
CADFace = Java.type('org.web3d.x3d.jsail.CADGeometry.CADFace')
CADLayer = Java.type('org.web3d.x3d.jsail.CADGeometry.CADLayer')
CADPart = Java.type('org.web3d.x3d.jsail.CADGeometry.CADPart')
CartoonVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.CartoonVolumeStyle')
ChannelMerger = Java.type('org.web3d.x3d.jsail.Sound.ChannelMerger')
ChannelSelector = Java.type('org.web3d.x3d.jsail.Sound.ChannelSelector')
ChannelSplitter = Java.type('org.web3d.x3d.jsail.Sound.ChannelSplitter')
Circle2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Circle2D')
ClipPlane = Java.type('org.web3d.x3d.jsail.Rendering.ClipPlane')
CollidableOffset = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollidableOffset')
CollidableShape = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollidableShape')
Collision = Java.type('org.web3d.x3d.jsail.Navigation.Collision')
CollisionCollection = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionCollection')
CollisionSensor = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSensor')
CollisionSpace = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSpace')
Color = Java.type('org.web3d.x3d.jsail.Rendering.Color')
ColorChaser = Java.type('org.web3d.x3d.jsail.Followers.ColorChaser')
ColorDamper = Java.type('org.web3d.x3d.jsail.Followers.ColorDamper')
ColorInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.ColorInterpolator')
ColorRGBA = Java.type('org.web3d.x3d.jsail.Rendering.ColorRGBA')
ComposedCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.ComposedCubeMapTexture')
ComposedShader = Java.type('org.web3d.x3d.jsail.Shaders.ComposedShader')
ComposedTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.ComposedTexture3D')
ComposedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ComposedVolumeStyle')
Cone = Java.type('org.web3d.x3d.jsail.Geometry3D.Cone')
ConeEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.ConeEmitter')
Contact = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.Contact')
Contour2D = Java.type('org.web3d.x3d.jsail.NURBS.Contour2D')
ContourPolyline2D = Java.type('org.web3d.x3d.jsail.NURBS.ContourPolyline2D')
Convolver = Java.type('org.web3d.x3d.jsail.Sound.Convolver')
Coordinate = Java.type('org.web3d.x3d.jsail.Rendering.Coordinate')
CoordinateChaser = Java.type('org.web3d.x3d.jsail.Followers.CoordinateChaser')
CoordinateDamper = Java.type('org.web3d.x3d.jsail.Followers.CoordinateDamper')
CoordinateDouble = Java.type('org.web3d.x3d.jsail.Rendering.CoordinateDouble')
CoordinateInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator')
CoordinateInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator2D')
Cylinder = Java.type('org.web3d.x3d.jsail.Geometry3D.Cylinder')
CylinderSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.CylinderSensor')
Delay = Java.type('org.web3d.x3d.jsail.Sound.Delay')
DirectionalLight = Java.type('org.web3d.x3d.jsail.Lighting.DirectionalLight')
DISEntityManager = Java.type('org.web3d.x3d.jsail.DIS.DISEntityManager')
DISEntityTypeMapping = Java.type('org.web3d.x3d.jsail.DIS.DISEntityTypeMapping')
Disk2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Disk2D')
DoubleAxisHingeJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.DoubleAxisHingeJoint')
DynamicsCompressor = Java.type('org.web3d.x3d.jsail.Sound.DynamicsCompressor')
EaseInEaseOut = Java.type('org.web3d.x3d.jsail.Interpolation.EaseInEaseOut')
EdgeEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.EdgeEnhancementVolumeStyle')
ElevationGrid = Java.type('org.web3d.x3d.jsail.Geometry3D.ElevationGrid')
EspduTransform = Java.type('org.web3d.x3d.jsail.DIS.EspduTransform')
ExplosionEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.ExplosionEmitter')
Extrusion = Java.type('org.web3d.x3d.jsail.Geometry3D.Extrusion')
FillProperties = Java.type('org.web3d.x3d.jsail.Shape.FillProperties')
FloatVertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.FloatVertexAttribute')
Fog = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.Fog')
FogCoordinate = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.FogCoordinate')
FontStyle = Java.type('org.web3d.x3d.jsail.Text.FontStyle')
ForcePhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.ForcePhysicsModel')
Gain = Java.type('org.web3d.x3d.jsail.Sound.Gain')
GeneratedCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.GeneratedCubeMapTexture')
GeoCoordinate = Java.type('org.web3d.x3d.jsail.Geospatial.GeoCoordinate')
GeoElevationGrid = Java.type('org.web3d.x3d.jsail.Geospatial.GeoElevationGrid')
GeoLocation = Java.type('org.web3d.x3d.jsail.Geospatial.GeoLocation')
GeoLOD = Java.type('org.web3d.x3d.jsail.Geospatial.GeoLOD')
GeoMetadata = Java.type('org.web3d.x3d.jsail.Geospatial.GeoMetadata')
GeoOrigin = Java.type('org.web3d.x3d.jsail.Geospatial.GeoOrigin')
GeoPositionInterpolator = Java.type('org.web3d.x3d.jsail.Geospatial.GeoPositionInterpolator')
GeoProximitySensor = Java.type('org.web3d.x3d.jsail.Geospatial.GeoProximitySensor')
GeoTouchSensor = Java.type('org.web3d.x3d.jsail.Geospatial.GeoTouchSensor')
GeoTransform = Java.type('org.web3d.x3d.jsail.Geospatial.GeoTransform')
GeoViewpoint = Java.type('org.web3d.x3d.jsail.Geospatial.GeoViewpoint')
Group = Java.type('org.web3d.x3d.jsail.Grouping.Group')
HAnimDisplacer = Java.type('org.web3d.x3d.jsail.HAnim.HAnimDisplacer')
HAnimHumanoid = Java.type('org.web3d.x3d.jsail.HAnim.HAnimHumanoid')
HAnimJoint = Java.type('org.web3d.x3d.jsail.HAnim.HAnimJoint')
HAnimMotion = Java.type('org.web3d.x3d.jsail.HAnim.HAnimMotion')
HAnimSegment = Java.type('org.web3d.x3d.jsail.HAnim.HAnimSegment')
HAnimSite = Java.type('org.web3d.x3d.jsail.HAnim.HAnimSite')
ImageCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.ImageCubeMapTexture')
ImageTexture = Java.type('org.web3d.x3d.jsail.Texturing.ImageTexture')
ImageTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.ImageTexture3D')
IndexedFaceSet = Java.type('org.web3d.x3d.jsail.Geometry3D.IndexedFaceSet')
IndexedLineSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedLineSet')
IndexedQuadSet = Java.type('org.web3d.x3d.jsail.CADGeometry.IndexedQuadSet')
IndexedTriangleFanSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleFanSet')
IndexedTriangleSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleSet')
IndexedTriangleStripSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleStripSet')
Inline = Java.type('org.web3d.x3d.jsail.Networking.Inline')
IntegerSequencer = Java.type('org.web3d.x3d.jsail.EventUtilities.IntegerSequencer')
IntegerTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.IntegerTrigger')
IsoSurfaceVolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.IsoSurfaceVolumeData')
KeySensor = Java.type('org.web3d.x3d.jsail.KeyDeviceSensor.KeySensor')
Layer = Java.type('org.web3d.x3d.jsail.Layering.Layer')
LayerSet = Java.type('org.web3d.x3d.jsail.Layering.LayerSet')
Layout = Java.type('org.web3d.x3d.jsail.Layout.Layout')
LayoutGroup = Java.type('org.web3d.x3d.jsail.Layout.LayoutGroup')
LayoutLayer = Java.type('org.web3d.x3d.jsail.Layout.LayoutLayer')
LinePickSensor = Java.type('org.web3d.x3d.jsail.Picking.LinePickSensor')
LineProperties = Java.type('org.web3d.x3d.jsail.Shape.LineProperties')
LineSet = Java.type('org.web3d.x3d.jsail.Rendering.LineSet')
ListenerPointSource = Java.type('org.web3d.x3d.jsail.Sound.ListenerPointSource')
LoadSensor = Java.type('org.web3d.x3d.jsail.Networking.LoadSensor')
LocalFog = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.LocalFog')
LOD = Java.type('org.web3d.x3d.jsail.Navigation.LOD')
Material = Java.type('org.web3d.x3d.jsail.Shape.Material')
Matrix3VertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.Matrix3VertexAttribute')
Matrix4VertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.Matrix4VertexAttribute')
MetadataBoolean = Java.type('org.web3d.x3d.jsail.Core.MetadataBoolean')
MetadataDouble = Java.type('org.web3d.x3d.jsail.Core.MetadataDouble')
MetadataFloat = Java.type('org.web3d.x3d.jsail.Core.MetadataFloat')
MetadataInteger = Java.type('org.web3d.x3d.jsail.Core.MetadataInteger')
MetadataSet = Java.type('org.web3d.x3d.jsail.Core.MetadataSet')
MetadataString = Java.type('org.web3d.x3d.jsail.Core.MetadataString')
MicrophoneSource = Java.type('org.web3d.x3d.jsail.Sound.MicrophoneSource')
MotorJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.MotorJoint')
MovieTexture = Java.type('org.web3d.x3d.jsail.Texturing.MovieTexture')
MultiTexture = Java.type('org.web3d.x3d.jsail.Texturing.MultiTexture')
MultiTextureCoordinate = Java.type('org.web3d.x3d.jsail.Texturing.MultiTextureCoordinate')
MultiTextureTransform = Java.type('org.web3d.x3d.jsail.Texturing.MultiTextureTransform')
NavigationInfo = Java.type('org.web3d.x3d.jsail.Navigation.NavigationInfo')
Normal = Java.type('org.web3d.x3d.jsail.Rendering.Normal')
NormalInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.NormalInterpolator')
NurbsCurve = Java.type('org.web3d.x3d.jsail.NURBS.NurbsCurve')
NurbsCurve2D = Java.type('org.web3d.x3d.jsail.NURBS.NurbsCurve2D')
NurbsOrientationInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsOrientationInterpolator')
NurbsPatchSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsPatchSurface')
NurbsPositionInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsPositionInterpolator')
NurbsSet = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSet')
NurbsSurfaceInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSurfaceInterpolator')
NurbsSweptSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSweptSurface')
NurbsSwungSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSwungSurface')
NurbsTextureCoordinate = Java.type('org.web3d.x3d.jsail.NURBS.NurbsTextureCoordinate')
NurbsTrimmedSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsTrimmedSurface')
OpacityMapVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.OpacityMapVolumeStyle')
OrientationChaser = Java.type('org.web3d.x3d.jsail.Followers.OrientationChaser')
OrientationDamper = Java.type('org.web3d.x3d.jsail.Followers.OrientationDamper')
OrientationInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.OrientationInterpolator')
OrthoViewpoint = Java.type('org.web3d.x3d.jsail.Navigation.OrthoViewpoint')
OscillatorSource = Java.type('org.web3d.x3d.jsail.Sound.OscillatorSource')
PackagedShader = Java.type('org.web3d.x3d.jsail.Shaders.PackagedShader')
ParticleSystem = Java.type('org.web3d.x3d.jsail.ParticleSystems.ParticleSystem')
PeriodicWave = Java.type('org.web3d.x3d.jsail.Sound.PeriodicWave')
PhysicalMaterial = Java.type('org.web3d.x3d.jsail.Shape.PhysicalMaterial')
PickableGroup = Java.type('org.web3d.x3d.jsail.Picking.PickableGroup')
PixelTexture = Java.type('org.web3d.x3d.jsail.Texturing.PixelTexture')
PixelTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.PixelTexture3D')
PlaneSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.PlaneSensor')
PointEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.PointEmitter')
PointLight = Java.type('org.web3d.x3d.jsail.Lighting.PointLight')
PointPickSensor = Java.type('org.web3d.x3d.jsail.Picking.PointPickSensor')
PointProperties = Java.type('org.web3d.x3d.jsail.Shape.PointProperties')
PointSet = Java.type('org.web3d.x3d.jsail.Rendering.PointSet')
Polyline2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Polyline2D')
PolylineEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.PolylineEmitter')
Polypoint2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Polypoint2D')
PositionChaser = Java.type('org.web3d.x3d.jsail.Followers.PositionChaser')
PositionChaser2D = Java.type('org.web3d.x3d.jsail.Followers.PositionChaser2D')
PositionDamper = Java.type('org.web3d.x3d.jsail.Followers.PositionDamper')
PositionDamper2D = Java.type('org.web3d.x3d.jsail.Followers.PositionDamper2D')
PositionInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.PositionInterpolator')
PositionInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.PositionInterpolator2D')
PrimitivePickSensor = Java.type('org.web3d.x3d.jsail.Picking.PrimitivePickSensor')
ProgramShader = Java.type('org.web3d.x3d.jsail.Shaders.ProgramShader')
ProjectionVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ProjectionVolumeStyle')
ProtoInstance = Java.type('org.web3d.x3d.jsail.Core.ProtoInstance')
ProximitySensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.ProximitySensor')
QuadSet = Java.type('org.web3d.x3d.jsail.CADGeometry.QuadSet')
ReceiverPdu = Java.type('org.web3d.x3d.jsail.DIS.ReceiverPdu')
Rectangle2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Rectangle2D')
RigidBody = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.RigidBody')
RigidBodyCollection = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.RigidBodyCollection')
ScalarChaser = Java.type('org.web3d.x3d.jsail.Followers.ScalarChaser')
ScalarDamper = Java.type('org.web3d.x3d.jsail.Followers.ScalarDamper')
ScalarInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.ScalarInterpolator')
ScreenFontStyle = Java.type('org.web3d.x3d.jsail.Layout.ScreenFontStyle')
ScreenGroup = Java.type('org.web3d.x3d.jsail.Layout.ScreenGroup')
Script = Java.type('org.web3d.x3d.jsail.Scripting.Script')
SegmentedVolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.SegmentedVolumeData')
ShadedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ShadedVolumeStyle')
ShaderPart = Java.type('org.web3d.x3d.jsail.Shaders.ShaderPart')
ShaderProgram = Java.type('org.web3d.x3d.jsail.Shaders.ShaderProgram')
Shape = Java.type('org.web3d.x3d.jsail.Shape.Shape')
SignalPdu = Java.type('org.web3d.x3d.jsail.DIS.SignalPdu')
SilhouetteEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.SilhouetteEnhancementVolumeStyle')
SingleAxisHingeJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.SingleAxisHingeJoint')
SliderJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.SliderJoint')
Sound = Java.type('org.web3d.x3d.jsail.Sound.Sound')
SpatialSound = Java.type('org.web3d.x3d.jsail.Sound.SpatialSound')
Sphere = Java.type('org.web3d.x3d.jsail.Geometry3D.Sphere')
SphereSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.SphereSensor')
SplinePositionInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator')
SplinePositionInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator2D')
SplineScalarInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SplineScalarInterpolator')
SpotLight = Java.type('org.web3d.x3d.jsail.Lighting.SpotLight')
SquadOrientationInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SquadOrientationInterpolator')
StaticGroup = Java.type('org.web3d.x3d.jsail.Grouping.StaticGroup')
StreamAudioDestination = Java.type('org.web3d.x3d.jsail.Sound.StreamAudioDestination')
StreamAudioSource = Java.type('org.web3d.x3d.jsail.Sound.StreamAudioSource')
StringSensor = Java.type('org.web3d.x3d.jsail.KeyDeviceSensor.StringSensor')
SurfaceEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.SurfaceEmitter')
Switch = Java.type('org.web3d.x3d.jsail.Grouping.Switch')
TexCoordChaser2D = Java.type('org.web3d.x3d.jsail.Followers.TexCoordChaser2D')
TexCoordDamper2D = Java.type('org.web3d.x3d.jsail.Followers.TexCoordDamper2D')
Text = Java.type('org.web3d.x3d.jsail.Text.Text')
TextureBackground = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.TextureBackground')
TextureCoordinate = Java.type('org.web3d.x3d.jsail.Texturing.TextureCoordinate')
TextureCoordinate3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureCoordinate3D')
TextureCoordinate4D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureCoordinate4D')
TextureCoordinateGenerator = Java.type('org.web3d.x3d.jsail.Texturing.TextureCoordinateGenerator')
TextureProjector = Java.type('org.web3d.x3d.jsail.TextureProjection.TextureProjector')
TextureProjectorParallel = Java.type('org.web3d.x3d.jsail.TextureProjection.TextureProjectorParallel')
TextureProperties = Java.type('org.web3d.x3d.jsail.Texturing.TextureProperties')
TextureTransform = Java.type('org.web3d.x3d.jsail.Texturing.TextureTransform')
TextureTransform3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureTransform3D')
TextureTransformMatrix3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureTransformMatrix3D')
TimeSensor = Java.type('org.web3d.x3d.jsail.Time.TimeSensor')
TimeTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.TimeTrigger')
ToneMappedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ToneMappedVolumeStyle')
TouchSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.TouchSensor')
Transform = Java.type('org.web3d.x3d.jsail.Grouping.Transform')
TransformSensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.TransformSensor')
TransmitterPdu = Java.type('org.web3d.x3d.jsail.DIS.TransmitterPdu')
TriangleFanSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleFanSet')
TriangleSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleSet')
TriangleSet2D = Java.type('org.web3d.x3d.jsail.Geometry2D.TriangleSet2D')
TriangleStripSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleStripSet')
TwoSidedMaterial = Java.type('org.web3d.x3d.jsail.Shape.TwoSidedMaterial')
UniversalJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.UniversalJoint')
UnlitMaterial = Java.type('org.web3d.x3d.jsail.Shape.UnlitMaterial')
Viewpoint = Java.type('org.web3d.x3d.jsail.Navigation.Viewpoint')
ViewpointGroup = Java.type('org.web3d.x3d.jsail.Navigation.ViewpointGroup')
Viewport = Java.type('org.web3d.x3d.jsail.Layering.Viewport')
VisibilitySensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.VisibilitySensor')
VolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.VolumeData')
VolumeEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.VolumeEmitter')
VolumePickSensor = Java.type('org.web3d.x3d.jsail.Picking.VolumePickSensor')
WaveShaper = Java.type('org.web3d.x3d.jsail.Sound.WaveShaper')
WindPhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.WindPhysicsModel')
WorldInfo = Java.type('org.web3d.x3d.jsail.Core.WorldInfo')
component = Java.type('org.web3d.x3d.jsail.Core.component')
connect = Java.type('org.web3d.x3d.jsail.Core.connect')
EXPORT = Java.type('org.web3d.x3d.jsail.Networking.EXPORT')
ExternProtoDeclare = Java.type('org.web3d.x3d.jsail.Core.ExternProtoDeclare')
field = Java.type('org.web3d.x3d.jsail.Core.field')
fieldValue = Java.type('org.web3d.x3d.jsail.Core.fieldValue')
head = Java.type('org.web3d.x3d.jsail.Core.head')
IMPORT = Java.type('org.web3d.x3d.jsail.Networking.IMPORT')
IS = Java.type('org.web3d.x3d.jsail.Core.IS')
meta = Java.type('org.web3d.x3d.jsail.Core.meta')
ProtoBody = Java.type('org.web3d.x3d.jsail.Core.ProtoBody')
ProtoDeclare = Java.type('org.web3d.x3d.jsail.Core.ProtoDeclare')
ProtoInterface = Java.type('org.web3d.x3d.jsail.Core.ProtoInterface')
ROUTE = Java.type('org.web3d.x3d.jsail.Core.ROUTE')
Scene = Java.type('org.web3d.x3d.jsail.Core.Scene')
unit = Java.type('org.web3d.x3d.jsail.Core.unit')
X3D = Java.type('org.web3d.x3d.jsail.Core.X3D')
SFBool = Java.type('org.web3d.x3d.jsail.fields.SFBool')
MFBool = Java.type('org.web3d.x3d.jsail.fields.MFBool')
SFColor = Java.type('org.web3d.x3d.jsail.fields.SFColor')
MFColor = Java.type('org.web3d.x3d.jsail.fields.MFColor')
SFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.SFColorRGBA')
MFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.MFColorRGBA')
SFDouble = Java.type('org.web3d.x3d.jsail.fields.SFDouble')
MFDouble = Java.type('org.web3d.x3d.jsail.fields.MFDouble')
SFFloat = Java.type('org.web3d.x3d.jsail.fields.SFFloat')
MFFloat = Java.type('org.web3d.x3d.jsail.fields.MFFloat')
SFImage = Java.type('org.web3d.x3d.jsail.fields.SFImage')
MFImage = Java.type('org.web3d.x3d.jsail.fields.MFImage')
SFInt32 = Java.type('org.web3d.x3d.jsail.fields.SFInt32')
MFInt32 = Java.type('org.web3d.x3d.jsail.fields.MFInt32')
SFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3d')
MFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3d')
SFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3f')
MFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3f')
SFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4d')
MFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4d')
SFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4f')
MFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4f')
SFNode = Java.type('org.web3d.x3d.jsail.fields.SFNode')
MFNode = Java.type('org.web3d.x3d.jsail.fields.MFNode')
SFRotation = Java.type('org.web3d.x3d.jsail.fields.SFRotation')
MFRotation = Java.type('org.web3d.x3d.jsail.fields.MFRotation')
SFString = Java.type('org.web3d.x3d.jsail.fields.SFString')
MFString = Java.type('org.web3d.x3d.jsail.fields.MFString')
SFTime = Java.type('org.web3d.x3d.jsail.fields.SFTime')
MFTime = Java.type('org.web3d.x3d.jsail.fields.MFTime')
SFVec2d = Java.type('org.web3d.x3d.jsail.fields.SFVec2d')
MFVec2d = Java.type('org.web3d.x3d.jsail.fields.MFVec2d')
SFVec2f = Java.type('org.web3d.x3d.jsail.fields.SFVec2f')
MFVec2f = Java.type('org.web3d.x3d.jsail.fields.MFVec2f')
SFVec3d = Java.type('org.web3d.x3d.jsail.fields.SFVec3d')
MFVec3d = Java.type('org.web3d.x3d.jsail.fields.MFVec3d')
SFVec3f = Java.type('org.web3d.x3d.jsail.fields.SFVec3f')
MFVec3f = Java.type('org.web3d.x3d.jsail.fields.MFVec3f')
SFVec4d = Java.type('org.web3d.x3d.jsail.fields.SFVec4d')
MFVec4d = Java.type('org.web3d.x3d.jsail.fields.MFVec4d')
SFVec4f = Java.type('org.web3d.x3d.jsail.fields.SFVec4f')
MFVec4f = Java.type('org.web3d.x3d.jsail.fields.MFVec4f')
var ConfigurationProperties = Packages.org.web3d.x3d.jsail.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
ConfigurationProperties.setStripDefaultAttributes(true);
function doubleToFloat(d) {
    if (Float32Array)
	return new Float32Array([d])[0];
}
      var X3D0 =  new X3D().setProfile("Immersive").setVersion("4.0")
      .setHead(new head()
        .addComponent(new component().setName("HAnim").setLevel(1))
        .addMeta(new meta().setName("title").setContent("KoreanCharacter02Chul.x3d"))
        .addMeta(new meta().setName("creator").setContent("Jin Hoon Lee and Min Joo Lee"))
        .addMeta(new meta().setName("translator").setContent("Chul Hee Jung and Myeong Won Lee"))
        .addMeta(new meta().setName("created").setContent("31 March 2011"))
        .addMeta(new meta().setName("translated").setContent("1 November 2014"))
        .addMeta(new meta().setName("modified").setContent("23 December 2021"))
        .addMeta(new meta().setName("description").setContent("Articulated 3D game character designed with a general graphics tool, then converted into an X3D HAnim model."))
        .addMeta(new meta().setName("reference").setContent("KoreanCharacter00ReadMe.txt"))
        .addMeta(new meta().setName("reference").setContent("KoreanCharacterHumanMotion_Infotech2014_140706.pdf"))
        .addMeta(new meta().setName("reference").setContent("KoreanCharactersIllustrated.pdf"))
        .addMeta(new meta().setName("identifier").setContent("https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Characters/KoreanCharacter02Chul.x3d"))
        .addMeta(new meta().setName("generator").setContent("3DS MAX, http://www.autodesk.com/products/autodesk-3ds-max/overview"))
        .addMeta(new meta().setName("generator").setContent("Suwon University HAnim Editor"))
        .addMeta(new meta().setName("generator").setContent("Gnu Image Manipulation Program, http://www.gimp.org"))
        .addMeta(new meta().setName("generator").setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"))
        .addMeta(new meta().setName("license").setContent("../license.html")))
      .setScene(new Scene()
        .addChild(new WorldInfo().setTitle("KoreanCharacter02Chul.x3d"))
        .addChild(new NavigationInfo().setSpeed(1.5))
        .addChild(new Viewpoint().setCenterOfRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0)], Java.type("float[]"))).setDescription("Chul").setPosition(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(3)], Java.type("float[]"))))
        .addChild(new HAnimHumanoid().setName("Chul").setDEF("hanim_Chul").setScale(Java.to([doubleToFloat(0.0225),doubleToFloat(0.0225),doubleToFloat(0.0225)], Java.type("float[]"))).setVersion("2.0")
          .addComments(new CommentsBlock("original HAnimHumanoid info='\"authorName=Chul Hee Jung and Myeong Won Lee\" \"authorEmail=myeongwonlee@gmail.com\" \"creationDate=31 March 2011\" \"humanoidVersion=2.0\" \"gender=male\" \"height=1.5\"'"))
          .setMetadata(new MetadataSet().setName("HAnimHumanoid.info").setReference("https://www.web3d.org/documents/specifications/19774/V2.0/Architecture/ObjectInterfaces.html#Humanoid")
            .addValue(new MetadataString().setName("authorName").setValue(Java.to(["Chul Hee Jung and Myeong Won Lee"], Java.type("java.lang.String[]"))))
            .addValue(new MetadataString().setName("authorEmail").setValue(Java.to(["myeongwonlee@gmail.com"], Java.type("java.lang.String[]"))))
            .addValue(new MetadataString().setName("creationDate").setValue(Java.to(["31 March 2011"], Java.type("java.lang.String[]"))))
            .addValue(new MetadataString().setName("gender").setValue(Java.to(["male"], Java.type("java.lang.String[]"))))
            .addValue(new MetadataFloat().setName("height").setValue(Java.to([doubleToFloat(1.5)], Java.type("float[]"))))
            .addValue(new MetadataString().setName("humanoidVersion").setValue(Java.to(["2.0"], Java.type("java.lang.String[]")))))
          .addSkeleton(new HAnimJoint("hanim_Chul").setName("humanoid_root").setDEF("hanim_humanoid_root").setCenter(Java.to([doubleToFloat(0),doubleToFloat(44.07),doubleToFloat(-1.034)], Java.type("float[]"))).setContainerFieldOverride("skeleton")
            .addChild(new HAnimSegment("hanim_humanoid_root").setName("sacrum").setDEF("hanim_sacrum")
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(44.07),doubleToFloat(-1.034)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                    .setTexture(new ImageTexture().setDEF("ChulTextureAtlas").setUrl(Java.to(["images/Chul.png","https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Characters/images/Chul.png"], Java.type("java.lang.String[]")))))
                  .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,7,-1,0,7,8,-1,0,8,9,-1,0,9,10,-1,0,10,11,-1,0,11,12,-1,0,12,1,-1,14,2,1,-1,1,13,14,-1,15,3,2,-1,2,14,15,-1,16,4,3,-1,3,15,16,-1,17,5,4,-1,4,16,17,-1,18,6,5,-1,5,17,18,-1,19,7,6,-1,6,18,19,-1,20,8,7,-1,7,19,20,-1,21,9,8,-1,8,20,21,-1,22,10,9,-1,9,21,22,-1,23,11,10,-1,10,22,23,-1,24,12,11,-1,11,23,24,-1,13,1,12,-1,12,24,13,-1,26,14,13,-1,13,25,26,-1,27,15,14,-1,14,26,27,-1,28,16,15,-1,15,27,28,-1,29,17,16,-1,16,28,29,-1,30,18,17,-1,17,29,30,-1,31,19,18,-1,18,30,31,-1,32,20,19,-1,19,31,32,-1,33,21,20,-1,20,32,33,-1,34,22,21,-1,21,33,34,-1,35,23,22,-1,22,34,35,-1,36,24,23,-1,23,35,36,-1,25,13,24,-1,24,36,25,-1,38,26,25,-1,25,37,38,-1,39,27,26,-1,26,38,39,-1,40,28,27,-1,27,39,40,-1,41,29,28,-1,28,40,41,-1,42,30,29,-1,29,41,42,-1,43,31,30,-1,30,42,43,-1,44,32,31,-1,31,43,44,-1,45,33,32,-1,32,44,45,-1,46,34,33,-1,33,45,46,-1,47,35,34,-1,34,46,47,-1,48,36,35,-1,35,47,48,-1,37,25,36,-1,36,48,37,-1,50,38,37,-1,37,49,50,-1,51,39,38,-1,38,50,51,-1,52,40,39,-1,39,51,52,-1,53,41,40,-1,40,52,53,-1,54,42,41,-1,41,53,54,-1,55,43,42,-1,42,54,55,-1,56,44,43,-1,43,55,56,-1,57,45,44,-1,44,56,57,-1,58,46,45,-1,45,57,58,-1,59,47,46,-1,46,58,59,-1,60,48,47,-1,47,59,60,-1,49,37,48,-1,48,60,49,-1,61,50,49,-1,61,51,50,-1,61,52,51,-1,61,53,52,-1,61,54,53,-1,61,55,54,-1,61,56,55,-1,61,57,56,-1,61,58,57,-1,61,59,58,-1,61,60,59,-1,61,49,60,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,7,-1,0,7,8,-1,0,8,9,-1,0,9,10,-1,0,10,11,-1,0,11,12,-1,0,12,1,-1,14,2,1,-1,1,13,14,-1,15,3,2,-1,2,14,15,-1,16,4,3,-1,3,15,16,-1,17,5,4,-1,4,16,17,-1,18,6,5,-1,5,17,18,-1,19,7,6,-1,6,18,19,-1,20,8,7,-1,7,19,20,-1,21,9,8,-1,8,20,21,-1,22,10,9,-1,9,21,22,-1,23,11,10,-1,10,22,23,-1,24,12,11,-1,11,23,24,-1,13,1,12,-1,12,24,13,-1,26,14,13,-1,13,25,26,-1,27,15,14,-1,14,26,27,-1,28,16,15,-1,15,27,28,-1,29,17,16,-1,16,28,29,-1,30,18,17,-1,17,29,30,-1,31,19,18,-1,18,30,31,-1,32,20,19,-1,19,31,32,-1,33,21,20,-1,20,32,33,-1,34,22,21,-1,21,33,34,-1,35,23,22,-1,22,34,35,-1,36,24,23,-1,23,35,36,-1,25,13,24,-1,24,36,25,-1,38,26,25,-1,25,37,38,-1,39,27,26,-1,26,38,39,-1,40,28,27,-1,27,39,40,-1,41,29,28,-1,28,40,41,-1,42,30,29,-1,29,41,42,-1,43,31,30,-1,30,42,43,-1,44,32,31,-1,31,43,44,-1,45,33,32,-1,32,44,45,-1,46,34,33,-1,33,45,46,-1,47,35,34,-1,34,46,47,-1,48,36,35,-1,35,47,48,-1,37,25,36,-1,36,48,37,-1,50,38,37,-1,37,49,50,-1,51,39,38,-1,38,50,51,-1,52,40,39,-1,39,51,52,-1,53,41,40,-1,40,52,53,-1,54,42,41,-1,41,53,54,-1,55,43,42,-1,42,54,55,-1,56,44,43,-1,43,55,56,-1,57,45,44,-1,44,56,57,-1,58,46,45,-1,45,57,58,-1,59,47,46,-1,46,58,59,-1,60,48,47,-1,47,59,60,-1,49,37,48,-1,48,60,49,-1,61,50,49,-1,61,51,50,-1,61,52,51,-1,61,53,52,-1,61,54,53,-1,61,55,54,-1,61,56,55,-1,61,57,56,-1,61,58,57,-1,61,59,58,-1,61,60,59,-1,61,49,60,-1], Java.type("int[]")))
                    .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0),doubleToFloat(0.87),doubleToFloat(0.0225),doubleToFloat(0),doubleToFloat(0.7535),doubleToFloat(-0.4472),doubleToFloat(-0.3613),doubleToFloat(0.7535),doubleToFloat(-0.3842),doubleToFloat(-0.6259),doubleToFloat(0.7535),doubleToFloat(-0.3083),doubleToFloat(-0.7227),doubleToFloat(0.7535),doubleToFloat(0.0225),doubleToFloat(-0.6259),doubleToFloat(0.7535),doubleToFloat(0.3534),doubleToFloat(-0.3613),doubleToFloat(0.7535),doubleToFloat(0.4293),doubleToFloat(0),doubleToFloat(0.7535),doubleToFloat(0.4922),doubleToFloat(0.3613),doubleToFloat(0.7535),doubleToFloat(0.4293),doubleToFloat(0.6259),doubleToFloat(0.7535),doubleToFloat(0.3534),doubleToFloat(0.7227),doubleToFloat(0.7535),doubleToFloat(0.0225),doubleToFloat(0.6259),doubleToFloat(0.7535),doubleToFloat(-0.3083),doubleToFloat(0.3613),doubleToFloat(0.7535),doubleToFloat(-0.3842),doubleToFloat(0),doubleToFloat(0.435),doubleToFloat(-0.7303),doubleToFloat(-0.4673),doubleToFloat(0.435),doubleToFloat(-0.6294),doubleToFloat(-0.8094),doubleToFloat(0.435),doubleToFloat(-0.3539),doubleToFloat(-0.9347),doubleToFloat(0.435),doubleToFloat(0.0225),doubleToFloat(-0.8094),doubleToFloat(0.435),doubleToFloat(0.399),doubleToFloat(-0.4673),doubleToFloat(0.435),doubleToFloat(0.5769),doubleToFloat(0),doubleToFloat(0.435),doubleToFloat(0.6777),doubleToFloat(0.4673),doubleToFloat(0.435),doubleToFloat(0.5769),doubleToFloat(0.8094),doubleToFloat(0.435),doubleToFloat(0.399),doubleToFloat(0.9347),doubleToFloat(0.435),doubleToFloat(0.0225),doubleToFloat(0.8094),doubleToFloat(0.435),doubleToFloat(-0.3539),doubleToFloat(0.4673),doubleToFloat(0.435),doubleToFloat(-0.6294),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-0.7942),doubleToFloat(-0.5396),doubleToFloat(0),doubleToFloat(-0.6777),doubleToFloat(-0.9347),doubleToFloat(0),doubleToFloat(-0.3596),doubleToFloat(-1.079),doubleToFloat(0),doubleToFloat(0.0225),doubleToFloat(-0.9347),doubleToFloat(0),doubleToFloat(0.4572),doubleToFloat(-0.5396),doubleToFloat(0),doubleToFloat(0.6777),doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.7942),doubleToFloat(0.5396),doubleToFloat(0),doubleToFloat(0.6777),doubleToFloat(0.9347),doubleToFloat(0),doubleToFloat(0.4572),doubleToFloat(1.079),doubleToFloat(0),doubleToFloat(0.0225),doubleToFloat(0.9347),doubleToFloat(0),doubleToFloat(-0.3596),doubleToFloat(0.5396),doubleToFloat(0),doubleToFloat(-0.6777),doubleToFloat(0),doubleToFloat(-0.435),doubleToFloat(-0.6777),doubleToFloat(-0.4673),doubleToFloat(-0.435),doubleToFloat(-0.5769),doubleToFloat(-0.8094),doubleToFloat(-0.435),doubleToFloat(-0.3013),doubleToFloat(-0.9347),doubleToFloat(-0.435),doubleToFloat(0.0225),doubleToFloat(-0.8094),doubleToFloat(-0.435),doubleToFloat(0.399),doubleToFloat(-0.4673),doubleToFloat(-0.435),doubleToFloat(0.5769),doubleToFloat(0),doubleToFloat(-0.435),doubleToFloat(0.6777),doubleToFloat(0.4673),doubleToFloat(-0.435),doubleToFloat(0.5769),doubleToFloat(0.8094),doubleToFloat(-0.435),doubleToFloat(0.399),doubleToFloat(0.9347),doubleToFloat(-0.435),doubleToFloat(0.0225),doubleToFloat(0.8094),doubleToFloat(-0.435),doubleToFloat(-0.3013),doubleToFloat(0.4673),doubleToFloat(-0.435),doubleToFloat(-0.5769),doubleToFloat(0),doubleToFloat(-0.7535),doubleToFloat(-0.3596),doubleToFloat(-0.2698),doubleToFloat(-0.7535),doubleToFloat(-0.3013),doubleToFloat(-0.4673),doubleToFloat(-0.7535),doubleToFloat(-0.1948),doubleToFloat(-0.5396),doubleToFloat(-0.7535),doubleToFloat(0.0225),doubleToFloat(-0.4673),doubleToFloat(-0.7535),doubleToFloat(0.2399),doubleToFloat(-0.2698),doubleToFloat(-0.7535),doubleToFloat(0.399),doubleToFloat(0),doubleToFloat(-0.7535),doubleToFloat(0.4572),doubleToFloat(0.2698),doubleToFloat(-0.7535),doubleToFloat(0.399),doubleToFloat(0.4673),doubleToFloat(-0.7535),doubleToFloat(0.2399),doubleToFloat(0.5396),doubleToFloat(-0.7535),doubleToFloat(0.0225),doubleToFloat(0.4673),doubleToFloat(-0.7535),doubleToFloat(-0.1948),doubleToFloat(0.2698),doubleToFloat(-0.7535),doubleToFloat(-0.3013),doubleToFloat(0),doubleToFloat(-0.87),doubleToFloat(0.0225)], Java.type("float[]"))))
                    .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.7418),doubleToFloat(0.2139),doubleToFloat(0.7309),doubleToFloat(0.2139),doubleToFloat(0.7342),doubleToFloat(0.26),doubleToFloat(0.7342),doubleToFloat(0.2938),doubleToFloat(0.7342),doubleToFloat(0.3062),doubleToFloat(0.7342),doubleToFloat(0.2938),doubleToFloat(0.7342),doubleToFloat(0.26),doubleToFloat(0.7309),doubleToFloat(0.2139),doubleToFloat(0.7343),doubleToFloat(0.2601),doubleToFloat(0.7343),doubleToFloat(0.2939),doubleToFloat(0.7343),doubleToFloat(0.3063),doubleToFloat(0.7343),doubleToFloat(0.2939),doubleToFloat(0.7343),doubleToFloat(0.2601),doubleToFloat(0.7157),doubleToFloat(0.2139),doubleToFloat(0.7156),doubleToFloat(0.2735),doubleToFloat(0.7156),doubleToFloat(0.3173),doubleToFloat(0.7156),doubleToFloat(0.3333),doubleToFloat(0.7156),doubleToFloat(0.3173),doubleToFloat(0.7156),doubleToFloat(0.2735),doubleToFloat(0.7157),doubleToFloat(0.2139),doubleToFloat(0.7157),doubleToFloat(0.2736),doubleToFloat(0.7157),doubleToFloat(0.3174),doubleToFloat(0.7157),doubleToFloat(0.3334),doubleToFloat(0.7157),doubleToFloat(0.3174),doubleToFloat(0.7157),doubleToFloat(0.2736),doubleToFloat(0.7015),doubleToFloat(0.2147),doubleToFloat(0.7014),doubleToFloat(0.2836),doubleToFloat(0.7014),doubleToFloat(0.3341),doubleToFloat(0.7014),doubleToFloat(0.3526),doubleToFloat(0.7014),doubleToFloat(0.3341),doubleToFloat(0.7014),doubleToFloat(0.2836),doubleToFloat(0.7015),doubleToFloat(0.2147),doubleToFloat(0.7015),doubleToFloat(0.2837),doubleToFloat(0.7015),doubleToFloat(0.3342),doubleToFloat(0.7015),doubleToFloat(0.3527),doubleToFloat(0.7015),doubleToFloat(0.3342),doubleToFloat(0.7015),doubleToFloat(0.2837),doubleToFloat(0.6609),doubleToFloat(0.2147),doubleToFloat(0.6608),doubleToFloat(0.2744),doubleToFloat(0.6608),doubleToFloat(0.3181),doubleToFloat(0.6608),doubleToFloat(0.3341),doubleToFloat(0.6608),doubleToFloat(0.3181),doubleToFloat(0.6608),doubleToFloat(0.2744),doubleToFloat(0.6609),doubleToFloat(0.2147),doubleToFloat(0.6609),doubleToFloat(0.2745),doubleToFloat(0.6609),doubleToFloat(0.3182),doubleToFloat(0.6609),doubleToFloat(0.3342),doubleToFloat(0.6609),doubleToFloat(0.3182),doubleToFloat(0.6609),doubleToFloat(0.2745),doubleToFloat(0.6312),doubleToFloat(0.2147),doubleToFloat(0.6311),doubleToFloat(0.2491),doubleToFloat(0.6311),doubleToFloat(0.2744),doubleToFloat(0.6311),doubleToFloat(0.2836),doubleToFloat(0.6311),doubleToFloat(0.2744),doubleToFloat(0.6311),doubleToFloat(0.2491),doubleToFloat(0.6312),doubleToFloat(0.2147),doubleToFloat(0.6312),doubleToFloat(0.2492),doubleToFloat(0.6312),doubleToFloat(0.2745),doubleToFloat(0.6312),doubleToFloat(0.2837),doubleToFloat(0.6312),doubleToFloat(0.2745),doubleToFloat(0.6312),doubleToFloat(0.2492),doubleToFloat(0.6204),doubleToFloat(0.2147)], Java.type("float[]"))))))))
            .addChild(new HAnimJoint("hanim_humanoid_root").setName("l_hip").setDEF("hanim_l_hip").setCenter(Java.to([doubleToFloat(4.001),doubleToFloat(41.139999),doubleToFloat(-1.119)], Java.type("float[]")))
              .addChild(new HAnimSegment("hanim_l_hip").setName("l_thigh").setDEF("hanim_l_thigh")
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(4.001),doubleToFloat(41.139999),doubleToFloat(-1.119)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                      .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                    .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([40,39,38,-1,38,37,36,-1,38,36,35,-1,40,38,35,-1,41,40,35,-1,0,1,8,-1,8,7,0,-1,1,2,9,-1,9,8,1,-1,2,3,10,-1,10,9,2,-1,3,4,11,-1,11,10,3,-1,4,5,12,-1,12,11,4,-1,5,6,13,-1,13,12,5,-1,6,0,7,-1,7,13,6,-1,7,8,15,-1,15,14,7,-1,8,9,16,-1,16,15,8,-1,9,10,17,-1,17,16,9,-1,10,11,18,-1,18,17,10,-1,11,12,19,-1,19,18,11,-1,12,13,20,-1,20,19,12,-1,13,7,14,-1,14,20,13,-1,14,15,107,-1,107,106,14,-1,15,16,108,-1,108,107,15,-1,16,17,109,-1,109,108,16,-1,17,18,110,-1,110,109,17,-1,18,19,111,-1,111,110,18,-1,19,20,112,-1,112,111,19,-1,20,14,106,-1,106,112,20,-1,29,28,106,-1,106,107,29,-1,30,29,107,-1,107,108,30,-1,31,30,108,-1,108,109,31,-1,32,31,109,-1,109,110,32,-1,33,32,110,-1,110,111,33,-1,34,33,111,-1,111,112,34,-1,28,34,112,-1,112,106,28,-1,35,36,1,-1,1,0,35,-1,36,37,2,-1,2,1,36,-1,37,38,3,-1,3,2,37,-1,38,39,4,-1,4,3,38,-1,39,40,5,-1,5,4,39,-1,40,41,6,-1,6,5,40,-1,41,35,0,-1,0,6,41,-1,113,43,21,-1,50,51,42,-1,115,113,22,-1,52,53,44,-1,116,115,23,-1,54,55,45,-1,117,116,24,-1,56,57,46,-1,118,117,25,-1,58,59,47,-1,119,118,26,-1,60,61,48,-1,43,119,27,-1,62,63,114,-1,122,64,65,-1,66,67,130,-1,121,68,69,-1,70,71,129,-1,123,72,73,-1,74,75,131,-1,124,76,77,-1,78,79,132,-1,125,80,81,-1,82,83,133,-1,126,84,85,-1,86,87,134,-1,127,88,89,-1,90,91,135,-1,43,113,140,-1,113,115,140,-1,115,116,140,-1,116,117,140,-1,117,118,140,-1,118,119,140,-1,119,43,140,-1,92,93,49,-1,94,95,120,-1,96,97,128,-1,98,99,136,-1,100,101,137,-1,102,103,138,-1,104,105,139,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([5,4,3,-1,3,2,0,-1,3,0,1,-1,5,3,1,-1,6,5,1,-1,7,10,8,-1,8,9,7,-1,10,12,11,-1,11,8,10,-1,12,14,13,-1,13,11,12,-1,14,16,15,-1,15,13,14,-1,16,18,17,-1,17,15,16,-1,18,20,19,-1,19,17,18,-1,20,7,9,-1,9,19,20,-1,9,8,21,-1,21,22,9,-1,8,11,23,-1,23,21,8,-1,11,13,24,-1,24,23,11,-1,13,15,25,-1,25,24,13,-1,15,17,26,-1,26,25,15,-1,17,19,27,-1,27,26,17,-1,19,9,22,-1,22,27,19,-1,22,21,28,-1,28,29,22,-1,21,23,30,-1,30,28,21,-1,23,24,31,-1,31,30,23,-1,24,25,32,-1,32,31,24,-1,25,26,33,-1,33,32,25,-1,26,27,34,-1,34,33,26,-1,27,22,29,-1,29,34,27,-1,35,36,29,-1,29,28,35,-1,37,35,28,-1,28,30,37,-1,38,37,30,-1,30,31,38,-1,39,38,31,-1,31,32,39,-1,40,39,32,-1,32,33,40,-1,41,40,33,-1,33,34,41,-1,36,41,34,-1,34,29,36,-1,1,0,10,-1,10,7,1,-1,0,2,12,-1,12,10,0,-1,2,3,14,-1,14,12,2,-1,3,4,16,-1,16,14,3,-1,4,5,18,-1,18,16,4,-1,5,6,20,-1,20,18,5,-1,6,1,7,-1,7,20,6,-1,42,43,29,-1,29,28,42,-1,44,42,28,-1,28,30,44,-1,45,44,30,-1,30,31,45,-1,46,45,31,-1,31,32,46,-1,47,46,32,-1,32,33,47,-1,48,47,33,-1,33,34,48,-1,43,48,34,-1,34,29,43,-1,43,42,28,-1,28,29,43,-1,42,44,30,-1,30,28,42,-1,44,45,31,-1,31,30,44,-1,45,46,32,-1,32,31,45,-1,46,47,33,-1,33,32,46,-1,47,48,34,-1,34,33,47,-1,48,43,29,-1,29,34,48,-1,43,42,49,-1,42,44,49,-1,44,45,49,-1,45,46,49,-1,46,47,49,-1,47,48,49,-1,48,43,49,-1,42,43,49,-1,44,42,49,-1,45,44,49,-1,46,45,49,-1,47,46,49,-1,48,47,49,-1,43,48,49,-1], Java.type("int[]")))
                      .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(2.64),doubleToFloat(0.923),doubleToFloat(0),doubleToFloat(1.465),doubleToFloat(0.923),doubleToFloat(2.862),doubleToFloat(-1.174),doubleToFloat(0.923),doubleToFloat(3.569),doubleToFloat(-3.002),doubleToFloat(0.923),doubleToFloat(1.588),doubleToFloat(-3.002),doubleToFloat(0.923),doubleToFloat(-1.588),doubleToFloat(-1.174),doubleToFloat(0.923),doubleToFloat(-3.569),doubleToFloat(1.465),doubleToFloat(0.923),doubleToFloat(-2.862),doubleToFloat(2.64),doubleToFloat(-2.421),doubleToFloat(0),doubleToFloat(1.465),doubleToFloat(-2.421),doubleToFloat(2.862),doubleToFloat(-1.174),doubleToFloat(-2.421),doubleToFloat(3.569),doubleToFloat(-3.002),doubleToFloat(-2.421),doubleToFloat(1.588),doubleToFloat(-3.002),doubleToFloat(-2.421),doubleToFloat(-1.588),doubleToFloat(-1.174),doubleToFloat(-2.421),doubleToFloat(-3.569),doubleToFloat(1.465),doubleToFloat(-2.421),doubleToFloat(-2.862),doubleToFloat(2.64),doubleToFloat(-8.213),doubleToFloat(0),doubleToFloat(1.465),doubleToFloat(-8.213),doubleToFloat(2.862),doubleToFloat(-1.174),doubleToFloat(-8.213),doubleToFloat(3.569),doubleToFloat(-3.002),doubleToFloat(-8.213),doubleToFloat(1.588),doubleToFloat(-3.002),doubleToFloat(-8.213),doubleToFloat(-1.588),doubleToFloat(-1.174),doubleToFloat(-8.213),doubleToFloat(-3.569),doubleToFloat(1.465),doubleToFloat(-8.213),doubleToFloat(-2.862),doubleToFloat(3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(1.914),doubleToFloat(-6.856),doubleToFloat(0),doubleToFloat(1.013),doubleToFloat(-6.856),doubleToFloat(2.196),doubleToFloat(-1.012),doubleToFloat(-6.856),doubleToFloat(2.738),doubleToFloat(-2.348),doubleToFloat(-6.856),doubleToFloat(1.219),doubleToFloat(-2.348),doubleToFloat(-6.856),doubleToFloat(-1.219),doubleToFloat(-1.012),doubleToFloat(-6.856),doubleToFloat(-2.738),doubleToFloat(1.013),doubleToFloat(-6.856),doubleToFloat(-2.196),doubleToFloat(1.829),doubleToFloat(2.698),doubleToFloat(0),doubleToFloat(0.9595),doubleToFloat(2.698),doubleToFloat(2.118),doubleToFloat(-0.9934),doubleToFloat(2.698),doubleToFloat(2.641),doubleToFloat(-2.56),doubleToFloat(2.698),doubleToFloat(1.175),doubleToFloat(-2.56),doubleToFloat(2.698),doubleToFloat(-1.175),doubleToFloat(-0.9934),doubleToFloat(2.698),doubleToFloat(-2.641),doubleToFloat(0.9595),doubleToFloat(2.698),doubleToFloat(-2.118),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(2.551),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(-0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(2.551),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(2.551),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(2.551),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(-2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(-1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(2.551),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(-0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(2.551),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(-0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(2.551),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(-2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(-0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(-0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(-0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(-0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(-0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(-0.3011),doubleToFloat(-18.41),doubleToFloat(0)], Java.type("float[]"))))
                      .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.7014),doubleToFloat(0.3364),doubleToFloat(0.7014),doubleToFloat(0.3621),doubleToFloat(0.7014),doubleToFloat(0.2785),doubleToFloat(0.7014),doubleToFloat(0.2321),doubleToFloat(0.7014),doubleToFloat(0.2321),doubleToFloat(0.7014),doubleToFloat(0.2785),doubleToFloat(0.7014),doubleToFloat(0.3364),doubleToFloat(0.6864),doubleToFloat(0.3861),doubleToFloat(0.6582),doubleToFloat(0.3513),doubleToFloat(0.6582),doubleToFloat(0.3861),doubleToFloat(0.6864),doubleToFloat(0.3513),doubleToFloat(0.6582),doubleToFloat(0.2731),doubleToFloat(0.6864),doubleToFloat(0.2731),doubleToFloat(0.6582),doubleToFloat(0.219),doubleToFloat(0.6864),doubleToFloat(0.219),doubleToFloat(0.6582),doubleToFloat(0.219),doubleToFloat(0.6864),doubleToFloat(0.219),doubleToFloat(0.6582),doubleToFloat(0.2731),doubleToFloat(0.6864),doubleToFloat(0.2731),doubleToFloat(0.6582),doubleToFloat(0.3513),doubleToFloat(0.6864),doubleToFloat(0.3513),doubleToFloat(0.5958),doubleToFloat(0.3513),doubleToFloat(0.5958),doubleToFloat(0.3861),doubleToFloat(0.5958),doubleToFloat(0.2731),doubleToFloat(0.5958),doubleToFloat(0.219),doubleToFloat(0.5958),doubleToFloat(0.219),doubleToFloat(0.5958),doubleToFloat(0.2731),doubleToFloat(0.5958),doubleToFloat(0.3513),doubleToFloat(0.5417),doubleToFloat(0.3589),doubleToFloat(0.5417),doubleToFloat(0.3977),doubleToFloat(0.5417),doubleToFloat(0.2716),doubleToFloat(0.5417),doubleToFloat(0.2202),doubleToFloat(0.5417),doubleToFloat(0.2202),doubleToFloat(0.5417),doubleToFloat(0.2716),doubleToFloat(0.5417),doubleToFloat(0.3589),doubleToFloat(0.6072),doubleToFloat(0.3379),doubleToFloat(0.6072),doubleToFloat(0.3646),doubleToFloat(0.6072),doubleToFloat(0.2779),doubleToFloat(0.6072),doubleToFloat(0.2384),doubleToFloat(0.6072),doubleToFloat(0.2384),doubleToFloat(0.6072),doubleToFloat(0.2779),doubleToFloat(0.6072),doubleToFloat(0.3379),doubleToFloat(0.535),doubleToFloat(0.3368),doubleToFloat(0.535),doubleToFloat(0.3617),doubleToFloat(0.535),doubleToFloat(0.2809),doubleToFloat(0.535),doubleToFloat(0.248),doubleToFloat(0.535),doubleToFloat(0.248),doubleToFloat(0.535),doubleToFloat(0.2809),doubleToFloat(0.535),doubleToFloat(0.3368),doubleToFloat(0.5235),doubleToFloat(0.299)], Java.type("float[]"))))))))
              .addChild(new HAnimJoint("hanim_l_hip").setName("l_knee").setDEF("hanim_l_knee").setCenter(Java.to([doubleToFloat(4.315),doubleToFloat(25.190001),doubleToFloat(-1.119)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_l_knee").setName("l_calf").setDEF("hanim_l_calf")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(4.315),doubleToFloat(25.190001),doubleToFloat(-1.119)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([40,39,38,-1,38,37,36,-1,38,36,35,-1,40,38,35,-1,41,40,35,-1,0,1,8,-1,8,7,0,-1,1,2,9,-1,9,8,1,-1,2,3,10,-1,10,9,2,-1,3,4,11,-1,11,10,3,-1,4,5,12,-1,12,11,4,-1,5,6,13,-1,13,12,5,-1,6,0,7,-1,7,13,6,-1,7,8,15,-1,15,14,7,-1,8,9,16,-1,16,15,8,-1,9,10,17,-1,17,16,9,-1,10,11,18,-1,18,17,10,-1,11,12,19,-1,19,18,11,-1,12,13,20,-1,20,19,12,-1,13,7,14,-1,14,20,13,-1,14,15,22,-1,22,21,14,-1,15,16,23,-1,23,22,15,-1,16,17,24,-1,24,23,16,-1,17,18,25,-1,25,24,17,-1,18,19,26,-1,26,25,18,-1,19,20,27,-1,27,26,19,-1,20,14,21,-1,21,27,20,-1,29,28,21,-1,21,22,29,-1,30,29,22,-1,22,23,30,-1,31,30,23,-1,23,24,31,-1,32,31,24,-1,24,25,32,-1,33,32,25,-1,25,26,33,-1,34,33,26,-1,26,27,34,-1,28,34,27,-1,27,21,28,-1,35,36,1,-1,1,0,35,-1,36,37,2,-1,2,1,36,-1,37,38,3,-1,3,2,37,-1,38,39,4,-1,4,3,38,-1,39,40,5,-1,5,4,39,-1,40,41,6,-1,6,5,40,-1,41,35,0,-1,0,6,41,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([5,4,3,-1,3,2,0,-1,3,0,1,-1,5,3,1,-1,6,5,1,-1,7,10,8,-1,8,9,7,-1,10,12,11,-1,11,8,10,-1,12,14,13,-1,13,11,12,-1,14,16,15,-1,15,13,14,-1,16,18,17,-1,17,15,16,-1,18,20,19,-1,19,17,18,-1,20,7,9,-1,9,19,20,-1,9,8,21,-1,21,22,9,-1,8,11,23,-1,23,21,8,-1,11,13,24,-1,24,23,11,-1,13,15,25,-1,25,24,13,-1,15,17,26,-1,26,25,15,-1,17,19,27,-1,27,26,17,-1,19,9,22,-1,22,27,19,-1,22,21,28,-1,28,29,22,-1,21,23,30,-1,30,28,21,-1,23,24,31,-1,31,30,23,-1,24,25,32,-1,32,31,24,-1,25,26,33,-1,33,32,25,-1,26,27,34,-1,34,33,26,-1,27,22,29,-1,29,34,27,-1,35,36,29,-1,29,28,35,-1,37,35,28,-1,28,30,37,-1,38,37,30,-1,30,31,38,-1,39,38,31,-1,31,32,39,-1,40,39,32,-1,32,33,40,-1,41,40,33,-1,33,34,41,-1,36,41,34,-1,34,29,36,-1,1,0,10,-1,10,7,1,-1,0,2,12,-1,12,10,0,-1,2,3,14,-1,14,12,2,-1,3,4,16,-1,16,14,3,-1,4,5,18,-1,18,16,4,-1,5,6,20,-1,20,18,5,-1,6,1,7,-1,7,20,6,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(2.59),doubleToFloat(-0.0184),doubleToFloat(0),doubleToFloat(1.415),doubleToFloat(-0.0184),doubleToFloat(2.862),doubleToFloat(-1.224),doubleToFloat(-0.0184),doubleToFloat(3.569),doubleToFloat(-3.033),doubleToFloat(-0.0184),doubleToFloat(1.588),doubleToFloat(-3.033),doubleToFloat(-0.0184),doubleToFloat(-1.588),doubleToFloat(-1.224),doubleToFloat(-0.0184),doubleToFloat(-3.569),doubleToFloat(1.415),doubleToFloat(-0.0184),doubleToFloat(-2.862),doubleToFloat(2.59),doubleToFloat(-3.362),doubleToFloat(0),doubleToFloat(1.415),doubleToFloat(-3.362),doubleToFloat(2.862),doubleToFloat(-1.224),doubleToFloat(-3.362),doubleToFloat(3.569),doubleToFloat(-3.033),doubleToFloat(-3.362),doubleToFloat(1.588),doubleToFloat(-3.033),doubleToFloat(-3.362),doubleToFloat(-1.588),doubleToFloat(-1.224),doubleToFloat(-3.362),doubleToFloat(-3.569),doubleToFloat(1.415),doubleToFloat(-3.362),doubleToFloat(-2.862),doubleToFloat(2.59),doubleToFloat(-13.66),doubleToFloat(0),doubleToFloat(1.415),doubleToFloat(-13.66),doubleToFloat(2.862),doubleToFloat(-1.224),doubleToFloat(-13.66),doubleToFloat(3.569),doubleToFloat(-3.033),doubleToFloat(-13.66),doubleToFloat(1.588),doubleToFloat(-3.033),doubleToFloat(-13.66),doubleToFloat(-1.588),doubleToFloat(-1.224),doubleToFloat(-13.66),doubleToFloat(-3.569),doubleToFloat(1.415),doubleToFloat(-13.66),doubleToFloat(-2.862),doubleToFloat(3.239),doubleToFloat(-19.57),doubleToFloat(0),doubleToFloat(1.813),doubleToFloat(-19.57),doubleToFloat(3.472),doubleToFloat(-1.389),doubleToFloat(-19.57),doubleToFloat(4.33),doubleToFloat(-3.239),doubleToFloat(-19.57),doubleToFloat(1.927),doubleToFloat(-3.239),doubleToFloat(-19.57),doubleToFloat(-1.927),doubleToFloat(-1.389),doubleToFloat(-19.57),doubleToFloat(-4.33),doubleToFloat(1.813),doubleToFloat(-19.57),doubleToFloat(-3.472),doubleToFloat(1.863),doubleToFloat(-12.3),doubleToFloat(0),doubleToFloat(0.9622),doubleToFloat(-12.3),doubleToFloat(2.196),doubleToFloat(-1.063),doubleToFloat(-12.3),doubleToFloat(2.738),doubleToFloat(-2.378),doubleToFloat(-12.3),doubleToFloat(1.219),doubleToFloat(-2.378),doubleToFloat(-12.3),doubleToFloat(-1.219),doubleToFloat(-1.063),doubleToFloat(-12.3),doubleToFloat(-2.738),doubleToFloat(0.9622),doubleToFloat(-12.3),doubleToFloat(-2.196),doubleToFloat(1.778),doubleToFloat(1.756),doubleToFloat(0),doubleToFloat(0.9091),doubleToFloat(1.756),doubleToFloat(2.118),doubleToFloat(-1.044),doubleToFloat(1.756),doubleToFloat(2.641),doubleToFloat(-2.61),doubleToFloat(1.756),doubleToFloat(1.175),doubleToFloat(-2.61),doubleToFloat(1.756),doubleToFloat(-1.175),doubleToFloat(-1.044),doubleToFloat(1.756),doubleToFloat(-2.641),doubleToFloat(0.9091),doubleToFloat(1.756),doubleToFloat(-2.118)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.5993),doubleToFloat(0.2671),doubleToFloat(0.5993),doubleToFloat(0.2423),doubleToFloat(0.5993),doubleToFloat(0.3227),doubleToFloat(0.5993),doubleToFloat(0.3673),doubleToFloat(0.5993),doubleToFloat(0.3673),doubleToFloat(0.5993),doubleToFloat(0.3227),doubleToFloat(0.5993),doubleToFloat(0.2671),doubleToFloat(0.5849),doubleToFloat(0.2192),doubleToFloat(0.5579),doubleToFloat(0.2527),doubleToFloat(0.5579),doubleToFloat(0.2192),doubleToFloat(0.5849),doubleToFloat(0.2527),doubleToFloat(0.5579),doubleToFloat(0.3279),doubleToFloat(0.5849),doubleToFloat(0.3279),doubleToFloat(0.5579),doubleToFloat(0.3793),doubleToFloat(0.5849),doubleToFloat(0.3793),doubleToFloat(0.5579),doubleToFloat(0.3793),doubleToFloat(0.5849),doubleToFloat(0.3793),doubleToFloat(0.5579),doubleToFloat(0.3279),doubleToFloat(0.5849),doubleToFloat(0.3279),doubleToFloat(0.5579),doubleToFloat(0.2527),doubleToFloat(0.5849),doubleToFloat(0.2527),doubleToFloat(0.4746),doubleToFloat(0.2527),doubleToFloat(0.4746),doubleToFloat(0.2192),doubleToFloat(0.4746),doubleToFloat(0.3279),doubleToFloat(0.4746),doubleToFloat(0.3793),doubleToFloat(0.4746),doubleToFloat(0.3793),doubleToFloat(0.4746),doubleToFloat(0.3279),doubleToFloat(0.4746),doubleToFloat(0.2527),doubleToFloat(0.426),doubleToFloat(0.2592),doubleToFloat(0.4268),doubleToFloat(0.2203),doubleToFloat(0.4268),doubleToFloat(0.3325),doubleToFloat(0.4268),doubleToFloat(0.3852),doubleToFloat(0.4268),doubleToFloat(0.3852),doubleToFloat(0.4268),doubleToFloat(0.3325),doubleToFloat(0.426),doubleToFloat(0.2592),doubleToFloat(0.4856),doubleToFloat(0.2656),doubleToFloat(0.4856),doubleToFloat(0.2399),doubleToFloat(0.4856),doubleToFloat(0.3232),doubleToFloat(0.4856),doubleToFloat(0.3607),doubleToFloat(0.4856),doubleToFloat(0.3607),doubleToFloat(0.4856),doubleToFloat(0.3232),doubleToFloat(0.4856),doubleToFloat(0.2656)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_l_knee").setName("l_talocrural").setDEF("hanim_l_talocrural").setCenter(Java.to([doubleToFloat(4.574),doubleToFloat(6.838),doubleToFloat(-1.463)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_l_talocrural").setName("l_talus").setDEF("hanim_l_talus")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(4.574),doubleToFloat(6.838),doubleToFloat(-1.463)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,4,1,-1,1,2,0,-1,3,5,0,-1,0,2,3,-1,6,9,7,-1,7,8,6,-1,8,7,10,-1,10,11,8,-1,12,20,9,-1,9,6,12,-1,21,20,12,-1,12,13,21,-1,11,10,14,-1,14,15,11,-1,15,14,16,-1,16,17,15,-1,9,1,4,-1,4,7,9,-1,7,4,0,-1,0,10,7,-1,10,0,5,-1,5,14,10,-1,14,5,3,-1,3,16,14,-1,6,8,19,-1,8,11,19,-1,12,6,19,-1,13,12,19,-1,11,15,19,-1,15,17,19,-1,17,18,19,-1,18,13,19,-1,13,18,22,-1,22,21,13,-1,18,17,16,-1,16,22,18,-1,24,25,26,-1,26,27,28,-1,24,26,28,-1,24,28,29,-1,24,29,30,-1,24,30,23,-1,2,1,24,-1,24,23,2,-1,1,9,25,-1,25,24,1,-1,9,20,26,-1,26,25,9,-1,20,21,27,-1,27,26,20,-1,21,22,28,-1,28,27,21,-1,22,16,29,-1,29,28,22,-1,16,3,30,-1,30,29,16,-1,3,2,23,-1,23,30,3,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,4,1,-1,1,2,0,-1,3,5,0,-1,0,2,3,-1,6,9,7,-1,7,8,6,-1,8,7,10,-1,10,11,8,-1,12,20,9,-1,9,6,12,-1,21,20,12,-1,12,13,21,-1,11,10,14,-1,14,15,11,-1,15,14,16,-1,16,17,15,-1,9,1,4,-1,4,7,9,-1,7,4,0,-1,0,10,7,-1,10,0,5,-1,5,14,10,-1,14,5,3,-1,3,16,14,-1,6,8,19,-1,8,11,19,-1,12,6,19,-1,13,12,19,-1,11,15,19,-1,15,17,19,-1,17,18,19,-1,18,13,19,-1,13,18,22,-1,22,21,13,-1,18,17,16,-1,16,22,18,-1,24,25,26,-1,26,27,28,-1,24,26,28,-1,24,28,29,-1,24,29,30,-1,24,30,23,-1,2,1,24,-1,24,23,2,-1,1,9,25,-1,25,24,1,-1,9,20,26,-1,26,25,9,-1,20,21,27,-1,27,26,20,-1,21,22,28,-1,28,27,21,-1,22,16,29,-1,29,28,22,-1,16,3,30,-1,30,29,16,-1,3,2,23,-1,23,30,3,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0.8202),doubleToFloat(-6.687),doubleToFloat(-3.411),doubleToFloat(2.567),doubleToFloat(-6.814),doubleToFloat(0.3665),doubleToFloat(0.4068),doubleToFloat(-6.835),doubleToFloat(0.5953),doubleToFloat(-2.033),doubleToFloat(-6.8),doubleToFloat(0.7383),doubleToFloat(2.347),doubleToFloat(-6.742),doubleToFloat(-2.364),doubleToFloat(-2.159),doubleToFloat(-6.722),doubleToFloat(-2.362),doubleToFloat(1.391),doubleToFloat(0.0721),doubleToFloat(-0.2632),doubleToFloat(2.329),doubleToFloat(-3.518),doubleToFloat(-2.264),doubleToFloat(1.029),doubleToFloat(0.4254),doubleToFloat(-1.355),doubleToFloat(2.148),doubleToFloat(-3.639),doubleToFloat(0.4281),doubleToFloat(0.578),doubleToFloat(-3.439),doubleToFloat(-3.248),doubleToFloat(0.1667),doubleToFloat(-0.7673),doubleToFloat(-2.634),doubleToFloat(0.6108),doubleToFloat(-0.1555),doubleToFloat(0.5745),doubleToFloat(-1.165),doubleToFloat(-0.0864),doubleToFloat(1.722),doubleToFloat(-2.436),doubleToFloat(-3.539),doubleToFloat(-2.293),doubleToFloat(-1.3),doubleToFloat(-0.7319),doubleToFloat(-2.864),doubleToFloat(-2.025),doubleToFloat(-3.634),doubleToFloat(0.7655),doubleToFloat(-2.416),doubleToFloat(-1.184),doubleToFloat(-1.037),doubleToFloat(-2.567),doubleToFloat(-0.7486),doubleToFloat(1.337),doubleToFloat(-0.5315),doubleToFloat(0.4359),doubleToFloat(-0.5649),doubleToFloat(1.591),doubleToFloat(-1.917),doubleToFloat(2.128),doubleToFloat(-0.6895),doubleToFloat(-0.8855),doubleToFloat(3.411),doubleToFloat(-2.449),doubleToFloat(-2.096),doubleToFloat(3.113),doubleToFloat(0.575),doubleToFloat(-6.557),doubleToFloat(1.961),doubleToFloat(2.022),doubleToFloat(-6.548),doubleToFloat(1.82),doubleToFloat(1.675),doubleToFloat(-4.087),doubleToFloat(1.579),doubleToFloat(1.205),doubleToFloat(-2.631),doubleToFloat(3.158),doubleToFloat(-0.5196),doubleToFloat(-1.891),doubleToFloat(4.248),doubleToFloat(-1.582),doubleToFloat(-2.617),doubleToFloat(4.058),doubleToFloat(-1.245),doubleToFloat(-3.851),doubleToFloat(1.847),doubleToFloat(-1.226),doubleToFloat(-6.514),doubleToFloat(2.023)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.2874),doubleToFloat(0.0046),doubleToFloat(0.2798),doubleToFloat(0.0442),doubleToFloat(0.2785),doubleToFloat(0.0523),doubleToFloat(0.2806),doubleToFloat(0.06),doubleToFloat(0.2841),doubleToFloat(0.0129),doubleToFloat(0.2854),doubleToFloat(0.0243),doubleToFloat(0.6233),doubleToFloat(0.0398),doubleToFloat(0.3712),doubleToFloat(0.0119),doubleToFloat(0.6447),doubleToFloat(0.028),doubleToFloat(0.3638),doubleToFloat(0.0437),doubleToFloat(0.376),doubleToFloat(0.0049),doubleToFloat(0.5724),doubleToFloat(0.0153),doubleToFloat(0.6095),doubleToFloat(0.0515),doubleToFloat(0.6137),doubleToFloat(0.0693),doubleToFloat(0.3699),doubleToFloat(0.0236),doubleToFloat(0.5745),doubleToFloat(0.0163),doubleToFloat(0.3642),doubleToFloat(0.0581),doubleToFloat(0.5471),doubleToFloat(0.0403),doubleToFloat(0.5735),doubleToFloat(0.0684),doubleToFloat(0.6453),doubleToFloat(0.0411),doubleToFloat(0.4855),doubleToFloat(0.066),doubleToFloat(0.5541),doubleToFloat(0.0994),doubleToFloat(0.4746),doubleToFloat(0.0876),doubleToFloat(0.2785),doubleToFloat(0.0523),doubleToFloat(0.2798),doubleToFloat(0.0442),doubleToFloat(0.3638),doubleToFloat(0.0437),doubleToFloat(0.4855),doubleToFloat(0.066),doubleToFloat(0.5541),doubleToFloat(0.0994),doubleToFloat(0.4746),doubleToFloat(0.0876),doubleToFloat(0.3642),doubleToFloat(0.0581),doubleToFloat(0.2806),doubleToFloat(0.06)], Java.type("float[]"))))))))
                  .addChild(new HAnimJoint("hanim_l_talocrural").setName("l_metatarsophalangeal_2").setDEF("hanim_l_metatarsophalangeal_2").setCenter(Java.to([doubleToFloat(4.809),doubleToFloat(5.583),doubleToFloat(1.492)], Java.type("float[]")))
                    .addChild(new HAnimSegment("hanim_l_metatarsophalangeal_2").setName("l_tarsal_proximal_phalanx_2").setDEF("hanim_l_tarsal_proximal_phalanx_2")
                      .addChild(new Transform().setTranslation(Java.to([doubleToFloat(4.809),doubleToFloat(5.583),doubleToFloat(1.492)], Java.type("float[]")))
                        .addChild(new Shape()
                          .setAppearance(new Appearance()
                            .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                            .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                          .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,1,19,-1,19,18,0,-1,1,2,20,-1,20,19,1,-1,22,5,25,-1,4,24,25,-1,25,5,4,-1,3,0,18,-1,18,21,3,-1,6,9,7,-1,7,8,6,-1,22,20,2,-1,2,5,22,-1,6,11,10,-1,10,9,6,-1,0,13,12,-1,12,1,0,-1,1,12,14,-1,14,2,1,-1,3,4,15,-1,15,16,3,-1,5,17,15,-1,15,4,5,-1,3,16,13,-1,13,0,3,-1,2,14,17,-1,17,5,2,-1,15,6,8,-1,8,16,15,-1,16,8,7,-1,7,13,16,-1,13,7,9,-1,9,12,13,-1,15,17,11,-1,11,6,15,-1,12,9,10,-1,10,14,12,-1,14,10,11,-1,11,17,14,-1,4,3,23,-1,23,24,4,-1,23,3,21,-1,18,19,27,-1,27,26,18,-1,19,20,28,-1,28,27,19,-1,20,22,29,-1,29,28,20,-1,22,25,29,-1,23,21,30,-1,21,18,26,-1,26,30,21,-1,23,25,24,-1,29,25,23,-1,23,30,29,-1,27,28,29,-1,26,27,29,-1,30,26,29,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,1,19,-1,19,18,0,-1,1,2,20,-1,20,19,1,-1,22,5,25,-1,4,24,25,-1,25,5,4,-1,3,0,18,-1,18,21,3,-1,6,9,7,-1,7,8,6,-1,22,20,2,-1,2,5,22,-1,6,11,10,-1,10,9,6,-1,0,13,12,-1,12,1,0,-1,1,12,14,-1,14,2,1,-1,3,4,15,-1,15,16,3,-1,5,17,15,-1,15,4,5,-1,3,16,13,-1,13,0,3,-1,2,14,17,-1,17,5,2,-1,15,6,8,-1,8,16,15,-1,16,8,7,-1,7,13,16,-1,13,7,9,-1,9,12,13,-1,15,17,11,-1,11,6,15,-1,12,9,10,-1,10,14,12,-1,14,10,11,-1,11,17,14,-1,4,3,23,-1,23,24,4,-1,23,3,21,-1,18,19,27,-1,27,26,18,-1,19,20,28,-1,28,27,19,-1,20,22,29,-1,29,28,20,-1,22,25,29,-1,23,21,30,-1,21,18,26,-1,26,30,21,-1,23,25,24,-1,29,25,23,-1,23,30,29,-1,27,28,29,-1,26,27,29,-1,30,26,29,-1], Java.type("int[]")))
                            .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(2.803),doubleToFloat(-5.588),doubleToFloat(0.6731),doubleToFloat(0.2267),doubleToFloat(-5.589),doubleToFloat(2.081),doubleToFloat(-2.411),doubleToFloat(-5.604),doubleToFloat(1.896),doubleToFloat(2.336),doubleToFloat(-2.423),doubleToFloat(0.7256),doubleToFloat(-0.4491),doubleToFloat(-0.4293),doubleToFloat(2.144),doubleToFloat(-2.566),doubleToFloat(-2.188),doubleToFloat(1.933),doubleToFloat(-0.2886),doubleToFloat(-2.342),doubleToFloat(8.508),doubleToFloat(2.628),doubleToFloat(-5.51),doubleToFloat(5.676),doubleToFloat(2.567),doubleToFloat(-2.341),doubleToFloat(5.71),doubleToFloat(-0.0624),doubleToFloat(-5.51),doubleToFloat(8.465),doubleToFloat(-1.743),doubleToFloat(-5.522),doubleToFloat(7.68),doubleToFloat(-1.73),doubleToFloat(-2.103),doubleToFloat(7.711),doubleToFloat(-0.0387),doubleToFloat(-5.541),doubleToFloat(5.353),doubleToFloat(2.584),doubleToFloat(-5.536),doubleToFloat(2.735),doubleToFloat(-2.525),doubleToFloat(-5.553),doubleToFloat(5.417),doubleToFloat(-0.265),doubleToFloat(-1.11),doubleToFloat(5.396),doubleToFloat(2.299),doubleToFloat(-2.375),doubleToFloat(2.776),doubleToFloat(-2.512),doubleToFloat(-2.385),doubleToFloat(5.448),doubleToFloat(2.332),doubleToFloat(-5.559),doubleToFloat(-2.589),doubleToFloat(0.1713),doubleToFloat(-5.58),doubleToFloat(-2.36),doubleToFloat(-2.269),doubleToFloat(-5.545),doubleToFloat(-2.217),doubleToFloat(1.912),doubleToFloat(-2.384),doubleToFloat(-2.527),doubleToFloat(-2.26),doubleToFloat(-2.379),doubleToFloat(-2.19),doubleToFloat(1.356),doubleToFloat(-0.6618),doubleToFloat(-0.8278),doubleToFloat(-0.925),doubleToFloat(0.3698),doubleToFloat(0.4552),doubleToFloat(-2.684),doubleToFloat(-0.8406),doubleToFloat(0.1573),doubleToFloat(1.828),doubleToFloat(-3.703),doubleToFloat(-4.62),doubleToFloat(0.0134),doubleToFloat(-3.719),doubleToFloat(-4.434),doubleToFloat(-1.422),doubleToFloat(-3.68),doubleToFloat(-4.33),doubleToFloat(-1.411),doubleToFloat(-0.7578),doubleToFloat(-4.754),doubleToFloat(0.2889),doubleToFloat(-0.8748),doubleToFloat(-4.705)], Java.type("float[]"))))
                            .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.278),doubleToFloat(0.0809),doubleToFloat(0.2779),doubleToFloat(0.1038),doubleToFloat(0.277),doubleToFloat(0.1083),doubleToFloat(0.3615),doubleToFloat(0.0805),doubleToFloat(0.4946),doubleToFloat(0.1295),doubleToFloat(0.3758),doubleToFloat(0.1069),doubleToFloat(0.3664),doubleToFloat(0.1777),doubleToFloat(0.2827),doubleToFloat(0.1396),doubleToFloat(0.3665),doubleToFloat(0.1379),doubleToFloat(0.2827),doubleToFloat(0.1788),doubleToFloat(0.282),doubleToFloat(0.1739),doubleToFloat(0.3809),doubleToFloat(0.172),doubleToFloat(0.2808),doubleToFloat(0.1426),doubleToFloat(0.2811),doubleToFloat(0.1055),doubleToFloat(0.2801),doubleToFloat(0.1495),doubleToFloat(0.4533),doubleToFloat(0.1669),doubleToFloat(0.3644),doubleToFloat(0.1045),doubleToFloat(0.3638),doubleToFloat(0.1477),doubleToFloat(0.2798),doubleToFloat(0.0442),doubleToFloat(0.2785),doubleToFloat(0.0523),doubleToFloat(0.2806),doubleToFloat(0.06),doubleToFloat(0.3638),doubleToFloat(0.0437),doubleToFloat(0.3642),doubleToFloat(0.0581),doubleToFloat(0.4855),doubleToFloat(0.066),doubleToFloat(0.5541),doubleToFloat(0.0994),doubleToFloat(0.4746),doubleToFloat(0.0876),doubleToFloat(0.2798),doubleToFloat(0.0442),doubleToFloat(0.2785),doubleToFloat(0.0523),doubleToFloat(0.2806),doubleToFloat(0.06),doubleToFloat(0.3642),doubleToFloat(0.0581),doubleToFloat(0.3638),doubleToFloat(0.0437)], Java.type("float[]"))))))))))))
            .addChild(new HAnimJoint("hanim_humanoid_root").setName("r_hip").setDEF("hanim_r_hip").setCenter(Java.to([doubleToFloat(-4.001),doubleToFloat(41.139999),doubleToFloat(-1.119)], Java.type("float[]")))
              .addChild(new HAnimSegment("hanim_r_hip").setName("r_thigh").setDEF("hanim_r_thigh")
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-4.001),doubleToFloat(41.139999),doubleToFloat(-1.119)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                      .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                    .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([36,37,38,-1,35,36,38,-1,38,39,40,-1,35,38,40,-1,41,35,40,-1,0,7,8,-1,8,1,0,-1,1,8,9,-1,9,2,1,-1,2,9,10,-1,10,3,2,-1,3,10,11,-1,11,4,3,-1,4,11,12,-1,12,5,4,-1,5,12,13,-1,13,6,5,-1,6,13,7,-1,7,0,6,-1,7,14,15,-1,15,8,7,-1,8,15,16,-1,16,9,8,-1,9,16,17,-1,17,10,9,-1,10,17,18,-1,18,11,10,-1,11,18,19,-1,19,12,11,-1,12,19,20,-1,20,13,12,-1,13,20,14,-1,14,7,13,-1,14,106,107,-1,107,15,14,-1,15,107,108,-1,108,16,15,-1,16,108,109,-1,109,17,16,-1,17,109,110,-1,110,18,17,-1,18,110,111,-1,111,19,18,-1,19,111,112,-1,112,20,19,-1,20,112,106,-1,106,14,20,-1,29,107,106,-1,106,28,29,-1,30,108,107,-1,107,29,30,-1,31,109,108,-1,108,30,31,-1,32,110,109,-1,109,31,32,-1,33,111,110,-1,110,32,33,-1,34,112,111,-1,111,33,34,-1,28,106,112,-1,112,34,28,-1,35,0,1,-1,1,36,35,-1,36,1,2,-1,2,37,36,-1,37,2,3,-1,3,38,37,-1,38,3,4,-1,4,39,38,-1,39,4,5,-1,5,40,39,-1,40,5,6,-1,6,41,40,-1,41,6,0,-1,0,35,41,-1,113,21,43,-1,50,42,51,-1,115,22,113,-1,52,44,53,-1,116,23,115,-1,54,45,55,-1,117,24,116,-1,56,46,57,-1,118,25,117,-1,58,47,59,-1,119,26,118,-1,60,48,61,-1,43,27,119,-1,62,114,63,-1,122,65,64,-1,66,130,67,-1,121,69,68,-1,70,129,71,-1,123,73,72,-1,74,131,75,-1,124,77,76,-1,78,132,79,-1,125,81,80,-1,82,133,83,-1,126,85,84,-1,86,134,87,-1,127,89,88,-1,90,135,91,-1,43,140,113,-1,113,140,115,-1,115,140,116,-1,116,140,117,-1,117,140,118,-1,118,140,119,-1,119,140,43,-1,92,49,93,-1,94,120,95,-1,96,128,97,-1,98,136,99,-1,100,137,101,-1,102,138,103,-1,104,139,105,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,2,3,-1,1,0,3,-1,3,4,5,-1,1,3,5,-1,6,1,5,-1,7,9,8,-1,8,10,7,-1,10,8,11,-1,11,12,10,-1,12,11,13,-1,13,14,12,-1,14,13,15,-1,15,16,14,-1,16,15,17,-1,17,18,16,-1,18,17,19,-1,19,20,18,-1,20,19,9,-1,9,7,20,-1,9,22,21,-1,21,8,9,-1,8,21,23,-1,23,11,8,-1,11,23,24,-1,24,13,11,-1,13,24,25,-1,25,15,13,-1,15,25,26,-1,26,17,15,-1,17,26,27,-1,27,19,17,-1,19,27,22,-1,22,9,19,-1,22,29,28,-1,28,21,22,-1,21,28,30,-1,30,23,21,-1,23,30,31,-1,31,24,23,-1,24,31,32,-1,32,25,24,-1,25,32,33,-1,33,26,25,-1,26,33,34,-1,34,27,26,-1,27,34,29,-1,29,22,27,-1,35,28,29,-1,29,36,35,-1,37,30,28,-1,28,35,37,-1,38,31,30,-1,30,37,38,-1,39,32,31,-1,31,38,39,-1,40,33,32,-1,32,39,40,-1,41,34,33,-1,33,40,41,-1,36,29,34,-1,34,41,36,-1,1,7,10,-1,10,0,1,-1,0,10,12,-1,12,2,0,-1,2,12,14,-1,14,3,2,-1,3,14,16,-1,16,4,3,-1,4,16,18,-1,18,5,4,-1,5,18,20,-1,20,6,5,-1,6,20,7,-1,7,1,6,-1,42,29,43,-1,29,42,28,-1,44,28,42,-1,28,44,30,-1,45,30,44,-1,30,45,31,-1,46,31,45,-1,31,46,32,-1,47,32,46,-1,32,47,33,-1,48,33,47,-1,33,48,34,-1,43,34,48,-1,34,43,29,-1,43,28,42,-1,28,43,29,-1,42,30,44,-1,30,42,28,-1,44,31,45,-1,31,44,30,-1,45,32,46,-1,32,45,31,-1,46,33,47,-1,33,46,32,-1,47,34,48,-1,34,47,33,-1,48,29,43,-1,29,48,34,-1,43,49,42,-1,42,49,44,-1,44,49,45,-1,45,49,46,-1,46,49,47,-1,47,49,48,-1,48,49,43,-1,42,49,43,-1,44,49,42,-1,45,49,44,-1,46,49,45,-1,47,49,46,-1,48,49,47,-1,43,49,48,-1], Java.type("int[]")))
                      .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-2.64),doubleToFloat(0.923),doubleToFloat(0),doubleToFloat(-1.465),doubleToFloat(0.923),doubleToFloat(2.862),doubleToFloat(1.174),doubleToFloat(0.923),doubleToFloat(3.569),doubleToFloat(3.002),doubleToFloat(0.923),doubleToFloat(1.588),doubleToFloat(3.002),doubleToFloat(0.923),doubleToFloat(-1.588),doubleToFloat(1.174),doubleToFloat(0.923),doubleToFloat(-3.569),doubleToFloat(-1.465),doubleToFloat(0.923),doubleToFloat(-2.862),doubleToFloat(-2.64),doubleToFloat(-2.421),doubleToFloat(0),doubleToFloat(-1.465),doubleToFloat(-2.421),doubleToFloat(2.862),doubleToFloat(1.174),doubleToFloat(-2.421),doubleToFloat(3.569),doubleToFloat(3.002),doubleToFloat(-2.421),doubleToFloat(1.588),doubleToFloat(3.002),doubleToFloat(-2.421),doubleToFloat(-1.588),doubleToFloat(1.174),doubleToFloat(-2.421),doubleToFloat(-3.569),doubleToFloat(-1.465),doubleToFloat(-2.421),doubleToFloat(-2.862),doubleToFloat(-2.64),doubleToFloat(-8.213),doubleToFloat(0),doubleToFloat(-1.465),doubleToFloat(-8.213),doubleToFloat(2.862),doubleToFloat(1.174),doubleToFloat(-8.213),doubleToFloat(3.569),doubleToFloat(3.002),doubleToFloat(-8.213),doubleToFloat(1.588),doubleToFloat(3.002),doubleToFloat(-8.213),doubleToFloat(-1.588),doubleToFloat(1.174),doubleToFloat(-8.213),doubleToFloat(-3.569),doubleToFloat(-1.465),doubleToFloat(-8.213),doubleToFloat(-2.862),doubleToFloat(-3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(-1.914),doubleToFloat(-6.856),doubleToFloat(0),doubleToFloat(-1.013),doubleToFloat(-6.856),doubleToFloat(2.196),doubleToFloat(1.012),doubleToFloat(-6.856),doubleToFloat(2.738),doubleToFloat(2.348),doubleToFloat(-6.856),doubleToFloat(1.219),doubleToFloat(2.348),doubleToFloat(-6.856),doubleToFloat(-1.219),doubleToFloat(1.012),doubleToFloat(-6.856),doubleToFloat(-2.738),doubleToFloat(-1.013),doubleToFloat(-6.856),doubleToFloat(-2.196),doubleToFloat(-1.829),doubleToFloat(2.698),doubleToFloat(0),doubleToFloat(-0.9595),doubleToFloat(2.698),doubleToFloat(2.118),doubleToFloat(0.9934),doubleToFloat(2.698),doubleToFloat(2.641),doubleToFloat(2.56),doubleToFloat(2.698),doubleToFloat(1.175),doubleToFloat(2.56),doubleToFloat(2.698),doubleToFloat(-1.175),doubleToFloat(0.9934),doubleToFloat(2.698),doubleToFloat(-2.641),doubleToFloat(-0.9595),doubleToFloat(2.698),doubleToFloat(-2.118),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(-1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(2.552),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(-3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(-3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(-3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(2.552),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(-1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(-3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(-3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(-1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(2.552),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(2.552),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(-1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(-3.002),doubleToFloat(-14.12),doubleToFloat(0),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(3.194),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(3.983),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(1.773),doubleToFloat(2.991),doubleToFloat(-14.12),doubleToFloat(-1.773),doubleToFloat(1.255),doubleToFloat(-14.12),doubleToFloat(-3.983),doubleToFloat(-1.691),doubleToFloat(-14.12),doubleToFloat(-3.194),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(-1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(2.552),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(-1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(2.552),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(2.046),doubleToFloat(-1.815),doubleToFloat(-17.04),doubleToFloat(0),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(2.552),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(1.136),doubleToFloat(2.024),doubleToFloat(-17.04),doubleToFloat(-1.136),doubleToFloat(0.9119),doubleToFloat(-17.04),doubleToFloat(-2.552),doubleToFloat(-0.9751),doubleToFloat(-17.04),doubleToFloat(-2.046),doubleToFloat(0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(0.3011),doubleToFloat(-18.41),doubleToFloat(0),doubleToFloat(0.3011),doubleToFloat(-18.41),doubleToFloat(0)], Java.type("float[]"))))
                      .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.7014),doubleToFloat(0.3364),doubleToFloat(0.7014),doubleToFloat(0.3621),doubleToFloat(0.7014),doubleToFloat(0.2785),doubleToFloat(0.7014),doubleToFloat(0.2321),doubleToFloat(0.7014),doubleToFloat(0.2321),doubleToFloat(0.7014),doubleToFloat(0.2785),doubleToFloat(0.7014),doubleToFloat(0.3364),doubleToFloat(0.6864),doubleToFloat(0.3861),doubleToFloat(0.6582),doubleToFloat(0.3513),doubleToFloat(0.6582),doubleToFloat(0.3861),doubleToFloat(0.6864),doubleToFloat(0.3513),doubleToFloat(0.6582),doubleToFloat(0.2731),doubleToFloat(0.6864),doubleToFloat(0.2731),doubleToFloat(0.6582),doubleToFloat(0.219),doubleToFloat(0.6864),doubleToFloat(0.219),doubleToFloat(0.6582),doubleToFloat(0.219),doubleToFloat(0.6864),doubleToFloat(0.219),doubleToFloat(0.6582),doubleToFloat(0.2731),doubleToFloat(0.6864),doubleToFloat(0.2731),doubleToFloat(0.6582),doubleToFloat(0.3513),doubleToFloat(0.6864),doubleToFloat(0.3513),doubleToFloat(0.5958),doubleToFloat(0.3513),doubleToFloat(0.5958),doubleToFloat(0.3861),doubleToFloat(0.5958),doubleToFloat(0.2731),doubleToFloat(0.5958),doubleToFloat(0.219),doubleToFloat(0.5958),doubleToFloat(0.219),doubleToFloat(0.5958),doubleToFloat(0.2731),doubleToFloat(0.5958),doubleToFloat(0.3513),doubleToFloat(0.5417),doubleToFloat(0.3589),doubleToFloat(0.5417),doubleToFloat(0.3977),doubleToFloat(0.5417),doubleToFloat(0.2716),doubleToFloat(0.5417),doubleToFloat(0.2202),doubleToFloat(0.5417),doubleToFloat(0.2202),doubleToFloat(0.5417),doubleToFloat(0.2716),doubleToFloat(0.5417),doubleToFloat(0.3589),doubleToFloat(0.6072),doubleToFloat(0.3379),doubleToFloat(0.6072),doubleToFloat(0.3646),doubleToFloat(0.6072),doubleToFloat(0.2779),doubleToFloat(0.6072),doubleToFloat(0.2384),doubleToFloat(0.6072),doubleToFloat(0.2384),doubleToFloat(0.6072),doubleToFloat(0.2779),doubleToFloat(0.6072),doubleToFloat(0.3379),doubleToFloat(0.535),doubleToFloat(0.3368),doubleToFloat(0.535),doubleToFloat(0.3617),doubleToFloat(0.535),doubleToFloat(0.2809),doubleToFloat(0.535),doubleToFloat(0.248),doubleToFloat(0.535),doubleToFloat(0.248),doubleToFloat(0.535),doubleToFloat(0.2809),doubleToFloat(0.535),doubleToFloat(0.3368),doubleToFloat(0.5235),doubleToFloat(0.299)], Java.type("float[]"))))))))
              .addChild(new HAnimJoint("hanim_r_hip").setName("r_knee").setDEF("hanim_r_knee").setCenter(Java.to([doubleToFloat(-4.315),doubleToFloat(25.190001),doubleToFloat(-1.119)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_r_knee").setName("r_calf").setDEF("hanim_r_calf")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-4.315),doubleToFloat(25.190001),doubleToFloat(-1.119)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([36,37,38,-1,35,36,38,-1,38,39,40,-1,35,38,40,-1,41,35,40,-1,0,7,8,-1,8,1,0,-1,1,8,9,-1,9,2,1,-1,2,9,10,-1,10,3,2,-1,3,10,11,-1,11,4,3,-1,4,11,12,-1,12,5,4,-1,5,12,13,-1,13,6,5,-1,6,13,7,-1,7,0,6,-1,7,14,15,-1,15,8,7,-1,8,15,16,-1,16,9,8,-1,9,16,17,-1,17,10,9,-1,10,17,18,-1,18,11,10,-1,11,18,19,-1,19,12,11,-1,12,19,20,-1,20,13,12,-1,13,20,14,-1,14,7,13,-1,14,21,22,-1,22,15,14,-1,15,22,23,-1,23,16,15,-1,16,23,24,-1,24,17,16,-1,17,24,25,-1,25,18,17,-1,18,25,26,-1,26,19,18,-1,19,26,27,-1,27,20,19,-1,20,27,21,-1,21,14,20,-1,29,22,21,-1,21,28,29,-1,30,23,22,-1,22,29,30,-1,31,24,23,-1,23,30,31,-1,32,25,24,-1,24,31,32,-1,33,26,25,-1,25,32,33,-1,34,27,26,-1,26,33,34,-1,28,21,27,-1,27,34,28,-1,35,0,1,-1,1,36,35,-1,36,1,2,-1,2,37,36,-1,37,2,3,-1,3,38,37,-1,38,3,4,-1,4,39,38,-1,39,4,5,-1,5,40,39,-1,40,5,6,-1,6,41,40,-1,41,6,0,-1,0,35,41,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,2,3,-1,1,0,3,-1,3,4,5,-1,1,3,5,-1,6,1,5,-1,7,9,8,-1,8,10,7,-1,10,8,11,-1,11,12,10,-1,12,11,13,-1,13,14,12,-1,14,13,15,-1,15,16,14,-1,16,15,17,-1,17,18,16,-1,18,17,19,-1,19,20,18,-1,20,19,9,-1,9,7,20,-1,9,22,21,-1,21,8,9,-1,8,21,23,-1,23,11,8,-1,11,23,24,-1,24,13,11,-1,13,24,25,-1,25,15,13,-1,15,25,26,-1,26,17,15,-1,17,26,27,-1,27,19,17,-1,19,27,22,-1,22,9,19,-1,22,29,28,-1,28,21,22,-1,21,28,30,-1,30,23,21,-1,23,30,31,-1,31,24,23,-1,24,31,32,-1,32,25,24,-1,25,32,33,-1,33,26,25,-1,26,33,34,-1,34,27,26,-1,27,34,29,-1,29,22,27,-1,35,28,29,-1,29,36,35,-1,37,30,28,-1,28,35,37,-1,38,31,30,-1,30,37,38,-1,39,32,31,-1,31,38,39,-1,40,33,32,-1,32,39,40,-1,41,34,33,-1,33,40,41,-1,36,29,34,-1,34,41,36,-1,1,7,10,-1,10,0,1,-1,0,10,12,-1,12,2,0,-1,2,12,14,-1,14,3,2,-1,3,14,16,-1,16,4,3,-1,4,16,18,-1,18,5,4,-1,5,18,20,-1,20,6,5,-1,6,20,7,-1,7,1,6,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-2.59),doubleToFloat(-0.0184),doubleToFloat(0),doubleToFloat(-1.415),doubleToFloat(-0.0184),doubleToFloat(2.862),doubleToFloat(1.224),doubleToFloat(-0.0184),doubleToFloat(3.569),doubleToFloat(3.033),doubleToFloat(-0.0184),doubleToFloat(1.588),doubleToFloat(3.033),doubleToFloat(-0.0184),doubleToFloat(-1.588),doubleToFloat(1.224),doubleToFloat(-0.0184),doubleToFloat(-3.569),doubleToFloat(-1.415),doubleToFloat(-0.0184),doubleToFloat(-2.862),doubleToFloat(-2.59),doubleToFloat(-3.362),doubleToFloat(0),doubleToFloat(-1.415),doubleToFloat(-3.362),doubleToFloat(2.862),doubleToFloat(1.224),doubleToFloat(-3.362),doubleToFloat(3.569),doubleToFloat(3.033),doubleToFloat(-3.362),doubleToFloat(1.588),doubleToFloat(3.033),doubleToFloat(-3.362),doubleToFloat(-1.588),doubleToFloat(1.224),doubleToFloat(-3.362),doubleToFloat(-3.569),doubleToFloat(-1.415),doubleToFloat(-3.362),doubleToFloat(-2.862),doubleToFloat(-2.59),doubleToFloat(-13.66),doubleToFloat(0),doubleToFloat(-1.415),doubleToFloat(-13.66),doubleToFloat(2.862),doubleToFloat(1.224),doubleToFloat(-13.66),doubleToFloat(3.569),doubleToFloat(3.033),doubleToFloat(-13.66),doubleToFloat(1.588),doubleToFloat(3.033),doubleToFloat(-13.66),doubleToFloat(-1.588),doubleToFloat(1.224),doubleToFloat(-13.66),doubleToFloat(-3.569),doubleToFloat(-1.415),doubleToFloat(-13.66),doubleToFloat(-2.862),doubleToFloat(-3.239),doubleToFloat(-19.57),doubleToFloat(0),doubleToFloat(-1.813),doubleToFloat(-19.57),doubleToFloat(3.472),doubleToFloat(1.389),doubleToFloat(-19.57),doubleToFloat(4.33),doubleToFloat(3.239),doubleToFloat(-19.57),doubleToFloat(1.927),doubleToFloat(3.239),doubleToFloat(-19.57),doubleToFloat(-1.927),doubleToFloat(1.389),doubleToFloat(-19.57),doubleToFloat(-4.33),doubleToFloat(-1.813),doubleToFloat(-19.57),doubleToFloat(-3.472),doubleToFloat(-1.863),doubleToFloat(-12.3),doubleToFloat(0),doubleToFloat(-0.9622),doubleToFloat(-12.3),doubleToFloat(2.196),doubleToFloat(1.063),doubleToFloat(-12.3),doubleToFloat(2.738),doubleToFloat(2.378),doubleToFloat(-12.3),doubleToFloat(1.219),doubleToFloat(2.378),doubleToFloat(-12.3),doubleToFloat(-1.219),doubleToFloat(1.063),doubleToFloat(-12.3),doubleToFloat(-2.738),doubleToFloat(-0.9622),doubleToFloat(-12.3),doubleToFloat(-2.196),doubleToFloat(-1.778),doubleToFloat(1.756),doubleToFloat(0),doubleToFloat(-0.9091),doubleToFloat(1.756),doubleToFloat(2.118),doubleToFloat(1.044),doubleToFloat(1.756),doubleToFloat(2.641),doubleToFloat(2.61),doubleToFloat(1.756),doubleToFloat(1.175),doubleToFloat(2.61),doubleToFloat(1.756),doubleToFloat(-1.175),doubleToFloat(1.044),doubleToFloat(1.756),doubleToFloat(-2.641),doubleToFloat(-0.9091),doubleToFloat(1.756),doubleToFloat(-2.118)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.5993),doubleToFloat(0.2671),doubleToFloat(0.5993),doubleToFloat(0.2423),doubleToFloat(0.5993),doubleToFloat(0.3227),doubleToFloat(0.5993),doubleToFloat(0.3673),doubleToFloat(0.5993),doubleToFloat(0.3673),doubleToFloat(0.5993),doubleToFloat(0.3227),doubleToFloat(0.5993),doubleToFloat(0.2671),doubleToFloat(0.5849),doubleToFloat(0.2192),doubleToFloat(0.5579),doubleToFloat(0.2527),doubleToFloat(0.5579),doubleToFloat(0.2192),doubleToFloat(0.5849),doubleToFloat(0.2527),doubleToFloat(0.5579),doubleToFloat(0.3279),doubleToFloat(0.5849),doubleToFloat(0.3279),doubleToFloat(0.5579),doubleToFloat(0.3793),doubleToFloat(0.5849),doubleToFloat(0.3793),doubleToFloat(0.5579),doubleToFloat(0.3793),doubleToFloat(0.5849),doubleToFloat(0.3793),doubleToFloat(0.5579),doubleToFloat(0.3279),doubleToFloat(0.5849),doubleToFloat(0.3279),doubleToFloat(0.5579),doubleToFloat(0.2527),doubleToFloat(0.5849),doubleToFloat(0.2527),doubleToFloat(0.4746),doubleToFloat(0.2527),doubleToFloat(0.4746),doubleToFloat(0.2192),doubleToFloat(0.4746),doubleToFloat(0.3279),doubleToFloat(0.4746),doubleToFloat(0.3793),doubleToFloat(0.4746),doubleToFloat(0.3793),doubleToFloat(0.4746),doubleToFloat(0.3279),doubleToFloat(0.4746),doubleToFloat(0.2527),doubleToFloat(0.426),doubleToFloat(0.2592),doubleToFloat(0.4268),doubleToFloat(0.2203),doubleToFloat(0.4268),doubleToFloat(0.3325),doubleToFloat(0.4268),doubleToFloat(0.3852),doubleToFloat(0.4268),doubleToFloat(0.3852),doubleToFloat(0.4268),doubleToFloat(0.3325),doubleToFloat(0.426),doubleToFloat(0.2592),doubleToFloat(0.4856),doubleToFloat(0.2656),doubleToFloat(0.4856),doubleToFloat(0.2399),doubleToFloat(0.4856),doubleToFloat(0.3232),doubleToFloat(0.4856),doubleToFloat(0.3607),doubleToFloat(0.4856),doubleToFloat(0.3607),doubleToFloat(0.4856),doubleToFloat(0.3232),doubleToFloat(0.4856),doubleToFloat(0.2656)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_r_knee").setName("r_talocrural").setDEF("hanim_r_talocrural").setCenter(Java.to([doubleToFloat(-4.574),doubleToFloat(6.838),doubleToFloat(-1.463)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_r_talocrural").setName("r_talus").setDEF("hanim_r_talus")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-4.574),doubleToFloat(6.838),doubleToFloat(-1.463)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,2,1,-1,1,4,0,-1,3,2,0,-1,0,5,3,-1,6,8,7,-1,7,9,6,-1,8,11,10,-1,10,7,8,-1,12,6,9,-1,9,20,12,-1,21,13,12,-1,12,20,21,-1,11,15,14,-1,14,10,11,-1,15,17,16,-1,16,14,15,-1,9,7,4,-1,4,1,9,-1,7,10,0,-1,0,4,7,-1,10,14,5,-1,5,0,10,-1,14,16,3,-1,3,5,14,-1,6,19,8,-1,8,19,11,-1,12,19,6,-1,13,19,12,-1,11,19,15,-1,15,19,17,-1,17,19,18,-1,18,19,13,-1,13,21,22,-1,22,18,13,-1,18,22,16,-1,16,17,18,-1,24,23,30,-1,24,30,29,-1,24,29,28,-1,28,27,26,-1,24,28,26,-1,24,26,25,-1,2,23,24,-1,24,1,2,-1,1,24,25,-1,25,9,1,-1,9,25,26,-1,26,20,9,-1,20,26,27,-1,27,21,20,-1,21,27,28,-1,28,22,21,-1,22,28,29,-1,29,16,22,-1,16,29,30,-1,30,3,16,-1,3,30,23,-1,23,2,3,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,2,1,-1,1,4,0,-1,3,2,0,-1,0,5,3,-1,6,8,7,-1,7,9,6,-1,8,11,10,-1,10,7,8,-1,12,6,9,-1,9,20,12,-1,21,13,12,-1,12,20,21,-1,11,15,14,-1,14,10,11,-1,15,17,16,-1,16,14,15,-1,9,7,4,-1,4,1,9,-1,7,10,0,-1,0,4,7,-1,10,14,5,-1,5,0,10,-1,14,16,3,-1,3,5,14,-1,6,19,8,-1,8,19,11,-1,12,19,6,-1,13,19,12,-1,11,19,15,-1,15,19,17,-1,17,19,18,-1,18,19,13,-1,13,21,22,-1,22,18,13,-1,18,22,16,-1,16,17,18,-1,24,23,30,-1,24,30,29,-1,24,29,28,-1,28,27,26,-1,24,28,26,-1,24,26,25,-1,2,23,24,-1,24,1,2,-1,1,24,25,-1,25,9,1,-1,9,25,26,-1,26,20,9,-1,20,26,27,-1,27,21,20,-1,21,27,28,-1,28,22,21,-1,22,28,29,-1,29,16,22,-1,16,29,30,-1,30,3,16,-1,3,30,23,-1,23,2,3,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-0.8202),doubleToFloat(-6.687),doubleToFloat(-3.411),doubleToFloat(-2.567),doubleToFloat(-6.814),doubleToFloat(0.3665),doubleToFloat(-0.4068),doubleToFloat(-6.835),doubleToFloat(0.5953),doubleToFloat(2.033),doubleToFloat(-6.8),doubleToFloat(0.7383),doubleToFloat(-2.347),doubleToFloat(-6.742),doubleToFloat(-2.364),doubleToFloat(2.159),doubleToFloat(-6.722),doubleToFloat(-2.362),doubleToFloat(-1.391),doubleToFloat(0.0721),doubleToFloat(-0.2632),doubleToFloat(-2.329),doubleToFloat(-3.518),doubleToFloat(-2.264),doubleToFloat(-1.029),doubleToFloat(0.4254),doubleToFloat(-1.355),doubleToFloat(-2.148),doubleToFloat(-3.639),doubleToFloat(0.4281),doubleToFloat(-0.578),doubleToFloat(-3.439),doubleToFloat(-3.248),doubleToFloat(-0.1667),doubleToFloat(-0.7673),doubleToFloat(-2.634),doubleToFloat(-0.6108),doubleToFloat(-0.1555),doubleToFloat(0.5745),doubleToFloat(1.165),doubleToFloat(-0.0864),doubleToFloat(1.722),doubleToFloat(2.436),doubleToFloat(-3.539),doubleToFloat(-2.293),doubleToFloat(1.3),doubleToFloat(-0.7319),doubleToFloat(-2.864),doubleToFloat(2.025),doubleToFloat(-3.634),doubleToFloat(0.7655),doubleToFloat(2.416),doubleToFloat(-1.184),doubleToFloat(-1.037),doubleToFloat(2.567),doubleToFloat(-0.7486),doubleToFloat(1.337),doubleToFloat(0.5315),doubleToFloat(0.4359),doubleToFloat(-0.5649),doubleToFloat(-1.591),doubleToFloat(-1.917),doubleToFloat(2.128),doubleToFloat(0.6895),doubleToFloat(-0.8855),doubleToFloat(3.411),doubleToFloat(2.449),doubleToFloat(-2.096),doubleToFloat(3.113),doubleToFloat(-0.575),doubleToFloat(-6.557),doubleToFloat(1.961),doubleToFloat(-2.022),doubleToFloat(-6.548),doubleToFloat(1.82),doubleToFloat(-1.675),doubleToFloat(-4.087),doubleToFloat(1.579),doubleToFloat(-1.205),doubleToFloat(-2.631),doubleToFloat(3.158),doubleToFloat(0.5196),doubleToFloat(-1.891),doubleToFloat(4.248),doubleToFloat(1.582),doubleToFloat(-2.617),doubleToFloat(4.058),doubleToFloat(1.245),doubleToFloat(-3.851),doubleToFloat(1.847),doubleToFloat(1.226),doubleToFloat(-6.514),doubleToFloat(2.023)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.2874),doubleToFloat(0.0046),doubleToFloat(0.2798),doubleToFloat(0.0442),doubleToFloat(0.2785),doubleToFloat(0.0523),doubleToFloat(0.2806),doubleToFloat(0.06),doubleToFloat(0.2841),doubleToFloat(0.0129),doubleToFloat(0.2854),doubleToFloat(0.0243),doubleToFloat(0.6233),doubleToFloat(0.0398),doubleToFloat(0.3712),doubleToFloat(0.0119),doubleToFloat(0.6447),doubleToFloat(0.028),doubleToFloat(0.3638),doubleToFloat(0.0437),doubleToFloat(0.376),doubleToFloat(0.0049),doubleToFloat(0.5724),doubleToFloat(0.0153),doubleToFloat(0.6095),doubleToFloat(0.0515),doubleToFloat(0.6137),doubleToFloat(0.0693),doubleToFloat(0.3699),doubleToFloat(0.0236),doubleToFloat(0.5745),doubleToFloat(0.0163),doubleToFloat(0.3642),doubleToFloat(0.0581),doubleToFloat(0.5471),doubleToFloat(0.0403),doubleToFloat(0.5735),doubleToFloat(0.0684),doubleToFloat(0.6453),doubleToFloat(0.0411),doubleToFloat(0.4855),doubleToFloat(0.066),doubleToFloat(0.5541),doubleToFloat(0.0994),doubleToFloat(0.4746),doubleToFloat(0.0876),doubleToFloat(0.2785),doubleToFloat(0.0523),doubleToFloat(0.2798),doubleToFloat(0.0442),doubleToFloat(0.3638),doubleToFloat(0.0437),doubleToFloat(0.4855),doubleToFloat(0.066),doubleToFloat(0.5541),doubleToFloat(0.0994),doubleToFloat(0.4746),doubleToFloat(0.0876),doubleToFloat(0.3642),doubleToFloat(0.0581),doubleToFloat(0.2806),doubleToFloat(0.06)], Java.type("float[]"))))))))
                  .addChild(new HAnimJoint("hanim_r_talocrural").setName("r_metatarsophalangeal_2").setDEF("hanim_r_metatarsophalangeal_2").setCenter(Java.to([doubleToFloat(-4.809),doubleToFloat(5.583),doubleToFloat(1.492)], Java.type("float[]")))
                    .addChild(new HAnimSegment("hanim_r_metatarsophalangeal_2").setName("r_tarsal_proximal_phalanx_2").setDEF("hanim_r_tarsal_proximal_phalanx_2")
                      .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-4.809),doubleToFloat(5.583),doubleToFloat(1.492)], Java.type("float[]")))
                        .addChild(new Shape()
                          .setAppearance(new Appearance()
                            .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                            .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                          .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,18,19,-1,19,1,0,-1,1,19,20,-1,20,2,1,-1,22,25,5,-1,4,5,25,-1,25,24,4,-1,3,21,18,-1,18,0,3,-1,6,8,7,-1,7,9,6,-1,22,5,2,-1,2,20,22,-1,6,9,10,-1,10,11,6,-1,0,1,12,-1,12,13,0,-1,1,2,14,-1,14,12,1,-1,3,16,15,-1,15,4,3,-1,5,4,15,-1,15,17,5,-1,3,0,13,-1,13,16,3,-1,2,5,17,-1,17,14,2,-1,15,16,8,-1,8,6,15,-1,16,13,7,-1,7,8,16,-1,13,12,9,-1,9,7,13,-1,15,6,11,-1,11,17,15,-1,12,14,10,-1,10,9,12,-1,14,17,11,-1,11,10,14,-1,4,24,23,-1,23,3,4,-1,23,21,3,-1,18,26,27,-1,27,19,18,-1,19,27,28,-1,28,20,19,-1,20,28,29,-1,29,22,20,-1,22,29,25,-1,23,30,21,-1,21,30,26,-1,26,18,21,-1,23,24,25,-1,29,30,23,-1,23,25,29,-1,29,28,27,-1,29,27,26,-1,30,29,26,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,18,19,-1,19,1,0,-1,1,19,20,-1,20,2,1,-1,22,25,5,-1,4,5,25,-1,25,24,4,-1,3,21,18,-1,18,0,3,-1,6,8,7,-1,7,9,6,-1,22,5,2,-1,2,20,22,-1,6,9,10,-1,10,11,6,-1,0,1,12,-1,12,13,0,-1,1,2,14,-1,14,12,1,-1,3,16,15,-1,15,4,3,-1,5,4,15,-1,15,17,5,-1,3,0,13,-1,13,16,3,-1,2,5,17,-1,17,14,2,-1,15,16,8,-1,8,6,15,-1,16,13,7,-1,7,8,16,-1,13,12,9,-1,9,7,13,-1,15,6,11,-1,11,17,15,-1,12,14,10,-1,10,9,12,-1,14,17,11,-1,11,10,14,-1,4,24,23,-1,23,3,4,-1,23,21,3,-1,18,26,27,-1,27,19,18,-1,19,27,28,-1,28,20,19,-1,20,28,29,-1,29,22,20,-1,22,29,25,-1,23,30,21,-1,21,30,26,-1,26,18,21,-1,23,24,25,-1,29,30,23,-1,23,25,29,-1,29,28,27,-1,29,27,26,-1,30,29,26,-1], Java.type("int[]")))
                            .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-2.803),doubleToFloat(-5.588),doubleToFloat(0.6731),doubleToFloat(-0.2267),doubleToFloat(-5.589),doubleToFloat(2.081),doubleToFloat(2.411),doubleToFloat(-5.604),doubleToFloat(1.896),doubleToFloat(-2.336),doubleToFloat(-2.423),doubleToFloat(0.7256),doubleToFloat(0.4491),doubleToFloat(-0.4293),doubleToFloat(2.144),doubleToFloat(2.566),doubleToFloat(-2.188),doubleToFloat(1.933),doubleToFloat(0.2886),doubleToFloat(-2.342),doubleToFloat(8.508),doubleToFloat(-2.628),doubleToFloat(-5.51),doubleToFloat(5.676),doubleToFloat(-2.567),doubleToFloat(-2.341),doubleToFloat(5.71),doubleToFloat(0.0624),doubleToFloat(-5.51),doubleToFloat(8.465),doubleToFloat(1.743),doubleToFloat(-5.522),doubleToFloat(7.68),doubleToFloat(1.73),doubleToFloat(-2.103),doubleToFloat(7.711),doubleToFloat(0.0387),doubleToFloat(-5.541),doubleToFloat(5.353),doubleToFloat(-2.584),doubleToFloat(-5.536),doubleToFloat(2.735),doubleToFloat(2.525),doubleToFloat(-5.553),doubleToFloat(5.417),doubleToFloat(0.265),doubleToFloat(-1.11),doubleToFloat(5.396),doubleToFloat(-2.299),doubleToFloat(-2.375),doubleToFloat(2.776),doubleToFloat(2.512),doubleToFloat(-2.385),doubleToFloat(5.448),doubleToFloat(-2.332),doubleToFloat(-5.559),doubleToFloat(-2.589),doubleToFloat(-0.1713),doubleToFloat(-5.58),doubleToFloat(-2.36),doubleToFloat(2.269),doubleToFloat(-5.545),doubleToFloat(-2.217),doubleToFloat(-1.912),doubleToFloat(-2.384),doubleToFloat(-2.527),doubleToFloat(2.26),doubleToFloat(-2.379),doubleToFloat(-2.19),doubleToFloat(-1.356),doubleToFloat(-0.6618),doubleToFloat(-0.8278),doubleToFloat(0.925),doubleToFloat(0.3698),doubleToFloat(0.4552),doubleToFloat(2.684),doubleToFloat(-0.8406),doubleToFloat(0.1573),doubleToFloat(-1.828),doubleToFloat(-3.703),doubleToFloat(-4.62),doubleToFloat(-0.0134),doubleToFloat(-3.719),doubleToFloat(-4.434),doubleToFloat(1.422),doubleToFloat(-3.68),doubleToFloat(-4.33),doubleToFloat(1.411),doubleToFloat(-0.7578),doubleToFloat(-4.754),doubleToFloat(-0.2889),doubleToFloat(-0.8748),doubleToFloat(-4.705)], Java.type("float[]"))))
                            .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.278),doubleToFloat(0.0809),doubleToFloat(0.2779),doubleToFloat(0.1038),doubleToFloat(0.277),doubleToFloat(0.1083),doubleToFloat(0.3615),doubleToFloat(0.0805),doubleToFloat(0.4946),doubleToFloat(0.1295),doubleToFloat(0.3758),doubleToFloat(0.1069),doubleToFloat(0.3664),doubleToFloat(0.1777),doubleToFloat(0.2827),doubleToFloat(0.1396),doubleToFloat(0.3665),doubleToFloat(0.1379),doubleToFloat(0.2827),doubleToFloat(0.1788),doubleToFloat(0.282),doubleToFloat(0.1739),doubleToFloat(0.3809),doubleToFloat(0.172),doubleToFloat(0.2808),doubleToFloat(0.1426),doubleToFloat(0.2811),doubleToFloat(0.1055),doubleToFloat(0.2801),doubleToFloat(0.1495),doubleToFloat(0.4533),doubleToFloat(0.1669),doubleToFloat(0.3644),doubleToFloat(0.1045),doubleToFloat(0.3638),doubleToFloat(0.1477),doubleToFloat(0.2798),doubleToFloat(0.0442),doubleToFloat(0.2785),doubleToFloat(0.0523),doubleToFloat(0.2806),doubleToFloat(0.06),doubleToFloat(0.3638),doubleToFloat(0.0437),doubleToFloat(0.3642),doubleToFloat(0.0581),doubleToFloat(0.4855),doubleToFloat(0.066),doubleToFloat(0.5541),doubleToFloat(0.0994),doubleToFloat(0.4746),doubleToFloat(0.0876),doubleToFloat(0.2798),doubleToFloat(0.0442),doubleToFloat(0.2785),doubleToFloat(0.0523),doubleToFloat(0.2806),doubleToFloat(0.06),doubleToFloat(0.3642),doubleToFloat(0.0581),doubleToFloat(0.3638),doubleToFloat(0.0437)], Java.type("float[]"))))))))))))
            .addChild(new HAnimJoint("hanim_humanoid_root").setName("sacroiliac").setDEF("hanim_sacroiliac").setCenter(Java.to([doubleToFloat(0),doubleToFloat(38.639999),doubleToFloat(-1.034)], Java.type("float[]")))
              .addChild(new HAnimSegment("hanim_sacroiliac").setName("pelvis").setDEF("hanim_pelvis")
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(38.639999),doubleToFloat(-1.034)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                      .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                    .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,7,-1,0,7,8,-1,0,8,9,-1,0,9,10,-1,0,10,11,-1,0,11,12,-1,0,12,1,-1,14,2,1,-1,1,13,14,-1,15,3,2,-1,2,14,15,-1,16,4,3,-1,3,15,16,-1,17,5,4,-1,4,16,17,-1,18,6,5,-1,5,17,18,-1,19,7,6,-1,6,18,19,-1,20,8,7,-1,7,19,20,-1,21,9,8,-1,8,20,21,-1,22,10,9,-1,9,21,22,-1,23,11,10,-1,10,22,23,-1,24,12,11,-1,11,23,24,-1,13,1,12,-1,12,24,13,-1,26,14,13,-1,13,25,26,-1,27,15,14,-1,14,26,27,-1,28,16,15,-1,15,27,28,-1,29,17,16,-1,16,28,29,-1,30,18,17,-1,17,29,30,-1,31,19,18,-1,18,30,31,-1,32,20,19,-1,19,31,32,-1,33,21,20,-1,20,32,33,-1,34,22,21,-1,21,33,34,-1,35,23,22,-1,22,34,35,-1,36,24,23,-1,23,35,36,-1,25,13,24,-1,24,36,25,-1,38,26,25,-1,25,37,38,-1,39,27,26,-1,26,38,39,-1,40,28,27,-1,27,39,40,-1,41,29,28,-1,28,40,41,-1,42,30,29,-1,29,41,42,-1,43,31,30,-1,30,42,43,-1,44,32,31,-1,31,43,44,-1,45,33,32,-1,32,44,45,-1,46,34,33,-1,33,45,46,-1,47,35,34,-1,34,46,47,-1,48,36,35,-1,35,47,48,-1,37,25,36,-1,36,48,37,-1,50,38,37,-1,37,49,50,-1,51,39,38,-1,38,50,51,-1,52,40,39,-1,39,51,52,-1,53,41,40,-1,40,52,53,-1,54,42,41,-1,41,53,54,-1,55,43,42,-1,42,54,55,-1,56,44,43,-1,43,55,56,-1,57,45,44,-1,44,56,57,-1,58,46,45,-1,45,57,58,-1,59,47,46,-1,46,58,59,-1,60,48,47,-1,47,59,60,-1,49,37,48,-1,48,60,49,-1,61,50,49,-1,61,51,50,-1,61,52,51,-1,61,53,52,-1,61,54,53,-1,61,55,54,-1,61,56,55,-1,61,57,56,-1,61,58,57,-1,61,59,58,-1,61,60,59,-1,61,49,60,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,7,-1,0,7,8,-1,0,8,9,-1,0,9,10,-1,0,10,11,-1,0,11,12,-1,0,12,1,-1,14,2,1,-1,1,13,14,-1,15,3,2,-1,2,14,15,-1,16,4,3,-1,3,15,16,-1,17,5,4,-1,4,16,17,-1,18,6,5,-1,5,17,18,-1,19,7,6,-1,6,18,19,-1,20,8,7,-1,7,19,20,-1,21,9,8,-1,8,20,21,-1,22,10,9,-1,9,21,22,-1,23,11,10,-1,10,22,23,-1,24,12,11,-1,11,23,24,-1,13,1,12,-1,12,24,13,-1,26,14,13,-1,13,25,26,-1,27,15,14,-1,14,26,27,-1,28,16,15,-1,15,27,28,-1,29,17,16,-1,16,28,29,-1,30,18,17,-1,17,29,30,-1,31,19,18,-1,18,30,31,-1,32,20,19,-1,19,31,32,-1,33,21,20,-1,20,32,33,-1,34,22,21,-1,21,33,34,-1,35,23,22,-1,22,34,35,-1,36,24,23,-1,23,35,36,-1,25,13,24,-1,24,36,25,-1,38,26,25,-1,25,37,38,-1,39,27,26,-1,26,38,39,-1,40,28,27,-1,27,39,40,-1,41,29,28,-1,28,40,41,-1,42,30,29,-1,29,41,42,-1,43,31,30,-1,30,42,43,-1,44,32,31,-1,31,43,44,-1,45,33,32,-1,32,44,45,-1,46,34,33,-1,33,45,46,-1,47,35,34,-1,34,46,47,-1,48,36,35,-1,35,47,48,-1,37,25,36,-1,36,48,37,-1,50,38,37,-1,37,49,50,-1,51,39,38,-1,38,50,51,-1,52,40,39,-1,39,51,52,-1,53,41,40,-1,40,52,53,-1,54,42,41,-1,41,53,54,-1,55,43,42,-1,42,54,55,-1,56,44,43,-1,43,55,56,-1,57,45,44,-1,44,56,57,-1,58,46,45,-1,45,57,58,-1,59,47,46,-1,46,58,59,-1,60,48,47,-1,47,59,60,-1,49,37,48,-1,48,60,49,-1,61,50,49,-1,61,51,50,-1,61,52,51,-1,61,53,52,-1,61,54,53,-1,61,55,54,-1,61,56,55,-1,61,57,56,-1,61,58,57,-1,61,59,58,-1,61,60,59,-1,61,49,60,-1], Java.type("int[]")))
                      .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0),doubleToFloat(9.77),doubleToFloat(0.127),doubleToFloat(0),doubleToFloat(9.113),doubleToFloat(-2.519),doubleToFloat(-2.036),doubleToFloat(9.113),doubleToFloat(-2.165),doubleToFloat(-3.526),doubleToFloat(9.113),doubleToFloat(-1.737),doubleToFloat(-4.072),doubleToFloat(9.113),doubleToFloat(0.127),doubleToFloat(-3.526),doubleToFloat(9.113),doubleToFloat(1.991),doubleToFloat(-2.036),doubleToFloat(9.113),doubleToFloat(2.419),doubleToFloat(0),doubleToFloat(9.113),doubleToFloat(2.773),doubleToFloat(2.036),doubleToFloat(9.113),doubleToFloat(2.419),doubleToFloat(3.526),doubleToFloat(9.113),doubleToFloat(1.991),doubleToFloat(4.072),doubleToFloat(9.113),doubleToFloat(0.127),doubleToFloat(3.526),doubleToFloat(9.113),doubleToFloat(-1.737),doubleToFloat(2.036),doubleToFloat(9.113),doubleToFloat(-2.165),doubleToFloat(0),doubleToFloat(7.318),doubleToFloat(-4.115),doubleToFloat(-2.633),doubleToFloat(7.318),doubleToFloat(-3.546),doubleToFloat(-4.561),doubleToFloat(7.318),doubleToFloat(-1.994),doubleToFloat(-5.266),doubleToFloat(7.318),doubleToFloat(0.127),doubleToFloat(-4.561),doubleToFloat(7.318),doubleToFloat(2.248),doubleToFloat(-2.633),doubleToFloat(7.318),doubleToFloat(3.25),doubleToFloat(0),doubleToFloat(7.318),doubleToFloat(3.819),doubleToFloat(2.633),doubleToFloat(7.318),doubleToFloat(3.25),doubleToFloat(4.561),doubleToFloat(7.318),doubleToFloat(2.248),doubleToFloat(5.266),doubleToFloat(7.318),doubleToFloat(0.127),doubleToFloat(4.561),doubleToFloat(7.318),doubleToFloat(-1.994),doubleToFloat(2.633),doubleToFloat(7.318),doubleToFloat(-3.546),doubleToFloat(0),doubleToFloat(4.867),doubleToFloat(-4.475),doubleToFloat(-3.04),doubleToFloat(4.867),doubleToFloat(-3.819),doubleToFloat(-5.266),doubleToFloat(4.867),doubleToFloat(-2.026),doubleToFloat(-6.081),doubleToFloat(4.867),doubleToFloat(0.127),doubleToFloat(-5.266),doubleToFloat(4.867),doubleToFloat(2.576),doubleToFloat(-3.04),doubleToFloat(4.867),doubleToFloat(3.819),doubleToFloat(0),doubleToFloat(4.867),doubleToFloat(4.475),doubleToFloat(3.04),doubleToFloat(4.867),doubleToFloat(3.819),doubleToFloat(5.266),doubleToFloat(4.867),doubleToFloat(2.576),doubleToFloat(6.081),doubleToFloat(4.867),doubleToFloat(0.127),doubleToFloat(5.266),doubleToFloat(4.867),doubleToFloat(-2.026),doubleToFloat(3.04),doubleToFloat(4.867),doubleToFloat(-3.819),doubleToFloat(0),doubleToFloat(2.416),doubleToFloat(-3.819),doubleToFloat(-2.633),doubleToFloat(2.416),doubleToFloat(-3.25),doubleToFloat(-4.561),doubleToFloat(2.416),doubleToFloat(-1.698),doubleToFloat(-5.266),doubleToFloat(2.416),doubleToFloat(0.127),doubleToFloat(-4.561),doubleToFloat(2.416),doubleToFloat(2.248),doubleToFloat(-2.633),doubleToFloat(2.416),doubleToFloat(3.25),doubleToFloat(0),doubleToFloat(2.416),doubleToFloat(3.819),doubleToFloat(2.633),doubleToFloat(2.416),doubleToFloat(3.25),doubleToFloat(4.561),doubleToFloat(2.416),doubleToFloat(2.248),doubleToFloat(5.266),doubleToFloat(2.416),doubleToFloat(0.127),doubleToFloat(4.561),doubleToFloat(2.416),doubleToFloat(-1.698),doubleToFloat(2.633),doubleToFloat(2.416),doubleToFloat(-3.25),doubleToFloat(0),doubleToFloat(0.6221),doubleToFloat(-2.026),doubleToFloat(-1.52),doubleToFloat(0.6221),doubleToFloat(-1.698),doubleToFloat(-2.633),doubleToFloat(0.6221),doubleToFloat(-1.097),doubleToFloat(-3.04),doubleToFloat(0.6221),doubleToFloat(0.127),doubleToFloat(-2.633),doubleToFloat(0.6221),doubleToFloat(1.351),doubleToFloat(-1.52),doubleToFloat(0.6221),doubleToFloat(2.248),doubleToFloat(0),doubleToFloat(0.6221),doubleToFloat(2.576),doubleToFloat(1.52),doubleToFloat(0.6221),doubleToFloat(2.248),doubleToFloat(2.633),doubleToFloat(0.6221),doubleToFloat(1.351),doubleToFloat(3.04),doubleToFloat(0.6221),doubleToFloat(0.127),doubleToFloat(2.633),doubleToFloat(0.6221),doubleToFloat(-1.097),doubleToFloat(1.52),doubleToFloat(0.6221),doubleToFloat(-1.698),doubleToFloat(0),doubleToFloat(-0.0347),doubleToFloat(0.127)], Java.type("float[]"))))
                      .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.7418),doubleToFloat(0.2139),doubleToFloat(0.7309),doubleToFloat(0.2139),doubleToFloat(0.7342),doubleToFloat(0.26),doubleToFloat(0.7342),doubleToFloat(0.2938),doubleToFloat(0.7342),doubleToFloat(0.3062),doubleToFloat(0.7342),doubleToFloat(0.2938),doubleToFloat(0.7342),doubleToFloat(0.26),doubleToFloat(0.7309),doubleToFloat(0.2139),doubleToFloat(0.7343),doubleToFloat(0.2601),doubleToFloat(0.7343),doubleToFloat(0.2939),doubleToFloat(0.7343),doubleToFloat(0.3063),doubleToFloat(0.7343),doubleToFloat(0.2939),doubleToFloat(0.7343),doubleToFloat(0.2601),doubleToFloat(0.7157),doubleToFloat(0.2139),doubleToFloat(0.7156),doubleToFloat(0.2735),doubleToFloat(0.7156),doubleToFloat(0.3173),doubleToFloat(0.7156),doubleToFloat(0.3333),doubleToFloat(0.7156),doubleToFloat(0.3173),doubleToFloat(0.7156),doubleToFloat(0.2735),doubleToFloat(0.7157),doubleToFloat(0.2139),doubleToFloat(0.7157),doubleToFloat(0.2736),doubleToFloat(0.7157),doubleToFloat(0.3174),doubleToFloat(0.7157),doubleToFloat(0.3334),doubleToFloat(0.7157),doubleToFloat(0.3174),doubleToFloat(0.7157),doubleToFloat(0.2736),doubleToFloat(0.7015),doubleToFloat(0.2147),doubleToFloat(0.7014),doubleToFloat(0.2836),doubleToFloat(0.7014),doubleToFloat(0.3341),doubleToFloat(0.7014),doubleToFloat(0.3526),doubleToFloat(0.7014),doubleToFloat(0.3341),doubleToFloat(0.7014),doubleToFloat(0.2836),doubleToFloat(0.7015),doubleToFloat(0.2147),doubleToFloat(0.7015),doubleToFloat(0.2837),doubleToFloat(0.7015),doubleToFloat(0.3342),doubleToFloat(0.7015),doubleToFloat(0.3527),doubleToFloat(0.7015),doubleToFloat(0.3342),doubleToFloat(0.7015),doubleToFloat(0.2837),doubleToFloat(0.6609),doubleToFloat(0.2147),doubleToFloat(0.6608),doubleToFloat(0.2744),doubleToFloat(0.6608),doubleToFloat(0.3181),doubleToFloat(0.6608),doubleToFloat(0.3341),doubleToFloat(0.6608),doubleToFloat(0.3181),doubleToFloat(0.6608),doubleToFloat(0.2744),doubleToFloat(0.6609),doubleToFloat(0.2147),doubleToFloat(0.6609),doubleToFloat(0.2745),doubleToFloat(0.6609),doubleToFloat(0.3182),doubleToFloat(0.6609),doubleToFloat(0.3342),doubleToFloat(0.6609),doubleToFloat(0.3182),doubleToFloat(0.6609),doubleToFloat(0.2745),doubleToFloat(0.6312),doubleToFloat(0.2147),doubleToFloat(0.6311),doubleToFloat(0.2491),doubleToFloat(0.6311),doubleToFloat(0.2744),doubleToFloat(0.6311),doubleToFloat(0.2836),doubleToFloat(0.6311),doubleToFloat(0.2744),doubleToFloat(0.6311),doubleToFloat(0.2491),doubleToFloat(0.6312),doubleToFloat(0.2147),doubleToFloat(0.6312),doubleToFloat(0.2492),doubleToFloat(0.6312),doubleToFloat(0.2745),doubleToFloat(0.6312),doubleToFloat(0.2837),doubleToFloat(0.6312),doubleToFloat(0.2745),doubleToFloat(0.6312),doubleToFloat(0.2492),doubleToFloat(0.6204),doubleToFloat(0.2147)], Java.type("float[]"))))))))
              .addChild(new HAnimJoint("hanim_sacroiliac").setName("l_shoulder").setDEF("hanim_l_shoulder").setCenter(Java.to([doubleToFloat(7.699),doubleToFloat(59.419998),doubleToFloat(-1.567)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_l_shoulder").setName("l_upperarm").setDEF("hanim_l_upperarm")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(7.699),doubleToFloat(59.419998),doubleToFloat(-1.567)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,1,2,-1,3,4,5,-1,2,1,6,-1,6,7,2,-1,7,6,8,-1,8,9,7,-1,9,8,5,-1,5,4,9,-1,0,11,10,-1,10,1,0,-1,5,13,12,-1,12,3,5,-1,6,1,10,-1,10,14,6,-1,6,14,15,-1,15,8,6,-1,8,15,13,-1,13,5,8,-1,12,17,16,-1,16,11,12,-1,10,11,16,-1,16,18,10,-1,13,19,17,-1,17,12,13,-1,10,18,20,-1,20,14,10,-1,15,14,20,-1,20,21,15,-1,13,15,21,-1,21,19,13,-1,17,23,22,-1,22,16,17,-1,18,16,22,-1,22,24,18,-1,19,25,23,-1,23,17,19,-1,18,24,26,-1,26,20,18,-1,21,20,26,-1,26,27,21,-1,19,21,27,-1,27,25,19,-1,23,29,28,-1,28,22,23,-1,22,28,30,-1,30,24,22,-1,25,31,29,-1,29,23,25,-1,24,30,32,-1,32,26,24,-1,26,32,33,-1,33,27,26,-1,27,33,31,-1,31,25,27,-1,29,35,34,-1,34,28,29,-1,28,34,36,-1,36,30,28,-1,31,37,35,-1,35,29,31,-1,30,36,38,-1,38,32,30,-1,32,38,39,-1,39,33,32,-1,33,39,37,-1,37,31,33,-1,0,2,40,-1,40,41,0,-1,4,3,42,-1,42,43,4,-1,2,7,44,-1,44,40,2,-1,7,9,45,-1,45,44,7,-1,9,4,43,-1,43,45,9,-1,3,12,46,-1,46,42,3,-1,12,11,47,-1,47,46,12,-1,41,40,48,-1,43,42,48,-1,40,44,48,-1,44,45,48,-1,45,43,48,-1,42,46,48,-1,46,47,48,-1,34,35,49,-1,36,34,49,-1,35,37,49,-1,38,36,49,-1,39,38,49,-1,37,39,49,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,1,2,-1,3,4,5,-1,2,1,6,-1,6,7,2,-1,7,6,8,-1,8,9,7,-1,9,8,5,-1,5,4,9,-1,0,11,10,-1,10,1,0,-1,5,13,12,-1,12,3,5,-1,6,1,10,-1,10,14,6,-1,6,14,15,-1,15,8,6,-1,8,15,13,-1,13,5,8,-1,50,51,16,-1,16,11,50,-1,10,11,16,-1,16,18,10,-1,13,19,17,-1,17,12,13,-1,10,18,20,-1,20,14,10,-1,15,14,20,-1,20,21,15,-1,13,15,21,-1,21,19,13,-1,52,53,22,-1,22,16,52,-1,18,16,22,-1,22,24,18,-1,19,25,23,-1,23,17,19,-1,18,24,26,-1,26,20,18,-1,21,20,26,-1,26,27,21,-1,19,21,27,-1,27,25,19,-1,54,55,28,-1,28,22,54,-1,22,28,30,-1,30,24,22,-1,25,31,29,-1,29,23,25,-1,24,30,32,-1,32,26,24,-1,26,32,33,-1,33,27,26,-1,27,33,31,-1,31,25,27,-1,56,57,34,-1,34,28,56,-1,28,34,36,-1,36,30,28,-1,31,37,35,-1,35,29,31,-1,30,36,38,-1,38,32,30,-1,32,38,39,-1,39,33,32,-1,33,39,37,-1,37,31,33,-1,0,2,40,-1,40,41,0,-1,4,3,42,-1,42,43,4,-1,2,7,44,-1,44,40,2,-1,7,9,45,-1,45,69,7,-1,9,4,43,-1,43,45,9,-1,3,12,46,-1,46,42,3,-1,59,11,47,-1,47,58,59,-1,41,40,48,-1,60,61,48,-1,40,44,48,-1,44,62,48,-1,63,64,48,-1,65,66,48,-1,67,47,48,-1,34,68,49,-1,36,34,49,-1,35,37,49,-1,38,36,49,-1,39,38,49,-1,37,39,49,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-1.805),doubleToFloat(-1.524),doubleToFloat(1.771),doubleToFloat(0.0584),doubleToFloat(-1.838),doubleToFloat(2.197),doubleToFloat(-0.3087),doubleToFloat(-0.8066),doubleToFloat(2.836),doubleToFloat(-1.788),doubleToFloat(-1.533),doubleToFloat(-1.801),doubleToFloat(-0.3087),doubleToFloat(-0.8066),doubleToFloat(-2.836),doubleToFloat(0.0584),doubleToFloat(-1.838),doubleToFloat(-2.819),doubleToFloat(2.954),doubleToFloat(-0.699),doubleToFloat(1.997),doubleToFloat(2.155),doubleToFloat(1.069),doubleToFloat(1.997),doubleToFloat(2.953),doubleToFloat(-0.699),doubleToFloat(-1.703),doubleToFloat(2.11),doubleToFloat(1.038),doubleToFloat(-1.703),doubleToFloat(0.4985),doubleToFloat(-2.844),doubleToFloat(2.197),doubleToFloat(-1.762),doubleToFloat(-2.191),doubleToFloat(0.9288),doubleToFloat(-1.762),doubleToFloat(-2.191),doubleToFloat(-0.8936),doubleToFloat(0.4985),doubleToFloat(-2.844),doubleToFloat(-2.659),doubleToFloat(3.097),doubleToFloat(-2.644),doubleToFloat(1.051),doubleToFloat(3.097),doubleToFloat(-2.644),doubleToFloat(-0.8368),doubleToFloat(-1.384),doubleToFloat(-5.116),doubleToFloat(0.973),doubleToFloat(-1.384),doubleToFloat(-5.116),doubleToFloat(-0.9359),doubleToFloat(0.5185),doubleToFloat(-5.524),doubleToFloat(1.801),doubleToFloat(0.5185),doubleToFloat(-5.524),doubleToFloat(-2.058),doubleToFloat(2.604),doubleToFloat(-5.03),doubleToFloat(0.9889),doubleToFloat(2.604),doubleToFloat(-5.03),doubleToFloat(-0.7969),doubleToFloat(-1.181),doubleToFloat(-8.251),doubleToFloat(0.8308),doubleToFloat(-1.181),doubleToFloat(-8.251),doubleToFloat(-0.9379),doubleToFloat(0.4076),doubleToFloat(-9.293),doubleToFloat(1.225),doubleToFloat(0.4076),doubleToFloat(-9.293),doubleToFloat(-1.965),doubleToFloat(2.159),doubleToFloat(-8.822),doubleToFloat(0.2392),doubleToFloat(2.159),doubleToFloat(-8.822),doubleToFloat(-0.9061),doubleToFloat(-1.254),doubleToFloat(-9.178),doubleToFloat(0.3009),doubleToFloat(-1.254),doubleToFloat(-9.178),doubleToFloat(-1.07),doubleToFloat(0.3261),doubleToFloat(-10.22),doubleToFloat(1.219),doubleToFloat(0.3253),doubleToFloat(-10.22),doubleToFloat(-2.074),doubleToFloat(2.012),doubleToFloat(-9.757),doubleToFloat(0.2392),doubleToFloat(2.012),doubleToFloat(-9.757),doubleToFloat(-0.9059),doubleToFloat(-1.568),doubleToFloat(-10.77),doubleToFloat(0.2995),doubleToFloat(-1.568),doubleToFloat(-10.77),doubleToFloat(-1.067),doubleToFloat(0.1923),doubleToFloat(-11.8),doubleToFloat(1.212),doubleToFloat(0.1925),doubleToFloat(-11.8),doubleToFloat(-1.826),doubleToFloat(1.877),doubleToFloat(-11.33),doubleToFloat(0.2366),doubleToFloat(1.877),doubleToFloat(-11.33),doubleToFloat(-0.9017),doubleToFloat(-0.743),doubleToFloat(-0.1609),doubleToFloat(2.331),doubleToFloat(-1.942),doubleToFloat(-0.7259),doubleToFloat(1.447),doubleToFloat(-1.928),doubleToFloat(-0.7331),doubleToFloat(-1.522),doubleToFloat(-0.743),doubleToFloat(-0.1609),doubleToFloat(-2.382),doubleToFloat(0.9954),doubleToFloat(2.188),doubleToFloat(1.635),doubleToFloat(0.958),doubleToFloat(2.162),doubleToFloat(-1.44),doubleToFloat(-1.686),doubleToFloat(-1.124),doubleToFloat(-0.768),doubleToFloat(-1.686),doubleToFloat(-1.124),doubleToFloat(0.7466),doubleToFloat(-1.597),doubleToFloat(0.8227),doubleToFloat(0.0058),doubleToFloat(0.1065),doubleToFloat(-12.53),doubleToFloat(-0.3412)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.8175),doubleToFloat(0.3603),doubleToFloat(0.8632),doubleToFloat(0.3546),doubleToFloat(0.8605),doubleToFloat(0.3699),doubleToFloat(0.9777),doubleToFloat(0.3334),doubleToFloat(0.969),doubleToFloat(0.3634),doubleToFloat(0.9603),doubleToFloat(0.3336),doubleToFloat(0.8992),doubleToFloat(0.3596),doubleToFloat(0.8908),doubleToFloat(0.3854),doubleToFloat(0.9343),doubleToFloat(0.3596),doubleToFloat(0.9435),doubleToFloat(0.3848),doubleToFloat(0.8525),doubleToFloat(0.3149),doubleToFloat(0.8059),doubleToFloat(0.3198),doubleToFloat(0.9839),doubleToFloat(0.323),doubleToFloat(0.9553),doubleToFloat(0.3189),doubleToFloat(0.9082),doubleToFloat(0.3292),doubleToFloat(0.9254),doubleToFloat(0.3292),doubleToFloat(0.8055),doubleToFloat(0.2725),doubleToFloat(0.9792),doubleToFloat(0.2777),doubleToFloat(0.8587),doubleToFloat(0.2725),doubleToFloat(0.9499),doubleToFloat(0.2765),doubleToFloat(0.9085),doubleToFloat(0.29),doubleToFloat(0.9252),doubleToFloat(0.29),doubleToFloat(0.8162),doubleToFloat(0.2273),doubleToFloat(0.9712),doubleToFloat(0.2286),doubleToFloat(0.8696),doubleToFloat(0.2158),doubleToFloat(0.944),doubleToFloat(0.2164),doubleToFloat(0.9155),doubleToFloat(0.2287),doubleToFloat(0.9256),doubleToFloat(0.2287),doubleToFloat(0.8189),doubleToFloat(0.2013),doubleToFloat(0.9684),doubleToFloat(0.2137),doubleToFloat(0.8705),doubleToFloat(0.2008),doubleToFloat(0.9438),doubleToFloat(0.2015),doubleToFloat(0.9155),doubleToFloat(0.2135),doubleToFloat(0.9255),doubleToFloat(0.2135),doubleToFloat(0.8216),doubleToFloat(0.181),doubleToFloat(0.969),doubleToFloat(0.1876),doubleToFloat(0.872),doubleToFloat(0.1755),doubleToFloat(0.9412),doubleToFloat(0.1762),doubleToFloat(0.9157),doubleToFloat(0.1882),doubleToFloat(0.9252),doubleToFloat(0.1882),doubleToFloat(0.8292),doubleToFloat(0.3842),doubleToFloat(0.8182),doubleToFloat(0.3733),doubleToFloat(0.9806),doubleToFloat(0.3457),doubleToFloat(0.9745),doubleToFloat(0.3724),doubleToFloat(0.838),doubleToFloat(0.4052),doubleToFloat(0.9619),doubleToFloat(0.3995),doubleToFloat(0.9854),doubleToFloat(0.3401),doubleToFloat(0.8086),doubleToFloat(0.3454),doubleToFloat(0.8127),doubleToFloat(0.3778),doubleToFloat(0.9241),doubleToFloat(0.1643),doubleToFloat(0.7988),doubleToFloat(0.3204),doubleToFloat(0.7988),doubleToFloat(0.2717),doubleToFloat(0.7988),doubleToFloat(0.2717),doubleToFloat(0.8096),doubleToFloat(0.2286),doubleToFloat(0.8096),doubleToFloat(0.2286),doubleToFloat(0.8053),doubleToFloat(0.2016),doubleToFloat(0.8053),doubleToFloat(0.2016),doubleToFloat(0.8125),doubleToFloat(0.1748),doubleToFloat(0.8055),doubleToFloat(0.3493),doubleToFloat(0.7988),doubleToFloat(0.3204),doubleToFloat(0.8071),doubleToFloat(0.3803),doubleToFloat(0.8007),doubleToFloat(0.3548),doubleToFloat(0.8121),doubleToFloat(0.3995),doubleToFloat(0.8121),doubleToFloat(0.3995),doubleToFloat(0.8071),doubleToFloat(0.3803),doubleToFloat(0.8007),doubleToFloat(0.3548),doubleToFloat(0.8055),doubleToFloat(0.3493),doubleToFloat(0.8055),doubleToFloat(0.3493),doubleToFloat(0.8125),doubleToFloat(0.1748),doubleToFloat(0.9181),doubleToFloat(0.4)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_l_shoulder").setName("l_elbow").setDEF("hanim_l_elbow").setCenter(Java.to([doubleToFloat(8.026),doubleToFloat(48.450001),doubleToFloat(-1.959)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_l_elbow").setName("l_forearm").setDEF("hanim_l_forearm")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(8.026),doubleToFloat(48.450001),doubleToFloat(-1.959)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,3,1,-1,1,2,0,-1,2,1,4,-1,4,5,2,-1,6,7,3,-1,3,0,6,-1,5,4,8,-1,8,9,5,-1,9,8,10,-1,10,11,9,-1,11,10,7,-1,7,6,11,-1,3,13,12,-1,12,1,3,-1,4,1,12,-1,12,14,4,-1,13,3,7,-1,7,15,13,-1,4,14,16,-1,16,8,4,-1,8,16,17,-1,17,10,8,-1,7,10,17,-1,17,15,7,-1,13,19,18,-1,18,12,13,-1,12,18,20,-1,20,14,12,-1,13,15,21,-1,21,19,13,-1,16,14,20,-1,20,22,16,-1,16,22,23,-1,23,17,16,-1,17,23,21,-1,21,15,17,-1,24,25,19,-1,19,21,24,-1,26,20,18,-1,18,27,26,-1,25,27,18,-1,18,19,25,-1,24,21,23,-1,23,28,24,-1,28,23,22,-1,22,29,28,-1,26,29,22,-1,22,20,26,-1,0,2,30,-1,30,31,0,-1,2,5,32,-1,32,30,2,-1,6,0,31,-1,31,33,6,-1,5,9,34,-1,34,32,5,-1,9,11,35,-1,35,34,9,-1,11,6,33,-1,33,35,11,-1,31,30,36,-1,30,32,36,-1,33,31,36,-1,32,34,36,-1,34,35,36,-1,35,33,36,-1,25,24,37,-1,26,27,37,-1,27,25,37,-1,24,28,37,-1,28,29,37,-1,29,26,37,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,3,1,-1,1,2,0,-1,2,1,4,-1,4,5,2,-1,6,7,3,-1,3,0,6,-1,5,4,8,-1,8,9,5,-1,38,39,10,-1,10,11,38,-1,11,10,7,-1,7,6,11,-1,3,13,12,-1,12,1,3,-1,4,1,12,-1,12,14,4,-1,13,3,7,-1,7,15,13,-1,4,14,16,-1,16,8,4,-1,40,41,17,-1,17,10,40,-1,7,10,17,-1,17,15,7,-1,13,19,18,-1,18,12,13,-1,12,18,20,-1,20,14,12,-1,13,15,21,-1,21,19,13,-1,16,14,20,-1,20,22,16,-1,42,43,23,-1,23,17,42,-1,17,23,21,-1,21,15,17,-1,24,25,19,-1,19,21,24,-1,26,20,18,-1,18,27,26,-1,25,27,18,-1,18,19,25,-1,24,21,23,-1,23,28,24,-1,28,23,44,-1,44,45,28,-1,26,29,22,-1,22,20,26,-1,0,2,30,-1,30,31,0,-1,2,5,32,-1,32,30,2,-1,6,0,31,-1,31,33,6,-1,5,9,34,-1,34,32,5,-1,47,11,35,-1,35,46,47,-1,11,6,33,-1,33,35,11,-1,31,30,48,-1,30,32,36,-1,33,31,49,-1,32,34,36,-1,50,35,51,-1,35,33,52,-1,25,24,37,-1,26,27,37,-1,27,25,37,-1,24,28,37,-1,28,53,37,-1,29,26,37,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-1.607),doubleToFloat(-0.3011),doubleToFloat(-0.7068),doubleToFloat(-1.816),doubleToFloat(-1.259),doubleToFloat(0.7158),doubleToFloat(-1.607),doubleToFloat(-0.3011),doubleToFloat(0.7173),doubleToFloat(-1.816),doubleToFloat(-1.259),doubleToFloat(-0.7039),doubleToFloat(0.0748),doubleToFloat(-2.207),doubleToFloat(1.664),doubleToFloat(0.0977),doubleToFloat(-1.281),doubleToFloat(1.671),doubleToFloat(0.0968),doubleToFloat(-1.282),doubleToFloat(-1.749),doubleToFloat(0.075),doubleToFloat(-2.207),doubleToFloat(-1.492),doubleToFloat(1.791),doubleToFloat(-1.616),doubleToFloat(0.6505),doubleToFloat(1.816),doubleToFloat(-0.6919),doubleToFloat(0.6532),doubleToFloat(1.791),doubleToFloat(-1.616),doubleToFloat(-0.5319),doubleToFloat(1.816),doubleToFloat(-0.6919),doubleToFloat(-0.5362),doubleToFloat(-1.323),doubleToFloat(-4.528),doubleToFloat(1.438),doubleToFloat(-1.323),doubleToFloat(-4.528),doubleToFloat(-0.6341),doubleToFloat(0.0101),doubleToFloat(-4.917),doubleToFloat(1.749),doubleToFloat(0.01),doubleToFloat(-4.917),doubleToFloat(-1.419),doubleToFloat(1.599),doubleToFloat(-4.353),doubleToFloat(0.9644),doubleToFloat(1.599),doubleToFloat(-4.353),doubleToFloat(-0.4902),doubleToFloat(-1.275),doubleToFloat(-7.552),doubleToFloat(0.9117),doubleToFloat(-1.275),doubleToFloat(-7.552),doubleToFloat(-0.5772),doubleToFloat(0.0603),doubleToFloat(-7.691),doubleToFloat(1.6),doubleToFloat(0.0602),doubleToFloat(-7.691),doubleToFloat(-1.319),doubleToFloat(1.34),doubleToFloat(-7.172),doubleToFloat(0.8445),doubleToFloat(1.34),doubleToFloat(-7.172),doubleToFloat(-0.3992),doubleToFloat(0.0847),doubleToFloat(-10.99),doubleToFloat(-0.7836),doubleToFloat(-0.679),doubleToFloat(-10.66),doubleToFloat(-0.3055),doubleToFloat(0.092),doubleToFloat(-10.99),doubleToFloat(1.088),doubleToFloat(-0.6772),doubleToFloat(-10.65),doubleToFloat(0.6521),doubleToFloat(0.6479),doubleToFloat(-10.85),doubleToFloat(-0.4597),doubleToFloat(0.652),doubleToFloat(-10.87),doubleToFloat(0.7241),doubleToFloat(-0.8326),doubleToFloat(0.9823),doubleToFloat(0.4058),doubleToFloat(-0.8326),doubleToFloat(0.9823),doubleToFloat(-0.3926),doubleToFloat(0.1232),doubleToFloat(0.4326),doubleToFloat(0.9405),doubleToFloat(0.1227),doubleToFloat(0.4326),doubleToFloat(-0.977),doubleToFloat(1.087),doubleToFloat(0.7632),doubleToFloat(0.3698),doubleToFloat(1.087),doubleToFloat(0.7632),doubleToFloat(-0.297),doubleToFloat(0.1182),doubleToFloat(1.187),doubleToFloat(0.0082),doubleToFloat(-0.0134),doubleToFloat(-11.39),doubleToFloat(0.1526)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.9014),doubleToFloat(0.1592),doubleToFloat(0.9207),doubleToFloat(0.1477),doubleToFloat(0.9221),doubleToFloat(0.1592),doubleToFloat(0.9028),doubleToFloat(0.1477),doubleToFloat(0.9498),doubleToFloat(0.1348),doubleToFloat(0.951),doubleToFloat(0.146),doubleToFloat(0.8725),doubleToFloat(0.146),doubleToFloat(0.8736),doubleToFloat(0.1348),doubleToFloat(0.9793),doubleToFloat(0.1407),doubleToFloat(0.9796),doubleToFloat(0.1519),doubleToFloat(0.8426),doubleToFloat(0.1407),doubleToFloat(0.8423),doubleToFloat(0.1519),doubleToFloat(0.9299),doubleToFloat(0.1077),doubleToFloat(0.9022),doubleToFloat(0.1077),doubleToFloat(0.9466),doubleToFloat(0.102),doubleToFloat(0.8775),doubleToFloat(0.102),doubleToFloat(0.9732),doubleToFloat(0.1077),doubleToFloat(0.8437),doubleToFloat(0.1077),doubleToFloat(0.9238),doubleToFloat(0.071),doubleToFloat(0.9036),doubleToFloat(0.071),doubleToFloat(0.9446),doubleToFloat(0.0684),doubleToFloat(0.8798),doubleToFloat(0.0684),doubleToFloat(0.9704),doubleToFloat(0.0737),doubleToFloat(0.845),doubleToFloat(0.0737),doubleToFloat(0.8879),doubleToFloat(0.0318),doubleToFloat(0.9059),doubleToFloat(0.0364),doubleToFloat(0.939),doubleToFloat(0.0318),doubleToFloat(0.9232),doubleToFloat(0.0366),doubleToFloat(0.8712),doubleToFloat(0.0331),doubleToFloat(0.9514),doubleToFloat(0.0329),doubleToFloat(0.9243),doubleToFloat(0.1741),doubleToFloat(0.8994),doubleToFloat(0.1741),doubleToFloat(0.9551),doubleToFloat(0.1668),doubleToFloat(0.8685),doubleToFloat(0.1668),doubleToFloat(0.9806),doubleToFloat(0.1701),doubleToFloat(0.8414),doubleToFloat(0.1701),doubleToFloat(0.9871),doubleToFloat(0.1759),doubleToFloat(0.9173),doubleToFloat(0.0271),doubleToFloat(0.8271),doubleToFloat(0.1519),doubleToFloat(0.8268),doubleToFloat(0.1407),doubleToFloat(0.8268),doubleToFloat(0.1407),doubleToFloat(0.8207),doubleToFloat(0.1077),doubleToFloat(0.8207),doubleToFloat(0.1077),doubleToFloat(0.8264),doubleToFloat(0.0737),doubleToFloat(0.8264),doubleToFloat(0.0737),doubleToFloat(0.8397),doubleToFloat(0.0329),doubleToFloat(0.8281),doubleToFloat(0.1701),doubleToFloat(0.8271),doubleToFloat(0.1519),doubleToFloat(0.8346),doubleToFloat(0.1759),doubleToFloat(0.8346),doubleToFloat(0.1759),doubleToFloat(0.8281),doubleToFloat(0.1701),doubleToFloat(0.8346),doubleToFloat(0.1759),doubleToFloat(0.8346),doubleToFloat(0.1759),doubleToFloat(0.8397),doubleToFloat(0.0329)], Java.type("float[]"))))))))
                  .addChild(new HAnimJoint("hanim_l_elbow").setName("l_radiocarpal").setDEF("hanim_l_radiocarpal").setCenter(Java.to([doubleToFloat(7.617),doubleToFloat(37.689999),doubleToFloat(-1.663)], Java.type("float[]")))
                    .addChild(new HAnimSegment("hanim_l_radiocarpal").setName("l_carpal").setDEF("hanim_l_carpal")
                      .addChild(new Transform().setTranslation(Java.to([doubleToFloat(7.617),doubleToFloat(37.689999),doubleToFloat(-1.663)], Java.type("float[]")))
                        .addChild(new Shape()
                          .setAppearance(new Appearance()
                            .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                            .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                          .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,3,1,-1,1,2,0,-1,4,7,5,-1,5,6,4,-1,10,11,8,-1,8,9,10,-1,14,15,12,-1,12,13,14,-1,11,14,13,-1,13,8,11,-1,17,10,9,-1,9,16,17,-1,19,17,16,-1,16,18,19,-1,15,19,18,-1,18,12,15,-1,20,21,11,-1,11,10,20,-1,24,25,22,-1,22,23,24,-1,21,26,14,-1,14,11,21,-1,27,20,10,-1,10,17,27,-1,28,27,17,-1,17,19,28,-1,29,28,19,-1,19,15,29,-1,2,1,21,-1,21,20,2,-1,3,0,29,-1,29,26,3,-1,1,3,26,-1,26,21,1,-1,30,2,20,-1,20,27,30,-1,31,30,27,-1,27,28,31,-1,0,31,28,-1,28,29,0,-1,32,33,0,-1,0,2,32,-1,34,32,2,-1,2,30,34,-1,35,34,30,-1,30,31,35,-1,33,35,31,-1,31,0,33,-1,36,37,32,-1,32,34,36,-1,38,36,34,-1,34,35,38,-1,39,38,35,-1,35,33,39,-1,37,39,33,-1,33,32,37,-1,6,5,37,-1,37,36,6,-1,4,6,36,-1,36,38,4,-1,7,4,38,-1,38,39,7,-1,5,7,39,-1,39,37,5,-1,23,22,15,-1,15,14,23,-1,24,23,14,-1,14,26,24,-1,42,43,40,-1,40,41,42,-1,22,25,29,-1,29,15,22,-1,44,45,25,-1,25,24,44,-1,46,47,26,-1,26,29,46,-1,47,44,24,-1,24,26,47,-1,45,46,29,-1,29,25,45,-1,41,40,47,-1,47,46,41,-1,42,41,46,-1,46,45,42,-1,43,42,45,-1,45,44,43,-1,40,43,44,-1,44,47,40,-1,9,8,48,-1,13,12,48,-1,8,13,48,-1,16,9,48,-1,18,16,48,-1,12,18,48,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([47,50,48,-1,48,49,47,-1,8,11,9,-1,9,10,8,-1,53,54,51,-1,51,52,53,-1,57,58,55,-1,55,56,57,-1,54,57,56,-1,56,51,54,-1,14,15,12,-1,12,13,14,-1,17,14,13,-1,13,16,17,-1,19,17,16,-1,16,18,19,-1,59,60,54,-1,54,53,59,-1,63,64,61,-1,61,62,63,-1,60,65,57,-1,57,54,60,-1,20,21,15,-1,15,14,20,-1,22,20,14,-1,14,17,22,-1,23,22,17,-1,17,19,23,-1,49,48,60,-1,60,59,49,-1,50,47,66,-1,66,65,50,-1,48,50,65,-1,65,60,48,-1,24,25,21,-1,21,20,24,-1,26,24,20,-1,20,22,26,-1,27,26,22,-1,22,23,27,-1,67,68,47,-1,47,49,67,-1,28,29,25,-1,25,24,28,-1,30,28,24,-1,24,26,30,-1,31,30,26,-1,26,27,31,-1,32,33,29,-1,29,28,32,-1,34,32,28,-1,28,30,34,-1,35,34,30,-1,30,31,35,-1,69,70,68,-1,68,67,69,-1,10,9,33,-1,33,32,10,-1,8,10,32,-1,32,34,8,-1,11,8,34,-1,34,35,11,-1,71,72,70,-1,70,69,71,-1,62,61,58,-1,58,57,62,-1,63,62,57,-1,57,65,63,-1,38,39,36,-1,36,37,38,-1,40,41,23,-1,23,19,40,-1,73,74,64,-1,64,63,73,-1,43,44,42,-1,42,23,43,-1,75,73,63,-1,63,65,75,-1,45,43,23,-1,23,41,45,-1,37,36,44,-1,44,43,37,-1,38,37,43,-1,43,45,38,-1,76,77,74,-1,74,73,76,-1,78,76,73,-1,73,75,78,-1,1,0,5,-1,3,2,6,-1,0,4,7,-1,13,12,46,-1,16,13,46,-1,18,16,46,-1], Java.type("int[]")))
                            .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0.428),doubleToFloat(-4.043),doubleToFloat(1.035),doubleToFloat(-0.062),doubleToFloat(-2.76),doubleToFloat(-0.7256),doubleToFloat(0.4283),doubleToFloat(-4.043),doubleToFloat(-1.325),doubleToFloat(-0.0621),doubleToFloat(-2.759),doubleToFloat(0.4786),doubleToFloat(0.5207),doubleToFloat(-5.808),doubleToFloat(0.5759),doubleToFloat(-0.0026),doubleToFloat(-5.67),doubleToFloat(-1.325),doubleToFloat(0.5207),doubleToFloat(-5.808),doubleToFloat(-0.9061),doubleToFloat(-0.0026),doubleToFloat(-5.67),doubleToFloat(1.035),doubleToFloat(-0.311),doubleToFloat(0.5832),doubleToFloat(-0.6014),doubleToFloat(0.4947),doubleToFloat(0.3747),doubleToFloat(-1.08),doubleToFloat(0.3587),doubleToFloat(-0.8063),doubleToFloat(-1.077),doubleToFloat(-0.3511),doubleToFloat(-0.5647),doubleToFloat(-0.6024),doubleToFloat(0.502),doubleToFloat(0.3752),doubleToFloat(0.7923),doubleToFloat(-0.3112),doubleToFloat(0.5961),doubleToFloat(0.3561),doubleToFloat(-0.3512),doubleToFloat(-0.5647),doubleToFloat(0.3516),doubleToFloat(0.5145),doubleToFloat(-0.7545),doubleToFloat(0.7924),doubleToFloat(1.03),doubleToFloat(0.5998),doubleToFloat(-0.7556),doubleToFloat(1.03),doubleToFloat(-0.5583),doubleToFloat(-0.7457),doubleToFloat(1.037),doubleToFloat(0.5778),doubleToFloat(0.4281),doubleToFloat(1.031),doubleToFloat(-0.5582),doubleToFloat(0.4287),doubleToFloat(0.3854),doubleToFloat(-2.321),doubleToFloat(-1.587),doubleToFloat(-0.3249),doubleToFloat(-2.079),doubleToFloat(-0.8558),doubleToFloat(0.2488),doubleToFloat(-1.494),doubleToFloat(1.332),doubleToFloat(-0.4651),doubleToFloat(-1.238),doubleToFloat(0.8921),doubleToFloat(-0.7055),doubleToFloat(-1.95),doubleToFloat(1.153),doubleToFloat(-0.2884),doubleToFloat(-2.29),doubleToFloat(1.587),doubleToFloat(-0.324),doubleToFloat(-2.079),doubleToFloat(0.6132),doubleToFloat(1.057),doubleToFloat(-2.073),doubleToFloat(-1.077),doubleToFloat(1.049),doubleToFloat(-2.091),doubleToFloat(0.6923),doubleToFloat(0.3858),doubleToFloat(-2.321),doubleToFloat(1.292),doubleToFloat(0.9501),doubleToFloat(-4.181),doubleToFloat(-0.9063),doubleToFloat(0.9499),doubleToFloat(-4.181),doubleToFloat(0.5762),doubleToFloat(0.2552),doubleToFloat(-4.694),doubleToFloat(-1.325),doubleToFloat(0.2552),doubleToFloat(-4.694),doubleToFloat(1.035),doubleToFloat(0.7786),doubleToFloat(-4.832),doubleToFloat(-0.9061),doubleToFloat(0.7786),doubleToFloat(-4.832),doubleToFloat(0.5759),doubleToFloat(0.6497),doubleToFloat(-5.32),doubleToFloat(-0.9061),doubleToFloat(0.1263),doubleToFloat(-5.182),doubleToFloat(-1.325),doubleToFloat(0.6497),doubleToFloat(-5.32),doubleToFloat(0.5759),doubleToFloat(0.1263),doubleToFloat(-5.182),doubleToFloat(1.035),doubleToFloat(-0.6755),doubleToFloat(-3.115),doubleToFloat(0.6119),doubleToFloat(-0.214),doubleToFloat(-3.44),doubleToFloat(1.081),doubleToFloat(-0.6399),doubleToFloat(-3.326),doubleToFloat(1.586),doubleToFloat(-1.057),doubleToFloat(-2.987),doubleToFloat(1.151),doubleToFloat(-0.8814),doubleToFloat(-2.469),doubleToFloat(1.15),doubleToFloat(-0.4641),doubleToFloat(-2.808),doubleToFloat(1.587),doubleToFloat(-0.0383),doubleToFloat(-2.922),doubleToFloat(1.082),doubleToFloat(-0.4998),doubleToFloat(-2.597),doubleToFloat(0.6126),doubleToFloat(0.4437),doubleToFloat(0.8321),doubleToFloat(-0.1433)], Java.type("float[]"))))
                            .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.1427),doubleToFloat(0.2125),doubleToFloat(0.1222),doubleToFloat(0.2114),doubleToFloat(0.072),doubleToFloat(0.2114),doubleToFloat(0.0487),doubleToFloat(0.2146),doubleToFloat(0.1648),doubleToFloat(0.2146),doubleToFloat(0.1427),doubleToFloat(0.2125),doubleToFloat(0.072),doubleToFloat(0.2114),doubleToFloat(0.1648),doubleToFloat(0.2146),doubleToFloat(0.1856),doubleToFloat(0.1891),doubleToFloat(0.2639),doubleToFloat(0.1883),doubleToFloat(0.2484),doubleToFloat(0.188),doubleToFloat(0.1701),doubleToFloat(0.1891),doubleToFloat(0.2529),doubleToFloat(0.0205),doubleToFloat(0.2367),doubleToFloat(0.0146),doubleToFloat(0.2411),doubleToFloat(0.0322),doubleToFloat(0.2577),doubleToFloat(0.0389),doubleToFloat(0.1901),doubleToFloat(0.0132),doubleToFloat(0.1856),doubleToFloat(0.0283),doubleToFloat(0.1719),doubleToFloat(0.0186),doubleToFloat(0.1675),doubleToFloat(0.0336),doubleToFloat(0.2484),doubleToFloat(0.0869),doubleToFloat(0.2649),doubleToFloat(0.0843),doubleToFloat(0.1864),doubleToFloat(0.0924),doubleToFloat(0.1708),doubleToFloat(0.0905),doubleToFloat(0.2488),doubleToFloat(0.1471),doubleToFloat(0.2643),doubleToFloat(0.1474),doubleToFloat(0.186),doubleToFloat(0.1482),doubleToFloat(0.1705),doubleToFloat(0.1482),doubleToFloat(0.2484),doubleToFloat(0.1644),doubleToFloat(0.2639),doubleToFloat(0.1647),doubleToFloat(0.1856),doubleToFloat(0.1655),doubleToFloat(0.1701),doubleToFloat(0.1655),doubleToFloat(0.2484),doubleToFloat(0.1762),doubleToFloat(0.2639),doubleToFloat(0.1765),doubleToFloat(0.1856),doubleToFloat(0.1773),doubleToFloat(0.1701),doubleToFloat(0.1773),doubleToFloat(0.1633),doubleToFloat(0.1308),doubleToFloat(0.1534),doubleToFloat(0.1396),doubleToFloat(0.1426),doubleToFloat(0.1381),doubleToFloat(0.1476),doubleToFloat(0.1297),doubleToFloat(0.1475),doubleToFloat(0.0465),doubleToFloat(0.1445),doubleToFloat(0.0998),doubleToFloat(0.1671),doubleToFloat(0.1111),doubleToFloat(0.1534),doubleToFloat(0.127),doubleToFloat(0.1633),doubleToFloat(0.1182),doubleToFloat(0.1426),doubleToFloat(0.1255),doubleToFloat(0.2062),doubleToFloat(0.0097),doubleToFloat(0.1009),doubleToFloat(0.1405),doubleToFloat(0.0196),doubleToFloat(0.0979),doubleToFloat(0.0057),doubleToFloat(0.141),doubleToFloat(0.0959),doubleToFloat(0.0953),doubleToFloat(0.0453),doubleToFloat(0.0029),doubleToFloat(0.0235),doubleToFloat(0.0102),doubleToFloat(0.0236),doubleToFloat(0.0455),doubleToFloat(0.0452),doubleToFloat(0.0373),doubleToFloat(0.1089),doubleToFloat(0.0102),doubleToFloat(0.089),doubleToFloat(0.0039),doubleToFloat(0.0888),doubleToFloat(0.0373),doubleToFloat(0.1089),doubleToFloat(0.0441),doubleToFloat(0.005),doubleToFloat(0.081),doubleToFloat(0.0337),doubleToFloat(0.0828),doubleToFloat(0.1222),doubleToFloat(0.069),doubleToFloat(0.1135),doubleToFloat(0.0574),doubleToFloat(0.1162),doubleToFloat(0.0936),doubleToFloat(0.1239),doubleToFloat(0.0947),doubleToFloat(0.102),doubleToFloat(0.0746),doubleToFloat(0.1039),doubleToFloat(0.0949),doubleToFloat(0.0057),doubleToFloat(0.1603),doubleToFloat(0.1009),doubleToFloat(0.1598),doubleToFloat(0.0057),doubleToFloat(0.1748),doubleToFloat(0.1009),doubleToFloat(0.1743),doubleToFloat(0.0057),doubleToFloat(0.1892),doubleToFloat(0.1009),doubleToFloat(0.1888),doubleToFloat(0.1179),doubleToFloat(0.119),doubleToFloat(0.1252),doubleToFloat(0.1262),doubleToFloat(0.1098),doubleToFloat(0.1164),doubleToFloat(0.1179),doubleToFloat(0.1343),doubleToFloat(0.1252),doubleToFloat(0.1415),doubleToFloat(0.1098),doubleToFloat(0.1317)], Java.type("float[]")))))))))))
              .addChild(new HAnimJoint("hanim_sacroiliac").setName("r_shoulder").setDEF("hanim_r_shoulder").setCenter(Java.to([doubleToFloat(-7.699),doubleToFloat(59.419998),doubleToFloat(-1.567)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_r_shoulder").setName("r_upperarm").setDEF("hanim_r_upperarm")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-7.699),doubleToFloat(59.419998),doubleToFloat(-1.567)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,2,1,-1,3,5,4,-1,2,7,6,-1,6,1,2,-1,7,9,8,-1,8,6,7,-1,9,4,5,-1,5,8,9,-1,0,1,10,-1,10,11,0,-1,5,3,12,-1,12,13,5,-1,6,14,10,-1,10,1,6,-1,6,8,15,-1,15,14,6,-1,8,5,13,-1,13,15,8,-1,12,11,16,-1,16,17,12,-1,10,18,16,-1,16,11,10,-1,13,12,17,-1,17,19,13,-1,10,14,20,-1,20,18,10,-1,15,21,20,-1,20,14,15,-1,13,19,21,-1,21,15,13,-1,17,16,22,-1,22,23,17,-1,18,24,22,-1,22,16,18,-1,19,17,23,-1,23,25,19,-1,18,20,26,-1,26,24,18,-1,21,27,26,-1,26,20,21,-1,19,25,27,-1,27,21,19,-1,23,22,28,-1,28,29,23,-1,22,24,30,-1,30,28,22,-1,25,23,29,-1,29,31,25,-1,24,26,32,-1,32,30,24,-1,26,27,33,-1,33,32,26,-1,27,25,31,-1,31,33,27,-1,29,28,34,-1,34,35,29,-1,28,30,36,-1,36,34,28,-1,31,29,35,-1,35,37,31,-1,30,32,38,-1,38,36,30,-1,32,33,39,-1,39,38,32,-1,33,31,37,-1,37,39,33,-1,0,41,40,-1,40,2,0,-1,4,43,42,-1,42,3,4,-1,2,40,44,-1,44,7,2,-1,7,44,45,-1,45,9,7,-1,9,45,43,-1,43,4,9,-1,3,42,46,-1,46,12,3,-1,12,46,47,-1,47,11,12,-1,41,48,40,-1,43,48,42,-1,40,48,44,-1,44,48,45,-1,45,48,43,-1,42,48,46,-1,46,48,47,-1,34,49,35,-1,36,49,34,-1,35,49,37,-1,38,49,36,-1,39,49,38,-1,37,49,39,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,2,1,-1,3,5,4,-1,2,7,6,-1,6,1,2,-1,7,9,8,-1,8,6,7,-1,9,4,5,-1,5,8,9,-1,0,1,10,-1,10,11,0,-1,5,3,12,-1,12,13,5,-1,6,14,10,-1,10,1,6,-1,6,8,15,-1,15,14,6,-1,8,5,13,-1,13,15,8,-1,50,11,16,-1,16,51,50,-1,10,18,16,-1,16,11,10,-1,13,12,17,-1,17,19,13,-1,10,14,20,-1,20,18,10,-1,15,21,20,-1,20,14,15,-1,13,19,21,-1,21,15,13,-1,52,16,22,-1,22,53,52,-1,18,24,22,-1,22,16,18,-1,19,17,23,-1,23,25,19,-1,18,20,26,-1,26,24,18,-1,21,27,26,-1,26,20,21,-1,19,25,27,-1,27,21,19,-1,54,22,28,-1,28,55,54,-1,22,24,30,-1,30,28,22,-1,25,23,29,-1,29,31,25,-1,24,26,32,-1,32,30,24,-1,26,27,33,-1,33,32,26,-1,27,25,31,-1,31,33,27,-1,56,28,34,-1,34,57,56,-1,28,30,36,-1,36,34,28,-1,31,29,35,-1,35,37,31,-1,30,32,38,-1,38,36,30,-1,32,33,39,-1,39,38,32,-1,33,31,37,-1,37,39,33,-1,0,41,40,-1,40,2,0,-1,4,43,42,-1,42,3,4,-1,2,40,44,-1,44,7,2,-1,7,69,45,-1,45,9,7,-1,9,45,43,-1,43,4,9,-1,3,42,46,-1,46,12,3,-1,59,58,47,-1,47,11,59,-1,41,48,40,-1,60,48,61,-1,40,48,44,-1,44,48,62,-1,63,48,64,-1,65,48,66,-1,67,48,47,-1,34,49,68,-1,36,49,34,-1,35,49,37,-1,38,49,36,-1,39,49,38,-1,37,49,39,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(1.805),doubleToFloat(-1.524),doubleToFloat(1.771),doubleToFloat(-0.0582),doubleToFloat(-1.838),doubleToFloat(2.197),doubleToFloat(0.3089),doubleToFloat(-0.8066),doubleToFloat(2.836),doubleToFloat(1.788),doubleToFloat(-1.533),doubleToFloat(-1.801),doubleToFloat(0.3089),doubleToFloat(-0.8066),doubleToFloat(-2.836),doubleToFloat(-0.0582),doubleToFloat(-1.838),doubleToFloat(-2.819),doubleToFloat(-2.953),doubleToFloat(-0.699),doubleToFloat(1.997),doubleToFloat(-2.154),doubleToFloat(1.069),doubleToFloat(1.997),doubleToFloat(-2.953),doubleToFloat(-0.699),doubleToFloat(-1.703),doubleToFloat(-2.109),doubleToFloat(1.038),doubleToFloat(-1.703),doubleToFloat(-0.4983),doubleToFloat(-2.844),doubleToFloat(2.197),doubleToFloat(1.762),doubleToFloat(-2.191),doubleToFloat(0.9288),doubleToFloat(1.762),doubleToFloat(-2.191),doubleToFloat(-0.8936),doubleToFloat(-0.4983),doubleToFloat(-2.844),doubleToFloat(-2.659),doubleToFloat(-3.097),doubleToFloat(-2.644),doubleToFloat(1.051),doubleToFloat(-3.097),doubleToFloat(-2.644),doubleToFloat(-0.8368),doubleToFloat(1.384),doubleToFloat(-5.116),doubleToFloat(0.973),doubleToFloat(1.384),doubleToFloat(-5.116),doubleToFloat(-0.9359),doubleToFloat(-0.5183),doubleToFloat(-5.524),doubleToFloat(1.801),doubleToFloat(-0.5183),doubleToFloat(-5.524),doubleToFloat(-2.058),doubleToFloat(-2.604),doubleToFloat(-5.03),doubleToFloat(0.9889),doubleToFloat(-2.604),doubleToFloat(-5.03),doubleToFloat(-0.7969),doubleToFloat(1.181),doubleToFloat(-8.251),doubleToFloat(0.8308),doubleToFloat(1.181),doubleToFloat(-8.251),doubleToFloat(-0.9379),doubleToFloat(-0.4074),doubleToFloat(-9.293),doubleToFloat(1.225),doubleToFloat(-0.4074),doubleToFloat(-9.293),doubleToFloat(-1.965),doubleToFloat(-2.158),doubleToFloat(-8.822),doubleToFloat(0.2392),doubleToFloat(-2.158),doubleToFloat(-8.822),doubleToFloat(-0.9061),doubleToFloat(1.254),doubleToFloat(-9.178),doubleToFloat(0.3009),doubleToFloat(1.254),doubleToFloat(-9.178),doubleToFloat(-1.07),doubleToFloat(-0.3259),doubleToFloat(-10.22),doubleToFloat(1.219),doubleToFloat(-0.3251),doubleToFloat(-10.22),doubleToFloat(-2.074),doubleToFloat(-2.012),doubleToFloat(-9.757),doubleToFloat(0.2392),doubleToFloat(-2.012),doubleToFloat(-9.757),doubleToFloat(-0.9059),doubleToFloat(1.568),doubleToFloat(-10.77),doubleToFloat(0.2995),doubleToFloat(1.568),doubleToFloat(-10.77),doubleToFloat(-1.067),doubleToFloat(-0.1921),doubleToFloat(-11.8),doubleToFloat(1.212),doubleToFloat(-0.1923),doubleToFloat(-11.8),doubleToFloat(-1.826),doubleToFloat(-1.877),doubleToFloat(-11.33),doubleToFloat(0.2366),doubleToFloat(-1.876),doubleToFloat(-11.33),doubleToFloat(-0.9017),doubleToFloat(0.7432),doubleToFloat(-0.1609),doubleToFloat(2.331),doubleToFloat(1.942),doubleToFloat(-0.7259),doubleToFloat(1.447),doubleToFloat(1.928),doubleToFloat(-0.7331),doubleToFloat(-1.522),doubleToFloat(0.7432),doubleToFloat(-0.1609),doubleToFloat(-2.382),doubleToFloat(-0.9952),doubleToFloat(2.188),doubleToFloat(1.635),doubleToFloat(-0.9578),doubleToFloat(2.162),doubleToFloat(-1.44),doubleToFloat(1.686),doubleToFloat(-1.124),doubleToFloat(-0.768),doubleToFloat(1.686),doubleToFloat(-1.124),doubleToFloat(0.7466),doubleToFloat(1.597),doubleToFloat(0.8227),doubleToFloat(0.0058),doubleToFloat(-0.1063),doubleToFloat(-12.53),doubleToFloat(-0.3412)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.8175),doubleToFloat(0.3603),doubleToFloat(0.8632),doubleToFloat(0.3546),doubleToFloat(0.8605),doubleToFloat(0.3699),doubleToFloat(0.9777),doubleToFloat(0.3334),doubleToFloat(0.969),doubleToFloat(0.3634),doubleToFloat(0.9603),doubleToFloat(0.3336),doubleToFloat(0.8992),doubleToFloat(0.3596),doubleToFloat(0.8908),doubleToFloat(0.3854),doubleToFloat(0.9343),doubleToFloat(0.3596),doubleToFloat(0.9435),doubleToFloat(0.3848),doubleToFloat(0.8525),doubleToFloat(0.3149),doubleToFloat(0.8059),doubleToFloat(0.3198),doubleToFloat(0.9839),doubleToFloat(0.323),doubleToFloat(0.9553),doubleToFloat(0.3189),doubleToFloat(0.9082),doubleToFloat(0.3292),doubleToFloat(0.9254),doubleToFloat(0.3292),doubleToFloat(0.8055),doubleToFloat(0.2725),doubleToFloat(0.9792),doubleToFloat(0.2777),doubleToFloat(0.8587),doubleToFloat(0.2725),doubleToFloat(0.9499),doubleToFloat(0.2765),doubleToFloat(0.9085),doubleToFloat(0.29),doubleToFloat(0.9252),doubleToFloat(0.29),doubleToFloat(0.8162),doubleToFloat(0.2273),doubleToFloat(0.9712),doubleToFloat(0.2286),doubleToFloat(0.8696),doubleToFloat(0.2158),doubleToFloat(0.944),doubleToFloat(0.2164),doubleToFloat(0.9155),doubleToFloat(0.2287),doubleToFloat(0.9256),doubleToFloat(0.2287),doubleToFloat(0.8189),doubleToFloat(0.2013),doubleToFloat(0.9684),doubleToFloat(0.2137),doubleToFloat(0.8705),doubleToFloat(0.2008),doubleToFloat(0.9438),doubleToFloat(0.2015),doubleToFloat(0.9155),doubleToFloat(0.2135),doubleToFloat(0.9255),doubleToFloat(0.2135),doubleToFloat(0.8216),doubleToFloat(0.181),doubleToFloat(0.969),doubleToFloat(0.1876),doubleToFloat(0.872),doubleToFloat(0.1755),doubleToFloat(0.9412),doubleToFloat(0.1762),doubleToFloat(0.9157),doubleToFloat(0.1882),doubleToFloat(0.9252),doubleToFloat(0.1882),doubleToFloat(0.8292),doubleToFloat(0.3842),doubleToFloat(0.8182),doubleToFloat(0.3733),doubleToFloat(0.9806),doubleToFloat(0.3457),doubleToFloat(0.9745),doubleToFloat(0.3724),doubleToFloat(0.838),doubleToFloat(0.4052),doubleToFloat(0.9619),doubleToFloat(0.3995),doubleToFloat(0.9854),doubleToFloat(0.3401),doubleToFloat(0.8086),doubleToFloat(0.3454),doubleToFloat(0.8127),doubleToFloat(0.3778),doubleToFloat(0.9241),doubleToFloat(0.1643),doubleToFloat(0.7988),doubleToFloat(0.3204),doubleToFloat(0.7988),doubleToFloat(0.2717),doubleToFloat(0.7988),doubleToFloat(0.2717),doubleToFloat(0.8096),doubleToFloat(0.2286),doubleToFloat(0.8096),doubleToFloat(0.2286),doubleToFloat(0.8053),doubleToFloat(0.2016),doubleToFloat(0.8053),doubleToFloat(0.2016),doubleToFloat(0.8125),doubleToFloat(0.1748),doubleToFloat(0.8055),doubleToFloat(0.3493),doubleToFloat(0.7988),doubleToFloat(0.3204),doubleToFloat(0.8071),doubleToFloat(0.3803),doubleToFloat(0.8007),doubleToFloat(0.3548),doubleToFloat(0.8121),doubleToFloat(0.3995),doubleToFloat(0.8121),doubleToFloat(0.3995),doubleToFloat(0.8071),doubleToFloat(0.3803),doubleToFloat(0.8007),doubleToFloat(0.3548),doubleToFloat(0.8055),doubleToFloat(0.3493),doubleToFloat(0.8055),doubleToFloat(0.3493),doubleToFloat(0.8125),doubleToFloat(0.1748),doubleToFloat(0.9181),doubleToFloat(0.4)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_r_shoulder").setName("r_elbow").setDEF("hanim_r_elbow").setCenter(Java.to([doubleToFloat(-8.026),doubleToFloat(48.450001),doubleToFloat(-1.959)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_r_elbow").setName("r_forearm").setDEF("hanim_r_forearm")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-8.026),doubleToFloat(48.450001),doubleToFloat(-1.959)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,2,1,-1,1,3,0,-1,2,5,4,-1,4,1,2,-1,6,0,3,-1,3,7,6,-1,5,9,8,-1,8,4,5,-1,9,11,10,-1,10,8,9,-1,11,6,7,-1,7,10,11,-1,3,1,12,-1,12,13,3,-1,4,14,12,-1,12,1,4,-1,13,15,7,-1,7,3,13,-1,4,8,16,-1,16,14,4,-1,8,10,17,-1,17,16,8,-1,7,15,17,-1,17,10,7,-1,13,12,18,-1,18,19,13,-1,12,14,20,-1,20,18,12,-1,13,19,21,-1,21,15,13,-1,16,22,20,-1,20,14,16,-1,16,17,23,-1,23,22,16,-1,17,15,21,-1,21,23,17,-1,24,21,19,-1,19,25,24,-1,26,27,18,-1,18,20,26,-1,25,19,18,-1,18,27,25,-1,24,28,23,-1,23,21,24,-1,28,29,22,-1,22,23,28,-1,26,20,22,-1,22,29,26,-1,0,31,30,-1,30,2,0,-1,2,30,32,-1,32,5,2,-1,6,33,31,-1,31,0,6,-1,5,32,34,-1,34,9,5,-1,9,34,35,-1,35,11,9,-1,11,35,33,-1,33,6,11,-1,31,36,30,-1,30,36,32,-1,33,36,31,-1,32,36,34,-1,34,36,35,-1,35,36,33,-1,25,37,24,-1,26,37,27,-1,27,37,25,-1,24,37,28,-1,28,37,29,-1,29,37,26,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,2,1,-1,1,3,0,-1,2,5,4,-1,4,1,2,-1,6,0,3,-1,3,7,6,-1,5,9,8,-1,8,4,5,-1,38,11,10,-1,10,39,38,-1,11,6,7,-1,7,10,11,-1,3,1,12,-1,12,13,3,-1,4,14,12,-1,12,1,4,-1,13,15,7,-1,7,3,13,-1,4,8,16,-1,16,14,4,-1,40,10,17,-1,17,41,40,-1,7,15,17,-1,17,10,7,-1,13,12,18,-1,18,19,13,-1,12,14,20,-1,20,18,12,-1,13,19,21,-1,21,15,13,-1,16,22,20,-1,20,14,16,-1,42,17,23,-1,23,43,42,-1,17,15,21,-1,21,23,17,-1,24,21,19,-1,19,25,24,-1,26,27,18,-1,18,20,26,-1,25,19,18,-1,18,27,25,-1,24,28,23,-1,23,21,24,-1,28,45,44,-1,44,23,28,-1,26,20,22,-1,22,29,26,-1,0,31,30,-1,30,2,0,-1,2,30,32,-1,32,5,2,-1,6,33,31,-1,31,0,6,-1,5,32,34,-1,34,9,5,-1,47,46,35,-1,35,11,47,-1,11,35,33,-1,33,6,11,-1,31,48,30,-1,30,36,32,-1,33,49,31,-1,32,36,34,-1,50,51,35,-1,35,52,33,-1,25,37,24,-1,26,37,27,-1,27,37,25,-1,24,37,28,-1,28,37,53,-1,29,37,26,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(1.607),doubleToFloat(-0.3011),doubleToFloat(-0.7068),doubleToFloat(1.816),doubleToFloat(-1.259),doubleToFloat(0.7158),doubleToFloat(1.607),doubleToFloat(-0.3011),doubleToFloat(0.7173),doubleToFloat(1.816),doubleToFloat(-1.259),doubleToFloat(-0.7039),doubleToFloat(-0.0748),doubleToFloat(-2.207),doubleToFloat(1.664),doubleToFloat(-0.0977),doubleToFloat(-1.281),doubleToFloat(1.671),doubleToFloat(-0.0968),doubleToFloat(-1.282),doubleToFloat(-1.749),doubleToFloat(-0.075),doubleToFloat(-2.207),doubleToFloat(-1.492),doubleToFloat(-1.791),doubleToFloat(-1.616),doubleToFloat(0.6505),doubleToFloat(-1.816),doubleToFloat(-0.6919),doubleToFloat(0.6532),doubleToFloat(-1.791),doubleToFloat(-1.616),doubleToFloat(-0.5319),doubleToFloat(-1.816),doubleToFloat(-0.6919),doubleToFloat(-0.5362),doubleToFloat(1.323),doubleToFloat(-4.528),doubleToFloat(1.438),doubleToFloat(1.323),doubleToFloat(-4.528),doubleToFloat(-0.6341),doubleToFloat(-0.0101),doubleToFloat(-4.917),doubleToFloat(1.749),doubleToFloat(-0.01),doubleToFloat(-4.917),doubleToFloat(-1.419),doubleToFloat(-1.599),doubleToFloat(-4.353),doubleToFloat(0.9644),doubleToFloat(-1.599),doubleToFloat(-4.353),doubleToFloat(-0.4902),doubleToFloat(1.275),doubleToFloat(-7.552),doubleToFloat(0.9117),doubleToFloat(1.275),doubleToFloat(-7.552),doubleToFloat(-0.5772),doubleToFloat(-0.0603),doubleToFloat(-7.691),doubleToFloat(1.6),doubleToFloat(-0.0602),doubleToFloat(-7.691),doubleToFloat(-1.319),doubleToFloat(-1.34),doubleToFloat(-7.172),doubleToFloat(0.8445),doubleToFloat(-1.34),doubleToFloat(-7.172),doubleToFloat(-0.3992),doubleToFloat(-0.0847),doubleToFloat(-10.99),doubleToFloat(-0.7836),doubleToFloat(0.679),doubleToFloat(-10.66),doubleToFloat(-0.3055),doubleToFloat(-0.092),doubleToFloat(-10.99),doubleToFloat(1.088),doubleToFloat(0.6772),doubleToFloat(-10.65),doubleToFloat(0.6521),doubleToFloat(-0.6479),doubleToFloat(-10.85),doubleToFloat(-0.4597),doubleToFloat(-0.652),doubleToFloat(-10.87),doubleToFloat(0.7241),doubleToFloat(0.8326),doubleToFloat(0.9823),doubleToFloat(0.4058),doubleToFloat(0.8326),doubleToFloat(0.9823),doubleToFloat(-0.3926),doubleToFloat(-0.1232),doubleToFloat(0.4326),doubleToFloat(0.9405),doubleToFloat(-0.1227),doubleToFloat(0.4326),doubleToFloat(-0.977),doubleToFloat(-1.087),doubleToFloat(0.7632),doubleToFloat(0.3698),doubleToFloat(-1.087),doubleToFloat(0.7632),doubleToFloat(-0.297),doubleToFloat(-0.1182),doubleToFloat(1.187),doubleToFloat(0.0082),doubleToFloat(0.0134),doubleToFloat(-11.39),doubleToFloat(0.1526)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.9014),doubleToFloat(0.1592),doubleToFloat(0.9207),doubleToFloat(0.1477),doubleToFloat(0.9221),doubleToFloat(0.1592),doubleToFloat(0.9028),doubleToFloat(0.1477),doubleToFloat(0.9498),doubleToFloat(0.1348),doubleToFloat(0.951),doubleToFloat(0.146),doubleToFloat(0.8725),doubleToFloat(0.146),doubleToFloat(0.8736),doubleToFloat(0.1348),doubleToFloat(0.9793),doubleToFloat(0.1407),doubleToFloat(0.9796),doubleToFloat(0.1519),doubleToFloat(0.8426),doubleToFloat(0.1407),doubleToFloat(0.8423),doubleToFloat(0.1519),doubleToFloat(0.9299),doubleToFloat(0.1077),doubleToFloat(0.9022),doubleToFloat(0.1077),doubleToFloat(0.9466),doubleToFloat(0.102),doubleToFloat(0.8775),doubleToFloat(0.102),doubleToFloat(0.9732),doubleToFloat(0.1077),doubleToFloat(0.8437),doubleToFloat(0.1077),doubleToFloat(0.9238),doubleToFloat(0.071),doubleToFloat(0.9036),doubleToFloat(0.071),doubleToFloat(0.9446),doubleToFloat(0.0684),doubleToFloat(0.8798),doubleToFloat(0.0684),doubleToFloat(0.9704),doubleToFloat(0.0737),doubleToFloat(0.845),doubleToFloat(0.0737),doubleToFloat(0.8879),doubleToFloat(0.0318),doubleToFloat(0.9059),doubleToFloat(0.0364),doubleToFloat(0.939),doubleToFloat(0.0318),doubleToFloat(0.9232),doubleToFloat(0.0366),doubleToFloat(0.8712),doubleToFloat(0.0331),doubleToFloat(0.9514),doubleToFloat(0.0329),doubleToFloat(0.9243),doubleToFloat(0.1741),doubleToFloat(0.8994),doubleToFloat(0.1741),doubleToFloat(0.9551),doubleToFloat(0.1668),doubleToFloat(0.8685),doubleToFloat(0.1668),doubleToFloat(0.9806),doubleToFloat(0.1701),doubleToFloat(0.8414),doubleToFloat(0.1701),doubleToFloat(0.9871),doubleToFloat(0.1759),doubleToFloat(0.9173),doubleToFloat(0.0271),doubleToFloat(0.8271),doubleToFloat(0.1519),doubleToFloat(0.8268),doubleToFloat(0.1407),doubleToFloat(0.8268),doubleToFloat(0.1407),doubleToFloat(0.8207),doubleToFloat(0.1077),doubleToFloat(0.8207),doubleToFloat(0.1077),doubleToFloat(0.8264),doubleToFloat(0.0737),doubleToFloat(0.8264),doubleToFloat(0.0737),doubleToFloat(0.8397),doubleToFloat(0.0329),doubleToFloat(0.8281),doubleToFloat(0.1701),doubleToFloat(0.8271),doubleToFloat(0.1519),doubleToFloat(0.8346),doubleToFloat(0.1759),doubleToFloat(0.8346),doubleToFloat(0.1759),doubleToFloat(0.8281),doubleToFloat(0.1701),doubleToFloat(0.8346),doubleToFloat(0.1759),doubleToFloat(0.8346),doubleToFloat(0.1759),doubleToFloat(0.8397),doubleToFloat(0.0329)], Java.type("float[]"))))))))
                  .addChild(new HAnimJoint("hanim_r_elbow").setName("r_radiocarpal").setDEF("hanim_r_radiocarpal").setCenter(Java.to([doubleToFloat(-7.617),doubleToFloat(37.689999),doubleToFloat(-1.663)], Java.type("float[]")))
                    .addChild(new HAnimSegment("hanim_r_radiocarpal").setName("r_carpal").setDEF("hanim_r_carpal")
                      .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-7.617),doubleToFloat(37.689999),doubleToFloat(-1.663)], Java.type("float[]")))
                        .addChild(new Shape()
                          .setAppearance(new Appearance()
                            .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                            .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                          .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,2,1,-1,1,3,0,-1,4,6,5,-1,5,7,4,-1,10,9,8,-1,8,11,10,-1,14,13,12,-1,12,15,14,-1,11,8,13,-1,13,14,11,-1,17,16,9,-1,9,10,17,-1,19,18,16,-1,16,17,19,-1,15,12,18,-1,18,19,15,-1,20,10,11,-1,11,21,20,-1,24,23,22,-1,22,25,24,-1,21,11,14,-1,14,26,21,-1,27,17,10,-1,10,20,27,-1,28,19,17,-1,17,27,28,-1,29,15,19,-1,19,28,29,-1,2,20,21,-1,21,1,2,-1,3,26,29,-1,29,0,3,-1,1,21,26,-1,26,3,1,-1,30,27,20,-1,20,2,30,-1,31,28,27,-1,27,30,31,-1,0,29,28,-1,28,31,0,-1,32,2,0,-1,0,33,32,-1,34,30,2,-1,2,32,34,-1,35,31,30,-1,30,34,35,-1,33,0,31,-1,31,35,33,-1,36,34,32,-1,32,37,36,-1,38,35,34,-1,34,36,38,-1,39,33,35,-1,35,38,39,-1,37,32,33,-1,33,39,37,-1,6,36,37,-1,37,5,6,-1,4,38,36,-1,36,6,4,-1,7,39,38,-1,38,4,7,-1,5,37,39,-1,39,7,5,-1,23,14,15,-1,15,22,23,-1,24,26,14,-1,14,23,24,-1,42,41,40,-1,40,43,42,-1,22,15,29,-1,29,25,22,-1,44,24,25,-1,25,45,44,-1,46,29,26,-1,26,47,46,-1,47,26,24,-1,24,44,47,-1,45,25,29,-1,29,46,45,-1,41,46,47,-1,47,40,41,-1,42,45,46,-1,46,41,42,-1,43,44,45,-1,45,42,43,-1,40,47,44,-1,44,43,40,-1,9,48,8,-1,13,48,12,-1,8,48,13,-1,16,48,9,-1,18,48,16,-1,12,48,18,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([47,49,48,-1,48,50,47,-1,8,10,9,-1,9,11,8,-1,53,52,51,-1,51,54,53,-1,57,56,55,-1,55,58,57,-1,54,51,56,-1,56,57,54,-1,14,13,12,-1,12,15,14,-1,17,16,13,-1,13,14,17,-1,19,18,16,-1,16,17,19,-1,59,53,54,-1,54,60,59,-1,63,62,61,-1,61,64,63,-1,60,54,57,-1,57,65,60,-1,20,14,15,-1,15,21,20,-1,22,17,14,-1,14,20,22,-1,23,19,17,-1,17,22,23,-1,49,59,60,-1,60,48,49,-1,50,65,66,-1,66,47,50,-1,48,60,65,-1,65,50,48,-1,24,20,21,-1,21,25,24,-1,26,22,20,-1,20,24,26,-1,27,23,22,-1,22,26,27,-1,67,49,47,-1,47,68,67,-1,28,24,25,-1,25,29,28,-1,30,26,24,-1,24,28,30,-1,31,27,26,-1,26,30,31,-1,32,28,29,-1,29,33,32,-1,34,30,28,-1,28,32,34,-1,35,31,30,-1,30,34,35,-1,69,67,68,-1,68,70,69,-1,10,32,33,-1,33,9,10,-1,8,34,32,-1,32,10,8,-1,11,35,34,-1,34,8,11,-1,71,69,70,-1,70,72,71,-1,62,57,58,-1,58,61,62,-1,63,65,57,-1,57,62,63,-1,38,37,36,-1,36,39,38,-1,40,19,23,-1,23,41,40,-1,73,63,64,-1,64,74,73,-1,43,23,42,-1,42,44,43,-1,75,65,63,-1,63,73,75,-1,45,41,23,-1,23,43,45,-1,37,43,44,-1,44,36,37,-1,38,45,43,-1,43,37,38,-1,76,73,74,-1,74,77,76,-1,78,75,73,-1,73,76,78,-1,1,5,0,-1,3,6,2,-1,0,7,4,-1,13,46,12,-1,16,46,13,-1,18,46,16,-1], Java.type("int[]")))
                            .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-0.428),doubleToFloat(-4.043),doubleToFloat(1.035),doubleToFloat(0.062),doubleToFloat(-2.76),doubleToFloat(-0.7256),doubleToFloat(-0.4283),doubleToFloat(-4.043),doubleToFloat(-1.325),doubleToFloat(0.0621),doubleToFloat(-2.759),doubleToFloat(0.4786),doubleToFloat(-0.5207),doubleToFloat(-5.808),doubleToFloat(0.5759),doubleToFloat(0.0026),doubleToFloat(-5.67),doubleToFloat(-1.325),doubleToFloat(-0.5208),doubleToFloat(-5.808),doubleToFloat(-0.9061),doubleToFloat(0.0026),doubleToFloat(-5.67),doubleToFloat(1.035),doubleToFloat(0.311),doubleToFloat(0.5832),doubleToFloat(-0.6014),doubleToFloat(-0.4947),doubleToFloat(0.3747),doubleToFloat(-1.08),doubleToFloat(-0.3587),doubleToFloat(-0.8063),doubleToFloat(-1.077),doubleToFloat(0.3511),doubleToFloat(-0.5647),doubleToFloat(-0.6024),doubleToFloat(-0.502),doubleToFloat(0.3752),doubleToFloat(0.7923),doubleToFloat(0.3112),doubleToFloat(0.5961),doubleToFloat(0.3561),doubleToFloat(0.3512),doubleToFloat(-0.5647),doubleToFloat(0.3515),doubleToFloat(-0.5145),doubleToFloat(-0.7545),doubleToFloat(0.7924),doubleToFloat(-1.03),doubleToFloat(0.5998),doubleToFloat(-0.7556),doubleToFloat(-1.03),doubleToFloat(-0.5583),doubleToFloat(-0.7457),doubleToFloat(-1.037),doubleToFloat(0.5778),doubleToFloat(0.4281),doubleToFloat(-1.031),doubleToFloat(-0.5582),doubleToFloat(0.4287),doubleToFloat(-0.3854),doubleToFloat(-2.321),doubleToFloat(-1.587),doubleToFloat(0.3249),doubleToFloat(-2.079),doubleToFloat(-0.8558),doubleToFloat(-0.2488),doubleToFloat(-1.494),doubleToFloat(1.332),doubleToFloat(0.4651),doubleToFloat(-1.238),doubleToFloat(0.8921),doubleToFloat(0.7055),doubleToFloat(-1.95),doubleToFloat(1.153),doubleToFloat(0.2884),doubleToFloat(-2.29),doubleToFloat(1.587),doubleToFloat(0.324),doubleToFloat(-2.079),doubleToFloat(0.6132),doubleToFloat(-1.057),doubleToFloat(-2.073),doubleToFloat(-1.077),doubleToFloat(-1.049),doubleToFloat(-2.091),doubleToFloat(0.6923),doubleToFloat(-0.3858),doubleToFloat(-2.321),doubleToFloat(1.292),doubleToFloat(-0.9501),doubleToFloat(-4.181),doubleToFloat(-0.9063),doubleToFloat(-0.9499),doubleToFloat(-4.181),doubleToFloat(0.5762),doubleToFloat(-0.2552),doubleToFloat(-4.694),doubleToFloat(-1.325),doubleToFloat(-0.2552),doubleToFloat(-4.694),doubleToFloat(1.035),doubleToFloat(-0.7786),doubleToFloat(-4.832),doubleToFloat(-0.9061),doubleToFloat(-0.7786),doubleToFloat(-4.832),doubleToFloat(0.5759),doubleToFloat(-0.6497),doubleToFloat(-5.32),doubleToFloat(-0.9061),doubleToFloat(-0.1263),doubleToFloat(-5.182),doubleToFloat(-1.325),doubleToFloat(-0.6497),doubleToFloat(-5.32),doubleToFloat(0.5759),doubleToFloat(-0.1263),doubleToFloat(-5.182),doubleToFloat(1.035),doubleToFloat(0.6755),doubleToFloat(-3.115),doubleToFloat(0.6119),doubleToFloat(0.214),doubleToFloat(-3.44),doubleToFloat(1.081),doubleToFloat(0.6399),doubleToFloat(-3.326),doubleToFloat(1.586),doubleToFloat(1.057),doubleToFloat(-2.987),doubleToFloat(1.151),doubleToFloat(0.8814),doubleToFloat(-2.469),doubleToFloat(1.15),doubleToFloat(0.4641),doubleToFloat(-2.808),doubleToFloat(1.587),doubleToFloat(0.0383),doubleToFloat(-2.922),doubleToFloat(1.082),doubleToFloat(0.4998),doubleToFloat(-2.597),doubleToFloat(0.6126),doubleToFloat(-0.4437),doubleToFloat(0.8321),doubleToFloat(-0.1433)], Java.type("float[]"))))
                            .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.1427),doubleToFloat(0.2125),doubleToFloat(0.1222),doubleToFloat(0.2114),doubleToFloat(0.072),doubleToFloat(0.2114),doubleToFloat(0.0487),doubleToFloat(0.2146),doubleToFloat(0.1648),doubleToFloat(0.2146),doubleToFloat(0.1427),doubleToFloat(0.2125),doubleToFloat(0.072),doubleToFloat(0.2114),doubleToFloat(0.1648),doubleToFloat(0.2146),doubleToFloat(0.1856),doubleToFloat(0.1891),doubleToFloat(0.2639),doubleToFloat(0.1883),doubleToFloat(0.2484),doubleToFloat(0.188),doubleToFloat(0.1701),doubleToFloat(0.1891),doubleToFloat(0.2529),doubleToFloat(0.0205),doubleToFloat(0.2367),doubleToFloat(0.0146),doubleToFloat(0.2411),doubleToFloat(0.0322),doubleToFloat(0.2577),doubleToFloat(0.0389),doubleToFloat(0.1901),doubleToFloat(0.0132),doubleToFloat(0.1856),doubleToFloat(0.0283),doubleToFloat(0.1719),doubleToFloat(0.0186),doubleToFloat(0.1675),doubleToFloat(0.0336),doubleToFloat(0.2484),doubleToFloat(0.0869),doubleToFloat(0.2649),doubleToFloat(0.0843),doubleToFloat(0.1864),doubleToFloat(0.0924),doubleToFloat(0.1708),doubleToFloat(0.0905),doubleToFloat(0.2488),doubleToFloat(0.1471),doubleToFloat(0.2643),doubleToFloat(0.1474),doubleToFloat(0.186),doubleToFloat(0.1482),doubleToFloat(0.1705),doubleToFloat(0.1482),doubleToFloat(0.2484),doubleToFloat(0.1644),doubleToFloat(0.2639),doubleToFloat(0.1647),doubleToFloat(0.1856),doubleToFloat(0.1655),doubleToFloat(0.1701),doubleToFloat(0.1655),doubleToFloat(0.2484),doubleToFloat(0.1762),doubleToFloat(0.2639),doubleToFloat(0.1765),doubleToFloat(0.1856),doubleToFloat(0.1773),doubleToFloat(0.1701),doubleToFloat(0.1773),doubleToFloat(0.1633),doubleToFloat(0.1308),doubleToFloat(0.1534),doubleToFloat(0.1396),doubleToFloat(0.1426),doubleToFloat(0.1381),doubleToFloat(0.1476),doubleToFloat(0.1297),doubleToFloat(0.1475),doubleToFloat(0.0465),doubleToFloat(0.1445),doubleToFloat(0.0998),doubleToFloat(0.1671),doubleToFloat(0.1111),doubleToFloat(0.1534),doubleToFloat(0.127),doubleToFloat(0.1633),doubleToFloat(0.1182),doubleToFloat(0.1426),doubleToFloat(0.1255),doubleToFloat(0.2062),doubleToFloat(0.0097),doubleToFloat(0.1009),doubleToFloat(0.1405),doubleToFloat(0.0196),doubleToFloat(0.0979),doubleToFloat(0.0057),doubleToFloat(0.141),doubleToFloat(0.0959),doubleToFloat(0.0953),doubleToFloat(0.0453),doubleToFloat(0.0029),doubleToFloat(0.0235),doubleToFloat(0.0102),doubleToFloat(0.0236),doubleToFloat(0.0455),doubleToFloat(0.0452),doubleToFloat(0.0373),doubleToFloat(0.1089),doubleToFloat(0.0102),doubleToFloat(0.089),doubleToFloat(0.0039),doubleToFloat(0.0888),doubleToFloat(0.0373),doubleToFloat(0.1089),doubleToFloat(0.0441),doubleToFloat(0.005),doubleToFloat(0.081),doubleToFloat(0.0337),doubleToFloat(0.0828),doubleToFloat(0.1222),doubleToFloat(0.069),doubleToFloat(0.1135),doubleToFloat(0.0574),doubleToFloat(0.1162),doubleToFloat(0.0936),doubleToFloat(0.1239),doubleToFloat(0.0947),doubleToFloat(0.102),doubleToFloat(0.0746),doubleToFloat(0.1039),doubleToFloat(0.0949),doubleToFloat(0.0057),doubleToFloat(0.1603),doubleToFloat(0.1009),doubleToFloat(0.1598),doubleToFloat(0.0057),doubleToFloat(0.1748),doubleToFloat(0.1009),doubleToFloat(0.1743),doubleToFloat(0.0057),doubleToFloat(0.1892),doubleToFloat(0.1009),doubleToFloat(0.1888),doubleToFloat(0.1179),doubleToFloat(0.119),doubleToFloat(0.1252),doubleToFloat(0.1262),doubleToFloat(0.1098),doubleToFloat(0.1164),doubleToFloat(0.1179),doubleToFloat(0.1343),doubleToFloat(0.1252),doubleToFloat(0.1415),doubleToFloat(0.1098),doubleToFloat(0.1317)], Java.type("float[]")))))))))))
              .addChild(new HAnimJoint("hanim_sacroiliac").setName("vl5").setDEF("hanim_vl5").setCenter(Java.to([doubleToFloat(0),doubleToFloat(47.330002),doubleToFloat(-0.5744)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_vl5").setName("l5").setDEF("hanim_l5")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(47.330002),doubleToFloat(-0.5744)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([17,152,154,-1,154,25,17,-1,17,25,8,-1,8,4,17,-1,25,154,20,-1,20,181,25,-1,6,8,25,-1,25,181,6,-1,19,5,9,-1,9,26,19,-1,18,19,26,-1,26,27,18,-1,9,7,23,-1,23,26,9,-1,26,23,22,-1,22,27,26,-1,150,6,181,-1,181,3,150,-1,151,2,23,-1,23,7,151,-1,152,28,30,-1,30,18,152,-1,18,30,31,-1,31,19,18,-1,152,17,29,-1,29,28,152,-1,19,31,11,-1,11,5,19,-1,4,10,29,-1,29,17,4,-1,28,155,34,-1,34,30,28,-1,30,34,35,-1,35,31,30,-1,28,29,33,-1,33,155,28,-1,31,35,13,-1,13,11,31,-1,10,12,33,-1,33,29,10,-1,155,36,38,-1,38,34,155,-1,35,34,38,-1,38,39,35,-1,33,37,36,-1,36,155,33,-1,35,39,15,-1,15,13,35,-1,33,12,14,-1,14,37,33,-1,20,42,43,-1,43,22,20,-1,152,40,44,-1,44,154,152,-1,154,44,42,-1,42,20,154,-1,27,45,41,-1,41,18,27,-1,22,43,45,-1,45,27,22,-1,18,41,40,-1,40,152,18,-1,50,47,16,-1,108,109,158,-1,21,174,24,-1,110,111,153,-1,46,48,32,-1,156,112,113,-1,32,48,49,-1,115,157,114,-1,2,3,181,-1,53,116,117,-1,161,2,51,-1,2,151,52,-1,52,51,2,-1,22,23,181,-1,181,20,22,-1,181,23,2,-1,16,47,173,-1,119,182,118,-1,2,150,3,-1,121,0,120,-1,43,42,54,-1,54,55,43,-1,44,54,42,-1,45,43,55,-1,45,55,54,-1,54,44,45,-1,41,45,44,-1,44,40,41,-1,38,36,56,-1,56,57,38,-1,39,38,57,-1,57,58,39,-1,36,37,59,-1,59,56,36,-1,15,39,58,-1,58,60,15,-1,37,14,61,-1,61,59,37,-1,57,56,62,-1,58,57,62,-1,56,59,62,-1,60,58,62,-1,59,61,62,-1,178,162,66,-1,66,74,178,-1,8,74,66,-1,66,4,8,-1,69,178,74,-1,74,177,69,-1,74,8,6,-1,6,177,74,-1,9,5,68,-1,68,75,9,-1,75,68,67,-1,67,76,75,-1,72,7,9,-1,9,75,72,-1,71,72,75,-1,75,76,71,-1,177,6,150,-1,150,64,177,-1,72,63,151,-1,151,7,72,-1,79,77,162,-1,162,67,79,-1,80,79,67,-1,67,68,80,-1,78,66,162,-1,162,77,78,-1,11,80,68,-1,68,5,11,-1,78,10,4,-1,4,66,78,-1,83,165,77,-1,77,79,83,-1,84,83,79,-1,79,80,84,-1,82,78,77,-1,77,165,82,-1,13,84,80,-1,80,11,13,-1,82,12,10,-1,10,78,82,-1,87,85,165,-1,165,83,87,-1,87,83,84,-1,84,88,87,-1,85,86,82,-1,82,165,85,-1,15,88,84,-1,84,13,15,-1,14,12,82,-1,82,86,14,-1,92,91,69,-1,69,71,92,-1,93,89,162,-1,162,178,93,-1,91,93,178,-1,178,69,91,-1,90,94,76,-1,76,67,90,-1,94,92,71,-1,71,76,94,-1,89,90,67,-1,67,162,89,-1,99,65,96,-1,123,168,122,-1,70,73,180,-1,164,124,125,-1,95,81,97,-1,166,126,127,-1,81,98,97,-1,128,129,167,-1,63,177,64,-1,101,130,131,-1,170,100,63,-1,52,151,63,-1,63,100,52,-1,177,72,71,-1,71,69,177,-1,177,63,72,-1,65,179,96,-1,132,133,183,-1,63,64,150,-1,134,135,171,-1,102,91,92,-1,92,103,102,-1,93,91,102,-1,94,103,92,-1,102,103,94,-1,94,93,102,-1,93,94,90,-1,90,89,93,-1,104,85,87,-1,87,105,104,-1,105,87,88,-1,88,106,105,-1,107,86,85,-1,85,104,107,-1,106,88,15,-1,15,60,106,-1,61,14,86,-1,86,107,61,-1,105,62,104,-1,106,62,105,-1,104,62,107,-1,60,62,106,-1,107,62,61,-1,100,170,163,-1,169,136,137,-1,176,138,139,-1,140,141,172,-1,159,142,143,-1,175,144,145,-1,160,146,147,-1,148,149,1,-1,185,184,189,-1,189,190,185,-1,184,186,191,-1,191,189,184,-1,186,187,192,-1,192,191,186,-1,187,188,193,-1,193,192,187,-1,194,195,196,-1,196,197,194,-1,188,194,197,-1,197,193,188,-1,202,198,185,-1,185,190,202,-1,203,199,198,-1,198,202,203,-1,204,200,199,-1,199,203,204,-1,205,201,200,-1,200,204,205,-1,196,195,206,-1,206,207,196,-1,207,206,201,-1,201,205,207,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([2,3,0,-1,0,1,2,-1,2,1,4,-1,4,5,2,-1,1,0,6,-1,6,7,1,-1,8,4,1,-1,1,7,8,-1,38,39,36,-1,36,37,38,-1,41,38,37,-1,37,40,41,-1,36,43,42,-1,42,37,36,-1,37,42,44,-1,44,40,37,-1,9,8,7,-1,7,10,9,-1,45,46,42,-1,42,43,45,-1,47,49,48,-1,48,41,47,-1,41,48,50,-1,50,38,41,-1,3,2,11,-1,11,12,3,-1,38,50,51,-1,51,39,38,-1,5,13,11,-1,11,2,5,-1,49,53,52,-1,52,48,49,-1,48,52,54,-1,54,50,48,-1,12,11,14,-1,14,15,12,-1,50,54,55,-1,55,51,50,-1,13,16,14,-1,14,11,13,-1,53,57,56,-1,56,52,53,-1,54,52,56,-1,56,58,54,-1,14,18,17,-1,17,15,14,-1,54,58,59,-1,59,55,54,-1,14,16,19,-1,19,18,14,-1,60,62,61,-1,61,44,60,-1,47,65,63,-1,63,64,47,-1,64,63,62,-1,62,60,64,-1,40,67,66,-1,66,41,40,-1,44,61,67,-1,67,40,44,-1,41,66,65,-1,65,47,41,-1,68,69,47,-1,47,64,68,-1,70,68,64,-1,64,60,70,-1,71,72,53,-1,71,53,49,-1,53,72,73,-1,53,73,57,-1,20,10,7,-1,74,70,46,-1,74,46,75,-1,46,45,76,-1,76,75,46,-1,44,42,70,-1,70,60,44,-1,70,42,46,-1,47,69,71,-1,47,71,49,-1,20,9,10,-1,21,9,20,-1,61,62,77,-1,77,78,61,-1,63,77,62,-1,67,61,78,-1,67,78,77,-1,77,63,67,-1,66,67,63,-1,63,65,66,-1,56,57,79,-1,79,80,56,-1,58,56,80,-1,80,81,58,-1,57,83,82,-1,82,79,57,-1,59,58,81,-1,81,84,59,-1,83,129,128,-1,128,82,83,-1,80,79,87,-1,81,80,87,-1,79,82,87,-1,84,81,87,-1,82,130,87,-1,22,25,23,-1,23,24,22,-1,4,24,23,-1,23,5,4,-1,26,22,24,-1,24,27,26,-1,24,4,8,-1,8,27,24,-1,36,39,88,-1,88,89,36,-1,89,88,90,-1,90,91,89,-1,92,43,36,-1,36,89,92,-1,93,92,89,-1,89,91,93,-1,27,8,9,-1,9,28,27,-1,92,94,45,-1,45,43,92,-1,96,97,95,-1,95,90,96,-1,98,96,90,-1,90,88,98,-1,29,23,25,-1,25,30,29,-1,51,98,88,-1,88,39,51,-1,29,13,5,-1,5,23,29,-1,99,100,97,-1,97,96,99,-1,101,99,96,-1,96,98,101,-1,31,29,30,-1,30,32,31,-1,55,101,98,-1,98,51,55,-1,31,16,13,-1,13,29,31,-1,102,103,100,-1,100,99,102,-1,102,99,101,-1,101,104,102,-1,33,34,31,-1,31,32,33,-1,59,104,101,-1,101,55,59,-1,19,16,31,-1,31,34,19,-1,106,107,105,-1,105,93,106,-1,109,110,95,-1,95,108,109,-1,107,109,108,-1,108,105,107,-1,111,112,91,-1,91,90,111,-1,112,106,93,-1,93,91,112,-1,110,111,90,-1,90,95,110,-1,113,95,114,-1,95,113,108,-1,115,108,113,-1,108,115,105,-1,116,100,117,-1,116,97,100,-1,100,118,117,-1,100,103,118,-1,35,27,28,-1,119,94,115,-1,119,120,94,-1,76,45,94,-1,94,120,76,-1,115,92,93,-1,93,105,115,-1,115,94,92,-1,95,116,114,-1,95,97,116,-1,35,28,9,-1,21,35,9,-1,121,107,106,-1,106,122,121,-1,109,107,121,-1,112,122,106,-1,121,122,112,-1,112,109,121,-1,109,112,111,-1,111,110,109,-1,123,103,102,-1,102,124,123,-1,124,102,104,-1,104,125,124,-1,126,127,103,-1,103,123,126,-1,125,104,59,-1,59,84,125,-1,85,86,127,-1,127,126,85,-1,124,87,123,-1,125,87,124,-1,123,87,126,-1,84,87,125,-1,126,87,85,-1,120,119,115,-1,120,115,94,-1,74,75,46,-1,74,46,70,-1,75,76,45,-1,75,45,46,-1,76,120,94,-1,76,94,45,-1,132,131,136,-1,136,137,132,-1,131,133,138,-1,138,136,131,-1,133,134,139,-1,139,138,133,-1,134,135,140,-1,140,139,134,-1,141,142,143,-1,143,144,141,-1,135,141,144,-1,144,140,135,-1,149,145,132,-1,132,137,149,-1,150,146,145,-1,145,149,150,-1,151,147,146,-1,146,150,151,-1,152,148,147,-1,147,151,152,-1,143,142,153,-1,153,154,143,-1,154,153,148,-1,148,152,154,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0),doubleToFloat(15.44),doubleToFloat(0.8112),doubleToFloat(0),doubleToFloat(15.67),doubleToFloat(-3.376),doubleToFloat(2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(2.09),doubleToFloat(15.08),doubleToFloat(0.6152),doubleToFloat(0),doubleToFloat(7.983),doubleToFloat(3.876),doubleToFloat(0),doubleToFloat(7.41),doubleToFloat(-5.026),doubleToFloat(0),doubleToFloat(13.72),doubleToFloat(2.98),doubleToFloat(0),doubleToFloat(13.72),doubleToFloat(-4.072),doubleToFloat(0),doubleToFloat(10.57),doubleToFloat(3.901),doubleToFloat(0),doubleToFloat(10.57),doubleToFloat(-5.026),doubleToFloat(0),doubleToFloat(7.042),doubleToFloat(3.812),doubleToFloat(0),doubleToFloat(6.4),doubleToFloat(-5.026),doubleToFloat(0),doubleToFloat(4.758),doubleToFloat(3.526),doubleToFloat(0),doubleToFloat(4.249),doubleToFloat(-4.822),doubleToFloat(0),doubleToFloat(-1.099),doubleToFloat(3.066),doubleToFloat(0),doubleToFloat(-0.1768),doubleToFloat(-3.945),doubleToFloat(6.699),doubleToFloat(7.869),doubleToFloat(2.172),doubleToFloat(2.644),doubleToFloat(7.41),doubleToFloat(4.093),doubleToFloat(6.699),doubleToFloat(7.869),doubleToFloat(-3.225),doubleToFloat(2.644),doubleToFloat(7.41),doubleToFloat(-5.218),doubleToFloat(5.274),doubleToFloat(14.26),doubleToFloat(1.005),doubleToFloat(3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(5.144),doubleToFloat(15.02),doubleToFloat(-2.695),doubleToFloat(3.953),doubleToFloat(15.51),doubleToFloat(-2.518),doubleToFloat(6.378),doubleToFloat(10.57),doubleToFloat(2.332),doubleToFloat(3.196),doubleToFloat(10.57),doubleToFloat(3.787),doubleToFloat(2.622),doubleToFloat(10.57),doubleToFloat(-5.218),doubleToFloat(6.378),doubleToFloat(10.57),doubleToFloat(-4.198),doubleToFloat(6.321),doubleToFloat(6.859),doubleToFloat(1.479),doubleToFloat(2.644),doubleToFloat(6.4),doubleToFloat(3.507),doubleToFloat(6.321),doubleToFloat(6.859),doubleToFloat(-2.919),doubleToFloat(2.644),doubleToFloat(6.4),doubleToFloat(-5.218),doubleToFloat(5.721),doubleToFloat(3.445),doubleToFloat(1.299),doubleToFloat(2.591),doubleToFloat(3.486),doubleToFloat(3.807),doubleToFloat(5.72),doubleToFloat(3.443),doubleToFloat(-2.672),doubleToFloat(2.598),doubleToFloat(4.609),doubleToFloat(-4.651),doubleToFloat(4.449),doubleToFloat(-0.3754),doubleToFloat(0.925),doubleToFloat(1.414),doubleToFloat(-0.8264),doubleToFloat(3.196),doubleToFloat(4.449),doubleToFloat(0.1736),doubleToFloat(-2.369),doubleToFloat(2.4),doubleToFloat(0.3773),doubleToFloat(-3.774),doubleToFloat(6.937),doubleToFloat(8.714),doubleToFloat(0.7786),doubleToFloat(6.954),doubleToFloat(8.723),doubleToFloat(-2.793),doubleToFloat(6.109),doubleToFloat(14.39),doubleToFloat(1.005),doubleToFloat(6.109),doubleToFloat(14.34),doubleToFloat(-2.695),doubleToFloat(7.659),doubleToFloat(10.67),doubleToFloat(1.843),doubleToFloat(7.659),doubleToFloat(10.67),doubleToFloat(-3.828),doubleToFloat(3.082),doubleToFloat(5.41),doubleToFloat(4.545),doubleToFloat(2.758),doubleToFloat(8.208),doubleToFloat(4.853),doubleToFloat(3.018),doubleToFloat(1.961),doubleToFloat(4.928),doubleToFloat(2.787),doubleToFloat(-1.072),doubleToFloat(4.799),doubleToFloat(2.625),doubleToFloat(11.08),doubleToFloat(4.576),doubleToFloat(2.697),doubleToFloat(17.34),doubleToFloat(-2.249),doubleToFloat(0),doubleToFloat(17.14),doubleToFloat(-3.188),doubleToFloat(3.38),doubleToFloat(16.55),doubleToFloat(2.416),doubleToFloat(7.73),doubleToFloat(14.39),doubleToFloat(1.005),doubleToFloat(7.729),doubleToFloat(14.34),doubleToFloat(-2.695),doubleToFloat(2.528),doubleToFloat(-1.347),doubleToFloat(0.311),doubleToFloat(2.527),doubleToFloat(-1.036),doubleToFloat(-1.556),doubleToFloat(1.366),doubleToFloat(-0.9207),doubleToFloat(-2.352),doubleToFloat(0.8074),doubleToFloat(-1.603),doubleToFloat(1.598),doubleToFloat(0),doubleToFloat(-1.235),doubleToFloat(-2.449),doubleToFloat(0),doubleToFloat(-1.757),doubleToFloat(1.525),doubleToFloat(0),doubleToFloat(-1.516),doubleToFloat(-0.4923),doubleToFloat(-2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(-2.09),doubleToFloat(15.08),doubleToFloat(0.6152),doubleToFloat(-6.699),doubleToFloat(7.869),doubleToFloat(2.172),doubleToFloat(-2.644),doubleToFloat(7.41),doubleToFloat(4.093),doubleToFloat(-6.699),doubleToFloat(7.869),doubleToFloat(-3.225),doubleToFloat(-2.644),doubleToFloat(7.41),doubleToFloat(-5.218),doubleToFloat(-5.274),doubleToFloat(14.26),doubleToFloat(1.005),doubleToFloat(-3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(-5.144),doubleToFloat(15.02),doubleToFloat(-2.695),doubleToFloat(-3.953),doubleToFloat(15.51),doubleToFloat(-2.518),doubleToFloat(-6.378),doubleToFloat(10.57),doubleToFloat(2.332),doubleToFloat(-3.196),doubleToFloat(10.57),doubleToFloat(3.787),doubleToFloat(-2.622),doubleToFloat(10.57),doubleToFloat(-5.218),doubleToFloat(-6.378),doubleToFloat(10.57),doubleToFloat(-4.198),doubleToFloat(-6.321),doubleToFloat(6.859),doubleToFloat(1.479),doubleToFloat(-2.644),doubleToFloat(6.4),doubleToFloat(3.507),doubleToFloat(-6.321),doubleToFloat(6.859),doubleToFloat(-2.919),doubleToFloat(-2.644),doubleToFloat(6.4),doubleToFloat(-5.218),doubleToFloat(-5.721),doubleToFloat(3.445),doubleToFloat(1.299),doubleToFloat(-2.591),doubleToFloat(3.486),doubleToFloat(3.807),doubleToFloat(-5.72),doubleToFloat(3.443),doubleToFloat(-2.672),doubleToFloat(-2.598),doubleToFloat(4.609),doubleToFloat(-4.651),doubleToFloat(-4.449),doubleToFloat(-0.3754),doubleToFloat(0.925),doubleToFloat(-1.414),doubleToFloat(-0.8264),doubleToFloat(3.196),doubleToFloat(-4.449),doubleToFloat(0.1736),doubleToFloat(-2.369),doubleToFloat(-2.4),doubleToFloat(0.3773),doubleToFloat(-3.774),doubleToFloat(-6.937),doubleToFloat(8.714),doubleToFloat(0.7786),doubleToFloat(-6.954),doubleToFloat(8.723),doubleToFloat(-2.793),doubleToFloat(-6.109),doubleToFloat(14.39),doubleToFloat(1.005),doubleToFloat(-6.109),doubleToFloat(14.34),doubleToFloat(-2.695),doubleToFloat(-7.659),doubleToFloat(10.67),doubleToFloat(1.843),doubleToFloat(-7.659),doubleToFloat(10.67),doubleToFloat(-3.828),doubleToFloat(-3.082),doubleToFloat(5.41),doubleToFloat(4.545),doubleToFloat(-2.758),doubleToFloat(8.208),doubleToFloat(4.853),doubleToFloat(-3.018),doubleToFloat(1.961),doubleToFloat(4.928),doubleToFloat(-2.787),doubleToFloat(-1.072),doubleToFloat(4.799),doubleToFloat(-2.625),doubleToFloat(11.08),doubleToFloat(4.576),doubleToFloat(-2.697),doubleToFloat(17.34),doubleToFloat(-2.249),doubleToFloat(-3.38),doubleToFloat(16.55),doubleToFloat(2.416),doubleToFloat(-7.73),doubleToFloat(14.39),doubleToFloat(1.005),doubleToFloat(-7.729),doubleToFloat(14.34),doubleToFloat(-2.695),doubleToFloat(-2.528),doubleToFloat(-1.347),doubleToFloat(0.311),doubleToFloat(-2.527),doubleToFloat(-1.036),doubleToFloat(-1.556),doubleToFloat(-1.366),doubleToFloat(-0.9207),doubleToFloat(-2.352),doubleToFloat(-0.8074),doubleToFloat(-1.603),doubleToFloat(1.598),doubleToFloat(6.699),doubleToFloat(7.869),doubleToFloat(2.172),doubleToFloat(6.378),doubleToFloat(10.57),doubleToFloat(2.332),doubleToFloat(6.378),doubleToFloat(10.57),doubleToFloat(2.332),doubleToFloat(5.274),doubleToFloat(14.26),doubleToFloat(1.005),doubleToFloat(5.721),doubleToFloat(3.445),doubleToFloat(1.299),doubleToFloat(6.321),doubleToFloat(6.859),doubleToFloat(1.479),doubleToFloat(4.449),doubleToFloat(-0.3754),doubleToFloat(0.925),doubleToFloat(5.721),doubleToFloat(3.445),doubleToFloat(1.299),doubleToFloat(3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(6.321),doubleToFloat(6.859),doubleToFloat(1.479),doubleToFloat(6.699),doubleToFloat(7.869),doubleToFloat(2.172),doubleToFloat(2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(0),doubleToFloat(15.67),doubleToFloat(-3.376),doubleToFloat(-6.378),doubleToFloat(10.57),doubleToFloat(2.332),doubleToFloat(-6.699),doubleToFloat(7.869),doubleToFloat(2.172),doubleToFloat(-3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(-5.274),doubleToFloat(14.26),doubleToFloat(1.005),doubleToFloat(-6.321),doubleToFloat(6.859),doubleToFloat(1.479),doubleToFloat(-5.721),doubleToFloat(3.445),doubleToFloat(1.299),doubleToFloat(-5.721),doubleToFloat(3.445),doubleToFloat(1.299),doubleToFloat(-4.449),doubleToFloat(-0.3754),doubleToFloat(0.925),doubleToFloat(-2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(-3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(-6.699),doubleToFloat(7.869),doubleToFloat(2.172),doubleToFloat(-6.321),doubleToFloat(6.859),doubleToFloat(1.479),doubleToFloat(0),doubleToFloat(15.67),doubleToFloat(-3.376),doubleToFloat(-2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(-3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(-2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(2.697),doubleToFloat(17.34),doubleToFloat(-2.249),doubleToFloat(2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(3.38),doubleToFloat(16.55),doubleToFloat(2.416),doubleToFloat(2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(0),doubleToFloat(17.14),doubleToFloat(-3.188),doubleToFloat(0),doubleToFloat(15.67),doubleToFloat(-3.376),doubleToFloat(0),doubleToFloat(15.67),doubleToFloat(-3.376),doubleToFloat(2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(-2.697),doubleToFloat(17.34),doubleToFloat(-2.249),doubleToFloat(-2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(0),doubleToFloat(17.14),doubleToFloat(-3.188),doubleToFloat(-2.697),doubleToFloat(16.18),doubleToFloat(-2.249),doubleToFloat(0),doubleToFloat(15.44),doubleToFloat(0.8112),doubleToFloat(0),doubleToFloat(15.67),doubleToFloat(-3.376),doubleToFloat(6.699),doubleToFloat(7.869),doubleToFloat(2.172),doubleToFloat(3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(6.378),doubleToFloat(10.57),doubleToFloat(2.332),doubleToFloat(5.721),doubleToFloat(3.445),doubleToFloat(1.299),doubleToFloat(3.082),doubleToFloat(5.41),doubleToFloat(4.545),doubleToFloat(2.787),doubleToFloat(-1.072),doubleToFloat(4.799),doubleToFloat(2.625),doubleToFloat(11.08),doubleToFloat(4.576),doubleToFloat(2.697),doubleToFloat(17.34),doubleToFloat(-2.249),doubleToFloat(0),doubleToFloat(17.14),doubleToFloat(-3.188),doubleToFloat(3.38),doubleToFloat(16.55),doubleToFloat(2.416),doubleToFloat(-6.699),doubleToFloat(7.869),doubleToFloat(2.172),doubleToFloat(-3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(-6.378),doubleToFloat(10.57),doubleToFloat(2.332),doubleToFloat(-5.721),doubleToFloat(3.445),doubleToFloat(1.299),doubleToFloat(-3.082),doubleToFloat(5.41),doubleToFloat(4.545),doubleToFloat(-2.787),doubleToFloat(-1.072),doubleToFloat(4.799),doubleToFloat(-2.625),doubleToFloat(11.08),doubleToFloat(4.576),doubleToFloat(-2.697),doubleToFloat(17.34),doubleToFloat(-2.249),doubleToFloat(-3.38),doubleToFloat(16.55),doubleToFloat(2.416),doubleToFloat(0),doubleToFloat(15.44),doubleToFloat(0.8112),doubleToFloat(3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(3.082),doubleToFloat(5.41),doubleToFloat(4.545),doubleToFloat(2.625),doubleToFloat(11.08),doubleToFloat(4.576),doubleToFloat(2.697),doubleToFloat(17.34),doubleToFloat(-2.249),doubleToFloat(3.38),doubleToFloat(16.55),doubleToFloat(2.416),doubleToFloat(-3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(-6.378),doubleToFloat(10.57),doubleToFloat(2.332),doubleToFloat(-3.082),doubleToFloat(5.41),doubleToFloat(4.545),doubleToFloat(-2.625),doubleToFloat(11.08),doubleToFloat(4.576),doubleToFloat(3.102),doubleToFloat(14.58),doubleToFloat(2.516),doubleToFloat(3.082),doubleToFloat(5.41),doubleToFloat(4.545),doubleToFloat(-3.082),doubleToFloat(5.41),doubleToFloat(4.545),doubleToFloat(0.4788),doubleToFloat(19.29),doubleToFloat(-1.951),doubleToFloat(0),doubleToFloat(19.29),doubleToFloat(-2.014),doubleToFloat(1.016),doubleToFloat(19.29),doubleToFloat(-1.707),doubleToFloat(1.393),doubleToFloat(19.29),doubleToFloat(-0.8835),doubleToFloat(1.087),doubleToFloat(19.29),doubleToFloat(-0.3107),doubleToFloat(0.4788),doubleToFloat(13.68),doubleToFloat(-1.951),doubleToFloat(0),doubleToFloat(13.74),doubleToFloat(-2.014),doubleToFloat(1.016),doubleToFloat(13.91),doubleToFloat(-1.707),doubleToFloat(1.393),doubleToFloat(13.89),doubleToFloat(-0.8835),doubleToFloat(1.087),doubleToFloat(13.56),doubleToFloat(-0.3107),doubleToFloat(0.5395),doubleToFloat(19.41),doubleToFloat(0.0337),doubleToFloat(0),doubleToFloat(18.91),doubleToFloat(0.1174),doubleToFloat(0),doubleToFloat(13.27),doubleToFloat(0.1174),doubleToFloat(0.5395),doubleToFloat(13.28),doubleToFloat(0.0337),doubleToFloat(-0.4788),doubleToFloat(19.29),doubleToFloat(-1.951),doubleToFloat(-1.016),doubleToFloat(19.29),doubleToFloat(-1.707),doubleToFloat(-1.393),doubleToFloat(19.29),doubleToFloat(-0.8835),doubleToFloat(-1.087),doubleToFloat(19.29),doubleToFloat(-0.3107),doubleToFloat(-0.4788),doubleToFloat(13.68),doubleToFloat(-1.951),doubleToFloat(-1.016),doubleToFloat(13.91),doubleToFloat(-1.707),doubleToFloat(-1.393),doubleToFloat(13.89),doubleToFloat(-0.8835),doubleToFloat(-1.087),doubleToFloat(13.56),doubleToFloat(-0.3107),doubleToFloat(-0.5395),doubleToFloat(19.41),doubleToFloat(0.0337),doubleToFloat(-0.5395),doubleToFloat(13.28),doubleToFloat(0.0337)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.1137),doubleToFloat(0.4353),doubleToFloat(0.2462),doubleToFloat(0.4353),doubleToFloat(0.2627),doubleToFloat(0.3623),doubleToFloat(0.1041),doubleToFloat(0.3729),doubleToFloat(0.3893),doubleToFloat(0.4353),doubleToFloat(0.3893),doubleToFloat(0.3755),doubleToFloat(0.1466),doubleToFloat(0.533),doubleToFloat(0.2501),doubleToFloat(0.4926),doubleToFloat(0.3893),doubleToFloat(0.4894),doubleToFloat(0.3893),doubleToFloat(0.5602),doubleToFloat(0.2792),doubleToFloat(0.5518),doubleToFloat(0.2627),doubleToFloat(0.3389),doubleToFloat(0.1154),doubleToFloat(0.3495),doubleToFloat(0.3893),doubleToFloat(0.3537),doubleToFloat(0.2643),doubleToFloat(0.2715),doubleToFloat(0.1333),doubleToFloat(0.2706),doubleToFloat(0.3893),doubleToFloat(0.3009),doubleToFloat(0.1712),doubleToFloat(0.2298),doubleToFloat(0.2994),doubleToFloat(0.2194),doubleToFloat(0.3893),doubleToFloat(0.2131),doubleToFloat(0.2611),doubleToFloat(0.5773),doubleToFloat(0.3893),doubleToFloat(0.5655),doubleToFloat(0.1138),doubleToFloat(0.4353),doubleToFloat(0.2628),doubleToFloat(0.3623),doubleToFloat(0.2463),doubleToFloat(0.4353),doubleToFloat(0.1042),doubleToFloat(0.3729),doubleToFloat(0.1467),doubleToFloat(0.533),doubleToFloat(0.2502),doubleToFloat(0.4926),doubleToFloat(0.2793),doubleToFloat(0.5518),doubleToFloat(0.2628),doubleToFloat(0.3389),doubleToFloat(0.1155),doubleToFloat(0.3495),doubleToFloat(0.2644),doubleToFloat(0.2715),doubleToFloat(0.1334),doubleToFloat(0.2706),doubleToFloat(0.1713),doubleToFloat(0.2298),doubleToFloat(0.2995),doubleToFloat(0.2194),doubleToFloat(0.2612),doubleToFloat(0.5773),doubleToFloat(0.6307),doubleToFloat(0.4386),doubleToFloat(0.6307),doubleToFloat(0.4769),doubleToFloat(0.755),doubleToFloat(0.4772),doubleToFloat(0.7551),doubleToFloat(0.4386),doubleToFloat(0.6307),doubleToFloat(0.5194),doubleToFloat(0.7429),doubleToFloat(0.5302),doubleToFloat(0.5323),doubleToFloat(0.5214),doubleToFloat(0.5881),doubleToFloat(0.4386),doubleToFloat(0.5452),doubleToFloat(0.5279),doubleToFloat(0.5366),doubleToFloat(0.4386),doubleToFloat(0.5197),doubleToFloat(0.5286),doubleToFloat(0.7429),doubleToFloat(0.5917),doubleToFloat(0.7696),doubleToFloat(0.5316),doubleToFloat(0.7696),doubleToFloat(0.6269),doubleToFloat(0.7817),doubleToFloat(0.4772),doubleToFloat(0.7818),doubleToFloat(0.4386),doubleToFloat(0.8599),doubleToFloat(0.5314),doubleToFloat(0.8599),doubleToFloat(0.6265),doubleToFloat(0.8291),doubleToFloat(0.4806),doubleToFloat(0.8387),doubleToFloat(0.4386),doubleToFloat(0.9464),doubleToFloat(0.5276),doubleToFloat(0.9609),doubleToFloat(0.6256),doubleToFloat(0.941),doubleToFloat(0.4855),doubleToFloat(0.9557),doubleToFloat(0.4386),doubleToFloat(0.5652),doubleToFloat(0.5822),doubleToFloat(0.5633),doubleToFloat(0.5331),doubleToFloat(0.5618),doubleToFloat(0.5799),doubleToFloat(0.6278),doubleToFloat(0.5853),doubleToFloat(0.6307),doubleToFloat(0.5947),doubleToFloat(0.7205),doubleToFloat(0.5756),doubleToFloat(0.7203),doubleToFloat(0.5356),doubleToFloat(0.6278),doubleToFloat(0.5288),doubleToFloat(0.6217),doubleToFloat(0.7512),doubleToFloat(0.7384),doubleToFloat(0.7514),doubleToFloat(0.5501),doubleToFloat(0.7437),doubleToFloat(0.8124),doubleToFloat(0.7452),doubleToFloat(0.9036),doubleToFloat(0.7488),doubleToFloat(0.964),doubleToFloat(0.7479),doubleToFloat(0.5066),doubleToFloat(0.7388),doubleToFloat(0.4976),doubleToFloat(0.5286),doubleToFloat(0.4976),doubleToFloat(0.4386),doubleToFloat(0.5618),doubleToFloat(0.5768),doubleToFloat(0.5633),doubleToFloat(0.5393),doubleToFloat(0.9867),doubleToFloat(0.621),doubleToFloat(0.9784),doubleToFloat(0.5239),doubleToFloat(0.9754),doubleToFloat(0.4831),doubleToFloat(0.9909),doubleToFloat(0.7092),doubleToFloat(0.9703),doubleToFloat(0.7119),doubleToFloat(0.9837),doubleToFloat(0.4386),doubleToFloat(0.995),doubleToFloat(0.7441),doubleToFloat(0.9775),doubleToFloat(0.7441),doubleToFloat(0.9911),doubleToFloat(0.4386),doubleToFloat(0.7551),doubleToFloat(0.4772),doubleToFloat(0.6307),doubleToFloat(0.4769),doubleToFloat(0.7429),doubleToFloat(0.5303),doubleToFloat(0.6307),doubleToFloat(0.5194),doubleToFloat(0.5324),doubleToFloat(0.5214),doubleToFloat(0.5452),doubleToFloat(0.5279),doubleToFloat(0.5197),doubleToFloat(0.5286),doubleToFloat(0.7429),doubleToFloat(0.5917),doubleToFloat(0.7696),doubleToFloat(0.5317),doubleToFloat(0.7696),doubleToFloat(0.6269),doubleToFloat(0.7818),doubleToFloat(0.4772),doubleToFloat(0.86),doubleToFloat(0.5315),doubleToFloat(0.8599),doubleToFloat(0.6265),doubleToFloat(0.8291),doubleToFloat(0.4806),doubleToFloat(0.9464),doubleToFloat(0.5276),doubleToFloat(0.961),doubleToFloat(0.6256),doubleToFloat(0.9411),doubleToFloat(0.4856),doubleToFloat(0.5653),doubleToFloat(0.5822),doubleToFloat(0.5633),doubleToFloat(0.5331),doubleToFloat(0.5618),doubleToFloat(0.5799),doubleToFloat(0.6307),doubleToFloat(0.5947),doubleToFloat(0.6278),doubleToFloat(0.5854),doubleToFloat(0.7206),doubleToFloat(0.5756),doubleToFloat(0.7203),doubleToFloat(0.5357),doubleToFloat(0.6279),doubleToFloat(0.5289),doubleToFloat(0.6217),doubleToFloat(0.7512),doubleToFloat(0.7384),doubleToFloat(0.7515),doubleToFloat(0.5502),doubleToFloat(0.7437),doubleToFloat(0.8124),doubleToFloat(0.7453),doubleToFloat(0.9036),doubleToFloat(0.7488),doubleToFloat(0.9641),doubleToFloat(0.7479),doubleToFloat(0.5066),doubleToFloat(0.7389),doubleToFloat(0.4976),doubleToFloat(0.5286),doubleToFloat(0.5618),doubleToFloat(0.5768),doubleToFloat(0.5633),doubleToFloat(0.5393),doubleToFloat(0.9867),doubleToFloat(0.621),doubleToFloat(0.9784),doubleToFloat(0.524),doubleToFloat(0.9754),doubleToFloat(0.4831),doubleToFloat(0.9909),doubleToFloat(0.7092),doubleToFloat(0.9703),doubleToFloat(0.7119),doubleToFloat(0.9949),doubleToFloat(0.7441),doubleToFloat(0.9775),doubleToFloat(0.7441),doubleToFloat(0.9949),doubleToFloat(0.7441),doubleToFloat(0.3995),doubleToFloat(0.6721),doubleToFloat(0.3906),doubleToFloat(0.6721),doubleToFloat(0.4094),doubleToFloat(0.6721),doubleToFloat(0.4164),doubleToFloat(0.6721),doubleToFloat(0.4107),doubleToFloat(0.6721),doubleToFloat(0.3995),doubleToFloat(0.6285),doubleToFloat(0.3906),doubleToFloat(0.6293),doubleToFloat(0.4094),doubleToFloat(0.632),doubleToFloat(0.4164),doubleToFloat(0.6316),doubleToFloat(0.4107),doubleToFloat(0.6267),doubleToFloat(0.4006),doubleToFloat(0.6738),doubleToFloat(0.3906),doubleToFloat(0.6664),doubleToFloat(0.3906),doubleToFloat(0.6224),doubleToFloat(0.4006),doubleToFloat(0.6225),doubleToFloat(0.3818),doubleToFloat(0.6721),doubleToFloat(0.3719),doubleToFloat(0.6721),doubleToFloat(0.3649),doubleToFloat(0.6721),doubleToFloat(0.3706),doubleToFloat(0.6721),doubleToFloat(0.3818),doubleToFloat(0.6285),doubleToFloat(0.3719),doubleToFloat(0.632),doubleToFloat(0.3649),doubleToFloat(0.6316),doubleToFloat(0.3706),doubleToFloat(0.6267),doubleToFloat(0.3807),doubleToFloat(0.6738),doubleToFloat(0.3807),doubleToFloat(0.6225)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_vl5").setName("skullbase").setDEF("hanim_skullbase").setCenter(Java.to([doubleToFloat(0),doubleToFloat(65.510002),doubleToFloat(-1.446)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_skullbase").setName("skull").setDEF("hanim_skull")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(65.510002),doubleToFloat(-1.446)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("ChulTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([58,44,47,-1,47,49,58,-1,49,60,59,-1,59,1,49,-1,56,48,47,-1,47,44,56,-1,50,51,59,-1,59,60,50,-1,173,168,58,-1,58,49,173,-1,171,173,49,-1,49,1,171,-1,14,12,18,-1,18,15,14,-1,162,160,14,-1,14,15,162,-1,16,57,33,-1,21,18,12,-1,18,79,19,-1,80,20,19,-1,11,10,79,-1,18,21,79,-1,11,79,21,-1,21,12,78,-1,11,21,22,-1,321,345,320,-1,322,323,346,-1,80,25,24,-1,24,20,80,-1,26,38,24,-1,23,13,38,-1,20,77,18,-1,18,19,20,-1,38,29,30,-1,30,23,38,-1,27,30,29,-1,27,28,30,-1,30,28,23,-1,33,31,16,-1,31,37,16,-1,28,34,23,-1,17,35,36,-1,36,28,17,-1,33,36,35,-1,17,32,35,-1,32,33,35,-1,33,34,36,-1,36,34,28,-1,10,19,79,-1,4,40,37,-1,40,42,41,-1,40,41,37,-1,40,4,42,-1,56,43,4,-1,4,46,56,-1,45,43,56,-1,56,44,45,-1,43,45,4,-1,48,56,46,-1,46,3,48,-1,50,60,3,-1,51,50,3,-1,3,2,51,-1,58,168,52,-1,52,168,170,-1,61,52,170,-1,4,45,52,-1,52,61,4,-1,52,45,44,-1,44,58,52,-1,61,170,53,-1,170,165,39,-1,39,53,170,-1,4,61,53,-1,53,42,4,-1,53,39,41,-1,41,42,53,-1,165,57,39,-1,13,23,54,-1,16,37,57,-1,41,39,57,-1,37,41,57,-1,57,165,166,-1,54,166,13,-1,33,57,34,-1,34,57,54,-1,34,54,23,-1,166,162,55,-1,55,162,15,-1,77,55,15,-1,15,18,77,-1,166,77,13,-1,77,166,55,-1,13,77,24,-1,24,38,13,-1,20,24,77,-1,54,57,166,-1,47,60,49,-1,48,3,47,-1,3,60,47,-1,3,63,2,-1,72,62,63,-1,3,65,63,-1,3,46,64,-1,64,66,3,-1,6,66,64,-1,3,66,65,-1,6,73,8,-1,8,73,67,-1,6,75,73,-1,5,71,73,-1,73,75,5,-1,6,70,75,-1,64,46,69,-1,75,70,69,-1,75,69,344,-1,2,63,62,-1,8,66,6,-1,63,8,72,-1,9,74,71,-1,68,74,9,-1,74,8,67,-1,68,72,74,-1,72,8,74,-1,67,71,74,-1,67,73,71,-1,65,8,63,-1,65,66,8,-1,70,6,64,-1,70,64,69,-1,4,0,344,-1,69,46,4,-1,69,4,344,-1,76,344,0,-1,5,76,0,-1,5,75,76,-1,75,344,76,-1,133,125,123,-1,123,120,133,-1,125,1,59,-1,59,134,125,-1,131,120,123,-1,123,124,131,-1,126,134,59,-1,59,51,126,-1,172,125,133,-1,133,167,172,-1,171,1,125,-1,125,172,171,-1,14,91,94,-1,94,12,14,-1,161,91,14,-1,14,160,161,-1,109,132,92,-1,12,94,97,-1,95,149,94,-1,95,96,150,-1,149,88,89,-1,149,97,94,-1,97,149,89,-1,78,12,97,-1,98,97,89,-1,325,348,324,-1,354,326,327,-1,150,96,100,-1,100,101,150,-1,100,114,102,-1,114,90,99,-1,96,95,94,-1,94,148,96,-1,114,99,106,-1,106,105,114,-1,105,106,103,-1,106,104,103,-1,99,104,106,-1,92,107,109,-1,92,113,107,-1,99,110,104,-1,93,104,112,-1,112,111,93,-1,111,112,109,-1,111,108,93,-1,111,109,108,-1,112,110,109,-1,104,110,112,-1,149,95,88,-1,113,116,83,-1,117,118,116,-1,113,117,116,-1,118,83,116,-1,131,122,83,-1,83,119,131,-1,121,120,131,-1,131,119,121,-1,83,121,119,-1,124,82,122,-1,122,131,124,-1,82,134,126,-1,51,2,82,-1,82,126,51,-1,127,167,133,-1,169,167,127,-1,169,127,135,-1,83,135,127,-1,127,121,83,-1,127,133,120,-1,120,121,127,-1,128,169,135,-1,169,128,115,-1,115,163,169,-1,83,118,128,-1,128,135,83,-1,128,118,117,-1,117,115,128,-1,115,132,163,-1,129,99,90,-1,132,113,92,-1,132,115,117,-1,132,117,113,-1,164,163,132,-1,90,164,129,-1,110,132,109,-1,129,132,110,-1,99,129,110,-1,130,161,164,-1,91,161,130,-1,148,94,91,-1,91,130,148,-1,90,148,164,-1,130,164,148,-1,90,114,100,-1,100,148,90,-1,148,100,96,-1,164,132,129,-1,125,134,123,-1,123,82,124,-1,123,134,82,-1,2,136,82,-1,136,62,72,-1,136,138,82,-1,82,139,137,-1,137,122,82,-1,137,139,85,-1,138,139,82,-1,87,144,85,-1,140,144,87,-1,144,146,85,-1,84,146,144,-1,144,143,84,-1,146,142,85,-1,141,122,137,-1,141,142,146,-1,347,141,146,-1,62,136,2,-1,85,139,87,-1,72,87,136,-1,143,145,9,-1,9,145,68,-1,145,140,87,-1,68,145,72,-1,72,145,87,-1,145,143,140,-1,143,144,140,-1,136,87,138,-1,87,139,138,-1,137,85,142,-1,141,137,142,-1,347,81,83,-1,83,122,141,-1,347,83,141,-1,81,347,147,-1,81,147,84,-1,147,146,84,-1,147,347,146,-1,162,166,152,-1,151,160,162,-1,162,152,151,-1,152,166,165,-1,165,154,152,-1,154,165,170,-1,170,156,154,-1,152,154,155,-1,155,151,152,-1,156,153,155,-1,155,154,156,-1,173,156,170,-1,170,168,173,-1,171,153,156,-1,156,173,171,-1,157,164,161,-1,151,157,161,-1,161,160,151,-1,157,158,163,-1,163,164,157,-1,158,159,169,-1,169,163,158,-1,157,151,155,-1,155,158,157,-1,159,158,155,-1,155,153,159,-1,172,167,169,-1,169,159,172,-1,171,172,159,-1,159,153,171,-1,355,237,223,-1,174,236,237,-1,236,174,175,-1,179,238,176,-1,179,176,177,-1,179,177,178,-1,178,174,179,-1,174,178,175,-1,180,226,236,-1,238,180,236,-1,180,230,226,-1,237,236,223,-1,223,236,218,-1,225,355,223,-1,223,224,225,-1,328,329,239,-1,330,331,350,-1,228,227,219,-1,219,222,228,-1,236,226,218,-1,174,237,0,-1,0,237,355,-1,0,179,174,-1,318,355,225,-1,220,228,222,-1,221,228,220,-1,5,0,355,-1,218,182,223,-1,183,223,182,-1,181,183,185,-1,181,185,242,-1,213,212,244,-1,244,246,213,-1,213,246,245,-1,245,214,213,-1,245,247,184,-1,184,214,245,-1,214,184,206,-1,206,207,214,-1,217,319,225,-1,225,224,217,-1,183,181,217,-1,217,224,183,-1,224,223,183,-1,226,209,218,-1,218,209,184,-1,182,185,183,-1,218,184,182,-1,207,208,232,-1,232,214,207,-1,232,215,214,-1,209,206,184,-1,186,192,190,-1,190,188,186,-1,197,192,208,-1,208,207,197,-1,190,222,219,-1,219,188,190,-1,194,195,190,-1,226,189,209,-1,187,189,226,-1,192,186,208,-1,191,216,205,-1,196,205,216,-1,195,196,216,-1,196,195,194,-1,209,189,198,-1,199,197,207,-1,207,206,199,-1,233,234,197,-1,197,199,233,-1,209,198,199,-1,199,206,209,-1,233,199,198,-1,198,200,233,-1,248,194,202,-1,201,205,250,-1,248,249,196,-1,196,194,248,-1,196,249,250,-1,250,205,196,-1,234,203,197,-1,203,192,197,-1,194,190,202,-1,200,198,189,-1,189,204,200,-1,202,190,192,-1,202,192,203,-1,205,210,191,-1,210,205,201,-1,220,222,193,-1,204,189,187,-1,187,210,204,-1,210,201,204,-1,210,187,191,-1,195,211,190,-1,195,193,211,-1,193,222,211,-1,211,222,190,-1,215,212,213,-1,213,214,215,-1,230,187,226,-1,230,191,187,-1,229,221,230,-1,229,228,221,-1,9,355,318,-1,5,355,71,-1,71,355,9,-1,231,247,185,-1,182,231,185,-1,184,231,182,-1,184,247,231,-1,238,230,180,-1,230,221,191,-1,221,235,191,-1,191,235,216,-1,221,220,235,-1,193,235,220,-1,216,235,193,-1,193,195,216,-1,250,249,233,-1,203,234,248,-1,234,233,249,-1,250,233,200,-1,249,248,234,-1,243,241,240,-1,241,243,247,-1,204,201,250,-1,200,204,250,-1,203,248,202,-1,247,243,242,-1,247,242,185,-1,332,333,349,-1,334,335,7,-1,292,304,353,-1,304,303,251,-1,252,251,303,-1,253,305,256,-1,254,253,256,-1,256,251,255,-1,255,254,256,-1,252,255,251,-1,303,295,257,-1,303,257,305,-1,295,298,257,-1,292,303,304,-1,288,303,292,-1,294,352,292,-1,292,353,294,-1,336,337,293,-1,306,338,339,-1,296,291,219,-1,219,227,296,-1,288,295,303,-1,81,304,251,-1,353,304,81,-1,251,256,81,-1,294,353,317,-1,291,296,289,-1,289,296,290,-1,353,81,84,-1,292,258,288,-1,258,292,259,-1,261,259,181,-1,242,261,181,-1,285,309,244,-1,244,212,285,-1,285,286,308,-1,308,309,285,-1,308,286,260,-1,260,310,308,-1,286,281,280,-1,280,260,286,-1,217,352,294,-1,294,319,217,-1,259,352,217,-1,217,181,259,-1,259,292,352,-1,288,282,295,-1,260,282,288,-1,259,261,258,-1,258,260,288,-1,281,286,232,-1,232,208,281,-1,286,215,232,-1,260,280,282,-1,186,188,264,-1,264,266,186,-1,271,281,208,-1,208,266,271,-1,264,188,219,-1,219,291,264,-1,264,269,268,-1,282,263,295,-1,295,263,262,-1,208,186,266,-1,279,287,265,-1,287,279,270,-1,287,270,269,-1,268,269,270,-1,272,263,282,-1,273,280,281,-1,281,271,273,-1,300,273,271,-1,271,301,300,-1,282,280,273,-1,273,272,282,-1,300,274,272,-1,272,273,300,-1,276,268,311,-1,313,279,275,-1,311,268,270,-1,270,312,311,-1,270,279,313,-1,313,312,270,-1,271,277,301,-1,271,266,277,-1,276,264,268,-1,274,278,263,-1,263,272,274,-1,266,264,276,-1,277,266,276,-1,265,283,279,-1,275,279,283,-1,267,291,289,-1,278,283,262,-1,262,263,278,-1,278,275,283,-1,265,262,283,-1,264,284,269,-1,284,267,269,-1,284,291,267,-1,264,291,284,-1,285,212,215,-1,215,286,285,-1,295,262,298,-1,262,265,298,-1,298,290,297,-1,290,296,297,-1,317,353,9,-1,143,353,84,-1,9,353,143,-1,261,310,299,-1,261,299,258,-1,258,299,260,-1,299,310,260,-1,257,298,305,-1,265,290,298,-1,265,302,290,-1,287,302,265,-1,302,289,290,-1,289,302,267,-1,287,269,267,-1,267,302,287,-1,300,312,313,-1,311,301,277,-1,312,300,301,-1,274,300,313,-1,301,311,312,-1,240,307,243,-1,310,243,307,-1,313,275,278,-1,313,278,274,-1,276,311,277,-1,242,243,310,-1,261,242,310,-1,351,340,341,-1,86,342,343,-1,244,314,315,-1,315,246,244,-1,246,315,247,-1,247,245,246,-1,244,309,316,-1,316,314,244,-1,309,308,310,-1,310,316,309,-1,175,176,238,-1,238,236,175,-1,177,176,175,-1,175,178,177,-1,252,303,305,-1,305,253,252,-1,254,255,252,-1,252,253,254,-1,318,225,319,-1,319,9,318,-1,317,9,319,-1,319,294,317,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,3,2,-1,2,1,0,-1,1,6,5,-1,5,4,1,-1,7,8,2,-1,2,3,7,-1,9,10,5,-1,5,6,9,-1,11,12,0,-1,0,1,11,-1,13,11,1,-1,1,4,13,-1,14,17,16,-1,16,15,14,-1,18,19,14,-1,14,15,18,-1,22,21,20,-1,23,16,17,-1,16,25,24,-1,27,26,24,-1,29,28,25,-1,16,23,25,-1,29,25,23,-1,31,17,30,-1,29,23,32,-1,33,32,31,-1,33,31,30,-1,27,35,34,-1,34,26,27,-1,37,36,34,-1,39,38,36,-1,26,40,16,-1,16,24,26,-1,36,42,41,-1,41,39,36,-1,43,41,42,-1,43,44,41,-1,41,44,39,-1,20,45,22,-1,45,46,22,-1,44,47,39,-1,48,50,49,-1,49,44,48,-1,20,49,50,-1,48,51,50,-1,51,20,50,-1,20,47,49,-1,49,47,44,-1,28,24,25,-1,53,52,46,-1,52,55,54,-1,52,54,46,-1,52,53,55,-1,7,57,53,-1,53,56,7,-1,58,57,7,-1,7,59,58,-1,57,58,53,-1,8,7,56,-1,56,60,8,-1,9,6,60,-1,10,9,60,-1,60,61,10,-1,0,12,62,-1,62,12,63,-1,64,62,63,-1,53,58,62,-1,62,64,53,-1,62,58,59,-1,59,0,62,-1,64,63,65,-1,63,67,66,-1,66,65,63,-1,53,64,65,-1,65,55,53,-1,65,66,54,-1,54,55,65,-1,67,21,66,-1,38,39,68,-1,22,46,21,-1,54,66,21,-1,46,54,21,-1,21,67,69,-1,68,69,38,-1,20,21,47,-1,47,21,68,-1,47,68,39,-1,69,18,70,-1,70,18,15,-1,40,70,15,-1,15,16,40,-1,69,71,38,-1,71,69,70,-1,38,71,34,-1,34,36,38,-1,26,34,71,-1,68,21,69,-1,2,6,1,-1,8,60,2,-1,60,6,2,-1,74,73,72,-1,77,76,75,-1,74,78,73,-1,74,81,80,-1,80,79,74,-1,82,79,80,-1,74,79,78,-1,82,84,83,-1,83,84,85,-1,82,86,84,-1,87,90,89,-1,89,88,87,-1,92,91,88,-1,80,81,93,-1,88,91,94,-1,86,93,95,-1,72,73,96,-1,83,79,82,-1,73,83,97,-1,100,99,98,-1,103,102,101,-1,99,83,85,-1,104,97,99,-1,97,83,99,-1,105,90,102,-1,105,89,90,-1,107,106,75,-1,107,108,106,-1,109,82,80,-1,109,80,93,-1,112,111,110,-1,93,81,113,-1,93,113,95,-1,114,110,111,-1,115,114,111,-1,87,86,116,-1,86,95,116,-1,117,120,119,-1,119,118,117,-1,120,123,122,-1,122,121,120,-1,124,118,119,-1,119,125,124,-1,126,121,122,-1,122,127,126,-1,128,120,117,-1,117,129,128,-1,130,123,120,-1,120,128,130,-1,14,132,131,-1,131,17,14,-1,133,132,14,-1,14,19,133,-1,136,135,134,-1,17,131,137,-1,139,138,131,-1,139,141,140,-1,138,143,142,-1,138,137,131,-1,137,138,142,-1,30,17,144,-1,145,137,142,-1,144,145,146,-1,30,144,146,-1,140,141,148,-1,148,147,140,-1,148,150,149,-1,150,152,151,-1,141,139,131,-1,131,153,141,-1,150,151,155,-1,155,154,150,-1,154,155,156,-1,155,157,156,-1,151,157,155,-1,134,158,136,-1,134,159,158,-1,151,160,157,-1,161,157,163,-1,163,162,161,-1,162,163,136,-1,162,164,161,-1,162,136,164,-1,163,160,136,-1,157,160,163,-1,138,139,143,-1,159,166,165,-1,168,167,166,-1,159,168,166,-1,167,165,166,-1,124,170,165,-1,165,169,124,-1,171,172,124,-1,124,169,171,-1,165,171,169,-1,125,173,170,-1,170,124,125,-1,173,121,126,-1,127,174,173,-1,173,126,127,-1,175,129,117,-1,176,129,175,-1,176,175,177,-1,165,177,175,-1,175,171,165,-1,175,117,172,-1,172,171,175,-1,178,176,177,-1,176,178,180,-1,180,179,176,-1,165,167,178,-1,178,177,165,-1,178,167,168,-1,168,180,178,-1,180,135,179,-1,181,151,152,-1,135,159,134,-1,135,180,168,-1,135,168,159,-1,182,179,135,-1,152,182,181,-1,160,135,136,-1,181,135,160,-1,151,181,160,-1,183,133,182,-1,132,133,183,-1,153,131,132,-1,132,183,153,-1,152,184,182,-1,183,182,184,-1,152,150,148,-1,148,184,152,-1,184,148,141,-1,182,135,181,-1,120,121,119,-1,119,173,125,-1,119,121,173,-1,72,186,185,-1,187,76,77,-1,186,188,185,-1,185,191,190,-1,190,189,185,-1,190,191,192,-1,188,191,185,-1,194,193,192,-1,195,193,194,-1,193,196,192,-1,197,200,199,-1,199,198,197,-1,200,202,201,-1,203,189,190,-1,204,202,200,-1,205,203,196,-1,96,186,72,-1,192,191,194,-1,97,194,186,-1,207,206,100,-1,101,208,103,-1,206,195,194,-1,104,206,97,-1,97,206,194,-1,208,198,209,-1,198,199,209,-1,187,211,210,-1,211,212,210,-1,190,192,213,-1,203,190,213,-1,216,215,214,-1,217,189,203,-1,205,217,203,-1,215,216,218,-1,215,218,219,-1,220,196,197,-1,220,205,196,-1,18,69,221,-1,222,19,18,-1,18,221,222,-1,221,69,67,-1,67,223,221,-1,223,67,63,-1,63,224,223,-1,221,223,225,-1,225,222,221,-1,224,226,225,-1,225,223,224,-1,11,224,63,-1,63,12,11,-1,13,226,224,-1,224,11,13,-1,227,182,133,-1,222,227,133,-1,133,19,222,-1,227,228,179,-1,179,182,227,-1,228,229,176,-1,176,179,228,-1,227,222,225,-1,225,228,227,-1,229,228,225,-1,225,230,229,-1,128,129,176,-1,176,229,128,-1,130,128,229,-1,229,230,130,-1,233,232,231,-1,235,234,232,-1,234,235,236,-1,239,238,237,-1,239,237,240,-1,239,240,241,-1,241,235,239,-1,235,241,236,-1,243,242,234,-1,238,243,234,-1,243,244,242,-1,232,234,231,-1,231,234,245,-1,246,233,231,-1,231,247,246,-1,247,246,233,-1,231,247,233,-1,248,251,250,-1,250,249,248,-1,234,242,245,-1,235,232,252,-1,252,232,233,-1,252,239,235,-1,253,233,246,-1,254,248,249,-1,255,248,254,-1,256,252,233,-1,245,257,231,-1,258,231,257,-1,261,260,259,-1,261,259,262,-1,263,266,265,-1,265,264,263,-1,263,264,268,-1,268,267,263,-1,268,270,269,-1,269,267,268,-1,267,269,272,-1,272,271,267,-1,273,274,246,-1,246,247,273,-1,258,275,273,-1,273,247,258,-1,247,231,258,-1,278,277,276,-1,276,277,269,-1,279,259,260,-1,276,269,279,-1,271,281,280,-1,280,267,271,-1,280,282,267,-1,277,272,269,-1,284,287,286,-1,286,285,284,-1,288,287,281,-1,281,271,288,-1,286,249,250,-1,250,285,286,-1,290,289,286,-1,278,291,277,-1,292,291,278,-1,287,284,283,-1,295,294,293,-1,296,293,294,-1,289,296,294,-1,296,289,290,-1,277,291,297,-1,298,288,271,-1,271,272,298,-1,299,300,288,-1,288,298,299,-1,277,297,298,-1,298,272,277,-1,299,298,297,-1,297,301,299,-1,303,290,302,-1,305,293,304,-1,303,306,296,-1,296,290,303,-1,296,306,304,-1,304,293,296,-1,300,307,288,-1,307,287,288,-1,290,286,302,-1,301,297,291,-1,291,308,301,-1,302,286,287,-1,309,287,307,-1,293,310,295,-1,310,293,305,-1,254,249,311,-1,308,291,292,-1,292,310,308,-1,310,305,308,-1,310,292,295,-1,289,312,286,-1,289,311,312,-1,311,249,312,-1,312,249,286,-1,282,266,263,-1,263,267,282,-1,313,292,278,-1,313,295,292,-1,314,255,313,-1,314,248,255,-1,315,233,253,-1,256,233,316,-1,316,233,315,-1,317,270,259,-1,279,317,259,-1,269,317,279,-1,269,270,317,-1,238,244,243,-1,313,255,295,-1,255,318,295,-1,295,318,294,-1,255,254,318,-1,311,318,254,-1,294,318,311,-1,311,289,294,-1,304,306,299,-1,307,300,303,-1,300,299,306,-1,304,299,301,-1,306,303,300,-1,321,320,319,-1,320,321,270,-1,308,305,304,-1,301,308,304,-1,307,303,309,-1,270,321,262,-1,270,262,259,-1,252,322,239,-1,252,256,322,-1,231,232,233,-1,232,234,235,-1,236,235,234,-1,237,238,239,-1,240,237,239,-1,239,235,241,-1,241,240,239,-1,236,241,235,-1,234,242,243,-1,234,243,238,-1,242,244,243,-1,231,234,232,-1,245,234,231,-1,246,247,231,-1,231,233,246,-1,233,246,247,-1,233,247,231,-1,323,324,250,-1,250,251,323,-1,245,242,234,-1,252,232,235,-1,233,232,252,-1,235,239,252,-1,246,233,253,-1,324,323,325,-1,325,323,326,-1,233,252,256,-1,231,257,245,-1,257,231,258,-1,329,328,327,-1,330,329,327,-1,331,332,265,-1,265,266,331,-1,331,334,333,-1,333,332,331,-1,333,334,336,-1,336,335,333,-1,334,338,337,-1,337,336,334,-1,273,247,246,-1,246,274,273,-1,258,247,273,-1,273,275,258,-1,258,231,247,-1,341,340,339,-1,336,340,341,-1,328,329,342,-1,342,336,341,-1,338,334,280,-1,280,343,338,-1,334,282,280,-1,336,337,340,-1,284,285,345,-1,345,344,284,-1,346,338,343,-1,343,344,346,-1,345,285,250,-1,250,324,345,-1,345,348,347,-1,340,349,339,-1,339,349,350,-1,283,284,344,-1,353,352,351,-1,352,353,354,-1,352,354,348,-1,347,348,354,-1,355,349,340,-1,356,337,338,-1,338,346,356,-1,357,356,346,-1,346,358,357,-1,340,337,356,-1,356,355,340,-1,357,359,355,-1,355,356,357,-1,361,347,360,-1,363,353,362,-1,360,347,354,-1,354,364,360,-1,354,353,363,-1,363,364,354,-1,346,365,358,-1,346,344,365,-1,361,345,347,-1,359,366,349,-1,349,355,359,-1,344,345,361,-1,365,344,367,-1,351,368,353,-1,362,353,368,-1,369,324,325,-1,366,368,350,-1,350,349,366,-1,366,362,368,-1,351,350,368,-1,345,370,348,-1,370,369,348,-1,370,324,369,-1,345,324,370,-1,331,266,282,-1,282,334,331,-1,339,350,371,-1,350,351,371,-1,371,326,372,-1,326,323,372,-1,253,233,315,-1,316,233,256,-1,315,233,316,-1,329,335,373,-1,329,373,342,-1,342,373,336,-1,373,335,336,-1,243,244,238,-1,351,326,371,-1,351,374,326,-1,352,374,351,-1,374,325,326,-1,325,374,369,-1,352,348,369,-1,369,374,352,-1,357,364,363,-1,360,358,365,-1,364,357,358,-1,359,357,363,-1,358,360,364,-1,319,376,375,-1,335,375,376,-1,363,362,366,-1,363,366,359,-1,367,360,365,-1,330,375,335,-1,329,330,335,-1,239,322,252,-1,322,256,252,-1,265,378,377,-1,377,264,265,-1,264,377,270,-1,270,268,264,-1,265,332,379,-1,379,378,265,-1,332,333,335,-1,335,379,332,-1,380,383,382,-1,382,381,380,-1,384,383,380,-1,380,385,384,-1,380,381,382,-1,382,383,380,-1,384,385,380,-1,380,383,384,-1,253,246,274,-1,274,100,253,-1,253,100,274,-1,274,246,253,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(4.222),doubleToFloat(2.176),doubleToFloat(-0.5181),doubleToFloat(0),doubleToFloat(7.197),doubleToFloat(-6.644),doubleToFloat(0),doubleToFloat(2.571),doubleToFloat(-6.826),doubleToFloat(2.315),doubleToFloat(2.853),doubleToFloat(-6.435),doubleToFloat(5.19),doubleToFloat(3.62),doubleToFloat(-2.089),doubleToFloat(3.31),doubleToFloat(1.221),doubleToFloat(-2.134),doubleToFloat(2.908),doubleToFloat(1.425),doubleToFloat(-3.883),doubleToFloat(5.046),doubleToFloat(2.447),doubleToFloat(-1.86),doubleToFloat(1.623),doubleToFloat(1.278),doubleToFloat(-4.697),doubleToFloat(0),doubleToFloat(0.2518),doubleToFloat(-3.295),doubleToFloat(2.136),doubleToFloat(4.543),doubleToFloat(5.567),doubleToFloat(0.6921),doubleToFloat(4.509),doubleToFloat(6.046),doubleToFloat(0),doubleToFloat(8.815),doubleToFloat(6.025),doubleToFloat(3.931),doubleToFloat(8.336),doubleToFloat(3.184),doubleToFloat(0),doubleToFloat(10.16),doubleToFloat(4.947),doubleToFloat(1.984),doubleToFloat(9.841),doubleToFloat(4.638),doubleToFloat(5.317),doubleToFloat(4.065),doubleToFloat(0.9472),doubleToFloat(3.604),doubleToFloat(0.8767),doubleToFloat(3.05),doubleToFloat(1.758),doubleToFloat(8.691),doubleToFloat(5.577),doubleToFloat(2.262),doubleToFloat(6.373),doubleToFloat(5.581),doubleToFloat(3.294),doubleToFloat(6.059),doubleToFloat(4.623),doubleToFloat(0.399),doubleToFloat(6.676),doubleToFloat(6.474),doubleToFloat(0.4575),doubleToFloat(6.102),doubleToFloat(6.257),doubleToFloat(4.319),doubleToFloat(5.648),doubleToFloat(2.968),doubleToFloat(3.466),doubleToFloat(6.008),doubleToFloat(4.323),doubleToFloat(3.283),doubleToFloat(4.761),doubleToFloat(4.368),doubleToFloat(3.412),doubleToFloat(4.589),doubleToFloat(4.067),doubleToFloat(2.929),doubleToFloat(2.333),doubleToFloat(3.912),doubleToFloat(4.051),doubleToFloat(3.807),doubleToFloat(3.029),doubleToFloat(3.441),doubleToFloat(3.572),doubleToFloat(3.8),doubleToFloat(4.08),doubleToFloat(3.511),doubleToFloat(3.48),doubleToFloat(4.517),doubleToFloat(1.184),doubleToFloat(1.02),doubleToFloat(4.336),doubleToFloat(1.672),doubleToFloat(2.022),doubleToFloat(4.687),doubleToFloat(2.533),doubleToFloat(1.713),doubleToFloat(4.949),doubleToFloat(5.063),doubleToFloat(2.328),doubleToFloat(4.602),doubleToFloat(1.944),doubleToFloat(2.335),doubleToFloat(4.853),doubleToFloat(3.587),doubleToFloat(2.483),doubleToFloat(5.45),doubleToFloat(4.043),doubleToFloat(0.143),doubleToFloat(3.623),doubleToFloat(5.362),doubleToFloat(3.673),doubleToFloat(5.357),doubleToFloat(7.134),doubleToFloat(-0.5946),doubleToFloat(6.261),doubleToFloat(1.61),doubleToFloat(-0.9085),doubleToFloat(5.857),doubleToFloat(4.459),doubleToFloat(-0.7436),doubleToFloat(5.641),doubleToFloat(4.313),doubleToFloat(-1.474),doubleToFloat(5.556),doubleToFloat(0.8695),doubleToFloat(-3.16),doubleToFloat(4.439),doubleToFloat(4.913),doubleToFloat(-5.151),doubleToFloat(5.641),doubleToFloat(4.282),doubleToFloat(-2.723),doubleToFloat(3.76),doubleToFloat(3.185),doubleToFloat(-4.668),doubleToFloat(3.141),doubleToFloat(5.318),doubleToFloat(-6.483),doubleToFloat(3.054),doubleToFloat(1.788),doubleToFloat(-6.582),doubleToFloat(2.211),doubleToFloat(7.197),doubleToFloat(-6.117),doubleToFloat(1.719),doubleToFloat(1.896),doubleToFloat(-8.02),doubleToFloat(0),doubleToFloat(3.476),doubleToFloat(-7.631),doubleToFloat(4.979),doubleToFloat(6.987),doubleToFloat(-2.571),doubleToFloat(5.22),doubleToFloat(6.98),doubleToFloat(-1.672),doubleToFloat(4.62),doubleToFloat(7.688),doubleToFloat(1.785),doubleToFloat(2.709),doubleToFloat(9.748),doubleToFloat(3.871),doubleToFloat(4.569),doubleToFloat(2.833),doubleToFloat(-4.822),doubleToFloat(5.051),doubleToFloat(7.318),doubleToFloat(0.6887),doubleToFloat(4.21),doubleToFloat(7.197),doubleToFloat(-4.781),doubleToFloat(0),doubleToFloat(5.051),doubleToFloat(-7.195),doubleToFloat(2.211),doubleToFloat(5.319),doubleToFloat(-6.765),doubleToFloat(4.989),doubleToFloat(6.933),doubleToFloat(-2.001),doubleToFloat(0),doubleToFloat(0.2386),doubleToFloat(-7.477),doubleToFloat(1.046),doubleToFloat(1.763),doubleToFloat(-5.545),doubleToFloat(3.547),doubleToFloat(2.201),doubleToFloat(-4.229),doubleToFloat(2.601),doubleToFloat(-0.6988),doubleToFloat(-6.611),doubleToFloat(2.963),doubleToFloat(1.984),doubleToFloat(-4.882),doubleToFloat(1.755),doubleToFloat(-1.263),doubleToFloat(-4.562),doubleToFloat(0),doubleToFloat(-0.7123),doubleToFloat(-5.924),doubleToFloat(4.203),doubleToFloat(2.309),doubleToFloat(-3.193),doubleToFloat(3.941),doubleToFloat(-0.1316),doubleToFloat(-4.084),doubleToFloat(1.258),doubleToFloat(0.6232),doubleToFloat(-3.199),doubleToFloat(0),doubleToFloat(1.052),doubleToFloat(-5.47),doubleToFloat(2.029),doubleToFloat(0.9145),doubleToFloat(-3.447),doubleToFloat(0.8389),doubleToFloat(0.7626),doubleToFloat(-4.138),doubleToFloat(3.405),doubleToFloat(1.671),doubleToFloat(-2.891),doubleToFloat(4.159),doubleToFloat(1.793),doubleToFloat(-1.372),doubleToFloat(3.261),doubleToFloat(8.323),doubleToFloat(4.331),doubleToFloat(0),doubleToFloat(6.861),doubleToFloat(6.511),doubleToFloat(1.391),doubleToFloat(6.609),doubleToFloat(6.157),doubleToFloat(2.489),doubleToFloat(4.625),doubleToFloat(5.274),doubleToFloat(-4.222),doubleToFloat(2.176),doubleToFloat(-0.5181),doubleToFloat(-2.315),doubleToFloat(2.853),doubleToFloat(-6.435),doubleToFloat(-5.19),doubleToFloat(3.62),doubleToFloat(-2.089),doubleToFloat(-3.31),doubleToFloat(1.221),doubleToFloat(-2.134),doubleToFloat(-2.908),doubleToFloat(1.425),doubleToFloat(-3.883),doubleToFloat(-5.046),doubleToFloat(2.447),doubleToFloat(-1.86),doubleToFloat(-1.623),doubleToFloat(1.278),doubleToFloat(-4.697),doubleToFloat(-2.136),doubleToFloat(4.543),doubleToFloat(5.567),doubleToFloat(-0.6921),doubleToFloat(4.509),doubleToFloat(6.046),doubleToFloat(-3.931),doubleToFloat(8.336),doubleToFloat(3.184),doubleToFloat(-1.984),doubleToFloat(9.841),doubleToFloat(4.638),doubleToFloat(-5.317),doubleToFloat(4.065),doubleToFloat(0.9472),doubleToFloat(-3.604),doubleToFloat(0.8767),doubleToFloat(3.05),doubleToFloat(-1.758),doubleToFloat(8.691),doubleToFloat(5.577),doubleToFloat(-2.262),doubleToFloat(6.373),doubleToFloat(5.581),doubleToFloat(-3.294),doubleToFloat(6.059),doubleToFloat(4.623),doubleToFloat(-0.399),doubleToFloat(6.676),doubleToFloat(6.474),doubleToFloat(-0.4575),doubleToFloat(6.102),doubleToFloat(6.257),doubleToFloat(-4.319),doubleToFloat(5.648),doubleToFloat(2.968),doubleToFloat(-3.466),doubleToFloat(6.008),doubleToFloat(4.323),doubleToFloat(-3.283),doubleToFloat(4.761),doubleToFloat(4.368),doubleToFloat(-3.412),doubleToFloat(4.589),doubleToFloat(4.067),doubleToFloat(-2.929),doubleToFloat(2.333),doubleToFloat(3.912),doubleToFloat(-4.051),doubleToFloat(3.807),doubleToFloat(3.029),doubleToFloat(-3.441),doubleToFloat(3.572),doubleToFloat(3.8),doubleToFloat(-4.08),doubleToFloat(3.511),doubleToFloat(3.48),doubleToFloat(-4.517),doubleToFloat(1.184),doubleToFloat(1.02),doubleToFloat(-4.336),doubleToFloat(1.672),doubleToFloat(2.022),doubleToFloat(-4.687),doubleToFloat(2.533),doubleToFloat(1.713),doubleToFloat(-4.949),doubleToFloat(5.063),doubleToFloat(2.328),doubleToFloat(-4.602),doubleToFloat(1.944),doubleToFloat(2.335),doubleToFloat(-4.853),doubleToFloat(3.587),doubleToFloat(2.483),doubleToFloat(-5.45),doubleToFloat(4.043),doubleToFloat(0.143),doubleToFloat(-3.623),doubleToFloat(5.362),doubleToFloat(3.673),doubleToFloat(-5.357),doubleToFloat(7.134),doubleToFloat(-0.5946),doubleToFloat(-6.261),doubleToFloat(1.61),doubleToFloat(-0.9085),doubleToFloat(-5.857),doubleToFloat(4.459),doubleToFloat(-0.7436),doubleToFloat(-5.641),doubleToFloat(4.313),doubleToFloat(-1.474),doubleToFloat(-5.556),doubleToFloat(0.8695),doubleToFloat(-3.16),doubleToFloat(-4.439),doubleToFloat(4.913),doubleToFloat(-5.151),doubleToFloat(-5.641),doubleToFloat(4.282),doubleToFloat(-2.723),doubleToFloat(-3.76),doubleToFloat(3.185),doubleToFloat(-4.668),doubleToFloat(-3.141),doubleToFloat(5.318),doubleToFloat(-6.483),doubleToFloat(-3.054),doubleToFloat(1.788),doubleToFloat(-6.582),doubleToFloat(-2.211),doubleToFloat(7.197),doubleToFloat(-6.117),doubleToFloat(-1.719),doubleToFloat(1.896),doubleToFloat(-8.02),doubleToFloat(-4.979),doubleToFloat(6.987),doubleToFloat(-2.571),doubleToFloat(-5.22),doubleToFloat(6.98),doubleToFloat(-1.672),doubleToFloat(-4.62),doubleToFloat(7.688),doubleToFloat(1.785),doubleToFloat(-2.709),doubleToFloat(9.748),doubleToFloat(3.871),doubleToFloat(-4.569),doubleToFloat(2.833),doubleToFloat(-4.822),doubleToFloat(-5.051),doubleToFloat(7.318),doubleToFloat(0.6887),doubleToFloat(-4.21),doubleToFloat(7.197),doubleToFloat(-4.781),doubleToFloat(-2.211),doubleToFloat(5.319),doubleToFloat(-6.765),doubleToFloat(-4.989),doubleToFloat(6.933),doubleToFloat(-2.001),doubleToFloat(-1.046),doubleToFloat(1.763),doubleToFloat(-5.545),doubleToFloat(-3.547),doubleToFloat(2.201),doubleToFloat(-4.229),doubleToFloat(-2.601),doubleToFloat(-0.6988),doubleToFloat(-6.611),doubleToFloat(-2.963),doubleToFloat(1.984),doubleToFloat(-4.882),doubleToFloat(-1.755),doubleToFloat(-1.263),doubleToFloat(-4.562),doubleToFloat(-4.203),doubleToFloat(2.309),doubleToFloat(-3.193),doubleToFloat(-3.941),doubleToFloat(-0.1316),doubleToFloat(-4.084),doubleToFloat(-1.258),doubleToFloat(0.6232),doubleToFloat(-3.199),doubleToFloat(-2.029),doubleToFloat(0.9145),doubleToFloat(-3.447),doubleToFloat(-0.8389),doubleToFloat(0.7626),doubleToFloat(-4.138),doubleToFloat(-3.405),doubleToFloat(1.671),doubleToFloat(-2.891),doubleToFloat(-4.159),doubleToFloat(1.793),doubleToFloat(-1.372),doubleToFloat(-3.261),doubleToFloat(8.323),doubleToFloat(4.331),doubleToFloat(-1.391),doubleToFloat(6.609),doubleToFloat(6.157),doubleToFloat(-2.489),doubleToFloat(4.625),doubleToFloat(5.274),doubleToFloat(0),doubleToFloat(11.63),doubleToFloat(1.862),doubleToFloat(2.211),doubleToFloat(11.36),doubleToFloat(1.862),doubleToFloat(0),doubleToFloat(11.51),doubleToFloat(-2.832),doubleToFloat(2.211),doubleToFloat(11.73),doubleToFloat(-0.6185),doubleToFloat(0),doubleToFloat(11.99),doubleToFloat(-0.6185),doubleToFloat(2.211),doubleToFloat(11.25),doubleToFloat(-2.832),doubleToFloat(-2.211),doubleToFloat(11.36),doubleToFloat(1.862),doubleToFloat(-2.211),doubleToFloat(11.73),doubleToFloat(-0.6185),doubleToFloat(-2.211),doubleToFloat(11.25),doubleToFloat(-2.832),doubleToFloat(0),doubleToFloat(11),doubleToFloat(3.537),doubleToFloat(-2.211),doubleToFloat(10.65),doubleToFloat(3.176),doubleToFloat(2.211),doubleToFloat(10.65),doubleToFloat(3.176),doubleToFloat(-4.225),doubleToFloat(10.06),doubleToFloat(-0.6185),doubleToFloat(-4.085),doubleToFloat(9.572),doubleToFloat(1.596),doubleToFloat(4.225),doubleToFloat(10.06),doubleToFloat(-0.6185),doubleToFloat(4.085),doubleToFloat(9.572),doubleToFloat(1.596),doubleToFloat(-4.259),doubleToFloat(8.46),doubleToFloat(-3.886),doubleToFloat(4.259),doubleToFloat(8.46),doubleToFloat(-3.886),doubleToFloat(-4.147),doubleToFloat(9.888),doubleToFloat(-2.496),doubleToFloat(4.147),doubleToFloat(9.888),doubleToFloat(-2.496),doubleToFloat(0),doubleToFloat(9.854),doubleToFloat(-5.5),doubleToFloat(-2.211),doubleToFloat(9.566),doubleToFloat(-5.329),doubleToFloat(2.211),doubleToFloat(9.566),doubleToFloat(-5.329),doubleToFloat(4.492),doubleToFloat(1.99),doubleToFloat(0.143),doubleToFloat(4.772),doubleToFloat(2.153),doubleToFloat(0.1371),doubleToFloat(4.972),doubleToFloat(4.581),doubleToFloat(0.343),doubleToFloat(5.135),doubleToFloat(3.976),doubleToFloat(-0.6884),doubleToFloat(5.058),doubleToFloat(2.911),doubleToFloat(-0.7058),doubleToFloat(4.507),doubleToFloat(4.043),doubleToFloat(0.143),doubleToFloat(4.117),doubleToFloat(3.624),doubleToFloat(1.674),doubleToFloat(0),doubleToFloat(-1.03),doubleToFloat(3.727),doubleToFloat(2.235),doubleToFloat(0.3183),doubleToFloat(3),doubleToFloat(1.116),doubleToFloat(-0.4984),doubleToFloat(3.255),doubleToFloat(1.945),doubleToFloat(1.28),doubleToFloat(4.102),doubleToFloat(0.9662),doubleToFloat(-0.055),doubleToFloat(3.949),doubleToFloat(0),doubleToFloat(3.651),doubleToFloat(5.101),doubleToFloat(3.676),doubleToFloat(4.367),doubleToFloat(2.97),doubleToFloat(0),doubleToFloat(4.104),doubleToFloat(5.73),doubleToFloat(3.427),doubleToFloat(3.238),doubleToFloat(3.006),doubleToFloat(0.5571),doubleToFloat(3.952),doubleToFloat(5.452),doubleToFloat(3.464),doubleToFloat(4.891),doubleToFloat(3.604),doubleToFloat(0.2332),doubleToFloat(3.651),doubleToFloat(5.101),doubleToFloat(1.876),doubleToFloat(4.481),doubleToFloat(5.063),doubleToFloat(1.426),doubleToFloat(3.897),doubleToFloat(4.75),doubleToFloat(1.876),doubleToFloat(4.376),doubleToFloat(5.003),doubleToFloat(1.94),doubleToFloat(4.073),doubleToFloat(4.627),doubleToFloat(0.9465),doubleToFloat(2.663),doubleToFloat(4.581),doubleToFloat(2.983),doubleToFloat(2.631),doubleToFloat(3.463),doubleToFloat(2.262),doubleToFloat(2.574),doubleToFloat(3.974),doubleToFloat(2.749),doubleToFloat(3.322),doubleToFloat(3.659),doubleToFloat(3.003),doubleToFloat(3.765),doubleToFloat(3.524),doubleToFloat(0.9307),doubleToFloat(3.594),doubleToFloat(4.772),doubleToFloat(1.209),doubleToFloat(3.377),doubleToFloat(4.582),doubleToFloat(2.878),doubleToFloat(3.435),doubleToFloat(3.574),doubleToFloat(2.7),doubleToFloat(4.202),doubleToFloat(4.085),doubleToFloat(2.204),doubleToFloat(1.933),doubleToFloat(4.119),doubleToFloat(0.8199),doubleToFloat(2.229),doubleToFloat(4.707),doubleToFloat(0),doubleToFloat(2.802),doubleToFloat(5.144),doubleToFloat(3.135),doubleToFloat(2.09),doubleToFloat(3.146),doubleToFloat(3.286),doubleToFloat(3.897),doubleToFloat(3.378),doubleToFloat(0.9901),doubleToFloat(4.195),doubleToFloat(5.324),doubleToFloat(0),doubleToFloat(1.146),doubleToFloat(5.23),doubleToFloat(0.13),doubleToFloat(1.146),doubleToFloat(5.229),doubleToFloat(0.4095),doubleToFloat(1.415),doubleToFloat(4.857),doubleToFloat(0),doubleToFloat(1.692),doubleToFloat(5.982),doubleToFloat(2.889),doubleToFloat(4.705),doubleToFloat(4.217),doubleToFloat(0),doubleToFloat(-0.9679),doubleToFloat(3.096),doubleToFloat(3.071),doubleToFloat(1.218),doubleToFloat(2.763),doubleToFloat(0),doubleToFloat(5.995),doubleToFloat(5.73),doubleToFloat(1.759),doubleToFloat(6.091),doubleToFloat(5.052),doubleToFloat(3.166),doubleToFloat(5.897),doubleToFloat(4.064),doubleToFloat(1.003),doubleToFloat(6.052),doubleToFloat(5.459),doubleToFloat(2.496),doubleToFloat(0.3932),doubleToFloat(1.674),doubleToFloat(1.283),doubleToFloat(-0.5664),doubleToFloat(2.512),doubleToFloat(1.871),doubleToFloat(0.0736),doubleToFloat(0.2553),doubleToFloat(3.872),doubleToFloat(2.799),doubleToFloat(2.123),doubleToFloat(0),doubleToFloat(8.901),doubleToFloat(5.08),doubleToFloat(1.758),doubleToFloat(9.206),doubleToFloat(4.633),doubleToFloat(3.415),doubleToFloat(7.335),doubleToFloat(3.545),doubleToFloat(4.24),doubleToFloat(5.051),doubleToFloat(2.557),doubleToFloat(1.464),doubleToFloat(0.5323),doubleToFloat(4.104),doubleToFloat(0),doubleToFloat(2.097),doubleToFloat(5.657),doubleToFloat(2.492),doubleToFloat(3.311),doubleToFloat(3.918),doubleToFloat(1.637),doubleToFloat(3.328),doubleToFloat(4.377),doubleToFloat(2.892),doubleToFloat(4.756),doubleToFloat(4.212),doubleToFloat(3.633),doubleToFloat(1.746),doubleToFloat(1.236),doubleToFloat(3.632),doubleToFloat(1.5),doubleToFloat(-0.3157),doubleToFloat(4.279),doubleToFloat(4.065),doubleToFloat(0.9472),doubleToFloat(3.176),doubleToFloat(1.093),doubleToFloat(-1.478),doubleToFloat(0),doubleToFloat(0.6573),doubleToFloat(4.697),doubleToFloat(0.2001),doubleToFloat(0.6573),doubleToFloat(4.697),doubleToFloat(0),doubleToFloat(-0.0579),doubleToFloat(4.322),doubleToFloat(0),doubleToFloat(0.278),doubleToFloat(4.702),doubleToFloat(0),doubleToFloat(0.8415),doubleToFloat(5.119),doubleToFloat(0.3637),doubleToFloat(0.8168),doubleToFloat(5.021),doubleToFloat(0.2001),doubleToFloat(0.8415),doubleToFloat(5.119),doubleToFloat(1.055),doubleToFloat(0.576),doubleToFloat(4.273),doubleToFloat(1.511),doubleToFloat(3.785),doubleToFloat(4.712),doubleToFloat(1.946),doubleToFloat(3.93),doubleToFloat(4.509),doubleToFloat(2.619),doubleToFloat(4.028),doubleToFloat(4.063),doubleToFloat(-4.492),doubleToFloat(1.99),doubleToFloat(0.143),doubleToFloat(-4.772),doubleToFloat(2.153),doubleToFloat(0.1371),doubleToFloat(-4.972),doubleToFloat(4.581),doubleToFloat(0.343),doubleToFloat(-5.135),doubleToFloat(3.976),doubleToFloat(-0.6884),doubleToFloat(-5.058),doubleToFloat(2.911),doubleToFloat(-0.7058),doubleToFloat(-4.507),doubleToFloat(4.043),doubleToFloat(0.143),doubleToFloat(-4.117),doubleToFloat(3.624),doubleToFloat(1.674),doubleToFloat(-2.235),doubleToFloat(0.3183),doubleToFloat(3),doubleToFloat(-1.116),doubleToFloat(-0.4984),doubleToFloat(3.255),doubleToFloat(-1.945),doubleToFloat(1.28),doubleToFloat(4.102),doubleToFloat(-0.9662),doubleToFloat(-0.055),doubleToFloat(3.949),doubleToFloat(-3.676),doubleToFloat(4.367),doubleToFloat(2.97),doubleToFloat(-3.427),doubleToFloat(3.238),doubleToFloat(3.006),doubleToFloat(-0.5571),doubleToFloat(3.952),doubleToFloat(5.452),doubleToFloat(-3.464),doubleToFloat(4.891),doubleToFloat(3.604),doubleToFloat(-0.2332),doubleToFloat(3.651),doubleToFloat(5.101),doubleToFloat(-1.876),doubleToFloat(4.481),doubleToFloat(5.063),doubleToFloat(-1.426),doubleToFloat(3.897),doubleToFloat(4.75),doubleToFloat(-1.876),doubleToFloat(4.376),doubleToFloat(5.003),doubleToFloat(-1.94),doubleToFloat(4.073),doubleToFloat(4.627),doubleToFloat(-0.9465),doubleToFloat(2.663),doubleToFloat(4.581),doubleToFloat(-2.983),doubleToFloat(2.631),doubleToFloat(3.463),doubleToFloat(-2.262),doubleToFloat(2.574),doubleToFloat(3.974),doubleToFloat(-2.749),doubleToFloat(3.322),doubleToFloat(3.659),doubleToFloat(-3.003),doubleToFloat(3.765),doubleToFloat(3.524),doubleToFloat(-0.9307),doubleToFloat(3.594),doubleToFloat(4.772),doubleToFloat(-1.209),doubleToFloat(3.377),doubleToFloat(4.582),doubleToFloat(-2.878),doubleToFloat(3.435),doubleToFloat(3.574),doubleToFloat(-2.7),doubleToFloat(4.202),doubleToFloat(4.085),doubleToFloat(-2.204),doubleToFloat(1.933),doubleToFloat(4.119),doubleToFloat(-0.8199),doubleToFloat(2.229),doubleToFloat(4.707),doubleToFloat(-3.135),doubleToFloat(2.09),doubleToFloat(3.146),doubleToFloat(-3.286),doubleToFloat(3.897),doubleToFloat(3.378),doubleToFloat(-0.9901),doubleToFloat(4.195),doubleToFloat(5.324),doubleToFloat(-0.13),doubleToFloat(1.146),doubleToFloat(5.229),doubleToFloat(-0.4095),doubleToFloat(1.415),doubleToFloat(4.857),doubleToFloat(-2.889),doubleToFloat(4.705),doubleToFloat(4.217),doubleToFloat(-3.071),doubleToFloat(1.218),doubleToFloat(2.763),doubleToFloat(-1.759),doubleToFloat(6.091),doubleToFloat(5.052),doubleToFloat(-3.166),doubleToFloat(5.897),doubleToFloat(4.064),doubleToFloat(-1.003),doubleToFloat(6.052),doubleToFloat(5.459),doubleToFloat(-2.496),doubleToFloat(0.3932),doubleToFloat(1.674),doubleToFloat(-1.283),doubleToFloat(-0.5664),doubleToFloat(2.512),doubleToFloat(-1.871),doubleToFloat(0.0736),doubleToFloat(0.2553),doubleToFloat(-3.872),doubleToFloat(2.799),doubleToFloat(2.123),doubleToFloat(-1.758),doubleToFloat(9.206),doubleToFloat(4.633),doubleToFloat(-3.415),doubleToFloat(7.335),doubleToFloat(3.545),doubleToFloat(-4.24),doubleToFloat(5.051),doubleToFloat(2.557),doubleToFloat(-1.464),doubleToFloat(0.5323),doubleToFloat(4.104),doubleToFloat(-2.492),doubleToFloat(3.311),doubleToFloat(3.918),doubleToFloat(-1.637),doubleToFloat(3.328),doubleToFloat(4.377),doubleToFloat(-2.892),doubleToFloat(4.756),doubleToFloat(4.212),doubleToFloat(-3.633),doubleToFloat(1.746),doubleToFloat(1.236),doubleToFloat(-3.632),doubleToFloat(1.5),doubleToFloat(-0.3157),doubleToFloat(-4.279),doubleToFloat(4.065),doubleToFloat(0.9472),doubleToFloat(-3.176),doubleToFloat(1.093),doubleToFloat(-1.478),doubleToFloat(-0.2001),doubleToFloat(0.6573),doubleToFloat(4.697),doubleToFloat(-0.3637),doubleToFloat(0.8168),doubleToFloat(5.021),doubleToFloat(-0.2001),doubleToFloat(0.8415),doubleToFloat(5.119),doubleToFloat(-1.055),doubleToFloat(0.576),doubleToFloat(4.273),doubleToFloat(-1.511),doubleToFloat(3.785),doubleToFloat(4.712),doubleToFloat(-1.946),doubleToFloat(3.93),doubleToFloat(4.509),doubleToFloat(-2.619),doubleToFloat(4.028),doubleToFloat(4.063),doubleToFloat(0),doubleToFloat(0.6559),doubleToFloat(4.853),doubleToFloat(0.2001),doubleToFloat(0.6559),doubleToFloat(4.853),doubleToFloat(-0.2001),doubleToFloat(0.6559),doubleToFloat(4.853),doubleToFloat(-1.864),doubleToFloat(0.045),doubleToFloat(-1.544),doubleToFloat(1.864),doubleToFloat(0.045),doubleToFloat(-1.544),doubleToFloat(0),doubleToFloat(-0.437),doubleToFloat(1.275),doubleToFloat(0.399),doubleToFloat(6.676),doubleToFloat(6.474),doubleToFloat(0.6921),doubleToFloat(4.509),doubleToFloat(6.046),doubleToFloat(0.6921),doubleToFloat(4.509),doubleToFloat(6.046),doubleToFloat(0.399),doubleToFloat(6.676),doubleToFloat(6.474),doubleToFloat(-0.6921),doubleToFloat(4.509),doubleToFloat(6.046),doubleToFloat(-0.399),doubleToFloat(6.676),doubleToFloat(6.474),doubleToFloat(-0.399),doubleToFloat(6.676),doubleToFloat(6.474),doubleToFloat(-0.6921),doubleToFloat(4.509),doubleToFloat(6.046),doubleToFloat(1.283),doubleToFloat(-0.5664),doubleToFloat(2.512),doubleToFloat(1.871),doubleToFloat(0.0736),doubleToFloat(0.2553),doubleToFloat(2.496),doubleToFloat(0.3932),doubleToFloat(1.674),doubleToFloat(1.283),doubleToFloat(-0.5664),doubleToFloat(2.512),doubleToFloat(4.222),doubleToFloat(2.176),doubleToFloat(-0.5181),doubleToFloat(5.046),doubleToFloat(2.447),doubleToFloat(-1.86),doubleToFloat(4.222),doubleToFloat(2.176),doubleToFloat(-0.5181),doubleToFloat(3.31),doubleToFloat(1.221),doubleToFloat(-2.134),doubleToFloat(-3.176),doubleToFloat(1.093),doubleToFloat(-1.478),doubleToFloat(-1.871),doubleToFloat(0.0736),doubleToFloat(0.2553),doubleToFloat(-1.283),doubleToFloat(-0.5664),doubleToFloat(2.512),doubleToFloat(-2.496),doubleToFloat(0.3932),doubleToFloat(1.674),doubleToFloat(-5.046),doubleToFloat(2.447),doubleToFloat(-1.86),doubleToFloat(-4.222),doubleToFloat(2.176),doubleToFloat(-0.5181),doubleToFloat(-3.31),doubleToFloat(1.221),doubleToFloat(-2.134),doubleToFloat(-4.222),doubleToFloat(2.176),doubleToFloat(-0.5181),doubleToFloat(5.046),doubleToFloat(2.447),doubleToFloat(-1.86),doubleToFloat(0.4575),doubleToFloat(6.102),doubleToFloat(6.257),doubleToFloat(0),doubleToFloat(6.861),doubleToFloat(6.511),doubleToFloat(-5.046),doubleToFloat(2.447),doubleToFloat(-1.86),doubleToFloat(-0.4575),doubleToFloat(6.102),doubleToFloat(6.257),doubleToFloat(4.507),doubleToFloat(4.043),doubleToFloat(0.143),doubleToFloat(3.176),doubleToFloat(1.093),doubleToFloat(-1.478),doubleToFloat(-4.507),doubleToFloat(4.043),doubleToFloat(0.143),doubleToFloat(-1.283),doubleToFloat(-0.5664),doubleToFloat(2.512),doubleToFloat(-3.176),doubleToFloat(1.093),doubleToFloat(-1.478),doubleToFloat(0),doubleToFloat(6.861),doubleToFloat(6.511),doubleToFloat(3.176),doubleToFloat(1.093),doubleToFloat(-1.478)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.9175),doubleToFloat(0.8974),doubleToFloat(0.9509),doubleToFloat(0.8981),doubleToFloat(0.9421),doubleToFloat(0.8701),doubleToFloat(0.924),doubleToFloat(0.8702),doubleToFloat(0.9824),doubleToFloat(0.8971),doubleToFloat(0.9824),doubleToFloat(0.8682),doubleToFloat(0.9541),doubleToFloat(0.8718),doubleToFloat(0.9147),doubleToFloat(0.8129),doubleToFloat(0.9437),doubleToFloat(0.8153),doubleToFloat(0.9638),doubleToFloat(0.8095),doubleToFloat(0.9824),doubleToFloat(0.809),doubleToFloat(0.9461),doubleToFloat(0.923),doubleToFloat(0.9071),doubleToFloat(0.9135),doubleToFloat(0.9824),doubleToFloat(0.9287),doubleToFloat(0.7343),doubleToFloat(0.9169),doubleToFloat(0.7616),doubleToFloat(0.9147),doubleToFloat(0.7553),doubleToFloat(0.8982),doubleToFloat(0.7343),doubleToFloat(0.8968),doubleToFloat(0.7739),doubleToFloat(0.9327),doubleToFloat(0.7343),doubleToFloat(0.9365),doubleToFloat(0.8187),doubleToFloat(0.8433),doubleToFloat(0.8348),doubleToFloat(0.9045),doubleToFloat(0.8324),doubleToFloat(0.8647),doubleToFloat(0.74),doubleToFloat(0.8745),doubleToFloat(0.761),doubleToFloat(0.8768),doubleToFloat(0.7497),doubleToFloat(0.8755),doubleToFloat(0.777),doubleToFloat(0.8787),doubleToFloat(0.7647),doubleToFloat(0.8593),doubleToFloat(0.7596),doubleToFloat(0.8565),doubleToFloat(0.7438),doubleToFloat(0.8546),doubleToFloat(0.7343),doubleToFloat(0.8756),doubleToFloat(0.7372),doubleToFloat(0.8736),doubleToFloat(0.7394),doubleToFloat(0.8706),doubleToFloat(0.7405),doubleToFloat(0.8536),doubleToFloat(0.7808),doubleToFloat(0.8802),doubleToFloat(0.7786),doubleToFloat(0.8666),doubleToFloat(0.7875),doubleToFloat(0.8787),doubleToFloat(0.7821),doubleToFloat(0.8667),doubleToFloat(0.7952),doubleToFloat(0.9076),doubleToFloat(0.8011),doubleToFloat(0.8823),doubleToFloat(0.7745),doubleToFloat(0.9003),doubleToFloat(0.7939),doubleToFloat(0.8518),doubleToFloat(0.7845),doubleToFloat(0.8549),doubleToFloat(0.7731),doubleToFloat(0.8049),doubleToFloat(0.7979),doubleToFloat(0.8609),doubleToFloat(0.8185),doubleToFloat(0.8054),doubleToFloat(0.8439),doubleToFloat(0.8655),doubleToFloat(0.8131),doubleToFloat(0.8741),doubleToFloat(0.786),doubleToFloat(0.7876),doubleToFloat(0.8107),doubleToFloat(0.8538),doubleToFloat(0.8058),doubleToFloat(0.8252),doubleToFloat(0.8096),doubleToFloat(0.8166),doubleToFloat(0.8589),doubleToFloat(0.7975),doubleToFloat(0.8767),doubleToFloat(0.8622),doubleToFloat(0.8568),doubleToFloat(0.8668),doubleToFloat(0.8669),doubleToFloat(0.8674),doubleToFloat(0.9208),doubleToFloat(0.8549),doubleToFloat(0.8792),doubleToFloat(0.7991),doubleToFloat(0.8835),doubleToFloat(0.8633),doubleToFloat(0.9139),doubleToFloat(0.8636),doubleToFloat(0.9513),doubleToFloat(0.84),doubleToFloat(0.9824),doubleToFloat(0.8358),doubleToFloat(0.8845),doubleToFloat(0.9021),doubleToFloat(0.888),doubleToFloat(0.931),doubleToFloat(0.8761),doubleToFloat(0.9036),doubleToFloat(0.8705),doubleToFloat(0.9018),doubleToFloat(0.8544),doubleToFloat(0.902),doubleToFloat(0.8538),doubleToFloat(0.9345),doubleToFloat(0.8173),doubleToFloat(0.9068),doubleToFloat(0.8156),doubleToFloat(0.9257),doubleToFloat(0.7753),doubleToFloat(0.9186),doubleToFloat(0.7832),doubleToFloat(0.9041),doubleToFloat(0.7338),doubleToFloat(0.8385),doubleToFloat(0.7279),doubleToFloat(0.8339),doubleToFloat(0.7208),doubleToFloat(0.8401),doubleToFloat(0.7397),doubleToFloat(0.7767),doubleToFloat(0.7338),doubleToFloat(0.7681),doubleToFloat(0.7338),doubleToFloat(0.7727),doubleToFloat(0.7192),doubleToFloat(0.8201),doubleToFloat(0.7171),doubleToFloat(0.8352),doubleToFloat(0.7139),doubleToFloat(0.8364),doubleToFloat(0.7127),doubleToFloat(0.8419),doubleToFloat(0.7175),doubleToFloat(0.832),doubleToFloat(0.7247),doubleToFloat(0.8312),doubleToFloat(0.7224),doubleToFloat(0.8292),doubleToFloat(0.7239),doubleToFloat(0.8169),doubleToFloat(0.7146),doubleToFloat(0.8334),doubleToFloat(0.7152),doubleToFloat(0.8309),doubleToFloat(0.753),doubleToFloat(0.7762),doubleToFloat(0.7452),doubleToFloat(0.772),doubleToFloat(0.7409),doubleToFloat(0.7703),doubleToFloat(0.756),doubleToFloat(0.7661),doubleToFloat(0.7502),doubleToFloat(0.7748),doubleToFloat(0.7102),doubleToFloat(0.837),doubleToFloat(0.7574),doubleToFloat(0.7798),doubleToFloat(0.7054),doubleToFloat(0.8378),doubleToFloat(0.7338),doubleToFloat(0.8253),doubleToFloat(0.7338),doubleToFloat(0.8299),doubleToFloat(0.7267),doubleToFloat(0.8275),doubleToFloat(0.7291),doubleToFloat(0.8283),doubleToFloat(0.7338),doubleToFloat(0.8254),doubleToFloat(0.7338),doubleToFloat(0.7682),doubleToFloat(0.7385),doubleToFloat(0.7711),doubleToFloat(0.7338),doubleToFloat(0.7628),doubleToFloat(0.7338),doubleToFloat(0.82),doubleToFloat(0.7437),doubleToFloat(0.7597),doubleToFloat(0.7429),doubleToFloat(0.774),doubleToFloat(0.7484),doubleToFloat(0.7629),doubleToFloat(0.7505),doubleToFloat(0.778),doubleToFloat(0.7116),doubleToFloat(0.8233),doubleToFloat(0.7622),doubleToFloat(0.7806),doubleToFloat(0.7576),doubleToFloat(0.779),doubleToFloat(0.763),doubleToFloat(0.7872),doubleToFloat(0.7046),doubleToFloat(0.8444),doubleToFloat(0.7572),doubleToFloat(0.7769),doubleToFloat(0.7524),doubleToFloat(0.7737),doubleToFloat(0.7104),doubleToFloat(0.8341),doubleToFloat(0.5511),doubleToFloat(0.8974),doubleToFloat(0.5402),doubleToFloat(0.8731),doubleToFloat(0.5264),doubleToFloat(0.883),doubleToFloat(0.5177),doubleToFloat(0.911),doubleToFloat(0.5145),doubleToFloat(0.8847),doubleToFloat(0.4862),doubleToFloat(0.8812),doubleToFloat(0.4862),doubleToFloat(0.91),doubleToFloat(0.5538),doubleToFloat(0.8129),doubleToFloat(0.5249),doubleToFloat(0.8282),doubleToFloat(0.5048),doubleToFloat(0.8225),doubleToFloat(0.4862),doubleToFloat(0.8219),doubleToFloat(0.5225),doubleToFloat(0.936),doubleToFloat(0.5615),doubleToFloat(0.9135),doubleToFloat(0.4862),doubleToFloat(0.9416),doubleToFloat(0.7132),doubleToFloat(0.8982),doubleToFloat(0.707),doubleToFloat(0.9147),doubleToFloat(0.6947),doubleToFloat(0.9327),doubleToFloat(0.6362),doubleToFloat(0.8647),doubleToFloat(0.6338),doubleToFloat(0.9045),doubleToFloat(0.6499),doubleToFloat(0.8433),doubleToFloat(0.7286),doubleToFloat(0.8745),doubleToFloat(0.7189),doubleToFloat(0.8755),doubleToFloat(0.7076),doubleToFloat(0.8768),doubleToFloat(0.7039),doubleToFloat(0.8593),doubleToFloat(0.6916),doubleToFloat(0.8787),doubleToFloat(0.7247),doubleToFloat(0.8546),doubleToFloat(0.709),doubleToFloat(0.8565),doubleToFloat(0.7314),doubleToFloat(0.8736),doubleToFloat(0.7292),doubleToFloat(0.8706),doubleToFloat(0.728),doubleToFloat(0.8536),doubleToFloat(0.69),doubleToFloat(0.8666),doubleToFloat(0.6878),doubleToFloat(0.8802),doubleToFloat(0.6865),doubleToFloat(0.8667),doubleToFloat(0.6811),doubleToFloat(0.8787),doubleToFloat(0.6675),doubleToFloat(0.8823),doubleToFloat(0.6734),doubleToFloat(0.9076),doubleToFloat(0.6941),doubleToFloat(0.9003),doubleToFloat(0.6841),doubleToFloat(0.8549),doubleToFloat(0.6747),doubleToFloat(0.8518),doubleToFloat(0.6955),doubleToFloat(0.8049),doubleToFloat(0.6707),doubleToFloat(0.8609),doubleToFloat(0.65),doubleToFloat(0.8054),doubleToFloat(0.6247),doubleToFloat(0.8655),doubleToFloat(0.6555),doubleToFloat(0.8741),doubleToFloat(0.6826),doubleToFloat(0.7876),doubleToFloat(0.6628),doubleToFloat(0.8252),doubleToFloat(0.6579),doubleToFloat(0.8538),doubleToFloat(0.659),doubleToFloat(0.8166),doubleToFloat(0.5919),doubleToFloat(0.8622),doubleToFloat(0.6097),doubleToFloat(0.7975),doubleToFloat(0.6017),doubleToFloat(0.8674),doubleToFloat(0.6119),doubleToFloat(0.8668),doubleToFloat(0.5894),doubleToFloat(0.7991),doubleToFloat(0.5477),doubleToFloat(0.8549),doubleToFloat(0.5851),doubleToFloat(0.8633),doubleToFloat(0.5547),doubleToFloat(0.8636),doubleToFloat(0.5173),doubleToFloat(0.8529),doubleToFloat(0.4862),doubleToFloat(0.8488),doubleToFloat(0.5841),doubleToFloat(0.9021),doubleToFloat(0.5806),doubleToFloat(0.931),doubleToFloat(0.5925),doubleToFloat(0.9036),doubleToFloat(0.5981),doubleToFloat(0.9018),doubleToFloat(0.6148),doubleToFloat(0.9345),doubleToFloat(0.6142),doubleToFloat(0.902),doubleToFloat(0.6513),doubleToFloat(0.9068),doubleToFloat(0.653),doubleToFloat(0.9257),doubleToFloat(0.6932),doubleToFloat(0.9186),doubleToFloat(0.6854),doubleToFloat(0.9041),doubleToFloat(0.7468),doubleToFloat(0.8401),doubleToFloat(0.7397),doubleToFloat(0.8339),doubleToFloat(0.7279),doubleToFloat(0.7767),doubleToFloat(0.7484),doubleToFloat(0.8201),doubleToFloat(0.7549),doubleToFloat(0.8419),doubleToFloat(0.7538),doubleToFloat(0.8364),doubleToFloat(0.7505),doubleToFloat(0.8352),doubleToFloat(0.7502),doubleToFloat(0.832),doubleToFloat(0.7452),doubleToFloat(0.8292),doubleToFloat(0.7429),doubleToFloat(0.8312),doubleToFloat(0.7437),doubleToFloat(0.8169),doubleToFloat(0.753),doubleToFloat(0.8334),doubleToFloat(0.7524),doubleToFloat(0.8309),doubleToFloat(0.7267),doubleToFloat(0.7703),doubleToFloat(0.7224),doubleToFloat(0.772),doubleToFloat(0.7146),doubleToFloat(0.7762),doubleToFloat(0.7175),doubleToFloat(0.7748),doubleToFloat(0.7116),doubleToFloat(0.7661),doubleToFloat(0.7574),doubleToFloat(0.837),doubleToFloat(0.7102),doubleToFloat(0.7798),doubleToFloat(0.7622),doubleToFloat(0.8378),doubleToFloat(0.7385),doubleToFloat(0.8283),doubleToFloat(0.7409),doubleToFloat(0.8275),doubleToFloat(0.7291),doubleToFloat(0.7711),doubleToFloat(0.7239),doubleToFloat(0.7597),doubleToFloat(0.7192),doubleToFloat(0.7629),doubleToFloat(0.7247),doubleToFloat(0.774),doubleToFloat(0.7171),doubleToFloat(0.778),doubleToFloat(0.756),doubleToFloat(0.8233),doubleToFloat(0.7046),doubleToFloat(0.7872),doubleToFloat(0.71),doubleToFloat(0.779),doubleToFloat(0.7054),doubleToFloat(0.7806),doubleToFloat(0.763),doubleToFloat(0.8444),doubleToFloat(0.7104),doubleToFloat(0.7769),doubleToFloat(0.7152),doubleToFloat(0.7737),doubleToFloat(0.7572),doubleToFloat(0.8341),doubleToFloat(0.7881),doubleToFloat(0.9479),doubleToFloat(0.7343),doubleToFloat(0.9577),doubleToFloat(0.8497),doubleToFloat(0.9637),doubleToFloat(0.9158),doubleToFloat(0.9539),doubleToFloat(0.7343),doubleToFloat(0.9872),doubleToFloat(0.9824),doubleToFloat(0.9663),doubleToFloat(0.6805),doubleToFloat(0.9479),doubleToFloat(0.6189),doubleToFloat(0.9637),doubleToFloat(0.5528),doubleToFloat(0.9539),doubleToFloat(0.4862),doubleToFloat(0.9793),doubleToFloat(0.4275),doubleToFloat(0.6313),doubleToFloat(0.4434),doubleToFloat(0.6401),doubleToFloat(0.4526),doubleToFloat(0.6369),doubleToFloat(0.431),doubleToFloat(0.6421),doubleToFloat(0.4397),doubleToFloat(0.644),doubleToFloat(0.4398),doubleToFloat(0.6453),doubleToFloat(0.4381),doubleToFloat(0.6647),doubleToFloat(0.4333),doubleToFloat(0.6605),doubleToFloat(0.4397),doubleToFloat(0.6604),doubleToFloat(0.4463),doubleToFloat(0.6598),doubleToFloat(0.4465),doubleToFloat(0.6514),doubleToFloat(0.424),doubleToFloat(0.6505),doubleToFloat(0.4275),doubleToFloat(0.657),doubleToFloat(0.4205),doubleToFloat(0.6684),doubleToFloat(0.4189),doubleToFloat(0.6379),doubleToFloat(0.4388),doubleToFloat(0.6288),doubleToFloat(0.4209),doubleToFloat(0.6237),doubleToFloat(0.3384),doubleToFloat(0.9887),doubleToFloat(0.2979),doubleToFloat(0.9448),doubleToFloat(0.2441),doubleToFloat(0.9417),doubleToFloat(0.2441),doubleToFloat(0.9723),doubleToFloat(0.445),doubleToFloat(0.6455),doubleToFloat(0.4531),doubleToFloat(0.6286),doubleToFloat(0.3384),doubleToFloat(0.9469),doubleToFloat(0.414),doubleToFloat(0.9365),doubleToFloat(0.4578),doubleToFloat(0.6379),doubleToFloat(0.417),doubleToFloat(0.6307),doubleToFloat(0.415),doubleToFloat(0.6242),doubleToFloat(0.2959),doubleToFloat(0.626),doubleToFloat(0.3051),doubleToFloat(0.6166),doubleToFloat(0.258),doubleToFloat(0.6076),doubleToFloat(0.2606),doubleToFloat(0.6259),doubleToFloat(0.2511),doubleToFloat(0.6816),doubleToFloat(0.2548),doubleToFloat(0.6653),doubleToFloat(0.2441),doubleToFloat(0.6653),doubleToFloat(0.2441),doubleToFloat(0.6816),doubleToFloat(0.2661),doubleToFloat(0.696),doubleToFloat(0.2636),doubleToFloat(0.664),doubleToFloat(0.3484),doubleToFloat(0.6888),doubleToFloat(0.3007),doubleToFloat(0.651),doubleToFloat(0.2881),doubleToFloat(0.7397),doubleToFloat(0.3623),doubleToFloat(0.7239),doubleToFloat(0.4164),doubleToFloat(0.6206),doubleToFloat(0.4307),doubleToFloat(0.6247),doubleToFloat(0.4116),doubleToFloat(0.6201),doubleToFloat(0.4088),doubleToFloat(0.6855),doubleToFloat(0.4123),doubleToFloat(0.7323),doubleToFloat(0.4518),doubleToFloat(0.7703),doubleToFloat(0.364),doubleToFloat(0.6372),doubleToFloat(0.2441),doubleToFloat(0.7326),doubleToFloat(0.2496),doubleToFloat(0.7705),doubleToFloat(0.2441),doubleToFloat(0.7109),doubleToFloat(0.2441),doubleToFloat(0.7705),doubleToFloat(0.2441),doubleToFloat(0.816),doubleToFloat(0.2441),doubleToFloat(0.8403),doubleToFloat(0.274),doubleToFloat(0.8322),doubleToFloat(0.2566),doubleToFloat(0.816),doubleToFloat(0.2949),doubleToFloat(0.763),doubleToFloat(0.3447),doubleToFloat(0.8549),doubleToFloat(0.3206),doubleToFloat(0.8292),doubleToFloat(0.4279),doubleToFloat(0.7939),doubleToFloat(0.4413),doubleToFloat(0.8544),doubleToFloat(0.3889),doubleToFloat(0.8456),doubleToFloat(0.3991),doubleToFloat(0.8726),doubleToFloat(0.4299),doubleToFloat(0.8825),doubleToFloat(0.3482),doubleToFloat(0.8386),doubleToFloat(0.4041),doubleToFloat(0.7613),doubleToFloat(0.3654),doubleToFloat(0.7582),doubleToFloat(0.3778),doubleToFloat(0.7978),doubleToFloat(0.3319),doubleToFloat(0.7987),doubleToFloat(0.3916),doubleToFloat(0.7984),doubleToFloat(0.2943),doubleToFloat(0.815),doubleToFloat(0.3252),doubleToFloat(0.8232),doubleToFloat(0.3846),doubleToFloat(0.8362),doubleToFloat(0.4052),doubleToFloat(0.8221),doubleToFloat(0.3485),doubleToFloat(0.831),doubleToFloat(0.309),doubleToFloat(0.8013),doubleToFloat(0.3985),doubleToFloat(0.8044),doubleToFloat(0.2937),doubleToFloat(0.8109),doubleToFloat(0.4204),doubleToFloat(0.8292),doubleToFloat(0.3447),doubleToFloat(0.8606),doubleToFloat(0.2972),doubleToFloat(0.8452),doubleToFloat(0.4715),doubleToFloat(0.8911),doubleToFloat(0.431),doubleToFloat(0.9594),doubleToFloat(0.4671),doubleToFloat(0.6302),doubleToFloat(0.4663),doubleToFloat(0.6332),doubleToFloat(0.3226),doubleToFloat(0.6487),doubleToFloat(0.3993),doubleToFloat(0.8753),doubleToFloat(0.2441),doubleToFloat(0.6554),doubleToFloat(0.2548),doubleToFloat(0.6554),doubleToFloat(0.2557),doubleToFloat(0.6351),doubleToFloat(0.4557),doubleToFloat(0.6477),doubleToFloat(0.1498),doubleToFloat(0.9887),doubleToFloat(0.1903),doubleToFloat(0.9448),doubleToFloat(0.1498),doubleToFloat(0.9469),doubleToFloat(0.0742),doubleToFloat(0.9365),doubleToFloat(0.2323),doubleToFloat(0.6076),doubleToFloat(0.1853),doubleToFloat(0.6166),doubleToFloat(0.1923),doubleToFloat(0.626),doubleToFloat(0.2275),doubleToFloat(0.6259),doubleToFloat(0.2371),doubleToFloat(0.6816),doubleToFloat(0.2334),doubleToFloat(0.6653),doubleToFloat(0.2246),doubleToFloat(0.664),doubleToFloat(0.2221),doubleToFloat(0.696),doubleToFloat(0.1875),doubleToFloat(0.651),doubleToFloat(0.1398),doubleToFloat(0.6888),doubleToFloat(0.1258),doubleToFloat(0.7239),doubleToFloat(0.2001),doubleToFloat(0.7397),doubleToFloat(0.0364),doubleToFloat(0.7703),doubleToFloat(0.0759),doubleToFloat(0.7323),doubleToFloat(0.0794),doubleToFloat(0.6855),doubleToFloat(0.1242),doubleToFloat(0.6372),doubleToFloat(0.2386),doubleToFloat(0.7705),doubleToFloat(0.2316),doubleToFloat(0.816),doubleToFloat(0.2142),doubleToFloat(0.8322),doubleToFloat(0.1933),doubleToFloat(0.763),doubleToFloat(0.1676),doubleToFloat(0.8292),doubleToFloat(0.1435),doubleToFloat(0.8549),doubleToFloat(0.0602),doubleToFloat(0.7939),doubleToFloat(0.0469),doubleToFloat(0.8544),doubleToFloat(0.0583),doubleToFloat(0.8825),doubleToFloat(0.0891),doubleToFloat(0.8726),doubleToFloat(0.0992),doubleToFloat(0.8456),doubleToFloat(0.14),doubleToFloat(0.8386),doubleToFloat(0.084),doubleToFloat(0.7613),doubleToFloat(0.1228),doubleToFloat(0.7582),doubleToFloat(0.1104),doubleToFloat(0.7978),doubleToFloat(0.1563),doubleToFloat(0.7987),doubleToFloat(0.0966),doubleToFloat(0.7984),doubleToFloat(0.163),doubleToFloat(0.8232),doubleToFloat(0.1939),doubleToFloat(0.815),doubleToFloat(0.083),doubleToFloat(0.8221),doubleToFloat(0.1036),doubleToFloat(0.8362),doubleToFloat(0.1397),doubleToFloat(0.831),doubleToFloat(0.1792),doubleToFloat(0.8013),doubleToFloat(0.0897),doubleToFloat(0.8044),doubleToFloat(0.1944),doubleToFloat(0.8109),doubleToFloat(0.0678),doubleToFloat(0.8292),doubleToFloat(0.1435),doubleToFloat(0.8606),doubleToFloat(0.191),doubleToFloat(0.8452),doubleToFloat(0.0166),doubleToFloat(0.8911),doubleToFloat(0.0646),doubleToFloat(0.9594),doubleToFloat(0.1656),doubleToFloat(0.6487),doubleToFloat(0.0889),doubleToFloat(0.8753),doubleToFloat(0.2325),doubleToFloat(0.6351),doubleToFloat(0.2334),doubleToFloat(0.6554),doubleToFloat(0.2548),doubleToFloat(0.6553),doubleToFloat(0.2441),doubleToFloat(0.6553),doubleToFloat(0.2334),doubleToFloat(0.6553),doubleToFloat(0.4168),doubleToFloat(0.6329),doubleToFloat(0.3796),doubleToFloat(0.63),doubleToFloat(0.3997),doubleToFloat(0.6541),doubleToFloat(0.4337),doubleToFloat(0.6769),doubleToFloat(0.4455),doubleToFloat(0.6497),doubleToFloat(0.4293),doubleToFloat(0.6072)], Java.type("float[]"))))))))))))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_humanoid_root"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_sacroiliac"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_skullbase"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_vl5"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_l_elbow"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_r_elbow"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_l_hip"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_r_hip"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_l_knee"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_r_knee"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_l_metatarsophalangeal_2"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_r_metatarsophalangeal_2"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_l_radiocarpal"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_r_radiocarpal"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_l_shoulder"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_r_shoulder"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_l_talocrural"))
          .addJoints(new HAnimJoint("hanim_Chul").setContainerFieldOverride("joints").setUSE("hanim_r_talocrural"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_l5"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_pelvis"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_sacrum"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_skull"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_l_calf"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_r_calf"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_l_carpal"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_r_carpal"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_l_forearm"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_r_forearm"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_l_talus"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_r_talus"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_l_tarsal_proximal_phalanx_2"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_r_tarsal_proximal_phalanx_2"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_l_thigh"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_r_thigh"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_l_upperarm"))
          .addSegments(new HAnimSegment("hanim_Chul").setContainerFieldOverride("segments").setUSE("hanim_r_upperarm"))))      ;
    X3D0.toFileX3D("../data/KoreanCharacter02Chul.new.graal.x3d");
    X3D0.toFileJSON("../data/KoreanCharacter02Chul.new.graal.json");
