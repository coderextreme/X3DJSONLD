CommentsBlock = Java.type("org.web3d.x3d.jsail.Core.CommentsBlock")
AcousticProperties = Java.type('org.web3d.x3d.jsail.Shape.AcousticProperties')
Analyser = Java.type('org.web3d.x3d.jsail.Sound.Analyser')
Anchor = Java.type('org.web3d.x3d.jsail.Networking.Anchor')
Appearance = Java.type('org.web3d.x3d.jsail.Shape.Appearance')
Arc2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Arc2D')
ArcClose2D = Java.type('org.web3d.x3d.jsail.Geometry2D.ArcClose2D')
AudioClip = Java.type('org.web3d.x3d.jsail.Sound.AudioClip')
AudioDestination = Java.type('org.web3d.x3d.jsail.Sound.AudioDestination')
Background = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.Background')
BallJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.BallJoint')
Billboard = Java.type('org.web3d.x3d.jsail.Navigation.Billboard')
BiquadFilter = Java.type('org.web3d.x3d.jsail.Sound.BiquadFilter')
BlendedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.BlendedVolumeStyle')
BooleanFilter = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanFilter')
BooleanSequencer = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanSequencer')
BooleanToggle = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanToggle')
BooleanTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanTrigger')
BoundaryEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.BoundaryEnhancementVolumeStyle')
BoundedPhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.BoundedPhysicsModel')
Box = Java.type('org.web3d.x3d.jsail.Geometry3D.Box')
BufferAudioSource = Java.type('org.web3d.x3d.jsail.Sound.BufferAudioSource')
CADAssembly = Java.type('org.web3d.x3d.jsail.CADGeometry.CADAssembly')
CADFace = Java.type('org.web3d.x3d.jsail.CADGeometry.CADFace')
CADLayer = Java.type('org.web3d.x3d.jsail.CADGeometry.CADLayer')
CADPart = Java.type('org.web3d.x3d.jsail.CADGeometry.CADPart')
CartoonVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.CartoonVolumeStyle')
ChannelMerger = Java.type('org.web3d.x3d.jsail.Sound.ChannelMerger')
ChannelSelector = Java.type('org.web3d.x3d.jsail.Sound.ChannelSelector')
ChannelSplitter = Java.type('org.web3d.x3d.jsail.Sound.ChannelSplitter')
Circle2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Circle2D')
ClipPlane = Java.type('org.web3d.x3d.jsail.Rendering.ClipPlane')
CollidableOffset = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollidableOffset')
CollidableShape = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollidableShape')
Collision = Java.type('org.web3d.x3d.jsail.Navigation.Collision')
CollisionCollection = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionCollection')
CollisionSensor = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSensor')
CollisionSpace = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSpace')
Color = Java.type('org.web3d.x3d.jsail.Rendering.Color')
ColorChaser = Java.type('org.web3d.x3d.jsail.Followers.ColorChaser')
ColorDamper = Java.type('org.web3d.x3d.jsail.Followers.ColorDamper')
ColorInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.ColorInterpolator')
ColorRGBA = Java.type('org.web3d.x3d.jsail.Rendering.ColorRGBA')
ComposedCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.ComposedCubeMapTexture')
ComposedShader = Java.type('org.web3d.x3d.jsail.Shaders.ComposedShader')
ComposedTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.ComposedTexture3D')
ComposedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ComposedVolumeStyle')
Cone = Java.type('org.web3d.x3d.jsail.Geometry3D.Cone')
ConeEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.ConeEmitter')
Contact = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.Contact')
Contour2D = Java.type('org.web3d.x3d.jsail.NURBS.Contour2D')
ContourPolyline2D = Java.type('org.web3d.x3d.jsail.NURBS.ContourPolyline2D')
Convolver = Java.type('org.web3d.x3d.jsail.Sound.Convolver')
Coordinate = Java.type('org.web3d.x3d.jsail.Rendering.Coordinate')
CoordinateChaser = Java.type('org.web3d.x3d.jsail.Followers.CoordinateChaser')
CoordinateDamper = Java.type('org.web3d.x3d.jsail.Followers.CoordinateDamper')
CoordinateDouble = Java.type('org.web3d.x3d.jsail.Rendering.CoordinateDouble')
CoordinateInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator')
CoordinateInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator2D')
Cylinder = Java.type('org.web3d.x3d.jsail.Geometry3D.Cylinder')
CylinderSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.CylinderSensor')
Delay = Java.type('org.web3d.x3d.jsail.Sound.Delay')
DirectionalLight = Java.type('org.web3d.x3d.jsail.Lighting.DirectionalLight')
DISEntityManager = Java.type('org.web3d.x3d.jsail.DIS.DISEntityManager')
DISEntityTypeMapping = Java.type('org.web3d.x3d.jsail.DIS.DISEntityTypeMapping')
Disk2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Disk2D')
DoubleAxisHingeJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.DoubleAxisHingeJoint')
DynamicsCompressor = Java.type('org.web3d.x3d.jsail.Sound.DynamicsCompressor')
EaseInEaseOut = Java.type('org.web3d.x3d.jsail.Interpolation.EaseInEaseOut')
EdgeEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.EdgeEnhancementVolumeStyle')
ElevationGrid = Java.type('org.web3d.x3d.jsail.Geometry3D.ElevationGrid')
EspduTransform = Java.type('org.web3d.x3d.jsail.DIS.EspduTransform')
ExplosionEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.ExplosionEmitter')
Extrusion = Java.type('org.web3d.x3d.jsail.Geometry3D.Extrusion')
FillProperties = Java.type('org.web3d.x3d.jsail.Shape.FillProperties')
FloatVertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.FloatVertexAttribute')
Fog = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.Fog')
FogCoordinate = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.FogCoordinate')
FontStyle = Java.type('org.web3d.x3d.jsail.Text.FontStyle')
ForcePhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.ForcePhysicsModel')
Gain = Java.type('org.web3d.x3d.jsail.Sound.Gain')
GeneratedCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.GeneratedCubeMapTexture')
GeoCoordinate = Java.type('org.web3d.x3d.jsail.Geospatial.GeoCoordinate')
GeoElevationGrid = Java.type('org.web3d.x3d.jsail.Geospatial.GeoElevationGrid')
GeoLocation = Java.type('org.web3d.x3d.jsail.Geospatial.GeoLocation')
GeoLOD = Java.type('org.web3d.x3d.jsail.Geospatial.GeoLOD')
GeoMetadata = Java.type('org.web3d.x3d.jsail.Geospatial.GeoMetadata')
GeoOrigin = Java.type('org.web3d.x3d.jsail.Geospatial.GeoOrigin')
GeoPositionInterpolator = Java.type('org.web3d.x3d.jsail.Geospatial.GeoPositionInterpolator')
GeoProximitySensor = Java.type('org.web3d.x3d.jsail.Geospatial.GeoProximitySensor')
GeoTouchSensor = Java.type('org.web3d.x3d.jsail.Geospatial.GeoTouchSensor')
GeoTransform = Java.type('org.web3d.x3d.jsail.Geospatial.GeoTransform')
GeoViewpoint = Java.type('org.web3d.x3d.jsail.Geospatial.GeoViewpoint')
Group = Java.type('org.web3d.x3d.jsail.Grouping.Group')
HAnimDisplacer = Java.type('org.web3d.x3d.jsail.HAnim.HAnimDisplacer')
HAnimHumanoid = Java.type('org.web3d.x3d.jsail.HAnim.HAnimHumanoid')
HAnimJoint = Java.type('org.web3d.x3d.jsail.HAnim.HAnimJoint')
HAnimMotion = Java.type('org.web3d.x3d.jsail.HAnim.HAnimMotion')
HAnimSegment = Java.type('org.web3d.x3d.jsail.HAnim.HAnimSegment')
HAnimSite = Java.type('org.web3d.x3d.jsail.HAnim.HAnimSite')
ImageCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.ImageCubeMapTexture')
ImageTexture = Java.type('org.web3d.x3d.jsail.Texturing.ImageTexture')
ImageTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.ImageTexture3D')
IndexedFaceSet = Java.type('org.web3d.x3d.jsail.Geometry3D.IndexedFaceSet')
IndexedLineSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedLineSet')
IndexedQuadSet = Java.type('org.web3d.x3d.jsail.CADGeometry.IndexedQuadSet')
IndexedTriangleFanSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleFanSet')
IndexedTriangleSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleSet')
IndexedTriangleStripSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleStripSet')
Inline = Java.type('org.web3d.x3d.jsail.Networking.Inline')
IntegerSequencer = Java.type('org.web3d.x3d.jsail.EventUtilities.IntegerSequencer')
IntegerTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.IntegerTrigger')
IsoSurfaceVolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.IsoSurfaceVolumeData')
KeySensor = Java.type('org.web3d.x3d.jsail.KeyDeviceSensor.KeySensor')
Layer = Java.type('org.web3d.x3d.jsail.Layering.Layer')
LayerSet = Java.type('org.web3d.x3d.jsail.Layering.LayerSet')
Layout = Java.type('org.web3d.x3d.jsail.Layout.Layout')
LayoutGroup = Java.type('org.web3d.x3d.jsail.Layout.LayoutGroup')
LayoutLayer = Java.type('org.web3d.x3d.jsail.Layout.LayoutLayer')
LinePickSensor = Java.type('org.web3d.x3d.jsail.Picking.LinePickSensor')
LineProperties = Java.type('org.web3d.x3d.jsail.Shape.LineProperties')
LineSet = Java.type('org.web3d.x3d.jsail.Rendering.LineSet')
ListenerPointSource = Java.type('org.web3d.x3d.jsail.Sound.ListenerPointSource')
LoadSensor = Java.type('org.web3d.x3d.jsail.Networking.LoadSensor')
LocalFog = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.LocalFog')
LOD = Java.type('org.web3d.x3d.jsail.Navigation.LOD')
Material = Java.type('org.web3d.x3d.jsail.Shape.Material')
Matrix3VertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.Matrix3VertexAttribute')
Matrix4VertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.Matrix4VertexAttribute')
MetadataBoolean = Java.type('org.web3d.x3d.jsail.Core.MetadataBoolean')
MetadataDouble = Java.type('org.web3d.x3d.jsail.Core.MetadataDouble')
MetadataFloat = Java.type('org.web3d.x3d.jsail.Core.MetadataFloat')
MetadataInteger = Java.type('org.web3d.x3d.jsail.Core.MetadataInteger')
MetadataSet = Java.type('org.web3d.x3d.jsail.Core.MetadataSet')
MetadataString = Java.type('org.web3d.x3d.jsail.Core.MetadataString')
MicrophoneSource = Java.type('org.web3d.x3d.jsail.Sound.MicrophoneSource')
MotorJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.MotorJoint')
MovieTexture = Java.type('org.web3d.x3d.jsail.Texturing.MovieTexture')
MultiTexture = Java.type('org.web3d.x3d.jsail.Texturing.MultiTexture')
MultiTextureCoordinate = Java.type('org.web3d.x3d.jsail.Texturing.MultiTextureCoordinate')
MultiTextureTransform = Java.type('org.web3d.x3d.jsail.Texturing.MultiTextureTransform')
NavigationInfo = Java.type('org.web3d.x3d.jsail.Navigation.NavigationInfo')
Normal = Java.type('org.web3d.x3d.jsail.Rendering.Normal')
NormalInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.NormalInterpolator')
NurbsCurve = Java.type('org.web3d.x3d.jsail.NURBS.NurbsCurve')
NurbsCurve2D = Java.type('org.web3d.x3d.jsail.NURBS.NurbsCurve2D')
NurbsOrientationInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsOrientationInterpolator')
NurbsPatchSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsPatchSurface')
NurbsPositionInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsPositionInterpolator')
NurbsSet = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSet')
NurbsSurfaceInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSurfaceInterpolator')
NurbsSweptSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSweptSurface')
NurbsSwungSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSwungSurface')
NurbsTextureCoordinate = Java.type('org.web3d.x3d.jsail.NURBS.NurbsTextureCoordinate')
NurbsTrimmedSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsTrimmedSurface')
OpacityMapVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.OpacityMapVolumeStyle')
OrientationChaser = Java.type('org.web3d.x3d.jsail.Followers.OrientationChaser')
OrientationDamper = Java.type('org.web3d.x3d.jsail.Followers.OrientationDamper')
OrientationInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.OrientationInterpolator')
OrthoViewpoint = Java.type('org.web3d.x3d.jsail.Navigation.OrthoViewpoint')
OscillatorSource = Java.type('org.web3d.x3d.jsail.Sound.OscillatorSource')
PackagedShader = Java.type('org.web3d.x3d.jsail.Shaders.PackagedShader')
ParticleSystem = Java.type('org.web3d.x3d.jsail.ParticleSystems.ParticleSystem')
PeriodicWave = Java.type('org.web3d.x3d.jsail.Sound.PeriodicWave')
PhysicalMaterial = Java.type('org.web3d.x3d.jsail.Shape.PhysicalMaterial')
PickableGroup = Java.type('org.web3d.x3d.jsail.Picking.PickableGroup')
PixelTexture = Java.type('org.web3d.x3d.jsail.Texturing.PixelTexture')
PixelTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.PixelTexture3D')
PlaneSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.PlaneSensor')
PointEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.PointEmitter')
PointLight = Java.type('org.web3d.x3d.jsail.Lighting.PointLight')
PointPickSensor = Java.type('org.web3d.x3d.jsail.Picking.PointPickSensor')
PointProperties = Java.type('org.web3d.x3d.jsail.Shape.PointProperties')
PointSet = Java.type('org.web3d.x3d.jsail.Rendering.PointSet')
Polyline2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Polyline2D')
PolylineEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.PolylineEmitter')
Polypoint2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Polypoint2D')
PositionChaser = Java.type('org.web3d.x3d.jsail.Followers.PositionChaser')
PositionChaser2D = Java.type('org.web3d.x3d.jsail.Followers.PositionChaser2D')
PositionDamper = Java.type('org.web3d.x3d.jsail.Followers.PositionDamper')
PositionDamper2D = Java.type('org.web3d.x3d.jsail.Followers.PositionDamper2D')
PositionInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.PositionInterpolator')
PositionInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.PositionInterpolator2D')
PrimitivePickSensor = Java.type('org.web3d.x3d.jsail.Picking.PrimitivePickSensor')
ProgramShader = Java.type('org.web3d.x3d.jsail.Shaders.ProgramShader')
ProjectionVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ProjectionVolumeStyle')
ProtoInstance = Java.type('org.web3d.x3d.jsail.Core.ProtoInstance')
ProximitySensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.ProximitySensor')
QuadSet = Java.type('org.web3d.x3d.jsail.CADGeometry.QuadSet')
ReceiverPdu = Java.type('org.web3d.x3d.jsail.DIS.ReceiverPdu')
Rectangle2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Rectangle2D')
RigidBody = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.RigidBody')
RigidBodyCollection = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.RigidBodyCollection')
ScalarChaser = Java.type('org.web3d.x3d.jsail.Followers.ScalarChaser')
ScalarDamper = Java.type('org.web3d.x3d.jsail.Followers.ScalarDamper')
ScalarInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.ScalarInterpolator')
ScreenFontStyle = Java.type('org.web3d.x3d.jsail.Layout.ScreenFontStyle')
ScreenGroup = Java.type('org.web3d.x3d.jsail.Layout.ScreenGroup')
Script = Java.type('org.web3d.x3d.jsail.Scripting.Script')
SegmentedVolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.SegmentedVolumeData')
ShadedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ShadedVolumeStyle')
ShaderPart = Java.type('org.web3d.x3d.jsail.Shaders.ShaderPart')
ShaderProgram = Java.type('org.web3d.x3d.jsail.Shaders.ShaderProgram')
Shape = Java.type('org.web3d.x3d.jsail.Shape.Shape')
SignalPdu = Java.type('org.web3d.x3d.jsail.DIS.SignalPdu')
SilhouetteEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.SilhouetteEnhancementVolumeStyle')
SingleAxisHingeJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.SingleAxisHingeJoint')
SliderJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.SliderJoint')
Sound = Java.type('org.web3d.x3d.jsail.Sound.Sound')
SpatialSound = Java.type('org.web3d.x3d.jsail.Sound.SpatialSound')
Sphere = Java.type('org.web3d.x3d.jsail.Geometry3D.Sphere')
SphereSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.SphereSensor')
SplinePositionInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator')
SplinePositionInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator2D')
SplineScalarInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SplineScalarInterpolator')
SpotLight = Java.type('org.web3d.x3d.jsail.Lighting.SpotLight')
SquadOrientationInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SquadOrientationInterpolator')
StaticGroup = Java.type('org.web3d.x3d.jsail.Grouping.StaticGroup')
StreamAudioDestination = Java.type('org.web3d.x3d.jsail.Sound.StreamAudioDestination')
StreamAudioSource = Java.type('org.web3d.x3d.jsail.Sound.StreamAudioSource')
StringSensor = Java.type('org.web3d.x3d.jsail.KeyDeviceSensor.StringSensor')
SurfaceEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.SurfaceEmitter')
Switch = Java.type('org.web3d.x3d.jsail.Grouping.Switch')
TexCoordChaser2D = Java.type('org.web3d.x3d.jsail.Followers.TexCoordChaser2D')
TexCoordDamper2D = Java.type('org.web3d.x3d.jsail.Followers.TexCoordDamper2D')
Text = Java.type('org.web3d.x3d.jsail.Text.Text')
TextureBackground = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.TextureBackground')
TextureCoordinate = Java.type('org.web3d.x3d.jsail.Texturing.TextureCoordinate')
TextureCoordinate3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureCoordinate3D')
TextureCoordinate4D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureCoordinate4D')
TextureCoordinateGenerator = Java.type('org.web3d.x3d.jsail.Texturing.TextureCoordinateGenerator')
TextureProjector = Java.type('org.web3d.x3d.jsail.TextureProjection.TextureProjector')
TextureProjectorParallel = Java.type('org.web3d.x3d.jsail.TextureProjection.TextureProjectorParallel')
TextureProperties = Java.type('org.web3d.x3d.jsail.Texturing.TextureProperties')
TextureTransform = Java.type('org.web3d.x3d.jsail.Texturing.TextureTransform')
TextureTransform3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureTransform3D')
TextureTransformMatrix3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureTransformMatrix3D')
TimeSensor = Java.type('org.web3d.x3d.jsail.Time.TimeSensor')
TimeTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.TimeTrigger')
ToneMappedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ToneMappedVolumeStyle')
TouchSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.TouchSensor')
Transform = Java.type('org.web3d.x3d.jsail.Grouping.Transform')
TransformSensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.TransformSensor')
TransmitterPdu = Java.type('org.web3d.x3d.jsail.DIS.TransmitterPdu')
TriangleFanSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleFanSet')
TriangleSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleSet')
TriangleSet2D = Java.type('org.web3d.x3d.jsail.Geometry2D.TriangleSet2D')
TriangleStripSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleStripSet')
TwoSidedMaterial = Java.type('org.web3d.x3d.jsail.Shape.TwoSidedMaterial')
UniversalJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.UniversalJoint')
UnlitMaterial = Java.type('org.web3d.x3d.jsail.Shape.UnlitMaterial')
Viewpoint = Java.type('org.web3d.x3d.jsail.Navigation.Viewpoint')
ViewpointGroup = Java.type('org.web3d.x3d.jsail.Navigation.ViewpointGroup')
Viewport = Java.type('org.web3d.x3d.jsail.Layering.Viewport')
VisibilitySensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.VisibilitySensor')
VolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.VolumeData')
VolumeEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.VolumeEmitter')
VolumePickSensor = Java.type('org.web3d.x3d.jsail.Picking.VolumePickSensor')
WaveShaper = Java.type('org.web3d.x3d.jsail.Sound.WaveShaper')
WindPhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.WindPhysicsModel')
WorldInfo = Java.type('org.web3d.x3d.jsail.Core.WorldInfo')
component = Java.type('org.web3d.x3d.jsail.Core.component')
connect = Java.type('org.web3d.x3d.jsail.Core.connect')
EXPORT = Java.type('org.web3d.x3d.jsail.Networking.EXPORT')
ExternProtoDeclare = Java.type('org.web3d.x3d.jsail.Core.ExternProtoDeclare')
field = Java.type('org.web3d.x3d.jsail.Core.field')
fieldValue = Java.type('org.web3d.x3d.jsail.Core.fieldValue')
head = Java.type('org.web3d.x3d.jsail.Core.head')
IMPORT = Java.type('org.web3d.x3d.jsail.Networking.IMPORT')
IS = Java.type('org.web3d.x3d.jsail.Core.IS')
meta = Java.type('org.web3d.x3d.jsail.Core.meta')
ProtoBody = Java.type('org.web3d.x3d.jsail.Core.ProtoBody')
ProtoDeclare = Java.type('org.web3d.x3d.jsail.Core.ProtoDeclare')
ProtoInterface = Java.type('org.web3d.x3d.jsail.Core.ProtoInterface')
ROUTE = Java.type('org.web3d.x3d.jsail.Core.ROUTE')
Scene = Java.type('org.web3d.x3d.jsail.Core.Scene')
unit = Java.type('org.web3d.x3d.jsail.Core.unit')
X3D = Java.type('org.web3d.x3d.jsail.Core.X3D')
SFBool = Java.type('org.web3d.x3d.jsail.fields.SFBool')
MFBool = Java.type('org.web3d.x3d.jsail.fields.MFBool')
SFColor = Java.type('org.web3d.x3d.jsail.fields.SFColor')
MFColor = Java.type('org.web3d.x3d.jsail.fields.MFColor')
SFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.SFColorRGBA')
MFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.MFColorRGBA')
SFDouble = Java.type('org.web3d.x3d.jsail.fields.SFDouble')
MFDouble = Java.type('org.web3d.x3d.jsail.fields.MFDouble')
SFFloat = Java.type('org.web3d.x3d.jsail.fields.SFFloat')
MFFloat = Java.type('org.web3d.x3d.jsail.fields.MFFloat')
SFImage = Java.type('org.web3d.x3d.jsail.fields.SFImage')
MFImage = Java.type('org.web3d.x3d.jsail.fields.MFImage')
SFInt32 = Java.type('org.web3d.x3d.jsail.fields.SFInt32')
MFInt32 = Java.type('org.web3d.x3d.jsail.fields.MFInt32')
SFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3d')
MFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3d')
SFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3f')
MFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3f')
SFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4d')
MFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4d')
SFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4f')
MFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4f')
SFNode = Java.type('org.web3d.x3d.jsail.fields.SFNode')
MFNode = Java.type('org.web3d.x3d.jsail.fields.MFNode')
SFRotation = Java.type('org.web3d.x3d.jsail.fields.SFRotation')
MFRotation = Java.type('org.web3d.x3d.jsail.fields.MFRotation')
SFString = Java.type('org.web3d.x3d.jsail.fields.SFString')
MFString = Java.type('org.web3d.x3d.jsail.fields.MFString')
SFTime = Java.type('org.web3d.x3d.jsail.fields.SFTime')
MFTime = Java.type('org.web3d.x3d.jsail.fields.MFTime')
SFVec2d = Java.type('org.web3d.x3d.jsail.fields.SFVec2d')
MFVec2d = Java.type('org.web3d.x3d.jsail.fields.MFVec2d')
SFVec2f = Java.type('org.web3d.x3d.jsail.fields.SFVec2f')
MFVec2f = Java.type('org.web3d.x3d.jsail.fields.MFVec2f')
SFVec3d = Java.type('org.web3d.x3d.jsail.fields.SFVec3d')
MFVec3d = Java.type('org.web3d.x3d.jsail.fields.MFVec3d')
SFVec3f = Java.type('org.web3d.x3d.jsail.fields.SFVec3f')
MFVec3f = Java.type('org.web3d.x3d.jsail.fields.MFVec3f')
SFVec4d = Java.type('org.web3d.x3d.jsail.fields.SFVec4d')
MFVec4d = Java.type('org.web3d.x3d.jsail.fields.MFVec4d')
SFVec4f = Java.type('org.web3d.x3d.jsail.fields.SFVec4f')
MFVec4f = Java.type('org.web3d.x3d.jsail.fields.MFVec4f')
var ConfigurationProperties = Packages.org.web3d.x3d.jsail.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
ConfigurationProperties.setStripDefaultAttributes(true);
function doubleToFloat(d) {
    if (Float32Array)
	return new Float32Array([d])[0];
}
      var X3D0 =  new X3D().setProfile("Immersive").setVersion("4.0")
      .setHead(new head()
        .addComponent(new component().setName("HAnim").setLevel(1))
        .addMeta(new meta().setName("title").setContent("KoreanCharacter03Hyun.x3d"))
        .addMeta(new meta().setName("creator").setContent("Jin Hoon Lee and Min Joo Lee"))
        .addMeta(new meta().setName("translator").setContent("Chul Hee Jung and Myeong Won Lee"))
        .addMeta(new meta().setName("created").setContent("31 March 2011"))
        .addMeta(new meta().setName("translated").setContent("1 November 2014"))
        .addMeta(new meta().setName("modified").setContent("23 December 2021"))
        .addMeta(new meta().setName("description").setContent("Articulated 3D game character designed with a general graphics tool, then converted into an X3D HAnim model."))
        .addMeta(new meta().setName("reference").setContent("KoreanCharacter00ReadMe.txt"))
        .addMeta(new meta().setName("reference").setContent("KoreanCharacterHumanMotion_Infotech2014_140706.pdf"))
        .addMeta(new meta().setName("reference").setContent("KoreanCharactersIllustrated.pdf"))
        .addMeta(new meta().setName("identifier").setContent("https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Characters/KoreanCharacter03Hyun.x3d"))
        .addMeta(new meta().setName("generator").setContent("3DS MAX, http://www.autodesk.com/products/autodesk-3ds-max/overview"))
        .addMeta(new meta().setName("generator").setContent("Suwon University HAnim Editor"))
        .addMeta(new meta().setName("generator").setContent("Gnu Image Manipulation Program, http://www.gimp.org"))
        .addMeta(new meta().setName("generator").setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"))
        .addMeta(new meta().setName("license").setContent("../license.html")))
      .setScene(new Scene()
        .addChild(new WorldInfo().setTitle("KoreanCharacter03Hyun.x3d"))
        .addChild(new NavigationInfo().setSpeed(1.5))
        .addChild(new Viewpoint().setCenterOfRotation(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0)], Java.type("float[]"))).setDescription("Hyun").setPosition(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(3)], Java.type("float[]"))))
        .addChild(new HAnimHumanoid().setName("Hyun").setDEF("hanim_Hyun").setScale(Java.to([doubleToFloat(0.0225),doubleToFloat(0.0225),doubleToFloat(0.0225)], Java.type("float[]"))).setVersion("2.0")
          .addComments(new CommentsBlock("original HAnimHumanoid info='\"authorName=Chul Hee Jung and Myeong Won Lee\" \"authorEmail=myeongwonlee@gmail.com\" \"creationDate=31 March 2011\" \"humanoidVersion=2.0\" \"gender=male\" \"height=1.5\"'"))
          .setMetadata(new MetadataSet().setName("HAnimHumanoid.info").setReference("https://www.web3d.org/documents/specifications/19774/V2.0/Architecture/ObjectInterfaces.html#Humanoid")
            .addValue(new MetadataString().setName("authorName").setValue(Java.to(["Chul Hee Jung and Myeong Won Lee"], Java.type("java.lang.String[]"))))
            .addValue(new MetadataString().setName("authorEmail").setValue(Java.to(["myeongwonlee@gmail.com"], Java.type("java.lang.String[]"))))
            .addValue(new MetadataString().setName("creationDate").setValue(Java.to(["31 March 2011"], Java.type("java.lang.String[]"))))
            .addValue(new MetadataString().setName("gender").setValue(Java.to(["male"], Java.type("java.lang.String[]"))))
            .addValue(new MetadataFloat().setName("height").setValue(Java.to([doubleToFloat(1.5)], Java.type("float[]"))))
            .addValue(new MetadataString().setName("humanoidVersion").setValue(Java.to(["2.0"], Java.type("java.lang.String[]")))))
          .addSkeleton(new HAnimJoint("hanim_Hyun").setName("humanoid_root").setDEF("hanim_humanoid_root").setCenter(Java.to([doubleToFloat(0),doubleToFloat(31.43),doubleToFloat(-0.5601)], Java.type("float[]"))).setContainerFieldOverride("skeleton")
            .addChild(new HAnimSegment("hanim_humanoid_root").setName("sacrum").setDEF("hanim_sacrum")
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(31.43),doubleToFloat(-0.5601)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                    .setTexture(new ImageTexture().setDEF("HyunTextureAtlas").setUrl(Java.to(["images/Hyun.png","https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Characters/images/Hyun.png"], Java.type("java.lang.String[]")))))
                  .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,7,-1,0,7,8,-1,0,8,9,-1,0,9,10,-1,0,10,11,-1,0,11,12,-1,0,12,1,-1,1,13,14,-1,14,2,1,-1,2,14,15,-1,15,3,2,-1,3,15,16,-1,16,4,3,-1,4,16,17,-1,17,5,4,-1,5,17,18,-1,18,6,5,-1,6,18,19,-1,19,7,6,-1,7,19,20,-1,20,8,7,-1,8,20,21,-1,21,9,8,-1,9,21,22,-1,22,10,9,-1,10,22,23,-1,23,11,10,-1,11,23,24,-1,24,12,11,-1,12,24,13,-1,13,1,12,-1,13,25,26,-1,26,14,13,-1,14,26,27,-1,27,15,14,-1,15,27,28,-1,28,16,15,-1,16,28,29,-1,29,17,16,-1,17,29,30,-1,30,18,17,-1,18,30,31,-1,31,19,18,-1,19,31,32,-1,32,20,19,-1,20,32,33,-1,33,21,20,-1,21,33,34,-1,34,22,21,-1,22,34,35,-1,35,23,22,-1,23,35,36,-1,36,24,23,-1,24,36,25,-1,25,13,24,-1,25,37,38,-1,38,26,25,-1,26,38,39,-1,39,27,26,-1,27,39,40,-1,40,28,27,-1,28,40,41,-1,41,29,28,-1,29,41,42,-1,42,30,29,-1,30,42,43,-1,43,31,30,-1,31,43,44,-1,44,32,31,-1,32,44,45,-1,45,33,32,-1,33,45,46,-1,46,34,33,-1,34,46,47,-1,47,35,34,-1,35,47,48,-1,48,36,35,-1,36,48,37,-1,37,25,36,-1,37,49,50,-1,50,38,37,-1,38,50,51,-1,51,39,38,-1,39,51,52,-1,52,40,39,-1,40,52,53,-1,53,41,40,-1,41,53,54,-1,54,42,41,-1,42,54,55,-1,55,43,42,-1,43,55,56,-1,56,44,43,-1,44,56,57,-1,57,45,44,-1,45,57,58,-1,58,46,45,-1,46,58,59,-1,59,47,46,-1,47,59,60,-1,60,48,47,-1,48,60,49,-1,49,37,48,-1,61,50,49,-1,61,51,50,-1,61,52,51,-1,61,53,52,-1,61,54,53,-1,61,55,54,-1,61,56,55,-1,61,57,56,-1,61,58,57,-1,61,59,58,-1,61,60,59,-1,61,49,60,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,7,-1,0,7,8,-1,0,8,9,-1,0,9,10,-1,0,10,11,-1,0,11,12,-1,0,12,1,-1,1,13,14,-1,14,2,1,-1,2,14,15,-1,15,3,2,-1,3,15,16,-1,16,4,3,-1,4,16,17,-1,17,5,4,-1,5,17,18,-1,18,6,5,-1,6,18,19,-1,19,7,6,-1,7,19,20,-1,20,8,7,-1,8,20,21,-1,21,9,8,-1,9,21,22,-1,22,10,9,-1,10,22,23,-1,23,11,10,-1,11,23,24,-1,24,12,11,-1,12,24,13,-1,13,1,12,-1,13,25,26,-1,26,14,13,-1,14,26,27,-1,27,15,14,-1,15,27,28,-1,28,16,15,-1,16,28,29,-1,29,17,16,-1,17,29,30,-1,30,18,17,-1,18,30,31,-1,31,19,18,-1,19,31,32,-1,32,20,19,-1,20,32,33,-1,33,21,20,-1,21,33,34,-1,34,22,21,-1,22,34,35,-1,35,23,22,-1,23,35,36,-1,36,24,23,-1,24,36,25,-1,25,13,24,-1,25,37,38,-1,38,26,25,-1,26,38,39,-1,39,27,26,-1,27,39,40,-1,40,28,27,-1,28,40,41,-1,41,29,28,-1,29,41,42,-1,42,30,29,-1,30,42,43,-1,43,31,30,-1,31,43,44,-1,44,32,31,-1,32,44,45,-1,45,33,32,-1,33,45,46,-1,46,34,33,-1,34,46,47,-1,47,35,34,-1,35,47,48,-1,48,36,35,-1,36,48,37,-1,37,25,36,-1,37,49,50,-1,50,38,37,-1,38,50,51,-1,51,39,38,-1,39,51,52,-1,52,40,39,-1,40,52,53,-1,53,41,40,-1,41,53,54,-1,54,42,41,-1,42,54,55,-1,55,43,42,-1,43,55,56,-1,56,44,43,-1,44,56,57,-1,57,45,44,-1,45,57,58,-1,58,46,45,-1,46,58,59,-1,59,47,46,-1,47,59,60,-1,60,48,47,-1,48,60,49,-1,49,37,48,-1,61,50,49,-1,61,51,50,-1,61,52,51,-1,61,53,52,-1,61,54,53,-1,61,55,54,-1,61,56,55,-1,61,57,56,-1,61,58,57,-1,61,59,58,-1,61,60,59,-1,61,49,60,-1], Java.type("int[]")))
                    .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0),doubleToFloat(0.7566),doubleToFloat(0.0196),doubleToFloat(0),doubleToFloat(0.6552),doubleToFloat(-0.3888),doubleToFloat(-0.3142),doubleToFloat(0.6552),doubleToFloat(-0.3341),doubleToFloat(-0.5442),doubleToFloat(0.6552),doubleToFloat(-0.2681),doubleToFloat(-0.6284),doubleToFloat(0.6552),doubleToFloat(0.0196),doubleToFloat(-0.5442),doubleToFloat(0.6552),doubleToFloat(0.3073),doubleToFloat(-0.3142),doubleToFloat(0.6552),doubleToFloat(0.3733),doubleToFloat(0),doubleToFloat(0.6552),doubleToFloat(0.4281),doubleToFloat(0.3142),doubleToFloat(0.6552),doubleToFloat(0.3733),doubleToFloat(0.5442),doubleToFloat(0.6552),doubleToFloat(0.3073),doubleToFloat(0.6284),doubleToFloat(0.6552),doubleToFloat(0.0196),doubleToFloat(0.5442),doubleToFloat(0.6552),doubleToFloat(-0.2681),doubleToFloat(0.3142),doubleToFloat(0.6552),doubleToFloat(-0.3341),doubleToFloat(0),doubleToFloat(0.3783),doubleToFloat(-0.6351),doubleToFloat(-0.4064),doubleToFloat(0.3783),doubleToFloat(-0.5474),doubleToFloat(-0.7039),doubleToFloat(0.3783),doubleToFloat(-0.3077),doubleToFloat(-0.8128),doubleToFloat(0.3783),doubleToFloat(0.0196),doubleToFloat(-0.7039),doubleToFloat(0.3783),doubleToFloat(0.3469),doubleToFloat(-0.4064),doubleToFloat(0.3783),doubleToFloat(0.5017),doubleToFloat(0),doubleToFloat(0.3783),doubleToFloat(0.5894),doubleToFloat(0.4064),doubleToFloat(0.3783),doubleToFloat(0.5017),doubleToFloat(0.7039),doubleToFloat(0.3783),doubleToFloat(0.3469),doubleToFloat(0.8128),doubleToFloat(0.3783),doubleToFloat(0.0196),doubleToFloat(0.7039),doubleToFloat(0.3783),doubleToFloat(-0.3077),doubleToFloat(0.4064),doubleToFloat(0.3783),doubleToFloat(-0.5474),doubleToFloat(0),doubleToFloat(0),doubleToFloat(-0.6906),doubleToFloat(-0.4693),doubleToFloat(0),doubleToFloat(-0.5894),doubleToFloat(-0.8128),doubleToFloat(0),doubleToFloat(-0.3127),doubleToFloat(-0.9385),doubleToFloat(0),doubleToFloat(0.0196),doubleToFloat(-0.8128),doubleToFloat(0),doubleToFloat(0.3976),doubleToFloat(-0.4693),doubleToFloat(0),doubleToFloat(0.5894),doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.6906),doubleToFloat(0.4693),doubleToFloat(0),doubleToFloat(0.5894),doubleToFloat(0.8128),doubleToFloat(0),doubleToFloat(0.3976),doubleToFloat(0.9385),doubleToFloat(0),doubleToFloat(0.0196),doubleToFloat(0.8128),doubleToFloat(0),doubleToFloat(-0.3127),doubleToFloat(0.4693),doubleToFloat(0),doubleToFloat(-0.5894),doubleToFloat(0),doubleToFloat(-0.3783),doubleToFloat(-0.5894),doubleToFloat(-0.4064),doubleToFloat(-0.3783),doubleToFloat(-0.5017),doubleToFloat(-0.7039),doubleToFloat(-0.3783),doubleToFloat(-0.262),doubleToFloat(-0.8128),doubleToFloat(-0.3783),doubleToFloat(0.0196),doubleToFloat(-0.7039),doubleToFloat(-0.3783),doubleToFloat(0.3469),doubleToFloat(-0.4064),doubleToFloat(-0.3783),doubleToFloat(0.5017),doubleToFloat(0),doubleToFloat(-0.3783),doubleToFloat(0.5894),doubleToFloat(0.4064),doubleToFloat(-0.3783),doubleToFloat(0.5017),doubleToFloat(0.7039),doubleToFloat(-0.3783),doubleToFloat(0.3469),doubleToFloat(0.8128),doubleToFloat(-0.3783),doubleToFloat(0.0196),doubleToFloat(0.7039),doubleToFloat(-0.3783),doubleToFloat(-0.262),doubleToFloat(0.4064),doubleToFloat(-0.3783),doubleToFloat(-0.5017),doubleToFloat(0),doubleToFloat(-0.6552),doubleToFloat(-0.3127),doubleToFloat(-0.2346),doubleToFloat(-0.6552),doubleToFloat(-0.262),doubleToFloat(-0.4064),doubleToFloat(-0.6552),doubleToFloat(-0.1694),doubleToFloat(-0.4693),doubleToFloat(-0.6552),doubleToFloat(0.0196),doubleToFloat(-0.4064),doubleToFloat(-0.6552),doubleToFloat(0.2086),doubleToFloat(-0.2346),doubleToFloat(-0.6552),doubleToFloat(0.3469),doubleToFloat(0),doubleToFloat(-0.6552),doubleToFloat(0.3976),doubleToFloat(0.2346),doubleToFloat(-0.6552),doubleToFloat(0.3469),doubleToFloat(0.4064),doubleToFloat(-0.6552),doubleToFloat(0.2086),doubleToFloat(0.4693),doubleToFloat(-0.6552),doubleToFloat(0.0196),doubleToFloat(0.4064),doubleToFloat(-0.6552),doubleToFloat(-0.1694),doubleToFloat(0.2346),doubleToFloat(-0.6552),doubleToFloat(-0.262),doubleToFloat(0),doubleToFloat(-0.7566),doubleToFloat(0.0196)], Java.type("float[]"))))
                    .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.8893),doubleToFloat(0.532),doubleToFloat(0.8772),doubleToFloat(0.532),doubleToFloat(0.8772),doubleToFloat(0.4766),doubleToFloat(0.8772),doubleToFloat(0.4361),doubleToFloat(0.8772),doubleToFloat(0.4213),doubleToFloat(0.8772),doubleToFloat(0.4361),doubleToFloat(0.8772),doubleToFloat(0.4766),doubleToFloat(0.8772),doubleToFloat(0.532),doubleToFloat(0.8772),doubleToFloat(0.4766),doubleToFloat(0.8772),doubleToFloat(0.4361),doubleToFloat(0.8772),doubleToFloat(0.4212),doubleToFloat(0.8772),doubleToFloat(0.4361),doubleToFloat(0.8772),doubleToFloat(0.4766),doubleToFloat(0.8439),doubleToFloat(0.532),doubleToFloat(0.8439),doubleToFloat(0.4604),doubleToFloat(0.8439),doubleToFloat(0.408),doubleToFloat(0.8439),doubleToFloat(0.3888),doubleToFloat(0.8439),doubleToFloat(0.408),doubleToFloat(0.8439),doubleToFloat(0.4604),doubleToFloat(0.8439),doubleToFloat(0.532),doubleToFloat(0.8439),doubleToFloat(0.4604),doubleToFloat(0.8439),doubleToFloat(0.4079),doubleToFloat(0.8439),doubleToFloat(0.3887),doubleToFloat(0.8439),doubleToFloat(0.4079),doubleToFloat(0.8439),doubleToFloat(0.4604),doubleToFloat(0.7985),doubleToFloat(0.532),doubleToFloat(0.7985),doubleToFloat(0.4493),doubleToFloat(0.7985),doubleToFloat(0.3888),doubleToFloat(0.7985),doubleToFloat(0.3666),doubleToFloat(0.7985),doubleToFloat(0.3888),doubleToFloat(0.7985),doubleToFloat(0.4493),doubleToFloat(0.7985),doubleToFloat(0.532),doubleToFloat(0.7985),doubleToFloat(0.4493),doubleToFloat(0.7985),doubleToFloat(0.3887),doubleToFloat(0.7985),doubleToFloat(0.3666),doubleToFloat(0.7985),doubleToFloat(0.3887),doubleToFloat(0.7985),doubleToFloat(0.4493),doubleToFloat(0.753),doubleToFloat(0.532),doubleToFloat(0.753),doubleToFloat(0.4604),doubleToFloat(0.753),doubleToFloat(0.408),doubleToFloat(0.753),doubleToFloat(0.3888),doubleToFloat(0.753),doubleToFloat(0.408),doubleToFloat(0.753),doubleToFloat(0.4604),doubleToFloat(0.753),doubleToFloat(0.532),doubleToFloat(0.753),doubleToFloat(0.4604),doubleToFloat(0.753),doubleToFloat(0.4079),doubleToFloat(0.753),doubleToFloat(0.3887),doubleToFloat(0.753),doubleToFloat(0.4079),doubleToFloat(0.753),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.532),doubleToFloat(0.7197),doubleToFloat(0.4907),doubleToFloat(0.7197),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.4493),doubleToFloat(0.7197),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.4907),doubleToFloat(0.7197),doubleToFloat(0.532),doubleToFloat(0.7197),doubleToFloat(0.4906),doubleToFloat(0.7197),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.4493),doubleToFloat(0.7197),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.4906),doubleToFloat(0.7076),doubleToFloat(0.532)], Java.type("float[]"))))))))
            .addChild(new HAnimJoint("hanim_humanoid_root").setName("l_hip").setDEF("hanim_l_hip").setCenter(Java.to([doubleToFloat(3.551),doubleToFloat(29.33),doubleToFloat(-0.1267)], Java.type("float[]")))
              .addChild(new HAnimSegment("hanim_l_hip").setName("l_thigh").setDEF("hanim_l_thigh")
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(3.551),doubleToFloat(29.33),doubleToFloat(-0.1267)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                      .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                    .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([31,30,29,-1,31,29,28,-1,28,34,33,-1,31,28,33,-1,31,33,32,-1,8,7,0,-1,0,1,8,-1,9,8,1,-1,1,2,9,-1,10,9,2,-1,2,3,10,-1,11,10,3,-1,3,4,11,-1,12,11,4,-1,4,5,12,-1,13,12,5,-1,5,6,13,-1,7,13,6,-1,6,0,7,-1,15,14,7,-1,7,8,15,-1,16,15,8,-1,8,9,16,-1,17,16,9,-1,9,10,17,-1,18,17,10,-1,10,11,18,-1,19,18,11,-1,11,12,19,-1,20,19,12,-1,12,13,20,-1,14,20,13,-1,13,7,14,-1,22,21,14,-1,14,15,22,-1,23,22,15,-1,15,16,23,-1,24,23,16,-1,16,17,24,-1,25,24,17,-1,17,18,25,-1,26,25,18,-1,18,19,26,-1,27,26,19,-1,19,20,27,-1,21,27,20,-1,20,14,21,-1,1,0,28,-1,28,29,1,-1,2,1,29,-1,29,30,2,-1,3,2,30,-1,30,31,3,-1,4,3,31,-1,31,32,4,-1,5,4,32,-1,32,33,5,-1,6,5,33,-1,33,34,6,-1,0,6,34,-1,34,28,0,-1,35,36,21,-1,21,22,35,-1,37,35,22,-1,22,23,37,-1,38,37,23,-1,23,24,38,-1,39,38,24,-1,24,25,39,-1,40,39,25,-1,25,26,40,-1,41,40,26,-1,26,27,41,-1,36,41,27,-1,27,21,36,-1,36,35,42,-1,35,37,42,-1,37,38,42,-1,38,39,42,-1,39,40,42,-1,40,41,42,-1,41,36,42,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([3,2,0,-1,3,0,1,-1,1,6,5,-1,3,1,5,-1,3,5,4,-1,8,9,7,-1,7,10,8,-1,11,8,10,-1,10,12,11,-1,13,11,12,-1,12,14,13,-1,15,13,14,-1,14,16,15,-1,17,15,16,-1,16,18,17,-1,19,17,18,-1,18,20,19,-1,9,19,20,-1,20,7,9,-1,21,22,9,-1,9,8,21,-1,23,21,8,-1,8,11,23,-1,24,23,11,-1,11,13,24,-1,25,24,13,-1,13,15,25,-1,26,25,15,-1,15,17,26,-1,27,26,17,-1,17,19,27,-1,22,27,19,-1,19,9,22,-1,28,29,22,-1,22,21,28,-1,30,28,21,-1,21,23,30,-1,31,30,23,-1,23,24,31,-1,32,31,24,-1,24,25,32,-1,33,32,25,-1,25,26,33,-1,34,33,26,-1,26,27,34,-1,29,34,27,-1,27,22,29,-1,10,7,1,-1,1,0,10,-1,12,10,0,-1,0,2,12,-1,14,12,2,-1,2,3,14,-1,16,14,3,-1,3,4,16,-1,18,16,4,-1,4,5,18,-1,20,18,5,-1,5,6,20,-1,7,20,6,-1,6,1,7,-1,35,36,29,-1,29,28,35,-1,37,35,28,-1,28,30,37,-1,38,37,30,-1,30,31,38,-1,39,38,31,-1,31,32,39,-1,40,39,32,-1,32,33,40,-1,41,40,33,-1,33,34,41,-1,36,41,34,-1,34,29,36,-1,36,35,42,-1,35,37,42,-1,37,38,42,-1,38,39,42,-1,39,40,42,-1,40,41,42,-1,41,36,42,-1], Java.type("int[]")))
                      .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(2.616),doubleToFloat(1.989),doubleToFloat(0),doubleToFloat(1.452),doubleToFloat(1.989),doubleToFloat(2.836),doubleToFloat(-1.163),doubleToFloat(1.989),doubleToFloat(3.536),doubleToFloat(-2.975),doubleToFloat(1.989),doubleToFloat(1.574),doubleToFloat(-2.975),doubleToFloat(1.989),doubleToFloat(-1.574),doubleToFloat(-1.163),doubleToFloat(1.989),doubleToFloat(-3.536),doubleToFloat(1.452),doubleToFloat(1.989),doubleToFloat(-2.836),doubleToFloat(2.616),doubleToFloat(-1.325),doubleToFloat(0),doubleToFloat(1.452),doubleToFloat(-1.325),doubleToFloat(2.836),doubleToFloat(-1.163),doubleToFloat(-1.325),doubleToFloat(3.536),doubleToFloat(-2.975),doubleToFloat(-1.325),doubleToFloat(1.574),doubleToFloat(-2.975),doubleToFloat(-1.325),doubleToFloat(-1.574),doubleToFloat(-1.163),doubleToFloat(-1.325),doubleToFloat(-3.536),doubleToFloat(1.452),doubleToFloat(-1.325),doubleToFloat(-2.836),doubleToFloat(2.616),doubleToFloat(-7.064),doubleToFloat(0),doubleToFloat(1.452),doubleToFloat(-7.064),doubleToFloat(2.836),doubleToFloat(-1.163),doubleToFloat(-7.064),doubleToFloat(3.536),doubleToFloat(-2.975),doubleToFloat(-7.064),doubleToFloat(1.574),doubleToFloat(-2.975),doubleToFloat(-7.064),doubleToFloat(-1.574),doubleToFloat(-1.163),doubleToFloat(-7.064),doubleToFloat(-3.536),doubleToFloat(1.452),doubleToFloat(-7.064),doubleToFloat(-2.836),doubleToFloat(2.975),doubleToFloat(-11.91),doubleToFloat(0),doubleToFloat(1.676),doubleToFloat(-11.91),doubleToFloat(3.165),doubleToFloat(-1.243),doubleToFloat(-11.91),doubleToFloat(3.947),doubleToFloat(-2.964),doubleToFloat(-11.91),doubleToFloat(1.756),doubleToFloat(-2.964),doubleToFloat(-11.91),doubleToFloat(-1.756),doubleToFloat(-1.243),doubleToFloat(-11.91),doubleToFloat(-3.947),doubleToFloat(1.676),doubleToFloat(-11.91),doubleToFloat(-3.165),doubleToFloat(1.812),doubleToFloat(3.747),doubleToFloat(0),doubleToFloat(0.9506),doubleToFloat(3.747),doubleToFloat(2.098),doubleToFloat(-0.9843),doubleToFloat(3.747),doubleToFloat(2.616),doubleToFloat(-2.536),doubleToFloat(3.747),doubleToFloat(1.164),doubleToFloat(-2.536),doubleToFloat(3.747),doubleToFloat(-1.164),doubleToFloat(-0.9843),doubleToFloat(3.747),doubleToFloat(-2.616),doubleToFloat(0.9506),doubleToFloat(3.747),doubleToFloat(-2.098),doubleToFloat(0.9661),doubleToFloat(-14.81),doubleToFloat(2.027),doubleToFloat(1.798),doubleToFloat(-14.81),doubleToFloat(0),doubleToFloat(-0.9034),doubleToFloat(-14.81),doubleToFloat(2.528),doubleToFloat(-2.006),doubleToFloat(-14.81),doubleToFloat(1.125),doubleToFloat(-2.006),doubleToFloat(-14.81),doubleToFloat(-1.125),doubleToFloat(-0.9034),doubleToFloat(-14.81),doubleToFloat(-2.528),doubleToFloat(0.9661),doubleToFloat(-14.81),doubleToFloat(-2.027),doubleToFloat(-0.2983),doubleToFloat(-16.16),doubleToFloat(0)], Java.type("float[]"))))
                      .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.7912),doubleToFloat(0.3382),doubleToFloat(0.7912),doubleToFloat(0.364),doubleToFloat(0.7912),doubleToFloat(0.2804),doubleToFloat(0.7912),doubleToFloat(0.234),doubleToFloat(0.7912),doubleToFloat(0.234),doubleToFloat(0.7912),doubleToFloat(0.2804),doubleToFloat(0.7912),doubleToFloat(0.3382),doubleToFloat(0.7762),doubleToFloat(0.388),doubleToFloat(0.748),doubleToFloat(0.3532),doubleToFloat(0.748),doubleToFloat(0.388),doubleToFloat(0.7762),doubleToFloat(0.3532),doubleToFloat(0.748),doubleToFloat(0.275),doubleToFloat(0.7762),doubleToFloat(0.275),doubleToFloat(0.748),doubleToFloat(0.2209),doubleToFloat(0.7762),doubleToFloat(0.2209),doubleToFloat(0.748),doubleToFloat(0.2209),doubleToFloat(0.7762),doubleToFloat(0.2209),doubleToFloat(0.748),doubleToFloat(0.275),doubleToFloat(0.7762),doubleToFloat(0.275),doubleToFloat(0.748),doubleToFloat(0.3532),doubleToFloat(0.7762),doubleToFloat(0.3532),doubleToFloat(0.6856),doubleToFloat(0.3532),doubleToFloat(0.6856),doubleToFloat(0.388),doubleToFloat(0.6856),doubleToFloat(0.275),doubleToFloat(0.6856),doubleToFloat(0.2209),doubleToFloat(0.6856),doubleToFloat(0.2209),doubleToFloat(0.6856),doubleToFloat(0.275),doubleToFloat(0.6856),doubleToFloat(0.3532),doubleToFloat(0.6315),doubleToFloat(0.3608),doubleToFloat(0.6315),doubleToFloat(0.3996),doubleToFloat(0.6315),doubleToFloat(0.2735),doubleToFloat(0.6315),doubleToFloat(0.222),doubleToFloat(0.6315),doubleToFloat(0.222),doubleToFloat(0.6315),doubleToFloat(0.2735),doubleToFloat(0.6315),doubleToFloat(0.3608),doubleToFloat(0.6248),doubleToFloat(0.3387),doubleToFloat(0.6248),doubleToFloat(0.3636),doubleToFloat(0.6248),doubleToFloat(0.2828),doubleToFloat(0.6248),doubleToFloat(0.2498),doubleToFloat(0.6248),doubleToFloat(0.2498),doubleToFloat(0.6248),doubleToFloat(0.2828),doubleToFloat(0.6248),doubleToFloat(0.3387),doubleToFloat(0.6133),doubleToFloat(0.3009)], Java.type("float[]"))))))))
              .addChild(new HAnimJoint("hanim_l_hip").setName("l_knee").setDEF("hanim_l_knee").setCenter(Java.to([doubleToFloat(3.71),doubleToFloat(15.48),doubleToFloat(-0.1446)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_l_knee").setName("l_calf").setDEF("hanim_l_calf")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(3.71),doubleToFloat(15.48),doubleToFloat(-0.1446)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([45,44,43,-1,45,43,42,-1,42,48,47,-1,45,42,47,-1,45,47,46,-1,8,7,0,-1,0,1,8,-1,9,8,1,-1,1,2,9,-1,10,9,2,-1,2,3,10,-1,11,10,3,-1,3,4,11,-1,12,11,4,-1,4,5,12,-1,13,12,5,-1,5,6,13,-1,7,13,6,-1,6,0,7,-1,15,14,7,-1,7,8,15,-1,16,15,8,-1,8,9,16,-1,17,16,9,-1,9,10,17,-1,18,17,10,-1,10,11,18,-1,19,18,11,-1,11,12,19,-1,20,19,12,-1,12,13,20,-1,14,20,13,-1,13,7,14,-1,22,21,14,-1,14,15,22,-1,23,22,15,-1,15,16,23,-1,24,23,16,-1,16,17,24,-1,25,24,17,-1,17,18,25,-1,26,25,18,-1,18,19,26,-1,27,26,19,-1,19,20,27,-1,21,27,20,-1,20,14,21,-1,58,59,60,-1,61,62,56,-1,60,61,56,-1,58,60,56,-1,58,56,57,-1,21,22,29,-1,29,28,21,-1,22,23,30,-1,30,29,22,-1,23,24,31,-1,31,30,23,-1,24,25,32,-1,32,31,24,-1,25,26,33,-1,33,32,25,-1,26,27,34,-1,34,33,26,-1,27,21,28,-1,28,34,27,-1,28,29,36,-1,36,35,28,-1,29,30,37,-1,37,36,29,-1,30,31,38,-1,38,37,30,-1,31,32,39,-1,39,38,31,-1,32,33,40,-1,40,39,32,-1,33,34,41,-1,41,40,33,-1,34,28,35,-1,35,41,34,-1,1,0,42,-1,42,43,1,-1,2,1,43,-1,43,44,2,-1,3,2,44,-1,44,45,3,-1,4,3,45,-1,45,46,4,-1,5,4,46,-1,46,47,5,-1,6,5,47,-1,47,48,6,-1,0,6,48,-1,48,42,0,-1,35,36,50,-1,50,49,35,-1,36,37,51,-1,51,50,36,-1,37,38,52,-1,52,51,37,-1,38,39,53,-1,53,52,38,-1,39,40,54,-1,54,53,39,-1,40,41,55,-1,55,54,40,-1,41,35,49,-1,49,55,41,-1,49,50,57,-1,57,56,49,-1,50,51,58,-1,58,57,50,-1,51,52,59,-1,59,58,51,-1,52,53,60,-1,60,59,52,-1,53,54,61,-1,61,60,53,-1,54,55,62,-1,62,61,54,-1,55,49,56,-1,56,62,55,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([56,55,53,-1,56,53,52,-1,52,59,58,-1,56,52,58,-1,56,58,57,-1,8,7,0,-1,0,1,8,-1,9,8,1,-1,1,2,9,-1,10,9,2,-1,2,3,10,-1,11,10,3,-1,3,4,11,-1,12,11,4,-1,4,5,12,-1,29,12,5,-1,5,30,29,-1,7,13,6,-1,6,0,7,-1,15,14,7,-1,7,8,15,-1,16,15,8,-1,8,9,16,-1,17,16,9,-1,9,10,17,-1,18,17,10,-1,10,11,18,-1,19,18,11,-1,11,12,19,-1,31,19,12,-1,12,32,31,-1,14,20,13,-1,13,7,14,-1,22,21,14,-1,14,15,22,-1,23,22,15,-1,15,16,23,-1,24,23,16,-1,16,17,24,-1,25,24,17,-1,17,18,25,-1,26,25,18,-1,18,19,26,-1,33,26,19,-1,19,34,33,-1,21,27,20,-1,20,14,21,-1,71,72,73,-1,74,70,68,-1,73,74,68,-1,71,73,68,-1,71,68,69,-1,21,22,37,-1,37,36,21,-1,22,23,39,-1,39,37,22,-1,23,24,40,-1,40,39,23,-1,24,25,41,-1,41,40,24,-1,25,26,42,-1,42,41,25,-1,26,35,43,-1,43,42,26,-1,27,21,36,-1,36,38,27,-1,36,37,45,-1,45,44,36,-1,37,39,47,-1,47,45,37,-1,39,40,48,-1,48,47,39,-1,40,41,49,-1,49,48,40,-1,41,42,50,-1,50,49,41,-1,42,43,51,-1,51,50,42,-1,38,36,44,-1,44,46,38,-1,1,0,52,-1,52,53,1,-1,2,1,53,-1,53,55,2,-1,3,2,55,-1,55,56,3,-1,4,3,56,-1,56,57,4,-1,5,4,57,-1,57,58,5,-1,28,5,58,-1,58,59,28,-1,0,6,54,-1,54,52,0,-1,44,45,61,-1,61,60,44,-1,45,47,63,-1,63,61,45,-1,47,48,64,-1,64,63,47,-1,48,49,65,-1,65,64,48,-1,49,50,66,-1,66,65,49,-1,50,51,67,-1,67,66,50,-1,46,44,60,-1,60,62,46,-1,60,61,69,-1,69,68,60,-1,61,63,71,-1,71,69,61,-1,63,64,72,-1,72,71,63,-1,64,65,73,-1,73,72,64,-1,65,66,74,-1,74,73,65,-1,66,67,75,-1,75,74,66,-1,62,60,68,-1,68,70,62,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(2.616),doubleToFloat(-0.0823),doubleToFloat(0.0541),doubleToFloat(1.452),doubleToFloat(-0.0823),doubleToFloat(2.89),doubleToFloat(-1.163),doubleToFloat(-0.0823),doubleToFloat(3.59),doubleToFloat(-2.975),doubleToFloat(-0.0823),doubleToFloat(1.628),doubleToFloat(-2.975),doubleToFloat(-0.0823),doubleToFloat(-1.52),doubleToFloat(-1.163),doubleToFloat(-0.0823),doubleToFloat(-3.482),doubleToFloat(1.452),doubleToFloat(-0.0823),doubleToFloat(-2.782),doubleToFloat(2.616),doubleToFloat(-3.395),doubleToFloat(0.0541),doubleToFloat(1.452),doubleToFloat(-3.395),doubleToFloat(2.89),doubleToFloat(-1.163),doubleToFloat(-3.395),doubleToFloat(3.59),doubleToFloat(-2.975),doubleToFloat(-3.395),doubleToFloat(1.628),doubleToFloat(-2.975),doubleToFloat(-3.395),doubleToFloat(-1.52),doubleToFloat(-1.163),doubleToFloat(-3.395),doubleToFloat(-3.482),doubleToFloat(1.452),doubleToFloat(-3.395),doubleToFloat(-2.782),doubleToFloat(2.708),doubleToFloat(-6.91),doubleToFloat(0.0541),doubleToFloat(1.545),doubleToFloat(-6.91),doubleToFloat(2.89),doubleToFloat(-1.071),doubleToFloat(-6.91),doubleToFloat(3.59),doubleToFloat(-2.882),doubleToFloat(-6.91),doubleToFloat(1.628),doubleToFloat(-2.882),doubleToFloat(-6.91),doubleToFloat(-1.52),doubleToFloat(-1.071),doubleToFloat(-6.91),doubleToFloat(-3.482),doubleToFloat(1.545),doubleToFloat(-6.91),doubleToFloat(-2.782),doubleToFloat(2.975),doubleToFloat(-11.77),doubleToFloat(0.0541),doubleToFloat(1.676),doubleToFloat(-11.77),doubleToFloat(3.219),doubleToFloat(-1.243),doubleToFloat(-11.77),doubleToFloat(4.001),doubleToFloat(-2.964),doubleToFloat(-11.77),doubleToFloat(1.81),doubleToFloat(-2.964),doubleToFloat(-11.77),doubleToFloat(-1.702),doubleToFloat(-1.243),doubleToFloat(-11.77),doubleToFloat(-3.892),doubleToFloat(1.676),doubleToFloat(-11.77),doubleToFloat(-3.111),doubleToFloat(1.896),doubleToFloat(-7.789),doubleToFloat(0.0541),doubleToFloat(1.003),doubleToFloat(-7.789),doubleToFloat(2.23),doubleToFloat(-1.003),doubleToFloat(-7.789),doubleToFloat(2.767),doubleToFloat(-2.326),doubleToFloat(-7.789),doubleToFloat(1.261),doubleToFloat(-2.326),doubleToFloat(-7.789),doubleToFloat(-1.153),doubleToFloat(-1.003),doubleToFloat(-7.789),doubleToFloat(-2.659),doubleToFloat(1.003),doubleToFloat(-7.789),doubleToFloat(-2.122),doubleToFloat(1.905),doubleToFloat(-9.68),doubleToFloat(0.0541),doubleToFloat(1.082),doubleToFloat(-9.68),doubleToFloat(1.782),doubleToFloat(-0.7654),doubleToFloat(-9.68),doubleToFloat(2.209),doubleToFloat(-2.247),doubleToFloat(-9.68),doubleToFloat(1.013),doubleToFloat(-2.247),doubleToFloat(-9.68),doubleToFloat(-0.9049),doubleToFloat(-0.7654),doubleToFloat(-9.68),doubleToFloat(-2.101),doubleToFloat(1.082),doubleToFloat(-9.68),doubleToFloat(-1.674),doubleToFloat(1.812),doubleToFloat(1.676),doubleToFloat(0.0541),doubleToFloat(0.9506),doubleToFloat(1.676),doubleToFloat(2.152),doubleToFloat(-0.9843),doubleToFloat(1.676),doubleToFloat(2.67),doubleToFloat(-2.536),doubleToFloat(1.676),doubleToFloat(1.218),doubleToFloat(-2.536),doubleToFloat(1.676),doubleToFloat(-1.11),doubleToFloat(-0.9843),doubleToFloat(1.676),doubleToFloat(-2.562),doubleToFloat(0.9506),doubleToFloat(1.676),doubleToFloat(-2.044),doubleToFloat(1.628),doubleToFloat(-12.93),doubleToFloat(0.0541),doubleToFloat(0.9097),doubleToFloat(-12.93),doubleToFloat(1.709),doubleToFloat(-0.7038),doubleToFloat(-12.93),doubleToFloat(2.082),doubleToFloat(-1.998),doubleToFloat(-12.93),doubleToFloat(1.037),doubleToFloat(-1.998),doubleToFloat(-12.93),doubleToFloat(-0.7834),doubleToFloat(-0.7038),doubleToFloat(-12.93),doubleToFloat(-1.828),doubleToFloat(0.9097),doubleToFloat(-12.93),doubleToFloat(-1.455),doubleToFloat(0.5546),doubleToFloat(-13.79),doubleToFloat(0.0541),doubleToFloat(0.2406),doubleToFloat(-13.79),doubleToFloat(0.8599),doubleToFloat(-0.465),doubleToFloat(-13.79),doubleToFloat(1.023),doubleToFloat(-1.031),doubleToFloat(-13.79),doubleToFloat(0.5662),doubleToFloat(-1.031),doubleToFloat(-13.79),doubleToFloat(-0.3121),doubleToFloat(-0.465),doubleToFloat(-13.79),doubleToFloat(-0.7688),doubleToFloat(0.2406),doubleToFloat(-13.79),doubleToFloat(-0.6058)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.6566),doubleToFloat(0.2462),doubleToFloat(0.6181),doubleToFloat(0.2462),doubleToFloat(0.5796),doubleToFloat(0.2462),doubleToFloat(0.5411),doubleToFloat(0.2462),doubleToFloat(0.5026),doubleToFloat(0.2462),doubleToFloat(0.4641),doubleToFloat(0.2462),doubleToFloat(0.6951),doubleToFloat(0.2462),doubleToFloat(0.6566),doubleToFloat(0.2951),doubleToFloat(0.6181),doubleToFloat(0.2951),doubleToFloat(0.5796),doubleToFloat(0.2951),doubleToFloat(0.5411),doubleToFloat(0.2951),doubleToFloat(0.5026),doubleToFloat(0.2951),doubleToFloat(0.4641),doubleToFloat(0.2951),doubleToFloat(0.6951),doubleToFloat(0.2951),doubleToFloat(0.6566),doubleToFloat(0.3439),doubleToFloat(0.6181),doubleToFloat(0.3439),doubleToFloat(0.5796),doubleToFloat(0.3439),doubleToFloat(0.5411),doubleToFloat(0.3439),doubleToFloat(0.5026),doubleToFloat(0.3439),doubleToFloat(0.4641),doubleToFloat(0.3439),doubleToFloat(0.6951),doubleToFloat(0.3439),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.2462),doubleToFloat(0.4256),doubleToFloat(0.2951),doubleToFloat(0.4256),doubleToFloat(0.2462),doubleToFloat(0.4256),doubleToFloat(0.3439),doubleToFloat(0.4256),doubleToFloat(0.2951),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3439),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.6566),doubleToFloat(0.2462),doubleToFloat(0.6181),doubleToFloat(0.2462),doubleToFloat(0.6951),doubleToFloat(0.2462),doubleToFloat(0.5796),doubleToFloat(0.2462),doubleToFloat(0.5411),doubleToFloat(0.2462),doubleToFloat(0.5026),doubleToFloat(0.2462),doubleToFloat(0.4641),doubleToFloat(0.2462),doubleToFloat(0.4256),doubleToFloat(0.2462),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3927)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_l_knee").setName("l_talocrural").setDEF("hanim_l_talocrural").setCenter(Java.to([doubleToFloat(3.388),doubleToFloat(3.168),doubleToFloat(-0.537)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_l_talocrural").setName("l_talus").setDEF("hanim_l_talus")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(3.388),doubleToFloat(3.168),doubleToFloat(-0.537)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([1,11,12,-1,3,4,5,-1,5,6,3,-1,1,0,4,-1,4,3,1,-1,0,2,5,-1,5,4,0,-1,11,1,3,-1,3,6,11,-1,18,2,0,-1,0,17,18,-1,0,1,25,-1,25,17,0,-1,25,1,12,-1,7,13,11,-1,8,6,5,-1,5,9,8,-1,7,8,9,-1,9,10,7,-1,10,9,5,-1,5,2,10,-1,11,6,8,-1,8,7,11,-1,18,21,10,-1,10,2,18,-1,10,21,27,-1,27,7,10,-1,27,13,7,-1,12,11,37,-1,37,35,12,-1,11,13,36,-1,36,37,11,-1,20,18,17,-1,17,14,20,-1,23,14,17,-1,17,25,23,-1,16,20,14,-1,14,15,16,-1,24,15,14,-1,14,23,24,-1,15,24,29,-1,29,16,15,-1,20,19,21,-1,21,18,20,-1,26,27,21,-1,21,19,26,-1,16,22,19,-1,19,20,16,-1,28,26,19,-1,19,22,28,-1,22,16,29,-1,29,28,22,-1,36,32,33,-1,34,30,31,-1,33,34,31,-1,36,33,31,-1,36,31,35,-1,24,23,31,-1,31,30,24,-1,23,25,35,-1,35,31,23,-1,27,26,32,-1,32,36,27,-1,26,28,33,-1,33,32,26,-1,28,29,34,-1,34,33,28,-1,29,24,30,-1,30,34,29,-1,36,35,37,-1,12,35,25,-1,27,36,13,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([1,14,18,-1,3,4,5,-1,5,6,3,-1,1,0,4,-1,4,3,1,-1,0,2,5,-1,5,4,0,-1,14,1,3,-1,3,6,14,-1,19,2,0,-1,0,16,19,-1,0,1,17,-1,17,16,0,-1,17,1,18,-1,7,23,15,-1,9,8,11,-1,11,10,9,-1,7,9,10,-1,10,12,7,-1,12,10,11,-1,11,13,12,-1,15,8,9,-1,9,7,15,-1,20,21,12,-1,12,13,20,-1,12,21,22,-1,22,7,12,-1,22,23,7,-1,18,14,25,-1,25,24,18,-1,15,23,26,-1,26,25,15,-1,29,33,32,-1,32,27,29,-1,41,27,32,-1,32,43,41,-1,30,29,27,-1,27,28,30,-1,42,28,27,-1,27,41,42,-1,28,42,48,-1,48,31,28,-1,35,34,37,-1,37,36,35,-1,44,45,37,-1,37,34,44,-1,39,38,34,-1,34,35,39,-1,46,44,34,-1,34,38,46,-1,38,40,47,-1,47,46,38,-1,52,53,54,-1,55,49,50,-1,54,55,50,-1,52,54,50,-1,52,50,51,-1,42,41,50,-1,50,49,42,-1,41,43,51,-1,51,50,41,-1,45,44,53,-1,53,52,45,-1,44,46,54,-1,54,53,44,-1,46,47,55,-1,55,54,46,-1,48,42,49,-1,49,55,48,-1,52,51,56,-1,18,24,43,-1,22,52,23,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0.8503),doubleToFloat(-0.0167),doubleToFloat(-1.492),doubleToFloat(1.443),doubleToFloat(-0.0167),doubleToFloat(0.3823),doubleToFloat(0),doubleToFloat(-0.0167),doubleToFloat(-1.492),doubleToFloat(1.221),doubleToFloat(0.6369),doubleToFloat(0.3141),doubleToFloat(0.7115),doubleToFloat(0.6369),doubleToFloat(-1.298),doubleToFloat(0),doubleToFloat(0.6369),doubleToFloat(-1.298),doubleToFloat(0),doubleToFloat(0.6368),doubleToFloat(1.305),doubleToFloat(-1.443),doubleToFloat(-0.0167),doubleToFloat(0.3823),doubleToFloat(-1.221),doubleToFloat(0.6369),doubleToFloat(0.3141),doubleToFloat(-0.7115),doubleToFloat(0.6369),doubleToFloat(-1.298),doubleToFloat(-0.8503),doubleToFloat(-0.0167),doubleToFloat(-1.492),doubleToFloat(0),doubleToFloat(-0.0167),doubleToFloat(1.553),doubleToFloat(1.476),doubleToFloat(-0.2577),doubleToFloat(1.268),doubleToFloat(-1.476),doubleToFloat(-0.2577),doubleToFloat(1.268),doubleToFloat(1.226),doubleToFloat(-1.676),doubleToFloat(-2.553),doubleToFloat(1.226),doubleToFloat(-3.436),doubleToFloat(-1.492),doubleToFloat(0),doubleToFloat(-3.436),doubleToFloat(-1.492),doubleToFloat(0.965),doubleToFloat(-0.5229),doubleToFloat(-1.815),doubleToFloat(0),doubleToFloat(-0.5229),doubleToFloat(-1.815),doubleToFloat(-1.226),doubleToFloat(-1.676),doubleToFloat(-2.553),doubleToFloat(0),doubleToFloat(-1.676),doubleToFloat(-2.553),doubleToFloat(-0.965),doubleToFloat(-0.5229),doubleToFloat(-1.815),doubleToFloat(-1.226),doubleToFloat(-3.436),doubleToFloat(-1.492),doubleToFloat(2.548),doubleToFloat(-1.676),doubleToFloat(0.3823),doubleToFloat(1.819),doubleToFloat(-3.436),doubleToFloat(0.3823),doubleToFloat(1.78),doubleToFloat(-0.5229),doubleToFloat(0.3823),doubleToFloat(-2.548),doubleToFloat(-1.676),doubleToFloat(0.3823),doubleToFloat(-1.78),doubleToFloat(-0.5229),doubleToFloat(0.3823),doubleToFloat(-1.819),doubleToFloat(-3.436),doubleToFloat(0.3823),doubleToFloat(0),doubleToFloat(-3.436),doubleToFloat(0.3823),doubleToFloat(1.619),doubleToFloat(-3.302),doubleToFloat(1.21),doubleToFloat(2.212),doubleToFloat(-1.709),doubleToFloat(1.21),doubleToFloat(-2.212),doubleToFloat(-1.709),doubleToFloat(1.21),doubleToFloat(-1.619),doubleToFloat(-3.302),doubleToFloat(1.21),doubleToFloat(0),doubleToFloat(-3.302),doubleToFloat(1.21),doubleToFloat(1.393),doubleToFloat(-0.8117),doubleToFloat(1.248),doubleToFloat(-1.393),doubleToFloat(-0.8117),doubleToFloat(1.248),doubleToFloat(0),doubleToFloat(-0.573),doubleToFloat(1.515)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.4216),doubleToFloat(0.1651),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.4216),doubleToFloat(0.1651),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4216),doubleToFloat(0.1651),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4216),doubleToFloat(0.1651),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.3861),doubleToFloat(0.1398),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.3836),doubleToFloat(0.1404),doubleToFloat(0.3836),doubleToFloat(0.1404),doubleToFloat(0.3861),doubleToFloat(0.1398),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.3873),doubleToFloat(0.0706),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3873),doubleToFloat(0.0706),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3861),doubleToFloat(0.1398),doubleToFloat(0.3836),doubleToFloat(0.1404),doubleToFloat(0.3873),doubleToFloat(0.0706),doubleToFloat(0.3873),doubleToFloat(0.0706),doubleToFloat(0.3836),doubleToFloat(0.1404),doubleToFloat(0.3861),doubleToFloat(0.1398),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4244),doubleToFloat(0.1312)], Java.type("float[]"))))))))
                  .addChild(new HAnimJoint("hanim_l_talocrural").setName("l_metatarsophalangeal_2").setDEF("hanim_l_metatarsophalangeal_2").setCenter(Java.to([doubleToFloat(3.388),doubleToFloat(2.908),doubleToFloat(0.7441)], Java.type("float[]")))
                    .addChild(new HAnimSegment("hanim_l_metatarsophalangeal_2").setName("l_tarsal_proximal_phalanx_2").setDEF("hanim_l_tarsal_proximal_phalanx_2")
                      .addChild(new Transform().setTranslation(Java.to([doubleToFloat(3.388),doubleToFloat(2.908),doubleToFloat(0.7441)], Java.type("float[]")))
                        .addChild(new Shape()
                          .setAppearance(new Appearance()
                            .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                            .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                          .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([3,4,25,-1,3,25,26,-1,0,3,26,-1,1,0,26,-1,26,10,1,-1,1,10,12,-1,12,9,1,-1,2,34,25,-1,25,4,2,-1,31,8,6,-1,32,31,6,-1,5,32,6,-1,7,11,32,-1,32,5,7,-1,7,9,12,-1,12,11,7,-1,2,8,31,-1,31,34,2,-1,15,16,17,-1,15,17,18,-1,15,18,19,-1,14,15,19,-1,14,19,13,-1,0,1,14,-1,14,13,0,-1,1,9,15,-1,15,14,1,-1,9,7,16,-1,16,15,9,-1,7,5,17,-1,17,16,7,-1,5,6,18,-1,18,17,5,-1,6,3,19,-1,19,18,6,-1,3,0,13,-1,13,19,3,-1,6,8,2,-1,3,6,2,-1,4,3,2,-1,23,21,20,-1,20,24,23,-1,29,22,21,-1,21,23,29,-1,22,29,33,-1,20,21,26,-1,26,25,20,-1,26,21,22,-1,22,10,26,-1,10,22,33,-1,33,12,10,-1,34,24,20,-1,20,25,34,-1,23,24,28,-1,28,27,23,-1,29,23,27,-1,27,30,29,-1,30,33,29,-1,28,31,32,-1,32,27,28,-1,32,11,30,-1,30,27,32,-1,11,12,33,-1,33,30,11,-1,34,31,28,-1,28,24,34,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([4,5,12,-1,4,12,13,-1,0,4,13,-1,1,0,13,-1,13,14,1,-1,1,14,19,-1,19,3,1,-1,2,21,12,-1,12,5,2,-1,15,10,7,-1,16,15,7,-1,6,16,7,-1,8,17,16,-1,16,6,8,-1,8,11,18,-1,18,17,8,-1,9,10,15,-1,15,20,9,-1,24,25,26,-1,24,26,27,-1,24,27,28,-1,23,24,28,-1,23,28,22,-1,0,1,23,-1,23,22,0,-1,1,3,24,-1,24,23,1,-1,11,8,25,-1,25,24,11,-1,8,6,26,-1,26,25,8,-1,6,7,27,-1,27,26,6,-1,7,4,28,-1,28,27,7,-1,4,0,22,-1,22,28,4,-1,7,10,9,-1,4,7,9,-1,5,4,9,-1,30,32,31,-1,31,29,30,-1,33,34,32,-1,32,30,33,-1,34,33,35,-1,31,32,37,-1,37,36,31,-1,37,32,34,-1,34,38,37,-1,38,34,35,-1,35,39,38,-1,40,29,31,-1,31,36,40,-1,41,44,43,-1,43,42,41,-1,45,41,42,-1,42,46,45,-1,46,50,45,-1,43,47,48,-1,48,42,43,-1,48,49,46,-1,46,42,48,-1,49,51,50,-1,50,46,49,-1,52,47,43,-1,43,44,52,-1], Java.type("int[]")))
                            .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(2.548),doubleToFloat(-1.416),doubleToFloat(-0.8988),doubleToFloat(1.819),doubleToFloat(-3.176),doubleToFloat(-0.8988),doubleToFloat(0),doubleToFloat(0.2435),doubleToFloat(0.2718),doubleToFloat(1.78),doubleToFloat(-0.2627),doubleToFloat(-0.8989),doubleToFloat(1.476),doubleToFloat(0.0025),doubleToFloat(-0.0134),doubleToFloat(-2.548),doubleToFloat(-1.416),doubleToFloat(-0.8988),doubleToFloat(-1.78),doubleToFloat(-0.2627),doubleToFloat(-0.8989),doubleToFloat(-1.819),doubleToFloat(-3.176),doubleToFloat(-0.8988),doubleToFloat(-1.476),doubleToFloat(0.0025),doubleToFloat(-0.0134),doubleToFloat(0),doubleToFloat(-3.176),doubleToFloat(-0.8988),doubleToFloat(1.863),doubleToFloat(-3.176),doubleToFloat(0.8155),doubleToFloat(-1.863),doubleToFloat(-3.176),doubleToFloat(0.8155),doubleToFloat(0),doubleToFloat(-3.176),doubleToFloat(0.8155),doubleToFloat(2.094),doubleToFloat(-1.441),doubleToFloat(-1.699),doubleToFloat(1.524),doubleToFloat(-2.561),doubleToFloat(-1.699),doubleToFloat(0),doubleToFloat(-2.561),doubleToFloat(-1.699),doubleToFloat(-1.524),doubleToFloat(-2.561),doubleToFloat(-1.699),doubleToFloat(-2.094),doubleToFloat(-1.441),doubleToFloat(-1.699),doubleToFloat(-1.516),doubleToFloat(-0.4945),doubleToFloat(-1.699),doubleToFloat(1.516),doubleToFloat(-0.4945),doubleToFloat(-1.699),doubleToFloat(1.553),doubleToFloat(-0.5642),doubleToFloat(2.069),doubleToFloat(1.929),doubleToFloat(-1.973),doubleToFloat(3.676),doubleToFloat(1.929),doubleToFloat(-3.176),doubleToFloat(3.35),doubleToFloat(0),doubleToFloat(-1.973),doubleToFloat(4.847),doubleToFloat(0),doubleToFloat(-0.4757),doubleToFloat(3.505),doubleToFloat(1.514),doubleToFloat(-0.2808),doubleToFloat(1.028),doubleToFloat(2.316),doubleToFloat(-1.625),doubleToFloat(0.8155),doubleToFloat(-1.929),doubleToFloat(-1.973),doubleToFloat(3.676),doubleToFloat(-1.553),doubleToFloat(-0.5642),doubleToFloat(2.069),doubleToFloat(0),doubleToFloat(-3.176),doubleToFloat(4.521),doubleToFloat(-1.929),doubleToFloat(-3.176),doubleToFloat(3.35),doubleToFloat(-1.514),doubleToFloat(-0.2808),doubleToFloat(1.028),doubleToFloat(-2.316),doubleToFloat(-1.625),doubleToFloat(0.8155),doubleToFloat(0),doubleToFloat(-3.176),doubleToFloat(3.35),doubleToFloat(0),doubleToFloat(-0.0239),doubleToFloat(1.474)], Java.type("float[]"))))
                            .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.464),doubleToFloat(0.1246),doubleToFloat(0.4607),doubleToFloat(0.0558),doubleToFloat(0.4904),doubleToFloat(0.0166),doubleToFloat(0.464),doubleToFloat(0.1246),doubleToFloat(0.4607),doubleToFloat(0.0558),doubleToFloat(0.4904),doubleToFloat(0.0166),doubleToFloat(0.4949),doubleToFloat(0.0186),doubleToFloat(0.4949),doubleToFloat(0.0186),doubleToFloat(0.4868),doubleToFloat(0.1432),doubleToFloat(0.4868),doubleToFloat(0.1432),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.532),doubleToFloat(0.098),doubleToFloat(0.5645),doubleToFloat(0.0707),doubleToFloat(0.4885),doubleToFloat(0.102),doubleToFloat(0.5026),doubleToFloat(0.044),doubleToFloat(0.5945),doubleToFloat(0.0186),doubleToFloat(0.5487),doubleToFloat(0.0186),doubleToFloat(0.5487),doubleToFloat(0.0186),doubleToFloat(0.464),doubleToFloat(0.1246),doubleToFloat(0.4607),doubleToFloat(0.0558),doubleToFloat(0.4904),doubleToFloat(0.0166),doubleToFloat(0.4949),doubleToFloat(0.0186),doubleToFloat(0.4868),doubleToFloat(0.1432),doubleToFloat(0.5645),doubleToFloat(0.0707),doubleToFloat(0.5026),doubleToFloat(0.044),doubleToFloat(0.4885),doubleToFloat(0.102),doubleToFloat(0.532),doubleToFloat(0.098),doubleToFloat(0.5945),doubleToFloat(0.0186),doubleToFloat(0.5487),doubleToFloat(0.0186),doubleToFloat(0.464),doubleToFloat(0.1246),doubleToFloat(0.4607),doubleToFloat(0.0558),doubleToFloat(0.4904),doubleToFloat(0.0166),doubleToFloat(0.5487),doubleToFloat(0.0186),doubleToFloat(0.4949),doubleToFloat(0.0186),doubleToFloat(0.4868),doubleToFloat(0.1432)], Java.type("float[]"))))))))))))
            .addChild(new HAnimJoint("hanim_humanoid_root").setName("r_hip").setDEF("hanim_r_hip").setCenter(Java.to([doubleToFloat(-3.551),doubleToFloat(29.33),doubleToFloat(-0.1267)], Java.type("float[]")))
              .addChild(new HAnimSegment("hanim_r_hip").setName("r_thigh").setDEF("hanim_r_thigh")
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-3.551),doubleToFloat(29.33),doubleToFloat(-0.1267)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                      .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                    .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([31,32,33,-1,33,34,28,-1,31,33,28,-1,31,28,29,-1,31,29,30,-1,8,1,0,-1,0,7,8,-1,9,2,1,-1,1,8,9,-1,10,3,2,-1,2,9,10,-1,11,4,3,-1,3,10,11,-1,12,5,4,-1,4,11,12,-1,13,6,5,-1,5,12,13,-1,7,0,6,-1,6,13,7,-1,15,8,7,-1,7,14,15,-1,16,9,8,-1,8,15,16,-1,17,10,9,-1,9,16,17,-1,18,11,10,-1,10,17,18,-1,19,12,11,-1,11,18,19,-1,20,13,12,-1,12,19,20,-1,14,7,13,-1,13,20,14,-1,22,15,14,-1,14,21,22,-1,23,16,15,-1,15,22,23,-1,24,17,16,-1,16,23,24,-1,25,18,17,-1,17,24,25,-1,26,19,18,-1,18,25,26,-1,27,20,19,-1,19,26,27,-1,21,14,20,-1,20,27,21,-1,1,29,28,-1,28,0,1,-1,2,30,29,-1,29,1,2,-1,3,31,30,-1,30,2,3,-1,4,32,31,-1,31,3,4,-1,5,33,32,-1,32,4,5,-1,6,34,33,-1,33,5,6,-1,0,28,34,-1,34,6,0,-1,35,22,21,-1,21,36,35,-1,37,23,22,-1,22,35,37,-1,38,24,23,-1,23,37,38,-1,39,25,24,-1,24,38,39,-1,40,26,25,-1,25,39,40,-1,41,27,26,-1,26,40,41,-1,36,21,27,-1,27,41,36,-1,36,42,35,-1,35,42,37,-1,37,42,38,-1,38,42,39,-1,39,42,40,-1,40,42,41,-1,41,42,36,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([3,4,5,-1,5,6,1,-1,3,5,1,-1,3,1,0,-1,3,0,2,-1,8,10,7,-1,7,9,8,-1,11,12,10,-1,10,8,11,-1,13,14,12,-1,12,11,13,-1,15,16,14,-1,14,13,15,-1,17,18,16,-1,16,15,17,-1,19,20,18,-1,18,17,19,-1,9,7,20,-1,20,19,9,-1,21,8,9,-1,9,22,21,-1,23,11,8,-1,8,21,23,-1,24,13,11,-1,11,23,24,-1,25,15,13,-1,13,24,25,-1,26,17,15,-1,15,25,26,-1,27,19,17,-1,17,26,27,-1,22,9,19,-1,19,27,22,-1,28,21,22,-1,22,29,28,-1,30,23,21,-1,21,28,30,-1,31,24,23,-1,23,30,31,-1,32,25,24,-1,24,31,32,-1,33,26,25,-1,25,32,33,-1,34,27,26,-1,26,33,34,-1,29,22,27,-1,27,34,29,-1,10,0,1,-1,1,7,10,-1,12,2,0,-1,0,10,12,-1,14,3,2,-1,2,12,14,-1,16,4,3,-1,3,14,16,-1,18,5,4,-1,4,16,18,-1,20,6,5,-1,5,18,20,-1,7,1,6,-1,6,20,7,-1,35,28,29,-1,29,36,35,-1,37,30,28,-1,28,35,37,-1,38,31,30,-1,30,37,38,-1,39,32,31,-1,31,38,39,-1,40,33,32,-1,32,39,40,-1,41,34,33,-1,33,40,41,-1,36,29,34,-1,34,41,36,-1,36,42,35,-1,35,42,37,-1,37,42,38,-1,38,42,39,-1,39,42,40,-1,40,42,41,-1,41,42,36,-1], Java.type("int[]")))
                      .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-2.616),doubleToFloat(1.989),doubleToFloat(0),doubleToFloat(-1.452),doubleToFloat(1.989),doubleToFloat(2.836),doubleToFloat(1.163),doubleToFloat(1.989),doubleToFloat(3.536),doubleToFloat(2.975),doubleToFloat(1.989),doubleToFloat(1.574),doubleToFloat(2.975),doubleToFloat(1.989),doubleToFloat(-1.574),doubleToFloat(1.163),doubleToFloat(1.989),doubleToFloat(-3.536),doubleToFloat(-1.452),doubleToFloat(1.989),doubleToFloat(-2.836),doubleToFloat(-2.616),doubleToFloat(-1.325),doubleToFloat(0),doubleToFloat(-1.452),doubleToFloat(-1.325),doubleToFloat(2.836),doubleToFloat(1.163),doubleToFloat(-1.325),doubleToFloat(3.536),doubleToFloat(2.975),doubleToFloat(-1.325),doubleToFloat(1.574),doubleToFloat(2.975),doubleToFloat(-1.325),doubleToFloat(-1.574),doubleToFloat(1.163),doubleToFloat(-1.325),doubleToFloat(-3.536),doubleToFloat(-1.452),doubleToFloat(-1.325),doubleToFloat(-2.836),doubleToFloat(-2.616),doubleToFloat(-7.064),doubleToFloat(0),doubleToFloat(-1.452),doubleToFloat(-7.064),doubleToFloat(2.836),doubleToFloat(1.163),doubleToFloat(-7.064),doubleToFloat(3.536),doubleToFloat(2.975),doubleToFloat(-7.064),doubleToFloat(1.574),doubleToFloat(2.975),doubleToFloat(-7.064),doubleToFloat(-1.574),doubleToFloat(1.163),doubleToFloat(-7.064),doubleToFloat(-3.536),doubleToFloat(-1.452),doubleToFloat(-7.064),doubleToFloat(-2.836),doubleToFloat(-2.975),doubleToFloat(-11.91),doubleToFloat(0),doubleToFloat(-1.676),doubleToFloat(-11.91),doubleToFloat(3.165),doubleToFloat(1.243),doubleToFloat(-11.91),doubleToFloat(3.947),doubleToFloat(2.964),doubleToFloat(-11.91),doubleToFloat(1.756),doubleToFloat(2.964),doubleToFloat(-11.91),doubleToFloat(-1.756),doubleToFloat(1.243),doubleToFloat(-11.91),doubleToFloat(-3.947),doubleToFloat(-1.676),doubleToFloat(-11.91),doubleToFloat(-3.165),doubleToFloat(-1.812),doubleToFloat(3.747),doubleToFloat(0),doubleToFloat(-0.9506),doubleToFloat(3.747),doubleToFloat(2.098),doubleToFloat(0.9843),doubleToFloat(3.747),doubleToFloat(2.616),doubleToFloat(2.536),doubleToFloat(3.747),doubleToFloat(1.164),doubleToFloat(2.536),doubleToFloat(3.747),doubleToFloat(-1.164),doubleToFloat(0.9843),doubleToFloat(3.747),doubleToFloat(-2.616),doubleToFloat(-0.9506),doubleToFloat(3.747),doubleToFloat(-2.098),doubleToFloat(-0.9661),doubleToFloat(-14.81),doubleToFloat(2.027),doubleToFloat(-1.798),doubleToFloat(-14.81),doubleToFloat(0),doubleToFloat(0.9034),doubleToFloat(-14.81),doubleToFloat(2.528),doubleToFloat(2.006),doubleToFloat(-14.81),doubleToFloat(1.125),doubleToFloat(2.006),doubleToFloat(-14.81),doubleToFloat(-1.125),doubleToFloat(0.9034),doubleToFloat(-14.81),doubleToFloat(-2.528),doubleToFloat(-0.9661),doubleToFloat(-14.81),doubleToFloat(-2.027),doubleToFloat(0.2983),doubleToFloat(-16.16),doubleToFloat(0)], Java.type("float[]"))))
                      .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.7912),doubleToFloat(0.3382),doubleToFloat(0.7912),doubleToFloat(0.364),doubleToFloat(0.7912),doubleToFloat(0.2804),doubleToFloat(0.7912),doubleToFloat(0.234),doubleToFloat(0.7912),doubleToFloat(0.234),doubleToFloat(0.7912),doubleToFloat(0.2804),doubleToFloat(0.7912),doubleToFloat(0.3382),doubleToFloat(0.7762),doubleToFloat(0.388),doubleToFloat(0.748),doubleToFloat(0.3532),doubleToFloat(0.748),doubleToFloat(0.388),doubleToFloat(0.7762),doubleToFloat(0.3532),doubleToFloat(0.748),doubleToFloat(0.275),doubleToFloat(0.7762),doubleToFloat(0.275),doubleToFloat(0.748),doubleToFloat(0.2209),doubleToFloat(0.7762),doubleToFloat(0.2209),doubleToFloat(0.748),doubleToFloat(0.2209),doubleToFloat(0.7762),doubleToFloat(0.2209),doubleToFloat(0.748),doubleToFloat(0.275),doubleToFloat(0.7762),doubleToFloat(0.275),doubleToFloat(0.748),doubleToFloat(0.3532),doubleToFloat(0.7762),doubleToFloat(0.3532),doubleToFloat(0.6856),doubleToFloat(0.3532),doubleToFloat(0.6856),doubleToFloat(0.388),doubleToFloat(0.6856),doubleToFloat(0.275),doubleToFloat(0.6856),doubleToFloat(0.2209),doubleToFloat(0.6856),doubleToFloat(0.2209),doubleToFloat(0.6856),doubleToFloat(0.275),doubleToFloat(0.6856),doubleToFloat(0.3532),doubleToFloat(0.6315),doubleToFloat(0.3608),doubleToFloat(0.6315),doubleToFloat(0.3996),doubleToFloat(0.6315),doubleToFloat(0.2735),doubleToFloat(0.6315),doubleToFloat(0.222),doubleToFloat(0.6315),doubleToFloat(0.222),doubleToFloat(0.6315),doubleToFloat(0.2735),doubleToFloat(0.6315),doubleToFloat(0.3608),doubleToFloat(0.6248),doubleToFloat(0.3387),doubleToFloat(0.6248),doubleToFloat(0.3636),doubleToFloat(0.6248),doubleToFloat(0.2828),doubleToFloat(0.6248),doubleToFloat(0.2498),doubleToFloat(0.6248),doubleToFloat(0.2498),doubleToFloat(0.6248),doubleToFloat(0.2828),doubleToFloat(0.6248),doubleToFloat(0.3387),doubleToFloat(0.6133),doubleToFloat(0.3009)], Java.type("float[]"))))))))
              .addChild(new HAnimJoint("hanim_r_hip").setName("r_knee").setDEF("hanim_r_knee").setCenter(Java.to([doubleToFloat(-3.71),doubleToFloat(15.48),doubleToFloat(-0.1446)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_r_knee").setName("r_calf").setDEF("hanim_r_calf")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-3.71),doubleToFloat(15.48),doubleToFloat(-0.1446)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([45,46,47,-1,47,48,42,-1,45,47,42,-1,45,42,43,-1,45,43,44,-1,8,1,0,-1,0,7,8,-1,9,2,1,-1,1,8,9,-1,10,3,2,-1,2,9,10,-1,11,4,3,-1,3,10,11,-1,12,5,4,-1,4,11,12,-1,13,6,5,-1,5,12,13,-1,7,0,6,-1,6,13,7,-1,15,8,7,-1,7,14,15,-1,16,9,8,-1,8,15,16,-1,17,10,9,-1,9,16,17,-1,18,11,10,-1,10,17,18,-1,19,12,11,-1,11,18,19,-1,20,13,12,-1,12,19,20,-1,14,7,13,-1,13,20,14,-1,22,15,14,-1,14,21,22,-1,23,16,15,-1,15,22,23,-1,24,17,16,-1,16,23,24,-1,25,18,17,-1,17,24,25,-1,26,19,18,-1,18,25,26,-1,27,20,19,-1,19,26,27,-1,21,14,20,-1,20,27,21,-1,58,57,56,-1,56,62,61,-1,56,61,60,-1,58,56,60,-1,58,60,59,-1,21,28,29,-1,29,22,21,-1,22,29,30,-1,30,23,22,-1,23,30,31,-1,31,24,23,-1,24,31,32,-1,32,25,24,-1,25,32,33,-1,33,26,25,-1,26,33,34,-1,34,27,26,-1,27,34,28,-1,28,21,27,-1,28,35,36,-1,36,29,28,-1,29,36,37,-1,37,30,29,-1,30,37,38,-1,38,31,30,-1,31,38,39,-1,39,32,31,-1,32,39,40,-1,40,33,32,-1,33,40,41,-1,41,34,33,-1,34,41,35,-1,35,28,34,-1,1,43,42,-1,42,0,1,-1,2,44,43,-1,43,1,2,-1,3,45,44,-1,44,2,3,-1,4,46,45,-1,45,3,4,-1,5,47,46,-1,46,4,5,-1,6,48,47,-1,47,5,6,-1,0,42,48,-1,48,6,0,-1,35,49,50,-1,50,36,35,-1,36,50,51,-1,51,37,36,-1,37,51,52,-1,52,38,37,-1,38,52,53,-1,53,39,38,-1,39,53,54,-1,54,40,39,-1,40,54,55,-1,55,41,40,-1,41,55,49,-1,49,35,41,-1,49,56,57,-1,57,50,49,-1,50,57,58,-1,58,51,50,-1,51,58,59,-1,59,52,51,-1,52,59,60,-1,60,53,52,-1,53,60,61,-1,61,54,53,-1,54,61,62,-1,62,55,54,-1,55,62,56,-1,56,49,55,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([56,57,58,-1,58,59,52,-1,56,58,52,-1,56,52,53,-1,56,53,55,-1,8,1,0,-1,0,7,8,-1,9,2,1,-1,1,8,9,-1,10,3,2,-1,2,9,10,-1,11,4,3,-1,3,10,11,-1,12,5,4,-1,4,11,12,-1,29,30,5,-1,5,12,29,-1,7,0,6,-1,6,13,7,-1,15,8,7,-1,7,14,15,-1,16,9,8,-1,8,15,16,-1,17,10,9,-1,9,16,17,-1,18,11,10,-1,10,17,18,-1,19,12,11,-1,11,18,19,-1,31,32,12,-1,12,19,31,-1,14,7,13,-1,13,20,14,-1,22,15,14,-1,14,21,22,-1,23,16,15,-1,15,22,23,-1,24,17,16,-1,16,23,24,-1,25,18,17,-1,17,24,25,-1,26,19,18,-1,18,25,26,-1,33,34,19,-1,19,26,33,-1,21,14,20,-1,20,27,21,-1,71,69,68,-1,68,70,74,-1,68,74,73,-1,71,68,73,-1,71,73,72,-1,21,36,37,-1,37,22,21,-1,22,37,39,-1,39,23,22,-1,23,39,40,-1,40,24,23,-1,24,40,41,-1,41,25,24,-1,25,41,42,-1,42,26,25,-1,26,42,43,-1,43,35,26,-1,27,38,36,-1,36,21,27,-1,36,44,45,-1,45,37,36,-1,37,45,47,-1,47,39,37,-1,39,47,48,-1,48,40,39,-1,40,48,49,-1,49,41,40,-1,41,49,50,-1,50,42,41,-1,42,50,51,-1,51,43,42,-1,38,46,44,-1,44,36,38,-1,1,53,52,-1,52,0,1,-1,2,55,53,-1,53,1,2,-1,3,56,55,-1,55,2,3,-1,4,57,56,-1,56,3,4,-1,5,58,57,-1,57,4,5,-1,28,59,58,-1,58,5,28,-1,0,52,54,-1,54,6,0,-1,44,60,61,-1,61,45,44,-1,45,61,63,-1,63,47,45,-1,47,63,64,-1,64,48,47,-1,48,64,65,-1,65,49,48,-1,49,65,66,-1,66,50,49,-1,50,66,67,-1,67,51,50,-1,46,62,60,-1,60,44,46,-1,60,68,69,-1,69,61,60,-1,61,69,71,-1,71,63,61,-1,63,71,72,-1,72,64,63,-1,64,72,73,-1,73,65,64,-1,65,73,74,-1,74,66,65,-1,66,74,75,-1,75,67,66,-1,62,70,68,-1,68,60,62,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-2.616),doubleToFloat(-0.0823),doubleToFloat(0.0541),doubleToFloat(-1.452),doubleToFloat(-0.0823),doubleToFloat(2.89),doubleToFloat(1.163),doubleToFloat(-0.0823),doubleToFloat(3.59),doubleToFloat(2.975),doubleToFloat(-0.0823),doubleToFloat(1.628),doubleToFloat(2.975),doubleToFloat(-0.0823),doubleToFloat(-1.52),doubleToFloat(1.163),doubleToFloat(-0.0823),doubleToFloat(-3.482),doubleToFloat(-1.452),doubleToFloat(-0.0823),doubleToFloat(-2.782),doubleToFloat(-2.616),doubleToFloat(-3.395),doubleToFloat(0.0541),doubleToFloat(-1.452),doubleToFloat(-3.395),doubleToFloat(2.89),doubleToFloat(1.163),doubleToFloat(-3.395),doubleToFloat(3.59),doubleToFloat(2.975),doubleToFloat(-3.395),doubleToFloat(1.628),doubleToFloat(2.975),doubleToFloat(-3.395),doubleToFloat(-1.52),doubleToFloat(1.163),doubleToFloat(-3.395),doubleToFloat(-3.482),doubleToFloat(-1.452),doubleToFloat(-3.395),doubleToFloat(-2.782),doubleToFloat(-2.708),doubleToFloat(-6.91),doubleToFloat(0.0541),doubleToFloat(-1.545),doubleToFloat(-6.91),doubleToFloat(2.89),doubleToFloat(1.071),doubleToFloat(-6.91),doubleToFloat(3.59),doubleToFloat(2.882),doubleToFloat(-6.91),doubleToFloat(1.628),doubleToFloat(2.882),doubleToFloat(-6.91),doubleToFloat(-1.52),doubleToFloat(1.071),doubleToFloat(-6.91),doubleToFloat(-3.482),doubleToFloat(-1.545),doubleToFloat(-6.91),doubleToFloat(-2.782),doubleToFloat(-2.975),doubleToFloat(-11.77),doubleToFloat(0.0541),doubleToFloat(-1.676),doubleToFloat(-11.77),doubleToFloat(3.219),doubleToFloat(1.243),doubleToFloat(-11.77),doubleToFloat(4.001),doubleToFloat(2.964),doubleToFloat(-11.77),doubleToFloat(1.81),doubleToFloat(2.964),doubleToFloat(-11.77),doubleToFloat(-1.702),doubleToFloat(1.243),doubleToFloat(-11.77),doubleToFloat(-3.892),doubleToFloat(-1.676),doubleToFloat(-11.77),doubleToFloat(-3.111),doubleToFloat(-1.896),doubleToFloat(-7.789),doubleToFloat(0.0541),doubleToFloat(-1.003),doubleToFloat(-7.789),doubleToFloat(2.23),doubleToFloat(1.003),doubleToFloat(-7.789),doubleToFloat(2.767),doubleToFloat(2.326),doubleToFloat(-7.789),doubleToFloat(1.261),doubleToFloat(2.326),doubleToFloat(-7.789),doubleToFloat(-1.153),doubleToFloat(1.003),doubleToFloat(-7.789),doubleToFloat(-2.659),doubleToFloat(-1.003),doubleToFloat(-7.789),doubleToFloat(-2.122),doubleToFloat(-1.905),doubleToFloat(-9.68),doubleToFloat(0.0541),doubleToFloat(-1.082),doubleToFloat(-9.68),doubleToFloat(1.782),doubleToFloat(0.7654),doubleToFloat(-9.68),doubleToFloat(2.209),doubleToFloat(2.247),doubleToFloat(-9.68),doubleToFloat(1.013),doubleToFloat(2.247),doubleToFloat(-9.68),doubleToFloat(-0.9049),doubleToFloat(0.7654),doubleToFloat(-9.68),doubleToFloat(-2.101),doubleToFloat(-1.082),doubleToFloat(-9.68),doubleToFloat(-1.674),doubleToFloat(-1.812),doubleToFloat(1.676),doubleToFloat(0.0541),doubleToFloat(-0.9506),doubleToFloat(1.676),doubleToFloat(2.152),doubleToFloat(0.9843),doubleToFloat(1.676),doubleToFloat(2.67),doubleToFloat(2.536),doubleToFloat(1.676),doubleToFloat(1.218),doubleToFloat(2.536),doubleToFloat(1.676),doubleToFloat(-1.11),doubleToFloat(0.9843),doubleToFloat(1.676),doubleToFloat(-2.562),doubleToFloat(-0.9506),doubleToFloat(1.676),doubleToFloat(-2.044),doubleToFloat(-1.628),doubleToFloat(-12.93),doubleToFloat(0.0541),doubleToFloat(-0.9097),doubleToFloat(-12.93),doubleToFloat(1.709),doubleToFloat(0.7038),doubleToFloat(-12.93),doubleToFloat(2.082),doubleToFloat(1.998),doubleToFloat(-12.93),doubleToFloat(1.037),doubleToFloat(1.998),doubleToFloat(-12.93),doubleToFloat(-0.7834),doubleToFloat(0.7038),doubleToFloat(-12.93),doubleToFloat(-1.828),doubleToFloat(-0.9097),doubleToFloat(-12.93),doubleToFloat(-1.455),doubleToFloat(-0.5546),doubleToFloat(-13.79),doubleToFloat(0.0541),doubleToFloat(-0.2406),doubleToFloat(-13.79),doubleToFloat(0.8599),doubleToFloat(0.465),doubleToFloat(-13.79),doubleToFloat(1.023),doubleToFloat(1.031),doubleToFloat(-13.79),doubleToFloat(0.5662),doubleToFloat(1.031),doubleToFloat(-13.79),doubleToFloat(-0.3121),doubleToFloat(0.465),doubleToFloat(-13.79),doubleToFloat(-0.7688),doubleToFloat(-0.2406),doubleToFloat(-13.79),doubleToFloat(-0.6058)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.6566),doubleToFloat(0.2462),doubleToFloat(0.6181),doubleToFloat(0.2462),doubleToFloat(0.5796),doubleToFloat(0.2462),doubleToFloat(0.5411),doubleToFloat(0.2462),doubleToFloat(0.5026),doubleToFloat(0.2462),doubleToFloat(0.4641),doubleToFloat(0.2462),doubleToFloat(0.6951),doubleToFloat(0.2462),doubleToFloat(0.6566),doubleToFloat(0.2951),doubleToFloat(0.6181),doubleToFloat(0.2951),doubleToFloat(0.5796),doubleToFloat(0.2951),doubleToFloat(0.5411),doubleToFloat(0.2951),doubleToFloat(0.5026),doubleToFloat(0.2951),doubleToFloat(0.4641),doubleToFloat(0.2951),doubleToFloat(0.6951),doubleToFloat(0.2951),doubleToFloat(0.6566),doubleToFloat(0.3439),doubleToFloat(0.6181),doubleToFloat(0.3439),doubleToFloat(0.5796),doubleToFloat(0.3439),doubleToFloat(0.5411),doubleToFloat(0.3439),doubleToFloat(0.5026),doubleToFloat(0.3439),doubleToFloat(0.4641),doubleToFloat(0.3439),doubleToFloat(0.6951),doubleToFloat(0.3439),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.2462),doubleToFloat(0.4256),doubleToFloat(0.2951),doubleToFloat(0.4256),doubleToFloat(0.2462),doubleToFloat(0.4256),doubleToFloat(0.3439),doubleToFloat(0.4256),doubleToFloat(0.2951),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3439),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.6566),doubleToFloat(0.2462),doubleToFloat(0.6181),doubleToFloat(0.2462),doubleToFloat(0.6951),doubleToFloat(0.2462),doubleToFloat(0.5796),doubleToFloat(0.2462),doubleToFloat(0.5411),doubleToFloat(0.2462),doubleToFloat(0.5026),doubleToFloat(0.2462),doubleToFloat(0.4641),doubleToFloat(0.2462),doubleToFloat(0.4256),doubleToFloat(0.2462),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3927),doubleToFloat(0.6566),doubleToFloat(0.3927),doubleToFloat(0.6181),doubleToFloat(0.3927),doubleToFloat(0.6951),doubleToFloat(0.3927),doubleToFloat(0.5796),doubleToFloat(0.3927),doubleToFloat(0.5411),doubleToFloat(0.3927),doubleToFloat(0.5026),doubleToFloat(0.3927),doubleToFloat(0.4641),doubleToFloat(0.3927),doubleToFloat(0.4256),doubleToFloat(0.3927)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_r_knee").setName("r_talocrural").setDEF("hanim_r_talocrural").setCenter(Java.to([doubleToFloat(-3.388),doubleToFloat(3.168),doubleToFloat(-0.537)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_r_talocrural").setName("r_talus").setDEF("hanim_r_talus")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-3.388),doubleToFloat(3.168),doubleToFloat(-0.537)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([1,12,11,-1,3,6,5,-1,5,4,3,-1,1,3,4,-1,4,0,1,-1,0,4,5,-1,5,2,0,-1,11,6,3,-1,3,1,11,-1,18,17,0,-1,0,2,18,-1,0,17,25,-1,25,1,0,-1,25,12,1,-1,7,11,13,-1,8,9,5,-1,5,6,8,-1,7,10,9,-1,9,8,7,-1,10,2,5,-1,5,9,10,-1,11,7,8,-1,8,6,11,-1,18,2,10,-1,10,21,18,-1,10,7,27,-1,27,21,10,-1,27,7,13,-1,12,35,37,-1,37,11,12,-1,11,37,36,-1,36,13,11,-1,20,14,17,-1,17,18,20,-1,23,25,17,-1,17,14,23,-1,16,15,14,-1,14,20,16,-1,24,23,14,-1,14,15,24,-1,15,16,29,-1,29,24,15,-1,20,18,21,-1,21,19,20,-1,26,19,21,-1,21,27,26,-1,16,20,19,-1,19,22,16,-1,28,22,19,-1,19,26,28,-1,22,28,29,-1,29,16,22,-1,36,35,31,-1,31,30,34,-1,31,34,33,-1,36,31,33,-1,36,33,32,-1,24,30,31,-1,31,23,24,-1,23,31,35,-1,35,25,23,-1,27,36,32,-1,32,26,27,-1,26,32,33,-1,33,28,26,-1,28,33,34,-1,34,29,28,-1,29,34,30,-1,30,24,29,-1,36,37,35,-1,12,25,35,-1,27,13,36,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([1,18,14,-1,3,6,5,-1,5,4,3,-1,1,3,4,-1,4,0,1,-1,0,4,5,-1,5,2,0,-1,14,6,3,-1,3,1,14,-1,19,16,0,-1,0,2,19,-1,0,16,17,-1,17,1,0,-1,17,18,1,-1,7,15,23,-1,9,10,11,-1,11,8,9,-1,7,12,10,-1,10,9,7,-1,12,13,11,-1,11,10,12,-1,15,7,9,-1,9,8,15,-1,20,13,12,-1,12,21,20,-1,12,7,22,-1,22,21,12,-1,22,7,23,-1,18,24,25,-1,25,14,18,-1,15,25,26,-1,26,23,15,-1,29,27,32,-1,32,33,29,-1,41,43,32,-1,32,27,41,-1,30,28,27,-1,27,29,30,-1,42,41,27,-1,27,28,42,-1,28,31,48,-1,48,42,28,-1,35,36,37,-1,37,34,35,-1,44,34,37,-1,37,45,44,-1,39,35,34,-1,34,38,39,-1,46,38,34,-1,34,44,46,-1,38,46,47,-1,47,40,38,-1,52,51,50,-1,50,49,55,-1,50,55,54,-1,52,50,54,-1,52,54,53,-1,42,49,50,-1,50,41,42,-1,41,50,51,-1,51,43,41,-1,45,52,53,-1,53,44,45,-1,44,53,54,-1,54,46,44,-1,46,54,55,-1,55,47,46,-1,48,55,49,-1,49,42,48,-1,52,56,51,-1,18,43,24,-1,22,23,52,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-0.8503),doubleToFloat(-0.0167),doubleToFloat(-1.492),doubleToFloat(-1.443),doubleToFloat(-0.0167),doubleToFloat(0.3823),doubleToFloat(0),doubleToFloat(-0.0167),doubleToFloat(-1.492),doubleToFloat(-1.221),doubleToFloat(0.6369),doubleToFloat(0.3141),doubleToFloat(-0.7115),doubleToFloat(0.6369),doubleToFloat(-1.298),doubleToFloat(0),doubleToFloat(0.6369),doubleToFloat(-1.298),doubleToFloat(0),doubleToFloat(0.6368),doubleToFloat(1.305),doubleToFloat(1.443),doubleToFloat(-0.0167),doubleToFloat(0.3823),doubleToFloat(1.221),doubleToFloat(0.6369),doubleToFloat(0.3141),doubleToFloat(0.7115),doubleToFloat(0.6369),doubleToFloat(-1.298),doubleToFloat(0.8503),doubleToFloat(-0.0167),doubleToFloat(-1.492),doubleToFloat(0),doubleToFloat(-0.0167),doubleToFloat(1.553),doubleToFloat(-1.476),doubleToFloat(-0.2577),doubleToFloat(1.268),doubleToFloat(1.476),doubleToFloat(-0.2577),doubleToFloat(1.268),doubleToFloat(-1.226),doubleToFloat(-1.676),doubleToFloat(-2.553),doubleToFloat(-1.226),doubleToFloat(-3.436),doubleToFloat(-1.492),doubleToFloat(0),doubleToFloat(-3.436),doubleToFloat(-1.492),doubleToFloat(-0.965),doubleToFloat(-0.5229),doubleToFloat(-1.815),doubleToFloat(0),doubleToFloat(-0.5229),doubleToFloat(-1.815),doubleToFloat(1.226),doubleToFloat(-1.676),doubleToFloat(-2.553),doubleToFloat(0),doubleToFloat(-1.676),doubleToFloat(-2.553),doubleToFloat(0.965),doubleToFloat(-0.5229),doubleToFloat(-1.815),doubleToFloat(1.226),doubleToFloat(-3.436),doubleToFloat(-1.492),doubleToFloat(-2.548),doubleToFloat(-1.676),doubleToFloat(0.3823),doubleToFloat(-1.819),doubleToFloat(-3.436),doubleToFloat(0.3823),doubleToFloat(-1.78),doubleToFloat(-0.5229),doubleToFloat(0.3823),doubleToFloat(2.548),doubleToFloat(-1.676),doubleToFloat(0.3823),doubleToFloat(1.78),doubleToFloat(-0.5229),doubleToFloat(0.3823),doubleToFloat(1.819),doubleToFloat(-3.436),doubleToFloat(0.3823),doubleToFloat(0),doubleToFloat(-3.436),doubleToFloat(0.3823),doubleToFloat(-1.619),doubleToFloat(-3.302),doubleToFloat(1.21),doubleToFloat(-2.212),doubleToFloat(-1.709),doubleToFloat(1.21),doubleToFloat(2.212),doubleToFloat(-1.709),doubleToFloat(1.21),doubleToFloat(1.619),doubleToFloat(-3.302),doubleToFloat(1.21),doubleToFloat(0),doubleToFloat(-3.302),doubleToFloat(1.21),doubleToFloat(-1.393),doubleToFloat(-0.8117),doubleToFloat(1.248),doubleToFloat(1.393),doubleToFloat(-0.8117),doubleToFloat(1.248),doubleToFloat(0),doubleToFloat(-0.573),doubleToFloat(1.515)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.4216),doubleToFloat(0.1651),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.4216),doubleToFloat(0.1651),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4216),doubleToFloat(0.1651),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4216),doubleToFloat(0.1651),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.3819),doubleToFloat(0.171),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.3861),doubleToFloat(0.1398),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.3836),doubleToFloat(0.1404),doubleToFloat(0.3836),doubleToFloat(0.1404),doubleToFloat(0.3861),doubleToFloat(0.1398),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.3873),doubleToFloat(0.0706),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3873),doubleToFloat(0.0706),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3861),doubleToFloat(0.1398),doubleToFloat(0.3836),doubleToFloat(0.1404),doubleToFloat(0.3873),doubleToFloat(0.0706),doubleToFloat(0.3873),doubleToFloat(0.0706),doubleToFloat(0.3836),doubleToFloat(0.1404),doubleToFloat(0.3861),doubleToFloat(0.1398),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.3871),doubleToFloat(0.0221),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4244),doubleToFloat(0.1312)], Java.type("float[]"))))))))
                  .addChild(new HAnimJoint("hanim_r_talocrural").setName("r_metatarsophalangeal_2").setDEF("hanim_r_metatarsophalangeal_2").setCenter(Java.to([doubleToFloat(-3.388),doubleToFloat(2.908),doubleToFloat(0.7441)], Java.type("float[]")))
                    .addChild(new HAnimSegment("hanim_r_metatarsophalangeal_2").setName("r_tarsal_proximal_phalanx_2").setDEF("hanim_r_tarsal_proximal_phalanx_2")
                      .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-3.388),doubleToFloat(2.908),doubleToFloat(0.7441)], Java.type("float[]")))
                        .addChild(new Shape()
                          .setAppearance(new Appearance()
                            .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                            .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                          .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([25,4,3,-1,26,25,3,-1,0,26,3,-1,1,10,26,-1,26,0,1,-1,1,9,12,-1,12,10,1,-1,2,4,25,-1,25,34,2,-1,6,8,31,-1,6,31,32,-1,5,6,32,-1,7,5,32,-1,32,11,7,-1,7,11,12,-1,12,9,7,-1,2,34,31,-1,31,8,2,-1,14,13,19,-1,17,16,15,-1,18,17,15,-1,19,18,15,-1,14,19,15,-1,0,13,14,-1,14,1,0,-1,1,14,15,-1,15,9,1,-1,9,15,16,-1,16,7,9,-1,7,16,17,-1,17,5,7,-1,5,17,18,-1,18,6,5,-1,6,18,19,-1,19,3,6,-1,3,19,13,-1,13,0,3,-1,2,8,6,-1,2,6,3,-1,4,2,3,-1,23,24,20,-1,20,21,23,-1,29,23,21,-1,21,22,29,-1,22,33,29,-1,20,25,26,-1,26,21,20,-1,26,10,22,-1,22,21,26,-1,10,12,33,-1,33,22,10,-1,34,25,20,-1,20,24,34,-1,23,27,28,-1,28,24,23,-1,29,30,27,-1,27,23,29,-1,30,29,33,-1,28,27,32,-1,32,31,28,-1,32,27,30,-1,30,11,32,-1,11,30,33,-1,33,12,11,-1,34,24,28,-1,28,31,34,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([12,5,4,-1,13,12,4,-1,0,13,4,-1,1,14,13,-1,13,0,1,-1,1,3,19,-1,19,14,1,-1,2,5,12,-1,12,21,2,-1,7,10,15,-1,7,15,16,-1,6,7,16,-1,8,6,16,-1,16,17,8,-1,8,17,18,-1,18,11,8,-1,9,20,15,-1,15,10,9,-1,23,22,28,-1,26,25,24,-1,27,26,24,-1,28,27,24,-1,23,28,24,-1,0,22,23,-1,23,1,0,-1,1,23,24,-1,24,3,1,-1,11,24,25,-1,25,8,11,-1,8,25,26,-1,26,6,8,-1,6,26,27,-1,27,7,6,-1,7,27,28,-1,28,4,7,-1,4,28,22,-1,22,0,4,-1,9,10,7,-1,9,7,4,-1,5,9,4,-1,30,29,31,-1,31,32,30,-1,33,30,32,-1,32,34,33,-1,34,35,33,-1,31,36,37,-1,37,32,31,-1,37,38,34,-1,34,32,37,-1,38,39,35,-1,35,34,38,-1,40,36,31,-1,31,29,40,-1,41,42,43,-1,43,44,41,-1,45,46,42,-1,42,41,45,-1,46,45,50,-1,43,42,48,-1,48,47,43,-1,48,42,46,-1,46,49,48,-1,49,46,50,-1,50,51,49,-1,52,44,43,-1,43,47,52,-1], Java.type("int[]")))
                            .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-2.548),doubleToFloat(-1.416),doubleToFloat(-0.8988),doubleToFloat(-1.819),doubleToFloat(-3.176),doubleToFloat(-0.8988),doubleToFloat(0),doubleToFloat(0.2435),doubleToFloat(0.2718),doubleToFloat(-1.78),doubleToFloat(-0.2627),doubleToFloat(-0.8989),doubleToFloat(-1.476),doubleToFloat(0.0025),doubleToFloat(-0.0134),doubleToFloat(2.548),doubleToFloat(-1.416),doubleToFloat(-0.8988),doubleToFloat(1.78),doubleToFloat(-0.2627),doubleToFloat(-0.8989),doubleToFloat(1.819),doubleToFloat(-3.176),doubleToFloat(-0.8988),doubleToFloat(1.476),doubleToFloat(0.0025),doubleToFloat(-0.0134),doubleToFloat(0),doubleToFloat(-3.176),doubleToFloat(-0.8988),doubleToFloat(-1.863),doubleToFloat(-3.176),doubleToFloat(0.8155),doubleToFloat(1.863),doubleToFloat(-3.176),doubleToFloat(0.8155),doubleToFloat(0),doubleToFloat(-3.176),doubleToFloat(0.8155),doubleToFloat(-2.094),doubleToFloat(-1.441),doubleToFloat(-1.699),doubleToFloat(-1.524),doubleToFloat(-2.561),doubleToFloat(-1.699),doubleToFloat(0),doubleToFloat(-2.561),doubleToFloat(-1.699),doubleToFloat(1.524),doubleToFloat(-2.561),doubleToFloat(-1.699),doubleToFloat(2.094),doubleToFloat(-1.441),doubleToFloat(-1.699),doubleToFloat(1.516),doubleToFloat(-0.4945),doubleToFloat(-1.699),doubleToFloat(-1.516),doubleToFloat(-0.4945),doubleToFloat(-1.699),doubleToFloat(-1.553),doubleToFloat(-0.5642),doubleToFloat(2.069),doubleToFloat(-1.929),doubleToFloat(-1.973),doubleToFloat(3.676),doubleToFloat(-1.929),doubleToFloat(-3.176),doubleToFloat(3.35),doubleToFloat(0),doubleToFloat(-1.973),doubleToFloat(4.847),doubleToFloat(0),doubleToFloat(-0.4757),doubleToFloat(3.505),doubleToFloat(-1.514),doubleToFloat(-0.2808),doubleToFloat(1.028),doubleToFloat(-2.316),doubleToFloat(-1.625),doubleToFloat(0.8155),doubleToFloat(1.929),doubleToFloat(-1.973),doubleToFloat(3.676),doubleToFloat(1.553),doubleToFloat(-0.5642),doubleToFloat(2.069),doubleToFloat(0),doubleToFloat(-3.176),doubleToFloat(4.521),doubleToFloat(1.929),doubleToFloat(-3.176),doubleToFloat(3.35),doubleToFloat(1.514),doubleToFloat(-0.2808),doubleToFloat(1.028),doubleToFloat(2.316),doubleToFloat(-1.625),doubleToFloat(0.8155),doubleToFloat(0),doubleToFloat(-3.176),doubleToFloat(3.35),doubleToFloat(0),doubleToFloat(-0.0239),doubleToFloat(1.474)], Java.type("float[]"))))
                            .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4637),doubleToFloat(0.1714),doubleToFloat(0.4394),doubleToFloat(0.1472),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.464),doubleToFloat(0.1246),doubleToFloat(0.4607),doubleToFloat(0.0558),doubleToFloat(0.4904),doubleToFloat(0.0166),doubleToFloat(0.464),doubleToFloat(0.1246),doubleToFloat(0.4607),doubleToFloat(0.0558),doubleToFloat(0.4904),doubleToFloat(0.0166),doubleToFloat(0.4949),doubleToFloat(0.0186),doubleToFloat(0.4949),doubleToFloat(0.0186),doubleToFloat(0.4868),doubleToFloat(0.1432),doubleToFloat(0.4868),doubleToFloat(0.1432),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.4411),doubleToFloat(0.0186),doubleToFloat(0.433),doubleToFloat(0.0595),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.4244),doubleToFloat(0.1312),doubleToFloat(0.532),doubleToFloat(0.098),doubleToFloat(0.5645),doubleToFloat(0.0707),doubleToFloat(0.4885),doubleToFloat(0.102),doubleToFloat(0.5026),doubleToFloat(0.044),doubleToFloat(0.5945),doubleToFloat(0.0186),doubleToFloat(0.5487),doubleToFloat(0.0186),doubleToFloat(0.5487),doubleToFloat(0.0186),doubleToFloat(0.464),doubleToFloat(0.1246),doubleToFloat(0.4607),doubleToFloat(0.0558),doubleToFloat(0.4904),doubleToFloat(0.0166),doubleToFloat(0.4949),doubleToFloat(0.0186),doubleToFloat(0.4868),doubleToFloat(0.1432),doubleToFloat(0.5645),doubleToFloat(0.0707),doubleToFloat(0.5026),doubleToFloat(0.044),doubleToFloat(0.4885),doubleToFloat(0.102),doubleToFloat(0.532),doubleToFloat(0.098),doubleToFloat(0.5945),doubleToFloat(0.0186),doubleToFloat(0.5487),doubleToFloat(0.0186),doubleToFloat(0.464),doubleToFloat(0.1246),doubleToFloat(0.4607),doubleToFloat(0.0558),doubleToFloat(0.4904),doubleToFloat(0.0166),doubleToFloat(0.5487),doubleToFloat(0.0186),doubleToFloat(0.4949),doubleToFloat(0.0186),doubleToFloat(0.4868),doubleToFloat(0.1432)], Java.type("float[]"))))))))))))
            .addChild(new HAnimJoint("hanim_humanoid_root").setName("sacroiliac").setDEF("hanim_sacroiliac").setCenter(Java.to([doubleToFloat(0),doubleToFloat(26.58),doubleToFloat(-0.5601)], Java.type("float[]")))
              .addChild(new HAnimSegment("hanim_sacroiliac").setName("pelvis").setDEF("hanim_pelvis")
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(26.58),doubleToFloat(-0.5601)], Java.type("float[]")))
                  .addChild(new Shape()
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                      .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                    .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,7,-1,0,7,8,-1,0,8,9,-1,0,9,10,-1,0,10,11,-1,0,11,12,-1,0,12,1,-1,1,13,14,-1,14,2,1,-1,2,14,15,-1,15,3,2,-1,3,15,16,-1,16,4,3,-1,4,16,17,-1,17,5,4,-1,5,17,18,-1,18,6,5,-1,6,18,19,-1,19,7,6,-1,7,19,20,-1,20,8,7,-1,8,20,21,-1,21,9,8,-1,9,21,22,-1,22,10,9,-1,10,22,23,-1,23,11,10,-1,11,23,24,-1,24,12,11,-1,12,24,13,-1,13,1,12,-1,13,25,26,-1,26,14,13,-1,14,26,27,-1,27,15,14,-1,15,27,28,-1,28,16,15,-1,16,28,29,-1,29,17,16,-1,17,29,30,-1,30,18,17,-1,18,30,31,-1,31,19,18,-1,19,31,32,-1,32,20,19,-1,20,32,33,-1,33,21,20,-1,21,33,34,-1,34,22,21,-1,22,34,35,-1,35,23,22,-1,23,35,36,-1,36,24,23,-1,24,36,25,-1,25,13,24,-1,25,37,38,-1,38,26,25,-1,26,38,39,-1,39,27,26,-1,27,39,40,-1,40,28,27,-1,28,40,41,-1,41,29,28,-1,29,41,42,-1,42,30,29,-1,30,42,43,-1,43,31,30,-1,31,43,44,-1,44,32,31,-1,32,44,45,-1,45,33,32,-1,33,45,46,-1,46,34,33,-1,34,46,47,-1,47,35,34,-1,35,47,48,-1,48,36,35,-1,36,48,37,-1,37,25,36,-1,37,49,50,-1,50,38,37,-1,38,50,51,-1,51,39,38,-1,39,51,52,-1,52,40,39,-1,40,52,53,-1,53,41,40,-1,41,53,54,-1,54,42,41,-1,42,54,55,-1,55,43,42,-1,43,55,56,-1,56,44,43,-1,44,56,57,-1,57,45,44,-1,45,57,58,-1,58,46,45,-1,46,58,59,-1,59,47,46,-1,47,59,60,-1,60,48,47,-1,48,60,49,-1,49,37,48,-1,61,50,49,-1,61,51,50,-1,61,52,51,-1,61,53,52,-1,61,54,53,-1,61,55,54,-1,61,56,55,-1,61,57,56,-1,61,58,57,-1,61,59,58,-1,61,60,59,-1,61,49,60,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,7,-1,0,7,8,-1,0,8,9,-1,0,9,10,-1,0,10,11,-1,0,11,12,-1,0,12,1,-1,1,13,14,-1,14,2,1,-1,2,14,15,-1,15,3,2,-1,3,15,16,-1,16,4,3,-1,4,16,17,-1,17,5,4,-1,5,17,18,-1,18,6,5,-1,6,18,19,-1,19,7,6,-1,7,19,20,-1,20,8,7,-1,8,20,21,-1,21,9,8,-1,9,21,22,-1,22,10,9,-1,10,22,23,-1,23,11,10,-1,11,23,24,-1,24,12,11,-1,12,24,13,-1,13,1,12,-1,13,25,26,-1,26,14,13,-1,14,26,27,-1,27,15,14,-1,15,27,28,-1,28,16,15,-1,16,28,29,-1,29,17,16,-1,17,29,30,-1,30,18,17,-1,18,30,31,-1,31,19,18,-1,19,31,32,-1,32,20,19,-1,20,32,33,-1,33,21,20,-1,21,33,34,-1,34,22,21,-1,22,34,35,-1,35,23,22,-1,23,35,36,-1,36,24,23,-1,24,36,25,-1,25,13,24,-1,25,37,38,-1,38,26,25,-1,26,38,39,-1,39,27,26,-1,27,39,40,-1,40,28,27,-1,28,40,41,-1,41,29,28,-1,29,41,42,-1,42,30,29,-1,30,42,43,-1,43,31,30,-1,31,43,44,-1,44,32,31,-1,32,44,45,-1,45,33,32,-1,33,45,46,-1,46,34,33,-1,34,46,47,-1,47,35,34,-1,35,47,48,-1,48,36,35,-1,36,48,37,-1,37,25,36,-1,37,49,50,-1,50,38,37,-1,38,50,51,-1,51,39,38,-1,39,51,52,-1,52,40,39,-1,40,52,53,-1,53,41,40,-1,41,53,54,-1,54,42,41,-1,42,54,55,-1,55,43,42,-1,43,55,56,-1,56,44,43,-1,44,56,57,-1,57,45,44,-1,45,57,58,-1,58,46,45,-1,46,58,59,-1,59,47,46,-1,47,59,60,-1,60,48,47,-1,48,60,49,-1,49,37,48,-1,61,50,49,-1,61,51,50,-1,61,52,51,-1,61,53,52,-1,61,54,53,-1,61,55,54,-1,61,56,55,-1,61,57,56,-1,61,58,57,-1,61,59,58,-1,61,60,59,-1,61,49,60,-1], Java.type("int[]")))
                      .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0),doubleToFloat(9.7),doubleToFloat(0.1258),doubleToFloat(0),doubleToFloat(9.049),doubleToFloat(-2.496),doubleToFloat(-2.017),doubleToFloat(9.049),doubleToFloat(-2.145),doubleToFloat(-3.494),doubleToFloat(9.049),doubleToFloat(-1.721),doubleToFloat(-4.034),doubleToFloat(9.049),doubleToFloat(0.1258),doubleToFloat(-3.494),doubleToFloat(9.049),doubleToFloat(1.973),doubleToFloat(-2.017),doubleToFloat(9.049),doubleToFloat(2.397),doubleToFloat(0),doubleToFloat(9.049),doubleToFloat(2.748),doubleToFloat(2.017),doubleToFloat(9.049),doubleToFloat(2.397),doubleToFloat(3.494),doubleToFloat(9.049),doubleToFloat(1.973),doubleToFloat(4.034),doubleToFloat(9.049),doubleToFloat(0.1258),doubleToFloat(3.494),doubleToFloat(9.049),doubleToFloat(-1.721),doubleToFloat(2.017),doubleToFloat(9.049),doubleToFloat(-2.145),doubleToFloat(0),doubleToFloat(7.271),doubleToFloat(-4.077),doubleToFloat(-2.609),doubleToFloat(7.271),doubleToFloat(-3.514),doubleToFloat(-4.519),doubleToFloat(7.271),doubleToFloat(-1.975),doubleToFloat(-5.218),doubleToFloat(7.271),doubleToFloat(0.1258),doubleToFloat(-4.519),doubleToFloat(7.271),doubleToFloat(2.227),doubleToFloat(-2.609),doubleToFloat(7.271),doubleToFloat(3.22),doubleToFloat(0),doubleToFloat(7.271),doubleToFloat(3.783),doubleToFloat(2.609),doubleToFloat(7.271),doubleToFloat(3.22),doubleToFloat(4.519),doubleToFloat(7.271),doubleToFloat(2.227),doubleToFloat(5.218),doubleToFloat(7.271),doubleToFloat(0.1258),doubleToFloat(4.519),doubleToFloat(7.271),doubleToFloat(-1.975),doubleToFloat(2.609),doubleToFloat(7.271),doubleToFloat(-3.514),doubleToFloat(0),doubleToFloat(4.843),doubleToFloat(-4.434),doubleToFloat(-3.012),doubleToFloat(4.843),doubleToFloat(-3.783),doubleToFloat(-5.218),doubleToFloat(4.843),doubleToFloat(-2.007),doubleToFloat(-6.025),doubleToFloat(4.843),doubleToFloat(0.1258),doubleToFloat(-5.218),doubleToFloat(4.843),doubleToFloat(2.552),doubleToFloat(-3.012),doubleToFloat(4.843),doubleToFloat(3.783),doubleToFloat(0),doubleToFloat(4.843),doubleToFloat(4.434),doubleToFloat(3.012),doubleToFloat(4.843),doubleToFloat(3.783),doubleToFloat(5.218),doubleToFloat(4.843),doubleToFloat(2.552),doubleToFloat(6.025),doubleToFloat(4.843),doubleToFloat(0.1258),doubleToFloat(5.218),doubleToFloat(4.843),doubleToFloat(-2.007),doubleToFloat(3.012),doubleToFloat(4.843),doubleToFloat(-3.783),doubleToFloat(0),doubleToFloat(2.414),doubleToFloat(-3.783),doubleToFloat(-2.609),doubleToFloat(2.414),doubleToFloat(-3.22),doubleToFloat(-4.519),doubleToFloat(2.414),doubleToFloat(-1.682),doubleToFloat(-5.218),doubleToFloat(2.414),doubleToFloat(0.1258),doubleToFloat(-4.519),doubleToFloat(2.414),doubleToFloat(2.227),doubleToFloat(-2.609),doubleToFloat(2.414),doubleToFloat(3.22),doubleToFloat(0),doubleToFloat(2.414),doubleToFloat(3.783),doubleToFloat(2.609),doubleToFloat(2.414),doubleToFloat(3.22),doubleToFloat(4.519),doubleToFloat(2.414),doubleToFloat(2.227),doubleToFloat(5.218),doubleToFloat(2.414),doubleToFloat(0.1258),doubleToFloat(4.519),doubleToFloat(2.414),doubleToFloat(-1.682),doubleToFloat(2.609),doubleToFloat(2.414),doubleToFloat(-3.22),doubleToFloat(0),doubleToFloat(0.6366),doubleToFloat(-2.007),doubleToFloat(-1.506),doubleToFloat(0.6366),doubleToFloat(-1.682),doubleToFloat(-2.609),doubleToFloat(0.6366),doubleToFloat(-1.087),doubleToFloat(-3.012),doubleToFloat(0.6366),doubleToFloat(0.1258),doubleToFloat(-2.609),doubleToFloat(0.6366),doubleToFloat(1.339),doubleToFloat(-1.506),doubleToFloat(0.6366),doubleToFloat(2.227),doubleToFloat(0),doubleToFloat(0.6366),doubleToFloat(2.552),doubleToFloat(1.506),doubleToFloat(0.6366),doubleToFloat(2.227),doubleToFloat(2.609),doubleToFloat(0.6366),doubleToFloat(1.339),doubleToFloat(3.012),doubleToFloat(0.6366),doubleToFloat(0.1258),doubleToFloat(2.609),doubleToFloat(0.6366),doubleToFloat(-1.087),doubleToFloat(1.506),doubleToFloat(0.6366),doubleToFloat(-1.682),doubleToFloat(0),doubleToFloat(-0.0142),doubleToFloat(0.1258)], Java.type("float[]"))))
                      .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.8893),doubleToFloat(0.532),doubleToFloat(0.8772),doubleToFloat(0.532),doubleToFloat(0.8772),doubleToFloat(0.4766),doubleToFloat(0.8772),doubleToFloat(0.4361),doubleToFloat(0.8772),doubleToFloat(0.4213),doubleToFloat(0.8772),doubleToFloat(0.4361),doubleToFloat(0.8772),doubleToFloat(0.4766),doubleToFloat(0.8772),doubleToFloat(0.532),doubleToFloat(0.8772),doubleToFloat(0.4766),doubleToFloat(0.8772),doubleToFloat(0.4361),doubleToFloat(0.8772),doubleToFloat(0.4212),doubleToFloat(0.8772),doubleToFloat(0.4361),doubleToFloat(0.8772),doubleToFloat(0.4766),doubleToFloat(0.8439),doubleToFloat(0.532),doubleToFloat(0.8439),doubleToFloat(0.4604),doubleToFloat(0.8439),doubleToFloat(0.408),doubleToFloat(0.8439),doubleToFloat(0.3888),doubleToFloat(0.8439),doubleToFloat(0.408),doubleToFloat(0.8439),doubleToFloat(0.4604),doubleToFloat(0.8439),doubleToFloat(0.532),doubleToFloat(0.8439),doubleToFloat(0.4604),doubleToFloat(0.8439),doubleToFloat(0.4079),doubleToFloat(0.8439),doubleToFloat(0.3887),doubleToFloat(0.8439),doubleToFloat(0.4079),doubleToFloat(0.8439),doubleToFloat(0.4604),doubleToFloat(0.7985),doubleToFloat(0.532),doubleToFloat(0.7985),doubleToFloat(0.4493),doubleToFloat(0.7985),doubleToFloat(0.3888),doubleToFloat(0.7985),doubleToFloat(0.3666),doubleToFloat(0.7985),doubleToFloat(0.3888),doubleToFloat(0.7985),doubleToFloat(0.4493),doubleToFloat(0.7985),doubleToFloat(0.532),doubleToFloat(0.7985),doubleToFloat(0.4493),doubleToFloat(0.7985),doubleToFloat(0.3887),doubleToFloat(0.7985),doubleToFloat(0.3666),doubleToFloat(0.7985),doubleToFloat(0.3887),doubleToFloat(0.7985),doubleToFloat(0.4493),doubleToFloat(0.753),doubleToFloat(0.532),doubleToFloat(0.753),doubleToFloat(0.4604),doubleToFloat(0.753),doubleToFloat(0.408),doubleToFloat(0.753),doubleToFloat(0.3888),doubleToFloat(0.753),doubleToFloat(0.408),doubleToFloat(0.753),doubleToFloat(0.4604),doubleToFloat(0.753),doubleToFloat(0.532),doubleToFloat(0.753),doubleToFloat(0.4604),doubleToFloat(0.753),doubleToFloat(0.4079),doubleToFloat(0.753),doubleToFloat(0.3887),doubleToFloat(0.753),doubleToFloat(0.4079),doubleToFloat(0.753),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.532),doubleToFloat(0.7197),doubleToFloat(0.4907),doubleToFloat(0.7197),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.4493),doubleToFloat(0.7197),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.4907),doubleToFloat(0.7197),doubleToFloat(0.532),doubleToFloat(0.7197),doubleToFloat(0.4906),doubleToFloat(0.7197),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.4493),doubleToFloat(0.7197),doubleToFloat(0.4604),doubleToFloat(0.7197),doubleToFloat(0.4906),doubleToFloat(0.7076),doubleToFloat(0.532)], Java.type("float[]"))))))))
              .addChild(new HAnimJoint("hanim_sacroiliac").setName("l_shoulder").setDEF("hanim_l_shoulder").setCenter(Java.to([doubleToFloat(5.502),doubleToFloat(45.779999),doubleToFloat(-0.3559)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_l_shoulder").setName("l_upperarm").setDEF("hanim_l_upperarm")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(5.502),doubleToFloat(45.779999),doubleToFloat(-0.3559)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([2,1,0,-1,0,4,3,-1,2,0,3,-1,6,5,0,-1,0,1,6,-1,7,6,1,-1,1,2,7,-1,8,7,2,-1,2,3,8,-1,9,8,3,-1,3,4,9,-1,5,9,4,-1,4,0,5,-1,11,10,5,-1,5,6,11,-1,12,11,6,-1,6,7,12,-1,13,12,7,-1,7,8,13,-1,14,13,8,-1,8,9,14,-1,10,14,9,-1,9,5,10,-1,16,15,10,-1,10,11,16,-1,17,16,11,-1,11,12,17,-1,18,17,12,-1,12,13,18,-1,19,18,13,-1,13,14,19,-1,15,19,14,-1,14,10,15,-1,36,37,38,-1,38,39,35,-1,36,38,35,-1,15,16,21,-1,21,20,15,-1,16,17,22,-1,22,21,16,-1,17,18,23,-1,23,22,17,-1,18,19,24,-1,24,23,18,-1,19,15,20,-1,20,24,19,-1,20,21,26,-1,26,25,20,-1,21,22,27,-1,27,26,21,-1,22,23,28,-1,28,27,22,-1,23,24,29,-1,29,28,23,-1,24,20,25,-1,25,29,24,-1,25,26,31,-1,31,30,25,-1,26,27,32,-1,32,31,26,-1,27,28,33,-1,33,32,27,-1,28,29,34,-1,34,33,28,-1,29,25,30,-1,30,34,29,-1,30,31,36,-1,36,35,30,-1,31,32,37,-1,37,36,31,-1,32,33,38,-1,38,37,32,-1,33,34,39,-1,39,38,33,-1,34,30,35,-1,35,39,34,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([2,0,1,-1,1,61,3,-1,2,1,3,-1,5,6,1,-1,1,0,5,-1,7,5,0,-1,0,2,7,-1,8,7,2,-1,2,3,8,-1,9,26,25,-1,25,4,9,-1,6,9,4,-1,4,1,6,-1,10,11,6,-1,6,5,10,-1,12,10,5,-1,5,7,12,-1,13,12,7,-1,7,8,13,-1,14,28,27,-1,27,9,14,-1,11,14,9,-1,9,6,11,-1,15,16,11,-1,11,10,15,-1,17,15,10,-1,10,12,17,-1,18,17,12,-1,12,13,18,-1,19,30,29,-1,29,14,19,-1,16,19,14,-1,14,11,16,-1,54,35,36,-1,36,37,53,-1,54,36,53,-1,16,15,20,-1,20,21,16,-1,15,17,22,-1,22,20,15,-1,17,18,23,-1,23,22,17,-1,31,19,24,-1,24,32,31,-1,19,16,21,-1,21,24,19,-1,38,39,40,-1,40,41,38,-1,55,42,43,-1,43,56,55,-1,42,44,45,-1,45,43,42,-1,44,46,47,-1,47,45,44,-1,46,38,41,-1,41,47,46,-1,41,40,48,-1,48,49,41,-1,57,43,50,-1,50,58,57,-1,43,45,51,-1,51,50,43,-1,45,47,52,-1,52,51,45,-1,47,41,49,-1,49,52,47,-1,49,48,34,-1,34,33,49,-1,59,50,35,-1,35,60,59,-1,50,51,36,-1,36,35,50,-1,51,52,37,-1,37,36,51,-1,52,49,33,-1,33,37,52,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(1.441),doubleToFloat(1.487),doubleToFloat(-1.484),doubleToFloat(2.463),doubleToFloat(1.495),doubleToFloat(0.0297),doubleToFloat(1.338),doubleToFloat(1.486),doubleToFloat(1.469),doubleToFloat(-0.378),doubleToFloat(1.472),doubleToFloat(0.8443),doubleToFloat(-0.3143),doubleToFloat(1.473),doubleToFloat(-0.981),doubleToFloat(1.653),doubleToFloat(0.3707),doubleToFloat(-2.041),doubleToFloat(3.063),doubleToFloat(0.3821),doubleToFloat(0.0504),doubleToFloat(1.51),doubleToFloat(0.3696),doubleToFloat(2.038),doubleToFloat(-0.8597),doubleToFloat(0.3505),doubleToFloat(1.175),doubleToFloat(-0.7717),doubleToFloat(0.3512),doubleToFloat(-1.345),doubleToFloat(1.671),doubleToFloat(-1.85),doubleToFloat(-2.041),doubleToFloat(3.081),doubleToFloat(-1.839),doubleToFloat(0.0504),doubleToFloat(1.528),doubleToFloat(-1.851),doubleToFloat(2.038),doubleToFloat(-0.8419),doubleToFloat(-1.87),doubleToFloat(1.175),doubleToFloat(-0.7538),doubleToFloat(-1.869),doubleToFloat(-1.345),doubleToFloat(1.721),doubleToFloat(-2.799),doubleToFloat(-2.158),doubleToFloat(3.213),doubleToFloat(-2.787),doubleToFloat(0.0547),doubleToFloat(1.57),doubleToFloat(-2.8),doubleToFloat(2.158),doubleToFloat(-0.9375),doubleToFloat(-2.821),doubleToFloat(1.245),doubleToFloat(-0.8444),doubleToFloat(-2.82),doubleToFloat(-1.422),doubleToFloat(1.239),doubleToFloat(-1.171),doubleToFloat(-1.713),doubleToFloat(2.317),doubleToFloat(-1.163),doubleToFloat(-0.4014),doubleToFloat(1.759),doubleToFloat(-1.167),doubleToFloat(1.439),doubleToFloat(0.3363),doubleToFloat(-1.179),doubleToFloat(1.265),doubleToFloat(0.015),doubleToFloat(-1.181),doubleToFloat(-0.6834),doubleToFloat(1.342),doubleToFloat(-6.302),doubleToFloat(-1.386),doubleToFloat(2.462),doubleToFloat(-6.293),doubleToFloat(-0.334),doubleToFloat(1.882),doubleToFloat(-6.297),doubleToFloat(1.142),doubleToFloat(0.4045),doubleToFloat(-6.309),doubleToFloat(1.002),doubleToFloat(0.0707),doubleToFloat(-6.312),doubleToFloat(-0.5601),doubleToFloat(1.406),doubleToFloat(-9.88),doubleToFloat(-1.335),doubleToFloat(2.484),doubleToFloat(-9.871),doubleToFloat(-0.3225),doubleToFloat(1.926),doubleToFloat(-9.875),doubleToFloat(1.099),doubleToFloat(0.5035),doubleToFloat(-9.887),doubleToFloat(0.9641),doubleToFloat(0.1822),doubleToFloat(-9.889),doubleToFloat(-0.5403),doubleToFloat(1.367),doubleToFloat(-10.37),doubleToFloat(-0.7939),doubleToFloat(1.998),doubleToFloat(-10.36),doubleToFloat(-0.2002),doubleToFloat(1.671),doubleToFloat(-10.37),doubleToFloat(0.6327),doubleToFloat(0.8373),doubleToFloat(-10.37),doubleToFloat(0.5538),doubleToFloat(0.649),doubleToFloat(-10.37),doubleToFloat(-0.3278)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.3097),doubleToFloat(0.4881),doubleToFloat(0.3096),doubleToFloat(0.5056),doubleToFloat(0.3098),doubleToFloat(0.4729),doubleToFloat(0.31),doubleToFloat(0.4583),doubleToFloat(0.3094),doubleToFloat(0.524),doubleToFloat(0.3306),doubleToFloat(0.4888),doubleToFloat(0.3305),doubleToFloat(0.5058),doubleToFloat(0.3308),doubleToFloat(0.4733),doubleToFloat(0.3309),doubleToFloat(0.4582),doubleToFloat(0.3303),doubleToFloat(0.5237),doubleToFloat(0.3722),doubleToFloat(0.4892),doubleToFloat(0.3721),doubleToFloat(0.5062),doubleToFloat(0.3724),doubleToFloat(0.4737),doubleToFloat(0.3725),doubleToFloat(0.4586),doubleToFloat(0.3719),doubleToFloat(0.524),doubleToFloat(0.39),doubleToFloat(0.4894),doubleToFloat(0.3898),doubleToFloat(0.5063),doubleToFloat(0.3901),doubleToFloat(0.4739),doubleToFloat(0.3903),doubleToFloat(0.4587),doubleToFloat(0.3897),doubleToFloat(0.5241),doubleToFloat(0.3594),doubleToFloat(0.4923),doubleToFloat(0.3593),doubleToFloat(0.5086),doubleToFloat(0.3596),doubleToFloat(0.4762),doubleToFloat(0.3597),doubleToFloat(0.4649),doubleToFloat(0.3591),doubleToFloat(0.5256),doubleToFloat(0.3093),doubleToFloat(0.5386),doubleToFloat(0.3302),doubleToFloat(0.5386),doubleToFloat(0.3302),doubleToFloat(0.5386),doubleToFloat(0.3718),doubleToFloat(0.5389),doubleToFloat(0.3718),doubleToFloat(0.5389),doubleToFloat(0.3896),doubleToFloat(0.5391),doubleToFloat(0.3896),doubleToFloat(0.5391),doubleToFloat(0.359),doubleToFloat(0.5453),doubleToFloat(0.2607),doubleToFloat(0.7074),doubleToFloat(0.2761),doubleToFloat(0.7074),doubleToFloat(0.2071),doubleToFloat(0.7074),doubleToFloat(0.2209),doubleToFloat(0.7074),doubleToFloat(0.2411),doubleToFloat(0.7074),doubleToFloat(0.258),doubleToFloat(0.6245),doubleToFloat(0.2744),doubleToFloat(0.6245),doubleToFloat(0.2753),doubleToFloat(0.6708),doubleToFloat(0.2589),doubleToFloat(0.6708),doubleToFloat(0.2097),doubleToFloat(0.6245),doubleToFloat(0.2079),doubleToFloat(0.6708),doubleToFloat(0.2216),doubleToFloat(0.6245),doubleToFloat(0.2226),doubleToFloat(0.6708),doubleToFloat(0.2423),doubleToFloat(0.6245),doubleToFloat(0.2411),doubleToFloat(0.6708),doubleToFloat(0.2754),doubleToFloat(0.703),doubleToFloat(0.2594),doubleToFloat(0.703),doubleToFloat(0.2076),doubleToFloat(0.703),doubleToFloat(0.2222),doubleToFloat(0.703),doubleToFloat(0.2413),doubleToFloat(0.703),doubleToFloat(0.1777),doubleToFloat(0.7074),doubleToFloat(0.1931),doubleToFloat(0.7074),doubleToFloat(0.1914),doubleToFloat(0.6245),doubleToFloat(0.1923),doubleToFloat(0.6708),doubleToFloat(0.1923),doubleToFloat(0.6708),doubleToFloat(0.1924),doubleToFloat(0.703),doubleToFloat(0.1924),doubleToFloat(0.703),doubleToFloat(0.1931),doubleToFloat(0.7074),doubleToFloat(0.31),doubleToFloat(0.4536)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_l_shoulder").setName("l_elbow").setDEF("hanim_l_elbow").setCenter(Java.to([doubleToFloat(6.735),doubleToFloat(35.669998),doubleToFloat(-0.4487)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_l_elbow").setName("l_forearm").setDEF("hanim_l_forearm")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(6.735),doubleToFloat(35.669998),doubleToFloat(-0.4487)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([3,2,1,-1,3,1,0,-1,3,0,4,-1,6,5,0,-1,0,1,6,-1,7,6,1,-1,1,2,7,-1,8,7,2,-1,2,3,8,-1,9,8,3,-1,3,4,9,-1,5,9,4,-1,4,0,5,-1,11,10,5,-1,5,6,11,-1,12,11,6,-1,6,7,12,-1,13,12,7,-1,7,8,13,-1,14,13,8,-1,8,9,14,-1,10,14,9,-1,9,5,10,-1,16,15,10,-1,10,11,16,-1,17,16,11,-1,11,12,17,-1,18,17,12,-1,12,13,18,-1,19,18,13,-1,13,14,19,-1,15,19,14,-1,14,10,15,-1,21,22,23,-1,23,24,20,-1,21,23,20,-1,15,16,21,-1,21,20,15,-1,16,17,22,-1,22,21,16,-1,17,18,23,-1,23,22,17,-1,18,19,24,-1,24,23,18,-1,19,15,20,-1,20,24,19,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([3,2,25,-1,3,25,26,-1,3,26,4,-1,5,6,1,-1,1,0,5,-1,7,28,27,-1,27,2,7,-1,8,7,2,-1,2,3,8,-1,9,8,3,-1,3,4,9,-1,6,9,4,-1,4,1,6,-1,10,11,6,-1,6,5,10,-1,12,30,29,-1,29,7,12,-1,13,12,7,-1,7,8,13,-1,14,13,8,-1,8,9,14,-1,11,14,9,-1,9,6,11,-1,15,16,11,-1,11,10,15,-1,17,32,31,-1,31,12,17,-1,18,17,12,-1,12,13,18,-1,19,18,13,-1,13,14,19,-1,16,19,14,-1,14,11,16,-1,34,22,23,-1,23,24,33,-1,34,23,33,-1,16,15,21,-1,21,20,16,-1,35,17,22,-1,22,36,35,-1,17,18,23,-1,23,22,17,-1,18,19,24,-1,24,23,18,-1,19,16,20,-1,20,24,19,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0.133),doubleToFloat(0.4969),doubleToFloat(-1.018),doubleToFloat(0.9633),doubleToFloat(0.5042),doubleToFloat(-0.2287),doubleToFloat(0.4907),doubleToFloat(0.5001),doubleToFloat(0.9186),doubleToFloat(-0.6318),doubleToFloat(0.4904),doubleToFloat(0.8386),doubleToFloat(-0.8529),doubleToFloat(0.4884),doubleToFloat(-0.3582),doubleToFloat(0.0877),doubleToFloat(-0.5196),doubleToFloat(-1.436),doubleToFloat(1.261),doubleToFloat(-0.5094),doubleToFloat(-0.3773),doubleToFloat(0.5932),doubleToFloat(-0.515),doubleToFloat(1.436),doubleToFloat(-0.9931),doubleToFloat(-0.5288),doubleToFloat(1.309),doubleToFloat(-1.306),doubleToFloat(-0.5317),doubleToFloat(-0.5821),doubleToFloat(0.1173),doubleToFloat(-2.866),doubleToFloat(-1.42),doubleToFloat(1.37),doubleToFloat(-2.855),doubleToFloat(-0.3733),doubleToFloat(0.6813),doubleToFloat(-2.348),doubleToFloat(1.422),doubleToFloat(-1.012),doubleToFloat(-2.362),doubleToFloat(1.297),doubleToFloat(-1.37),doubleToFloat(-2.879),doubleToFloat(-0.576),doubleToFloat(0.1304),doubleToFloat(-7.472),doubleToFloat(-1.27),doubleToFloat(1.044),doubleToFloat(-7.464),doubleToFloat(-0.1131),doubleToFloat(0.524),doubleToFloat(-7.468),doubleToFloat(1.334),doubleToFloat(-0.7111),doubleToFloat(-7.479),doubleToFloat(1.217),doubleToFloat(-0.9544),doubleToFloat(-7.481),doubleToFloat(-0.3029),doubleToFloat(0.0956),doubleToFloat(-8.023),doubleToFloat(-0.7824),doubleToFloat(0.7196),doubleToFloat(-8.018),doubleToFloat(0.0074),doubleToFloat(0.3644),doubleToFloat(-8.021),doubleToFloat(0.9211),doubleToFloat(-0.4791),doubleToFloat(-8.028),doubleToFloat(0.841),doubleToFloat(-0.6452),doubleToFloat(-8.03),doubleToFloat(-0.1223)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.2667),doubleToFloat(0.6308),doubleToFloat(0.2522),doubleToFloat(0.6308),doubleToFloat(0.2052),doubleToFloat(0.6308),doubleToFloat(0.22),doubleToFloat(0.6308),doubleToFloat(0.2355),doubleToFloat(0.6308),doubleToFloat(0.266),doubleToFloat(0.6397),doubleToFloat(0.2508),doubleToFloat(0.6397),doubleToFloat(0.2066),doubleToFloat(0.6397),doubleToFloat(0.2205),doubleToFloat(0.6397),doubleToFloat(0.2357),doubleToFloat(0.6397),doubleToFloat(0.2662),doubleToFloat(0.6601),doubleToFloat(0.251),doubleToFloat(0.6601),doubleToFloat(0.206),doubleToFloat(0.6557),doubleToFloat(0.2208),doubleToFloat(0.6557),doubleToFloat(0.2354),doubleToFloat(0.6601),doubleToFloat(0.2679),doubleToFloat(0.7003),doubleToFloat(0.2509),doubleToFloat(0.7003),doubleToFloat(0.2072),doubleToFloat(0.7003),doubleToFloat(0.2192),doubleToFloat(0.7003),doubleToFloat(0.2343),doubleToFloat(0.7003),doubleToFloat(0.2512),doubleToFloat(0.7051),doubleToFloat(0.2692),doubleToFloat(0.7051),doubleToFloat(0.2072),doubleToFloat(0.7051),doubleToFloat(0.219),doubleToFloat(0.7051),doubleToFloat(0.2329),doubleToFloat(0.7051),doubleToFloat(0.1923),doubleToFloat(0.6308),doubleToFloat(0.1778),doubleToFloat(0.6308),doubleToFloat(0.1923),doubleToFloat(0.6308),doubleToFloat(0.1916),doubleToFloat(0.6397),doubleToFloat(0.1916),doubleToFloat(0.6397),doubleToFloat(0.1918),doubleToFloat(0.6601),doubleToFloat(0.1918),doubleToFloat(0.6601),doubleToFloat(0.1935),doubleToFloat(0.7003),doubleToFloat(0.1768),doubleToFloat(0.7051),doubleToFloat(0.1948),doubleToFloat(0.7051),doubleToFloat(0.1935),doubleToFloat(0.7003),doubleToFloat(0.1948),doubleToFloat(0.7051)], Java.type("float[]"))))))))
                  .addChild(new HAnimJoint("hanim_l_elbow").setName("l_radiocarpal").setDEF("hanim_l_radiocarpal").setCenter(Java.to([doubleToFloat(6.432),doubleToFloat(27.83),doubleToFloat(-0.1589)], Java.type("float[]")))
                    .addChild(new HAnimSegment("hanim_l_radiocarpal").setName("l_carpal").setDEF("hanim_l_carpal")
                      .addChild(new Transform().setTranslation(Java.to([doubleToFloat(6.432),doubleToFloat(27.83),doubleToFloat(-0.1589)], Java.type("float[]")))
                        .addChild(new Shape()
                          .setAppearance(new Appearance()
                            .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                            .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                          .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,2,4,-1,4,5,0,-1,3,1,6,-1,6,7,3,-1,5,6,1,-1,1,0,5,-1,5,4,8,-1,8,9,5,-1,7,6,10,-1,10,11,7,-1,6,5,9,-1,9,10,6,-1,9,8,12,-1,12,13,9,-1,11,10,14,-1,14,15,11,-1,10,9,13,-1,13,14,10,-1,4,2,16,-1,7,16,2,-1,2,3,7,-1,18,20,17,-1,17,19,18,-1,7,11,21,-1,21,16,7,-1,8,21,12,-1,11,15,12,-1,12,21,11,-1,15,14,13,-1,13,12,15,-1,19,17,8,-1,8,4,19,-1,18,19,4,-1,4,16,18,-1,20,18,16,-1,16,21,20,-1,17,20,21,-1,21,8,17,-1,22,27,23,-1,26,25,24,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([5,7,4,-1,4,6,5,-1,1,0,2,-1,2,3,1,-1,15,17,14,-1,14,16,15,-1,6,4,8,-1,8,9,6,-1,39,41,38,-1,38,40,39,-1,36,37,18,-1,18,19,36,-1,9,8,10,-1,10,11,9,-1,40,38,42,-1,42,43,40,-1,19,18,20,-1,20,21,19,-1,22,24,23,-1,25,23,24,-1,24,26,25,-1,28,30,27,-1,27,29,28,-1,25,32,31,-1,31,23,25,-1,33,31,34,-1,32,35,34,-1,34,31,32,-1,35,21,20,-1,20,34,35,-1,12,13,8,-1,8,4,12,-1,28,29,22,-1,22,23,28,-1,30,28,23,-1,23,31,30,-1,27,30,31,-1,31,33,27,-1,14,24,26,-1,14,16,24,-1], Java.type("int[]")))
                            .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(1.076),doubleToFloat(0.3804),doubleToFloat(0.7047),doubleToFloat(1.042),doubleToFloat(0.395),doubleToFloat(-1.192),doubleToFloat(-0.6516),doubleToFloat(0.2878),doubleToFloat(0.7874),doubleToFloat(-0.6592),doubleToFloat(0.2892),doubleToFloat(-1.133),doubleToFloat(-0.8366),doubleToFloat(-0.2556),doubleToFloat(1.306),doubleToFloat(1.437),doubleToFloat(-0.0511),doubleToFloat(1.226),doubleToFloat(1.385),doubleToFloat(-0.0228),doubleToFloat(-1.757),doubleToFloat(-0.9384),doubleToFloat(-0.2412),doubleToFloat(-1.753),doubleToFloat(-0.7136),doubleToFloat(-1.939),doubleToFloat(2.128),doubleToFloat(1.733),doubleToFloat(-1.733),doubleToFloat(1.838),doubleToFloat(1.681),doubleToFloat(-1.704),doubleToFloat(-2.128),doubleToFloat(-1.039),doubleToFloat(-2.028),doubleToFloat(-1.986),doubleToFloat(-0.4691),doubleToFloat(-3.205),doubleToFloat(1.497),doubleToFloat(0.8189),doubleToFloat(-3.398),doubleToFloat(1.547),doubleToFloat(0.7668),doubleToFloat(-3.369),doubleToFloat(-1.83),doubleToFloat(-0.6579),doubleToFloat(-3.218),doubleToFloat(-1.709),doubleToFloat(-0.9322),doubleToFloat(-0.2429),doubleToFloat(-0.1654),doubleToFloat(-1.437),doubleToFloat(-1.988),doubleToFloat(1.715),doubleToFloat(-1.733),doubleToFloat(-0.5679),doubleToFloat(0.0513),doubleToFloat(-1.7),doubleToFloat(-0.6266),doubleToFloat(1.665),doubleToFloat(-1.443),doubleToFloat(-1.986),doubleToFloat(0.1217),doubleToFloat(-0.9271),doubleToFloat(-2.022),doubleToFloat(-0.178),doubleToFloat(1.042),doubleToFloat(0.395),doubleToFloat(-1.192),doubleToFloat(-0.6592),doubleToFloat(0.2892),doubleToFloat(-1.133),doubleToFloat(-0.6516),doubleToFloat(0.2878),doubleToFloat(0.7874),doubleToFloat(1.076),doubleToFloat(0.3804),doubleToFloat(0.7047),doubleToFloat(1.042),doubleToFloat(0.395),doubleToFloat(-1.192),doubleToFloat(-0.6516),doubleToFloat(0.2878),doubleToFloat(0.7874)], Java.type("float[]"))))
                            .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.8107),doubleToFloat(0.9924),doubleToFloat(0.8122),doubleToFloat(0.9033),doubleToFloat(0.7694),doubleToFloat(0.9912),doubleToFloat(0.7683),doubleToFloat(0.9026),doubleToFloat(0.1329),doubleToFloat(0.0347),doubleToFloat(0.0307),doubleToFloat(0.0051),doubleToFloat(0.0134),doubleToFloat(0.0353),doubleToFloat(0.1366),doubleToFloat(0.0058),doubleToFloat(0.1249),doubleToFloat(0.1081),doubleToFloat(0.0147),doubleToFloat(0.117),doubleToFloat(0.1349),doubleToFloat(0.1856),doubleToFloat(0.0462),doubleToFloat(0.1842),doubleToFloat(0.1559),doubleToFloat(0.0454),doubleToFloat(0.148),doubleToFloat(0.1033),doubleToFloat(0.3244),doubleToFloat(0.0096),doubleToFloat(0.1758),doubleToFloat(0.0039),doubleToFloat(0.1759),doubleToFloat(0.011),doubleToFloat(0.3241),doubleToFloat(0.0033),doubleToFloat(0.173),doubleToFloat(0.1764),doubleToFloat(0.3074),doubleToFloat(0.1757),doubleToFloat(0.1732),doubleToFloat(0.1519),doubleToFloat(0.3074),doubleToFloat(0.1513),doubleToFloat(0.1756),doubleToFloat(0.032),doubleToFloat(0.2159),doubleToFloat(0.0368),doubleToFloat(0.1791),doubleToFloat(0.0165),doubleToFloat(0.3169),doubleToFloat(0.0458),doubleToFloat(0.3158),doubleToFloat(0.0193),doubleToFloat(0.172),doubleToFloat(0.0594),doubleToFloat(0.2087),doubleToFloat(0.0476),doubleToFloat(0.1736),doubleToFloat(0.0504),doubleToFloat(0.2073),doubleToFloat(0.064),doubleToFloat(0.2362),doubleToFloat(0.0821),doubleToFloat(0.3267),doubleToFloat(0.0796),doubleToFloat(0.1717),doubleToFloat(0.0822),doubleToFloat(0.1726),doubleToFloat(0.1297),doubleToFloat(0.3077),doubleToFloat(0.1289),doubleToFloat(0.3074),doubleToFloat(0.1865),doubleToFloat(0.1742),doubleToFloat(0.184),doubleToFloat(0.0061),doubleToFloat(0.1086),doubleToFloat(0.1366),doubleToFloat(0.0368),doubleToFloat(0.1241),doubleToFloat(0.1189),doubleToFloat(0.0168),doubleToFloat(0.0309),doubleToFloat(0.0211),doubleToFloat(0.1882),doubleToFloat(0.14),doubleToFloat(0.1857)], Java.type("float[]")))))))))))
              .addChild(new HAnimJoint("hanim_sacroiliac").setName("r_shoulder").setDEF("hanim_r_shoulder").setCenter(Java.to([doubleToFloat(-5.502),doubleToFloat(45.779999),doubleToFloat(-0.3559)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_r_shoulder").setName("r_upperarm").setDEF("hanim_r_upperarm")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-5.502),doubleToFloat(45.779999),doubleToFloat(-0.3559)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([3,4,0,-1,2,3,0,-1,2,0,1,-1,6,1,0,-1,0,5,6,-1,7,2,1,-1,1,6,7,-1,8,3,2,-1,2,7,8,-1,9,4,3,-1,3,8,9,-1,5,0,4,-1,4,9,5,-1,11,6,5,-1,5,10,11,-1,12,7,6,-1,6,11,12,-1,13,8,7,-1,7,12,13,-1,14,9,8,-1,8,13,14,-1,10,5,9,-1,9,14,10,-1,16,11,10,-1,10,15,16,-1,17,12,11,-1,11,16,17,-1,18,13,12,-1,12,17,18,-1,19,14,13,-1,13,18,19,-1,15,10,14,-1,14,19,15,-1,35,39,38,-1,36,35,38,-1,36,38,37,-1,15,20,21,-1,21,16,15,-1,16,21,22,-1,22,17,16,-1,17,22,23,-1,23,18,17,-1,18,23,24,-1,24,19,18,-1,19,24,20,-1,20,15,19,-1,20,25,26,-1,26,21,20,-1,21,26,27,-1,27,22,21,-1,22,27,28,-1,28,23,22,-1,23,28,29,-1,29,24,23,-1,24,29,25,-1,25,20,24,-1,25,30,31,-1,31,26,25,-1,26,31,32,-1,32,27,26,-1,27,32,33,-1,33,28,27,-1,28,33,34,-1,34,29,28,-1,29,34,30,-1,30,25,29,-1,30,35,36,-1,36,31,30,-1,31,36,37,-1,37,32,31,-1,32,37,38,-1,38,33,32,-1,33,38,39,-1,39,34,33,-1,34,39,35,-1,35,30,34,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([3,61,1,-1,2,3,1,-1,2,1,0,-1,5,0,1,-1,1,6,5,-1,7,2,0,-1,0,5,7,-1,8,3,2,-1,2,7,8,-1,9,4,25,-1,25,26,9,-1,6,1,4,-1,4,9,6,-1,10,5,6,-1,6,11,10,-1,12,7,5,-1,5,10,12,-1,13,8,7,-1,7,12,13,-1,14,9,27,-1,27,28,14,-1,11,6,9,-1,9,14,11,-1,15,10,11,-1,11,16,15,-1,17,12,10,-1,10,15,17,-1,18,13,12,-1,12,17,18,-1,19,14,29,-1,29,30,19,-1,16,11,14,-1,14,19,16,-1,53,37,36,-1,54,53,36,-1,54,36,35,-1,16,21,20,-1,20,15,16,-1,15,20,22,-1,22,17,15,-1,17,22,23,-1,23,18,17,-1,31,32,24,-1,24,19,31,-1,19,24,21,-1,21,16,19,-1,38,41,40,-1,40,39,38,-1,55,56,43,-1,43,42,55,-1,42,43,45,-1,45,44,42,-1,44,45,47,-1,47,46,44,-1,46,47,41,-1,41,38,46,-1,41,49,48,-1,48,40,41,-1,57,58,50,-1,50,43,57,-1,43,50,51,-1,51,45,43,-1,45,51,52,-1,52,47,45,-1,47,52,49,-1,49,41,47,-1,49,33,34,-1,34,48,49,-1,59,60,35,-1,35,50,59,-1,50,35,36,-1,36,51,50,-1,51,36,37,-1,37,52,51,-1,52,37,33,-1,33,49,52,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-1.441),doubleToFloat(1.487),doubleToFloat(-1.484),doubleToFloat(-2.463),doubleToFloat(1.495),doubleToFloat(0.0297),doubleToFloat(-1.338),doubleToFloat(1.486),doubleToFloat(1.469),doubleToFloat(0.378),doubleToFloat(1.472),doubleToFloat(0.8443),doubleToFloat(0.3143),doubleToFloat(1.473),doubleToFloat(-0.981),doubleToFloat(-1.653),doubleToFloat(0.3707),doubleToFloat(-2.041),doubleToFloat(-3.063),doubleToFloat(0.3821),doubleToFloat(0.0504),doubleToFloat(-1.51),doubleToFloat(0.3696),doubleToFloat(2.038),doubleToFloat(0.8597),doubleToFloat(0.3505),doubleToFloat(1.175),doubleToFloat(0.7717),doubleToFloat(0.3512),doubleToFloat(-1.345),doubleToFloat(-1.671),doubleToFloat(-1.85),doubleToFloat(-2.041),doubleToFloat(-3.081),doubleToFloat(-1.839),doubleToFloat(0.0504),doubleToFloat(-1.528),doubleToFloat(-1.851),doubleToFloat(2.038),doubleToFloat(0.8419),doubleToFloat(-1.87),doubleToFloat(1.175),doubleToFloat(0.7538),doubleToFloat(-1.869),doubleToFloat(-1.345),doubleToFloat(-1.721),doubleToFloat(-2.799),doubleToFloat(-2.158),doubleToFloat(-3.213),doubleToFloat(-2.787),doubleToFloat(0.0547),doubleToFloat(-1.57),doubleToFloat(-2.8),doubleToFloat(2.158),doubleToFloat(0.9375),doubleToFloat(-2.821),doubleToFloat(1.245),doubleToFloat(0.8444),doubleToFloat(-2.82),doubleToFloat(-1.422),doubleToFloat(-1.239),doubleToFloat(-1.171),doubleToFloat(-1.713),doubleToFloat(-2.317),doubleToFloat(-1.163),doubleToFloat(-0.4014),doubleToFloat(-1.759),doubleToFloat(-1.167),doubleToFloat(1.439),doubleToFloat(-0.3363),doubleToFloat(-1.179),doubleToFloat(1.265),doubleToFloat(-0.015),doubleToFloat(-1.181),doubleToFloat(-0.6834),doubleToFloat(-1.342),doubleToFloat(-6.302),doubleToFloat(-1.386),doubleToFloat(-2.462),doubleToFloat(-6.293),doubleToFloat(-0.334),doubleToFloat(-1.882),doubleToFloat(-6.297),doubleToFloat(1.142),doubleToFloat(-0.4045),doubleToFloat(-6.309),doubleToFloat(1.002),doubleToFloat(-0.0707),doubleToFloat(-6.312),doubleToFloat(-0.5601),doubleToFloat(-1.406),doubleToFloat(-9.88),doubleToFloat(-1.335),doubleToFloat(-2.484),doubleToFloat(-9.871),doubleToFloat(-0.3225),doubleToFloat(-1.926),doubleToFloat(-9.875),doubleToFloat(1.099),doubleToFloat(-0.5035),doubleToFloat(-9.887),doubleToFloat(0.9641),doubleToFloat(-0.1822),doubleToFloat(-9.889),doubleToFloat(-0.5403),doubleToFloat(-1.367),doubleToFloat(-10.37),doubleToFloat(-0.7939),doubleToFloat(-1.998),doubleToFloat(-10.36),doubleToFloat(-0.2002),doubleToFloat(-1.671),doubleToFloat(-10.37),doubleToFloat(0.6327),doubleToFloat(-0.8374),doubleToFloat(-10.37),doubleToFloat(0.5538),doubleToFloat(-0.649),doubleToFloat(-10.37),doubleToFloat(-0.3278)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.3097),doubleToFloat(0.4881),doubleToFloat(0.3096),doubleToFloat(0.5056),doubleToFloat(0.3098),doubleToFloat(0.4729),doubleToFloat(0.31),doubleToFloat(0.4583),doubleToFloat(0.3094),doubleToFloat(0.524),doubleToFloat(0.3306),doubleToFloat(0.4888),doubleToFloat(0.3305),doubleToFloat(0.5058),doubleToFloat(0.3308),doubleToFloat(0.4733),doubleToFloat(0.3309),doubleToFloat(0.4582),doubleToFloat(0.3303),doubleToFloat(0.5237),doubleToFloat(0.3722),doubleToFloat(0.4892),doubleToFloat(0.3721),doubleToFloat(0.5062),doubleToFloat(0.3724),doubleToFloat(0.4737),doubleToFloat(0.3725),doubleToFloat(0.4586),doubleToFloat(0.3719),doubleToFloat(0.524),doubleToFloat(0.39),doubleToFloat(0.4894),doubleToFloat(0.3898),doubleToFloat(0.5063),doubleToFloat(0.3901),doubleToFloat(0.4739),doubleToFloat(0.3903),doubleToFloat(0.4587),doubleToFloat(0.3897),doubleToFloat(0.5241),doubleToFloat(0.3594),doubleToFloat(0.4923),doubleToFloat(0.3593),doubleToFloat(0.5086),doubleToFloat(0.3596),doubleToFloat(0.4762),doubleToFloat(0.3597),doubleToFloat(0.4649),doubleToFloat(0.3591),doubleToFloat(0.5256),doubleToFloat(0.3093),doubleToFloat(0.5386),doubleToFloat(0.3302),doubleToFloat(0.5386),doubleToFloat(0.3302),doubleToFloat(0.5386),doubleToFloat(0.3718),doubleToFloat(0.5389),doubleToFloat(0.3718),doubleToFloat(0.5389),doubleToFloat(0.3896),doubleToFloat(0.5391),doubleToFloat(0.3896),doubleToFloat(0.5391),doubleToFloat(0.359),doubleToFloat(0.5453),doubleToFloat(0.2607),doubleToFloat(0.7074),doubleToFloat(0.2761),doubleToFloat(0.7074),doubleToFloat(0.2071),doubleToFloat(0.7074),doubleToFloat(0.2209),doubleToFloat(0.7074),doubleToFloat(0.2411),doubleToFloat(0.7074),doubleToFloat(0.258),doubleToFloat(0.6245),doubleToFloat(0.2744),doubleToFloat(0.6245),doubleToFloat(0.2753),doubleToFloat(0.6708),doubleToFloat(0.2589),doubleToFloat(0.6708),doubleToFloat(0.2097),doubleToFloat(0.6245),doubleToFloat(0.2079),doubleToFloat(0.6708),doubleToFloat(0.2216),doubleToFloat(0.6245),doubleToFloat(0.2226),doubleToFloat(0.6708),doubleToFloat(0.2423),doubleToFloat(0.6245),doubleToFloat(0.2411),doubleToFloat(0.6708),doubleToFloat(0.2754),doubleToFloat(0.703),doubleToFloat(0.2594),doubleToFloat(0.703),doubleToFloat(0.2076),doubleToFloat(0.703),doubleToFloat(0.2222),doubleToFloat(0.703),doubleToFloat(0.2413),doubleToFloat(0.703),doubleToFloat(0.1777),doubleToFloat(0.7074),doubleToFloat(0.1931),doubleToFloat(0.7074),doubleToFloat(0.1914),doubleToFloat(0.6245),doubleToFloat(0.1923),doubleToFloat(0.6708),doubleToFloat(0.1923),doubleToFloat(0.6708),doubleToFloat(0.1924),doubleToFloat(0.703),doubleToFloat(0.1924),doubleToFloat(0.703),doubleToFloat(0.1931),doubleToFloat(0.7074),doubleToFloat(0.31),doubleToFloat(0.4536)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_r_shoulder").setName("r_elbow").setDEF("hanim_r_elbow").setCenter(Java.to([doubleToFloat(-6.735),doubleToFloat(35.669998),doubleToFloat(-0.4487)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_r_elbow").setName("r_forearm").setDEF("hanim_r_forearm")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-6.735),doubleToFloat(35.669998),doubleToFloat(-0.4487)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([3,4,0,-1,3,0,1,-1,3,1,2,-1,6,1,0,-1,0,5,6,-1,7,2,1,-1,1,6,7,-1,8,3,2,-1,2,7,8,-1,9,4,3,-1,3,8,9,-1,5,0,4,-1,4,9,5,-1,11,6,5,-1,5,10,11,-1,12,7,6,-1,6,11,12,-1,13,8,7,-1,7,12,13,-1,14,9,8,-1,8,13,14,-1,10,5,9,-1,9,14,10,-1,16,11,10,-1,10,15,16,-1,17,12,11,-1,11,16,17,-1,18,13,12,-1,12,17,18,-1,19,14,13,-1,13,18,19,-1,15,10,14,-1,14,19,15,-1,20,24,23,-1,21,20,23,-1,21,23,22,-1,15,20,21,-1,21,16,15,-1,16,21,22,-1,22,17,16,-1,17,22,23,-1,23,18,17,-1,18,23,24,-1,24,19,18,-1,19,24,20,-1,20,15,19,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([3,4,26,-1,3,26,25,-1,3,25,2,-1,5,0,1,-1,1,6,5,-1,7,2,27,-1,27,28,7,-1,8,3,2,-1,2,7,8,-1,9,4,3,-1,3,8,9,-1,6,1,4,-1,4,9,6,-1,10,5,6,-1,6,11,10,-1,12,7,29,-1,29,30,12,-1,13,8,7,-1,7,12,13,-1,14,9,8,-1,8,13,14,-1,11,6,9,-1,9,14,11,-1,15,10,11,-1,11,16,15,-1,17,12,31,-1,31,32,17,-1,18,13,12,-1,12,17,18,-1,19,14,13,-1,13,18,19,-1,16,11,14,-1,14,19,16,-1,33,24,23,-1,34,33,23,-1,34,23,22,-1,16,20,21,-1,21,15,16,-1,35,36,22,-1,22,17,35,-1,17,22,23,-1,23,18,17,-1,18,23,24,-1,24,19,18,-1,19,24,20,-1,20,16,19,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-0.133),doubleToFloat(0.4969),doubleToFloat(-1.018),doubleToFloat(-0.9633),doubleToFloat(0.5042),doubleToFloat(-0.2287),doubleToFloat(-0.4907),doubleToFloat(0.5001),doubleToFloat(0.9186),doubleToFloat(0.6318),doubleToFloat(0.4904),doubleToFloat(0.8386),doubleToFloat(0.8529),doubleToFloat(0.4884),doubleToFloat(-0.3582),doubleToFloat(-0.0877),doubleToFloat(-0.5196),doubleToFloat(-1.436),doubleToFloat(-1.261),doubleToFloat(-0.5094),doubleToFloat(-0.3773),doubleToFloat(-0.5932),doubleToFloat(-0.515),doubleToFloat(1.436),doubleToFloat(0.9931),doubleToFloat(-0.5288),doubleToFloat(1.309),doubleToFloat(1.306),doubleToFloat(-0.5317),doubleToFloat(-0.5821),doubleToFloat(-0.1173),doubleToFloat(-2.866),doubleToFloat(-1.42),doubleToFloat(-1.37),doubleToFloat(-2.855),doubleToFloat(-0.3733),doubleToFloat(-0.6813),doubleToFloat(-2.348),doubleToFloat(1.422),doubleToFloat(1.012),doubleToFloat(-2.362),doubleToFloat(1.297),doubleToFloat(1.37),doubleToFloat(-2.879),doubleToFloat(-0.576),doubleToFloat(-0.1304),doubleToFloat(-7.472),doubleToFloat(-1.27),doubleToFloat(-1.044),doubleToFloat(-7.464),doubleToFloat(-0.1131),doubleToFloat(-0.5241),doubleToFloat(-7.468),doubleToFloat(1.334),doubleToFloat(0.7111),doubleToFloat(-7.479),doubleToFloat(1.217),doubleToFloat(0.9544),doubleToFloat(-7.481),doubleToFloat(-0.3029),doubleToFloat(-0.0956),doubleToFloat(-8.023),doubleToFloat(-0.7824),doubleToFloat(-0.7196),doubleToFloat(-8.018),doubleToFloat(0.0074),doubleToFloat(-0.3644),doubleToFloat(-8.021),doubleToFloat(0.9211),doubleToFloat(0.4791),doubleToFloat(-8.028),doubleToFloat(0.841),doubleToFloat(0.6452),doubleToFloat(-8.03),doubleToFloat(-0.1223)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.2667),doubleToFloat(0.6308),doubleToFloat(0.2522),doubleToFloat(0.6308),doubleToFloat(0.2052),doubleToFloat(0.6308),doubleToFloat(0.22),doubleToFloat(0.6308),doubleToFloat(0.2355),doubleToFloat(0.6308),doubleToFloat(0.266),doubleToFloat(0.6397),doubleToFloat(0.2508),doubleToFloat(0.6397),doubleToFloat(0.2066),doubleToFloat(0.6397),doubleToFloat(0.2205),doubleToFloat(0.6397),doubleToFloat(0.2357),doubleToFloat(0.6397),doubleToFloat(0.2662),doubleToFloat(0.6601),doubleToFloat(0.251),doubleToFloat(0.6601),doubleToFloat(0.206),doubleToFloat(0.6557),doubleToFloat(0.2208),doubleToFloat(0.6557),doubleToFloat(0.2354),doubleToFloat(0.6601),doubleToFloat(0.2679),doubleToFloat(0.7003),doubleToFloat(0.2509),doubleToFloat(0.7003),doubleToFloat(0.2072),doubleToFloat(0.7003),doubleToFloat(0.2192),doubleToFloat(0.7003),doubleToFloat(0.2343),doubleToFloat(0.7003),doubleToFloat(0.2512),doubleToFloat(0.7051),doubleToFloat(0.2692),doubleToFloat(0.7051),doubleToFloat(0.2072),doubleToFloat(0.7051),doubleToFloat(0.219),doubleToFloat(0.7051),doubleToFloat(0.2329),doubleToFloat(0.7051),doubleToFloat(0.1923),doubleToFloat(0.6308),doubleToFloat(0.1778),doubleToFloat(0.6308),doubleToFloat(0.1923),doubleToFloat(0.6308),doubleToFloat(0.1916),doubleToFloat(0.6397),doubleToFloat(0.1916),doubleToFloat(0.6397),doubleToFloat(0.1918),doubleToFloat(0.6601),doubleToFloat(0.1918),doubleToFloat(0.6601),doubleToFloat(0.1935),doubleToFloat(0.7003),doubleToFloat(0.1768),doubleToFloat(0.7051),doubleToFloat(0.1948),doubleToFloat(0.7051),doubleToFloat(0.1935),doubleToFloat(0.7003),doubleToFloat(0.1948),doubleToFloat(0.7051)], Java.type("float[]"))))))))
                  .addChild(new HAnimJoint("hanim_r_elbow").setName("r_radiocarpal").setDEF("hanim_r_radiocarpal").setCenter(Java.to([doubleToFloat(-6.432),doubleToFloat(27.83),doubleToFloat(-0.1589)], Java.type("float[]")))
                    .addChild(new HAnimSegment("hanim_r_radiocarpal").setName("r_carpal").setDEF("hanim_r_carpal")
                      .addChild(new Transform().setTranslation(Java.to([doubleToFloat(-6.432),doubleToFloat(27.83),doubleToFloat(-0.1589)], Java.type("float[]")))
                        .addChild(new Shape()
                          .setAppearance(new Appearance()
                            .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                            .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                          .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([0,5,4,-1,4,2,0,-1,3,7,6,-1,6,1,3,-1,5,0,1,-1,1,6,5,-1,5,9,8,-1,8,4,5,-1,7,11,10,-1,10,6,7,-1,6,10,9,-1,9,5,6,-1,9,13,12,-1,12,8,9,-1,11,15,14,-1,14,10,11,-1,10,14,13,-1,13,9,10,-1,4,16,2,-1,7,3,2,-1,2,16,7,-1,18,19,17,-1,17,20,18,-1,7,16,21,-1,21,11,7,-1,8,12,21,-1,11,21,12,-1,12,15,11,-1,15,12,13,-1,13,14,15,-1,19,4,8,-1,8,17,19,-1,18,16,4,-1,4,19,18,-1,20,21,16,-1,16,18,20,-1,17,8,21,-1,21,20,17,-1,22,23,27,-1,26,24,25,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([5,6,4,-1,4,7,5,-1,1,3,2,-1,2,0,1,-1,15,16,14,-1,14,17,15,-1,6,9,8,-1,8,4,6,-1,39,40,38,-1,38,41,39,-1,36,19,18,-1,18,37,36,-1,9,11,10,-1,10,8,9,-1,40,43,42,-1,42,38,40,-1,19,21,20,-1,20,18,19,-1,22,23,24,-1,25,26,24,-1,24,23,25,-1,28,29,27,-1,27,30,28,-1,25,23,31,-1,31,32,25,-1,33,34,31,-1,32,31,34,-1,34,35,32,-1,35,34,20,-1,20,21,35,-1,12,4,8,-1,8,13,12,-1,28,23,22,-1,22,29,28,-1,30,31,23,-1,23,28,30,-1,27,33,31,-1,31,30,27,-1,14,26,24,-1,14,24,16,-1], Java.type("int[]")))
                            .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(-1.076),doubleToFloat(0.3804),doubleToFloat(0.7047),doubleToFloat(-1.042),doubleToFloat(0.395),doubleToFloat(-1.192),doubleToFloat(0.6516),doubleToFloat(0.2878),doubleToFloat(0.7874),doubleToFloat(0.6592),doubleToFloat(0.2892),doubleToFloat(-1.133),doubleToFloat(0.8366),doubleToFloat(-0.2556),doubleToFloat(1.306),doubleToFloat(-1.437),doubleToFloat(-0.0511),doubleToFloat(1.226),doubleToFloat(-1.385),doubleToFloat(-0.0228),doubleToFloat(-1.757),doubleToFloat(0.9384),doubleToFloat(-0.2412),doubleToFloat(-1.753),doubleToFloat(0.7136),doubleToFloat(-1.939),doubleToFloat(2.128),doubleToFloat(-1.733),doubleToFloat(-1.733),doubleToFloat(1.838),doubleToFloat(-1.681),doubleToFloat(-1.704),doubleToFloat(-2.128),doubleToFloat(1.039),doubleToFloat(-2.028),doubleToFloat(-1.986),doubleToFloat(0.4691),doubleToFloat(-3.205),doubleToFloat(1.497),doubleToFloat(-0.8189),doubleToFloat(-3.398),doubleToFloat(1.547),doubleToFloat(-0.7668),doubleToFloat(-3.369),doubleToFloat(-1.83),doubleToFloat(0.6579),doubleToFloat(-3.218),doubleToFloat(-1.709),doubleToFloat(0.9322),doubleToFloat(-0.2429),doubleToFloat(-0.1654),doubleToFloat(1.437),doubleToFloat(-1.988),doubleToFloat(1.715),doubleToFloat(1.733),doubleToFloat(-0.5679),doubleToFloat(0.0513),doubleToFloat(1.7),doubleToFloat(-0.6266),doubleToFloat(1.665),doubleToFloat(1.443),doubleToFloat(-1.986),doubleToFloat(0.1217),doubleToFloat(0.9271),doubleToFloat(-2.022),doubleToFloat(-0.178),doubleToFloat(-1.042),doubleToFloat(0.395),doubleToFloat(-1.192),doubleToFloat(0.6592),doubleToFloat(0.2892),doubleToFloat(-1.133),doubleToFloat(0.6516),doubleToFloat(0.2878),doubleToFloat(0.7874),doubleToFloat(-1.076),doubleToFloat(0.3804),doubleToFloat(0.7047),doubleToFloat(-1.042),doubleToFloat(0.395),doubleToFloat(-1.192),doubleToFloat(0.6516),doubleToFloat(0.2878),doubleToFloat(0.7874)], Java.type("float[]"))))
                            .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.8107),doubleToFloat(0.9924),doubleToFloat(0.8122),doubleToFloat(0.9033),doubleToFloat(0.7694),doubleToFloat(0.9912),doubleToFloat(0.7683),doubleToFloat(0.9026),doubleToFloat(0.1329),doubleToFloat(0.0347),doubleToFloat(0.0307),doubleToFloat(0.0051),doubleToFloat(0.0134),doubleToFloat(0.0353),doubleToFloat(0.1366),doubleToFloat(0.0058),doubleToFloat(0.1249),doubleToFloat(0.1081),doubleToFloat(0.0147),doubleToFloat(0.117),doubleToFloat(0.1349),doubleToFloat(0.1856),doubleToFloat(0.0462),doubleToFloat(0.1842),doubleToFloat(0.1559),doubleToFloat(0.0454),doubleToFloat(0.148),doubleToFloat(0.1033),doubleToFloat(0.3244),doubleToFloat(0.0096),doubleToFloat(0.1758),doubleToFloat(0.0039),doubleToFloat(0.1759),doubleToFloat(0.011),doubleToFloat(0.3241),doubleToFloat(0.0033),doubleToFloat(0.173),doubleToFloat(0.1764),doubleToFloat(0.3074),doubleToFloat(0.1757),doubleToFloat(0.1732),doubleToFloat(0.1519),doubleToFloat(0.3074),doubleToFloat(0.1513),doubleToFloat(0.1756),doubleToFloat(0.032),doubleToFloat(0.2159),doubleToFloat(0.0368),doubleToFloat(0.1791),doubleToFloat(0.0165),doubleToFloat(0.3169),doubleToFloat(0.0458),doubleToFloat(0.3158),doubleToFloat(0.0193),doubleToFloat(0.172),doubleToFloat(0.0594),doubleToFloat(0.2087),doubleToFloat(0.0476),doubleToFloat(0.1736),doubleToFloat(0.0504),doubleToFloat(0.2073),doubleToFloat(0.064),doubleToFloat(0.2362),doubleToFloat(0.0821),doubleToFloat(0.3267),doubleToFloat(0.0796),doubleToFloat(0.1717),doubleToFloat(0.0822),doubleToFloat(0.1726),doubleToFloat(0.1297),doubleToFloat(0.3077),doubleToFloat(0.1289),doubleToFloat(0.3074),doubleToFloat(0.1865),doubleToFloat(0.1742),doubleToFloat(0.184),doubleToFloat(0.0061),doubleToFloat(0.1086),doubleToFloat(0.1366),doubleToFloat(0.0368),doubleToFloat(0.1241),doubleToFloat(0.1189),doubleToFloat(0.0168),doubleToFloat(0.0309),doubleToFloat(0.0211),doubleToFloat(0.1882),doubleToFloat(0.14),doubleToFloat(0.1857)], Java.type("float[]")))))))))))
              .addChild(new HAnimJoint("hanim_sacroiliac").setName("vl5").setDEF("hanim_vl5").setCenter(Java.to([doubleToFloat(0),doubleToFloat(35.77),doubleToFloat(-0.5028)], Java.type("float[]")))
                .addChild(new HAnimSegment("hanim_vl5").setName("l5").setDEF("hanim_l5")
                  .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(35.77),doubleToFloat(-0.5028)], Java.type("float[]")))
                    .addChild(new Shape()
                      .setAppearance(new Appearance()
                        .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                        .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                      .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([7,5,3,-1,3,4,7,-1,4,8,7,-1,9,10,1,-1,1,0,9,-1,11,9,0,-1,0,2,11,-1,67,16,15,-1,16,17,14,-1,14,15,16,-1,67,15,8,-1,7,8,15,-1,15,14,7,-1,67,206,16,-1,13,17,16,-1,16,206,13,-1,22,23,21,-1,21,20,22,-1,17,22,20,-1,20,14,17,-1,6,5,20,-1,20,21,6,-1,5,7,14,-1,14,20,5,-1,18,19,23,-1,23,22,18,-1,13,18,22,-1,22,17,13,-1,2,6,11,-1,30,31,28,-1,28,27,30,-1,32,30,27,-1,27,29,32,-1,23,32,29,-1,29,21,23,-1,10,9,27,-1,27,28,10,-1,9,11,29,-1,29,27,9,-1,11,6,21,-1,21,29,11,-1,24,25,31,-1,31,30,24,-1,26,24,30,-1,30,32,26,-1,19,26,32,-1,32,23,19,-1,68,207,206,-1,206,67,68,-1,36,35,24,-1,24,26,36,-1,69,208,207,-1,207,68,69,-1,208,38,34,-1,34,207,208,-1,207,34,39,-1,39,206,207,-1,19,40,26,-1,41,36,26,-1,26,40,41,-1,41,40,39,-1,39,34,41,-1,43,42,35,-1,35,36,43,-1,44,43,36,-1,36,41,44,-1,38,44,41,-1,41,34,38,-1,70,209,208,-1,208,69,70,-1,209,46,38,-1,38,208,209,-1,48,47,42,-1,42,43,48,-1,46,49,44,-1,44,38,46,-1,71,210,209,-1,209,70,71,-1,210,51,46,-1,46,209,210,-1,53,52,47,-1,47,48,53,-1,54,53,48,-1,48,49,54,-1,51,54,49,-1,49,46,51,-1,72,55,210,-1,210,71,72,-1,55,56,51,-1,51,210,55,-1,58,57,52,-1,52,53,58,-1,59,58,53,-1,53,54,59,-1,56,59,54,-1,54,51,56,-1,60,61,19,-1,19,18,60,-1,62,60,18,-1,18,13,62,-1,63,62,13,-1,13,39,63,-1,61,64,40,-1,40,19,61,-1,64,63,39,-1,39,40,64,-1,2,3,5,-1,2,5,6,-1,13,206,39,-1,43,44,49,-1,49,48,43,-1,60,62,63,-1,63,64,60,-1,60,64,61,-1,73,74,65,-1,65,66,73,-1,8,4,74,-1,74,73,8,-1,75,76,73,-1,73,66,75,-1,76,12,8,-1,8,73,76,-1,76,77,33,-1,178,179,212,-1,75,78,77,-1,77,76,75,-1,79,180,181,-1,33,77,213,-1,80,213,77,-1,77,78,80,-1,81,182,183,-1,37,213,214,-1,82,214,213,-1,213,80,82,-1,83,184,185,-1,45,214,215,-1,84,215,214,-1,214,82,84,-1,85,86,50,-1,50,215,85,-1,87,85,215,-1,215,84,87,-1,88,89,86,-1,86,85,88,-1,90,88,85,-1,85,87,90,-1,91,186,187,-1,188,189,216,-1,228,190,191,-1,50,86,230,-1,92,93,211,-1,211,230,92,-1,89,92,230,-1,230,86,89,-1,95,97,99,-1,99,96,95,-1,96,99,100,-1,101,1,10,-1,1,101,102,-1,102,94,1,-1,153,106,107,-1,105,108,107,-1,107,106,105,-1,153,100,106,-1,106,100,99,-1,99,105,106,-1,153,107,217,-1,107,108,104,-1,104,217,107,-1,112,114,113,-1,113,111,112,-1,111,113,108,-1,108,105,111,-1,111,97,98,-1,98,112,111,-1,105,99,97,-1,97,111,105,-1,114,110,109,-1,109,113,114,-1,113,109,104,-1,104,108,113,-1,94,102,98,-1,28,31,119,-1,119,117,28,-1,117,119,120,-1,120,118,117,-1,118,120,114,-1,114,112,118,-1,117,101,10,-1,10,28,117,-1,118,102,101,-1,101,117,118,-1,112,98,102,-1,102,118,112,-1,31,25,115,-1,115,119,31,-1,119,115,116,-1,116,120,119,-1,120,116,110,-1,110,114,120,-1,217,218,154,-1,154,153,217,-1,115,123,124,-1,124,116,115,-1,218,219,155,-1,155,154,218,-1,122,126,219,-1,219,218,122,-1,127,122,218,-1,218,217,127,-1,110,116,128,-1,116,124,129,-1,129,128,116,-1,127,128,129,-1,129,122,127,-1,123,130,131,-1,131,124,123,-1,124,131,132,-1,132,129,124,-1,129,132,126,-1,126,122,129,-1,219,220,156,-1,156,155,219,-1,126,134,220,-1,220,219,126,-1,130,135,136,-1,136,131,130,-1,132,137,134,-1,134,126,132,-1,220,221,157,-1,157,156,220,-1,134,139,221,-1,221,220,134,-1,135,140,141,-1,141,136,135,-1,136,141,142,-1,142,137,136,-1,137,142,139,-1,139,134,137,-1,221,143,158,-1,158,157,221,-1,139,144,143,-1,143,221,139,-1,140,145,146,-1,146,141,140,-1,141,146,147,-1,147,142,141,-1,142,147,144,-1,144,139,142,-1,110,149,148,-1,148,109,110,-1,109,148,150,-1,150,104,109,-1,104,150,151,-1,151,127,104,-1,128,152,149,-1,149,110,128,-1,127,151,152,-1,152,128,127,-1,94,97,95,-1,94,98,97,-1,104,127,217,-1,137,132,131,-1,131,136,137,-1,151,150,148,-1,148,152,151,-1,148,149,152,-1,65,160,159,-1,159,66,65,-1,160,96,100,-1,100,159,160,-1,159,161,75,-1,75,66,159,-1,100,103,161,-1,161,159,100,-1,161,121,162,-1,193,223,192,-1,162,78,75,-1,75,161,162,-1,163,194,195,-1,121,224,162,-1,162,224,80,-1,80,78,162,-1,164,196,197,-1,125,225,224,-1,224,225,82,-1,82,80,224,-1,165,198,199,-1,133,226,225,-1,225,226,84,-1,84,82,225,-1,138,167,166,-1,166,226,138,-1,226,166,87,-1,87,84,226,-1,167,169,168,-1,168,166,167,-1,166,168,90,-1,90,87,166,-1,170,200,201,-1,203,227,202,-1,229,204,205,-1,138,231,167,-1,222,172,171,-1,171,231,222,-1,231,171,169,-1,169,167,231,-1,173,174,35,-1,35,42,173,-1,175,173,42,-1,42,47,175,-1,176,175,47,-1,47,52,176,-1,177,176,52,-1,52,57,177,-1,24,35,174,-1,174,25,24,-1,25,174,123,-1,123,115,25,-1,174,173,130,-1,130,123,174,-1,173,175,135,-1,135,130,173,-1,175,176,140,-1,140,135,175,-1,176,177,145,-1,145,140,176,-1,237,238,233,-1,233,232,237,-1,239,237,232,-1,232,234,239,-1,240,239,234,-1,234,235,240,-1,241,240,235,-1,235,236,241,-1,244,245,242,-1,242,243,244,-1,245,241,236,-1,236,242,245,-1,233,238,250,-1,250,246,233,-1,246,250,251,-1,251,247,246,-1,247,251,252,-1,252,248,247,-1,248,252,253,-1,253,249,248,-1,254,255,244,-1,244,243,254,-1,249,253,255,-1,255,254,249,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([179,180,181,-1,181,182,179,-1,182,183,179,-1,0,1,2,-1,2,3,0,-1,4,0,3,-1,3,5,4,-1,6,7,8,-1,7,10,11,-1,11,8,7,-1,9,8,12,-1,13,12,8,-1,8,11,13,-1,14,15,7,-1,16,10,7,-1,7,15,16,-1,17,18,19,-1,19,20,17,-1,10,17,20,-1,20,11,10,-1,21,22,20,-1,20,19,21,-1,22,13,11,-1,11,20,22,-1,23,24,18,-1,18,17,23,-1,16,23,17,-1,17,10,16,-1,5,21,4,-1,71,26,27,-1,27,72,71,-1,29,25,28,-1,28,30,29,-1,18,29,30,-1,30,19,18,-1,74,232,73,-1,73,27,74,-1,0,4,30,-1,30,28,0,-1,4,21,19,-1,19,30,4,-1,75,32,26,-1,26,76,75,-1,33,31,25,-1,25,29,33,-1,24,33,29,-1,29,18,24,-1,34,35,15,-1,15,14,34,-1,36,37,31,-1,31,33,36,-1,38,39,35,-1,35,34,38,-1,39,40,41,-1,41,35,39,-1,35,41,42,-1,42,15,35,-1,24,43,33,-1,44,36,33,-1,33,43,44,-1,44,43,42,-1,42,41,44,-1,45,46,37,-1,37,36,45,-1,47,45,36,-1,36,44,47,-1,40,47,44,-1,44,41,40,-1,48,49,39,-1,39,38,48,-1,49,50,40,-1,40,39,49,-1,51,52,46,-1,46,45,51,-1,50,53,47,-1,47,40,50,-1,54,55,49,-1,49,48,54,-1,55,56,50,-1,50,49,55,-1,57,58,52,-1,52,51,57,-1,59,57,51,-1,51,53,59,-1,56,59,53,-1,53,50,56,-1,60,61,55,-1,55,54,60,-1,61,62,56,-1,56,55,61,-1,63,64,58,-1,58,57,63,-1,65,63,57,-1,57,59,65,-1,62,65,59,-1,59,56,62,-1,66,67,24,-1,24,23,66,-1,68,66,23,-1,23,16,68,-1,69,68,16,-1,16,42,69,-1,67,70,43,-1,43,24,67,-1,70,69,42,-1,42,43,70,-1,184,181,180,-1,5,22,21,-1,16,15,42,-1,45,47,53,-1,53,51,45,-1,66,68,69,-1,69,70,66,-1,66,70,67,-1,185,186,187,-1,187,188,185,-1,183,182,186,-1,186,185,183,-1,189,190,185,-1,185,188,189,-1,190,191,183,-1,183,185,190,-1,190,192,193,-1,193,191,190,-1,189,194,192,-1,192,190,189,-1,195,196,193,-1,193,192,195,-1,197,195,192,-1,192,194,197,-1,198,199,196,-1,196,195,198,-1,200,198,195,-1,195,197,200,-1,201,202,199,-1,199,198,201,-1,203,201,198,-1,198,200,203,-1,204,205,202,-1,202,201,204,-1,206,204,201,-1,201,203,206,-1,207,208,205,-1,205,204,207,-1,209,207,204,-1,204,206,209,-1,79,80,59,-1,59,56,79,-1,81,82,77,-1,77,78,81,-1,83,84,80,-1,80,79,83,-1,85,86,81,-1,81,78,85,-1,211,212,210,-1,210,213,211,-1,213,210,214,-1,87,89,88,-1,90,87,91,-1,91,92,90,-1,93,95,94,-1,98,97,94,-1,94,95,98,-1,96,99,95,-1,95,99,100,-1,100,98,95,-1,101,94,102,-1,94,97,103,-1,103,102,94,-1,106,105,104,-1,104,107,106,-1,107,104,97,-1,97,98,107,-1,107,109,108,-1,108,106,107,-1,98,100,109,-1,109,107,98,-1,105,111,110,-1,110,104,105,-1,104,110,103,-1,103,97,104,-1,92,91,108,-1,114,113,158,-1,158,159,114,-1,115,112,116,-1,116,117,115,-1,117,116,105,-1,105,106,117,-1,160,233,161,-1,161,114,160,-1,117,91,87,-1,87,115,117,-1,106,108,91,-1,91,117,106,-1,113,119,162,-1,162,163,113,-1,112,118,120,-1,120,116,112,-1,116,120,111,-1,111,105,116,-1,102,122,121,-1,121,101,102,-1,118,124,123,-1,123,120,118,-1,122,126,125,-1,125,121,122,-1,128,127,126,-1,126,122,128,-1,129,128,122,-1,122,102,129,-1,111,120,130,-1,120,123,131,-1,131,130,120,-1,129,130,131,-1,131,128,129,-1,124,133,132,-1,132,123,124,-1,123,132,134,-1,134,131,123,-1,131,134,127,-1,127,128,131,-1,126,136,135,-1,135,125,126,-1,127,137,136,-1,136,126,127,-1,133,139,138,-1,138,132,133,-1,134,140,137,-1,137,127,134,-1,136,142,141,-1,141,135,136,-1,137,143,142,-1,142,136,137,-1,139,145,144,-1,144,138,139,-1,138,144,146,-1,146,140,138,-1,140,146,143,-1,143,137,140,-1,142,148,147,-1,147,141,142,-1,143,149,148,-1,148,142,143,-1,145,151,150,-1,150,144,145,-1,144,150,152,-1,152,146,144,-1,146,152,149,-1,149,143,146,-1,111,154,153,-1,153,110,111,-1,110,153,155,-1,155,103,110,-1,103,155,156,-1,156,129,103,-1,130,157,154,-1,154,111,130,-1,129,156,157,-1,157,130,129,-1,215,212,211,-1,92,108,109,-1,103,129,102,-1,140,134,132,-1,132,138,140,-1,156,155,153,-1,153,157,156,-1,153,154,157,-1,187,217,216,-1,216,188,187,-1,217,213,214,-1,214,216,217,-1,216,218,189,-1,189,188,216,-1,214,219,218,-1,218,216,214,-1,218,220,221,-1,220,218,219,-1,221,194,189,-1,189,218,221,-1,222,220,223,-1,220,222,221,-1,221,222,197,-1,197,194,221,-1,224,223,225,-1,223,224,222,-1,222,224,200,-1,200,197,222,-1,226,225,227,-1,225,226,224,-1,224,226,203,-1,203,200,224,-1,227,229,228,-1,228,226,227,-1,226,228,206,-1,206,203,226,-1,229,231,230,-1,230,228,229,-1,228,230,209,-1,209,206,228,-1,166,146,167,-1,146,166,143,-1,168,164,169,-1,164,168,165,-1,167,171,170,-1,170,166,167,-1,168,173,172,-1,172,165,168,-1,174,175,37,-1,37,46,174,-1,176,174,46,-1,46,52,176,-1,177,176,52,-1,52,58,177,-1,178,177,58,-1,58,64,178,-1,75,37,175,-1,175,32,75,-1,32,175,124,-1,124,162,32,-1,175,174,133,-1,133,124,175,-1,174,176,139,-1,139,133,174,-1,176,177,145,-1,145,139,176,-1,177,178,151,-1,151,145,177,-1,234,235,236,-1,236,237,234,-1,238,234,237,-1,237,239,238,-1,240,238,239,-1,239,241,240,-1,242,240,241,-1,241,243,242,-1,244,245,246,-1,246,247,244,-1,245,242,243,-1,243,246,245,-1,236,235,248,-1,248,249,236,-1,249,248,250,-1,250,251,249,-1,251,250,252,-1,252,253,251,-1,253,252,254,-1,254,255,253,-1,256,257,244,-1,244,247,256,-1,255,254,257,-1,257,256,255,-1], Java.type("int[]")))
                        .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0.6121),doubleToFloat(12.42),doubleToFloat(-1.302),doubleToFloat(-0.306),doubleToFloat(12.44),doubleToFloat(-1.342),doubleToFloat(1.298),doubleToFloat(12.61),doubleToFloat(-0.9894),doubleToFloat(1.781),doubleToFloat(12.59),doubleToFloat(0.0631),doubleToFloat(1.39),doubleToFloat(12.32),doubleToFloat(0.7954),doubleToFloat(2.575),doubleToFloat(12.19),doubleToFloat(0.1088),doubleToFloat(2.296),doubleToFloat(12.99),doubleToFloat(-1.428),doubleToFloat(2.816),doubleToFloat(11.43),doubleToFloat(1.178),doubleToFloat(1.978),doubleToFloat(11.24),doubleToFloat(2.044),doubleToFloat(0.8508),doubleToFloat(13.01),doubleToFloat(-2.971),doubleToFloat(0),doubleToFloat(12.99),doubleToFloat(-3.116),doubleToFloat(1.798),doubleToFloat(13.03),doubleToFloat(-2.673),doubleToFloat(2.93),doubleToFloat(10.3),doubleToFloat(2.438),doubleToFloat(4.494),doubleToFloat(11.02),doubleToFloat(1.591),doubleToFloat(2.634),doubleToFloat(12),doubleToFloat(1.741),doubleToFloat(1.984),doubleToFloat(11.24),doubleToFloat(3.19),doubleToFloat(2.767),doubleToFloat(10.58),doubleToFloat(3.261),doubleToFloat(3.906),doubleToFloat(11.73),doubleToFloat(1.675),doubleToFloat(4.949),doubleToFloat(11.55),doubleToFloat(-0.0209),doubleToFloat(4.834),doubleToFloat(10.96),doubleToFloat(-1.468),doubleToFloat(3.038),doubleToFloat(12.93),doubleToFloat(0.1389),doubleToFloat(3.493),doubleToFloat(12.17),doubleToFloat(-2.153),doubleToFloat(4.482),doubleToFloat(12.47),doubleToFloat(0.1389),doubleToFloat(4.113),doubleToFloat(11.34),doubleToFloat(-1.759),doubleToFloat(1.6),doubleToFloat(8.107),doubleToFloat(-2.333),doubleToFloat(0),doubleToFloat(7.839),doubleToFloat(-2.451),doubleToFloat(3.747),doubleToFloat(8.955),doubleToFloat(-1.991),doubleToFloat(0.9116),doubleToFloat(10.49),doubleToFloat(-4.097),doubleToFloat(0),doubleToFloat(10.5),doubleToFloat(-4.216),doubleToFloat(2.111),doubleToFloat(10.83),doubleToFloat(-3.644),doubleToFloat(1.482),doubleToFloat(7.538),doubleToFloat(-2.966),doubleToFloat(0),doubleToFloat(7.253),doubleToFloat(-3.071),doubleToFloat(3.64),doubleToFloat(8.877),doubleToFloat(-2.864),doubleToFloat(3.632),doubleToFloat(6.875),doubleToFloat(3.311),doubleToFloat(4.987),doubleToFloat(7.16),doubleToFloat(1.178),doubleToFloat(1.891),doubleToFloat(6.998),doubleToFloat(-2.272),doubleToFloat(3.799),doubleToFloat(7.09),doubleToFloat(-1.818),doubleToFloat(3.618),doubleToFloat(4.307),doubleToFloat(3.148),doubleToFloat(5.136),doubleToFloat(4.383),doubleToFloat(1.144),doubleToFloat(5.386),doubleToFloat(8.485),doubleToFloat(1.29),doubleToFloat(5.217),doubleToFloat(8.476),doubleToFloat(-0.4773),doubleToFloat(4.888),doubleToFloat(7.119),doubleToFloat(-0.8743),doubleToFloat(1.254),doubleToFloat(4.252),doubleToFloat(-2.726),doubleToFloat(3.163),doubleToFloat(4.3),doubleToFloat(-2.034),doubleToFloat(4.235),doubleToFloat(4.344),doubleToFloat(-0.4054),doubleToFloat(3.732),doubleToFloat(2.466),doubleToFloat(3.172),doubleToFloat(5.065),doubleToFloat(2.624),doubleToFloat(1.163),doubleToFloat(1.133),doubleToFloat(2.334),doubleToFloat(-2.855),doubleToFloat(3.748),doubleToFloat(2.51),doubleToFloat(-1.793),doubleToFloat(4.813),doubleToFloat(2.575),doubleToFloat(-0.4505),doubleToFloat(3.662),doubleToFloat(0.4951),doubleToFloat(3.308),doubleToFloat(5.323),doubleToFloat(0.5624),doubleToFloat(1.576),doubleToFloat(1.343),doubleToFloat(0.3925),doubleToFloat(-3.436),doubleToFloat(3.49),doubleToFloat(0.4011),doubleToFloat(-2.426),doubleToFloat(4.924),doubleToFloat(0.494),doubleToFloat(-0.8391),doubleToFloat(4.174),doubleToFloat(-0.4185),doubleToFloat(3.529),doubleToFloat(5.233),doubleToFloat(-0.3904),doubleToFloat(1.303),doubleToFloat(1.408),doubleToFloat(-0.524),doubleToFloat(-2.55),doubleToFloat(3.181),doubleToFloat(-0.5041),doubleToFloat(-1.817),doubleToFloat(4.511),doubleToFloat(-0.4626),doubleToFloat(-0.5779),doubleToFloat(6.538),doubleToFloat(11.31),doubleToFloat(-0.0209),doubleToFloat(6.166),doubleToFloat(10.58),doubleToFloat(-1.468),doubleToFloat(6.183),doubleToFloat(10.64),doubleToFloat(1.492),doubleToFloat(5.565),doubleToFloat(8.621),doubleToFloat(1.29),doubleToFloat(5.559),doubleToFloat(8.614),doubleToFloat(-0.4773),doubleToFloat(0),doubleToFloat(12.09),doubleToFloat(1.343),doubleToFloat(0),doubleToFloat(10.57),doubleToFloat(2.32),doubleToFloat(1.473),doubleToFloat(9.039),doubleToFloat(3.697),doubleToFloat(1.943),doubleToFloat(6.694),doubleToFloat(3.992),doubleToFloat(2.51),doubleToFloat(4.323),doubleToFloat(3.928),doubleToFloat(2.845),doubleToFloat(2.408),doubleToFloat(3.91),doubleToFloat(2.612),doubleToFloat(0.5037),doubleToFloat(4.216),doubleToFloat(2.623),doubleToFloat(-0.4527),doubleToFloat(4.138),doubleToFloat(1.082),doubleToFloat(10.57),doubleToFloat(2.32),doubleToFloat(0.6915),doubleToFloat(12.09),doubleToFloat(1.239),doubleToFloat(0),doubleToFloat(8.851),doubleToFloat(2.842),doubleToFloat(1.127),doubleToFloat(8.846),doubleToFloat(2.842),doubleToFloat(1.334),doubleToFloat(6.961),doubleToFloat(3.311),doubleToFloat(0),doubleToFloat(7.091),doubleToFloat(3.311),doubleToFloat(1.334),doubleToFloat(4.35),doubleToFloat(3.311),doubleToFloat(0),doubleToFloat(4.48),doubleToFloat(3.311),doubleToFloat(1.334),doubleToFloat(2.428),doubleToFloat(3.311),doubleToFloat(0),doubleToFloat(2.558),doubleToFloat(3.527),doubleToFloat(1.334),doubleToFloat(0.5456),doubleToFloat(3.311),doubleToFloat(0),doubleToFloat(0.6752),doubleToFloat(3.502),doubleToFloat(1.334),doubleToFloat(-0.5831),doubleToFloat(3.131),doubleToFloat(3.226),doubleToFloat(-0.6336),doubleToFloat(2.899),doubleToFloat(0),doubleToFloat(-0.4535),doubleToFloat(3.365),doubleToFloat(1.334),doubleToFloat(-1.253),doubleToFloat(1.537),doubleToFloat(3.662),doubleToFloat(-1.303),doubleToFloat(1.534),doubleToFloat(0),doubleToFloat(-1.123),doubleToFloat(1.537),doubleToFloat(4.773),doubleToFloat(-0.5),doubleToFloat(1.576),doubleToFloat(4.147),doubleToFloat(-1.179),doubleToFloat(1.158),doubleToFloat(4.125),doubleToFloat(-1.096),doubleToFloat(-0.4311),doubleToFloat(-1.298),doubleToFloat(12.61),doubleToFloat(-0.9894),doubleToFloat(-1.781),doubleToFloat(12.59),doubleToFloat(0.0631),doubleToFloat(-1.39),doubleToFloat(12.32),doubleToFloat(0.7954),doubleToFloat(-2.575),doubleToFloat(12.19),doubleToFloat(0.1088),doubleToFloat(-2.296),doubleToFloat(12.99),doubleToFloat(-1.428),doubleToFloat(-2.816),doubleToFloat(11.43),doubleToFloat(1.178),doubleToFloat(-1.978),doubleToFloat(11.24),doubleToFloat(2.044),doubleToFloat(-0.8508),doubleToFloat(13.01),doubleToFloat(-2.971),doubleToFloat(-1.798),doubleToFloat(13.03),doubleToFloat(-2.673),doubleToFloat(-2.93),doubleToFloat(10.3),doubleToFloat(2.438),doubleToFloat(-4.494),doubleToFloat(11.02),doubleToFloat(1.591),doubleToFloat(-2.634),doubleToFloat(12),doubleToFloat(1.741),doubleToFloat(-1.984),doubleToFloat(11.24),doubleToFloat(3.19),doubleToFloat(-2.767),doubleToFloat(10.58),doubleToFloat(3.261),doubleToFloat(-3.906),doubleToFloat(11.73),doubleToFloat(1.675),doubleToFloat(-4.949),doubleToFloat(11.55),doubleToFloat(-0.0209),doubleToFloat(-4.834),doubleToFloat(10.96),doubleToFloat(-1.468),doubleToFloat(-3.038),doubleToFloat(12.93),doubleToFloat(0.1389),doubleToFloat(-3.493),doubleToFloat(12.17),doubleToFloat(-2.153),doubleToFloat(-4.482),doubleToFloat(12.47),doubleToFloat(0.1389),doubleToFloat(-4.113),doubleToFloat(11.34),doubleToFloat(-1.759),doubleToFloat(-1.6),doubleToFloat(8.107),doubleToFloat(-2.333),doubleToFloat(-3.747),doubleToFloat(8.955),doubleToFloat(-1.991),doubleToFloat(-0.9116),doubleToFloat(10.49),doubleToFloat(-4.097),doubleToFloat(-2.111),doubleToFloat(10.83),doubleToFloat(-3.644),doubleToFloat(-1.482),doubleToFloat(7.538),doubleToFloat(-2.966),doubleToFloat(-3.64),doubleToFloat(8.877),doubleToFloat(-2.864),doubleToFloat(-3.632),doubleToFloat(6.875),doubleToFloat(3.311),doubleToFloat(-4.987),doubleToFloat(7.16),doubleToFloat(1.178),doubleToFloat(-1.891),doubleToFloat(6.998),doubleToFloat(-2.272),doubleToFloat(-3.799),doubleToFloat(7.09),doubleToFloat(-1.818),doubleToFloat(-3.618),doubleToFloat(4.307),doubleToFloat(3.148),doubleToFloat(-5.136),doubleToFloat(4.383),doubleToFloat(1.144),doubleToFloat(-5.386),doubleToFloat(8.485),doubleToFloat(1.29),doubleToFloat(-5.217),doubleToFloat(8.476),doubleToFloat(-0.4773),doubleToFloat(-4.888),doubleToFloat(7.119),doubleToFloat(-0.8743),doubleToFloat(-1.254),doubleToFloat(4.252),doubleToFloat(-2.726),doubleToFloat(-3.163),doubleToFloat(4.3),doubleToFloat(-2.034),doubleToFloat(-4.235),doubleToFloat(4.344),doubleToFloat(-0.4054),doubleToFloat(-3.732),doubleToFloat(2.466),doubleToFloat(3.172),doubleToFloat(-5.065),doubleToFloat(2.624),doubleToFloat(1.163),doubleToFloat(-1.133),doubleToFloat(2.334),doubleToFloat(-2.855),doubleToFloat(-3.748),doubleToFloat(2.51),doubleToFloat(-1.793),doubleToFloat(-4.813),doubleToFloat(2.575),doubleToFloat(-0.4505),doubleToFloat(-3.662),doubleToFloat(0.4951),doubleToFloat(3.308),doubleToFloat(-5.323),doubleToFloat(0.5624),doubleToFloat(1.576),doubleToFloat(-1.343),doubleToFloat(0.3925),doubleToFloat(-3.436),doubleToFloat(-3.49),doubleToFloat(0.4011),doubleToFloat(-2.426),doubleToFloat(-4.924),doubleToFloat(0.494),doubleToFloat(-0.8391),doubleToFloat(-4.174),doubleToFloat(-0.4185),doubleToFloat(3.529),doubleToFloat(-5.233),doubleToFloat(-0.3904),doubleToFloat(1.303),doubleToFloat(-1.408),doubleToFloat(-0.524),doubleToFloat(-2.55),doubleToFloat(-3.181),doubleToFloat(-0.5041),doubleToFloat(-1.817),doubleToFloat(-4.511),doubleToFloat(-0.4626),doubleToFloat(-0.5779),doubleToFloat(-6.538),doubleToFloat(11.31),doubleToFloat(-0.0209),doubleToFloat(-6.166),doubleToFloat(10.58),doubleToFloat(-1.468),doubleToFloat(-6.183),doubleToFloat(10.64),doubleToFloat(1.492),doubleToFloat(-5.565),doubleToFloat(8.621),doubleToFloat(1.29),doubleToFloat(-5.559),doubleToFloat(8.614),doubleToFloat(-0.4773),doubleToFloat(-1.473),doubleToFloat(9.039),doubleToFloat(3.697),doubleToFloat(-1.943),doubleToFloat(6.694),doubleToFloat(3.992),doubleToFloat(-2.51),doubleToFloat(4.323),doubleToFloat(3.928),doubleToFloat(-2.845),doubleToFloat(2.408),doubleToFloat(3.91),doubleToFloat(-2.612),doubleToFloat(0.5037),doubleToFloat(4.216),doubleToFloat(-2.623),doubleToFloat(-0.4527),doubleToFloat(4.138),doubleToFloat(-1.082),doubleToFloat(10.57),doubleToFloat(2.32),doubleToFloat(-0.6915),doubleToFloat(12.09),doubleToFloat(1.239),doubleToFloat(-1.127),doubleToFloat(8.846),doubleToFloat(2.842),doubleToFloat(-1.334),doubleToFloat(6.961),doubleToFloat(3.311),doubleToFloat(-1.334),doubleToFloat(4.35),doubleToFloat(3.311),doubleToFloat(-1.334),doubleToFloat(2.428),doubleToFloat(3.311),doubleToFloat(-1.334),doubleToFloat(0.5456),doubleToFloat(3.311),doubleToFloat(-1.334),doubleToFloat(-0.5831),doubleToFloat(3.131),doubleToFloat(-3.226),doubleToFloat(-0.6336),doubleToFloat(2.899),doubleToFloat(-1.334),doubleToFloat(-1.253),doubleToFloat(1.537),doubleToFloat(-3.662),doubleToFloat(-1.303),doubleToFloat(1.534),doubleToFloat(-4.773),doubleToFloat(-0.5),doubleToFloat(1.576),doubleToFloat(-4.147),doubleToFloat(-1.179),doubleToFloat(1.158),doubleToFloat(-4.125),doubleToFloat(-1.096),doubleToFloat(-0.4311),doubleToFloat(-0.0011),doubleToFloat(4.252),doubleToFloat(-2.726),doubleToFloat(-0.0007),doubleToFloat(6.998),doubleToFloat(-2.272),doubleToFloat(-0.0012),doubleToFloat(2.334),doubleToFloat(-2.855),doubleToFloat(-0.001),doubleToFloat(0.3925),doubleToFloat(-3.436),doubleToFloat(-0.001),doubleToFloat(-0.524),doubleToFloat(-2.55),doubleToFloat(3.632),doubleToFloat(6.875),doubleToFloat(3.311),doubleToFloat(2.93),doubleToFloat(10.3),doubleToFloat(2.438),doubleToFloat(3.618),doubleToFloat(4.307),doubleToFloat(3.148),doubleToFloat(3.632),doubleToFloat(6.875),doubleToFloat(3.311),doubleToFloat(3.732),doubleToFloat(2.466),doubleToFloat(3.172),doubleToFloat(3.618),doubleToFloat(4.307),doubleToFloat(3.148),doubleToFloat(3.662),doubleToFloat(0.4951),doubleToFloat(3.308),doubleToFloat(3.732),doubleToFloat(2.466),doubleToFloat(3.172),doubleToFloat(4.511),doubleToFloat(-0.4626),doubleToFloat(-0.5779),doubleToFloat(4.924),doubleToFloat(0.494),doubleToFloat(-0.8391),doubleToFloat(4.924),doubleToFloat(0.494),doubleToFloat(-0.8391),doubleToFloat(5.323),doubleToFloat(0.5624),doubleToFloat(1.576),doubleToFloat(5.323),doubleToFloat(0.5624),doubleToFloat(1.576),doubleToFloat(3.662),doubleToFloat(0.4951),doubleToFloat(3.308),doubleToFloat(-2.93),doubleToFloat(10.3),doubleToFloat(2.438),doubleToFloat(-3.632),doubleToFloat(6.875),doubleToFloat(3.311),doubleToFloat(-3.632),doubleToFloat(6.875),doubleToFloat(3.311),doubleToFloat(-3.618),doubleToFloat(4.307),doubleToFloat(3.148),doubleToFloat(-3.618),doubleToFloat(4.307),doubleToFloat(3.148),doubleToFloat(-3.732),doubleToFloat(2.466),doubleToFloat(3.172),doubleToFloat(-3.732),doubleToFloat(2.466),doubleToFloat(3.172),doubleToFloat(-3.662),doubleToFloat(0.4951),doubleToFloat(3.308),doubleToFloat(-4.924),doubleToFloat(0.494),doubleToFloat(-0.8391),doubleToFloat(-4.511),doubleToFloat(-0.4626),doubleToFloat(-0.5779),doubleToFloat(-5.323),doubleToFloat(0.5624),doubleToFloat(1.576),doubleToFloat(-4.924),doubleToFloat(0.494),doubleToFloat(-0.8391),doubleToFloat(-3.662),doubleToFloat(0.4951),doubleToFloat(3.308),doubleToFloat(-5.323),doubleToFloat(0.5624),doubleToFloat(1.576),doubleToFloat(2.93),doubleToFloat(10.3),doubleToFloat(2.438),doubleToFloat(3.632),doubleToFloat(6.875),doubleToFloat(3.311),doubleToFloat(3.618),doubleToFloat(4.307),doubleToFloat(3.148),doubleToFloat(3.732),doubleToFloat(2.466),doubleToFloat(3.172),doubleToFloat(3.662),doubleToFloat(0.4951),doubleToFloat(3.308),doubleToFloat(4.511),doubleToFloat(-0.4626),doubleToFloat(-0.5779),doubleToFloat(1.127),doubleToFloat(8.846),doubleToFloat(2.842),doubleToFloat(1.334),doubleToFloat(4.35),doubleToFloat(3.311),doubleToFloat(1.334),doubleToFloat(2.428),doubleToFloat(3.311),doubleToFloat(1.334),doubleToFloat(0.5456),doubleToFloat(3.311),doubleToFloat(4.773),doubleToFloat(-0.5),doubleToFloat(1.576),doubleToFloat(-2.93),doubleToFloat(10.3),doubleToFloat(2.438),doubleToFloat(-3.632),doubleToFloat(6.875),doubleToFloat(3.311),doubleToFloat(-3.618),doubleToFloat(4.307),doubleToFloat(3.148),doubleToFloat(-3.732),doubleToFloat(2.466),doubleToFloat(3.172),doubleToFloat(-3.662),doubleToFloat(0.4951),doubleToFloat(3.308),doubleToFloat(-4.511),doubleToFloat(-0.4626),doubleToFloat(-0.5779),doubleToFloat(-1.127),doubleToFloat(8.846),doubleToFloat(2.842),doubleToFloat(-1.334),doubleToFloat(4.35),doubleToFloat(3.311),doubleToFloat(-1.334),doubleToFloat(2.428),doubleToFloat(3.311),doubleToFloat(-1.334),doubleToFloat(0.5456),doubleToFloat(3.311),doubleToFloat(-4.773),doubleToFloat(-0.5),doubleToFloat(1.576),doubleToFloat(4.773),doubleToFloat(-0.5),doubleToFloat(1.576),doubleToFloat(-4.773),doubleToFloat(-0.5),doubleToFloat(1.576),doubleToFloat(4.773),doubleToFloat(-0.5),doubleToFloat(1.576),doubleToFloat(-4.773),doubleToFloat(-0.5),doubleToFloat(1.576),doubleToFloat(0.6121),doubleToFloat(15.55),doubleToFloat(-1.302),doubleToFloat(0),doubleToFloat(15.55),doubleToFloat(-1.383),doubleToFloat(1.298),doubleToFloat(15.55),doubleToFloat(-0.9895),doubleToFloat(1.781),doubleToFloat(15.55),doubleToFloat(0.0632),doubleToFloat(1.39),doubleToFloat(15.55),doubleToFloat(0.7954),doubleToFloat(0.6121),doubleToFloat(11.8),doubleToFloat(-1.302),doubleToFloat(0),doubleToFloat(11.87),doubleToFloat(-1.383),doubleToFloat(1.298),doubleToFloat(12.1),doubleToFloat(-0.9894),doubleToFloat(1.781),doubleToFloat(12.07),doubleToFloat(0.0631),doubleToFloat(1.39),doubleToFloat(11.65),doubleToFloat(0.7954),doubleToFloat(0.6897),doubleToFloat(15.7),doubleToFloat(1.236),doubleToFloat(0),doubleToFloat(15.06),doubleToFloat(1.343),doubleToFloat(0),doubleToFloat(11.27),doubleToFloat(1.343),doubleToFloat(0.6897),doubleToFloat(11.28),doubleToFloat(1.236),doubleToFloat(-0.6121),doubleToFloat(15.55),doubleToFloat(-1.302),doubleToFloat(-1.298),doubleToFloat(15.55),doubleToFloat(-0.9895),doubleToFloat(-1.781),doubleToFloat(15.55),doubleToFloat(0.0631),doubleToFloat(-1.39),doubleToFloat(15.55),doubleToFloat(0.7954),doubleToFloat(-0.6121),doubleToFloat(11.8),doubleToFloat(-1.302),doubleToFloat(-1.298),doubleToFloat(12.1),doubleToFloat(-0.9895),doubleToFloat(-1.781),doubleToFloat(12.07),doubleToFloat(0.0631),doubleToFloat(-1.39),doubleToFloat(11.65),doubleToFloat(0.7954),doubleToFloat(-0.6897),doubleToFloat(15.7),doubleToFloat(1.236),doubleToFloat(-0.6897),doubleToFloat(11.28),doubleToFloat(1.236)], Java.type("float[]"))))
                        .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.2661),doubleToFloat(0.5914),doubleToFloat(0.3505),doubleToFloat(0.5919),doubleToFloat(0.3554),doubleToFloat(0.5911),doubleToFloat(0.2505),doubleToFloat(0.5754),doubleToFloat(0.241),doubleToFloat(0.592),doubleToFloat(0.2112),doubleToFloat(0.5805),doubleToFloat(0.0763),doubleToFloat(0.4945),doubleToFloat(0.1025),doubleToFloat(0.5076),doubleToFloat(0.0865),doubleToFloat(0.5614),doubleToFloat(0.0652),doubleToFloat(0.5465),doubleToFloat(0.1412),doubleToFloat(0.5207),doubleToFloat(0.1108),doubleToFloat(0.5655),doubleToFloat(0.0786),doubleToFloat(0.5849),doubleToFloat(0.1073),doubleToFloat(0.5839),doubleToFloat(0.0877),doubleToFloat(0.4617),doubleToFloat(0.1185),doubleToFloat(0.4741),doubleToFloat(0.1474),doubleToFloat(0.4856),doubleToFloat(0.1724),doubleToFloat(0.5255),doubleToFloat(0.2089),doubleToFloat(0.5196),doubleToFloat(0.2133),doubleToFloat(0.556),doubleToFloat(0.1645),doubleToFloat(0.5709),doubleToFloat(0.2067),doubleToFloat(0.5908),doubleToFloat(0.1632),doubleToFloat(0.5887),doubleToFloat(0.1708),doubleToFloat(0.4854),doubleToFloat(0.1963),doubleToFloat(0.4863),doubleToFloat(0.2708),doubleToFloat(0.4736),doubleToFloat(0.347),doubleToFloat(0.4316),doubleToFloat(0.3616),doubleToFloat(0.5328),doubleToFloat(0.2733),doubleToFloat(0.5359),doubleToFloat(0.238),doubleToFloat(0.493),doubleToFloat(0.249),doubleToFloat(0.5451),doubleToFloat(0.2638),doubleToFloat(0.4568),doubleToFloat(0.3214),doubleToFloat(0.4203),doubleToFloat(0.2252),doubleToFloat(0.4828),doubleToFloat(0.0566),doubleToFloat(0.3896),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.2183),doubleToFloat(0.385),doubleToFloat(0.3504),doubleToFloat(0.3844),doubleToFloat(0.0529),doubleToFloat(0.3458),doubleToFloat(0.1128),doubleToFloat(0.344),doubleToFloat(0.1491),doubleToFloat(0.3449),doubleToFloat(0.1525),doubleToFloat(0.3869),doubleToFloat(0.1538),doubleToFloat(0.4251),doubleToFloat(0.1784),doubleToFloat(0.4249),doubleToFloat(0.1911),doubleToFloat(0.3858),doubleToFloat(0.2175),doubleToFloat(0.3427),doubleToFloat(0.3608),doubleToFloat(0.3469),doubleToFloat(0.1838),doubleToFloat(0.3438),doubleToFloat(0.0518),doubleToFloat(0.2941),doubleToFloat(0.1116),doubleToFloat(0.2965),doubleToFloat(0.1487),doubleToFloat(0.2975),doubleToFloat(0.2175),doubleToFloat(0.2944),doubleToFloat(0.3621),doubleToFloat(0.2922),doubleToFloat(0.1849),doubleToFloat(0.2961),doubleToFloat(0.0501),doubleToFloat(0.2428),doubleToFloat(0.1011),doubleToFloat(0.241),doubleToFloat(0.1445),doubleToFloat(0.2419),doubleToFloat(0.2369),doubleToFloat(0.2375),doubleToFloat(0.3561),doubleToFloat(0.2404),doubleToFloat(0.1927),doubleToFloat(0.24),doubleToFloat(0.0553),doubleToFloat(0.217),doubleToFloat(0.1067),doubleToFloat(0.2154),doubleToFloat(0.1463),doubleToFloat(0.2162),doubleToFloat(0.227),doubleToFloat(0.2131),doubleToFloat(0.3536),doubleToFloat(0.2151),doubleToFloat(0.1879),doubleToFloat(0.2143),doubleToFloat(0.1715),doubleToFloat(0.4655),doubleToFloat(0.1797),doubleToFloat(0.4646),doubleToFloat(0.1569),doubleToFloat(0.4642),doubleToFloat(0.1544),doubleToFloat(0.4288),doubleToFloat(0.1782),doubleToFloat(0.4286),doubleToFloat(0.3477),doubleToFloat(0.431),doubleToFloat(0.3623),doubleToFloat(0.5333),doubleToFloat(0.3623),doubleToFloat(0.5333),doubleToFloat(0.3505),doubleToFloat(0.5919),doubleToFloat(0.3223),doubleToFloat(0.4192),doubleToFloat(0.3477),doubleToFloat(0.431),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.1445),doubleToFloat(0.2419),doubleToFloat(0.1927),doubleToFloat(0.24),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.1445),doubleToFloat(0.2419),doubleToFloat(0.1927),doubleToFloat(0.24),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.2661),doubleToFloat(0.5914),doubleToFloat(0.3505),doubleToFloat(0.5919),doubleToFloat(0.3554),doubleToFloat(0.5911),doubleToFloat(0.2505),doubleToFloat(0.5754),doubleToFloat(0.241),doubleToFloat(0.592),doubleToFloat(0.2112),doubleToFloat(0.5805),doubleToFloat(0.0763),doubleToFloat(0.4945),doubleToFloat(0.1025),doubleToFloat(0.5076),doubleToFloat(0.0865),doubleToFloat(0.5614),doubleToFloat(0.0652),doubleToFloat(0.5465),doubleToFloat(0.1412),doubleToFloat(0.5207),doubleToFloat(0.1108),doubleToFloat(0.5655),doubleToFloat(0.0786),doubleToFloat(0.5849),doubleToFloat(0.1073),doubleToFloat(0.5839),doubleToFloat(0.0877),doubleToFloat(0.4617),doubleToFloat(0.1185),doubleToFloat(0.4741),doubleToFloat(0.1474),doubleToFloat(0.4856),doubleToFloat(0.1724),doubleToFloat(0.5255),doubleToFloat(0.2089),doubleToFloat(0.5196),doubleToFloat(0.2133),doubleToFloat(0.556),doubleToFloat(0.1645),doubleToFloat(0.5709),doubleToFloat(0.2067),doubleToFloat(0.5908),doubleToFloat(0.1632),doubleToFloat(0.5887),doubleToFloat(0.1708),doubleToFloat(0.4854),doubleToFloat(0.1963),doubleToFloat(0.4863),doubleToFloat(0.2708),doubleToFloat(0.4736),doubleToFloat(0.347),doubleToFloat(0.4316),doubleToFloat(0.3616),doubleToFloat(0.5328),doubleToFloat(0.2733),doubleToFloat(0.5359),doubleToFloat(0.238),doubleToFloat(0.493),doubleToFloat(0.249),doubleToFloat(0.5451),doubleToFloat(0.2638),doubleToFloat(0.4568),doubleToFloat(0.3214),doubleToFloat(0.4203),doubleToFloat(0.2252),doubleToFloat(0.4828),doubleToFloat(0.0566),doubleToFloat(0.3896),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.2183),doubleToFloat(0.385),doubleToFloat(0.3504),doubleToFloat(0.3844),doubleToFloat(0.0529),doubleToFloat(0.3458),doubleToFloat(0.1128),doubleToFloat(0.344),doubleToFloat(0.1491),doubleToFloat(0.3449),doubleToFloat(0.1525),doubleToFloat(0.3869),doubleToFloat(0.1538),doubleToFloat(0.4251),doubleToFloat(0.1784),doubleToFloat(0.4249),doubleToFloat(0.1911),doubleToFloat(0.3858),doubleToFloat(0.2175),doubleToFloat(0.3427),doubleToFloat(0.3608),doubleToFloat(0.3469),doubleToFloat(0.1838),doubleToFloat(0.3438),doubleToFloat(0.0518),doubleToFloat(0.2941),doubleToFloat(0.1116),doubleToFloat(0.2965),doubleToFloat(0.1487),doubleToFloat(0.2975),doubleToFloat(0.2175),doubleToFloat(0.2944),doubleToFloat(0.3621),doubleToFloat(0.2922),doubleToFloat(0.1849),doubleToFloat(0.2961),doubleToFloat(0.0501),doubleToFloat(0.2428),doubleToFloat(0.1011),doubleToFloat(0.241),doubleToFloat(0.1445),doubleToFloat(0.2419),doubleToFloat(0.2369),doubleToFloat(0.2375),doubleToFloat(0.3561),doubleToFloat(0.2404),doubleToFloat(0.1927),doubleToFloat(0.24),doubleToFloat(0.0553),doubleToFloat(0.217),doubleToFloat(0.1067),doubleToFloat(0.2154),doubleToFloat(0.1463),doubleToFloat(0.2162),doubleToFloat(0.227),doubleToFloat(0.2131),doubleToFloat(0.3536),doubleToFloat(0.2151),doubleToFloat(0.1879),doubleToFloat(0.2143),doubleToFloat(0.1715),doubleToFloat(0.4655),doubleToFloat(0.1797),doubleToFloat(0.4646),doubleToFloat(0.1569),doubleToFloat(0.4642),doubleToFloat(0.1544),doubleToFloat(0.4288),doubleToFloat(0.1782),doubleToFloat(0.4286),doubleToFloat(0.3477),doubleToFloat(0.431),doubleToFloat(0.3623),doubleToFloat(0.5333),doubleToFloat(0.3623),doubleToFloat(0.5333),doubleToFloat(0.3505),doubleToFloat(0.5919),doubleToFloat(0.3223),doubleToFloat(0.4192),doubleToFloat(0.3477),doubleToFloat(0.431),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.1445),doubleToFloat(0.2419),doubleToFloat(0.1927),doubleToFloat(0.24),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.1445),doubleToFloat(0.2419),doubleToFloat(0.1927),doubleToFloat(0.24),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.0976),doubleToFloat(0.3718),doubleToFloat(0.3608),doubleToFloat(0.3469),doubleToFloat(0.3504),doubleToFloat(0.3844),doubleToFloat(0.3621),doubleToFloat(0.2922),doubleToFloat(0.3561),doubleToFloat(0.2404),doubleToFloat(0.3536),doubleToFloat(0.2151),doubleToFloat(0.9678),doubleToFloat(0.9614),doubleToFloat(0.9599),doubleToFloat(0.9831),doubleToFloat(0.9337),doubleToFloat(0.9943),doubleToFloat(0.9208),doubleToFloat(0.9868),doubleToFloat(0.9402),doubleToFloat(0.956),doubleToFloat(0.9178),doubleToFloat(0.9949),doubleToFloat(0.9107),doubleToFloat(0.9369),doubleToFloat(0.8978),doubleToFloat(0.9801),doubleToFloat(0.8751),doubleToFloat(0.9801),doubleToFloat(0.8751),doubleToFloat(0.9369),doubleToFloat(0.8751),doubleToFloat(0.8881),doubleToFloat(0.9122),doubleToFloat(0.888),doubleToFloat(0.9715),doubleToFloat(0.9294),doubleToFloat(0.919),doubleToFloat(0.8344),doubleToFloat(0.9947),doubleToFloat(0.8319),doubleToFloat(0.8751),doubleToFloat(0.8381),doubleToFloat(0.919),doubleToFloat(0.7602),doubleToFloat(0.9942),doubleToFloat(0.7589),doubleToFloat(0.8751),doubleToFloat(0.7639),doubleToFloat(0.919),doubleToFloat(0.7055),doubleToFloat(0.998),doubleToFloat(0.7066),doubleToFloat(0.8751),doubleToFloat(0.7092),doubleToFloat(0.919),doubleToFloat(0.652),doubleToFloat(0.9957),doubleToFloat(0.6506),doubleToFloat(0.8751),doubleToFloat(0.6557),doubleToFloat(0.919),doubleToFloat(0.6199),doubleToFloat(0.9813),doubleToFloat(0.6185),doubleToFloat(0.8751),doubleToFloat(0.6236),doubleToFloat(0.919),doubleToFloat(0.6009),doubleToFloat(0.9957),doubleToFloat(0.5995),doubleToFloat(0.8751),doubleToFloat(0.6046),doubleToFloat(0.7823),doubleToFloat(0.9614),doubleToFloat(0.8164),doubleToFloat(0.9943),doubleToFloat(0.7903),doubleToFloat(0.9831),doubleToFloat(0.8293),doubleToFloat(0.9868),doubleToFloat(0.8099),doubleToFloat(0.956),doubleToFloat(0.8323),doubleToFloat(0.9949),doubleToFloat(0.8394),doubleToFloat(0.9369),doubleToFloat(0.8523),doubleToFloat(0.9801),doubleToFloat(0.8379),doubleToFloat(0.888),doubleToFloat(0.7786),doubleToFloat(0.9294),doubleToFloat(0.7555),doubleToFloat(0.8319),doubleToFloat(0.8311),doubleToFloat(0.8344),doubleToFloat(0.8311),doubleToFloat(0.7602),doubleToFloat(0.7559),doubleToFloat(0.7589),doubleToFloat(0.8311),doubleToFloat(0.7055),doubleToFloat(0.7522),doubleToFloat(0.7066),doubleToFloat(0.8311),doubleToFloat(0.652),doubleToFloat(0.7545),doubleToFloat(0.6506),doubleToFloat(0.8311),doubleToFloat(0.6199),doubleToFloat(0.7688),doubleToFloat(0.6185),doubleToFloat(0.8311),doubleToFloat(0.6009),doubleToFloat(0.7545),doubleToFloat(0.5995),doubleToFloat(0.3511),doubleToFloat(0.5932),doubleToFloat(0.3511),doubleToFloat(0.5932),doubleToFloat(0.2453),doubleToFloat(0.6431),doubleToFloat(0.2344),doubleToFloat(0.6441),doubleToFloat(0.2344),doubleToFloat(0.6969),doubleToFloat(0.2453),doubleToFloat(0.6969),doubleToFloat(0.2575),doubleToFloat(0.6474),doubleToFloat(0.2575),doubleToFloat(0.6969),doubleToFloat(0.2661),doubleToFloat(0.6469),doubleToFloat(0.2661),doubleToFloat(0.6969),doubleToFloat(0.2592),doubleToFloat(0.6409),doubleToFloat(0.2592),doubleToFloat(0.6969),doubleToFloat(0.2344),doubleToFloat(0.6355),doubleToFloat(0.2467),doubleToFloat(0.6357),doubleToFloat(0.2467),doubleToFloat(0.699),doubleToFloat(0.2344),doubleToFloat(0.6898),doubleToFloat(0.2235),doubleToFloat(0.6431),doubleToFloat(0.2235),doubleToFloat(0.6969),doubleToFloat(0.2112),doubleToFloat(0.6474),doubleToFloat(0.2112),doubleToFloat(0.6969),doubleToFloat(0.2026),doubleToFloat(0.6469),doubleToFloat(0.2026),doubleToFloat(0.6969),doubleToFloat(0.2096),doubleToFloat(0.6409),doubleToFloat(0.2096),doubleToFloat(0.6969),doubleToFloat(0.2221),doubleToFloat(0.699),doubleToFloat(0.2221),doubleToFloat(0.6357)], Java.type("float[]"))))))))
                .addChild(new HAnimJoint("hanim_vl5").setName("skullbase").setDEF("hanim_skullbase").setCenter(Java.to([doubleToFloat(0),doubleToFloat(49.98),doubleToFloat(-0.5228)], Java.type("float[]")))
                  .addChild(new HAnimSegment("hanim_skullbase").setName("skull").setDEF("hanim_skull")
                    .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(49.98),doubleToFloat(-0.5228)], Java.type("float[]")))
                      .addChild(new Shape()
                        .setAppearance(new Appearance()
                          .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.588),doubleToFloat(0.588),doubleToFloat(0.588)], Java.type("float[]"))))
                          .setTexture(new ImageTexture().setUSE("HyunTextureAtlas")))
                        .setGeometry(new IndexedFaceSet().setCoordIndex(Java.to([118,28,42,-1,42,25,118,-1,26,40,27,-1,39,38,24,-1,24,23,39,-1,58,22,24,-1,24,38,58,-1,120,41,28,-1,28,118,120,-1,295,56,30,-1,30,32,295,-1,56,37,31,-1,29,31,35,-1,35,33,29,-1,29,33,34,-1,34,30,29,-1,30,34,36,-1,36,32,30,-1,37,35,31,-1,295,32,36,-1,40,33,35,-1,44,36,34,-1,37,40,35,-1,295,36,44,-1,57,58,38,-1,39,40,38,-1,27,39,23,-1,23,20,27,-1,40,39,27,-1,294,48,41,-1,41,19,294,-1,28,41,48,-1,48,49,28,-1,28,49,50,-1,50,42,28,-1,19,293,294,-1,54,48,294,-1,294,17,54,-1,17,294,293,-1,119,52,295,-1,90,93,45,-1,45,92,90,-1,14,81,45,-1,45,93,14,-1,16,72,14,-1,97,96,46,-1,95,97,46,-1,46,88,95,-1,96,90,46,-1,92,46,90,-1,92,87,46,-1,117,91,47,-1,47,103,117,-1,86,47,87,-1,87,102,86,-1,86,116,103,-1,103,47,86,-1,87,47,91,-1,49,53,51,-1,49,48,54,-1,54,53,49,-1,16,22,58,-1,58,72,16,-1,73,68,51,-1,51,53,73,-1,52,51,68,-1,68,295,52,-1,53,54,75,-1,75,74,53,-1,73,53,74,-1,75,54,76,-1,65,69,56,-1,56,69,70,-1,70,37,56,-1,37,70,71,-1,71,57,37,-1,66,64,67,-1,77,67,64,-1,65,64,66,-1,66,69,65,-1,67,59,60,-1,67,82,59,-1,82,111,59,-1,60,59,104,-1,104,59,62,-1,111,61,59,-1,61,63,59,-1,62,59,63,-1,77,64,65,-1,65,78,77,-1,68,73,78,-1,78,65,68,-1,69,66,79,-1,79,70,69,-1,70,79,80,-1,80,71,70,-1,14,72,81,-1,73,74,83,-1,83,78,73,-1,74,75,109,-1,109,83,74,-1,75,76,114,-1,114,109,75,-1,4,115,15,-1,76,15,115,-1,115,114,76,-1,60,66,67,-1,66,60,105,-1,82,67,77,-1,77,84,82,-1,78,83,84,-1,84,77,78,-1,105,106,79,-1,79,66,105,-1,106,100,80,-1,80,79,106,-1,110,111,82,-1,82,84,110,-1,110,84,83,-1,83,109,110,-1,113,85,108,-1,108,107,113,-1,85,99,116,-1,116,86,85,-1,89,88,87,-1,94,95,88,-1,88,89,94,-1,89,91,117,-1,117,94,89,-1,91,89,87,-1,14,93,13,-1,9,12,90,-1,90,96,9,-1,12,13,93,-1,93,90,12,-1,94,11,10,-1,10,95,94,-1,11,94,117,-1,117,0,11,-1,8,97,95,-1,95,10,8,-1,8,9,96,-1,96,97,8,-1,1,99,7,-1,3,6,98,-1,98,112,3,-1,7,99,98,-1,98,6,7,-1,113,112,98,-1,108,101,100,-1,100,106,108,-1,113,98,85,-1,99,85,98,-1,103,116,2,-1,2,5,103,-1,5,0,117,-1,117,103,5,-1,62,113,107,-1,107,104,62,-1,108,106,105,-1,105,107,108,-1,110,109,114,-1,114,115,110,-1,3,112,115,-1,115,4,3,-1,61,111,110,-1,110,115,61,-1,61,115,112,-1,112,63,61,-1,62,63,112,-1,112,113,62,-1,2,116,1,-1,116,99,1,-1,86,102,85,-1,102,101,108,-1,85,102,108,-1,57,38,40,-1,37,57,40,-1,105,60,104,-1,107,105,104,-1,15,76,54,-1,17,15,54,-1,87,88,46,-1,41,120,21,-1,19,41,21,-1,72,58,122,-1,123,100,101,-1,101,121,123,-1,100,123,124,-1,124,80,100,-1,80,124,122,-1,122,71,80,-1,101,87,121,-1,57,71,122,-1,58,57,122,-1,121,92,45,-1,45,123,121,-1,123,45,81,-1,81,124,123,-1,124,81,72,-1,72,122,124,-1,87,92,121,-1,87,101,102,-1,40,26,44,-1,119,295,44,-1,44,34,33,-1,40,44,33,-1,29,30,56,-1,31,29,56,-1,68,65,56,-1,295,68,56,-1,55,147,131,-1,132,131,147,-1,147,140,132,-1,132,140,141,-1,141,133,132,-1,133,141,142,-1,142,134,133,-1,134,142,125,-1,125,130,134,-1,129,135,18,-1,277,278,296,-1,137,279,280,-1,281,282,297,-1,304,136,49,-1,49,136,146,-1,146,52,49,-1,52,146,147,-1,298,283,284,-1,136,145,146,-1,128,126,143,-1,143,144,139,-1,145,139,144,-1,139,128,143,-1,136,139,145,-1,135,138,304,-1,304,43,135,-1,129,127,138,-1,138,135,129,-1,138,139,136,-1,136,304,138,-1,138,127,128,-1,128,139,138,-1,143,126,125,-1,125,142,143,-1,144,143,142,-1,142,141,144,-1,145,144,141,-1,141,140,145,-1,146,145,140,-1,140,147,146,-1,52,119,42,-1,42,50,52,-1,148,149,118,-1,118,25,148,-1,149,150,120,-1,120,118,149,-1,150,151,21,-1,21,120,150,-1,26,152,149,-1,149,148,26,-1,152,153,150,-1,150,149,152,-1,153,154,151,-1,151,150,153,-1,26,27,152,-1,153,152,27,-1,27,20,154,-1,154,153,27,-1,42,119,148,-1,148,25,42,-1,148,119,26,-1,119,44,26,-1,49,52,50,-1,172,158,248,-1,248,155,172,-1,156,157,170,-1,24,168,169,-1,169,23,24,-1,24,22,188,-1,188,168,24,-1,158,171,250,-1,250,248,158,-1,160,186,300,-1,300,162,160,-1,186,161,167,-1,165,161,159,-1,159,163,165,-1,164,163,159,-1,159,160,164,-1,166,164,160,-1,160,162,166,-1,167,161,165,-1,300,166,162,-1,170,165,163,-1,174,164,166,-1,167,165,170,-1,300,174,166,-1,187,168,188,-1,169,168,170,-1,23,169,157,-1,157,20,23,-1,170,157,169,-1,171,178,299,-1,299,19,171,-1,178,171,158,-1,158,179,178,-1,180,179,158,-1,158,172,180,-1,19,299,293,-1,299,178,184,-1,184,17,299,-1,17,293,299,-1,249,300,182,-1,175,223,220,-1,220,222,175,-1,175,211,14,-1,14,223,175,-1,16,14,202,-1,227,176,226,-1,176,227,225,-1,225,218,176,-1,226,176,220,-1,222,220,176,-1,222,176,217,-1,177,221,247,-1,247,233,177,-1,216,217,177,-1,217,216,232,-1,233,246,216,-1,216,177,233,-1,217,221,177,-1,179,181,183,-1,184,178,179,-1,179,183,184,-1,188,22,16,-1,16,202,188,-1,203,181,198,-1,181,203,183,-1,198,181,182,-1,182,300,198,-1,183,205,184,-1,205,183,204,-1,203,204,183,-1,205,206,184,-1,195,186,199,-1,200,199,186,-1,186,167,200,-1,201,200,167,-1,167,187,201,-1,196,197,194,-1,207,194,197,-1,196,194,195,-1,195,199,196,-1,197,190,189,-1,197,189,212,-1,212,189,241,-1,190,234,189,-1,234,192,189,-1,241,189,191,-1,191,189,193,-1,192,193,189,-1,195,194,207,-1,207,208,195,-1,208,203,198,-1,198,195,208,-1,209,196,199,-1,199,200,209,-1,210,209,200,-1,200,201,210,-1,14,211,202,-1,213,204,203,-1,203,208,213,-1,239,205,204,-1,204,213,239,-1,244,206,205,-1,205,239,244,-1,4,15,245,-1,245,15,206,-1,206,244,245,-1,190,197,196,-1,196,235,190,-1,207,197,212,-1,212,214,207,-1,214,213,208,-1,208,207,214,-1,209,236,235,-1,235,196,209,-1,210,230,236,-1,236,209,210,-1,212,241,240,-1,240,214,212,-1,213,214,240,-1,240,239,213,-1,238,215,243,-1,243,237,238,-1,246,229,215,-1,215,216,246,-1,219,217,218,-1,218,225,224,-1,224,219,218,-1,247,221,219,-1,219,224,247,-1,221,217,219,-1,14,13,223,-1,220,12,9,-1,9,226,220,-1,223,13,12,-1,12,220,223,-1,10,11,224,-1,224,225,10,-1,247,224,11,-1,11,0,247,-1,225,227,8,-1,8,10,225,-1,226,9,8,-1,8,227,226,-1,1,7,229,-1,228,6,3,-1,3,242,228,-1,228,229,7,-1,7,6,228,-1,243,228,242,-1,230,231,238,-1,238,236,230,-1,243,215,228,-1,229,228,215,-1,2,246,233,-1,233,5,2,-1,247,0,5,-1,5,233,247,-1,237,243,192,-1,192,234,237,-1,235,236,238,-1,238,237,235,-1,244,239,240,-1,240,245,244,-1,245,242,3,-1,3,4,245,-1,240,241,191,-1,191,245,240,-1,242,245,191,-1,191,193,242,-1,242,193,192,-1,192,243,242,-1,2,1,246,-1,246,1,229,-1,216,215,232,-1,232,238,231,-1,215,238,232,-1,187,170,168,-1,167,170,187,-1,235,234,190,-1,237,234,235,-1,15,184,206,-1,17,184,15,-1,217,176,218,-1,171,21,250,-1,19,21,171,-1,202,252,188,-1,231,230,253,-1,253,251,231,-1,254,253,230,-1,230,210,254,-1,252,254,210,-1,210,201,252,-1,231,251,217,-1,187,252,201,-1,188,252,187,-1,175,222,251,-1,251,253,175,-1,211,175,253,-1,253,254,211,-1,202,211,254,-1,254,252,202,-1,217,251,222,-1,217,232,231,-1,170,174,156,-1,249,174,300,-1,174,163,164,-1,170,163,174,-1,159,186,160,-1,161,186,159,-1,198,186,195,-1,300,186,198,-1,185,255,271,-1,271,255,256,-1,256,264,271,-1,265,264,256,-1,256,257,265,-1,266,265,257,-1,257,258,266,-1,125,266,258,-1,258,130,125,-1,129,18,301,-1,286,259,285,-1,261,287,288,-1,290,302,289,-1,305,179,260,-1,270,260,179,-1,179,182,270,-1,182,271,270,-1,303,291,292,-1,260,270,269,-1,128,267,126,-1,267,263,268,-1,269,268,263,-1,263,267,128,-1,260,269,263,-1,305,262,301,-1,301,173,305,-1,262,127,129,-1,129,301,262,-1,260,263,262,-1,262,305,260,-1,128,127,262,-1,262,263,128,-1,125,126,267,-1,267,266,125,-1,266,267,268,-1,268,265,266,-1,265,268,269,-1,269,264,265,-1,264,269,270,-1,270,271,264,-1,172,249,182,-1,182,180,172,-1,248,273,272,-1,272,155,248,-1,250,274,273,-1,273,248,250,-1,21,151,274,-1,274,250,21,-1,273,275,156,-1,156,272,273,-1,274,276,275,-1,275,273,274,-1,151,154,276,-1,276,274,151,-1,156,275,157,-1,276,157,275,-1,154,20,157,-1,157,276,154,-1,272,249,172,-1,172,155,272,-1,272,156,249,-1,249,156,174,-1,179,180,182,-1], Java.type("int[]"))).setCreaseAngle(1.57).setTexCoordIndex(Java.to([255,256,257,-1,257,258,255,-1,259,260,261,-1,0,1,2,-1,2,3,0,-1,4,5,2,-1,2,1,4,-1,262,263,256,-1,256,255,262,-1,6,7,8,-1,8,9,6,-1,7,10,11,-1,12,11,13,-1,13,14,12,-1,12,14,15,-1,15,8,12,-1,8,15,16,-1,16,9,8,-1,10,13,11,-1,6,9,16,-1,17,14,13,-1,18,16,15,-1,10,17,13,-1,6,16,18,-1,19,4,1,-1,0,17,1,-1,261,264,265,-1,265,266,261,-1,260,264,261,-1,267,268,263,-1,263,269,267,-1,256,263,268,-1,268,270,256,-1,256,270,271,-1,271,257,256,-1,269,272,267,-1,186,187,188,-1,188,189,186,-1,189,188,190,-1,273,274,275,-1,20,21,22,-1,22,23,20,-1,24,25,22,-1,22,21,24,-1,26,27,24,-1,28,29,30,-1,31,28,30,-1,30,32,31,-1,29,20,30,-1,23,30,20,-1,23,33,30,-1,34,35,36,-1,36,37,34,-1,38,36,33,-1,33,39,38,-1,38,40,37,-1,37,36,38,-1,33,36,35,-1,191,192,193,-1,191,187,186,-1,186,192,191,-1,26,5,4,-1,4,27,26,-1,194,195,193,-1,193,192,194,-1,196,193,195,-1,195,197,196,-1,192,186,198,-1,198,199,192,-1,194,192,199,-1,198,186,200,-1,41,42,7,-1,7,42,43,-1,43,10,7,-1,10,43,44,-1,44,19,10,-1,45,46,47,-1,48,47,46,-1,41,46,45,-1,45,42,41,-1,47,49,50,-1,47,51,49,-1,51,52,49,-1,50,49,53,-1,53,49,54,-1,52,55,49,-1,55,56,49,-1,54,49,56,-1,48,46,41,-1,41,57,48,-1,58,59,57,-1,57,41,58,-1,42,45,60,-1,60,43,42,-1,43,60,61,-1,61,44,43,-1,24,27,25,-1,59,62,63,-1,63,57,59,-1,62,64,65,-1,65,63,62,-1,64,66,67,-1,67,65,64,-1,68,69,70,-1,66,70,69,-1,69,67,66,-1,50,45,47,-1,45,50,71,-1,51,47,48,-1,48,72,51,-1,57,63,72,-1,72,48,57,-1,71,73,60,-1,60,45,71,-1,73,74,61,-1,61,60,73,-1,75,52,51,-1,51,72,75,-1,75,72,63,-1,63,65,75,-1,76,77,78,-1,78,79,76,-1,77,80,40,-1,40,38,77,-1,81,32,33,-1,82,31,32,-1,32,81,82,-1,81,35,34,-1,34,82,81,-1,35,81,33,-1,24,21,83,-1,84,85,20,-1,20,29,84,-1,85,83,21,-1,21,20,85,-1,82,86,87,-1,87,31,82,-1,86,82,34,-1,34,88,86,-1,89,28,31,-1,31,87,89,-1,89,84,29,-1,29,28,89,-1,90,80,91,-1,92,93,94,-1,94,95,92,-1,91,80,94,-1,94,93,91,-1,76,95,94,-1,78,96,74,-1,74,73,78,-1,76,94,77,-1,80,77,94,-1,37,40,97,-1,97,98,37,-1,98,88,34,-1,34,37,98,-1,54,76,79,-1,79,53,54,-1,78,73,71,-1,71,79,78,-1,75,65,67,-1,67,69,75,-1,92,95,69,-1,69,68,92,-1,55,52,75,-1,75,69,55,-1,55,69,95,-1,95,56,55,-1,54,56,95,-1,95,76,54,-1,97,40,90,-1,40,80,90,-1,38,39,77,-1,39,96,78,-1,77,39,78,-1,19,1,17,-1,10,19,17,-1,71,50,53,-1,79,71,53,-1,201,200,186,-1,189,201,186,-1,33,32,30,-1,263,262,276,-1,269,263,276,-1,27,4,99,-1,100,74,96,-1,96,101,100,-1,74,100,102,-1,102,61,74,-1,61,102,99,-1,99,44,61,-1,96,33,101,-1,19,44,99,-1,4,19,99,-1,101,23,22,-1,22,100,101,-1,100,22,25,-1,25,102,100,-1,102,25,27,-1,27,99,102,-1,33,23,101,-1,33,96,39,-1,260,259,277,-1,273,275,277,-1,18,15,14,-1,17,18,14,-1,12,8,7,-1,11,12,7,-1,58,41,7,-1,6,58,7,-1,197,202,203,-1,204,203,202,-1,202,205,204,-1,204,205,206,-1,206,207,204,-1,207,206,208,-1,208,209,207,-1,209,208,210,-1,210,211,209,-1,212,213,190,-1,188,190,213,-1,214,187,188,-1,191,187,214,-1,214,215,191,-1,191,215,216,-1,216,196,191,-1,196,216,202,-1,202,197,196,-1,215,217,216,-1,218,219,220,-1,220,221,222,-1,217,222,221,-1,222,218,220,-1,215,222,217,-1,213,223,214,-1,214,188,213,-1,212,224,223,-1,223,213,212,-1,223,222,215,-1,215,214,223,-1,223,224,218,-1,218,222,223,-1,220,219,210,-1,210,208,220,-1,221,220,208,-1,208,206,221,-1,217,221,206,-1,206,205,217,-1,216,217,205,-1,205,202,216,-1,274,273,257,-1,257,271,274,-1,278,279,255,-1,255,258,278,-1,279,280,262,-1,262,255,279,-1,280,281,276,-1,276,262,280,-1,259,282,279,-1,279,278,259,-1,282,283,280,-1,280,279,282,-1,283,284,281,-1,281,280,283,-1,259,261,282,-1,283,282,261,-1,261,266,284,-1,284,283,261,-1,257,273,278,-1,278,258,257,-1,278,273,259,-1,273,277,259,-1,270,274,271,-1,286,287,285,-1,285,288,286,-1,289,290,291,-1,2,104,103,-1,103,3,2,-1,2,5,105,-1,105,104,2,-1,287,293,292,-1,292,285,287,-1,107,108,106,-1,106,109,107,-1,108,110,111,-1,113,110,112,-1,112,114,113,-1,115,114,112,-1,112,107,115,-1,116,115,107,-1,107,109,116,-1,111,110,113,-1,106,116,109,-1,117,113,114,-1,118,115,116,-1,111,113,117,-1,106,118,116,-1,119,104,105,-1,103,104,117,-1,265,294,290,-1,290,266,265,-1,291,290,294,-1,293,296,295,-1,295,269,293,-1,296,293,287,-1,287,297,296,-1,298,297,287,-1,287,286,298,-1,269,295,272,-1,226,227,225,-1,225,189,226,-1,189,190,226,-1,299,300,301,-1,121,122,120,-1,120,123,121,-1,121,124,24,-1,24,122,121,-1,26,24,125,-1,126,127,128,-1,127,126,129,-1,129,130,127,-1,128,127,120,-1,123,120,127,-1,123,127,131,-1,133,134,132,-1,132,135,133,-1,136,131,133,-1,131,136,137,-1,135,138,136,-1,136,133,135,-1,131,134,133,-1,228,229,230,-1,225,227,228,-1,228,230,225,-1,105,5,26,-1,26,125,105,-1,231,229,232,-1,229,231,230,-1,232,229,233,-1,233,234,232,-1,230,235,225,-1,235,230,236,-1,231,236,230,-1,235,237,225,-1,139,108,140,-1,141,140,108,-1,108,111,141,-1,142,141,111,-1,111,119,142,-1,143,144,145,-1,146,145,144,-1,143,145,139,-1,139,140,143,-1,144,147,148,-1,144,148,149,-1,149,148,150,-1,147,151,148,-1,151,152,148,-1,150,148,153,-1,153,148,154,-1,152,154,148,-1,139,145,146,-1,146,155,139,-1,155,157,156,-1,156,139,155,-1,158,143,140,-1,140,141,158,-1,159,158,141,-1,141,142,159,-1,24,124,125,-1,160,161,157,-1,157,155,160,-1,162,163,161,-1,161,160,162,-1,164,165,163,-1,163,162,164,-1,68,70,166,-1,166,70,165,-1,165,164,166,-1,147,144,143,-1,143,167,147,-1,146,144,149,-1,149,168,146,-1,168,160,155,-1,155,146,168,-1,158,169,167,-1,167,143,158,-1,159,170,169,-1,169,158,159,-1,149,150,171,-1,171,168,149,-1,160,168,171,-1,171,162,160,-1,173,174,172,-1,172,175,173,-1,138,176,174,-1,174,136,138,-1,177,131,130,-1,130,129,178,-1,178,177,130,-1,132,134,177,-1,177,178,132,-1,134,131,177,-1,24,83,122,-1,120,85,84,-1,84,128,120,-1,122,83,85,-1,85,120,122,-1,87,86,178,-1,178,129,87,-1,132,178,86,-1,86,88,132,-1,129,126,89,-1,89,87,129,-1,128,84,89,-1,89,126,128,-1,90,91,176,-1,179,93,92,-1,92,180,179,-1,179,176,91,-1,91,93,179,-1,172,179,180,-1,170,181,173,-1,173,169,170,-1,172,174,179,-1,176,179,174,-1,97,138,135,-1,135,98,97,-1,132,88,98,-1,98,135,132,-1,175,172,152,-1,152,151,175,-1,167,169,173,-1,173,175,167,-1,164,162,171,-1,171,166,164,-1,166,180,92,-1,92,68,166,-1,171,150,153,-1,153,166,171,-1,180,166,153,-1,153,154,180,-1,180,154,152,-1,152,172,180,-1,97,90,138,-1,138,90,176,-1,136,174,137,-1,137,173,181,-1,174,173,137,-1,119,117,104,-1,111,117,119,-1,167,151,147,-1,175,151,167,-1,201,225,237,-1,189,225,201,-1,131,127,130,-1,293,276,292,-1,269,276,293,-1,125,182,105,-1,181,170,183,-1,183,184,181,-1,185,183,170,-1,170,159,185,-1,182,185,159,-1,159,142,182,-1,181,184,131,-1,119,182,142,-1,105,182,119,-1,121,123,184,-1,184,183,121,-1,124,121,183,-1,183,185,124,-1,125,124,185,-1,185,182,125,-1,131,184,123,-1,131,137,181,-1,291,302,289,-1,299,302,300,-1,118,114,115,-1,117,114,118,-1,112,108,107,-1,110,108,112,-1,156,108,139,-1,106,108,156,-1,234,238,239,-1,239,238,240,-1,240,241,239,-1,242,241,240,-1,240,243,242,-1,244,242,243,-1,243,245,244,-1,210,244,245,-1,245,211,210,-1,212,190,246,-1,226,246,190,-1,247,226,227,-1,228,247,227,-1,247,228,248,-1,249,248,228,-1,228,233,249,-1,233,239,249,-1,239,233,234,-1,248,249,250,-1,218,251,219,-1,251,252,253,-1,250,253,252,-1,252,251,218,-1,248,250,252,-1,247,254,246,-1,246,226,247,-1,254,224,212,-1,212,246,254,-1,248,252,254,-1,254,247,248,-1,218,224,254,-1,254,252,218,-1,210,219,251,-1,251,244,210,-1,244,251,253,-1,253,242,244,-1,242,253,250,-1,250,241,242,-1,241,250,249,-1,249,239,241,-1,286,299,301,-1,301,298,286,-1,285,304,303,-1,303,288,285,-1,292,305,304,-1,304,285,292,-1,276,281,305,-1,305,292,276,-1,304,306,289,-1,289,303,304,-1,305,307,306,-1,306,304,305,-1,281,284,307,-1,307,305,281,-1,289,306,290,-1,307,290,306,-1,284,266,290,-1,290,307,284,-1,303,299,286,-1,286,288,303,-1,303,289,299,-1,299,289,302,-1,297,298,301,-1], Java.type("int[]")))
                          .setCoord(new Coordinate().setPoint(Java.to([doubleToFloat(0),doubleToFloat(0.8783),doubleToFloat(4.87),doubleToFloat(0),doubleToFloat(1.861),doubleToFloat(5.63),doubleToFloat(0),doubleToFloat(1.441),doubleToFloat(5.349),doubleToFloat(0),doubleToFloat(3.406),doubleToFloat(4.524),doubleToFloat(0),doubleToFloat(5.199),doubleToFloat(4.739),doubleToFloat(0),doubleToFloat(0.9739),doubleToFloat(5.064),doubleToFloat(0),doubleToFloat(2.58),doubleToFloat(4.856),doubleToFloat(0),doubleToFloat(2.211),doubleToFloat(5.292),doubleToFloat(0),doubleToFloat(0.4934),doubleToFloat(4.678),doubleToFloat(0),doubleToFloat(0.3902),doubleToFloat(4.306),doubleToFloat(0),doubleToFloat(0.8352),doubleToFloat(4.754),doubleToFloat(0),doubleToFloat(0.9007),doubleToFloat(4.555),doubleToFloat(0),doubleToFloat(-0.3768),doubleToFloat(3.705),doubleToFloat(0),doubleToFloat(-0.9384),doubleToFloat(3.319),doubleToFloat(0),doubleToFloat(-1.033),doubleToFloat(2.94),doubleToFloat(0),doubleToFloat(7.444),doubleToFloat(4.698),doubleToFloat(0),doubleToFloat(-0.8666),doubleToFloat(2.171),doubleToFloat(0),doubleToFloat(10.26),doubleToFloat(3.895),doubleToFloat(0),doubleToFloat(11.43),doubleToFloat(1.016),doubleToFloat(0),doubleToFloat(11.57),doubleToFloat(-3.24),doubleToFloat(0),doubleToFloat(1.168),doubleToFloat(-4.095),doubleToFloat(0),doubleToFloat(9.763),doubleToFloat(-5.461),doubleToFloat(0),doubleToFloat(-0.6657),doubleToFloat(1.243),doubleToFloat(0),doubleToFloat(0.1225),doubleToFloat(-1.991),doubleToFloat(0),doubleToFloat(-0.2918),doubleToFloat(-0.2247),doubleToFloat(4.339),doubleToFloat(9.081),doubleToFloat(-3.773),doubleToFloat(3.945),doubleToFloat(3.241),doubleToFloat(-3.318),doubleToFloat(1.995),doubleToFloat(1.287),doubleToFloat(-3.866),doubleToFloat(3.386),doubleToFloat(10.76),doubleToFloat(-2.843),doubleToFloat(4.399),doubleToFloat(1.696),doubleToFloat(-1.385),doubleToFloat(5.135),doubleToFloat(4.015),doubleToFloat(-1.676),doubleToFloat(3.93),doubleToFloat(1.384),doubleToFloat(-0.5102),doubleToFloat(5.012),doubleToFloat(5.02),doubleToFloat(-0.863),doubleToFloat(4.179),doubleToFloat(1.62),doubleToFloat(-1.577),doubleToFloat(4.917),doubleToFloat(4.074),doubleToFloat(-1.855),doubleToFloat(3.689),doubleToFloat(1.291),doubleToFloat(-0.4955),doubleToFloat(4.7),doubleToFloat(5.188),doubleToFloat(-0.911),doubleToFloat(3.751),doubleToFloat(1.809),doubleToFloat(0.7529),doubleToFloat(1.233),doubleToFloat(0.0355),doubleToFloat(-0.2831),doubleToFloat(1.256),doubleToFloat(0.3297),doubleToFloat(-1.757),doubleToFloat(3.766),doubleToFloat(1.592),doubleToFloat(-0.562),doubleToFloat(1.927),doubleToFloat(11.33),doubleToFloat(-3.108),doubleToFloat(4.541),doubleToFloat(9.332),doubleToFloat(-2.466),doubleToFloat(0.7067),doubleToFloat(11.67),doubleToFloat(0.9268),doubleToFloat(4.05),doubleToFloat(3.993),doubleToFloat(-1.319),doubleToFloat(1.616),doubleToFloat(-0.2444),doubleToFloat(3.292),doubleToFloat(0.7396),doubleToFloat(0.7015),doubleToFloat(4.358),doubleToFloat(0.7307),doubleToFloat(0.9735),doubleToFloat(4.618),doubleToFloat(2.134),doubleToFloat(11.37),doubleToFloat(0.7594),doubleToFloat(3.772),doubleToFloat(10.66),doubleToFloat(0.4192),doubleToFloat(4.581),doubleToFloat(9.369),doubleToFloat(-0.6614),doubleToFloat(4.316),doubleToFloat(8.634),doubleToFloat(1.467),doubleToFloat(4.707),doubleToFloat(7.768),doubleToFloat(-0.1583),doubleToFloat(3.633),doubleToFloat(9.55),doubleToFloat(2.656),doubleToFloat(1.848),doubleToFloat(10.1),doubleToFloat(3.552),doubleToFloat(4.587),doubleToFloat(4.881),doubleToFloat(-0.149),doubleToFloat(4.05),doubleToFloat(3.362),doubleToFloat(0.5064),doubleToFloat(2.763),doubleToFloat(0.5994),doubleToFloat(0.9473),doubleToFloat(1.415),doubleToFloat(-0.2675),doubleToFloat(1.138),doubleToFloat(2.49),doubleToFloat(3.399),doubleToFloat(3.625),doubleToFloat(3.601),doubleToFloat(2.623),doubleToFloat(3.149),doubleToFloat(1.532),doubleToFloat(4.49),doubleToFloat(4.051),doubleToFloat(1.502),doubleToFloat(2.716),doubleToFloat(3.857),doubleToFloat(1.091),doubleToFloat(3.336),doubleToFloat(3.968),doubleToFloat(4.014),doubleToFloat(3.683),doubleToFloat(2.653),doubleToFloat(4.028),doubleToFloat(4.155),doubleToFloat(1.569),doubleToFloat(3.921),doubleToFloat(2.599),doubleToFloat(2.598),doubleToFloat(3.779),doubleToFloat(3.553),doubleToFloat(3.132),doubleToFloat(4.223),doubleToFloat(5.917),doubleToFloat(1.542),doubleToFloat(3.974),doubleToFloat(2.959),doubleToFloat(1.578),doubleToFloat(3.724),doubleToFloat(1.692),doubleToFloat(1.643),doubleToFloat(3.359),doubleToFloat(0.8142),doubleToFloat(1.767),doubleToFloat(1.601),doubleToFloat(-0.3245),doubleToFloat(2.04),doubleToFloat(4.114),doubleToFloat(6.664),doubleToFloat(2.76),doubleToFloat(3.62),doubleToFloat(7.036),doubleToFloat(3.46),doubleToFloat(2.723),doubleToFloat(7.312),doubleToFloat(4.198),doubleToFloat(1.683),doubleToFloat(7.392),doubleToFloat(4.557),doubleToFloat(3.969),doubleToFloat(4.587),doubleToFloat(3.036),doubleToFloat(4.034),doubleToFloat(5.408),doubleToFloat(2.903),doubleToFloat(3.693),doubleToFloat(1.569),doubleToFloat(2.779),doubleToFloat(3.402),doubleToFloat(0.8195),doubleToFloat(2.722),doubleToFloat(1.687),doubleToFloat(-0.3262),doubleToFloat(2.823),doubleToFloat(3.485),doubleToFloat(4.565),doubleToFloat(3.466),doubleToFloat(3.572),doubleToFloat(5.843),doubleToFloat(3.535),doubleToFloat(3.572),doubleToFloat(5.223),doubleToFloat(3.556),doubleToFloat(1.042),doubleToFloat(1.903),doubleToFloat(4.858),doubleToFloat(0.9314),doubleToFloat(1.432),doubleToFloat(4.927),doubleToFloat(0.9418),doubleToFloat(0.9451),doubleToFloat(4.384),doubleToFloat(0.6963),doubleToFloat(0.8861),doubleToFloat(4.43),doubleToFloat(0.6638),doubleToFloat(0.9257),doubleToFloat(4.365),doubleToFloat(0.5502),doubleToFloat(-0.2755),doubleToFloat(3.699),doubleToFloat(0.7131),doubleToFloat(0.905),doubleToFloat(4.486),doubleToFloat(1.383),doubleToFloat(0.1309),doubleToFloat(3.646),doubleToFloat(0.3663),doubleToFloat(-0.8626),doubleToFloat(3.332),doubleToFloat(0.2731),doubleToFloat(0.9315),doubleToFloat(4.501),doubleToFloat(0.3499),doubleToFloat(0.8809),doubleToFloat(4.7),doubleToFloat(0.4401),doubleToFloat(0.4508),doubleToFloat(4.283),doubleToFloat(0.4464),doubleToFloat(0.5647),doubleToFloat(4.621),doubleToFloat(0.311),doubleToFloat(2.525),doubleToFloat(4.725),doubleToFloat(0.2368),doubleToFloat(2.079),doubleToFloat(5.244),doubleToFloat(3.219),doubleToFloat(0.9094),doubleToFloat(3.374),doubleToFloat(2.397),doubleToFloat(1.119),doubleToFloat(3.892),doubleToFloat(1.62),doubleToFloat(1.297),doubleToFloat(4.523),doubleToFloat(0.3865),doubleToFloat(1.035),doubleToFloat(4.944),doubleToFloat(2.411),doubleToFloat(2.381),doubleToFloat(3.523),doubleToFloat(3.662),doubleToFloat(2.337),doubleToFloat(3.281),doubleToFloat(3.476),doubleToFloat(1.596),doubleToFloat(3.477),doubleToFloat(2.523),doubleToFloat(2.207),doubleToFloat(3.795),doubleToFloat(2.513),doubleToFloat(1.691),doubleToFloat(4.071),doubleToFloat(2.7),doubleToFloat(6.076),doubleToFloat(4.217),doubleToFloat(2.665),doubleToFloat(5.493),doubleToFloat(4.127),doubleToFloat(2.554),doubleToFloat(4.827),doubleToFloat(3.836),doubleToFloat(0.456),doubleToFloat(3.389),doubleToFloat(4.414),doubleToFloat(1.234),doubleToFloat(2.402),doubleToFloat(4.284),doubleToFloat(1.46),doubleToFloat(5.789),doubleToFloat(4.643),doubleToFloat(0.8218),doubleToFloat(5.198),doubleToFloat(4.653),doubleToFloat(0.3528),doubleToFloat(1.577),doubleToFloat(5.273),doubleToFloat(0.3591),doubleToFloat(0.9104),doubleToFloat(4.775),doubleToFloat(3.073),doubleToFloat(9.605),doubleToFloat(-4.613),doubleToFloat(5.266),doubleToFloat(6.378),doubleToFloat(-1.609),doubleToFloat(1.812),doubleToFloat(9.558),doubleToFloat(-5.35),doubleToFloat(1.994),doubleToFloat(0.5092),doubleToFloat(3.665),doubleToFloat(2.644),doubleToFloat(0.2584),doubleToFloat(1.892),doubleToFloat(2.556),doubleToFloat(0.2974),doubleToFloat(3.27),doubleToFloat(2.695),doubleToFloat(0.2342),doubleToFloat(2.718),doubleToFloat(0),doubleToFloat(5.606),doubleToFloat(6.313),doubleToFloat(0),doubleToFloat(8.234),doubleToFloat(5.987),doubleToFloat(0),doubleToFloat(11.61),doubleToFloat(3.79),doubleToFloat(0),doubleToFloat(10.53),doubleToFloat(4.971),doubleToFloat(0),doubleToFloat(11.85),doubleToFloat(2.176),doubleToFloat(0),doubleToFloat(4.926),doubleToFloat(6.099),doubleToFloat(5.044),doubleToFloat(4.38),doubleToFloat(-0.2258),doubleToFloat(4.871),doubleToFloat(4.698),doubleToFloat(2.585),doubleToFloat(3.976),doubleToFloat(4.846),doubleToFloat(4.498),doubleToFloat(2.355),doubleToFloat(4.991),doubleToFloat(5.59),doubleToFloat(0.7709),doubleToFloat(11.88),doubleToFloat(1.826),doubleToFloat(3.984),doubleToFloat(10.78),doubleToFloat(0.7706),doubleToFloat(2.623),doubleToFloat(11.59),doubleToFloat(0.9046),doubleToFloat(2.099),doubleToFloat(11.66),doubleToFloat(3.042),doubleToFloat(3.181),doubleToFloat(10.64),doubleToFloat(4.067),doubleToFloat(5.224),doubleToFloat(5.37),doubleToFloat(2.621),doubleToFloat(4.17),doubleToFloat(5.521),doubleToFloat(4.626),doubleToFloat(2.469),doubleToFloat(5.669),doubleToFloat(5.78),doubleToFloat(2.456),doubleToFloat(8.276),doubleToFloat(5.491),doubleToFloat(4.027),doubleToFloat(8.2),doubleToFloat(4.441),doubleToFloat(5.098),doubleToFloat(8.218),doubleToFloat(2.779),doubleToFloat(5.257),doubleToFloat(8.219),doubleToFloat(0.1574),doubleToFloat(5.447),doubleToFloat(5.013),doubleToFloat(-0.1112),doubleToFloat(4.139),doubleToFloat(6.465),doubleToFloat(-4.729),doubleToFloat(3.113),doubleToFloat(6.989),doubleToFloat(-5.609),doubleToFloat(1.419),doubleToFloat(5.872),doubleToFloat(-6.307),doubleToFloat(0),doubleToFloat(6.077),doubleToFloat(-6.313),doubleToFloat(3.05),doubleToFloat(2.794),doubleToFloat(-4.769),doubleToFloat(1.818),doubleToFloat(2.754),doubleToFloat(-5.621),doubleToFloat(0),doubleToFloat(2.959),doubleToFloat(-5.732),doubleToFloat(-4.339),doubleToFloat(9.081),doubleToFloat(-3.773),doubleToFloat(-3.945),doubleToFloat(3.241),doubleToFloat(-3.318),doubleToFloat(-1.995),doubleToFloat(1.287),doubleToFloat(-3.866),doubleToFloat(-3.386),doubleToFloat(10.76),doubleToFloat(-2.843),doubleToFloat(-4.399),doubleToFloat(1.696),doubleToFloat(-1.385),doubleToFloat(-5.135),doubleToFloat(4.015),doubleToFloat(-1.676),doubleToFloat(-3.93),doubleToFloat(1.384),doubleToFloat(-0.5102),doubleToFloat(-5.012),doubleToFloat(5.02),doubleToFloat(-0.863),doubleToFloat(-4.179),doubleToFloat(1.62),doubleToFloat(-1.577),doubleToFloat(-4.917),doubleToFloat(4.074),doubleToFloat(-1.855),doubleToFloat(-3.689),doubleToFloat(1.291),doubleToFloat(-0.4955),doubleToFloat(-4.7),doubleToFloat(5.188),doubleToFloat(-0.911),doubleToFloat(-3.751),doubleToFloat(1.809),doubleToFloat(0.7529),doubleToFloat(-1.233),doubleToFloat(0.0355),doubleToFloat(-0.2831),doubleToFloat(-1.256),doubleToFloat(0.3297),doubleToFloat(-1.757),doubleToFloat(-3.766),doubleToFloat(1.592),doubleToFloat(-0.562),doubleToFloat(-1.927),doubleToFloat(11.33),doubleToFloat(-3.108),doubleToFloat(-4.541),doubleToFloat(9.332),doubleToFloat(-2.466),doubleToFloat(-0.7067),doubleToFloat(11.67),doubleToFloat(0.9268),doubleToFloat(-4.05),doubleToFloat(3.993),doubleToFloat(-1.319),doubleToFloat(-1.616),doubleToFloat(-0.2444),doubleToFloat(3.292),doubleToFloat(-0.7395),doubleToFloat(0.7015),doubleToFloat(4.358),doubleToFloat(-0.7307),doubleToFloat(0.9735),doubleToFloat(4.618),doubleToFloat(-2.134),doubleToFloat(11.37),doubleToFloat(0.7594),doubleToFloat(-3.772),doubleToFloat(10.66),doubleToFloat(0.4192),doubleToFloat(-4.581),doubleToFloat(9.369),doubleToFloat(-0.6614),doubleToFloat(-4.316),doubleToFloat(8.634),doubleToFloat(1.467),doubleToFloat(-4.707),doubleToFloat(7.768),doubleToFloat(-0.1583),doubleToFloat(-3.633),doubleToFloat(9.55),doubleToFloat(2.656),doubleToFloat(-1.848),doubleToFloat(10.1),doubleToFloat(3.552),doubleToFloat(-4.587),doubleToFloat(4.881),doubleToFloat(-0.149),doubleToFloat(-4.05),doubleToFloat(3.362),doubleToFloat(0.5064),doubleToFloat(-2.763),doubleToFloat(0.5994),doubleToFloat(0.9473),doubleToFloat(-1.415),doubleToFloat(-0.2675),doubleToFloat(1.138),doubleToFloat(-2.49),doubleToFloat(3.399),doubleToFloat(3.625),doubleToFloat(-3.601),doubleToFloat(2.623),doubleToFloat(3.149),doubleToFloat(-1.532),doubleToFloat(4.49),doubleToFloat(4.051),doubleToFloat(-1.502),doubleToFloat(2.716),doubleToFloat(3.857),doubleToFloat(-1.091),doubleToFloat(3.336),doubleToFloat(3.968),doubleToFloat(-4.014),doubleToFloat(3.683),doubleToFloat(2.653),doubleToFloat(-4.028),doubleToFloat(4.155),doubleToFloat(1.569),doubleToFloat(-3.921),doubleToFloat(2.599),doubleToFloat(2.598),doubleToFloat(-3.779),doubleToFloat(3.553),doubleToFloat(3.132),doubleToFloat(-4.223),doubleToFloat(5.917),doubleToFloat(1.542),doubleToFloat(-3.974),doubleToFloat(2.959),doubleToFloat(1.578),doubleToFloat(-3.724),doubleToFloat(1.692),doubleToFloat(1.643),doubleToFloat(-3.359),doubleToFloat(0.8142),doubleToFloat(1.767),doubleToFloat(-1.601),doubleToFloat(-0.3245),doubleToFloat(2.04),doubleToFloat(-4.114),doubleToFloat(6.664),doubleToFloat(2.76),doubleToFloat(-3.62),doubleToFloat(7.036),doubleToFloat(3.46),doubleToFloat(-2.723),doubleToFloat(7.312),doubleToFloat(4.198),doubleToFloat(-1.683),doubleToFloat(7.392),doubleToFloat(4.557),doubleToFloat(-3.969),doubleToFloat(4.587),doubleToFloat(3.036),doubleToFloat(-4.034),doubleToFloat(5.408),doubleToFloat(2.903),doubleToFloat(-3.693),doubleToFloat(1.569),doubleToFloat(2.779),doubleToFloat(-3.402),doubleToFloat(0.8195),doubleToFloat(2.722),doubleToFloat(-1.687),doubleToFloat(-0.3262),doubleToFloat(2.823),doubleToFloat(-3.485),doubleToFloat(4.565),doubleToFloat(3.466),doubleToFloat(-3.572),doubleToFloat(5.843),doubleToFloat(3.535),doubleToFloat(-3.572),doubleToFloat(5.223),doubleToFloat(3.556),doubleToFloat(-1.042),doubleToFloat(1.903),doubleToFloat(4.858),doubleToFloat(-0.9314),doubleToFloat(1.432),doubleToFloat(4.927),doubleToFloat(-0.9417),doubleToFloat(0.9451),doubleToFloat(4.384),doubleToFloat(-0.6963),doubleToFloat(0.8861),doubleToFloat(4.43),doubleToFloat(-0.6638),doubleToFloat(0.9257),doubleToFloat(4.365),doubleToFloat(-0.5502),doubleToFloat(-0.2755),doubleToFloat(3.699),doubleToFloat(-0.7131),doubleToFloat(0.905),doubleToFloat(4.486),doubleToFloat(-1.383),doubleToFloat(0.1309),doubleToFloat(3.646),doubleToFloat(-0.3663),doubleToFloat(-0.8626),doubleToFloat(3.332),doubleToFloat(-0.2731),doubleToFloat(0.9315),doubleToFloat(4.501),doubleToFloat(-0.3499),doubleToFloat(0.8809),doubleToFloat(4.7),doubleToFloat(-0.4401),doubleToFloat(0.4508),doubleToFloat(4.283),doubleToFloat(-0.4464),doubleToFloat(0.5647),doubleToFloat(4.621),doubleToFloat(-0.311),doubleToFloat(2.525),doubleToFloat(4.725),doubleToFloat(-0.2368),doubleToFloat(2.079),doubleToFloat(5.244),doubleToFloat(-3.219),doubleToFloat(0.9094),doubleToFloat(3.374),doubleToFloat(-2.397),doubleToFloat(1.119),doubleToFloat(3.892),doubleToFloat(-1.62),doubleToFloat(1.297),doubleToFloat(4.523),doubleToFloat(-0.3865),doubleToFloat(1.035),doubleToFloat(4.944),doubleToFloat(-2.411),doubleToFloat(2.381),doubleToFloat(3.523),doubleToFloat(-3.662),doubleToFloat(2.337),doubleToFloat(3.281),doubleToFloat(-3.476),doubleToFloat(1.596),doubleToFloat(3.477),doubleToFloat(-2.523),doubleToFloat(2.207),doubleToFloat(3.795),doubleToFloat(-2.513),doubleToFloat(1.691),doubleToFloat(4.071),doubleToFloat(-2.7),doubleToFloat(6.076),doubleToFloat(4.217),doubleToFloat(-2.665),doubleToFloat(5.493),doubleToFloat(4.127),doubleToFloat(-2.554),doubleToFloat(4.827),doubleToFloat(3.836),doubleToFloat(-0.456),doubleToFloat(3.389),doubleToFloat(4.414),doubleToFloat(-1.234),doubleToFloat(2.402),doubleToFloat(4.284),doubleToFloat(-1.46),doubleToFloat(5.789),doubleToFloat(4.643),doubleToFloat(-0.8218),doubleToFloat(5.198),doubleToFloat(4.653),doubleToFloat(-0.3528),doubleToFloat(1.577),doubleToFloat(5.273),doubleToFloat(-0.3591),doubleToFloat(0.9104),doubleToFloat(4.775),doubleToFloat(-3.073),doubleToFloat(9.605),doubleToFloat(-4.613),doubleToFloat(-5.266),doubleToFloat(6.378),doubleToFloat(-1.609),doubleToFloat(-1.812),doubleToFloat(9.558),doubleToFloat(-5.35),doubleToFloat(-1.994),doubleToFloat(0.5092),doubleToFloat(3.665),doubleToFloat(-2.644),doubleToFloat(0.2584),doubleToFloat(1.892),doubleToFloat(-2.556),doubleToFloat(0.2974),doubleToFloat(3.27),doubleToFloat(-2.695),doubleToFloat(0.2342),doubleToFloat(2.718),doubleToFloat(-5.044),doubleToFloat(4.38),doubleToFloat(-0.2258),doubleToFloat(-4.871),doubleToFloat(4.698),doubleToFloat(2.585),doubleToFloat(-3.976),doubleToFloat(4.846),doubleToFloat(4.498),doubleToFloat(-2.355),doubleToFloat(4.991),doubleToFloat(5.59),doubleToFloat(-0.7709),doubleToFloat(11.88),doubleToFloat(1.826),doubleToFloat(-3.984),doubleToFloat(10.78),doubleToFloat(0.7706),doubleToFloat(-2.623),doubleToFloat(11.59),doubleToFloat(0.9046),doubleToFloat(-2.099),doubleToFloat(11.66),doubleToFloat(3.042),doubleToFloat(-3.181),doubleToFloat(10.64),doubleToFloat(4.067),doubleToFloat(-5.224),doubleToFloat(5.37),doubleToFloat(2.621),doubleToFloat(-4.17),doubleToFloat(5.521),doubleToFloat(4.626),doubleToFloat(-2.469),doubleToFloat(5.669),doubleToFloat(5.78),doubleToFloat(-2.456),doubleToFloat(8.276),doubleToFloat(5.491),doubleToFloat(-4.027),doubleToFloat(8.2),doubleToFloat(4.441),doubleToFloat(-5.098),doubleToFloat(8.218),doubleToFloat(2.779),doubleToFloat(-5.257),doubleToFloat(8.219),doubleToFloat(0.1574),doubleToFloat(-5.447),doubleToFloat(5.013),doubleToFloat(-0.1112),doubleToFloat(-4.139),doubleToFloat(6.465),doubleToFloat(-4.729),doubleToFloat(-3.113),doubleToFloat(6.989),doubleToFloat(-5.609),doubleToFloat(-1.419),doubleToFloat(5.872),doubleToFloat(-6.307),doubleToFloat(-3.05),doubleToFloat(2.794),doubleToFloat(-4.769),doubleToFloat(-1.818),doubleToFloat(2.754),doubleToFloat(-5.621),doubleToFloat(0.7067),doubleToFloat(11.67),doubleToFloat(0.9268),doubleToFloat(0),doubleToFloat(11.43),doubleToFloat(1.016),doubleToFloat(2.134),doubleToFloat(11.37),doubleToFloat(0.7594),doubleToFloat(0.7067),doubleToFloat(11.67),doubleToFloat(0.9268),doubleToFloat(3.772),doubleToFloat(10.66),doubleToFloat(0.4192),doubleToFloat(2.134),doubleToFloat(11.37),doubleToFloat(0.7594),doubleToFloat(4.587),doubleToFloat(4.881),doubleToFloat(-0.149),doubleToFloat(4.707),doubleToFloat(7.768),doubleToFloat(-0.1583),doubleToFloat(0),doubleToFloat(11.43),doubleToFloat(1.016),doubleToFloat(-0.7067),doubleToFloat(11.67),doubleToFloat(0.9268),doubleToFloat(-0.7067),doubleToFloat(11.67),doubleToFloat(0.9268),doubleToFloat(-2.134),doubleToFloat(11.37),doubleToFloat(0.7594),doubleToFloat(-2.134),doubleToFloat(11.37),doubleToFloat(0.7594),doubleToFloat(-3.772),doubleToFloat(10.66),doubleToFloat(0.4192),doubleToFloat(-4.707),doubleToFloat(7.768),doubleToFloat(-0.1583),doubleToFloat(-4.587),doubleToFloat(4.881),doubleToFloat(-0.149),doubleToFloat(0),doubleToFloat(11.43),doubleToFloat(1.016),doubleToFloat(0.7067),doubleToFloat(11.67),doubleToFloat(0.9268),doubleToFloat(4.587),doubleToFloat(4.881),doubleToFloat(-0.149),doubleToFloat(0.7709),doubleToFloat(11.88),doubleToFloat(1.826),doubleToFloat(2.623),doubleToFloat(11.59),doubleToFloat(0.9046),doubleToFloat(5.447),doubleToFloat(5.013),doubleToFloat(-0.1112),doubleToFloat(-0.7067),doubleToFloat(11.67),doubleToFloat(0.9268),doubleToFloat(-4.587),doubleToFloat(4.881),doubleToFloat(-0.149),doubleToFloat(-0.7709),doubleToFloat(11.88),doubleToFloat(1.826),doubleToFloat(-2.623),doubleToFloat(11.59),doubleToFloat(0.9046),doubleToFloat(-5.447),doubleToFloat(5.013),doubleToFloat(-0.1112),doubleToFloat(2.623),doubleToFloat(11.59),doubleToFloat(0.9046),doubleToFloat(-2.623),doubleToFloat(11.59),doubleToFloat(0.9046)], Java.type("float[]"))))
                          .setTexCoord(new TextureCoordinate().setPoint(Java.to([doubleToFloat(0.0573),doubleToFloat(0.6967),doubleToFloat(0.0565),doubleToFloat(0.6829),doubleToFloat(0.0109),doubleToFloat(0.668),doubleToFloat(0.0107),doubleToFloat(0.6873),doubleToFloat(0.0634),doubleToFloat(0.6688),doubleToFloat(0.011),doubleToFloat(0.6506),doubleToFloat(0.1803),doubleToFloat(0.9015),doubleToFloat(0.1606),doubleToFloat(0.8328),doubleToFloat(0.2007),doubleToFloat(0.8632),doubleToFloat(0.196),doubleToFloat(0.9081),doubleToFloat(0.1497),doubleToFloat(0.7628),doubleToFloat(0.1564),doubleToFloat(0.7441),doubleToFloat(0.1737),doubleToFloat(0.7586),doubleToFloat(0.1475),doubleToFloat(0.7399),doubleToFloat(0.1655),doubleToFloat(0.7552),doubleToFloat(0.1926),doubleToFloat(0.8659),doubleToFloat(0.1844),doubleToFloat(0.9156),doubleToFloat(0.1503),doubleToFloat(0.7535),doubleToFloat(0.1604),doubleToFloat(0.8619),doubleToFloat(0.1133),doubleToFloat(0.7081),doubleToFloat(0.0314),doubleToFloat(0.6673),doubleToFloat(0.0247),doubleToFloat(0.641),doubleToFloat(0.0709),doubleToFloat(0.669),doubleToFloat(0.0622),doubleToFloat(0.6857),doubleToFloat(0.0111),doubleToFloat(0.6334),doubleToFloat(0.0735),doubleToFloat(0.6655),doubleToFloat(0.011),doubleToFloat(0.6412),doubleToFloat(0.0703),doubleToFloat(0.6659),doubleToFloat(0.0275),doubleToFloat(0.7047),doubleToFloat(0.0273),doubleToFloat(0.6997),doubleToFloat(0.0383),doubleToFloat(0.711),doubleToFloat(0.0239),doubleToFloat(0.7189),doubleToFloat(0.0367),doubleToFloat(0.7193),doubleToFloat(0.0458),doubleToFloat(0.722),doubleToFloat(0.0242),doubleToFloat(0.7202),doubleToFloat(0.0373),doubleToFloat(0.7201),doubleToFloat(0.038),doubleToFloat(0.7232),doubleToFloat(0.0252),doubleToFloat(0.7258),doubleToFloat(0.0454),doubleToFloat(0.7437),doubleToFloat(0.0709),doubleToFloat(0.7379),doubleToFloat(0.0239),doubleToFloat(0.75),doubleToFloat(0.1597),doubleToFloat(0.8681),doubleToFloat(0.1579),doubleToFloat(0.8143),doubleToFloat(0.1488),doubleToFloat(0.7571),doubleToFloat(0.1354),doubleToFloat(0.7175),doubleToFloat(0.156),doubleToFloat(0.7976),doubleToFloat(0.1593),doubleToFloat(0.8464),doubleToFloat(0.1506),doubleToFloat(0.8404),doubleToFloat(0.1575),doubleToFloat(0.887),doubleToFloat(0.1028),doubleToFloat(0.833),doubleToFloat(0.1441),doubleToFloat(0.7985),doubleToFloat(0.1396),doubleToFloat(0.8857),doubleToFloat(0.105),doubleToFloat(0.8972),doubleToFloat(0.1001),doubleToFloat(0.7872),doubleToFloat(0.0663),doubleToFloat(0.802),doubleToFloat(0.0672),doubleToFloat(0.8818),doubleToFloat(0.051),doubleToFloat(0.8298),doubleToFloat(0.1598),doubleToFloat(0.924),doubleToFloat(0.1667),doubleToFloat(0.9474),doubleToFloat(0.1637),doubleToFloat(0.9518),doubleToFloat(0.1477),doubleToFloat(0.7512),doubleToFloat(0.137),doubleToFloat(0.7174),doubleToFloat(0.1454),doubleToFloat(0.9682),doubleToFloat(0.1427),doubleToFloat(0.9433),doubleToFloat(0.1121),doubleToFloat(0.9802),doubleToFloat(0.1103),doubleToFloat(0.9533),doubleToFloat(0.0735),doubleToFloat(0.9835),doubleToFloat(0.0644),doubleToFloat(0.94),doubleToFloat(0.0103),doubleToFloat(0.9132),doubleToFloat(0.0408),doubleToFloat(0.9133),doubleToFloat(0.0111),doubleToFloat(0.9855),doubleToFloat(0.1464),doubleToFloat(0.7855),doubleToFloat(0.1428),doubleToFloat(0.9153),doubleToFloat(0.1397),doubleToFloat(0.7521),doubleToFloat(0.1302),doubleToFloat(0.7212),doubleToFloat(0.1091),doubleToFloat(0.9271),doubleToFloat(0.0564),doubleToFloat(0.7877),doubleToFloat(0.0494),doubleToFloat(0.765),doubleToFloat(0.104),doubleToFloat(0.756),doubleToFloat(0.1043),doubleToFloat(0.7793),doubleToFloat(0.0195),doubleToFloat(0.7726),doubleToFloat(0.0355),doubleToFloat(0.7211),doubleToFloat(0.021),doubleToFloat(0.7213),doubleToFloat(0.0111),doubleToFloat(0.6375),doubleToFloat(0.011),doubleToFloat(0.6969),doubleToFloat(0.011),doubleToFloat(0.6626),doubleToFloat(0.0109),doubleToFloat(0.7198),doubleToFloat(0.0109),doubleToFloat(0.7168),doubleToFloat(0.0109),doubleToFloat(0.7187),doubleToFloat(0.011),doubleToFloat(0.7014),doubleToFloat(0.0108),doubleToFloat(0.7626),doubleToFloat(0.0107),doubleToFloat(0.7785),doubleToFloat(0.0105),doubleToFloat(0.8326),doubleToFloat(0.0107),doubleToFloat(0.7953),doubleToFloat(0.0222),doubleToFloat(0.7929),doubleToFloat(0.0275),doubleToFloat(0.8319),doubleToFloat(0.0997),doubleToFloat(0.7303),doubleToFloat(0.0108),doubleToFloat(0.7438),doubleToFloat(0.0109),doubleToFloat(0.7229),doubleToFloat(0.1089),doubleToFloat(0.6924),doubleToFloat(0.1057),doubleToFloat(0.6936),doubleToFloat(0.0848),doubleToFloat(0.7029),doubleToFloat(0.1109),doubleToFloat(0.691),doubleToFloat(0.0573),doubleToFloat(0.697),doubleToFloat(0.0564),doubleToFloat(0.6832),doubleToFloat(0.063),doubleToFloat(0.669),doubleToFloat(0.1814),doubleToFloat(0.9007),doubleToFloat(0.2017),doubleToFloat(0.8622),doubleToFloat(0.1613),doubleToFloat(0.8322),doubleToFloat(0.1972),doubleToFloat(0.9071),doubleToFloat(0.1566),doubleToFloat(0.7436),doubleToFloat(0.15),doubleToFloat(0.7622),doubleToFloat(0.1741),doubleToFloat(0.7579),doubleToFloat(0.1476),doubleToFloat(0.7394),doubleToFloat(0.1659),doubleToFloat(0.7545),doubleToFloat(0.1936),doubleToFloat(0.8649),doubleToFloat(0.1857),doubleToFloat(0.9148),doubleToFloat(0.1505),doubleToFloat(0.753),doubleToFloat(0.1614),doubleToFloat(0.8613),doubleToFloat(0.1131),doubleToFloat(0.7079),doubleToFloat(0.0308),doubleToFloat(0.6678),doubleToFloat(0.0704),doubleToFloat(0.6692),doubleToFloat(0.0239),doubleToFloat(0.6416),doubleToFloat(0.0618),doubleToFloat(0.686),doubleToFloat(0.073),doubleToFloat(0.6657),doubleToFloat(0.0699),doubleToFloat(0.6661),doubleToFloat(0.0271),doubleToFloat(0.7053),doubleToFloat(0.038),doubleToFloat(0.7115),doubleToFloat(0.0268),doubleToFloat(0.7003),doubleToFloat(0.0235),doubleToFloat(0.7195),doubleToFloat(0.0364),doubleToFloat(0.7198),doubleToFloat(0.0455),doubleToFloat(0.7224),doubleToFloat(0.0239),doubleToFloat(0.7208),doubleToFloat(0.0377),doubleToFloat(0.7237),doubleToFloat(0.037),doubleToFloat(0.7206),doubleToFloat(0.0249),doubleToFloat(0.7263),doubleToFloat(0.0452),doubleToFloat(0.7441),doubleToFloat(0.0707),doubleToFloat(0.7381),doubleToFloat(0.0237),doubleToFloat(0.7506),doubleToFloat(0.1605),doubleToFloat(0.8675),doubleToFloat(0.1583),doubleToFloat(0.8136),doubleToFloat(0.1489),doubleToFloat(0.7566),doubleToFloat(0.1353),doubleToFloat(0.7171),doubleToFloat(0.1563),doubleToFloat(0.797),doubleToFloat(0.1511),doubleToFloat(0.8398),doubleToFloat(0.1599),doubleToFloat(0.8458),doubleToFloat(0.1583),doubleToFloat(0.8864),doubleToFloat(0.1444),doubleToFloat(0.798),doubleToFloat(0.1033),doubleToFloat(0.8329),doubleToFloat(0.1404),doubleToFloat(0.8853),doubleToFloat(0.1058),doubleToFloat(0.8971),doubleToFloat(0.1002),doubleToFloat(0.7872),doubleToFloat(0.0665),doubleToFloat(0.8022),doubleToFloat(0.0679),doubleToFloat(0.882),doubleToFloat(0.0514),doubleToFloat(0.8302),doubleToFloat(0.1609),doubleToFloat(0.9234),doubleToFloat(0.168),doubleToFloat(0.9467),doubleToFloat(0.1651),doubleToFloat(0.9511),doubleToFloat(0.1477),doubleToFloat(0.7507),doubleToFloat(0.1368),doubleToFloat(0.717),doubleToFloat(0.1438),doubleToFloat(0.9428),doubleToFloat(0.1468),doubleToFloat(0.9677),doubleToFloat(0.1114),doubleToFloat(0.9531),doubleToFloat(0.1136),doubleToFloat(0.98),doubleToFloat(0.0654),doubleToFloat(0.9402),doubleToFloat(0.075),doubleToFloat(0.9836),doubleToFloat(0.0416),doubleToFloat(0.9138),doubleToFloat(0.1466),doubleToFloat(0.785),doubleToFloat(0.1437),doubleToFloat(0.9149),doubleToFloat(0.1396),doubleToFloat(0.7517),doubleToFloat(0.13),doubleToFloat(0.7208),doubleToFloat(0.1101),doubleToFloat(0.9269),doubleToFloat(0.0566),doubleToFloat(0.788),doubleToFloat(0.1039),doubleToFloat(0.7559),doubleToFloat(0.0493),doubleToFloat(0.7654),doubleToFloat(0.1043),doubleToFloat(0.7792),doubleToFloat(0.0195),doubleToFloat(0.7733),doubleToFloat(0.0352),doubleToFloat(0.7216),doubleToFloat(0.0207),doubleToFloat(0.7219),doubleToFloat(0.0223),doubleToFloat(0.7935),doubleToFloat(0.0278),doubleToFloat(0.8325),doubleToFloat(0.0995),doubleToFloat(0.7302),doubleToFloat(0.1086),doubleToFloat(0.6922),doubleToFloat(0.1053),doubleToFloat(0.6934),doubleToFloat(0.0845),doubleToFloat(0.7029),doubleToFloat(0.1105),doubleToFloat(0.6908),doubleToFloat(0.5672),doubleToFloat(0.9106),doubleToFloat(0.5766),doubleToFloat(0.9675),doubleToFloat(0.5296),doubleToFloat(0.9775),doubleToFloat(0.5063),doubleToFloat(0.9145),doubleToFloat(0.5063),doubleToFloat(0.9684),doubleToFloat(0.6305),doubleToFloat(0.9446),doubleToFloat(0.6259),doubleToFloat(0.8955),doubleToFloat(0.6485),doubleToFloat(0.869),doubleToFloat(0.6418),doubleToFloat(0.7943),doubleToFloat(0.6455),doubleToFloat(0.7739),doubleToFloat(0.6614),doubleToFloat(0.8463),doubleToFloat(0.6575),doubleToFloat(0.7455),doubleToFloat(0.596),doubleToFloat(0.8103),doubleToFloat(0.6256),doubleToFloat(0.8041),doubleToFloat(0.5618),doubleToFloat(0.8114),doubleToFloat(0.5064),doubleToFloat(0.8126),doubleToFloat(0.6858),doubleToFloat(0.7499),doubleToFloat(0.6725),doubleToFloat(0.7284),doubleToFloat(0.6668),doubleToFloat(0.7266),doubleToFloat(0.6784),doubleToFloat(0.7499),doubleToFloat(0.6437),doubleToFloat(0.7459),doubleToFloat(0.6373),doubleToFloat(0.7229),doubleToFloat(0.5876),doubleToFloat(0.7457),doubleToFloat(0.5839),doubleToFloat(0.7229),doubleToFloat(0.5064),doubleToFloat(0.7411),doubleToFloat(0.5064),doubleToFloat(0.7183),doubleToFloat(0.5063),doubleToFloat(0.978),doubleToFloat(0.5317),doubleToFloat(0.9805),doubleToFloat(0.5927),doubleToFloat(0.9748),doubleToFloat(0.6375),doubleToFloat(0.9469),doubleToFloat(0.6795),doubleToFloat(0.8606),doubleToFloat(0.6742),doubleToFloat(0.8485),doubleToFloat(0.5063),doubleToFloat(0.9189),doubleToFloat(0.5063),doubleToFloat(0.8342),doubleToFloat(0.5872),doubleToFloat(0.838),doubleToFloat(0.6389),doubleToFloat(0.8402),doubleToFloat(0.611),doubleToFloat(0.9271),doubleToFloat(0.5754),doubleToFloat(0.9674),doubleToFloat(0.5063),doubleToFloat(0.962),doubleToFloat(0.4455),doubleToFloat(0.9105),doubleToFloat(0.4831),doubleToFloat(0.9774),doubleToFloat(0.4361),doubleToFloat(0.9675),doubleToFloat(0.3822),doubleToFloat(0.9445),doubleToFloat(0.3643),doubleToFloat(0.8689),doubleToFloat(0.3867),doubleToFloat(0.8954),doubleToFloat(0.371),doubleToFloat(0.7942),doubleToFloat(0.3674),doubleToFloat(0.7737),doubleToFloat(0.3514),doubleToFloat(0.8461),doubleToFloat(0.3555),doubleToFloat(0.7453),doubleToFloat(0.4167),doubleToFloat(0.8102),doubleToFloat(0.3872),doubleToFloat(0.804),doubleToFloat(0.4509),doubleToFloat(0.8114),doubleToFloat(0.3404),doubleToFloat(0.7282),doubleToFloat(0.3272),doubleToFloat(0.7498),doubleToFloat(0.3461),doubleToFloat(0.7264),doubleToFloat(0.3344),doubleToFloat(0.7497),doubleToFloat(0.3691),doubleToFloat(0.7458),doubleToFloat(0.3755),doubleToFloat(0.7228),doubleToFloat(0.4251),doubleToFloat(0.7456),doubleToFloat(0.4288),doubleToFloat(0.7229),doubleToFloat(0.4809),doubleToFloat(0.9805),doubleToFloat(0.42),doubleToFloat(0.9748),doubleToFloat(0.3752),doubleToFloat(0.9468),doubleToFloat(0.3334),doubleToFloat(0.8604),doubleToFloat(0.3385),doubleToFloat(0.8483),doubleToFloat(0.4255),doubleToFloat(0.8379),doubleToFloat(0.4016),doubleToFloat(0.927),doubleToFloat(0.3738),doubleToFloat(0.8401),doubleToFloat(0.4372),doubleToFloat(0.9673),doubleToFloat(0.5685),doubleToFloat(0.6871),doubleToFloat(0.5861),doubleToFloat(0.6783),doubleToFloat(0.5473),doubleToFloat(0.6455),doubleToFloat(0.5496),doubleToFloat(0.6512),doubleToFloat(0.3982),doubleToFloat(0.6623),doubleToFloat(0.3199),doubleToFloat(0.6645),doubleToFloat(0.3521),doubleToFloat(0.7176),doubleToFloat(0.5721),doubleToFloat(0.7229),doubleToFloat(0.6023),doubleToFloat(0.7197),doubleToFloat(0.3139),doubleToFloat(0.7387),doubleToFloat(0.3101),doubleToFloat(0.7743),doubleToFloat(0.3506),doubleToFloat(0.7743),doubleToFloat(0.5844),doubleToFloat(0.7546),doubleToFloat(0.5777),doubleToFloat(0.714),doubleToFloat(0.6092),doubleToFloat(0.7745),doubleToFloat(0.5621),doubleToFloat(0.6675),doubleToFloat(0.5363),doubleToFloat(0.6444),doubleToFloat(0.5775),doubleToFloat(0.7746),doubleToFloat(0.4666),doubleToFloat(0.6249),doubleToFloat(0.4923),doubleToFloat(0.6408),doubleToFloat(0.4189),doubleToFloat(0.6442),doubleToFloat(0.5781),doubleToFloat(0.7743),doubleToFloat(0.3814),doubleToFloat(0.6498),doubleToFloat(0.4894),doubleToFloat(0.6568),doubleToFloat(0.5086),doubleToFloat(0.6859),doubleToFloat(0.4848),doubleToFloat(0.7339),doubleToFloat(0.49),doubleToFloat(0.7742),doubleToFloat(0.3964),doubleToFloat(0.6876),doubleToFloat(0.401),doubleToFloat(0.7226),doubleToFloat(0.407),doubleToFloat(0.7742),doubleToFloat(0.5684),doubleToFloat(0.687),doubleToFloat(0.5473),doubleToFloat(0.6452),doubleToFloat(0.5861),doubleToFloat(0.678),doubleToFloat(0.5496),doubleToFloat(0.651),doubleToFloat(0.3981),doubleToFloat(0.6622),doubleToFloat(0.3521),doubleToFloat(0.7177),doubleToFloat(0.3199),doubleToFloat(0.6642),doubleToFloat(0.5721),doubleToFloat(0.7228),doubleToFloat(0.6023),doubleToFloat(0.7194),doubleToFloat(0.3139),doubleToFloat(0.7386),doubleToFloat(0.5844),doubleToFloat(0.7539),doubleToFloat(0.5777),doubleToFloat(0.7134),doubleToFloat(0.5621),doubleToFloat(0.6669),doubleToFloat(0.5363),doubleToFloat(0.644),doubleToFloat(0.4666),doubleToFloat(0.6246),doubleToFloat(0.4189),doubleToFloat(0.6438),doubleToFloat(0.4923),doubleToFloat(0.6404),doubleToFloat(0.3814),doubleToFloat(0.6496),doubleToFloat(0.4894),doubleToFloat(0.6567),doubleToFloat(0.5085),doubleToFloat(0.6859),doubleToFloat(0.4848),doubleToFloat(0.7341),doubleToFloat(0.3964),doubleToFloat(0.6877),doubleToFloat(0.401),doubleToFloat(0.7227)], Java.type("float[]"))))))))))))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_humanoid_root"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_sacroiliac"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_skullbase"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_vl5"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_l_elbow"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_r_elbow"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_l_hip"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_r_hip"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_l_knee"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_r_knee"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_l_metatarsophalangeal_2"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_r_metatarsophalangeal_2"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_l_radiocarpal"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_r_radiocarpal"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_l_shoulder"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_r_shoulder"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_l_talocrural"))
          .addJoints(new HAnimJoint("hanim_Hyun").setContainerFieldOverride("joints").setUSE("hanim_r_talocrural"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_l5"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_pelvis"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_sacrum"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_skull"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_l_calf"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_r_calf"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_l_carpal"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_r_carpal"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_l_forearm"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_r_forearm"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_l_talus"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_r_talus"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_l_tarsal_proximal_phalanx_2"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_r_tarsal_proximal_phalanx_2"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_l_thigh"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_r_thigh"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_l_upperarm"))
          .addSegments(new HAnimSegment("hanim_Hyun").setContainerFieldOverride("segments").setUSE("hanim_r_upperarm"))))      ;
    X3D0.toFileX3D("../data/KoreanCharacter03Hyun.new.graal.x3d");
    X3D0.toFileJSON("../data/KoreanCharacter03Hyun.new.graal.json");
