CommentsBlock = Java.type("org.web3d.x3d.jsail.Core.CommentsBlock")
AcousticProperties = Java.type('org.web3d.x3d.jsail.Shape.AcousticProperties')
Analyser = Java.type('org.web3d.x3d.jsail.Sound.Analyser')
Anchor = Java.type('org.web3d.x3d.jsail.Networking.Anchor')
Appearance = Java.type('org.web3d.x3d.jsail.Shape.Appearance')
Arc2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Arc2D')
ArcClose2D = Java.type('org.web3d.x3d.jsail.Geometry2D.ArcClose2D')
AudioClip = Java.type('org.web3d.x3d.jsail.Sound.AudioClip')
AudioDestination = Java.type('org.web3d.x3d.jsail.Sound.AudioDestination')
Background = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.Background')
BallJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.BallJoint')
Billboard = Java.type('org.web3d.x3d.jsail.Navigation.Billboard')
BiquadFilter = Java.type('org.web3d.x3d.jsail.Sound.BiquadFilter')
BlendedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.BlendedVolumeStyle')
BooleanFilter = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanFilter')
BooleanSequencer = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanSequencer')
BooleanToggle = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanToggle')
BooleanTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.BooleanTrigger')
BoundaryEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.BoundaryEnhancementVolumeStyle')
BoundedPhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.BoundedPhysicsModel')
Box = Java.type('org.web3d.x3d.jsail.Geometry3D.Box')
BufferAudioSource = Java.type('org.web3d.x3d.jsail.Sound.BufferAudioSource')
CADAssembly = Java.type('org.web3d.x3d.jsail.CADGeometry.CADAssembly')
CADFace = Java.type('org.web3d.x3d.jsail.CADGeometry.CADFace')
CADLayer = Java.type('org.web3d.x3d.jsail.CADGeometry.CADLayer')
CADPart = Java.type('org.web3d.x3d.jsail.CADGeometry.CADPart')
CartoonVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.CartoonVolumeStyle')
ChannelMerger = Java.type('org.web3d.x3d.jsail.Sound.ChannelMerger')
ChannelSelector = Java.type('org.web3d.x3d.jsail.Sound.ChannelSelector')
ChannelSplitter = Java.type('org.web3d.x3d.jsail.Sound.ChannelSplitter')
Circle2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Circle2D')
ClipPlane = Java.type('org.web3d.x3d.jsail.Rendering.ClipPlane')
CollidableOffset = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollidableOffset')
CollidableShape = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollidableShape')
Collision = Java.type('org.web3d.x3d.jsail.Navigation.Collision')
CollisionCollection = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionCollection')
CollisionSensor = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSensor')
CollisionSpace = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSpace')
Color = Java.type('org.web3d.x3d.jsail.Rendering.Color')
ColorChaser = Java.type('org.web3d.x3d.jsail.Followers.ColorChaser')
ColorDamper = Java.type('org.web3d.x3d.jsail.Followers.ColorDamper')
ColorInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.ColorInterpolator')
ColorRGBA = Java.type('org.web3d.x3d.jsail.Rendering.ColorRGBA')
ComposedCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.ComposedCubeMapTexture')
ComposedShader = Java.type('org.web3d.x3d.jsail.Shaders.ComposedShader')
ComposedTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.ComposedTexture3D')
ComposedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ComposedVolumeStyle')
Cone = Java.type('org.web3d.x3d.jsail.Geometry3D.Cone')
ConeEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.ConeEmitter')
Contact = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.Contact')
Contour2D = Java.type('org.web3d.x3d.jsail.NURBS.Contour2D')
ContourPolyline2D = Java.type('org.web3d.x3d.jsail.NURBS.ContourPolyline2D')
Convolver = Java.type('org.web3d.x3d.jsail.Sound.Convolver')
Coordinate = Java.type('org.web3d.x3d.jsail.Rendering.Coordinate')
CoordinateChaser = Java.type('org.web3d.x3d.jsail.Followers.CoordinateChaser')
CoordinateDamper = Java.type('org.web3d.x3d.jsail.Followers.CoordinateDamper')
CoordinateDouble = Java.type('org.web3d.x3d.jsail.Rendering.CoordinateDouble')
CoordinateInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator')
CoordinateInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator2D')
Cylinder = Java.type('org.web3d.x3d.jsail.Geometry3D.Cylinder')
CylinderSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.CylinderSensor')
Delay = Java.type('org.web3d.x3d.jsail.Sound.Delay')
DirectionalLight = Java.type('org.web3d.x3d.jsail.Lighting.DirectionalLight')
DISEntityManager = Java.type('org.web3d.x3d.jsail.DIS.DISEntityManager')
DISEntityTypeMapping = Java.type('org.web3d.x3d.jsail.DIS.DISEntityTypeMapping')
Disk2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Disk2D')
DoubleAxisHingeJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.DoubleAxisHingeJoint')
DynamicsCompressor = Java.type('org.web3d.x3d.jsail.Sound.DynamicsCompressor')
EaseInEaseOut = Java.type('org.web3d.x3d.jsail.Interpolation.EaseInEaseOut')
EdgeEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.EdgeEnhancementVolumeStyle')
ElevationGrid = Java.type('org.web3d.x3d.jsail.Geometry3D.ElevationGrid')
EspduTransform = Java.type('org.web3d.x3d.jsail.DIS.EspduTransform')
ExplosionEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.ExplosionEmitter')
Extrusion = Java.type('org.web3d.x3d.jsail.Geometry3D.Extrusion')
FillProperties = Java.type('org.web3d.x3d.jsail.Shape.FillProperties')
FloatVertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.FloatVertexAttribute')
Fog = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.Fog')
FogCoordinate = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.FogCoordinate')
FontStyle = Java.type('org.web3d.x3d.jsail.Text.FontStyle')
ForcePhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.ForcePhysicsModel')
Gain = Java.type('org.web3d.x3d.jsail.Sound.Gain')
GeneratedCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.GeneratedCubeMapTexture')
GeoCoordinate = Java.type('org.web3d.x3d.jsail.Geospatial.GeoCoordinate')
GeoElevationGrid = Java.type('org.web3d.x3d.jsail.Geospatial.GeoElevationGrid')
GeoLocation = Java.type('org.web3d.x3d.jsail.Geospatial.GeoLocation')
GeoLOD = Java.type('org.web3d.x3d.jsail.Geospatial.GeoLOD')
GeoMetadata = Java.type('org.web3d.x3d.jsail.Geospatial.GeoMetadata')
GeoOrigin = Java.type('org.web3d.x3d.jsail.Geospatial.GeoOrigin')
GeoPositionInterpolator = Java.type('org.web3d.x3d.jsail.Geospatial.GeoPositionInterpolator')
GeoProximitySensor = Java.type('org.web3d.x3d.jsail.Geospatial.GeoProximitySensor')
GeoTouchSensor = Java.type('org.web3d.x3d.jsail.Geospatial.GeoTouchSensor')
GeoTransform = Java.type('org.web3d.x3d.jsail.Geospatial.GeoTransform')
GeoViewpoint = Java.type('org.web3d.x3d.jsail.Geospatial.GeoViewpoint')
Group = Java.type('org.web3d.x3d.jsail.Grouping.Group')
HAnimDisplacer = Java.type('org.web3d.x3d.jsail.HAnim.HAnimDisplacer')
HAnimHumanoid = Java.type('org.web3d.x3d.jsail.HAnim.HAnimHumanoid')
HAnimJoint = Java.type('org.web3d.x3d.jsail.HAnim.HAnimJoint')
HAnimMotion = Java.type('org.web3d.x3d.jsail.HAnim.HAnimMotion')
HAnimSegment = Java.type('org.web3d.x3d.jsail.HAnim.HAnimSegment')
HAnimSite = Java.type('org.web3d.x3d.jsail.HAnim.HAnimSite')
ImageCubeMapTexture = Java.type('org.web3d.x3d.jsail.CubeMapTexturing.ImageCubeMapTexture')
ImageTexture = Java.type('org.web3d.x3d.jsail.Texturing.ImageTexture')
ImageTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.ImageTexture3D')
IndexedFaceSet = Java.type('org.web3d.x3d.jsail.Geometry3D.IndexedFaceSet')
IndexedLineSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedLineSet')
IndexedQuadSet = Java.type('org.web3d.x3d.jsail.CADGeometry.IndexedQuadSet')
IndexedTriangleFanSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleFanSet')
IndexedTriangleSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleSet')
IndexedTriangleStripSet = Java.type('org.web3d.x3d.jsail.Rendering.IndexedTriangleStripSet')
Inline = Java.type('org.web3d.x3d.jsail.Networking.Inline')
IntegerSequencer = Java.type('org.web3d.x3d.jsail.EventUtilities.IntegerSequencer')
IntegerTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.IntegerTrigger')
IsoSurfaceVolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.IsoSurfaceVolumeData')
KeySensor = Java.type('org.web3d.x3d.jsail.KeyDeviceSensor.KeySensor')
Layer = Java.type('org.web3d.x3d.jsail.Layering.Layer')
LayerSet = Java.type('org.web3d.x3d.jsail.Layering.LayerSet')
Layout = Java.type('org.web3d.x3d.jsail.Layout.Layout')
LayoutGroup = Java.type('org.web3d.x3d.jsail.Layout.LayoutGroup')
LayoutLayer = Java.type('org.web3d.x3d.jsail.Layout.LayoutLayer')
LinePickSensor = Java.type('org.web3d.x3d.jsail.Picking.LinePickSensor')
LineProperties = Java.type('org.web3d.x3d.jsail.Shape.LineProperties')
LineSet = Java.type('org.web3d.x3d.jsail.Rendering.LineSet')
ListenerPointSource = Java.type('org.web3d.x3d.jsail.Sound.ListenerPointSource')
LoadSensor = Java.type('org.web3d.x3d.jsail.Networking.LoadSensor')
LocalFog = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.LocalFog')
LOD = Java.type('org.web3d.x3d.jsail.Navigation.LOD')
Material = Java.type('org.web3d.x3d.jsail.Shape.Material')
Matrix3VertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.Matrix3VertexAttribute')
Matrix4VertexAttribute = Java.type('org.web3d.x3d.jsail.Shaders.Matrix4VertexAttribute')
MetadataBoolean = Java.type('org.web3d.x3d.jsail.Core.MetadataBoolean')
MetadataDouble = Java.type('org.web3d.x3d.jsail.Core.MetadataDouble')
MetadataFloat = Java.type('org.web3d.x3d.jsail.Core.MetadataFloat')
MetadataInteger = Java.type('org.web3d.x3d.jsail.Core.MetadataInteger')
MetadataSet = Java.type('org.web3d.x3d.jsail.Core.MetadataSet')
MetadataString = Java.type('org.web3d.x3d.jsail.Core.MetadataString')
MicrophoneSource = Java.type('org.web3d.x3d.jsail.Sound.MicrophoneSource')
MotorJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.MotorJoint')
MovieTexture = Java.type('org.web3d.x3d.jsail.Texturing.MovieTexture')
MultiTexture = Java.type('org.web3d.x3d.jsail.Texturing.MultiTexture')
MultiTextureCoordinate = Java.type('org.web3d.x3d.jsail.Texturing.MultiTextureCoordinate')
MultiTextureTransform = Java.type('org.web3d.x3d.jsail.Texturing.MultiTextureTransform')
NavigationInfo = Java.type('org.web3d.x3d.jsail.Navigation.NavigationInfo')
Normal = Java.type('org.web3d.x3d.jsail.Rendering.Normal')
NormalInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.NormalInterpolator')
NurbsCurve = Java.type('org.web3d.x3d.jsail.NURBS.NurbsCurve')
NurbsCurve2D = Java.type('org.web3d.x3d.jsail.NURBS.NurbsCurve2D')
NurbsOrientationInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsOrientationInterpolator')
NurbsPatchSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsPatchSurface')
NurbsPositionInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsPositionInterpolator')
NurbsSet = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSet')
NurbsSurfaceInterpolator = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSurfaceInterpolator')
NurbsSweptSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSweptSurface')
NurbsSwungSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsSwungSurface')
NurbsTextureCoordinate = Java.type('org.web3d.x3d.jsail.NURBS.NurbsTextureCoordinate')
NurbsTrimmedSurface = Java.type('org.web3d.x3d.jsail.NURBS.NurbsTrimmedSurface')
OpacityMapVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.OpacityMapVolumeStyle')
OrientationChaser = Java.type('org.web3d.x3d.jsail.Followers.OrientationChaser')
OrientationDamper = Java.type('org.web3d.x3d.jsail.Followers.OrientationDamper')
OrientationInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.OrientationInterpolator')
OrthoViewpoint = Java.type('org.web3d.x3d.jsail.Navigation.OrthoViewpoint')
OscillatorSource = Java.type('org.web3d.x3d.jsail.Sound.OscillatorSource')
PackagedShader = Java.type('org.web3d.x3d.jsail.Shaders.PackagedShader')
ParticleSystem = Java.type('org.web3d.x3d.jsail.ParticleSystems.ParticleSystem')
PeriodicWave = Java.type('org.web3d.x3d.jsail.Sound.PeriodicWave')
PhysicalMaterial = Java.type('org.web3d.x3d.jsail.Shape.PhysicalMaterial')
PickableGroup = Java.type('org.web3d.x3d.jsail.Picking.PickableGroup')
PixelTexture = Java.type('org.web3d.x3d.jsail.Texturing.PixelTexture')
PixelTexture3D = Java.type('org.web3d.x3d.jsail.Texturing3D.PixelTexture3D')
PlaneSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.PlaneSensor')
PointEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.PointEmitter')
PointLight = Java.type('org.web3d.x3d.jsail.Lighting.PointLight')
PointPickSensor = Java.type('org.web3d.x3d.jsail.Picking.PointPickSensor')
PointProperties = Java.type('org.web3d.x3d.jsail.Shape.PointProperties')
PointSet = Java.type('org.web3d.x3d.jsail.Rendering.PointSet')
Polyline2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Polyline2D')
PolylineEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.PolylineEmitter')
Polypoint2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Polypoint2D')
PositionChaser = Java.type('org.web3d.x3d.jsail.Followers.PositionChaser')
PositionChaser2D = Java.type('org.web3d.x3d.jsail.Followers.PositionChaser2D')
PositionDamper = Java.type('org.web3d.x3d.jsail.Followers.PositionDamper')
PositionDamper2D = Java.type('org.web3d.x3d.jsail.Followers.PositionDamper2D')
PositionInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.PositionInterpolator')
PositionInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.PositionInterpolator2D')
PrimitivePickSensor = Java.type('org.web3d.x3d.jsail.Picking.PrimitivePickSensor')
ProgramShader = Java.type('org.web3d.x3d.jsail.Shaders.ProgramShader')
ProjectionVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ProjectionVolumeStyle')
ProtoInstance = Java.type('org.web3d.x3d.jsail.Core.ProtoInstance')
ProximitySensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.ProximitySensor')
QuadSet = Java.type('org.web3d.x3d.jsail.CADGeometry.QuadSet')
ReceiverPdu = Java.type('org.web3d.x3d.jsail.DIS.ReceiverPdu')
Rectangle2D = Java.type('org.web3d.x3d.jsail.Geometry2D.Rectangle2D')
RigidBody = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.RigidBody')
RigidBodyCollection = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.RigidBodyCollection')
ScalarChaser = Java.type('org.web3d.x3d.jsail.Followers.ScalarChaser')
ScalarDamper = Java.type('org.web3d.x3d.jsail.Followers.ScalarDamper')
ScalarInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.ScalarInterpolator')
ScreenFontStyle = Java.type('org.web3d.x3d.jsail.Layout.ScreenFontStyle')
ScreenGroup = Java.type('org.web3d.x3d.jsail.Layout.ScreenGroup')
Script = Java.type('org.web3d.x3d.jsail.Scripting.Script')
SegmentedVolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.SegmentedVolumeData')
ShadedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ShadedVolumeStyle')
ShaderPart = Java.type('org.web3d.x3d.jsail.Shaders.ShaderPart')
ShaderProgram = Java.type('org.web3d.x3d.jsail.Shaders.ShaderProgram')
Shape = Java.type('org.web3d.x3d.jsail.Shape.Shape')
SignalPdu = Java.type('org.web3d.x3d.jsail.DIS.SignalPdu')
SilhouetteEnhancementVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.SilhouetteEnhancementVolumeStyle')
SingleAxisHingeJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.SingleAxisHingeJoint')
SliderJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.SliderJoint')
Sound = Java.type('org.web3d.x3d.jsail.Sound.Sound')
SpatialSound = Java.type('org.web3d.x3d.jsail.Sound.SpatialSound')
Sphere = Java.type('org.web3d.x3d.jsail.Geometry3D.Sphere')
SphereSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.SphereSensor')
SplinePositionInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator')
SplinePositionInterpolator2D = Java.type('org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator2D')
SplineScalarInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SplineScalarInterpolator')
SpotLight = Java.type('org.web3d.x3d.jsail.Lighting.SpotLight')
SquadOrientationInterpolator = Java.type('org.web3d.x3d.jsail.Interpolation.SquadOrientationInterpolator')
StaticGroup = Java.type('org.web3d.x3d.jsail.Grouping.StaticGroup')
StreamAudioDestination = Java.type('org.web3d.x3d.jsail.Sound.StreamAudioDestination')
StreamAudioSource = Java.type('org.web3d.x3d.jsail.Sound.StreamAudioSource')
StringSensor = Java.type('org.web3d.x3d.jsail.KeyDeviceSensor.StringSensor')
SurfaceEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.SurfaceEmitter')
Switch = Java.type('org.web3d.x3d.jsail.Grouping.Switch')
TexCoordChaser2D = Java.type('org.web3d.x3d.jsail.Followers.TexCoordChaser2D')
TexCoordDamper2D = Java.type('org.web3d.x3d.jsail.Followers.TexCoordDamper2D')
Text = Java.type('org.web3d.x3d.jsail.Text.Text')
TextureBackground = Java.type('org.web3d.x3d.jsail.EnvironmentalEffects.TextureBackground')
TextureCoordinate = Java.type('org.web3d.x3d.jsail.Texturing.TextureCoordinate')
TextureCoordinate3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureCoordinate3D')
TextureCoordinate4D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureCoordinate4D')
TextureCoordinateGenerator = Java.type('org.web3d.x3d.jsail.Texturing.TextureCoordinateGenerator')
TextureProjector = Java.type('org.web3d.x3d.jsail.TextureProjection.TextureProjector')
TextureProjectorParallel = Java.type('org.web3d.x3d.jsail.TextureProjection.TextureProjectorParallel')
TextureProperties = Java.type('org.web3d.x3d.jsail.Texturing.TextureProperties')
TextureTransform = Java.type('org.web3d.x3d.jsail.Texturing.TextureTransform')
TextureTransform3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureTransform3D')
TextureTransformMatrix3D = Java.type('org.web3d.x3d.jsail.Texturing3D.TextureTransformMatrix3D')
TimeSensor = Java.type('org.web3d.x3d.jsail.Time.TimeSensor')
TimeTrigger = Java.type('org.web3d.x3d.jsail.EventUtilities.TimeTrigger')
ToneMappedVolumeStyle = Java.type('org.web3d.x3d.jsail.VolumeRendering.ToneMappedVolumeStyle')
TouchSensor = Java.type('org.web3d.x3d.jsail.PointingDeviceSensor.TouchSensor')
Transform = Java.type('org.web3d.x3d.jsail.Grouping.Transform')
TransformSensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.TransformSensor')
TransmitterPdu = Java.type('org.web3d.x3d.jsail.DIS.TransmitterPdu')
TriangleFanSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleFanSet')
TriangleSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleSet')
TriangleSet2D = Java.type('org.web3d.x3d.jsail.Geometry2D.TriangleSet2D')
TriangleStripSet = Java.type('org.web3d.x3d.jsail.Rendering.TriangleStripSet')
TwoSidedMaterial = Java.type('org.web3d.x3d.jsail.Shape.TwoSidedMaterial')
UniversalJoint = Java.type('org.web3d.x3d.jsail.RigidBodyPhysics.UniversalJoint')
UnlitMaterial = Java.type('org.web3d.x3d.jsail.Shape.UnlitMaterial')
Viewpoint = Java.type('org.web3d.x3d.jsail.Navigation.Viewpoint')
ViewpointGroup = Java.type('org.web3d.x3d.jsail.Navigation.ViewpointGroup')
Viewport = Java.type('org.web3d.x3d.jsail.Layering.Viewport')
VisibilitySensor = Java.type('org.web3d.x3d.jsail.EnvironmentalSensor.VisibilitySensor')
VolumeData = Java.type('org.web3d.x3d.jsail.VolumeRendering.VolumeData')
VolumeEmitter = Java.type('org.web3d.x3d.jsail.ParticleSystems.VolumeEmitter')
VolumePickSensor = Java.type('org.web3d.x3d.jsail.Picking.VolumePickSensor')
WaveShaper = Java.type('org.web3d.x3d.jsail.Sound.WaveShaper')
WindPhysicsModel = Java.type('org.web3d.x3d.jsail.ParticleSystems.WindPhysicsModel')
WorldInfo = Java.type('org.web3d.x3d.jsail.Core.WorldInfo')
component = Java.type('org.web3d.x3d.jsail.Core.component')
connect = Java.type('org.web3d.x3d.jsail.Core.connect')
EXPORT = Java.type('org.web3d.x3d.jsail.Networking.EXPORT')
ExternProtoDeclare = Java.type('org.web3d.x3d.jsail.Core.ExternProtoDeclare')
field = Java.type('org.web3d.x3d.jsail.Core.field')
fieldValue = Java.type('org.web3d.x3d.jsail.Core.fieldValue')
head = Java.type('org.web3d.x3d.jsail.Core.head')
IMPORT = Java.type('org.web3d.x3d.jsail.Networking.IMPORT')
IS = Java.type('org.web3d.x3d.jsail.Core.IS')
meta = Java.type('org.web3d.x3d.jsail.Core.meta')
ProtoBody = Java.type('org.web3d.x3d.jsail.Core.ProtoBody')
ProtoDeclare = Java.type('org.web3d.x3d.jsail.Core.ProtoDeclare')
ProtoInterface = Java.type('org.web3d.x3d.jsail.Core.ProtoInterface')
ROUTE = Java.type('org.web3d.x3d.jsail.Core.ROUTE')
Scene = Java.type('org.web3d.x3d.jsail.Core.Scene')
unit = Java.type('org.web3d.x3d.jsail.Core.unit')
X3D = Java.type('org.web3d.x3d.jsail.Core.X3D')
SFBool = Java.type('org.web3d.x3d.jsail.fields.SFBool')
MFBool = Java.type('org.web3d.x3d.jsail.fields.MFBool')
SFColor = Java.type('org.web3d.x3d.jsail.fields.SFColor')
MFColor = Java.type('org.web3d.x3d.jsail.fields.MFColor')
SFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.SFColorRGBA')
MFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.MFColorRGBA')
SFDouble = Java.type('org.web3d.x3d.jsail.fields.SFDouble')
MFDouble = Java.type('org.web3d.x3d.jsail.fields.MFDouble')
SFFloat = Java.type('org.web3d.x3d.jsail.fields.SFFloat')
MFFloat = Java.type('org.web3d.x3d.jsail.fields.MFFloat')
SFImage = Java.type('org.web3d.x3d.jsail.fields.SFImage')
MFImage = Java.type('org.web3d.x3d.jsail.fields.MFImage')
SFInt32 = Java.type('org.web3d.x3d.jsail.fields.SFInt32')
MFInt32 = Java.type('org.web3d.x3d.jsail.fields.MFInt32')
SFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3d')
MFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3d')
SFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3f')
MFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3f')
SFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4d')
MFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4d')
SFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4f')
MFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4f')
SFNode = Java.type('org.web3d.x3d.jsail.fields.SFNode')
MFNode = Java.type('org.web3d.x3d.jsail.fields.MFNode')
SFRotation = Java.type('org.web3d.x3d.jsail.fields.SFRotation')
MFRotation = Java.type('org.web3d.x3d.jsail.fields.MFRotation')
SFString = Java.type('org.web3d.x3d.jsail.fields.SFString')
MFString = Java.type('org.web3d.x3d.jsail.fields.MFString')
SFTime = Java.type('org.web3d.x3d.jsail.fields.SFTime')
MFTime = Java.type('org.web3d.x3d.jsail.fields.MFTime')
SFVec2d = Java.type('org.web3d.x3d.jsail.fields.SFVec2d')
MFVec2d = Java.type('org.web3d.x3d.jsail.fields.MFVec2d')
SFVec2f = Java.type('org.web3d.x3d.jsail.fields.SFVec2f')
MFVec2f = Java.type('org.web3d.x3d.jsail.fields.MFVec2f')
SFVec3d = Java.type('org.web3d.x3d.jsail.fields.SFVec3d')
MFVec3d = Java.type('org.web3d.x3d.jsail.fields.MFVec3d')
SFVec3f = Java.type('org.web3d.x3d.jsail.fields.SFVec3f')
MFVec3f = Java.type('org.web3d.x3d.jsail.fields.MFVec3f')
SFVec4d = Java.type('org.web3d.x3d.jsail.fields.SFVec4d')
MFVec4d = Java.type('org.web3d.x3d.jsail.fields.MFVec4d')
SFVec4f = Java.type('org.web3d.x3d.jsail.fields.SFVec4f')
MFVec4f = Java.type('org.web3d.x3d.jsail.fields.MFVec4f')
var ConfigurationProperties = Packages.org.web3d.x3d.jsail.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
ConfigurationProperties.setStripDefaultAttributes(true);
function doubleToFloat(d) {
    if (Float32Array)
	return new Float32Array([d])[0];
}
      var X3D0 =  new X3D().setProfile("Full").setVersion("4.0")
      .setHead(new head()
        .addComponent(new component().setName("Scripting").setLevel(1))
        .addComponent(new component().setName("EnvironmentalEffects").setLevel(3))
        .addComponent(new component().setName("Shaders").setLevel(1))
        .addComponent(new component().setName("CubeMapTexturing").setLevel(1))
        .addComponent(new component().setName("Texturing").setLevel(1))
        .addComponent(new component().setName("Rendering").setLevel(1))
        .addComponent(new component().setName("Grouping").setLevel(3))
        .addComponent(new component().setName("Core").setLevel(1))
        .addComponent(new component().setName("DIS").setLevel(2))
        .addComments(new CommentsBlock("<component name='Shape' level='4'></component>"))
        .addComments(new CommentsBlock("Additional authoring resources for meta-tags: http://www.dublincore.org/documents/dcmi-terms http://www.dublincore.org/documents/dces http://www.w3.org/TR/html4/struct/global.html#h-7.4.4 http://vancouver-webpages.com/META http://vancouver-webpages.com/META/about-mk-metas2.html Additional authoring resources for language codes: ftp://ftp.isi.edu/in-notes/bcp/bcp47.txt http://www.loc.gov/standards/iso639-2/langhome.html http://www.iana.org/numbers.html#L"))
        .addMeta(new meta().setName("title").setContent("bumpfreewrlsliders.x3d"))
        .addMeta(new meta().setName("description").setContent("*enter description here, short-sentence summaries preferred*"))
        .addMeta(new meta().setName("creator").setContent("Doug Sanden, Christoph Valentin, John Carlson"))
        .addMeta(new meta().setName("translator").setContent("*if manually translating VRML-to-X3D, enter name of person translating here*"))
        .addMeta(new meta().setName("created").setContent("*enter date of initial version here*"))
        .addMeta(new meta().setName("translated").setContent("*enter date of translation here*"))
        .addMeta(new meta().setName("modified").setContent("*enter date of latest revision here*"))
        .addMeta(new meta().setName("version").setContent("*enter version here, if any*"))
        .addMeta(new meta().setName("reference").setContent("*enter reference citation or relative/online url here*"))
        .addMeta(new meta().setName("reference").setContent("*enter additional url/bibliographic reference information here*"))
        .addMeta(new meta().setName("requires").setContent("*enter reference resource here if required to support function, delivery, or coherence of content*"))
        .addMeta(new meta().setName("rights").setContent("*enter copyright information here* Example: Copyright (c) Web3D Consortium Inc. 2008, 2024"))
        .addMeta(new meta().setName("drawing").setContent("*enter drawing filename/url here*"))
        .addMeta(new meta().setName("MovingImage").setContent("*enter movie filename/url here*"))
        .addMeta(new meta().setName("photo").setContent("*enter photo filename/url here*"))
        .addMeta(new meta().setName("subject").setContent("*enter subject keywords here*"))
        .addMeta(new meta().setName("accessRights").setContent("*enter permission statements or url here*"))
        .addMeta(new meta().setName("identifier").setContent("*enter online Uniform Resource Identifier (URI) or Uniform Resource Locator (URL) address for this file here*"))
        .addMeta(new meta().setName("generator").setContent("PSPad, http://www.pspad.com/"))
        .addMeta(new meta().setName("license").setContent("license.html")))
      .addComments(new CommentsBlock("\"The Flower Review (TPREV)\", a simple MU scene using DIS Sensor Event Distribution, It is assumed the reviewers (users) have a non-X3D voice channel (e.g. TeamSpeak) open for their \"discussion about the teapot\""))
      .setScene(new Scene()
        .addComments(new CommentsBlock("LayerSet with two layers, navigation happens in layer 1"))
        .addLayerSet(new LayerSet().setActiveLayer(1).setOrder(Java.to([1,2], Java.type("int[]")))
          .addComments(new CommentsBlock("the first Layer contains the main scenery - \"The Review of the Flower (DIS Multiuser)\""))
          .addComments(new CommentsBlock("the second layer contains the sliders that are moved with the user's display like a HUD (heads up display)"))
          .addLayers(new Layer()
            .addComments(new CommentsBlock("basic nodes, which might be present in any scene"))
            .addChild(new NavigationInfo().setType(Java.to(["EXAMINE"], Java.type("java.lang.String[]"))).setAvatarSize(Java.to([doubleToFloat(0.25),doubleToFloat(1.75),doubleToFloat(0.75)], Java.type("float[]"))))
            .addChild(new DirectionalLight().setAmbientIntensity(0.2).setDirection(Java.to([doubleToFloat(0),doubleToFloat(-1),doubleToFloat(0)], Java.type("float[]"))))
            .addChild(new DirectionalLight().setAmbientIntensity(0.2).setDirection(Java.to([doubleToFloat(-1),doubleToFloat(-0.1),doubleToFloat(-1)], Java.type("float[]"))))
            .addChild(new Viewpoint().setDescription("My Overview").setFieldOfView(1.570796).setPosition(Java.to([doubleToFloat(0),doubleToFloat(1.75),doubleToFloat(60)], Java.type("float[]"))))
            .addComments(new CommentsBlock("this group contains the red/green/blue 3D crosshair"))
            .addChild(new Group()
              .addComments(new CommentsBlock("Arrow X"))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(25),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(-1),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setDEF("Shaft").setRadius(0.35).setHeight(50))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setDEF("RED").setDiffuseColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setEmissiveColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(50),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(-1),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setGeometry(new Cone().setDEF("Tip").setBottomRadius(0.8).setHeight(3))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setUSE("RED")))))
              .addComments(new CommentsBlock("Arrow Y"))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(25),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setUSE("Shaft"))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setDEF("GREEN").setDiffuseColor(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0)], Java.type("float[]"))).setEmissiveColor(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0)], Java.type("float[]")))))))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(50),doubleToFloat(0)], Java.type("float[]")))
                .addChild(new Shape()
                  .setGeometry(new Cone().setUSE("Tip"))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setUSE("GREEN")))))
              .addComments(new CommentsBlock("Arrow Z"))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(25)], Java.type("float[]"))).setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setUSE("Shaft"))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setDEF("BLUE").setDiffuseColor(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1)], Java.type("float[]"))).setEmissiveColor(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1)], Java.type("float[]")))))))
              .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(50)], Java.type("float[]"))).setRotation(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setGeometry(new Cone().setUSE("Tip"))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material().setUSE("BLUE"))))))
            .addComments(new CommentsBlock("the model that is being reviewed by the users of this scene"))
            .addChild(new Transform().setDEF("FlowerTransform")
              .addComments(new CommentsBlock("<Inline DEF=\"Flower\" url='\"bumpyfreewrl.x3d\"' />"))
              .addComments(new CommentsBlock("Images courtesy of Paul Debevec's Light Probe Image Gallery"))
              .addChild(new Background().setBackUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_back.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_back.png"], Java.type("java.lang.String[]"))).setBottomUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_bottom.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_bottom.png"], Java.type("java.lang.String[]"))).setFrontUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_front.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_front.png"], Java.type("java.lang.String[]"))).setLeftUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_left.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_left.png"], Java.type("java.lang.String[]"))).setRightUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_right.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_right.png"], Java.type("java.lang.String[]"))).setTopUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_top.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_top.png"], Java.type("java.lang.String[]"))))
              .addChild(new Shape()
                .setGeometry(new Sphere().setRadius(40))
                .setAppearance(new Appearance()
                  .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0.7),doubleToFloat(0.7),doubleToFloat(0.7)], Java.type("float[]"))).setSpecularColor(Java.to([doubleToFloat(0.5),doubleToFloat(0.5),doubleToFloat(0.5)], Java.type("float[]"))))
                  .setTexture(new ComposedCubeMapTexture().setDEF("texture")
                    .setBackTexture(new ImageTexture().setUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_back.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_back.png"], Java.type("java.lang.String[]"))))
                    .setBottomTexture(new ImageTexture().setUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_bottom.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_bottom.png"], Java.type("java.lang.String[]"))))
                    .setFrontTexture(new ImageTexture().setUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_front.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_front.png"], Java.type("java.lang.String[]"))))
                    .setLeftTexture(new ImageTexture().setUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_left.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_left.png"], Java.type("java.lang.String[]"))))
                    .setRightTexture(new ImageTexture().setUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_right.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_right.png"], Java.type("java.lang.String[]"))))
                    .setTopTexture(new ImageTexture().setUrl(Java.to(["../resources/images/all_probes/stpeters_cross/stpeters_top.png","https://coderextreme.net/X3DJSONLD/src/main/resources/images/all_probes/stpeters_cross/stpeters_top.png"], Java.type("java.lang.String[]")))))
                  .addShaders(new ComposedShader().setDEF("freewrlShader").setLanguage("GLSL")
                    .addField(new field().setType(field.TYPE_SFVEC3F).setName("chromaticDispertion").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("0.98 1 1.033"))
                    .addField(new field().setType(field.TYPE_SFINT32).setName("fw_textureCoordGenType").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("0"))
                    .addField(new field().setType(field.TYPE_SFFLOAT).setName("bias").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("0.5"))
                    .addField(new field().setType(field.TYPE_SFFLOAT).setName("scale").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("0.5"))
                    .addField(new field().setType(field.TYPE_SFFLOAT).setName("power").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("2"))
                    .addField(new field().setType(field.TYPE_SFFLOAT).setName("a").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("15"))
                    .addField(new field().setType(field.TYPE_SFFLOAT).setName("b").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("5"))
                    .addField(new field().setType(field.TYPE_SFFLOAT).setName("c").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("5"))
                    .addField(new field().setType(field.TYPE_SFFLOAT).setName("d").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("5"))
                    .addField(new field().setType(field.TYPE_SFFLOAT).setName("tdelta").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("0"))
                    .addField(new field().setType(field.TYPE_SFFLOAT).setName("pdelta").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("0"))
                    .addParts(new ShaderPart().setType("VERTEX").setUrl(Java.to(["../shaders/freewrl_flowers_chromatic.vs","https://coderextreme.net/X3DJSONLD/src/main/shaders/freewrl_flowers_chromatic.vs"], Java.type("java.lang.String[]"))))
                    .addParts(new ShaderPart().setType("FRAGMENT").setUrl(Java.to(["../shaders/freewrl_bubbles.fs","https://coderextreme.net/X3DJSONLD/src/main/shaders/freewrl_bubbles.fs"], Java.type("java.lang.String[]"))))))))
            .addComments(new CommentsBlock("DIS multiuser facilities"))
            .addChild(new DISEntityManager().setDEF("EntityManager").setNetworkMode("networkReader")
              .addChild(new DISEntityTypeMapping().setCategory(77).setSpecific(1).setUrl(Java.to(["../data/Leif8Final.x3d","https://coderextreme.net/X3DJSONLD/src/main/data/Leif8Final.x3d"], Java.type("java.lang.String[]"))))
              .addChild(new DISEntityTypeMapping().setCategory(77).setSpecific(2).setUrl(Java.to(["../data/Lily8Final.x3d","https://coderextreme.net/X3DJSONLD/src/main/data/Leif8Final.x3d"], Java.type("java.lang.String[]")))))
            .addChild(new Collision().setEnabled(false)
              .addChild(new Group().setDEF("AvatarHolder")))
            .addChild(new ROUTE().setFromField("addedEntities").setFromNode("EntityManager").setToField("addChildren").setToNode("AvatarHolder"))
            .addChild(new ROUTE().setFromField("removedEntities").setFromNode("EntityManager").setToField("removeChildren").setToNode("AvatarHolder")))
          .addLayers(new LayoutLayer()
            .addComments(new CommentsBlock("positioning the LayoutLayer"))
            .addComments(new CommentsBlock("clipping the LayoutLayer"))
            .addComments(new CommentsBlock("the content (children) of the LayoutLayer"))
            .addComments(new CommentsBlock("first, the slider for scaling the model"))
            .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(-3)], Java.type("float[]")))
              .addChild(new Shape()
                .setAppearance(new Appearance()
                  .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setTransparency(0.7)))
                .setGeometry(new Box().setSize(Java.to([doubleToFloat(100),doubleToFloat(100),doubleToFloat(0.02)], Java.type("float[]"))))))
            .addComments(new CommentsBlock("the plane sensors"))
            .addChild(new Transform().setDEF("aSlider").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0.7),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance()
                    .setMaterial(new Material()))
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(2.5))))
              .addChild(new Transform().setDEF("aTransform").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.1)], Java.type("float[]")))
                .addChild(new PlaneSensor().setDEF("aSensor").setMinPosition(Java.to([doubleToFloat(-20),doubleToFloat(0)], Java.type("float[]"))).setMaxPosition(Java.to([doubleToFloat(20),doubleToFloat(0)], Java.type("float[]"))))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                  .addChild(new TouchSensor().setDEF("aTS"))
                  .addChild(new Shape()
                    .setGeometry(new Sphere().setRadius(0.08))
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(0.3))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material()))))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance()
                    .setMaterial(new Material()))
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(2.5)))))
            .addChild(new Transform().setDEF("bSlider").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0.4),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance()
                    .setMaterial(new Material()))
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(2.5))))
              .addChild(new Transform().setDEF("bTransform").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.1)], Java.type("float[]")))
                .addChild(new PlaneSensor().setDEF("bSensor").setMinPosition(Java.to([doubleToFloat(-20),doubleToFloat(0)], Java.type("float[]"))).setMaxPosition(Java.to([doubleToFloat(20),doubleToFloat(0)], Java.type("float[]"))))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                  .addChild(new TouchSensor().setDEF("bTS"))
                  .addChild(new Shape()
                    .setGeometry(new Sphere().setRadius(0.08))
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(0.3))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material())))))
            .addChild(new Transform().setDEF("cSlider").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0.1),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance()
                    .setMaterial(new Material()))
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(2.5))))
              .addChild(new Transform().setDEF("cTransform").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.1)], Java.type("float[]")))
                .addChild(new PlaneSensor().setDEF("cSensor").setMinPosition(Java.to([doubleToFloat(-20),doubleToFloat(0)], Java.type("float[]"))).setMaxPosition(Java.to([doubleToFloat(20),doubleToFloat(0)], Java.type("float[]"))))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                  .addChild(new TouchSensor().setDEF("cTS"))
                  .addChild(new Shape()
                    .setGeometry(new Sphere().setRadius(0.08))
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(0.3))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material())))))
            .addChild(new Transform().setDEF("dSlider").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-0.2),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance()
                    .setMaterial(new Material()))
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(2.5))))
              .addChild(new Transform().setDEF("dTransform").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.1)], Java.type("float[]")))
                .addChild(new PlaneSensor().setDEF("dSensor").setMinPosition(Java.to([doubleToFloat(-20),doubleToFloat(0)], Java.type("float[]"))).setMaxPosition(Java.to([doubleToFloat(20),doubleToFloat(0)], Java.type("float[]"))))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                  .addChild(new TouchSensor().setDEF("dTS"))
                  .addChild(new Shape()
                    .setGeometry(new Sphere().setRadius(0.08))
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(0.3))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material())))))
            .addChild(new Transform().setDEF("pdeltaSlider").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-0.5),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance()
                    .setMaterial(new Material()))
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(2.5))))
              .addChild(new Transform().setDEF("pdeltaTransform").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.1)], Java.type("float[]")))
                .addChild(new PlaneSensor().setDEF("pdeltaSensor").setMinPosition(Java.to([doubleToFloat(-20),doubleToFloat(0)], Java.type("float[]"))).setMaxPosition(Java.to([doubleToFloat(20),doubleToFloat(0)], Java.type("float[]"))))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                  .addChild(new TouchSensor().setDEF("pdeltaTS"))
                  .addChild(new Shape()
                    .setGeometry(new Sphere().setRadius(0.08))
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(0.3))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material())))))
            .addChild(new Transform().setDEF("tdeltaSlider").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(-0.8),doubleToFloat(0)], Java.type("float[]")))
              .addChild(new Transform().setRotation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(1),doubleToFloat(1.57)], Java.type("float[]")))
                .addChild(new Shape()
                  .setAppearance(new Appearance()
                    .setMaterial(new Material()))
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(2.5))))
              .addChild(new Transform().setDEF("tdeltaTransform").setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0.1)], Java.type("float[]")))
                .addChild(new PlaneSensor().setDEF("tdeltaSensor").setMinPosition(Java.to([doubleToFloat(-20),doubleToFloat(0)], Java.type("float[]"))).setMaxPosition(Java.to([doubleToFloat(20),doubleToFloat(0)], Java.type("float[]"))))
                .addChild(new Transform().setTranslation(Java.to([doubleToFloat(0),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))
                  .addChild(new TouchSensor().setDEF("tdeltaTS"))
                  .addChild(new Shape()
                    .setGeometry(new Sphere().setRadius(0.08))
                    .setAppearance(new Appearance()
                      .setMaterial(new Material().setDiffuseColor(Java.to([doubleToFloat(1),doubleToFloat(0),doubleToFloat(0)], Java.type("float[]")))))))
                .addChild(new Shape()
                  .setGeometry(new Cylinder().setRadius(0.05).setHeight(0.3))
                  .setAppearance(new Appearance()
                    .setMaterial(new Material())))))
            .addChild(new Script().setDEF("aValueTransformerScript").setDirectOutput(true).setMustEvaluate(true)
              .addField(new field().setType(field.TYPE_SFVEC3F).setName("newTranslation").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("1 1 1"))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("aValue").setAccessType(field.ACCESSTYPE_OUTPUTONLY).setValue("1"))
              .setSourceCode(`ecmascript: function newTranslation(Value) { aValue = Value.x * 30; }`))
            .addChild(new Script().setDEF("bValueTransformerScript").setDirectOutput(true).setMustEvaluate(true)
              .addField(new field().setType(field.TYPE_SFVEC3F).setName("newTranslation").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("1 1 1"))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("bValue").setAccessType(field.ACCESSTYPE_OUTPUTONLY).setValue("1"))
              .setSourceCode(`ecmascript: function newTranslation(Value) { bValue = Value.x * 30; }`))
            .addChild(new Script().setDEF("cValueTransformerScript").setDirectOutput(true).setMustEvaluate(true)
              .addField(new field().setType(field.TYPE_SFVEC3F).setName("newTranslation").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("1 1 1"))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("cValue").setAccessType(field.ACCESSTYPE_OUTPUTONLY).setValue("1"))
              .setSourceCode(`ecmascript: function newTranslation(Value) { cValue = Value.x * 5; }`))
            .addChild(new Script().setDEF("dValueTransformerScript").setDirectOutput(true).setMustEvaluate(true)
              .addField(new field().setType(field.TYPE_SFVEC3F).setName("newTranslation").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("1 1 1"))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("dValue").setAccessType(field.ACCESSTYPE_OUTPUTONLY).setValue("1"))
              .setSourceCode(`ecmascript: function newTranslation(Value) { dValue = Value.x * 5; }`))
            .addChild(new Script().setDEF("pdeltaValueTransformerScript").setDirectOutput(true).setMustEvaluate(true)
              .addField(new field().setType(field.TYPE_SFVEC3F).setName("newTranslation").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("1 1 1"))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("pdeltaValue").setAccessType(field.ACCESSTYPE_OUTPUTONLY).setValue("1"))
              .setSourceCode(`ecmascript: function newTranslation(Value) { pdeltaValue = Value.x; }`))
            .addChild(new Script().setDEF("tdeltaValueTransformerScript").setDirectOutput(true).setMustEvaluate(true)
              .addField(new field().setType(field.TYPE_SFVEC3F).setName("newTranslation").setAccessType(field.ACCESSTYPE_INPUTONLY).setValue("1 1 1"))
              .addField(new field().setType(field.TYPE_SFFLOAT).setName("tdeltaValue").setAccessType(field.ACCESSTYPE_OUTPUTONLY).setValue("1"))
              .setSourceCode(`ecmascript: function newTranslation(Value) { tdeltaValue = Value.x; }`))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("aSensor").setToField("set_translation").setToNode("aTransform"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("bSensor").setToField("set_translation").setToNode("bTransform"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("cSensor").setToField("set_translation").setToNode("cTransform"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("dSensor").setToField("set_translation").setToNode("dTransform"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("pdeltaSensor").setToField("set_translation").setToNode("pdeltaTransform"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("tdeltaSensor").setToField("set_translation").setToNode("tdeltaTransform"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("aSensor").setToField("newTranslation").setToNode("aValueTransformerScript"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("bSensor").setToField("newTranslation").setToNode("bValueTransformerScript"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("cSensor").setToField("newTranslation").setToNode("cValueTransformerScript"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("dSensor").setToField("newTranslation").setToNode("dValueTransformerScript"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("pdeltaSensor").setToField("newTranslation").setToNode("pdeltaValueTransformerScript"))
            .addChild(new ROUTE().setFromField("translation_changed").setFromNode("tdeltaSensor").setToField("newTranslation").setToNode("tdeltaValueTransformerScript"))
            .addChild(new ROUTE().setFromField("aValue").setFromNode("aValueTransformerScript").setToField("a").setToNode("freewrlShader"))
            .addChild(new ROUTE().setFromField("bValue").setFromNode("bValueTransformerScript").setToField("b").setToNode("freewrlShader"))
            .addChild(new ROUTE().setFromField("cValue").setFromNode("cValueTransformerScript").setToField("c").setToNode("freewrlShader"))
            .addChild(new ROUTE().setFromField("dValue").setFromNode("dValueTransformerScript").setToField("d").setToNode("freewrlShader"))
            .addChild(new ROUTE().setFromField("pdeltaValue").setFromNode("pdeltaValueTransformerScript").setToField("pdelta").setToNode("freewrlShader"))
            .addChild(new ROUTE().setFromField("tdeltaValue").setFromNode("tdeltaValueTransformerScript").setToField("tdelta").setToNode("freewrlShader"))
            .setLayout(new Layout().setAlign(Java.to(["RIGHT","BOTTOM"], Java.type("java.lang.String[]"))).setOffset(Java.to([doubleToFloat(0),doubleToFloat(0)], Java.type("float[]"))).setOffsetUnits(Java.to(["WORLD","WORLD"], Java.type("java.lang.String[]"))).setScaleMode(Java.to(["NONE","NONE"], Java.type("java.lang.String[]"))).setSize(Java.to([doubleToFloat(0.4),doubleToFloat(1)], Java.type("float[]"))).setSizeUnits(Java.to(["WORLD","WORLD"], Java.type("java.lang.String[]"))))
            .setViewport(new Viewport().setClipBoundary(Java.to([doubleToFloat(0),doubleToFloat(1),doubleToFloat(0),doubleToFloat(1)], Java.type("float[]")))))))      ;
    X3D0.toFileX3D("../data/bumpyfreewrlsliders.new.graal.x3d");
    X3D0.toFileJSON("../data/bumpyfreewrlsliders.new.graal.json");
