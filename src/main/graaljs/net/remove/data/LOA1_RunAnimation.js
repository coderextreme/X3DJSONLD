CommentsBlock = Java.type("org.web3d.x3d.jsail.Core.CommentsBlock")
AcousticProperties = Java.type('net.coderextreme.remove.NewAcousticProperties')
Analyser = Java.type('net.coderextreme.remove.NewAnalyser')
Anchor = Java.type('net.coderextreme.remove.NewAnchor')
Appearance = Java.type('net.coderextreme.remove.NewAppearance')
Arc2D = Java.type('net.coderextreme.remove.NewArc2D')
ArcClose2D = Java.type('net.coderextreme.remove.NewArcClose2D')
AudioClip = Java.type('net.coderextreme.remove.NewAudioClip')
AudioDestination = Java.type('net.coderextreme.remove.NewAudioDestination')
Background = Java.type('net.coderextreme.remove.NewBackground')
BallJoint = Java.type('net.coderextreme.remove.NewBallJoint')
Billboard = Java.type('net.coderextreme.remove.NewBillboard')
BiquadFilter = Java.type('net.coderextreme.remove.NewBiquadFilter')
BlendedVolumeStyle = Java.type('net.coderextreme.remove.NewBlendedVolumeStyle')
BooleanFilter = Java.type('net.coderextreme.remove.NewBooleanFilter')
BooleanSequencer = Java.type('net.coderextreme.remove.NewBooleanSequencer')
BooleanToggle = Java.type('net.coderextreme.remove.NewBooleanToggle')
BooleanTrigger = Java.type('net.coderextreme.remove.NewBooleanTrigger')
BoundaryEnhancementVolumeStyle = Java.type('net.coderextreme.remove.NewBoundaryEnhancementVolumeStyle')
BoundedPhysicsModel = Java.type('net.coderextreme.remove.NewBoundedPhysicsModel')
Box = Java.type('net.coderextreme.remove.NewBox')
BufferAudioSource = Java.type('net.coderextreme.remove.NewBufferAudioSource')
CADAssembly = Java.type('net.coderextreme.remove.NewCADAssembly')
CADFace = Java.type('net.coderextreme.remove.NewCADFace')
CADLayer = Java.type('net.coderextreme.remove.NewCADLayer')
CADPart = Java.type('net.coderextreme.remove.NewCADPart')
CartoonVolumeStyle = Java.type('net.coderextreme.remove.NewCartoonVolumeStyle')
ChannelMerger = Java.type('net.coderextreme.remove.NewChannelMerger')
ChannelSelector = Java.type('net.coderextreme.remove.NewChannelSelector')
ChannelSplitter = Java.type('net.coderextreme.remove.NewChannelSplitter')
Circle2D = Java.type('net.coderextreme.remove.NewCircle2D')
ClipPlane = Java.type('net.coderextreme.remove.NewClipPlane')
CollidableOffset = Java.type('net.coderextreme.remove.NewCollidableOffset')
CollidableShape = Java.type('net.coderextreme.remove.NewCollidableShape')
Collision = Java.type('net.coderextreme.remove.NewCollision')
CollisionCollection = Java.type('net.coderextreme.remove.NewCollisionCollection')
CollisionSensor = Java.type('net.coderextreme.remove.NewCollisionSensor')
CollisionSpace = Java.type('net.coderextreme.remove.NewCollisionSpace')
Color = Java.type('net.coderextreme.remove.NewColor')
ColorChaser = Java.type('net.coderextreme.remove.NewColorChaser')
ColorDamper = Java.type('net.coderextreme.remove.NewColorDamper')
ColorInterpolator = Java.type('net.coderextreme.remove.NewColorInterpolator')
ColorRGBA = Java.type('net.coderextreme.remove.NewColorRGBA')
ComposedCubeMapTexture = Java.type('net.coderextreme.remove.NewComposedCubeMapTexture')
ComposedShader = Java.type('net.coderextreme.remove.NewComposedShader')
ComposedTexture3D = Java.type('net.coderextreme.remove.NewComposedTexture3D')
ComposedVolumeStyle = Java.type('net.coderextreme.remove.NewComposedVolumeStyle')
Cone = Java.type('net.coderextreme.remove.NewCone')
ConeEmitter = Java.type('net.coderextreme.remove.NewConeEmitter')
Contact = Java.type('net.coderextreme.remove.NewContact')
Contour2D = Java.type('net.coderextreme.remove.NewContour2D')
ContourPolyline2D = Java.type('net.coderextreme.remove.NewContourPolyline2D')
Convolver = Java.type('net.coderextreme.remove.NewConvolver')
Coordinate = Java.type('net.coderextreme.remove.NewCoordinate')
CoordinateChaser = Java.type('net.coderextreme.remove.NewCoordinateChaser')
CoordinateDamper = Java.type('net.coderextreme.remove.NewCoordinateDamper')
CoordinateDouble = Java.type('net.coderextreme.remove.NewCoordinateDouble')
CoordinateInterpolator = Java.type('net.coderextreme.remove.NewCoordinateInterpolator')
CoordinateInterpolator2D = Java.type('net.coderextreme.remove.NewCoordinateInterpolator2D')
Cylinder = Java.type('net.coderextreme.remove.NewCylinder')
CylinderSensor = Java.type('net.coderextreme.remove.NewCylinderSensor')
Delay = Java.type('net.coderextreme.remove.NewDelay')
DirectionalLight = Java.type('net.coderextreme.remove.NewDirectionalLight')
DISEntityManager = Java.type('net.coderextreme.remove.NewDISEntityManager')
DISEntityTypeMapping = Java.type('net.coderextreme.remove.NewDISEntityTypeMapping')
Disk2D = Java.type('net.coderextreme.remove.NewDisk2D')
DoubleAxisHingeJoint = Java.type('net.coderextreme.remove.NewDoubleAxisHingeJoint')
DynamicsCompressor = Java.type('net.coderextreme.remove.NewDynamicsCompressor')
EaseInEaseOut = Java.type('net.coderextreme.remove.NewEaseInEaseOut')
EdgeEnhancementVolumeStyle = Java.type('net.coderextreme.remove.NewEdgeEnhancementVolumeStyle')
ElevationGrid = Java.type('net.coderextreme.remove.NewElevationGrid')
EspduTransform = Java.type('net.coderextreme.remove.NewEspduTransform')
ExplosionEmitter = Java.type('net.coderextreme.remove.NewExplosionEmitter')
Extrusion = Java.type('net.coderextreme.remove.NewExtrusion')
FillProperties = Java.type('net.coderextreme.remove.NewFillProperties')
FloatVertexAttribute = Java.type('net.coderextreme.remove.NewFloatVertexAttribute')
Fog = Java.type('net.coderextreme.remove.NewFog')
FogCoordinate = Java.type('net.coderextreme.remove.NewFogCoordinate')
FontStyle = Java.type('net.coderextreme.remove.NewFontStyle')
ForcePhysicsModel = Java.type('net.coderextreme.remove.NewForcePhysicsModel')
Gain = Java.type('net.coderextreme.remove.NewGain')
GeneratedCubeMapTexture = Java.type('net.coderextreme.remove.NewGeneratedCubeMapTexture')
GeoCoordinate = Java.type('net.coderextreme.remove.NewGeoCoordinate')
GeoElevationGrid = Java.type('net.coderextreme.remove.NewGeoElevationGrid')
GeoLocation = Java.type('net.coderextreme.remove.NewGeoLocation')
GeoLOD = Java.type('net.coderextreme.remove.NewGeoLOD')
GeoMetadata = Java.type('net.coderextreme.remove.NewGeoMetadata')
GeoOrigin = Java.type('net.coderextreme.remove.NewGeoOrigin')
GeoPositionInterpolator = Java.type('net.coderextreme.remove.NewGeoPositionInterpolator')
GeoProximitySensor = Java.type('net.coderextreme.remove.NewGeoProximitySensor')
GeoTouchSensor = Java.type('net.coderextreme.remove.NewGeoTouchSensor')
GeoTransform = Java.type('net.coderextreme.remove.NewGeoTransform')
GeoViewpoint = Java.type('net.coderextreme.remove.NewGeoViewpoint')
Group = Java.type('net.coderextreme.remove.NewGroup')
HAnimDisplacer = Java.type('net.coderextreme.remove.NewHAnimDisplacer')
HAnimHumanoid = Java.type('net.coderextreme.remove.NewHAnimHumanoid')
HAnimJoint = Java.type('net.coderextreme.remove.NewHAnimJoint')
HAnimMotion = Java.type('net.coderextreme.remove.NewHAnimMotion')
HAnimSegment = Java.type('net.coderextreme.remove.NewHAnimSegment')
HAnimSite = Java.type('net.coderextreme.remove.NewHAnimSite')
ImageCubeMapTexture = Java.type('net.coderextreme.remove.NewImageCubeMapTexture')
ImageTexture = Java.type('net.coderextreme.remove.NewImageTexture')
ImageTexture3D = Java.type('net.coderextreme.remove.NewImageTexture3D')
IndexedFaceSet = Java.type('net.coderextreme.remove.NewIndexedFaceSet')
IndexedLineSet = Java.type('net.coderextreme.remove.NewIndexedLineSet')
IndexedQuadSet = Java.type('net.coderextreme.remove.NewIndexedQuadSet')
IndexedTriangleFanSet = Java.type('net.coderextreme.remove.NewIndexedTriangleFanSet')
IndexedTriangleSet = Java.type('net.coderextreme.remove.NewIndexedTriangleSet')
IndexedTriangleStripSet = Java.type('net.coderextreme.remove.NewIndexedTriangleStripSet')
Inline = Java.type('net.coderextreme.remove.NewInline')
IntegerSequencer = Java.type('net.coderextreme.remove.NewIntegerSequencer')
IntegerTrigger = Java.type('net.coderextreme.remove.NewIntegerTrigger')
IsoSurfaceVolumeData = Java.type('net.coderextreme.remove.NewIsoSurfaceVolumeData')
KeySensor = Java.type('net.coderextreme.remove.NewKeySensor')
Layer = Java.type('net.coderextreme.remove.NewLayer')
LayerSet = Java.type('net.coderextreme.remove.NewLayerSet')
Layout = Java.type('net.coderextreme.remove.NewLayout')
LayoutGroup = Java.type('net.coderextreme.remove.NewLayoutGroup')
LayoutLayer = Java.type('net.coderextreme.remove.NewLayoutLayer')
LinePickSensor = Java.type('net.coderextreme.remove.NewLinePickSensor')
LineProperties = Java.type('net.coderextreme.remove.NewLineProperties')
LineSet = Java.type('net.coderextreme.remove.NewLineSet')
ListenerPointSource = Java.type('net.coderextreme.remove.NewListenerPointSource')
LoadSensor = Java.type('net.coderextreme.remove.NewLoadSensor')
LocalFog = Java.type('net.coderextreme.remove.NewLocalFog')
LOD = Java.type('net.coderextreme.remove.NewLOD')
Material = Java.type('net.coderextreme.remove.NewMaterial')
Matrix3VertexAttribute = Java.type('net.coderextreme.remove.NewMatrix3VertexAttribute')
Matrix4VertexAttribute = Java.type('net.coderextreme.remove.NewMatrix4VertexAttribute')
MetadataBoolean = Java.type('net.coderextreme.remove.NewMetadataBoolean')
MetadataDouble = Java.type('net.coderextreme.remove.NewMetadataDouble')
MetadataFloat = Java.type('net.coderextreme.remove.NewMetadataFloat')
MetadataInteger = Java.type('net.coderextreme.remove.NewMetadataInteger')
MetadataSet = Java.type('net.coderextreme.remove.NewMetadataSet')
MetadataString = Java.type('net.coderextreme.remove.NewMetadataString')
MicrophoneSource = Java.type('net.coderextreme.remove.NewMicrophoneSource')
MotorJoint = Java.type('net.coderextreme.remove.NewMotorJoint')
MovieTexture = Java.type('net.coderextreme.remove.NewMovieTexture')
MultiTexture = Java.type('net.coderextreme.remove.NewMultiTexture')
MultiTextureCoordinate = Java.type('net.coderextreme.remove.NewMultiTextureCoordinate')
MultiTextureTransform = Java.type('net.coderextreme.remove.NewMultiTextureTransform')
NavigationInfo = Java.type('net.coderextreme.remove.NewNavigationInfo')
Normal = Java.type('net.coderextreme.remove.NewNormal')
NormalInterpolator = Java.type('net.coderextreme.remove.NewNormalInterpolator')
NurbsCurve = Java.type('net.coderextreme.remove.NewNurbsCurve')
NurbsCurve2D = Java.type('net.coderextreme.remove.NewNurbsCurve2D')
NurbsOrientationInterpolator = Java.type('net.coderextreme.remove.NewNurbsOrientationInterpolator')
NurbsPatchSurface = Java.type('net.coderextreme.remove.NewNurbsPatchSurface')
NurbsPositionInterpolator = Java.type('net.coderextreme.remove.NewNurbsPositionInterpolator')
NurbsSet = Java.type('net.coderextreme.remove.NewNurbsSet')
NurbsSurfaceInterpolator = Java.type('net.coderextreme.remove.NewNurbsSurfaceInterpolator')
NurbsSweptSurface = Java.type('net.coderextreme.remove.NewNurbsSweptSurface')
NurbsSwungSurface = Java.type('net.coderextreme.remove.NewNurbsSwungSurface')
NurbsTextureCoordinate = Java.type('net.coderextreme.remove.NewNurbsTextureCoordinate')
NurbsTrimmedSurface = Java.type('net.coderextreme.remove.NewNurbsTrimmedSurface')
OpacityMapVolumeStyle = Java.type('net.coderextreme.remove.NewOpacityMapVolumeStyle')
OrientationChaser = Java.type('net.coderextreme.remove.NewOrientationChaser')
OrientationDamper = Java.type('net.coderextreme.remove.NewOrientationDamper')
OrientationInterpolator = Java.type('net.coderextreme.remove.NewOrientationInterpolator')
OrthoViewpoint = Java.type('net.coderextreme.remove.NewOrthoViewpoint')
OscillatorSource = Java.type('net.coderextreme.remove.NewOscillatorSource')
PackagedShader = Java.type('net.coderextreme.remove.NewPackagedShader')
ParticleSystem = Java.type('net.coderextreme.remove.NewParticleSystem')
PeriodicWave = Java.type('net.coderextreme.remove.NewPeriodicWave')
PhysicalMaterial = Java.type('net.coderextreme.remove.NewPhysicalMaterial')
PickableGroup = Java.type('net.coderextreme.remove.NewPickableGroup')
PixelTexture = Java.type('net.coderextreme.remove.NewPixelTexture')
PixelTexture3D = Java.type('net.coderextreme.remove.NewPixelTexture3D')
PlaneSensor = Java.type('net.coderextreme.remove.NewPlaneSensor')
PointEmitter = Java.type('net.coderextreme.remove.NewPointEmitter')
PointLight = Java.type('net.coderextreme.remove.NewPointLight')
PointPickSensor = Java.type('net.coderextreme.remove.NewPointPickSensor')
PointProperties = Java.type('net.coderextreme.remove.NewPointProperties')
PointSet = Java.type('net.coderextreme.remove.NewPointSet')
Polyline2D = Java.type('net.coderextreme.remove.NewPolyline2D')
PolylineEmitter = Java.type('net.coderextreme.remove.NewPolylineEmitter')
Polypoint2D = Java.type('net.coderextreme.remove.NewPolypoint2D')
PositionChaser = Java.type('net.coderextreme.remove.NewPositionChaser')
PositionChaser2D = Java.type('net.coderextreme.remove.NewPositionChaser2D')
PositionDamper = Java.type('net.coderextreme.remove.NewPositionDamper')
PositionDamper2D = Java.type('net.coderextreme.remove.NewPositionDamper2D')
PositionInterpolator = Java.type('net.coderextreme.remove.NewPositionInterpolator')
PositionInterpolator2D = Java.type('net.coderextreme.remove.NewPositionInterpolator2D')
PrimitivePickSensor = Java.type('net.coderextreme.remove.NewPrimitivePickSensor')
ProgramShader = Java.type('net.coderextreme.remove.NewProgramShader')
ProjectionVolumeStyle = Java.type('net.coderextreme.remove.NewProjectionVolumeStyle')
ProtoInstance = Java.type('net.coderextreme.remove.NewProtoInstance')
ProximitySensor = Java.type('net.coderextreme.remove.NewProximitySensor')
QuadSet = Java.type('net.coderextreme.remove.NewQuadSet')
ReceiverPdu = Java.type('net.coderextreme.remove.NewReceiverPdu')
Rectangle2D = Java.type('net.coderextreme.remove.NewRectangle2D')
RigidBody = Java.type('net.coderextreme.remove.NewRigidBody')
RigidBodyCollection = Java.type('net.coderextreme.remove.NewRigidBodyCollection')
ScalarChaser = Java.type('net.coderextreme.remove.NewScalarChaser')
ScalarDamper = Java.type('net.coderextreme.remove.NewScalarDamper')
ScalarInterpolator = Java.type('net.coderextreme.remove.NewScalarInterpolator')
ScreenFontStyle = Java.type('net.coderextreme.remove.NewScreenFontStyle')
ScreenGroup = Java.type('net.coderextreme.remove.NewScreenGroup')
Script = Java.type('net.coderextreme.remove.NewScript')
SegmentedVolumeData = Java.type('net.coderextreme.remove.NewSegmentedVolumeData')
ShadedVolumeStyle = Java.type('net.coderextreme.remove.NewShadedVolumeStyle')
ShaderPart = Java.type('net.coderextreme.remove.NewShaderPart')
ShaderProgram = Java.type('net.coderextreme.remove.NewShaderProgram')
Shape = Java.type('net.coderextreme.remove.NewShape')
SignalPdu = Java.type('net.coderextreme.remove.NewSignalPdu')
SilhouetteEnhancementVolumeStyle = Java.type('net.coderextreme.remove.NewSilhouetteEnhancementVolumeStyle')
SingleAxisHingeJoint = Java.type('net.coderextreme.remove.NewSingleAxisHingeJoint')
SliderJoint = Java.type('net.coderextreme.remove.NewSliderJoint')
Sound = Java.type('net.coderextreme.remove.NewSound')
SpatialSound = Java.type('net.coderextreme.remove.NewSpatialSound')
Sphere = Java.type('net.coderextreme.remove.NewSphere')
SphereSensor = Java.type('net.coderextreme.remove.NewSphereSensor')
SplinePositionInterpolator = Java.type('net.coderextreme.remove.NewSplinePositionInterpolator')
SplinePositionInterpolator2D = Java.type('net.coderextreme.remove.NewSplinePositionInterpolator2D')
SplineScalarInterpolator = Java.type('net.coderextreme.remove.NewSplineScalarInterpolator')
SpotLight = Java.type('net.coderextreme.remove.NewSpotLight')
SquadOrientationInterpolator = Java.type('net.coderextreme.remove.NewSquadOrientationInterpolator')
StaticGroup = Java.type('net.coderextreme.remove.NewStaticGroup')
StreamAudioDestination = Java.type('net.coderextreme.remove.NewStreamAudioDestination')
StreamAudioSource = Java.type('net.coderextreme.remove.NewStreamAudioSource')
StringSensor = Java.type('net.coderextreme.remove.NewStringSensor')
SurfaceEmitter = Java.type('net.coderextreme.remove.NewSurfaceEmitter')
Switch = Java.type('net.coderextreme.remove.NewSwitch')
TexCoordChaser2D = Java.type('net.coderextreme.remove.NewTexCoordChaser2D')
TexCoordDamper2D = Java.type('net.coderextreme.remove.NewTexCoordDamper2D')
Text = Java.type('net.coderextreme.remove.NewText')
TextureBackground = Java.type('net.coderextreme.remove.NewTextureBackground')
TextureCoordinate = Java.type('net.coderextreme.remove.NewTextureCoordinate')
TextureCoordinate3D = Java.type('net.coderextreme.remove.NewTextureCoordinate3D')
TextureCoordinate4D = Java.type('net.coderextreme.remove.NewTextureCoordinate4D')
TextureCoordinateGenerator = Java.type('net.coderextreme.remove.NewTextureCoordinateGenerator')
TextureProjector = Java.type('net.coderextreme.remove.NewTextureProjector')
TextureProjectorParallel = Java.type('net.coderextreme.remove.NewTextureProjectorParallel')
TextureProperties = Java.type('net.coderextreme.remove.NewTextureProperties')
TextureTransform = Java.type('net.coderextreme.remove.NewTextureTransform')
TextureTransform3D = Java.type('net.coderextreme.remove.NewTextureTransform3D')
TextureTransformMatrix3D = Java.type('net.coderextreme.remove.NewTextureTransformMatrix3D')
TimeSensor = Java.type('net.coderextreme.remove.NewTimeSensor')
TimeTrigger = Java.type('net.coderextreme.remove.NewTimeTrigger')
ToneMappedVolumeStyle = Java.type('net.coderextreme.remove.NewToneMappedVolumeStyle')
TouchSensor = Java.type('net.coderextreme.remove.NewTouchSensor')
Transform = Java.type('net.coderextreme.remove.NewTransform')
TransformSensor = Java.type('net.coderextreme.remove.NewTransformSensor')
TransmitterPdu = Java.type('net.coderextreme.remove.NewTransmitterPdu')
TriangleFanSet = Java.type('net.coderextreme.remove.NewTriangleFanSet')
TriangleSet = Java.type('net.coderextreme.remove.NewTriangleSet')
TriangleSet2D = Java.type('net.coderextreme.remove.NewTriangleSet2D')
TriangleStripSet = Java.type('net.coderextreme.remove.NewTriangleStripSet')
TwoSidedMaterial = Java.type('net.coderextreme.remove.NewTwoSidedMaterial')
UniversalJoint = Java.type('net.coderextreme.remove.NewUniversalJoint')
UnlitMaterial = Java.type('net.coderextreme.remove.NewUnlitMaterial')
Viewpoint = Java.type('net.coderextreme.remove.NewViewpoint')
ViewpointGroup = Java.type('net.coderextreme.remove.NewViewpointGroup')
Viewport = Java.type('net.coderextreme.remove.NewViewport')
VisibilitySensor = Java.type('net.coderextreme.remove.NewVisibilitySensor')
VolumeData = Java.type('net.coderextreme.remove.NewVolumeData')
VolumeEmitter = Java.type('net.coderextreme.remove.NewVolumeEmitter')
VolumePickSensor = Java.type('net.coderextreme.remove.NewVolumePickSensor')
WaveShaper = Java.type('net.coderextreme.remove.NewWaveShaper')
WindPhysicsModel = Java.type('net.coderextreme.remove.NewWindPhysicsModel')
WorldInfo = Java.type('net.coderextreme.remove.NewWorldInfo')
component = Java.type('net.coderextreme.remove.Newcomponent')
connect = Java.type('net.coderextreme.remove.Newconnect')
EXPORT = Java.type('net.coderextreme.remove.NewEXPORT')
ExternProtoDeclare = Java.type('net.coderextreme.remove.NewExternProtoDeclare')
field = Java.type('net.coderextreme.remove.Newfield')
fieldValue = Java.type('net.coderextreme.remove.NewfieldValue')
head = Java.type('net.coderextreme.remove.Newhead')
IMPORT = Java.type('net.coderextreme.remove.NewIMPORT')
IS = Java.type('net.coderextreme.remove.NewIS')
meta = Java.type('net.coderextreme.remove.Newmeta')
ProtoBody = Java.type('net.coderextreme.remove.NewProtoBody')
ProtoDeclare = Java.type('net.coderextreme.remove.NewProtoDeclare')
ProtoInterface = Java.type('net.coderextreme.remove.NewProtoInterface')
ROUTE = Java.type('net.coderextreme.remove.NewROUTE')
Scene = Java.type('net.coderextreme.remove.NewScene')
unit = Java.type('net.coderextreme.remove.Newunit')
X3D = Java.type('net.coderextreme.remove.NewX3D')
SFBool = Java.type('org.web3d.x3d.jsail.fields.SFBool')
MFBool = Java.type('org.web3d.x3d.jsail.fields.MFBool')
SFColor = Java.type('org.web3d.x3d.jsail.fields.SFColor')
MFColor = Java.type('org.web3d.x3d.jsail.fields.MFColor')
SFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.SFColorRGBA')
MFColorRGBA = Java.type('org.web3d.x3d.jsail.fields.MFColorRGBA')
SFDouble = Java.type('org.web3d.x3d.jsail.fields.SFDouble')
MFDouble = Java.type('org.web3d.x3d.jsail.fields.MFDouble')
SFFloat = Java.type('org.web3d.x3d.jsail.fields.SFFloat')
MFFloat = Java.type('org.web3d.x3d.jsail.fields.MFFloat')
SFImage = Java.type('org.web3d.x3d.jsail.fields.SFImage')
MFImage = Java.type('org.web3d.x3d.jsail.fields.MFImage')
SFInt32 = Java.type('org.web3d.x3d.jsail.fields.SFInt32')
MFInt32 = Java.type('org.web3d.x3d.jsail.fields.MFInt32')
SFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3d')
MFMatrix3d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3d')
SFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix3f')
MFMatrix3f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix3f')
SFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4d')
MFMatrix4d = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4d')
SFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.SFMatrix4f')
MFMatrix4f = Java.type('org.web3d.x3d.jsail.fields.MFMatrix4f')
SFNode = Java.type('org.web3d.x3d.jsail.fields.SFNode')
MFNode = Java.type('org.web3d.x3d.jsail.fields.MFNode')
SFRotation = Java.type('org.web3d.x3d.jsail.fields.SFRotation')
MFRotation = Java.type('org.web3d.x3d.jsail.fields.MFRotation')
SFString = Java.type('org.web3d.x3d.jsail.fields.SFString')
MFString = Java.type('org.web3d.x3d.jsail.fields.MFString')
SFTime = Java.type('org.web3d.x3d.jsail.fields.SFTime')
MFTime = Java.type('org.web3d.x3d.jsail.fields.MFTime')
SFVec2d = Java.type('org.web3d.x3d.jsail.fields.SFVec2d')
MFVec2d = Java.type('org.web3d.x3d.jsail.fields.MFVec2d')
SFVec2f = Java.type('org.web3d.x3d.jsail.fields.SFVec2f')
MFVec2f = Java.type('org.web3d.x3d.jsail.fields.MFVec2f')
SFVec3d = Java.type('org.web3d.x3d.jsail.fields.SFVec3d')
MFVec3d = Java.type('org.web3d.x3d.jsail.fields.MFVec3d')
SFVec3f = Java.type('org.web3d.x3d.jsail.fields.SFVec3f')
MFVec3f = Java.type('org.web3d.x3d.jsail.fields.MFVec3f')
SFVec4d = Java.type('org.web3d.x3d.jsail.fields.SFVec4d')
MFVec4d = Java.type('org.web3d.x3d.jsail.fields.MFVec4d')
SFVec4f = Java.type('org.web3d.x3d.jsail.fields.SFVec4f')
MFVec4f = Java.type('org.web3d.x3d.jsail.fields.MFVec4f')
var ConfigurationProperties = Packages.org.web3d.x3d.jsail.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
ConfigurationProperties.setStripDefaultAttributes(true);
function doubleToFloat(d) {
    if (Float32Array)
	return new Float32Array(d);
}
      var X3D0 =  new X3D().setProfile("Immersive").setVersion("3.3")
      .setHead(new head()
        .addMeta(new meta().setName("title").setContent("LOA1_RunAnimation.x3d"))
        .addMeta(new meta().setName("description").setContent("Humanoid animation prototype reusable by any Humanoid."))
        .addMeta(new meta().setName("creator").setContent("Cindy Ballreich cindy@ballreich.net 3Name3D"))
        .addMeta(new meta().setName("rights").setContent("1997 3Name3D / Yglesias, Wallock, Divekar, Inc., all rights reserved."))
        .addMeta(new meta().setName("translator").setContent("Ozan APAYDIN"))
        .addMeta(new meta().setName("translated").setContent("30 October 2001"))
        .addMeta(new meta().setName("modified").setContent("23 May 2020"))
        .addMeta(new meta().setName("reference").setContent("http://www.ballreich.net/vrml/HAnim/nancy_HAnim.wrl"))
        .addMeta(new meta().setName("reference").setContent("http://www.HAnim.org"))
        .addMeta(new meta().setName("reference").setContent("http://HAnim.org/Models"))
        .addMeta(new meta().setName("reference").setContent("http://HAnim.org/Nodes"))
        .addMeta(new meta().setName("subject").setContent("Nancy Run Animation HAnim 2001"))
        .addMeta(new meta().setName("identifier").setContent("https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Prototypes/LOA1_RunAnimation.x3d"))
        .addMeta(new meta().setName("generator").setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"))
        .addMeta(new meta().setName("license").setContent("../license.html")))
      .setScene(new Scene()
        .addChild(new WorldInfo().setTitle("LOA1_RunAnimation.x3d"))
        .addChild(new ProtoDeclare().setName("LOA1_RunAnimation")
          .setProtoInterface(new ProtoInterface()
            .addField(new field().setType(field.TYPE_SFTIME).setName("cycleInterval").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("1"))
            .addField(new field().setType(field.TYPE_SFBOOL).setName("enabled").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("true"))
            .addField(new field().setType(field.TYPE_SFBOOL).setName("loop").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("true"))
            .addField(new field().setType(field.TYPE_SFTIME).setName("startTime").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("0"))
            .addField(new field().setType(field.TYPE_SFTIME).setName("stopTime").setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue("-1"))
            .addField(new field().setType(field.TYPE_SFFLOAT).setName("fraction_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFBOOL).setName("isActive").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFVEC3F).setName("HumanoidRoot_translation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("HumanoidRoot_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("lower_body_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("l_hip_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("l_knee_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("l_ankle_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("l_midtarsal_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("r_hip_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("r_knee_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("r_ankle_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("r_midtarsal_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("vl5_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("skullbase_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("l_shoulder_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("l_elbow_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("l_wrist_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("r_shoulder_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("r_elbow_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY))
            .addField(new field().setType(field.TYPE_SFROTATION).setName("r_wrist_rotation_changed").setAccessType(field.ACCESSTYPE_OUTPUTONLY)))
          .setProtoBody(new ProtoBody()
            .addChild(new Group()
              .addChild(new TimeSensor().setDEF("TIMER")
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("cycleInterval").setProtoField("cycleInterval"))
                  .addConnect(new connect().setNodeField("enabled").setProtoField("enabled"))
                  .addConnect(new connect().setNodeField("loop").setProtoField("loop"))
                  .addConnect(new connect().setNodeField("startTime").setProtoField("startTime"))
                  .addConnect(new connect().setNodeField("stopTime").setProtoField("stopTime"))
                  .addConnect(new connect().setNodeField("fraction_changed").setProtoField("fraction_changed"))
                  .addConnect(new connect().setNodeField("isActive").setProtoField("isActive"))))
              .addChild(new PositionInterpolator().setDEF("HUMANOIDROOT_POSITION_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2182,0.2909,0.3091,0.7091,0.8,0.8182,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([0,-0.0351,0,0,-0.0351,0,0,-0.04087,0,0,-0.04886,0,0,-0.04051,0,0,-0.03666,0,0,-0.03666,0,0,-0.0351,0]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("HumanoidRoot_translation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("HUMANOIDROOT_ANIMATOR").setKey(Java.to(doubleToFloat([0,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([0,1,0,0,0,1,0,0]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("HumanoidRoot_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("SACROILIAC_ANIMATOR").setKey(Java.to(doubleToFloat([0,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([0.9969,-0.05444,0.05596,0.07687,0.9969,-0.05444,0.05596,0.07687]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("lower_body_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("L_HIP_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2182,0.4909,0.7455,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([-0.9986,0.03354,0.04001,1.212,-0.9889,0.1328,0.06696,0.4025,0.9894,0.1453,0.009351,0.4114,-0.9963,0.07032,0.05003,0.7035,-0.9986,0.03354,0.04001,1.212]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("l_hip_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("L_KNEE_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2182,0.4909,0.7455,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([1,0,0,1.108,1,0,0,0.4265,1,0,0,0.7052,1,0,0,2.179,1,0,0,1.108]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("l_knee_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("L_ANKLE_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2182,0.3091,0.4909,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([1,0,0,0.03543,-1,0,0,0.1037,-1,0,0,0.4328,1,0,0,0.1929,1,0,0,0.03543]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("l_ankle_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("L_MIDTARSAL_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.5,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([1,0,0,0,1,0,0,-0.2,1,0,0,0]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("l_midtarsal_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("R_HIP_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2182,0.4909,0.7455,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([0.9999,0.00293,-0.00989,0.402,-1,0.004977,-0.00497,0.5943,-1,0.003265,-0.001752,1.178,-0.9999,0.00815,-0.01093,0.3031,0.9999,0.00293,-0.00989,0.402]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("r_hip_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("R_KNEE_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.03636,0.2182,0.4909,0.7455,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([1,0,0,0.7004,1,0,0,1.011,1,0,0,1.892,1,0,0,1.188,1,0,0,0.3964,1,0,0,0.7004]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("r_knee_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("R_ANKLE_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.4909,0.7091,0.8,0.8182,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([1,0,0,0.2323,-1,0,0,0.07843,-1,0,0,0.09676,-1,0,0,0.3274,-1,0,0,0.3278,1,0,0,0.2323]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("r_ankle_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("R_MIDTARSAL_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.5,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([1,0,0,-0.2,1,0,0,0,1,0,0,-0.2]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("r_midtarsal_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("VL5_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2545,0.4909,0.7636,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([0.7651,0.6382,0.08586,0.2712,0.9999,0.002845,-0.01547,0.3756,0.7459,-0.6505,-0.1432,0.2416,0.9984,0.05536,-0.01154,0.3488,0.7651,0.6382,0.08586,0.2712]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("vl5_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("SKULLBASE_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.4909,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([0.6517,-0.7559,0.06211,0.2508,0.6467,0.7527,-0.1238,0.2344,0.6517,-0.7559,0.06211,0.2508]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("skullbase_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("L_SHOULDER_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2182,0.4909,0.7455,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([0.9907,-0.07264,0.115,1.135,0.9291,-0.1222,0.349,0.1695,-0.9892,0.1364,-0.05394,0.5112,0.9942,-0.0002052,0.1073,0.4975,0.9907,-0.07264,0.115,1.135]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("l_shoulder_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("L_ELBOW_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2182,0.4909,0.7455,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([0.9985,0.03887,0.03802,4.689,-0.965,-0.1889,-0.1821,1.415,0.9758,0.1563,0.1529,4.666,-0.9956,-0.0936,0.009826,1.126,0.9985,0.03887,0.03802,4.689]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("l_elbow_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("L_WRIST_ANIMATOR").setKey(Java.to(doubleToFloat([0,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([-0.0240995,-0.999682,0.00741506,0.120409,-0.0240995,-0.999682,0.00741506,0.120409]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("l_wrist_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("R_SHOULDER_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2182,0.4909,0.7455,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([-1,0,0,0.6979,0.9094,0.2062,-0.3613,0.4157,0.9637,0.1537,-0.2185,1.353,0.4864,0.08841,-0.8693,0.1716,-1,0,0,0.6979]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("r_shoulder_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("R_ELBOW_ANIMATOR").setKey(Java.to(doubleToFloat([0,0.2182,0.4909,0.7455,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([0.9353,-0.2978,-0.191,4.222,-0.9362,0.2924,-0.1952,1.05,0.9941,-0.09719,-0.04725,4.512,-0.9594,0.2653,0.09579,1.525,0.9353,-0.2978,-0.191,4.222]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("r_elbow_rotation_changed"))))
              .addChild(new OrientationInterpolator().setDEF("R_WRIST_ANIMATOR").setKey(Java.to(doubleToFloat([0,1]), Java.type("float[]"))).setKeyValue(Java.to(doubleToFloat([-0.917742,-0.237244,-0.318536,0.214273,-0.917742,-0.237244,-0.318536,0.214273]), Java.type("float[]")))
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("value_changed").setProtoField("r_wrist_rotation_changed")))))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("HUMANOIDROOT_POSITION_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("HUMANOIDROOT_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("SACROILIAC_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_HIP_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_KNEE_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_ANKLE_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_MIDTARSAL_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_HIP_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_KNEE_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_ANKLE_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_MIDTARSAL_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("VL5_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("SKULLBASE_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_SHOULDER_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_ELBOW_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_WRIST_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_SHOULDER_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_ELBOW_ANIMATOR"))
            .addChild(new ROUTE().setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_WRIST_ANIMATOR"))))
        .addComments(new CommentsBlock("======================================"))
        .addComments(new CommentsBlock("Point to example use in case someone inspects this file"))
        .addChild(new Anchor().setDescription("InterchangableActorsViaDynamicRouting").setParameter(Java.to(["target=_blank"], Java.type("java.lang.String[]"))).setUrl(Java.to(["InterchangableActorsViaDynamicRouting.x3d","https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Prototypes/InterchangableActorsViaDynamicRouting.x3d","InterchangableActorsViaDynamicRouting.wrl","https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Prototypes/InterchangableActorsViaDynamicRouting.wrl"], Java.type("java.lang.String[]")))
          .addChild(new Shape()
            .setGeometry(new Text().setString(Java.to(["LOA1_RunAnimation.x3d","defines a prototype","for animating a humanoid.","","Click this text to see","InterchangableActorsViaDynamicRouting example."], Java.type("java.lang.String[]")))
              .setFontStyle(new FontStyle().setJustify(Java.to(["MIDDLE","MIDDLE"], Java.type("java.lang.String[]"))).setSize(0.8)))
            .setAppearance(new Appearance()
              .setMaterial(new Material().setDiffuseColor(Java.to(doubleToFloat([1,1,0.2]), Java.type("float[]"))))))))      ;
    X3D0.toFileX3D("../data/LOA1_RunAnimation.new.graal.x3d");
    X3D0.toFileJSON("../data/LOA1_RunAnimation.new.graal.json");
