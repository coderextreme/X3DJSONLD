require "java"
require "../../../X3DJSAIL.4.0.full.jar"

ConfigurationProperties = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ConfigurationProperties")
CommentsBlock = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.CommentsBlock")
AcousticProperties = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.AcousticProperties")
Analyser = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.Analyser")
Anchor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Networking.Anchor")
Appearance = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.Appearance")
Arc2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry2D.Arc2D")
ArcClose2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry2D.ArcClose2D")
AudioClip = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.AudioClip")
AudioDestination = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.AudioDestination")
Background = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EnvironmentalEffects.Background")
BallJoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.BallJoint")
Billboard = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Navigation.Billboard")
BiquadFilter = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.BiquadFilter")
BlendedVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.BlendedVolumeStyle")
BooleanFilter = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EventUtilities.BooleanFilter")
BooleanSequencer = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EventUtilities.BooleanSequencer")
BooleanToggle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EventUtilities.BooleanToggle")
BooleanTrigger = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EventUtilities.BooleanTrigger")
BoundaryEnhancementVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.BoundaryEnhancementVolumeStyle")
BoundedPhysicsModel = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.BoundedPhysicsModel")
Box = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry3D.Box")
BufferAudioSource = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.BufferAudioSource")
CADAssembly = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.CADGeometry.CADAssembly")
CADFace = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.CADGeometry.CADFace")
CADLayer = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.CADGeometry.CADLayer")
CADPart = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.CADGeometry.CADPart")
CartoonVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.CartoonVolumeStyle")
ChannelMerger = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.ChannelMerger")
ChannelSelector = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.ChannelSelector")
ChannelSplitter = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.ChannelSplitter")
Circle2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry2D.Circle2D")
ClipPlane = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.ClipPlane")
CollidableOffset = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.CollidableOffset")
CollidableShape = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.CollidableShape")
Collision = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Navigation.Collision")
CollisionCollection = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.CollisionCollection")
CollisionSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSensor")
CollisionSpace = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.CollisionSpace")
Color = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.Color")
ColorChaser = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.ColorChaser")
ColorDamper = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.ColorDamper")
ColorInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.ColorInterpolator")
ColorRGBA = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.ColorRGBA")
ComposedCubeMapTexture = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.CubeMapTexturing.ComposedCubeMapTexture")
ComposedShader = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shaders.ComposedShader")
ComposedTexture3D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing3D.ComposedTexture3D")
ComposedVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.ComposedVolumeStyle")
Cone = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry3D.Cone")
ConeEmitter = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.ConeEmitter")
Contact = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.Contact")
Contour2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.Contour2D")
ContourPolyline2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.ContourPolyline2D")
Convolver = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.Convolver")
Coordinate = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.Coordinate")
CoordinateChaser = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.CoordinateChaser")
CoordinateDamper = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.CoordinateDamper")
CoordinateDouble = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.CoordinateDouble")
CoordinateInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator")
CoordinateInterpolator2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.CoordinateInterpolator2D")
Cylinder = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry3D.Cylinder")
CylinderSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.PointingDeviceSensor.CylinderSensor")
Delay = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.Delay")
DirectionalLight = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Lighting.DirectionalLight")
DISEntityManager = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.DIS.DISEntityManager")
DISEntityTypeMapping = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.DIS.DISEntityTypeMapping")
Disk2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry2D.Disk2D")
DoubleAxisHingeJoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.DoubleAxisHingeJoint")
DynamicsCompressor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.DynamicsCompressor")
EaseInEaseOut = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.EaseInEaseOut")
EdgeEnhancementVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.EdgeEnhancementVolumeStyle")
ElevationGrid = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry3D.ElevationGrid")
EspduTransform = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.DIS.EspduTransform")
ExplosionEmitter = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.ExplosionEmitter")
Extrusion = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry3D.Extrusion")
FillProperties = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.FillProperties")
FloatVertexAttribute = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shaders.FloatVertexAttribute")
Fog = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EnvironmentalEffects.Fog")
FogCoordinate = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EnvironmentalEffects.FogCoordinate")
FontStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Text.FontStyle")
ForcePhysicsModel = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.ForcePhysicsModel")
Gain = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.Gain")
GeneratedCubeMapTexture = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.CubeMapTexturing.GeneratedCubeMapTexture")
GeoCoordinate = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoCoordinate")
GeoElevationGrid = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoElevationGrid")
GeoLocation = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoLocation")
GeoLOD = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoLOD")
GeoMetadata = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoMetadata")
GeoOrigin = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoOrigin")
GeoPositionInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoPositionInterpolator")
GeoProximitySensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoProximitySensor")
GeoTouchSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoTouchSensor")
GeoTransform = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoTransform")
GeoViewpoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geospatial.GeoViewpoint")
Group = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Grouping.Group")
HAnimDisplacer = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.HAnim.HAnimDisplacer")
HAnimHumanoid = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.HAnim.HAnimHumanoid")
HAnimJoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.HAnim.HAnimJoint")
HAnimMotion = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.HAnim.HAnimMotion")
HAnimSegment = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.HAnim.HAnimSegment")
HAnimSite = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.HAnim.HAnimSite")
ImageCubeMapTexture = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.CubeMapTexturing.ImageCubeMapTexture")
ImageTexture = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.ImageTexture")
ImageTexture3D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing3D.ImageTexture3D")
IndexedFaceSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry3D.IndexedFaceSet")
IndexedLineSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.IndexedLineSet")
IndexedQuadSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.CADGeometry.IndexedQuadSet")
IndexedTriangleFanSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.IndexedTriangleFanSet")
IndexedTriangleSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.IndexedTriangleSet")
IndexedTriangleStripSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.IndexedTriangleStripSet")
Inline = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Networking.Inline")
IntegerSequencer = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EventUtilities.IntegerSequencer")
IntegerTrigger = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EventUtilities.IntegerTrigger")
IsoSurfaceVolumeData = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.IsoSurfaceVolumeData")
KeySensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.KeyDeviceSensor.KeySensor")
Layer = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Layering.Layer")
LayerSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Layering.LayerSet")
Layout = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Layout.Layout")
LayoutGroup = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Layout.LayoutGroup")
LayoutLayer = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Layout.LayoutLayer")
LinePickSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Picking.LinePickSensor")
LineProperties = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.LineProperties")
LineSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.LineSet")
ListenerPointSource = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.ListenerPointSource")
LoadSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Networking.LoadSensor")
LocalFog = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EnvironmentalEffects.LocalFog")
LOD = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Navigation.LOD")
Material = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.Material")
Matrix3VertexAttribute = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shaders.Matrix3VertexAttribute")
Matrix4VertexAttribute = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shaders.Matrix4VertexAttribute")
MetadataBoolean = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.MetadataBoolean")
MetadataDouble = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.MetadataDouble")
MetadataFloat = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.MetadataFloat")
MetadataInteger = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.MetadataInteger")
MetadataSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.MetadataSet")
MetadataString = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.MetadataString")
MicrophoneSource = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.MicrophoneSource")
MotorJoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.MotorJoint")
MovieTexture = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.MovieTexture")
MultiTexture = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.MultiTexture")
MultiTextureCoordinate = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.MultiTextureCoordinate")
MultiTextureTransform = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.MultiTextureTransform")
NavigationInfo = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Navigation.NavigationInfo")
Normal = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.Normal")
NormalInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.NormalInterpolator")
NurbsCurve = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsCurve")
NurbsCurve2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsCurve2D")
NurbsOrientationInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsOrientationInterpolator")
NurbsPatchSurface = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsPatchSurface")
NurbsPositionInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsPositionInterpolator")
NurbsSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsSet")
NurbsSurfaceInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsSurfaceInterpolator")
NurbsSweptSurface = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsSweptSurface")
NurbsSwungSurface = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsSwungSurface")
NurbsTextureCoordinate = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsTextureCoordinate")
NurbsTrimmedSurface = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.NURBS.NurbsTrimmedSurface")
OpacityMapVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.OpacityMapVolumeStyle")
OrientationChaser = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.OrientationChaser")
OrientationDamper = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.OrientationDamper")
OrientationInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.OrientationInterpolator")
OrthoViewpoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Navigation.OrthoViewpoint")
OscillatorSource = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.OscillatorSource")
PackagedShader = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shaders.PackagedShader")
ParticleSystem = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.ParticleSystem")
PeriodicWave = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.PeriodicWave")
PhysicalMaterial = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.PhysicalMaterial")
PickableGroup = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Picking.PickableGroup")
PixelTexture = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.PixelTexture")
PixelTexture3D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing3D.PixelTexture3D")
PlaneSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.PointingDeviceSensor.PlaneSensor")
PointEmitter = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.PointEmitter")
PointLight = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Lighting.PointLight")
PointPickSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Picking.PointPickSensor")
PointProperties = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.PointProperties")
PointSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.PointSet")
Polyline2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry2D.Polyline2D")
PolylineEmitter = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.PolylineEmitter")
Polypoint2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry2D.Polypoint2D")
PositionChaser = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.PositionChaser")
PositionChaser2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.PositionChaser2D")
PositionDamper = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.PositionDamper")
PositionDamper2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.PositionDamper2D")
PositionInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.PositionInterpolator")
PositionInterpolator2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.PositionInterpolator2D")
PrimitivePickSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Picking.PrimitivePickSensor")
ProgramShader = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shaders.ProgramShader")
ProjectionVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.ProjectionVolumeStyle")
ProtoInstance = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.ProtoInstance")
ProximitySensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EnvironmentalSensor.ProximitySensor")
QuadSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.CADGeometry.QuadSet")
ReceiverPdu = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.DIS.ReceiverPdu")
Rectangle2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry2D.Rectangle2D")
RigidBody = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.RigidBody")
RigidBodyCollection = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.RigidBodyCollection")
ScalarChaser = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.ScalarChaser")
ScalarDamper = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.ScalarDamper")
ScalarInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.ScalarInterpolator")
ScreenFontStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Layout.ScreenFontStyle")
ScreenGroup = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Layout.ScreenGroup")
Script = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Scripting.Script")
SegmentedVolumeData = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.SegmentedVolumeData")
ShadedVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.ShadedVolumeStyle")
ShaderPart = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shaders.ShaderPart")
ShaderProgram = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shaders.ShaderProgram")
Shape = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.Shape")
SignalPdu = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.DIS.SignalPdu")
SilhouetteEnhancementVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.SilhouetteEnhancementVolumeStyle")
SingleAxisHingeJoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.SingleAxisHingeJoint")
SliderJoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.SliderJoint")
Sound = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.Sound")
SpatialSound = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.SpatialSound")
Sphere = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry3D.Sphere")
SphereSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.PointingDeviceSensor.SphereSensor")
SplinePositionInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator")
SplinePositionInterpolator2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.SplinePositionInterpolator2D")
SplineScalarInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.SplineScalarInterpolator")
SpotLight = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Lighting.SpotLight")
SquadOrientationInterpolator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Interpolation.SquadOrientationInterpolator")
StaticGroup = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Grouping.StaticGroup")
StreamAudioDestination = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.StreamAudioDestination")
StreamAudioSource = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.StreamAudioSource")
StringSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.KeyDeviceSensor.StringSensor")
SurfaceEmitter = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.SurfaceEmitter")
Switch = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Grouping.Switch")
TexCoordChaser2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.TexCoordChaser2D")
TexCoordDamper2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Followers.TexCoordDamper2D")
Text = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Text.Text")
TextureBackground = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EnvironmentalEffects.TextureBackground")
TextureCoordinate = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.TextureCoordinate")
TextureCoordinate3D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing3D.TextureCoordinate3D")
TextureCoordinate4D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing3D.TextureCoordinate4D")
TextureCoordinateGenerator = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.TextureCoordinateGenerator")
TextureProjector = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.TextureProjection.TextureProjector")
TextureProjectorParallel = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.TextureProjection.TextureProjectorParallel")
TextureProperties = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.TextureProperties")
TextureTransform = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing.TextureTransform")
TextureTransform3D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing3D.TextureTransform3D")
TextureTransformMatrix3D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Texturing3D.TextureTransformMatrix3D")
TimeSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Time.TimeSensor")
TimeTrigger = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EventUtilities.TimeTrigger")
ToneMappedVolumeStyle = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.ToneMappedVolumeStyle")
TouchSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.PointingDeviceSensor.TouchSensor")
Transform = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Grouping.Transform")
TransformSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EnvironmentalSensor.TransformSensor")
TransmitterPdu = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.DIS.TransmitterPdu")
TriangleFanSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.TriangleFanSet")
TriangleSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.TriangleSet")
TriangleSet2D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Geometry2D.TriangleSet2D")
TriangleStripSet = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Rendering.TriangleStripSet")
TwoSidedMaterial = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.TwoSidedMaterial")
UniversalJoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.RigidBodyPhysics.UniversalJoint")
UnlitMaterial = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Shape.UnlitMaterial")
Viewpoint = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Navigation.Viewpoint")
ViewpointGroup = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Navigation.ViewpointGroup")
Viewport = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Layering.Viewport")
VisibilitySensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.EnvironmentalSensor.VisibilitySensor")
VolumeData = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.VolumeRendering.VolumeData")
VolumeEmitter = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.VolumeEmitter")
VolumePickSensor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Picking.VolumePickSensor")
WaveShaper = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Sound.WaveShaper")
WindPhysicsModel = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.ParticleSystems.WindPhysicsModel")
WorldInfo = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.WorldInfo")
Component = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.component")
Connect = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.connect")
EXPORT = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Networking.EXPORT")
ExternProtoDeclare = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.ExternProtoDeclare")
Field = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.field")
FieldValue = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.fieldValue")
Head = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.head")
IMPORT = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Networking.IMPORT")
IS = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.IS")
Meta = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.meta")
ProtoBody = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.ProtoBody")
ProtoDeclare = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.ProtoDeclare")
ProtoInterface = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.ProtoInterface")
ROUTE = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.ROUTE")
Scene = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.Scene")
Unit = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.unit")
X3D = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.Core.X3D")
SFBool = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFBool")
MFBool = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFBool")
SFColor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFColor")
MFColor = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFColor")
SFColorRGBA = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFColorRGBA")
MFColorRGBA = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFColorRGBA")
SFDouble = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFDouble")
MFDouble = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFDouble")
SFFloat = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFFloat")
MFFloat = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFFloat")
SFImage = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFImage")
MFImage = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFImage")
SFInt32 = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFInt32")
MFInt32 = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFInt32")
SFMatrix3d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFMatrix3d")
MFMatrix3d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFMatrix3d")
SFMatrix3f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFMatrix3f")
MFMatrix3f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFMatrix3f")
SFMatrix4d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFMatrix4d")
MFMatrix4d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFMatrix4d")
SFMatrix4f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFMatrix4f")
MFMatrix4f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFMatrix4f")
SFString = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFString")
SFNode = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFNode")
MFNode = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFNode")
SFRotation = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFRotation")
MFRotation = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFRotation")
MFString = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFString")
SFTime = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFTime")
MFTime = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFTime")
SFVec2d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFVec2d")
MFVec2d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFVec2d")
SFVec2f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFVec2f")
MFVec2f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFVec2f")
SFVec3d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFVec3d")
MFVec3d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFVec3d")
SFVec3f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFVec3f")
MFVec3f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFVec3f")
SFVec4d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFVec4d")
MFVec4d = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFVec4d")
SFVec4f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.SFVec4f")
MFVec4f = JavaUtilities.get_proxy_class("org.web3d.x3d.jsail.fields.MFVec4f")
ConfigurationProperties.setDeleteIntermediateFiles(false);
ConfigurationProperties.setStripTrailingZeroes(true);
ConfigurationProperties.setStripDefaultAttributes(true);
ConfigurationProperties.setXsltEngine(Java::OrgWeb3dX3dJsail::ConfigurationProperties::XSLT_ENGINE_NATIVE_JAVA);
x3D0 = X3D.new
    .setProfile("Immersive")
    .setVersion("4.0")
    .setHead(Head.new()
        .addComponent(Component.new()
            .setName("Geospatial")
            .setLevel(1)
        )
        .addMeta(Meta.new()
            .setName("title")
            .setContent("CaliforniaCampuses.x3d")
        )
        .addMeta(Meta.new()
            .setName("description")
            .setContent("Viewpoints and tour of California campuses")
        )
        .addMeta(Meta.new()
            .setName("creator")
            .setContent("Don Brutzman, Dale Tourtelotte, Mike Bailey, Don McGregor")
        )
        .addMeta(Meta.new()
            .setName("created")
            .setContent("4 March 2010")
        )
        .addMeta(Meta.new()
            .setName("modified")
            .setContent("20 October 2019")
        )
        .addMeta(Meta.new()
            .setName("reference")
            .setContent("CaliforniaCampuses.kml")
        )
        .addMeta(Meta.new()
            .setName("reference")
            .setContent("https://www.web3d.org/x3d-earth")
        )
        .addMeta(Meta.new()
            .setName("reference")
            .setContent("http://x3d-earth.nps.edu")
        )
        .addMeta(Meta.new()
            .setName("reference")
            .setContent("http://hamming.uc.nps.edu")
        )
        .addMeta(Meta.new()
            .setName("subject")
            .setContent("X3D Earth")
        )
        .addMeta(Meta.new()
            .setName("identifier")
            .setContent("https://www.web3d.org/x3d/content/examples/Basic/Geospatial/CaliforniaCampuses.x3d")
        )
        .addMeta(Meta.new()
            .setName("reference")
            .setContent("http://mmog.ern.nps.edu/California/California.x3d")
        )
        .addMeta(Meta.new()
            .setName("warning")
            .setContent("under development")
        )
        .addMeta(Meta.new()
            .setName("warning")
            .setContent("mmog.ern.nps.edu restricted to internal access within NPS firewall only")
        )
        .addMeta(Meta.new()
            .setName("generator")
            .setContent("KmlToX3dViewpoints.xslt")
        )
        .addMeta(Meta.new()
            .setName("generator")
            .setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit")
        )
        .addMeta(Meta.new()
            .setName("license")
            .setContent("https://savage.nps.edu/Savage/license.html")
        )
    )
    .setScene(Scene.new()
        .addChild(WorldInfo.new()
            .setTitle("CaliforniaCampuses.x3d")
        )
        .addChild(Switch.new()
            .setDEF("SwitchGlobes")
            .setWhichChoice(0)
          .addComments(CommentsBlock.new("Select globe of interest. Warning: may need to keep alternate globes commented out to prevent browser caching."))
            .addChild(Inline.new()
                .setUrl(["http://x3d-earth.nps.edu/osmdemo.x3d"].to_java Java::java.lang.String)
            )
          .addComments(CommentsBlock.new("<Inline load='false' url='\"http://mmog.ern.nps.edu/California/California.x3d\"'/>"))
          .addComments(CommentsBlock.new("<Inline load='false' url='\"http://x3d-earth.nps.edu/7_levels_plus/tiles/0/globe.x3d\"'/>"))
          .addComments(CommentsBlock.new("<Inline load='false' url='\"http://x3d-earth.nps.edu/globe/MBARI1MinuteBathy/world.x3d\"'/>"))
          .addComments(CommentsBlock.new("<Inline load='false' url='\"http://x3d-earth.nps.edu/globe/SRTM30Plus/world.x3d\"'/>"))
        )
        .addChild(NavigationInfo.new()
            .setTransitionType(["ANIMATE"].to_java Java::java.lang.String)
        )
        .addChild(Group.new()
            .setDEF("PlacemarkGroup")
            .addChild(GeoViewpoint.new()
                .setDEF("View01")
                .setDescription("Naval Postgraduate School")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([36.595599, -121.877148, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View02")
                .setDescription("University of California Davis")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([38.53650615157984, -121.7489628616831, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View03")
                .setDescription("University of California Berkeley")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([37.86963434512325, -122.2593873127355, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View04")
                .setDescription("University of California San Francisco")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([37.76340647188392, -122.4582475377715, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View05")
                .setDescription("University of California Santa Cruz")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([36.99628443046043, -122.0534325473795, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View06")
                .setDescription("University of California Merced")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([37.365508575977, -120.4252597059142, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View07")
                .setDescription("University of California Santa Barbara")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([34.41124450961521, -119.8479940053906, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View08")
                .setDescription("University of California Los Angeles")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([34.07224474392262, -118.4408472225642, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View09")
                .setDescription("University of California Irvine")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([33.64623283675919, -117.8427064139082, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View10")
                .setDescription("University of California Riverside")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([33.97350567066717, -117.3281649569839, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View11")
                .setDescription("University of California San Diego")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([32.87612136607509, -117.2367298240259, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View12")
                .setDescription("Humboldt State University")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([40.87630235623448, -124.0785789217266, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View13")
                .setDescription("California State University, Chico")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([39.73031527724385, -121.8453722745223, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View14")
                .setDescription("California State University Sacramento")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([38.5626517618963, -121.4244636520556, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View15")
                .setDescription("Sonoma State University")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([38.33922929793606, -122.6744333530031, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View16")
                .setDescription("California Maritime Academy")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([38.06907065059484, -122.2309147135222, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View17")
                .setDescription("San Francisco State University")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([37.722876, -122.4781512190666, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View18")
                .setDescription("California State University, East Bay")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([37.65707914139907, -122.0569190659761, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View19")
                .setDescription("California State University Stanislaus")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([37.52552478005697, -120.8563508560606, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View20")
                .setDescription("San Jose State University")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([37.33580940527095, -121.8815343755784, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View21")
                .setDescription("California State University, Monterey Bay")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([36.6538071781493, -121.7984465276711, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View22")
                .setDescription("Fresno State University")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([36.812166, -119.7451552005852, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View23")
                .setDescription("California State University, Bakersfield")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([35.350804, -119.1043226128032, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View24")
                .setDescription("California Polytechnic State University")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([35.30115692599171, -120.6595761796351, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View25")
                .setDescription("California State University, Channel Islands")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([34.1624126428852, -119.0425264841287, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View26")
                .setDescription("California State University, Northridge")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([34.23959265263849, -118.5284272400904, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View27")
                .setDescription("California State University, Los Angeles")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([34.06645996626264, -118.1682050902557, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View28")
                .setDescription("California State Polytechnic University, Pomona")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([34.05727150000314, -117.8215320234812, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View29")
                .setDescription("California State University, San Bernardino")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([34.18180116432101, -117.3243676664719, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View30")
                .setDescription("California State University, Fullerton")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([33.882522, -117.8868367869023, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View31")
                .setDescription("California State University Dominguez Hills")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([33.86463396857103, -118.2553596272055, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View32")
                .setDescription("California State University, Long Beach")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([33.78196696470824, -118.112678253688, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View33")
                .setDescription("California State University, San Marcos")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([33.12837619265174, -117.1600194071002, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View34")
                .setDescription("San Diego State University")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([32.77593126586385, -117.0722876242553, 250000].to_java Java::double)
            )
            .addChild(GeoViewpoint.new()
                .setDEF("View35")
                .setDescription("CENIC")
                .setOrientation([1, 0, 0, -1.57].to_java Java::float)
                .setPosition([33.879947, -118.027903, 250000].to_java Java::double)
            )
        )
        .addComments(CommentsBlock.new("===================="))
        .addChild(ExternProtoDeclare.new()
            .setName("CrossHair")
            .setAppinfo("CrossHair prototype provides a heads-up display (HUD) crosshair at the view center, which is useful for assessing NavigationInfo lookAt point")
            .setUrl(["../../Savage/Tools/HeadsUpDisplays/CrossHairPrototype.x3d#CrossHair", "https://savage.nps.edu/Savage/Tools/HeadsUpDisplays/CrossHairPrototype.x3d#CrossHair", "../../Savage/Tools/HeadsUpDisplays/CrossHairPrototype.wrl#CrossHair", "https://savage.nps.edu/Savage/Tools/HeadsUpDisplays/CrossHairPrototype.wrl#CrossHair"].to_java Java::java.lang.String)
            .addField(Field.new()
                .setName("enabled")
                .setAccessType("initializeOnly")
                .setAppinfo("whether CrossHair prototype is enabled or not")
                .setType("SFBool")
            )
            .addField(Field.new()
                .setName("set_enabled")
                .setAccessType("inputOnly")
                .setAppinfo("control whether enabled/disabled")
                .setType("SFBool")
            )
            .addField(Field.new()
                .setName("markerColor")
                .setAccessType("inputOutput")
                .setAppinfo("color of CrossHair marker")
                .setType("SFColor")
            )
            .addField(Field.new()
                .setName("scale")
                .setAccessType("inputOutput")
                .setAppinfo("size of CrossHair in meters")
                .setType("SFVec3f")
            )
            .addField(Field.new()
                .setName("positionOffsetFromCamera")
                .setAccessType("inputOutput")
                .setAppinfo("distance in front of HUD viewpoint")
                .setType("SFVec3f")
            )
        )
        .addChild(ProtoInstance.new()
            .setName("CrossHair")
            .setDEF("CrossHairInstance")
            .addFieldValue(FieldValue.new()
                .setName("enabled")
                .setValue("true")
            )
            .addFieldValue(FieldValue.new()
                .setName("markerColor")
                .setValue("0.1 0.8 0.1")
            )
            .addFieldValue(FieldValue.new()
                .setName("scale")
                .setValue("0.5 0.5 0.5")
            )
            .addFieldValue(FieldValue.new()
                .setName("positionOffsetFromCamera")
                .setValue("0 0 -5")
            )
        )
        .addComments(CommentsBlock.new("===================="))
        .addChild(ExternProtoDeclare.new()
            .setName("HeadsUpDisplay")
            .setAppinfo("Heads-up display (HUD) keeps child geometry aligned on screen in a consistent location")
            .setUrl(["../../../X3dForWebAuthors/Chapter14Prototypes/HeadsUpDisplayPrototype.x3d#HeadsUpDisplay", "https://www.web3d.org/x3d/content/examples/X3dForWebAuthors/Chapter14Prototypes/HeadsUpDisplayPrototype.x3d#HeadsUpDisplay", "../../../X3dForWebAuthors/Chapter14Prototypes/HeadsUpDisplayPrototype.wrl#HeadsUpDisplay", "https://www.web3d.org/x3d/content/examples/X3dForWebAuthors/Chapter14Prototypes/HeadsUpDisplayPrototype.wrl#HeadsUpDisplay"].to_java Java::java.lang.String)
            .addField(Field.new()
                .setName("children")
                .setAccessType("inputOutput")
                .setAppinfo("X3D content positioned at HUD offset")
                .setType("MFNode")
            )
            .addField(Field.new()
                .setName("screenOffset")
                .setAccessType("inputOutput")
                .setAppinfo("offset position for HUD relative to current view location, default 0 0 -5")
                .setType("SFVec3f")
            )
            .addField(Field.new()
                .setName("position_changed")
                .setAccessType("outputOnly")
                .setAppinfo("HUD position update (in world coordinates) relative to original location")
                .setType("SFVec3f")
            )
            .addField(Field.new()
                .setName("orientation_changed")
                .setAccessType("outputOnly")
                .setAppinfo("HUD orientation update relative to original location")
                .setType("SFRotation")
            )
        )
        .addComments(CommentsBlock.new("===================="))
        .addChild(ExternProtoDeclare.new()
            .setName("ViewpointSequencer")
            .setAppinfo("Sequentially binds each Viewpoint in a set of Viewpoint USE nodes, creating an automatic tour for a scene")
            .setUrl(["../../Savage/Tools/Animation/ViewpointSequencerPrototype.x3d#ViewpointSequencer", "https://savage.nps.edu/Savage/Tools/Animation/ViewpointSequencerPrototype.x3d#ViewpointSequencer", "../../Savage/Tools/Animation/ViewpointSequencerPrototype.wrl#ViewpointSequencer", "https://savage.nps.edu/Savage/Tools/Animation/ViewpointSequencerPrototype.wrl#ViewpointSequencer"].to_java Java::java.lang.String)
            .addField(Field.new()
                .setName("viewpoints")
                .setAccessType("initializeOnly")
                .setAppinfo("Viewpoint USE nodes that are sequentially bound")
                .setType("MFNode")
            )
            .addField(Field.new()
                .setName("interval")
                .setAccessType("inputOutput")
                .setAppinfo("number of seconds between viewpoint shifts")
                .setType("SFTime")
            )
            .addField(Field.new()
                .setName("enabled")
                .setAccessType("inputOutput")
                .setAppinfo("whether ViewpointSequencer is enabled or not")
                .setType("SFBool")
            )
            .addField(Field.new()
                .setName("set_enabled")
                .setAccessType("inputOnly")
                .setAppinfo("whether ViewpointSequencer is enabled or not")
                .setType("SFBool")
            )
            .addField(Field.new()
                .setName("previous")
                .setAccessType("inputOnly")
                .setAppinfo("bind previous Viewpoint in list")
                .setType("SFBool")
            )
            .addField(Field.new()
                .setName("next")
                .setAccessType("inputOnly")
                .setAppinfo("bind next Viewpoint in list")
                .setType("SFBool")
            )
            .addField(Field.new()
                .setName("toggleMessage")
                .setAccessType("inputOutput")
                .setAppinfo("Select message to toggle ViewpointSequencer")
                .setType("MFString")
            )
            .addField(Field.new()
                .setName("toggleMessageFontSize")
                .setAccessType("initializeOnly")
                .setAppinfo("Color for toggleMessage text")
                .setType("SFFloat")
            )
            .addField(Field.new()
                .setName("toggleMessageColor")
                .setAccessType("inputOutput")
                .setAppinfo("Color for toggleMessage text")
                .setType("SFColor")
            )
            .addField(Field.new()
                .setName("traceEnabled")
                .setAccessType("inputOutput")
                .setAppinfo("enable console output")
                .setType("SFBool")
            )
        )
        .addChild(ProtoInstance.new()
            .setName("ViewpointSequencer")
            .setDEF("ViewpointTour")
            .addFieldValue(FieldValue.new()
                .setName("interval")
                .setValue("30")
            )
            .addFieldValue(FieldValue.new()
                .setName("enabled")
                .setValue("true")
            )
            .addFieldValue(FieldValue.new()
                .setName("toggleMessage")
                .setValue("\"ViewpointSequencer tour\"")
            )
            .addFieldValue(FieldValue.new()
                .setName("viewpoints")
                .addChild(GeoViewpoint.new()
                    .setUSE("View01")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View02")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View03")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View04")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View05")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View06")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View07")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View08")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View09")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View10")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View11")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View12")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View13")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View14")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View15")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View16")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View17")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View18")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View19")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View20")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View21")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View22")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View23")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View24")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View25")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View26")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View27")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View28")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View29")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View30")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View31")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View32")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View33")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View34")
                )
                .addChild(GeoViewpoint.new()
                    .setUSE("View35")
                )
                .addChild(Viewpoint.new()
                    .setDEF("View4")
                    .setDescription("View four (-X axis)")
                    .setOrientation([0, 1, 0, -1.57].to_java Java::float)
                    .setPosition([-10, 0, 0].to_java Java::float)
                )
            )
          .addComments(CommentsBlock.new("initially enabled is off, scene provides selectable text to activate"))
        )
        .addComments(CommentsBlock.new("===================="))
        .addChild(GeoLocation.new()
            .setGeoCoords([36.595599, -121.877148, 624990].to_java Java::double)
            .addChild(Billboard.new()
                .setAxisOfRotation([0, 0, 0].to_java Java::float)
                .addChild(Shape.new()
                    .setGeometry(Text.new()
                        .setString(["ViewpointSequencer tour"].to_java Java::java.lang.String)
                        .setFontStyle(FontStyle.new()
                            .setJustify(["MIDDLE", "MIDDLE"].to_java Java::java.lang.String)
                        )
                    )
                    .setAppearance(Appearance.new()
                        .setMaterial(Material.new()
                            .setAmbientIntensity(0.25)
                            .setDiffuseColor([0.795918, 0.505869, 0.093315].to_java Java::float)
                            .setShininess(0.39)
                            .setSpecularColor([0.923469, 0.428866, 0.006369].to_java Java::float)
                        )
                    )
                )
            )
            .addChild(TouchSensor.new()
                .setDEF("TourTouch")
                .setDescription("Touch text to turn tour on/off")
            )
            .addChild(BooleanToggle.new()
                .setDEF("TourToggle")
            )
            .addChild(ROUTE.new()
                .setFromField("isActive")
                .setFromNode("TourTouch")
                .setToField("set_boolean")
                .setToNode("TourToggle")
            )
            .addChild(ROUTE.new()
                .setFromField("toggle")
                .setFromNode("TourToggle")
                .setToField("set_enabled")
                .setToNode("ViewpointTour")
            )
        )
        .addComments(CommentsBlock.new("===================="))
        .addChild(ExternProtoDeclare.new()
            .setName("ViewPositionOrientation")
            .setAppinfo("ViewPositionOrientation provides provides console output of local position and orientation as user navigates")
            .setUrl(["../../Savage/Tools/Authoring/ViewPositionOrientationPrototype.x3d#ViewPositionOrientation", "https://savage.nps.edu/Savage/Tools/Authoring/ViewPositionOrientationPrototype.x3d#ViewPositionOrientation", "../../Savage/Tools/Authoring/ViewPositionOrientationPrototype.wrl#ViewPositionOrientation", "https://savage.nps.edu/Savage/Tools/Authoring/ViewPositionOrientationPrototype.wrl#ViewPositionOrientation"].to_java Java::java.lang.String)
            .addField(Field.new()
                .setName("enabled")
                .setAccessType("inputOutput")
                .setAppinfo("Whether or not ViewPositionOrientation sends output to console")
                .setType("SFBool")
            )
            .addField(Field.new()
                .setName("traceEnabled")
                .setAccessType("initializeOnly")
                .setAppinfo("Output internal trace messages for debugging this node, intended for developer use only")
                .setType("SFBool")
            )
            .addField(Field.new()
                .setName("set_traceEnabled")
                .setAccessType("inputOnly")
                .setAppinfo("Ability to turn output tracing on/off at runtime")
                .setType("SFBool")
            )
            .addField(Field.new()
                .setName("position_changed")
                .setAccessType("outputOnly")
                .setAppinfo("Output local position")
                .setType("SFVec3f")
            )
            .addField(Field.new()
                .setName("orientation_changed")
                .setAccessType("outputOnly")
                .setAppinfo("Output local orientation")
                .setType("SFRotation")
            )
            .addField(Field.new()
                .setName("outputViewpointString")
                .setAccessType("outputOnly")
                .setAppinfo("MFString value of new Viewpoint")
                .setType("MFString")
            )
        )
        .addChild(ProtoInstance.new()
            .setName("ViewPositionOrientation")
            .setDEF("ExampleViewPositionOrientation")
            .addFieldValue(FieldValue.new()
                .setName("enabled")
                .setValue("false")
            )
        )
        .addComments(CommentsBlock.new("===================="))
    )
x3D0.toFileX3D "../data/CaliforniaCampuses.new.jruby.x3d"
x3D0.toFileJSON "../data/CaliforniaCampuses.new.jruby.json"
