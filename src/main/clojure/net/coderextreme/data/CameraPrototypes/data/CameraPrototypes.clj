(ns x3dclsail.CameraPrototypes
  (:import 	(org.web3d.x3d.jsail.Shape AcousticProperties Appearance FillProperties LineProperties Material PhysicalMaterial PointProperties Shape TwoSidedMaterial UnlitMaterial)
	(org.web3d.x3d.jsail.Sound Analyser AudioClip AudioDestination BiquadFilter BufferAudioSource ChannelMerger ChannelSelector ChannelSplitter Convolver Delay DynamicsCompressor Gain ListenerPointSource MicrophoneSource OscillatorSource PeriodicWave Sound SpatialSound StreamAudioDestination StreamAudioSource WaveShaper)
	(org.web3d.x3d.jsail.Networking Anchor Inline LoadSensor)
	(org.web3d.x3d.jsail.Geometry2D Arc2D ArcClose2D Circle2D Disk2D Polyline2D Polypoint2D Rectangle2D TriangleSet2D)
	(org.web3d.x3d.jsail.EnvironmentalEffects Background Fog FogCoordinate LocalFog TextureBackground)
	(org.web3d.x3d.jsail.RigidBodyPhysics BallJoint CollidableOffset CollidableShape CollisionCollection CollisionSensor CollisionSpace Contact DoubleAxisHingeJoint MotorJoint RigidBody RigidBodyCollection SingleAxisHingeJoint SliderJoint UniversalJoint)
	(org.web3d.x3d.jsail.Navigation Billboard Collision LOD NavigationInfo OrthoViewpoint Viewpoint ViewpointGroup)
	(org.web3d.x3d.jsail.VolumeRendering BlendedVolumeStyle BoundaryEnhancementVolumeStyle CartoonVolumeStyle ComposedVolumeStyle EdgeEnhancementVolumeStyle IsoSurfaceVolumeData OpacityMapVolumeStyle ProjectionVolumeStyle SegmentedVolumeData ShadedVolumeStyle SilhouetteEnhancementVolumeStyle ToneMappedVolumeStyle VolumeData)
	(org.web3d.x3d.jsail.EventUtilities BooleanFilter BooleanSequencer BooleanToggle BooleanTrigger IntegerSequencer IntegerTrigger TimeTrigger)
	(org.web3d.x3d.jsail.ParticleSystems BoundedPhysicsModel ConeEmitter ExplosionEmitter ForcePhysicsModel ParticleSystem PointEmitter PolylineEmitter SurfaceEmitter VolumeEmitter WindPhysicsModel)
	(org.web3d.x3d.jsail.Geometry3D Box Cone Cylinder ElevationGrid Extrusion IndexedFaceSet Sphere)
	(org.web3d.x3d.jsail.CADGeometry CADAssembly CADFace CADLayer CADPart IndexedQuadSet QuadSet)
	(org.web3d.x3d.jsail.Rendering ClipPlane Color ColorRGBA Coordinate CoordinateDouble IndexedLineSet IndexedTriangleFanSet IndexedTriangleSet IndexedTriangleStripSet LineSet Normal PointSet TriangleFanSet TriangleSet TriangleStripSet)
	(org.web3d.x3d.jsail.Followers ColorChaser ColorDamper CoordinateChaser CoordinateDamper OrientationChaser OrientationDamper PositionChaser PositionChaser2D PositionDamper PositionDamper2D ScalarChaser ScalarDamper TexCoordChaser2D TexCoordDamper2D)
	(org.web3d.x3d.jsail.Interpolation ColorInterpolator CoordinateInterpolator CoordinateInterpolator2D EaseInEaseOut NormalInterpolator OrientationInterpolator PositionInterpolator PositionInterpolator2D ScalarInterpolator SplinePositionInterpolator SplinePositionInterpolator2D SplineScalarInterpolator SquadOrientationInterpolator)
	(org.web3d.x3d.jsail.CubeMapTexturing ComposedCubeMapTexture GeneratedCubeMapTexture ImageCubeMapTexture)
	(org.web3d.x3d.jsail.Shaders ComposedShader FloatVertexAttribute Matrix3VertexAttribute Matrix4VertexAttribute PackagedShader ProgramShader ShaderPart ShaderProgram)
	(org.web3d.x3d.jsail.Texturing3D ComposedTexture3D ImageTexture3D PixelTexture3D TextureCoordinate3D TextureCoordinate4D TextureTransform3D TextureTransformMatrix3D)
	(org.web3d.x3d.jsail.NURBS Contour2D ContourPolyline2D NurbsCurve NurbsCurve2D NurbsOrientationInterpolator NurbsPatchSurface NurbsPositionInterpolator NurbsSet NurbsSurfaceInterpolator NurbsSweptSurface NurbsSwungSurface NurbsTextureCoordinate NurbsTrimmedSurface)
	(org.web3d.x3d.jsail.PointingDeviceSensor CylinderSensor PlaneSensor SphereSensor TouchSensor)
	(org.web3d.x3d.jsail.Lighting DirectionalLight PointLight SpotLight)
	(org.web3d.x3d.jsail.DIS DISEntityManager DISEntityTypeMapping EspduTransform ReceiverPdu SignalPdu TransmitterPdu)
	(org.web3d.x3d.jsail.Text FontStyle Text)
	(org.web3d.x3d.jsail.Geospatial GeoCoordinate GeoElevationGrid GeoLocation GeoLOD GeoMetadata GeoOrigin GeoPositionInterpolator GeoProximitySensor GeoTouchSensor GeoTransform GeoViewpoint)
	(org.web3d.x3d.jsail.Grouping Group StaticGroup Switch Transform)
	(org.web3d.x3d.jsail.HAnim HAnimDisplacer HAnimHumanoid HAnimJoint HAnimMotion HAnimSegment HAnimSite)
	(org.web3d.x3d.jsail.Texturing ImageTexture MovieTexture MultiTexture MultiTextureCoordinate MultiTextureTransform PixelTexture TextureCoordinate TextureCoordinateGenerator TextureProperties TextureTransform)
	(org.web3d.x3d.jsail.KeyDeviceSensor KeySensor StringSensor)
	(org.web3d.x3d.jsail.Layering Layer LayerSet Viewport)
	(org.web3d.x3d.jsail.Layout Layout LayoutGroup LayoutLayer ScreenFontStyle ScreenGroup)
	(org.web3d.x3d.jsail.Picking LinePickSensor PickableGroup PointPickSensor PrimitivePickSensor VolumePickSensor)
	(org.web3d.x3d.jsail.Core MetadataBoolean MetadataDouble MetadataFloat MetadataInteger MetadataSet MetadataString ProtoInstance WorldInfo component connect ExternProtoDeclare field fieldValue head IS ProtoBody ProtoDeclare ProtoInterface ROUTE Scene unit X3D CommentsBlock)
	(org.web3d.x3d.jsail.EnvironmentalSensor ProximitySensor TransformSensor VisibilitySensor)
	(org.web3d.x3d.jsail.Scripting Script)
	(org.web3d.x3d.jsail.TextureProjection TextureProjector TextureProjectorParallel)
	(org.web3d.x3d.jsail.Time TimeSensor)
	(org.web3d.x3d.jsail.fields SFBool MFBool SFColor MFColor SFColorRGBA MFColorRGBA SFDouble MFDouble SFFloat MFFloat SFImage MFImage SFInt32 MFInt32 SFMatrix3d MFMatrix3d SFMatrix3f MFMatrix3f SFMatrix4d MFMatrix4d SFMatrix4f MFMatrix4f SFNode MFNode SFRotation MFRotation SFString MFString SFTime MFTime SFVec2d MFVec2d SFVec2f MFVec2f SFVec3d MFVec3d SFVec3f MFVec3f SFVec4d MFVec4d SFVec4f MFVec4f)
	(org.web3d.x3d.jsail ConfigurationProperties)
))(def EXPORT org.web3d.x3d.jsail.Networking.EXPORT)
(def IMPORT org.web3d.x3d.jsail.Networking.IMPORT)
(def X3D0 (doto (X3D.)
    (.setProfile "Immersive")
    (.setVersion "3.2")
    (.setHead (doto (head. )
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "title")
            (.setContent "CameraPrototypes.x3d")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "description")
            (.setContent "Camera, CameraShot and CameraMovement prototypes that demonstrate storyboard capabilities and precise camera operation. This is a developmental effort for potential X3D Specification improvement.")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "creator")
            (.setContent "Don Brutzman and Jeff Weekley")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "created")
            (.setContent "16 March 2009")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "modified")
            (.setContent "25 October 2016")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "TODO")
            (.setContent "Schematron rules, backed up by initialize() checks")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "reference")
            (.setContent "BeyondViewpointCameraNodesWeb3D2009.pdf")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "reference")
            (.setContent "https://www.web3d.org/x3d/specifications/ISO-IEC-FDIS-19775-1.2-X3D-AbstractSpecification/Part01/components/navigation.html")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "subject")
            (.setContent "Camera nodes for Viewpoint navigation control")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "reference")
            (.setContent "CameraExamples.x3d")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "identifier")
            (.setContent "https://www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "reference")
            (.setContent "http://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/content/examples/Basic/development/CameraPrototypes.x3d")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "generator")
            (.setContent "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit")
        ))
        (.addMeta (doto (org.web3d.x3d.jsail.Core.meta. )
            (.setName "license")
            (.setContent "../license.html")
        ))
    ))
    (.setScene (doto (Scene. )
;=============== Camera ==============
        (.addChildren (doto (ProtoDeclare. )
            (.setName "Camera")
            (.setAppinfo "Camera node provides direct control of scene view to enable cinematic camera animation shot by shot and move by move along with still digital-photography settings for offline rendering of camera images.")
            (.setProtoInterface (doto (ProtoInterface. )
;Viewpoint-related fields, NavigationInfo-related fields and Camera-unique fields
                (.addField (doto (field. )
                    (.setName "description")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Text description to be displayed for this Camera")
                    (.setType "SFString")
                ))
                (.addField (doto (field. )
                    (.setName "position")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Camera position in local transformation frame, which is default prior to first CameraShot initialPosition getting activated")
                    (.setType "SFVec3f")
                    (.setValue "0 0 10")
                ))
                (.addField (doto (field. )
                    (.setName "orientation")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Camera rotation in local transformation frame, which is default prior to first CameraShot initialPosition getting activated")
                    (.setType "SFRotation")
                    (.setValue "0 0 1 0")
                ))
                (.addField (doto (field. )
                    (.setName "fieldOfView")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "pi/4")
                    (.setType "SFFloat")
                    (.setValue "0.7854")
                ))
                (.addField (doto (field. )
                    (.setName "set_fraction")
                    (.setAccessType "inputOnly")
                    (.setAppinfo "input fraction drives interpolators")
                    (.setType "SFFloat")
                ))
                (.addField (doto (field. )
                    (.setName "set_bind")
                    (.setAccessType "inputOnly")
                    (.setAppinfo "input event binds or unbinds this Camera")
                    (.setType "SFBool")
                ))
                (.addField (doto (field. )
                    (.setName "bindTime")
                    (.setAccessType "outputOnly")
                    (.setAppinfo "output event indicates when this Camera is bound")
                    (.setType "SFTime")
                ))
                (.addField (doto (field. )
                    (.setName "isBound")
                    (.setAccessType "outputOnly")
                    (.setAppinfo "output event indicates whether this Camera is bound or unbound")
                    (.setType "SFBool")
                ))
                (.addField (doto (field. )
                    (.setName "nearClipPlane")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Vector distance to near clipping plane corresponds to NavigationInfo.avatarSize[0]")
                    (.setType "SFFloat")
                    (.setValue "0.25")
                ))
                (.addField (doto (field. )
                    (.setName "farClipPlane")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Vector distance to far clipping plane corresponds to NavigationInfo.visibilityLimit")
                    (.setType "SFFloat")
                    (.setValue "0")
                ))
                (.addField (doto (field. )
                    (.setName "shots")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Array of CameraShot nodes which in turn contain CameraMovement nodes")
                    (.setType "MFNode")
;initialization nodes (if any) go here
                ))
                (.addField (doto (field. )
                    (.setName "headlight")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Whether camera headlight is on or off")
                    (.setType "SFBool")
                    (.setValue "true")
                ))
                (.addField (doto (field. )
                    (.setName "headlightColor")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Camera headlight color")
                    (.setType "SFColor")
                    (.setValue "1 1 1")
                ))
                (.addField (doto (field. )
                    (.setName "headlightIntensity")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Camera headlight intensity")
                    (.setType "SFFloat")
                    (.setValue "1")
                ))
                (.addField (doto (field. )
                    (.setName "filterColor")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Camera filter color that modifies virtual lens capture")
                    (.setType "SFColor")
                    (.setValue "1 1 1")
                ))
                (.addField (doto (field. )
                    (.setName "filterTransparency")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Camera filter transparency that modifies virtual lens capture")
                    (.setType "SFFloat")
                    (.setValue "1")
                ))
                (.addField (doto (field. )
                    (.setName "upVector")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "upVector changes modify camera orientation (and possibly vice versa)")
                    (.setType "SFVec3f")
                    (.setValue "0 1 0")
                ))
                (.addField (doto (field. )
                    (.setName "fStop")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Focal length divided effective aperture diameter indicating width of focal plane")
                    (.setType "SFFloat")
                    (.setValue "5.6")
                ))
                (.addField (doto (field. )
                    (.setName "focusDistance")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Distance to focal plane of sharpest focus")
                    (.setType "SFFloat")
                    (.setValue "10")
                ))
                (.addField (doto (field. )
                    (.setName "isActive")
                    (.setAccessType "outputOnly")
                    (.setAppinfo "Mark start/stop with true/false output respectively useful to trigger external animations")
                    (.setType "SFBool")
                ))
                (.addField (doto (field. )
                    (.setName "totalDuration")
                    (.setAccessType "outputOnly")
                    (.setAppinfo "Total duration of contained enabled CameraShot (and thus CameraMovement) move durations")
                    (.setType "SFTime")
                ))
                (.addField (doto (field. )
                    (.setName "offlineRender")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "OfflineRender node")
                    (.setType "SFNode")
;initialization node (if any) goes here
                ))
                (.addField (doto (field. )
                    (.setName "traceEnabled")
                    (.setAccessType "initializeOnly")
                    (.setAppinfo "enable console output to trace script computations and prototype progress")
                    (.setType "SFBool")
                    (.setValue "false")
                ))
            ))
            (.setProtoBody (doto (ProtoBody. )
                (.addChildren (doto (Viewpoint. )
                    (.setDEF "CameraViewpoint")
                    (.setIS (doto (IS. )
                        (.addConnect (doto (connect. )
                            (.setNodeField "description")
                            (.setProtoField "description")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "position")
                            (.setProtoField "position")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "orientation")
                            (.setProtoField "orientation")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "fieldOfView")
                            (.setProtoField "fieldOfView")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "set_bind")
                            (.setProtoField "set_bind")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "bindTime")
                            (.setProtoField "bindTime")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "isBound")
                            (.setProtoField "isBound")
                        ))
                    ))
                ))
;NavInfo EXAMINE used since some browsers (InstantReality) try to lock view to vertical when flying to avoid disorientation
                (.addChildren (doto (NavigationInfo. )
                    (.setDEF "CameraNavInfo")
                    (.setType (into-array ["EXAMINE" "FLY" "ANY"]))
                    (.setIS (doto (IS. )
                        (.addConnect (doto (connect. )
                            (.setNodeField "set_bind")
                            (.setProtoField "set_bind")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "headlight")
                            (.setProtoField "headlight")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "visibilityLimit")
                            (.setProtoField "farClipPlane")
                        ))
;No need to bind outputs bindTime, isBound from NavigationInfo since Viewpoint outputs will suffice. TODO inform BitManagement that bindTime field is missing.
                    ))
                ))
;this DirectionalLight replaces NavigationInfo headlight in order to add color capability
                (.addChildren (doto (DirectionalLight. )
                    (.setDEF "CameraDirectionalLight")
                    (.setGlobal true)
;TODO confirm other default field values match NavigationInfo spec
                    (.setIS (doto (IS. )
                        (.addConnect (doto (connect. )
                            (.setNodeField "on")
                            (.setProtoField "headlight")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "color")
                            (.setProtoField "headlightColor")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "intensity")
                            (.setProtoField "headlightIntensity")
                        ))
                    ))
                ))
                (.addChildren (doto (PositionInterpolator. )
                    (.setDEF "CameraPositionInterpolator")
                    (.setKey (float-array [0 1]))
                    (.setKeyValue (float-array [0 0 0 0 0 0]))
                    (.setIS (doto (IS. )
                        (.addConnect (doto (connect. )
                            (.setNodeField "set_fraction")
                            (.setProtoField "set_fraction")
                        ))
                    ))
                ))
                (.addChildren (doto (OrientationInterpolator. )
                    (.setDEF "CameraOrientationInterpolator")
                    (.setKey (float-array [0 1]))
                    (.setKeyValue (float-array [0 1 0 0 0 1 0 0]))
                    (.setIS (doto (IS. )
                        (.addConnect (doto (connect. )
                            (.setNodeField "set_fraction")
                            (.setProtoField "set_fraction")
                        ))
                    ))
                ))
                (.addChildren (doto (ROUTE. )
                    (.setFromField "value_changed")
                    (.setFromNode "CameraPositionInterpolator")
                    (.setToField "position")
                    (.setToNode "CameraViewpoint")
                ))
                (.addChildren (doto (ROUTE. )
                    (.setFromField "value_changed")
                    (.setFromNode "CameraOrientationInterpolator")
                    (.setToField "orientation")
                    (.setToNode "CameraViewpoint")
                ))
                (.addChildren (doto (Script. )
                    (.setDEF "CameraScript")
                    (.setDirectOutput true)
                    (.setMustEvaluate true)
;binding is controlled externally, all camera operations proceed the same regardless of whether bound or not
                    (.addField (doto (field. )
                        (.setName "description")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Text description to be displayed for this Camera")
                        (.setType "SFString")
                    ))
                    (.addField (doto (field. )
                        (.setName "position")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Camera position in local transformation frame")
                        (.setType "SFVec3f")
                    ))
                    (.addField (doto (field. )
                        (.setName "orientation")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Camera rotation in local transformation frame")
                        (.setType "SFRotation")
                    ))
                    (.addField (doto (field. )
                        (.setName "set_fraction")
                        (.setAccessType "inputOnly")
                        (.setAppinfo "input fraction drives interpolators")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "set_bind")
                        (.setAccessType "inputOnly")
                        (.setAppinfo "input event binds or unbinds this Camera")
                        (.setType "SFBool")
                    ))
                    (.addField (doto (field. )
                        (.setName "fieldOfView")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "pi/4")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "nearClipPlane")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Vector distance to near clipping plane")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "farClipPlane")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Vector distance to far clipping plane")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "shots")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Array of CameraShot nodes which in turn contain CameraMovement nodes")
                        (.setType "MFNode")
;initialization nodes (if any) go here
                    ))
                    (.addField (doto (field. )
                        (.setName "filterColor")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Camera filter color that modifies virtual lens capture")
                        (.setType "SFColor")
                    ))
                    (.addField (doto (field. )
                        (.setName "filterTransparency")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Camera filter transparency that modifies virtual lens capture")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "upVector")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "upVector changes modify camera orientation (and possibly vice versa)")
                        (.setType "SFVec3f")
                    ))
                    (.addField (doto (field. )
                        (.setName "fStop")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Focal length divided effective aperture diameter indicating width of focal plane")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "focusDistance")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Distance to focal plane of sharpest focus")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "isActive")
                        (.setAccessType "outputOnly")
                        (.setAppinfo "Mark start/stop with true/false output respectively useful to trigger external animations")
                        (.setType "SFBool")
                    ))
                    (.addField (doto (field. )
                        (.setName "totalDuration")
                        (.setAccessType "outputOnly")
                        (.setAppinfo "Total duration of contained enabled CameraShot (and thus CameraMovement) move durations")
                        (.setType "SFTime")
                    ))
                    (.addField (doto (field. )
                        (.setName "offlineRender")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "OfflineRender node")
                        (.setType "SFNode")
;initialization node (if any) goes here
                    ))
                    (.addField (doto (field. )
                        (.setName "ViewpointNode")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "node reference to permit getting setting fields from within Script")
                        (.setType "SFNode")
                        (.addChildren (doto (Viewpoint. )
                            (.setUSE "CameraViewpoint")
                        ))
                    ))
                    (.addField (doto (field. )
                        (.setName "NavInfoNode")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "node reference to permit getting setting fields from within Script")
                        (.setType "SFNode")
                        (.addChildren (doto (NavigationInfo. )
                            (.setUSE "CameraNavInfo")
                        ))
                    ))
                    (.addField (doto (field. )
                        (.setName "CameraPI")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "node reference to permit getting setting fields from within Script")
                        (.setType "SFNode")
                        (.addChildren (doto (PositionInterpolator. )
                            (.setUSE "CameraPositionInterpolator")
                        ))
                    ))
                    (.addField (doto (field. )
                        (.setName "CameraOI")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "node reference to permit getting setting fields from within Script")
                        (.setType "SFNode")
                        (.addChildren (doto (OrientationInterpolator. )
                            (.setUSE "CameraOrientationInterpolator")
                        ))
                    ))
                    (.addField (doto (field. )
                        (.setName "key")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "key array for interpolators")
                        (.setType "MFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "keyValuePosition")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "keyValue array for PositionInterpolator")
                        (.setType "MFVec3f")
                    ))
                    (.addField (doto (field. )
                        (.setName "keyValueOrientation")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "keyValue array for OrientationInterpolator")
                        (.setType "MFRotation")
                    ))
                    (.addField (doto (field. )
                        (.setName "animated")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "whether internal CameraShot and CameraMove nodes are tracking or changed via ROUTE events")
                        (.setType "SFBool")
                        (.setValue "false")
                    ))
                    (.addField (doto (field. )
                        (.setName "initialized")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "perform checkShots() function once immediately after initialization")
                        (.setType "SFBool")
                        (.setValue "false")
                    ))
                    (.addField (doto (field. )
                        (.setName "shotCount")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "how many CameraShot nodes are contained in shots array")
                        (.setType "SFInt32")
                        (.setValue "0")
                    ))
                    (.addField (doto (field. )
                        (.setName "movesCount")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "how many CameraMove nodes are contained in moves array")
                        (.setType "SFInt32")
                        (.setValue "0")
                    ))
                    (.addField (doto (field. )
                        (.setName "frameCount")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "how many frames were created in current loop")
                        (.setType "SFFloat")
                        (.setValue "0")
                    ))
                    (.addField (doto (field. )
                        (.setName "startTime")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "holding variable")
                        (.setType "SFTime")
                        (.setValue "0")
                    ))
                    (.addField (doto (field. )
                        (.setName "priorTraceTime")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "holding variable")
                        (.setType "SFTime")
                        (.setValue "0")
                    ))
                    (.addField (doto (field. )
                        (.setName "traceEnabled")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "enable console output to trace script computations and prototype progress")
                        (.setType "SFBool")
                    ))
                    (.setIS (doto (IS. )
                        (.addConnect (doto (connect. )
                            (.setNodeField "description")
                            (.setProtoField "description")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "position")
                            (.setProtoField "position")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "orientation")
                            (.setProtoField "orientation")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "set_fraction")
                            (.setProtoField "set_fraction")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "set_bind")
                            (.setProtoField "set_bind")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "fieldOfView")
                            (.setProtoField "fieldOfView")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "nearClipPlane")
                            (.setProtoField "nearClipPlane")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "farClipPlane")
                            (.setProtoField "farClipPlane")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "shots")
                            (.setProtoField "shots")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "filterColor")
                            (.setProtoField "filterColor")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "filterTransparency")
                            (.setProtoField "filterTransparency")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "upVector")
                            (.setProtoField "upVector")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "fStop")
                            (.setProtoField "fStop")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "focusDistance")
                            (.setProtoField "focusDistance")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "isActive")
                            (.setProtoField "isActive")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "totalDuration")
                            (.setProtoField "totalDuration")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "offlineRender")
                            (.setProtoField "offlineRender")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "traceEnabled")
                            (.setProtoField "traceEnabled")
                        ))
                    ))
(.setSourceCode "\\newlinefunction initialize () // CameraScript\\newline{\\newline//  tracePrint ('initialize start...');\\newline\\newline    NavInfoNode.avatarSize[0]   = nearClipPlane;\\newline\\newline    // remaining setups deferred to invocation of checkShots() method\\newline    // thanks to Yvonne Jung Fraunhofer for diagnosing better approach to function initialization\\newline    alwaysPrint ('initialize complete');\\newline}\\newline\\newlinefunction checkShots (eventValue)\\newline{\\newline    tracePrint ('checkShots() method should only occur after initialize() methods in all other Scripts are complete');\\newline\\newline    // compute totalDuration by summing durations from contained CameraShot and CameraMovement nodes\\newline    totalDuration= 0;\\newline    shotCount  = shots.length;\\newline    movesCount = 0;\\newline    for (i = 0; i < shotCount; i++) // shots index\\newline    {\\newline       tracePrint ('shots[' + i + '].moves.length=' + shots[i].moves.length);\\newline       movesCount   += shots[i].moves.length;\\newline       totalDuration = totalDuration + shots[i].shotDuration;\\newline       if (shots[i].moves.length == 0)\\newline       {\\newline          alwaysPrint ('warning: CameraShot[' + i + '][' + shots[i].description + '] has no contained CameraMove nodes');\\newline       }\\newline    }\\newline    // size checks before proceeding\\newline    if (shotCount == 0)\\newline    {\\newline       alwaysPrint ('warning: no CameraShot nodes found for the shots, nothing to do!');\\newline       return;\\newline    }\\newline    else if (movesCount == 0)\\newline    {\\newline       alwaysPrint ('warning: no CameraMove nodes found for the shots, nothing to do!');\\newline       return;\\newline    }\\newline    else if (totalDuration == 0)\\newline    {\\newline       alwaysPrint ('warning: totalDuration = 0 seconds, nothing to do!');\\newline       return;\\newline    }\\newline    tracePrint ('number of contained CameraShot nodes=' + shotCount);\\newline    tracePrint ('number of contained CameraMove nodes=' + movesCount);\\newline    tracePrint ('totalDuration=' + totalDuration + ' seconds for all shots and moves');\\newline\\newline    // compute interpolators\\newline    var k = 0; // index for latest key, keyValuePosition, keyValueOrientation\\newline    for (i = 0; i < shotCount; i++) // shots index\\newline    {\\newline        if (i==0) // initial entries\\newline        {\\newline           key[0]                   = 0.0; // no previous move\\newline           keyValuePosition[0]      = shots[i].initialPosition;\\newline           keyValueOrientation[0]   = shots[i].initialOrientation;\\newline        }\\newline        else     // new shot repositions, reorients camera as clean break from preceding shot/move\\newline        {\\newline           key[k+1]                 = key[k]; // start from end from previous move\\newline           keyValuePosition[k+1]    = shots[i].initialPosition;\\newline           keyValueOrientation[k+1] = shots[i].initialOrientation;\\newline           k++;\\newline        }\\newline        tracePrint (shots[i].description);\\newline        tracePrint ('shots[i].moves.length=' + shots[i].moves.length);\\newline\\newline        for (j = 0; j < shots[i].moves.length; j++) // moves index\\newline        {\\newline            var durationFloat =              shots[i].moves[j].duration;  // implicit type conversion from SFTime\\newline            //  durationFloat = new SFFloat (shots[i].moves[j].duration); // explicit type conversion from SFTime\\newline            //  tracePrint ('durationFloat=' + durationFloat);\\newline            key[k+1]               = key[k] + (durationFloat / totalDuration);\\newline            keyValuePosition[k+1]  = shots[i].moves[j].goalPosition;\\newline            if (!animated)\\newline            {\\newline                 keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;\\newline            }\\newline            else\\newline            {\\newline                // using constructor SFRotation (SFVec3f fromVector, SFVec3f toVector)\\newline                // see X3D ECMAScript binding Table 7.18 — SFRotation instance creation functions\\newline\\newline                // test if difference vector is zero, if so maintain previous rotation\\newline                var shotVector = ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize();\\newline                if (shotVector.length() >= 0)\\newline                {\\newline                    // default view direction is along -Z axis\\newline                    shots[i].moves[j].goalOrientation = new SFRotation (new SFVec3f (0, 0, 1), shotVector);\\newline                    keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;\\newline                }\\newline                else // note (k > 0)\\newline                {\\newline                    keyValueOrientation[k+1] = keyValueOrientation[k];  // no change\\newline                }\\newline\\newline                tracePrint ('shots[' + i + '].moves[' + j + '].goalAimPoint=' + shots[i].moves[j].goalAimPoint.toString());\\newline                tracePrint ('        ViewpointNode.position=' + ViewpointNode.position.toString());\\newline                tracePrint ('          shotVector     delta=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).toString());\\newline                tracePrint ('          shotVector normalize=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize().toString());\\newline                tracePrint ('               goalOrientation=' + shots[i].moves[j].goalOrientation.toString());\\newline                tracePrint ('      keyValueOrientation[k+1]=' + keyValueOrientation[k+1].toString() + '\\n');\\newline            }\\newline            k++; // update index to match latest key, keyValuePosition, keyValueOrientation\\newline\\newline            // check animated parameter:  set true if any of moves are tracking moves\\newline            if (!animated)  animated = shots[i].moves[j].tracking; // once true, remains true\\newline         // tracePrint ('shots[' + i + '].moves[' + j + '].tracking=' + shots[i].moves[j].tracking + ', animated=' + animated);\\newline\\newline            // intermediate trace\\newline            tracePrint ('                key=' + key);\\newline            tracePrint ('   keyValuePosition=' + keyValuePosition);\\newline            tracePrint ('keyValueOrientation=' + keyValueOrientation);\\newline            tracePrint ('- ' + shots[i].moves[j].description);\\newline        }\\newline    }\\newline    tracePrint ('                key=' + key);\\newline    tracePrint ('   keyValuePosition=' + keyValuePosition);\\newline    tracePrint ('keyValueOrientation=' + keyValueOrientation);\\newline    if (key.length != keyValuePosition.length)\\newline    {\\newline      alwaysPrint ('warning: internal error during array construction, ' +\\newline                  'key.length=' + key.length + ' must equal ' +\\newline                  'keyValuePosition.length=' + keyValuePosition.length);\\newline    }\\newline    if (key.length != keyValueOrientation.length)\\newline    {\\newline      alwaysPrint ('warning: internal error during array construction, ' +\\newline                  'key.length=' + key.length + ' must equal ' +\\newline                  'keyValueOrientation.length=' + keyValueOrientation.length);\\newline    }\\newline    if (key.length != (shotCount + movesCount))\\newline    {\\newline      alwaysPrint ('warning: internal error during array construction, ' +\\newline                  'key.length=' + key.length + ' must equal ' +\\newline                  '(shotCount + movesCount)=' + (shotCount + movesCount));\\newline    }\\newline    tracePrint ('           animated=' + animated);\\newline    // set node values\\newline    CameraPI.key      = key;\\newline    CameraOI.key      = key;\\newline    CameraPI.keyValue = keyValuePosition;\\newline    CameraOI.keyValue = keyValueOrientation;\\newline\\newline    if (!animated) // output results\\newline    {\\newline        tracePrint ('<PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');\\newline        tracePrint ('<OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');\\newline    }\\newline    tracePrint ('checkShots() complete');\\newline}\\newline\\newlinefunction stripBrackets (fieldArray)\\newline{\\newline    // some browsers add brackets to array output strings, this function strips them\\newline    outputString = '';\\newline    for (i = 0; i < fieldArray.length; i++)\\newline    {\\newline       outputString += fieldArray[i].toString();\\newline       if (i < fieldArray.length - 1) outputString += ' ';\\newline    }\\newline    return outputString;\\newline}\\newline\\newlinefunction set_fraction (eventValue, timestamp) // input event received for inputOnly field\\newline{\\newline   // traceEnabled = false;  // for testing purposes\\newline\\newline   // if Camera is being animated, immediately recompute interpolator settings\\newline   if (animated) checkShots (true);\\newline\\newline   // trace progress on console with reduced output frequency\\newline   if (frameCount == 0)\\newline   {\\newline      alwaysPrint ('Animation loop commencing, timestamp=' + timestamp);\\newline      startTime      = timestamp;\\newline      priorTraceTime = timestamp;\\newline      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\\newline\\newline      if (animated) // output results\\newline      {\\newline        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\\newline        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');\\newline        tracePrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');\\newline      }\\newline   }\\newline   else if ((timestamp - priorTraceTime) >= 1.0) // 1 second trace interval\\newline   {\\newline      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\\newline      priorTraceTime = timestamp;\\newline\\newline      if (animated) // output results\\newline      {\\newline        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\\newline        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');\\newline        alwaysPrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');\\newline      }\\newline   }\\newline   if (eventValue == 0)\\newline   {\\newline      // note that zero value is not necessarily sent first by TimeSensor, so otherwise ignored\\newline      frameCount++;\\newline   }\\newline   else if (eventValue == 1)\\newline   {\\newline      alwaysPrint ('shotClock=' + (timestamp - startTime) + ', frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());\\newline      if (animated) // output results\\newline      {\\newline        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());\\newline      }\\newline      alwaysPrint ('Animation loop complete.');\\newline      // do not unbind the Viewpoint and NavigationInfo nodes, let that be controlled externally\\newline   }\\newline   else\\newline   {\\newline      frameCount++;\\newline   }\\newline}\\newline\\newlinefunction set_bind (eventValue) // input event received for inputOnly field\\newline{\\newline   // need to ensure CameraShot nodes are properly initialized\\newline   if (initialized == false)\\newline   {\\newline      checkShots (true);\\newline      initialized = true;\\newline   }\\newline   if (eventValue)\\newline   {\\newline       tracePrint ('Camera has been bound');\\newline   }\\newline   else\\newline   {\\newline       tracePrint ('Camera has been unbound');\\newline   }\\newline}\\newline\\newlinefunction set_description (eventValue) // input event received for inputOutput field\\newline{\\newline    description = eventValue;\\newline}\\newline\\newlinefunction set_position (eventValue) // input event received for inputOutput field\\newline{\\newline    position = eventValue;\\newline}\\newline\\newlinefunction set_orientation (eventValue) // input event received for inputOutput field\\newline{\\newline    orientation = eventValue;\\newline}\\newline\\newlinefunction set_fieldOfView (eventValue) // input event received for inputOutput field\\newline{\\newline    fieldOfView = eventValue;\\newline}\\newline\\newlinefunction set_nearClipPlane (eventValue) // input event received for inputOutput field\\newline{\\newline    nearClipPlane = eventValue;\\newline}\\newline\\newlinefunction set_farClipPlane (eventValue) // input event received for inputOutput field\\newline{\\newline    farClipPlane = eventValue;\\newline}\\newline\\newlinefunction set_shots (eventValue) // input event received for inputOutput field\\newline{\\newline    shots = eventValue;\\newline}\\newline\\newlinefunction set_filterColor (eventValue) // input event received for inputOutput field\\newline{\\newline    filterColor = eventValue;\\newline}\\newline\\newlinefunction set_filterTransparency (eventValue) // input event received for inputOutput field\\newline{\\newline    filterTransparency = eventValue;\\newline}\\newline\\newlinefunction set_upVector (eventValue) // input event received for inputOutput field\\newline{\\newline    upVector = eventValue;\\newline}\\newline\\newlinefunction set_fStop (eventValue) // input event received for inputOutput field\\newline{\\newline    fStop = eventValue;\\newline}\\newline\\newlinefunction set_focusDistance (eventValue) // input event received for inputOutput field\\newline{\\newline    focusDistance = eventValue;\\newline}\\newline\\newlinefunction set_offlineRender (eventValue) // input event received for inputOutput field\\newline{\\newline    offlineRender = eventValue;\\newline}\\newline\\newlinefunction set_key (eventValue) // input event received for inputOutput field\\newline{\\newline    key = eventValue;\\newline}\\newline\\newlinefunction set_keyValuePosition (eventValue) // input event received for inputOutput field\\newline{\\newline    keyValuePosition = eventValue;\\newline}\\newline\\newlinefunction set_keyValueOrientation (eventValue) // input event received for inputOutput field\\newline{\\newline    keyValueOrientation = eventValue;\\newline}\\newline\\newlinefunction set_animated (eventValue) // input event received for inputOutput field\\newline{\\newline    animated = eventValue;\\newline}\\newline\\newlinefunction tracePrint (outputValue)\\newline{\\newline	if (traceEnabled) alwaysPrint (outputValue);\\newline}\\newlinefunction alwaysPrint (outputValue)\\newline{\\newline    // try to ensure outputValue is converted to string despite Browser.println idiosyncracies\\newline    var outputString = outputValue.toString(); // utility function according to spec\\newline    if (outputString == null) outputString = outputValue; // direct cast\\newline\\newline    if  (description.length > 0)\\newline         Browser.print ('[Camera: ' + description + '] ' + outputString + '\\n');\\newline    else\\newline         Browser.print ('[Camera] ' + outputString + '\\n');\\newline}\\newline")                ))
                (.addChildren (doto (ROUTE. )
                    (.setFromField "position")
                    (.setFromNode "CameraScript")
                    (.setToField "position")
                    (.setToNode "CameraViewpoint")
                ))
                (.addChildren (doto (ROUTE. )
                    (.setFromField "orientation")
                    (.setFromNode "CameraScript")
                    (.setToField "orientation")
                    (.setToNode "CameraViewpoint")
                ))
                (.addChildren (doto (ROUTE. )
                    (.setFromField "isActive")
                    (.setFromNode "CameraScript")
                    (.setToField "set_bind")
                    (.setToNode "CameraViewpoint")
                ))
                (.addChildren (doto (ROUTE. )
                    (.setFromField "isActive")
                    (.setFromNode "CameraScript")
                    (.setToField "set_bind")
                    (.setToNode "CameraNavInfo")
                ))
                (.addChildren (doto (ROUTE. )
                    (.setFromField "isActive")
                    (.setFromNode "CameraScript")
                    (.setToField "on")
                    (.setToNode "CameraDirectionalLight")
                ))
            ))
        ))
;=============== CameraShot ==============
        (.addChildren (doto (ProtoDeclare. )
            (.setName "CameraShot")
            (.setAppinfo "CameraShot collects a specific set of CameraMovement animations that make up an individual shot.")
            (.setProtoInterface (doto (ProtoInterface. )
                (.addField (doto (field. )
                    (.setName "description")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Text description to be displayed for this CameraShot")
                    (.setType "SFString")
                ))
                (.addField (doto (field. )
                    (.setName "enabled")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Whether this CameraShot can be activated")
                    (.setType "SFBool")
                    (.setValue "true")
                ))
                (.addField (doto (field. )
                    (.setName "moves")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Set of CameraMovement nodes")
                    (.setType "MFNode")
;initializing CameraMovement nodes are inserted here by scene author using ProtoInstance
                ))
                (.addField (doto (field. )
                    (.setName "initialPosition")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Setup to reinitialize camera position for this shot")
                    (.setType "SFVec3f")
                    (.setValue "0 0 10")
                ))
                (.addField (doto (field. )
                    (.setName "initialOrientation")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Setup to reinitialize camera rotation for this shot")
                    (.setType "SFRotation")
                    (.setValue "0 0 1 0")
                ))
                (.addField (doto (field. )
                    (.setName "initialAimPoint")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Setup to reinitialize aimpoint (relative location for camera direction) for this shot")
                    (.setType "SFVec3f")
                    (.setValue "0 0 0")
                ))
                (.addField (doto (field. )
                    (.setName "initialFieldOfView")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "pi/4")
                    (.setType "SFFloat")
                    (.setValue "0.7854")
                ))
                (.addField (doto (field. )
                    (.setName "initialFStop")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Focal length divided effective aperture diameter indicating width of focal plane")
                    (.setType "SFFloat")
                    (.setValue "5.6")
                ))
                (.addField (doto (field. )
                    (.setName "initialFocusDistance")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Distance to focal plane of sharpest focus")
                    (.setType "SFFloat")
                    (.setValue "10")
                ))
                (.addField (doto (field. )
                    (.setName "shotDuration")
                    (.setAccessType "outputOnly")
                    (.setAppinfo "Subtotal duration of contained CameraMovement move durations")
                    (.setType "SFTime")
                ))
                (.addField (doto (field. )
                    (.setName "isActive")
                    (.setAccessType "outputOnly")
                    (.setAppinfo "Mark start/stop with true/false output respectively useful to trigger external animations")
                    (.setType "SFBool")
                ))
                (.addField (doto (field. )
                    (.setName "traceEnabled")
                    (.setAccessType "initializeOnly")
                    (.setAppinfo "enable console output to trace script computations and prototype progress")
                    (.setType "SFBool")
                    (.setValue "false")
                ))
            ))
            (.setProtoBody (doto (ProtoBody. )
                (.addChildren (doto (Script. )
                    (.setDEF "CameraShotScript")
                    (.setDirectOutput true)
                    (.setMustEvaluate true)
                    (.addField (doto (field. )
                        (.setName "description")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Text description to be displayed for this CameraShot")
                        (.setType "SFString")
                    ))
                    (.addField (doto (field. )
                        (.setName "enabled")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Whether this CameraShot can be activated")
                        (.setType "SFBool")
                    ))
                    (.addField (doto (field. )
                        (.setName "moves")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Set of CameraMovement nodes")
                        (.setType "MFNode")
;initialization nodes (if any) go here
                    ))
                    (.addField (doto (field. )
                        (.setName "initialPosition")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Setup to reinitialize camera position for this shot")
                        (.setType "SFVec3f")
                    ))
                    (.addField (doto (field. )
                        (.setName "initialOrientation")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Setup to reinitialize camera rotation for this shot")
                        (.setType "SFRotation")
                    ))
                    (.addField (doto (field. )
                        (.setName "initialAimPoint")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Setup to reinitialize aimpoint (relative location for camera direction) for this shot")
                        (.setType "SFVec3f")
                    ))
                    (.addField (doto (field. )
                        (.setName "initialFieldOfView")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "pi/4")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "initialFStop")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Focal length divided effective aperture diameter indicating width of focal plane")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "initialFocusDistance")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Distance to focal plane of sharpest focus")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "shotDuration")
                        (.setAccessType "outputOnly")
                        (.setAppinfo "Subtotal duration of contained CameraMovement move durations")
                        (.setType "SFTime")
                    ))
                    (.addField (doto (field. )
                        (.setName "isActive")
                        (.setAccessType "outputOnly")
                        (.setAppinfo "Mark start/stop with true/false output respectively useful to trigger external animations")
                        (.setType "SFBool")
                    ))
                    (.addField (doto (field. )
                        (.setName "traceEnabled")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "enable console output to trace script computations and prototype progress")
                        (.setType "SFBool")
                    ))
                    (.addField (doto (field. )
                        (.setName "key")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "key array for interpolators")
                        (.setType "MFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "keyValuePosition")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "keyValue array for PositionInterpolator")
                        (.setType "MFVec3f")
                    ))
                    (.addField (doto (field. )
                        (.setName "keyValueOrientation")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "keyValue array for OrientationInterpolator")
                        (.setType "MFRotation")
                    ))
                    (.setIS (doto (IS. )
                        (.addConnect (doto (connect. )
                            (.setNodeField "description")
                            (.setProtoField "description")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "enabled")
                            (.setProtoField "enabled")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "moves")
                            (.setProtoField "moves")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "initialPosition")
                            (.setProtoField "initialPosition")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "initialOrientation")
                            (.setProtoField "initialOrientation")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "initialAimPoint")
                            (.setProtoField "initialAimPoint")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "initialFieldOfView")
                            (.setProtoField "initialFieldOfView")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "initialFStop")
                            (.setProtoField "initialFStop")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "initialFocusDistance")
                            (.setProtoField "initialFocusDistance")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "shotDuration")
                            (.setProtoField "shotDuration")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "isActive")
                            (.setProtoField "isActive")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "traceEnabled")
                            (.setProtoField "traceEnabled")
                        ))
                    ))
(.setSourceCode "\\newlinefunction initialize () // CameraShotScript\\newline{\\newline//  tracePrint ('initialize start...');\\newline\\newline    // compute shotDuration by summing durations from contained CameraMovement nodes\\newline    shotDuration = 0;\\newline    for (i = 0; i < moves.length; i++)\\newline    {\\newline        shotDuration = shotDuration + moves[i].duration;\\newline    }\\newline    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');\\newline\\newline//  tracePrint ('... initialize() complete');\\newline}\\newline\\newlinefunction set_description (eventValue) // input event received for inputOutput field\\newline{\\newline    description = eventValue;\\newline}\\newline\\newlinefunction set_enabled (eventValue) // input event received for inputOutput field\\newline{\\newline    enabled = eventValue;\\newline}\\newline\\newlinefunction set_moves (eventValue) // input event received for inputOutput field\\newline{\\newline    moves = eventValue;\\newline}\\newline\\newlinefunction set_initialPosition (eventValue) // input event received for inputOutput field\\newline{\\newline    initialPosition = eventValue;\\newline}\\newline\\newlinefunction set_initialOrientation (eventValue) // input event received for inputOutput field\\newline{\\newline    initialOrientation = eventValue;\\newline}\\newline\\newlinefunction set_initialAimPoint (eventValue) // input event received for inputOutput field\\newline{\\newline    initialAimPoint = eventValue;\\newline}\\newline\\newlinefunction set_initialFieldOfView (eventValue) // input event received for inputOutput field\\newline{\\newline    initialFieldOfView = eventValue;\\newline}\\newline\\newlinefunction set_initialFStop (eventValue) // input event received for inputOutput field\\newline{\\newline    initialFStop = eventValue;\\newline}\\newline\\newlinefunction set_initialFocusDistance (eventValue) // input event received for inputOutput field\\newline{\\newline    initialFocusDistance = eventValue;\\newline}\\newline\\newlinefunction set_key (eventValue) // input event received for inputOutput field\\newline{\\newline    key = eventValue;\\newline}\\newline\\newlinefunction set_keyValuePosition (eventValue) // input event received for inputOutput field\\newline{\\newline    keyValuePosition = eventValue;\\newline}\\newline\\newlinefunction set_keyValueOrientation (eventValue) // input event received for inputOutput field\\newline{\\newline    keyValueOrientation = eventValue;\\newline}\\newline\\newline// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive\\newline\\newlinefunction tracePrint (outputValue)\\newline{\\newline	if (traceEnabled) alwaysPrint (outputValue);\\newline}\\newlinefunction alwaysPrint (outputValue)\\newline{\\newline	// try to ensure outputValue is converted to string despite browser idiosyncracies\\newline    var outputString = outputValue.toString(); // utility function according to spec\\newline    if (outputString == null) outputString = outputValue; // direct cast\\newline\\newline    if  (description.length > 0)\\newline         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\\n');\\newline    else\\newline         Browser.print ('[CameraShot] ' + outputString + '\\n');\\newline}\\newline")                ))
;Add any ROUTEs here, going from Script to other nodes within ProtoBody
            ))
        ))
;=============== CameraMovement ==============
        (.addChildren (doto (ProtoDeclare. )
            (.setName "CameraMovement")
            (.setAppinfo "CameraMovement node defines a single camera movement animation including goalPosition, goalOrientation, goalAimPoint and goalFieldOfView.")
            (.setProtoInterface (doto (ProtoInterface. )
                (.addField (doto (field. )
                    (.setName "description")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Text description to be displayed for this CameraMovement")
                    (.setType "SFString")
                ))
                (.addField (doto (field. )
                    (.setName "enabled")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Whether this CameraMovement can be activated")
                    (.setType "SFBool")
                    (.setValue "true")
                ))
                (.addField (doto (field. )
                    (.setName "duration")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Duration in seconds for this move")
                    (.setType "SFFloat")
                    (.setValue "0")
                ))
                (.addField (doto (field. )
                    (.setName "goalPosition")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Goal camera position for this move")
                    (.setType "SFVec3f")
                    (.setValue "0 0 10")
                ))
                (.addField (doto (field. )
                    (.setName "goalOrientation")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Goal camera rotation for this move")
                    (.setType "SFRotation")
                    (.setValue "0 0 1 0")
                ))
                (.addField (doto (field. )
                    (.setName "tracking")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Whether or not camera direction is tracking towards the aimPoint")
                    (.setType "SFBool")
                    (.setValue "false")
                ))
                (.addField (doto (field. )
                    (.setName "goalAimPoint")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Goal aimPoint for this move, ignored if tracking=false")
                    (.setType "SFVec3f")
                    (.setValue "0 0 0")
                ))
                (.addField (doto (field. )
                    (.setName "goalFieldOfView")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Goal fieldOfView for this move")
                    (.setType "SFFloat")
                    (.setValue "0.7854")
                ))
                (.addField (doto (field. )
                    (.setName "goalFStop")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Focal length divided effective aperture diameter indicating width of focal plane")
                    (.setType "SFFloat")
                    (.setValue "5.6")
                ))
                (.addField (doto (field. )
                    (.setName "goalFocusDistance")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Distance to focal plane of sharpest focus")
                    (.setType "SFFloat")
                    (.setValue "10")
                ))
                (.addField (doto (field. )
                    (.setName "isActive")
                    (.setAccessType "outputOnly")
                    (.setAppinfo "Mark start/stop with true/false output respectively useful to trigger external animations")
                    (.setType "SFBool")
                ))
                (.addField (doto (field. )
                    (.setName "traceEnabled")
                    (.setAccessType "initializeOnly")
                    (.setAppinfo "enable console output to trace script computations and prototype progress")
                    (.setType "SFBool")
                    (.setValue "false")
                ))
            ))
            (.setProtoBody (doto (ProtoBody. )
;First node determines node type of this prototype
;Subsequent nodes do not render, but still must be a valid X3D subgraph
;Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events
                (.addChildren (doto (Script. )
                    (.setDEF "CameraMovementScript")
                    (.setDirectOutput true)
                    (.setMustEvaluate true)
                    (.addField (doto (field. )
                        (.setName "description")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Text description to be displayed for this CameraMovement")
                        (.setType "SFString")
                    ))
                    (.addField (doto (field. )
                        (.setName "enabled")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Whether this CameraMovement can be activated")
                        (.setType "SFBool")
                    ))
                    (.addField (doto (field. )
                        (.setName "duration")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Duration in seconds for this move")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "goalPosition")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Goal camera position for this move")
                        (.setType "SFVec3f")
                    ))
                    (.addField (doto (field. )
                        (.setName "goalOrientation")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Goal camera rotation for this move")
                        (.setType "SFRotation")
                    ))
                    (.addField (doto (field. )
                        (.setName "tracking")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Whether or not camera direction is tracking towards the aimPoint")
                        (.setType "SFBool")
                    ))
                    (.addField (doto (field. )
                        (.setName "goalAimPoint")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Goal aimPoint for this move, ignored if tracking=false")
                        (.setType "SFVec3f")
                    ))
                    (.addField (doto (field. )
                        (.setName "goalFieldOfView")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Goal fieldOfView for this move")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "goalFStop")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Focal length divided effective aperture diameter indicating width of focal plane")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "goalFocusDistance")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Distance to focal plane of sharpest focus")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "isActive")
                        (.setAccessType "outputOnly")
                        (.setAppinfo "Mark start/stop with true/false output respectively useful to trigger external animations")
                        (.setType "SFBool")
                    ))
                    (.addField (doto (field. )
                        (.setName "traceEnabled")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "enable console output to trace script computations and prototype progress")
                        (.setType "SFBool")
                    ))
                    (.setIS (doto (IS. )
                        (.addConnect (doto (connect. )
                            (.setNodeField "description")
                            (.setProtoField "description")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "enabled")
                            (.setProtoField "enabled")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "duration")
                            (.setProtoField "duration")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "goalPosition")
                            (.setProtoField "goalPosition")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "goalOrientation")
                            (.setProtoField "goalOrientation")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "tracking")
                            (.setProtoField "tracking")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "goalAimPoint")
                            (.setProtoField "goalAimPoint")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "goalFieldOfView")
                            (.setProtoField "goalFieldOfView")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "goalFStop")
                            (.setProtoField "goalFStop")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "goalFocusDistance")
                            (.setProtoField "goalFocusDistance")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "isActive")
                            (.setProtoField "isActive")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "traceEnabled")
                            (.setProtoField "traceEnabled")
                        ))
                    ))
(.setSourceCode "\\newlinefunction initialize () // CameraMovementScript\\newline{\\newline//  tracePrint ('initialize start...');\\newline    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +\\newline                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()\\newline                           );\\newline    if (duration < 0)\\newline    {\\newline       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');\\newline       duration = 0;\\newline    }\\newline    else if (duration == 0)\\newline    {\\newline       alwaysPrint ('warning: duration=0, nothing to do!');\\newline    }\\newline    tracePrint ('... initialize complete');\\newline}\\newline\\newlinefunction set_goalAimPoint (eventValue) // input event received for inputOutput field\\newline{\\newline    goalAimPoint_changed = eventValue;\\newline    tracePrint ('goalAimPoint=' + goalAimPoint.toString());\\newline\\newline    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator\\newline}\\newline\\newlinefunction set_description (eventValue) // input event received for inputOutput field\\newline{\\newline    description = eventValue;\\newline}\\newline\\newlinefunction set_enabled (eventValue) // input event received for inputOutput field\\newline{\\newline    enabled = eventValue;\\newline}\\newline\\newlinefunction set_duration (eventValue) // input event received for inputOutput field\\newline{\\newline    duration = eventValue;\\newline}\\newline\\newlinefunction set_goalPosition (eventValue) // input event received for inputOutput field\\newline{\\newline    goalPosition = eventValue;\\newline}\\newline\\newlinefunction set_goalOrientation (eventValue) // input event received for inputOutput field\\newline{\\newline    goalOrientation = eventValue;\\newline}\\newline\\newlinefunction set_tracking (eventValue) // input event received for inputOutput field\\newline{\\newline    tracking = eventValue;\\newline}\\newline\\newlinefunction set_goalFieldOfView (eventValue) // input event received for inputOutput field\\newline{\\newline    goalFieldOfView = eventValue;\\newline}\\newline\\newlinefunction set_goalFStop (eventValue) // input event received for inputOutput field\\newline{\\newline    goalFStop = eventValue;\\newline}\\newline\\newlinefunction set_goalFocusDistance (eventValue) // input event received for inputOutput field\\newline{\\newline    goalFocusDistance = eventValue;\\newline}\\newline\\newline// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive\\newline\\newlinefunction tracePrint (outputValue)\\newline{\\newline	if (traceEnabled) alwaysPrint (outputValue);\\newline}\\newline\\newlinefunction alwaysPrint (outputValue)\\newline{\\newline	// try to ensure outputValue is converted to string despite browser idiosyncracies\\newline    var outputString = outputValue.toString(); // utility function according to spec\\newline    if (outputString == null) outputString = outputValue; // direct cast\\newline\\newline    if  (description.length > 0)\\newline         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\\n');\\newline    else\\newline         Browser.print ('[CameraMovement] ' + outputString + '\\n');\\newline}\\newline")                ))
;Add any ROUTEs here, going from Script to other nodes within ProtoBody
            ))
        ))
;=============== OfflineRender ==============
        (.addChildren (doto (ProtoDeclare. )
            (.setName "OfflineRender")
            (.setAppinfo "OfflineRender defines a parameters for offline rendering of Camera animation output to a movie file (or possibly a still shot).")
            (.setProtoInterface (doto (ProtoInterface. )
;TODO non-photorealistic rendering (NPR) parameters
                (.addField (doto (field. )
                    (.setName "description")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Text description to be displayed for this OfflineRender")
                    (.setType "SFString")
                ))
                (.addField (doto (field. )
                    (.setName "enabled")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Whether this OfflineRender can be activated")
                    (.setType "SFBool")
                    (.setValue "true")
                ))
                (.addField (doto (field. )
                    (.setName "frameRate")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Frames per second recorded for this rendering")
                    (.setType "SFFloat")
                    (.setValue "30")
                ))
                (.addField (doto (field. )
                    (.setName "frameSize")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Size of frame in number of pixels width and height")
                    (.setType "SFVec2f")
                    (.setValue "640 480")
                ))
                (.addField (doto (field. )
                    (.setName "pixelAspectRatio")
                    (.setAccessType "inputOutput")
                    (.setAppinfo "Relative dimensions of pixel height/width typically 1.33 or 1")
                    (.setType "SFFloat")
                    (.setValue "1.33")
                ))
                (.addField (doto (field. )
                    (.setName "set_startTime")
                    (.setAccessType "inputOnly")
                    (.setAppinfo "Begin render operation")
                    (.setType "SFTime")
                ))
                (.addField (doto (field. )
                    (.setName "progress")
                    (.setAccessType "outputOnly")
                    (.setAppinfo "Progress performing render operation (0..1)")
                    (.setType "SFFloat")
                ))
                (.addField (doto (field. )
                    (.setName "renderCompleteTime")
                    (.setAccessType "outputOnly")
                    (.setAppinfo "Render operation complete")
                    (.setType "SFTime")
                ))
                (.addField (doto (field. )
                    (.setName "movieFormat")
                    (.setAccessType "initializeOnly")
                    (.setAppinfo "Format of rendered output movie (mpeg mp4 etc.), use first supported format")
                    (.setType "MFString")
                    (.setValue "\"mpeg\"")
                ))
                (.addField (doto (field. )
                    (.setName "imageFormat")
                    (.setAccessType "initializeOnly")
                    (.setAppinfo "Format of rendered output images (png jpeg gif tiff etc.) use first supported format")
                    (.setType "MFString")
                    (.setValue "\"png\"")
                ))
                (.addField (doto (field. )
                    (.setName "traceEnabled")
                    (.setAccessType "initializeOnly")
                    (.setAppinfo "enable console output to trace script computations and prototype progress")
                    (.setType "SFBool")
                    (.setValue "false")
                ))
            ))
            (.setProtoBody (doto (ProtoBody. )
;First node determines node type of this prototype
;Subsequent nodes do not render, but still must be a valid X3D subgraph
                (.addChildren (doto (Script. )
                    (.setDEF "OfflineRenderScript")
                    (.setMustEvaluate true)
                    (.addField (doto (field. )
                        (.setName "description")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Text description to be displayed for this OfflineRender")
                        (.setType "SFString")
                    ))
                    (.addField (doto (field. )
                        (.setName "enabled")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Whether this OfflineRender can be activated")
                        (.setType "SFBool")
                    ))
                    (.addField (doto (field. )
                        (.setName "frameRate")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Frames per second recorded for this rendering")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "frameSize")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Size of frame in number of pixels width and height")
                        (.setType "SFVec2f")
                    ))
                    (.addField (doto (field. )
                        (.setName "pixelAspectRatio")
                        (.setAccessType "inputOutput")
                        (.setAppinfo "Relative dimensions of pixel height/width typically 1.33 or 1")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "set_startTime")
                        (.setAccessType "inputOnly")
                        (.setAppinfo "Begin render operation")
                        (.setType "SFTime")
                    ))
                    (.addField (doto (field. )
                        (.setName "progress")
                        (.setAccessType "outputOnly")
                        (.setAppinfo "Progress performing render operation (0..1)")
                        (.setType "SFFloat")
                    ))
                    (.addField (doto (field. )
                        (.setName "renderCompleteTime")
                        (.setAccessType "outputOnly")
                        (.setAppinfo "Render operation complete")
                        (.setType "SFTime")
                    ))
                    (.addField (doto (field. )
                        (.setName "movieFormat")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "Format of rendered output movie (mpeg mp4 etc.)")
                        (.setType "MFString")
                    ))
                    (.addField (doto (field. )
                        (.setName "imageFormat")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "Format of rendered output images (png jpeg gif tiff etc.)")
                        (.setType "MFString")
                    ))
                    (.addField (doto (field. )
                        (.setName "traceEnabled")
                        (.setAccessType "initializeOnly")
                        (.setAppinfo "enable console output to trace script computations and prototype progress")
                        (.setType "SFBool")
                    ))
                    (.setIS (doto (IS. )
                        (.addConnect (doto (connect. )
                            (.setNodeField "description")
                            (.setProtoField "description")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "enabled")
                            (.setProtoField "enabled")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "frameRate")
                            (.setProtoField "frameRate")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "frameSize")
                            (.setProtoField "frameSize")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "pixelAspectRatio")
                            (.setProtoField "pixelAspectRatio")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "set_startTime")
                            (.setProtoField "set_startTime")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "progress")
                            (.setProtoField "progress")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "renderCompleteTime")
                            (.setProtoField "renderCompleteTime")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "movieFormat")
                            (.setProtoField "movieFormat")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "imageFormat")
                            (.setProtoField "imageFormat")
                        ))
                        (.addConnect (doto (connect. )
                            (.setNodeField "traceEnabled")
                            (.setProtoField "traceEnabled")
                        ))
                    ))
(.setSourceCode "\\newlinefunction initialize () // OfflineRenderScript\\newline{\\newline//  tracePrint ('initialize start...');\\newline\\newline    tracePrint ('... initialize complete');\\newline}\\newline\\newlinefunction set_description (eventValue) // input event received for inputOutput field\\newline{\\newline    description = eventValue;\\newline}\\newline\\newlinefunction set_enabled (eventValue) // input event received for inputOutput field\\newline{\\newline    enabled = eventValue;\\newline}\\newline\\newlinefunction set_frameRate (eventValue) // input event received for inputOutput field\\newline{\\newline    frameRate = eventValue;\\newline}\\newline\\newlinefunction set_frameSize (eventValue) // input event received for inputOutput field\\newline{\\newline    frameSize = eventValue;\\newline}\\newline\\newlinefunction set_pixelAspectRatio (eventValue) // input event received for inputOutput field\\newline{\\newline    pixelAspectRatio = eventValue;\\newline}\\newline\\newlinefunction set_startTime (eventValue) // input event received for inputOnly field\\newline{\\newline   // do something with input eventValue;\\newline}\\newline\\newlinefunction tracePrint (outputValue)\\newline{\\newline	if (traceEnabled) alwaysPrint (outputValue);\\newline}\\newline\\newlinefunction alwaysPrint (outputValue)\\newline{\\newline	// try to ensure outputValue is converted to string despite browser idiosyncracies\\newline    var outputString = outputValue.toString(); // utility function according to spec\\newline    if (outputString == null) outputString = outputValue; // direct cast\\newline\\newline    if  (description.length > 0)\\newline         Browser.print ('[OfflineRender: ' + description + '] ' + outputString + '\\n');\\newline    else\\newline         Browser.print ('[OfflineRender] ' + outputString + '\\n');\\newline}\\newline")                ))
;Add any ROUTEs here, going from Script to other nodes within ProtoBody
            ))
        ))
;=============== Launch Prototype Example ==============
        (.addChildren (doto (Background. )
            (.setSkyColor (float-array [0.282353 0.380392 0.470588]))
        ))
        (.addChildren (doto (Anchor. )
            (.setDescription "launch CameraExample scene")
            (.setUrl (into-array ["CameraExamples.x3d" "https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.x3d" "CameraExamples.wrl" "https://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.wrl"]))
            (.addChildren (doto (Transform. )
                (.addChild (doto (Shape. )
                    (.setGeometry (doto (Text. )
                        (.setString (into-array ["CameraPrototypes.x3d" "defines multiple prototype nodes" "" "Click on this text to see" "CameraExamples.x3d scene"]))
                        (.setFontStyle (doto (FontStyle. )
                            (.setJustify (into-array ["MIDDLE" "MIDDLE"]))
                        ))
                    ))
                    (.setAppearance (doto (Appearance. )
                        (.setMaterial (doto (Material. )
                            (.setDiffuseColor (float-array [1 1 0.2]))
                        ))
                    ))
                ))
            ))
        ))
    ))
))
(.toFileX3D X3D0 "../data/CameraPrototypes.new.clojure.x3d")
(.toFileJSON X3D0 "../data/CameraPrototypes.new.clojure.json")
(defn -main []
(println "Hello from your main function!"))