X3D:
    profile: "Immersive"
    version: "4.0"
    setHead: [
        head: [
            meta: [
                name: "title"
                content: "arc4.x3d"
            ],
            meta: [
                name: "creator"
                content: "Lost, Doug Sanden I think"
            ],
            meta: [
                name: "generator"
                content: "manual"
            ],
            meta: [
                name: "identifier"
                content: "https://coderextreme.net/X3DJSONLD/src/main/data/x3dconnectorProto.x3d"
            ],
            meta: [
                name: "description"
                content: "a generic proto to connect two objects"
            ]
        ]
    ]
    setScene: [
        Scene: [
            Viewpoint: [
                position: [0, 0, 5]
                description: "Only Viewpoint"
            ],
            Background: [
                skyColor: [0.4, 0.4, 0.4]
            ],
            Transform: [
                DEF: "DECLpoint_G1_node"
                Shape: [
                    setGeometry: [
                        Sphere: [
                            radius: 0.1
                        ]
                    ]
                    setAppearance: [
                        Appearance: [
                            setMaterial: [
                                Material: [
                                    diffuseColor: [1, 0, 0]
                                ]
                            ]
                        ]
                    ]
                ],
                PositionInterpolator: [
                    DEF: "DECLpoint_G1_PI1"
                    key: [0, 1]
                    keyValue: [0, 0, 0, 0, 5, 0]
                ],
                Script: [
                    DEF: "DECLpoint_G1_MB1"
                    field: [
                        name: "translation"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "old"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "set_location"
                        accessType: "inputOnly"
                        type: "SFTime"
                    ],
                    field: [
                        name: "keyValue"
                        accessType: "inputOutput"
                        type: "MFVec3f"
                        value: "0 0 0 0 5 0"
                    ],
#ecmascript:
#		function set_location(value) {
#                    old = translation;
#		    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);
#                    keyValue = new MFVec3f([old, translation]);
#		    // Browser.println(keyValue);
#		}
                ],
                TimeSensor: [
                    DEF: "DECLpoint_G1_CL1"
                    cycleInterval: 3.0
                    loop: true
                ],
                ROUTE: [
                    fromNode: "DECLpoint_G1_CL1"
                    fromField: "cycleTime"
                    toNode: "DECLpoint_G1_MB1"
                    toField: "set_location"
                ],
                ROUTE: [
                    fromNode: "DECLpoint_G1_CL1"
                    fromField: "fraction_changed"
                    toNode: "DECLpoint_G1_PI1"
                    toField: "set_fraction"
                ],
                ROUTE: [
                    fromNode: "DECLpoint_G1_MB1"
                    fromField: "keyValue"
                    toNode: "DECLpoint_G1_PI1"
                    toField: "keyValue"
                ],
                ROUTE: [
                    fromNode: "DECLpoint_G1_PI1"
                    fromField: "value_changed"
                    toNode: "DECLpoint_G1_node"
                    toField: "set_translation"
                ]
            ],
            Transform: [
                DEF: "DECLpoint_G2_node"
                Shape: [
                    setGeometry: [
                        Sphere: [
                            radius: 0.1
                        ]
                    ]
                    setAppearance: [
                        Appearance: [
                            setMaterial: [
                                Material: [
                                    diffuseColor: [1, 0, 0]
                                ]
                            ]
                        ]
                    ]
                ],
                PositionInterpolator: [
                    DEF: "DECLpoint_G2_PI1"
                    key: [0, 1]
                    keyValue: [0, 0, 0, 0, 5, 0]
                ],
                Script: [
                    DEF: "DECLpoint_G2_MB1"
                    field: [
                        name: "translation"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "old"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "set_location"
                        accessType: "inputOnly"
                        type: "SFTime"
                    ],
                    field: [
                        name: "keyValue"
                        accessType: "inputOutput"
                        type: "MFVec3f"
                        value: "0 0 0 0 5 0"
                    ],
#ecmascript:
#		function set_location(value) {
#                    old = translation;
#		    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);
#                    keyValue = new MFVec3f([old, translation]);
#		    // Browser.println(keyValue);
#		}
                ],
                TimeSensor: [
                    DEF: "DECLpoint_G2_CL1"
                    cycleInterval: 3.0
                    loop: true
                ],
                ROUTE: [
                    fromNode: "DECLpoint_G2_CL1"
                    fromField: "cycleTime"
                    toNode: "DECLpoint_G2_MB1"
                    toField: "set_location"
                ],
                ROUTE: [
                    fromNode: "DECLpoint_G2_CL1"
                    fromField: "fraction_changed"
                    toNode: "DECLpoint_G2_PI1"
                    toField: "set_fraction"
                ],
                ROUTE: [
                    fromNode: "DECLpoint_G2_MB1"
                    fromField: "keyValue"
                    toNode: "DECLpoint_G2_PI1"
                    toField: "keyValue"
                ],
                ROUTE: [
                    fromNode: "DECLpoint_G2_PI1"
                    fromField: "value_changed"
                    toNode: "DECLpoint_G2_node"
                    toField: "set_translation"
                ]
            ],
            Group: [
                Transform: [
                    DEF: "DECLx3dconnector_connector1_trans"
                    Transform: [
                        DEF: "DECLx3dconnector_connector1_rotscale"
                        Shape: [
                            setAppearance: [
                                Appearance: [
                                    setMaterial: [
                                        Material: [
                                            diffuseColor: [0.2, 0.7, 0.7]
                                            transparency: 0.5
                                        ]
                                    ]
                                ]
                            ]
                            setGeometry: [
                                Cylinder: [
                                    radius: 0.05
                                ]
                            ]
                        ]
                    ]
                ],
                Script: [
                    DEF: "DECLx3dconnector_connector1_S1"
                    field: [
                        name: "startnode"
                        accessType: "initializeOnly"
                        type: "SFNode"
                    ],
                    field: [
                        name: "endnode"
                        accessType: "initializeOnly"
                        type: "SFNode"
                    ],
                    field: [
                        name: "position"
                        accessType: "inputOutput"
                        type: "SFNode"
                        Transform: [
                            USE: "DECLx3dconnector_connector1_trans"
                        ]
                    ],
                    field: [
                        name: "rotscale"
                        accessType: "inputOutput"
                        type: "SFNode"
                        Transform: [
                            USE: "DECLx3dconnector_connector1_rotscale"
                        ]
                    ],
                    field: [
                        name: "set_startpoint"
                        accessType: "inputOnly"
                        type: "SFVec3f"
                    ],
                    field: [
                        name: "set_endpoint"
                        accessType: "inputOnly"
                        type: "SFVec3f"
                    ],
#ecmascript:
#        function recompute(startpoint,endpoint){
#	    if (typeof endpoint === 'undefined') {
#		    if (typeof Quaternion !== 'undefined') {
#			    return {
#				    scale : new SFVec3f(1.0,1.0,1.0),
#				    translation : new SFVec3f(1.0,1.0,1.0),
#			    	    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), 1.0)
#			    };
#	    	    } else if (typeof SFRotation !== 'undefined') {
#			    return {
#				    scale : new SFVec3f(1.0,1.0,1.0),
#				    translation : new SFVec3f(1.0,1.0,1.0),
#			    	    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),1.0)
#			    };
#	    	    } else {
#			    return {
#				    scale : new SFVec3f(1.0,1.0,1.0),
#				    translation : new SFVec3f(1.0,1.0,1.0)
#			    };
#		    }
#	    }
#            var dif = endpoint.subtract(startpoint);
#            var dist = dif.length()*0.5;
#            var dif2 = dif.multiply(0.5);
#            var norm = dif.normalize();
#            var transl = startpoint.add(dif2);
#	    if (typeof Quaternion !== 'undefined') {
#		    return {
#			    scale : new SFVec3f(1.0,dist,1.0),
#			    translation : transl,
#			    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)
#		    };
#	    } else if (typeof SFRotation !== 'undefined') {
#		    return {
#			    scale : new SFVec3f(1.0,dist,1.0),
#			    translation : transl,
#			    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)
#		    };
#	    } else {
#		    return {
#			    scale : new SFVec3f(1.0,dist,1.0),
#			    translation : transl
#		    };
#	    }
#	}
#	function recompute_and_route(startpoint, endpoint) {
#	      var trafo = recompute(startpoint, endpoint);
#	      position.translation = trafo.translation;
#	      rotscale.rotation = trafo.rotation;
#	      rotscale.scale = trafo.scale;
#	}
#        function initialize(){
#            recompute_and_route(startnode.translation,endnode.translation);
#        }
#        function set_startpoint(val,t){
#            recompute_and_route(val,endnode.translation);
#        }
#        function set_endpoint(val,t){
#            recompute_and_route(startnode.translation,val);
#        }
                ]
            ],
            ROUTE: [
                fromNode: "DECLpoint_G1_node"
                fromField: "translation_changed"
                toNode: "DECLx3dconnector_connector1_S1"
                toField: "set_startpoint"
            ],
            ROUTE: [
                fromNode: "DECLpoint_G2_node"
                fromField: "translation_changed"
                toNode: "DECLx3dconnector_connector1_S1"
                toField: "set_endpoint"
            ]
        ]
    ]
