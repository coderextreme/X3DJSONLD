X3D:
    profile: "Immersive"
    version: "3.3"
    setHead: [
        head: [
            meta: [
                name: "title"
                content: "bubs3.x3d"
            ],
            meta: [
                name: "creator"
                content: "John Carlson"
            ],
            meta: [
                name: "description"
                content: "Tour around a prismatic sphere"
            ],
            meta: [
                name: "generator"
                content: "X3D-Edit, https://savage.nps.edu/X3D-Edit"
            ],
            meta: [
                name: "identifier"
                content: "https://coderextreme.net/X3DJSONLD/src/main/personal/bubs.x3d"
            ]
        ]
    ]
    setScene: [
        Scene: [
            NavigationInfo: [
                type: ["EXAMINE"]
            ],
            Viewpoint: [
                position: [0, 0, 4]
                orientation: [1, 0, 0, 0]
                description: "Bubbles in action"
            ],
            Background: [
                backUrl: ["../resources/images/BK.png", "https://coderextreme.net/X3DJSONLD/src/main/resources/images/BK.png"]
                bottomUrl: ["../resources/images/BT.png", "https://coderextreme.net/X3DJSONLD/src/main/resources/images/BT.png"]
                frontUrl: ["../resources/images/FR.png", "https://coderextreme.net/X3DJSONLD/src/main/resources/images/FR.png"]
                leftUrl: ["../resources/images/LF.png", "https://coderextreme.net/X3DJSONLD/src/main/resources/images/LF.png"]
                rightUrl: ["../resources/images/RT.png", "https://coderextreme.net/X3DJSONLD/src/main/resources/images/RT.png"]
                topUrl: ["../resources/images/TP.png", "https://coderextreme.net/X3DJSONLD/src/main/resources/images/TP.png"]
            ],
            Transform: [
                DEF: "DECLBubble_bubbleA"
                Shape: [
                    setGeometry: [
                        Sphere: [
                            radius: 0.25
                        ]
                    ]
                    setAppearance: [
                        Appearance: [
                            setMaterial: [
                                Material: [
                                    diffuseColor: [1, 0, 0]
                                    transparency: 0.2
                                ]
                            ]
                        ]
                    ]
                ],
                Script: [
                    DEF: "DECLBubble_bubbleA_bounce"
                    field: [
                        name: "scale"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "1 1 1"
                    ],
                    field: [
                        name: "translation"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "velocity"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "scalvel"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "set_fraction"
                        accessType: "inputOnly"
                        type: "SFFloat"
                    ],
#ecmascript:
#function initialize() {
#    velocity = new SFVec3f(Math.random() * 0.25 - 0.125, Math.random() * 0.25 - 0.125, Math.random() * 0.25 - 0.125);
#
#    scalvel = new SFVec3f(Math.random() * 0.4, Math.random() * 0.4, Math.random() * 0.4);
#}
#
#function set_fraction(value) {
#    translation = new SFVec3f(	translation.x + velocity.x, translation.y + velocity.y, translation.z + velocity.z);
#    scale = new SFVec3f(scale.x + scalvel.x, scale.y + scalvel.y, scale.z + scalvel.z);
#    // if you get to far away or too big, explode
#    if ( Math.abs(translation.x) > 256) {
#	translation.x = 0;
#	initialize();
#    }
#    if ( Math.abs(translation.y) > 256) {
#	translation.y = 0;
#	initialize();
#    }
#    if ( Math.abs(translation.z) > 256) {
#	translation.z = 0;
#	initialize();
#    }
#    if (Math.abs(scale.x) > 20) {
#	scale.x = scale.x/20;
#	translation.x = 0;
#	initialize();
#    }
#    if (Math.abs(scale.y) > 20) {
#	scale.y = scale.y/20;
#	translation.y = 0;
#	initialize();
#    }
#    if (Math.abs(scale.z) > 20) {
#	scale.z = scale.z/20;
#	translation.z = 0;
#	initialize();
#    }
#}
                ],
                TimeSensor: [
                    DEF: "DECLBubble_bubbleA_bubbleClock"
                    cycleInterval: 10.0
                    loop: true
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleA_bounce"
                    fromField: "translation_changed"
                    toNode: "DECLBubble_transform"
                    toField: "set_translation"
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleA_bounce"
                    fromField: "scale_changed"
                    toNode: "DECLBubble_transform"
                    toField: "set_scale"
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleA_bubbleClock"
                    fromField: "fraction_changed"
                    toNode: "DECLBubble_bubbleA_bounce"
                    toField: "set_fraction"
                ]
            ],
            Transform: [
                DEF: "DECLBubble_bubbleB"
                Shape: [
                    setGeometry: [
                        Sphere: [
                            radius: 0.25
                        ]
                    ]
                    setAppearance: [
                        Appearance: [
                            setMaterial: [
                                Material: [
                                    diffuseColor: [1, 0, 0]
                                    transparency: 0.2
                                ]
                            ]
                        ]
                    ]
                ],
                Script: [
                    DEF: "DECLBubble_bubbleB_bounce"
                    field: [
                        name: "scale"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "1 1 1"
                    ],
                    field: [
                        name: "translation"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "velocity"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "scalvel"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "set_fraction"
                        accessType: "inputOnly"
                        type: "SFFloat"
                    ],
#ecmascript:
#function initialize() {
#    velocity = new SFVec3f(Math.random() * 0.25 - 0.125, Math.random() * 0.25 - 0.125, Math.random() * 0.25 - 0.125);
#
#    scalvel = new SFVec3f(Math.random() * 0.4, Math.random() * 0.4, Math.random() * 0.4);
#}
#
#function set_fraction(value) {
#    translation = new SFVec3f(	translation.x + velocity.x, translation.y + velocity.y, translation.z + velocity.z);
#    scale = new SFVec3f(scale.x + scalvel.x, scale.y + scalvel.y, scale.z + scalvel.z);
#    // if you get to far away or too big, explode
#    if ( Math.abs(translation.x) > 256) {
#	translation.x = 0;
#	initialize();
#    }
#    if ( Math.abs(translation.y) > 256) {
#	translation.y = 0;
#	initialize();
#    }
#    if ( Math.abs(translation.z) > 256) {
#	translation.z = 0;
#	initialize();
#    }
#    if (Math.abs(scale.x) > 20) {
#	scale.x = scale.x/20;
#	translation.x = 0;
#	initialize();
#    }
#    if (Math.abs(scale.y) > 20) {
#	scale.y = scale.y/20;
#	translation.y = 0;
#	initialize();
#    }
#    if (Math.abs(scale.z) > 20) {
#	scale.z = scale.z/20;
#	translation.z = 0;
#	initialize();
#    }
#}
                ],
                TimeSensor: [
                    DEF: "DECLBubble_bubbleB_bubbleClock"
                    cycleInterval: 10.0
                    loop: true
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleB_bounce"
                    fromField: "translation_changed"
                    toNode: "DECLBubble_transform"
                    toField: "set_translation"
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleB_bounce"
                    fromField: "scale_changed"
                    toNode: "DECLBubble_transform"
                    toField: "set_scale"
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleB_bubbleClock"
                    fromField: "fraction_changed"
                    toNode: "DECLBubble_bubbleB_bounce"
                    toField: "set_fraction"
                ]
            ],
            Transform: [
                DEF: "DECLBubble_bubbleC"
                Shape: [
                    setGeometry: [
                        Sphere: [
                            radius: 0.25
                        ]
                    ]
                    setAppearance: [
                        Appearance: [
                            setMaterial: [
                                Material: [
                                    diffuseColor: [1, 0, 0]
                                    transparency: 0.2
                                ]
                            ]
                        ]
                    ]
                ],
                Script: [
                    DEF: "DECLBubble_bubbleC_bounce"
                    field: [
                        name: "scale"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "1 1 1"
                    ],
                    field: [
                        name: "translation"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "velocity"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "scalvel"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "set_fraction"
                        accessType: "inputOnly"
                        type: "SFFloat"
                    ],
#ecmascript:
#function initialize() {
#    velocity = new SFVec3f(Math.random() * 0.25 - 0.125, Math.random() * 0.25 - 0.125, Math.random() * 0.25 - 0.125);
#
#    scalvel = new SFVec3f(Math.random() * 0.4, Math.random() * 0.4, Math.random() * 0.4);
#}
#
#function set_fraction(value) {
#    translation = new SFVec3f(	translation.x + velocity.x, translation.y + velocity.y, translation.z + velocity.z);
#    scale = new SFVec3f(scale.x + scalvel.x, scale.y + scalvel.y, scale.z + scalvel.z);
#    // if you get to far away or too big, explode
#    if ( Math.abs(translation.x) > 256) {
#	translation.x = 0;
#	initialize();
#    }
#    if ( Math.abs(translation.y) > 256) {
#	translation.y = 0;
#	initialize();
#    }
#    if ( Math.abs(translation.z) > 256) {
#	translation.z = 0;
#	initialize();
#    }
#    if (Math.abs(scale.x) > 20) {
#	scale.x = scale.x/20;
#	translation.x = 0;
#	initialize();
#    }
#    if (Math.abs(scale.y) > 20) {
#	scale.y = scale.y/20;
#	translation.y = 0;
#	initialize();
#    }
#    if (Math.abs(scale.z) > 20) {
#	scale.z = scale.z/20;
#	translation.z = 0;
#	initialize();
#    }
#}
                ],
                TimeSensor: [
                    DEF: "DECLBubble_bubbleC_bubbleClock"
                    cycleInterval: 10.0
                    loop: true
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleC_bounce"
                    fromField: "translation_changed"
                    toNode: "DECLBubble_transform"
                    toField: "set_translation"
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleC_bounce"
                    fromField: "scale_changed"
                    toNode: "DECLBubble_transform"
                    toField: "set_scale"
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleC_bubbleClock"
                    fromField: "fraction_changed"
                    toNode: "DECLBubble_bubbleC_bounce"
                    toField: "set_fraction"
                ]
            ],
            Transform: [
                DEF: "DECLBubble_bubbleD"
                Shape: [
                    setGeometry: [
                        Sphere: [
                            radius: 0.25
                        ]
                    ]
                    setAppearance: [
                        Appearance: [
                            setMaterial: [
                                Material: [
                                    diffuseColor: [1, 0, 0]
                                    transparency: 0.2
                                ]
                            ]
                        ]
                    ]
                ],
                Script: [
                    DEF: "DECLBubble_bubbleD_bounce"
                    field: [
                        name: "scale"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "1 1 1"
                    ],
                    field: [
                        name: "translation"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "velocity"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "scalvel"
                        accessType: "inputOutput"
                        type: "SFVec3f"
                        value: "0 0 0"
                    ],
                    field: [
                        name: "set_fraction"
                        accessType: "inputOnly"
                        type: "SFFloat"
                    ],
#ecmascript:
#function initialize() {
#    velocity = new SFVec3f(Math.random() * 0.25 - 0.125, Math.random() * 0.25 - 0.125, Math.random() * 0.25 - 0.125);
#
#    scalvel = new SFVec3f(Math.random() * 0.4, Math.random() * 0.4, Math.random() * 0.4);
#}
#
#function set_fraction(value) {
#    translation = new SFVec3f(	translation.x + velocity.x, translation.y + velocity.y, translation.z + velocity.z);
#    scale = new SFVec3f(scale.x + scalvel.x, scale.y + scalvel.y, scale.z + scalvel.z);
#    // if you get to far away or too big, explode
#    if ( Math.abs(translation.x) > 256) {
#	translation.x = 0;
#	initialize();
#    }
#    if ( Math.abs(translation.y) > 256) {
#	translation.y = 0;
#	initialize();
#    }
#    if ( Math.abs(translation.z) > 256) {
#	translation.z = 0;
#	initialize();
#    }
#    if (Math.abs(scale.x) > 20) {
#	scale.x = scale.x/20;
#	translation.x = 0;
#	initialize();
#    }
#    if (Math.abs(scale.y) > 20) {
#	scale.y = scale.y/20;
#	translation.y = 0;
#	initialize();
#    }
#    if (Math.abs(scale.z) > 20) {
#	scale.z = scale.z/20;
#	translation.z = 0;
#	initialize();
#    }
#}
                ],
                TimeSensor: [
                    DEF: "DECLBubble_bubbleD_bubbleClock"
                    cycleInterval: 10.0
                    loop: true
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleD_bounce"
                    fromField: "translation_changed"
                    toNode: "DECLBubble_transform"
                    toField: "set_translation"
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleD_bounce"
                    fromField: "scale_changed"
                    toNode: "DECLBubble_transform"
                    toField: "set_scale"
                ],
                ROUTE: [
                    fromNode: "DECLBubble_bubbleD_bubbleClock"
                    fromField: "fraction_changed"
                    toNode: "DECLBubble_bubbleD_bounce"
                    toField: "set_fraction"
                ]
            ]
        ]
    ]
