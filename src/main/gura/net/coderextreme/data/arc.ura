X3D:
    profile: "Immersive"
    version: "3.3"
    head:
        meta: [
            name: "title"
            content: "arc.x3d"
        ],
        meta: [
            name: "creator"
            content: "Lost, Doug Sanden I think"
        ],
        meta: [
            name: "generator"
            content: "manual"
        ],
        meta: [
            name: "identifier"
            content: "https://coderextreme.net/X3DJSONLD/src/main/data/arc.x3d"
        ],
        meta: [
            name: "description"
            content: "a generic proto to connect two objects"
        ]
    Scene:
        Viewpoint: [
            position: [0, 0, 5]
            description: "Only Viewpoint"
        ],
        Background: [
            skyColor: [0.4, 0.4, 0.4]
        ],
        ProtoDeclare: [
            name: "point"
            ProtoInterface:
                field: [
                    name: "translation"
                    accessType: "inputOutput"
                    type: "SFVec3f"
                    value: "0 0 0"
                ]
            ProtoBody:
                Transform: [
                    DEF: "node"
                    IS: [
                        connect: [
                            nodeField: "translation"
                            protoField: "translation"
                        ]
                    ],
                    Shape: [
                        Sphere:
                            radius: 0.1
                        Appearance:
                            Material:
                                diffuseColor: [1, 0, 0]
                    ],
                    PositionInterpolator: [
                        DEF: "PI1"
                        key: [0, 1]
                        keyValue: [0, 0, 0, 0, 5, 0]
                    ],
                    Script: [
                        DEF: "MB1"
                        field: [
                            name: "translation"
                            accessType: "inputOutput"
                            type: "SFVec3f"
                            value: "50 50 0"
                        ],
                        field: [
                            name: "old"
                            accessType: "inputOutput"
                            type: "SFVec3f"
                            value: "0 0 0"
                        ],
                        field: [
                            name: "set_location"
                            accessType: "inputOnly"
                            type: "SFTime"
                        ],
                        field: [
                            name: "keyValue"
                            accessType: "inputOutput"
                            type: "MFVec3f"
                            value: "0 0 0 0 5 0"
                        ],
#ecmascript:
#		function set_location(value) {
#                    old = translation;
#		    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);
#                    keyValue = new MFVec3f([old, translation]);
#		    // Browser.println(keyValue);
#		}
                    ],
                    TimeSensor: [
                        DEF: "CL1"
                        cycleInterval: 3.0
                        loop: true
                    ],
                    ROUTE: [
                        fromNode: "CL1"
                        fromField: "cycleTime"
                        toNode: "MB1"
                        toField: "set_location"
                    ],
                    ROUTE: [
                        fromNode: "CL1"
                        fromField: "fraction_changed"
                        toNode: "PI1"
                        toField: "set_fraction"
                    ],
                    ROUTE: [
                        fromNode: "MB1"
                        fromField: "keyValue"
                        toNode: "PI1"
                        toField: "keyValue"
                    ],
                    ROUTE: [
                        fromNode: "PI1"
                        fromField: "value_changed"
                        toNode: "node"
                        toField: "set_translation"
                    ]
                ]
        ],
        ProtoDeclare: [
            name: "x3dconnector"
            ProtoInterface:
                field: [
                    name: "startnode"
                    accessType: "initializeOnly"
                    type: "SFNode"
                ],
                field: [
                    name: "endnode"
                    accessType: "initializeOnly"
                    type: "SFNode"
                ],
                field: [
                    name: "set_startpoint"
                    accessType: "inputOnly"
                    type: "SFVec3f"
                ],
                field: [
                    name: "set_endpoint"
                    accessType: "inputOnly"
                    type: "SFVec3f"
                ]
            ProtoBody:
                Group: [
                    Transform: [
                        DEF: "trans"
                        Transform: [
                            DEF: "rotscale"
                            Shape: [
                                Appearance:
                                    Material:
                                        diffuseColor: [0.2, 0.7, 0.7]
                                        transparency: 0.5
                                Cylinder:
                                    radius: 0.05
                            ]
                        ]
                    ],
                    Script: [
                        DEF: "S1"
                        field: [
                            name: "startnode"
                            accessType: "initializeOnly"
                            type: "SFNode"
                        ],
                        field: [
                            name: "endnode"
                            accessType: "initializeOnly"
                            type: "SFNode"
                        ],
                        field: [
                            name: "position"
                            accessType: "inputOutput"
                            type: "SFNode"
                            Transform: [
                                USE: "trans"
                            ]
                        ],
                        field: [
                            name: "rotscale"
                            accessType: "inputOutput"
                            type: "SFNode"
                            Transform: [
                                USE: "rotscale"
                            ]
                        ],
                        field: [
                            name: "set_startpoint"
                            accessType: "inputOnly"
                            type: "SFVec3f"
                        ],
                        field: [
                            name: "set_endpoint"
                            accessType: "inputOnly"
                            type: "SFVec3f"
                        ],
                        IS: [
                            connect: [
                                nodeField: "startnode"
                                protoField: "startnode"
                            ],
                            connect: [
                                nodeField: "endnode"
                                protoField: "endnode"
                            ],
                            connect: [
                                nodeField: "set_startpoint"
                                protoField: "set_startpoint"
                            ],
                            connect: [
                                nodeField: "set_endpoint"
                                protoField: "set_endpoint"
                            ]
                        ],
#ecmascript:
#        function recompute(startpoint,endpoint){
#	    if (typeof endpoint === 'undefined') {
#		return;
#	    }
#            var dif = endpoint.subtract(startpoint);
#            var dist = dif.length()*0.5;
#            var dif2 = dif.multiply(0.5);
#            var norm = dif.normalize();
#            var transl = startpoint.add(dif2);
#	    if (typeof Quaternion !== 'undefined') {
#		    return {
#			    scale : new SFVec3f(1.0,dist,1.0),
#			    translation : transl,
#			    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)
#		    };
#	    } else if (typeof SFRotation !== 'undefined') {
#		    return {
#			    scale : new SFVec3f(1.0,dist,1.0),
#			    translation : transl,
#			    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)
#		    };
#	    } else {
#		    return {
#			    scale : new SFVec3f(1.0,dist,1.0),
#			    translation : transl
#		    };
#	    }
#	}
#	function recompute_and_route(startpoint, endpoint) {
#	      var trafo = recompute(startpoint, endpoint);
#	      if (trafo) {
#		      position.translation = trafo.translation;
#		      rotscale.rotation = trafo.rotation;
#		      rotscale.scale = trafo.scale;
#	      }
#	}
#        function initialize(){
#            recompute_and_route(startnode.translation,endnode.translation);
#        }
#        function set_startpoint(val,t){
#            recompute_and_route(val,endnode.translation);
#        }
#        function set_endpoint(val,t){
#            recompute_and_route(startnode.translation,val);
#        }
                    ]
                ]
        ],
        ProtoInstance: [
            name: "point"
            DEF: "G1"
        ],
        ProtoInstance: [
            name: "point"
            DEF: "G2"
        ],
        ProtoInstance: [
            name: "point"
            DEF: "G3"
        ],
        ProtoInstance: [
            name: "point"
            DEF: "G4"
        ],
        ProtoInstance: [
            name: "x3dconnector"
            DEF: "connector1"
            fieldValue: [
                name: "startnode"
                ProtoInstance: [
                    USE: "G1"
                ]
            ],
            fieldValue: [
                name: "endnode"
                ProtoInstance: [
                    USE: "G2"
                ]
            ],
            fieldValue: [
                name: "set_startpoint"
            ],
            fieldValue: [
                name: "set_endpoint"
            ]
        ],
        ProtoInstance: [
            name: "x3dconnector"
            DEF: "connector2"
            fieldValue: [
                name: "startnode"
                ProtoInstance: [
                    USE: "G1"
                ]
            ],
            fieldValue: [
                name: "endnode"
                ProtoInstance: [
                    USE: "G3"
                ]
            ],
            fieldValue: [
                name: "set_startpoint"
            ],
            fieldValue: [
                name: "set_endpoint"
            ]
        ],
        ProtoInstance: [
            name: "x3dconnector"
            DEF: "connector3"
            fieldValue: [
                name: "startnode"
                ProtoInstance: [
                    USE: "G1"
                ]
            ],
            fieldValue: [
                name: "endnode"
                ProtoInstance: [
                    USE: "G4"
                ]
            ],
            fieldValue: [
                name: "set_startpoint"
            ],
            fieldValue: [
                name: "set_endpoint"
            ]
        ],
        ROUTE: [
            fromNode: "G1"
            fromField: "translation"
            toNode: "connector1"
            toField: "set_startpoint"
        ],
        ROUTE: [
            fromNode: "G2"
            fromField: "translation"
            toNode: "connector1"
            toField: "set_endpoint"
        ],
        ROUTE: [
            fromNode: "G1"
            fromField: "translation"
            toNode: "connector2"
            toField: "set_startpoint"
        ],
        ROUTE: [
            fromNode: "G3"
            fromField: "translation"
            toNode: "connector2"
            toField: "set_endpoint"
        ],
        ROUTE: [
            fromNode: "G1"
            fromField: "translation"
            toNode: "connector3"
            toField: "set_startpoint"
        ],
        ROUTE: [
            fromNode: "G4"
            fromField: "translation"
            toNode: "connector3"
            toField: "set_endpoint"
        ]
