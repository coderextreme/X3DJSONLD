X3D:
    profile: "Immersive"
    version: "3.3"
    head: [
        meta: [
            name: "creator"
            content: "John W Carlson"
        ]
        meta: [
            name: "created"
            content: "December 13 2015"
        ]
        meta: [
            name: "title"
            content: "forcenode.x3d"
        ]
        meta: [
            name: "identifier"
            content: "https://coderextreme.net/X3DJSONLD/src/main/data/force.x3d"
        ]
        meta: [
            name: "description"
            content: "beginnings of a force directed graph in 3D"
        ]
        meta: [
            name: "generator"
            content: "Vim, X3D-Edit, https://savage.nps.edu/X3D-Edit"
        ]
    ]
    Scene: [
        ProtoDeclare: [
            name: "node"
            ProtoInterface: [
                field: [
                    name: "position"
                    accessType: "inputOutput"
                    type: "SFVec3f"
                    value: "0 0 0"
                ]
            ]
            ProtoBody: [
                Group: [
                    Transform: [
                        DEF: "transform"
                        IS: [
                            connect: [
                                nodeField: "translation"
                                protoField: "position"
                            ]
                        ]
                        Shape: [
                            Sphere: [
                            ]
                            Appearance: [
                                Material: [
                                    diffuseColor: [1, 0, 0]
                                ]
                            ]
                        ]
                        Transform: [
                            translation: [1, 0, 1]
                            Shape: [
                                Text: [
                                    string: ["Node"]
                                    FontStyle: [
                                        justify: ["MIDDLE", "MIDDLE"]
                                        size: 5.0
                                    ]
                                ]
                                Appearance: [
                                    Material: [
                                        diffuseColor: [0, 0, 1]
                                    ]
                                ]
                            ]
                        ]
                    ]
                    PositionInterpolator: [
                        DEF: "NodePosition"
                        key: [0, 1]
                        keyValue: [0, 0, 0, 0, 5, 0]
                    ]
                    Script: [
                        DEF: "MoveBall"
                        field: [
                            name: "translation"
                            accessType: "inputOutput"
                            type: "SFVec3f"
                            value: "50 50 0"
                        ]
                        field: [
                            name: "old"
                            accessType: "inputOutput"
                            type: "SFVec3f"
                            value: "0 0 0"
                        ]
                        field: [
                            name: "set_cycle"
                            accessType: "inputOnly"
                            type: "SFTime"
                        ]
                        field: [
                            name: "keyValue"
                            accessType: "outputOnly"
                            type: "MFVec3f"
                        ]
(.setSourceCode "\\newline					function set_cycle(value) {\\newline                                                old = translation;\\newline						translation = new SFVec3f(Math.random()*100-50, Math.random()*100-50, Math.random()*100-50);\\newline                                                keyValue = new MFVec3f(...[old, translation]);\\newline						// Browser.println(translation);\\newline					}\\newline")                    ]
                    TimeSensor: [
                        DEF: "nodeClock"
                        cycleInterval: 3.0
                        loop: true
                    ]
                    ROUTE: [
                        fromNode: "nodeClock"
                        fromField: "cycleTime"
                        toNode: "MoveBall"
                        toField: "set_cycle"
                    ]
                    ROUTE: [
                        fromNode: "nodeClock"
                        fromField: "fraction_changed"
                        toNode: "NodePosition"
                        toField: "set_fraction"
                    ]
                    ROUTE: [
                        fromNode: "MoveBall"
                        fromField: "keyValue"
                        toNode: "NodePosition"
                        toField: "keyValue"
                    ]
                    ROUTE: [
                        fromNode: "NodePosition"
                        fromField: "value_changed"
                        toNode: "transform"
                        toField: "set_translation"
                    ]
                ]
            ]
        ]
        ProtoDeclare: [
            name: "cylinder"
            ProtoInterface: [
                field: [
                    name: "set_positionA"
                    accessType: "inputOnly"
                    type: "SFVec3f"
                ]
                field: [
                    name: "set_positionB"
                    accessType: "inputOnly"
                    type: "SFVec3f"
                ]
            ]
            ProtoBody: [
                Group: [
                    Shape: [
                        Extrusion: [
                            DEF: "extrusion"
                            creaseAngle: 0.785
                            crossSection: [1, 0, 0.92, -0.38, 0.71, -0.71, 0.38, -0.92, 0, -1, -0.38, -0.92, -0.71, -0.71, -0.92, -0.38, -1, 0, -0.92, 0.38, -0.71, 0.71, -0.38, 0.92, 0, 1, 0.38, 0.92, 0.71, 0.71, 0.92, 0.38, 1, 0]
                            spine: [0, -50, 0, 0, 50, 0]
                        ]
                        Appearance: [
                            Material: [
                                diffuseColor: [0, 1, 0]
                            ]
                        ]
                    ]
                    Script: [
                        DEF: "MoveCylinder"
                        field: [
                            name: "spine"
                            accessType: "inputOutput"
                            type: "MFVec3f"
                            value: "0 -50 0 0 50 0"
                        ]
                        field: [
                            name: "set_endA"
                            accessType: "inputOnly"
                            type: "SFVec3f"
                        ]
                        field: [
                            name: "set_endB"
                            accessType: "inputOnly"
                            type: "SFVec3f"
                        ]
                        IS: [
                            connect: [
                                nodeField: "set_endA"
                                protoField: "set_positionA"
                            ]
                            connect: [
                                nodeField: "set_endB"
                                protoField: "set_positionB"
                            ]
                        ]
(.setSourceCode "\\newline\\newline                function set_endA(value) {\\newline		    if (typeof spine === 'undefined') {\\newline		        spine = new MFVec3f(...[value, value]);\\newline		    } else {\\newline		        spine = new MFVec3f(...[value, spine[1]]);\\newline		    }\\newline                }\\newline\\newline                function set_endB(value) {\\newline		    if (typeof spine === 'undefined') {\\newline		        spine = new MFVec3f(...[value, value]);\\newline		    } else {\\newline		        spine = new MFVec3f(...[spine[0], value]);\\newline		    }\\newline                }\\newline\\newline                function set_spine(value) {\\newline                    spine = value;\\newline                }\\newline")                    ]
                    ROUTE: [
                        fromNode: "MoveCylinder"
                        fromField: "spine"
                        toNode: "extrusion"
                        toField: "set_spine"
                    ]
                ]
            ]
        ]
        Transform: [
            DEF: "HoldsContent"
            scale: [0.1, 0.1, 0.1]
            PlaneSensor: [
                DEF: "clickGenerator"
                minPosition: [-50, -50]
                maxPosition: [50, 50]
                description: "click on background to add nodes, click on nodes to add links"
            ]
            ProtoInstance: [
                name: "node"
                DEF: "nodeA"
                fieldValue: [
                    name: "position"
                    value: "0 0 0"
                ]
            ]
            ProtoInstance: [
                name: "node"
                DEF: "nodeB"
                fieldValue: [
                    name: "position"
                    value: "50 50 50"
                ]
            ]
            ProtoInstance: [
                name: "node"
                DEF: "nodeC"
                fieldValue: [
                    name: "position"
                    value: "-50 -50 -50"
                ]
            ]
            ProtoInstance: [
                name: "node"
                DEF: "nodeD"
                fieldValue: [
                    name: "position"
                    value: "50 50 -50"
                ]
            ]
            ProtoInstance: [
                name: "cylinder"
                DEF: "linkA"
                fieldValue: [
                    name: "set_positionA"
                    value: "0 0 0"
                ]
                fieldValue: [
                    name: "set_positionB"
                    value: "50 50 50"
                ]
            ]
            ProtoInstance: [
                name: "cylinder"
                DEF: "linkB"
                fieldValue: [
                    name: "set_positionA"
                    value: "0 0 0"
                ]
                fieldValue: [
                    name: "set_positionB"
                    value: "-50 -50 -50"
                ]
            ]
            ProtoInstance: [
                name: "cylinder"
                DEF: "linkC"
                fieldValue: [
                    name: "set_positionA"
                    value: "50 50 50"
                ]
                fieldValue: [
                    name: "set_positionB"
                    value: "50 50 -50"
                ]
            ]
        ]
        Script: [
            DEF: "clickHandler"
            field: [
                name: "counter"
                accessType: "inputOutput"
                value: "0"
                type: "SFInt32"
            ]
            field: [
                name: "node_changed"
                accessType: "outputOnly"
                type: "SFNode"
            ]
            field: [
                name: "add_node"
                accessType: "inputOnly"
                value: "false"
                type: "SFBool"
            ]
#<field name=\"ModifiableNode\" type=\"SFNode\" accessType=\"inputOutput\"> <Transform USE=\"HoldsContent\"/> </field>
(.setSourceCode "\\newline	function add_node(value) {\\newline                // Browser.print('hey ', counter);\\newline                counter = counter++;\\newline		Browser.appendTo(Browser.getDocument().querySelector(\"field [name=ModifiableNode]\"),\\newline			{ \"ProtoInstance\":\\newline				{ \"@name\":\"node\",\\newline				  \"@DEF\":\"node'+counter+'\",\\newline				  \"fieldValue\": [\\newline					{\\newline						 \"@name\":\"position\",\\newline						 \"@value\":[0.0,0.0,0.0]\\newline					}\\newline				  ]\\newline				}\\newline			});\\newline\\newline        }\\newline")        ]
        ROUTE: [
            fromNode: "clickGenerator"
            fromField: "isActive"
            toNode: "clickHandler"
            toField: "add_node"
        ]
        ROUTE: [
            fromNode: "nodeA"
            fromField: "position"
            toNode: "linkA"
            toField: "set_positionA"
        ]
        ROUTE: [
            fromNode: "nodeB"
            fromField: "position"
            toNode: "linkA"
            toField: "set_positionB"
        ]
        ROUTE: [
            fromNode: "nodeA"
            fromField: "position"
            toNode: "linkB"
            toField: "set_positionA"
        ]
        ROUTE: [
            fromNode: "nodeC"
            fromField: "position"
            toNode: "linkB"
            toField: "set_positionB"
        ]
        ROUTE: [
            fromNode: "nodeA"
            fromField: "position"
            toNode: "linkC"
            toField: "set_positionA"
        ]
        ROUTE: [
            fromNode: "nodeD"
            fromField: "position"
            toNode: "linkC"
            toField: "set_positionB"
        ]
    ]
