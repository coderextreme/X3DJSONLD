X3D:
    profile: "Immersive"
    version: "4.0"
    setHead: [
        head: [
            component: [
                name: "Scripting"
                level: 1
            ],
            meta: [
                name: "creator"
                content: "John W Carlson"
            ],
            meta: [
                name: "created"
                content: "December 13 2015"
            ],
            meta: [
                name: "title"
                content: "force.x3d"
            ],
            meta: [
                name: "identifier"
                content: "https://coderextreme.net/X3DJSONLD/src/main/data/force.x3d"
            ],
            meta: [
                name: "description"
                content: "beginnings of a force directed graph in 3D"
            ],
            meta: [
                name: "generator"
                content: "Vim, X3D-Edit, https://savage.nps.edu/X3D-Edit"
            ],
            meta: [
                name: "generator"
                content: "x3d-tidy V1.0.175, https://www.npmjs.com/package/x3d-tidy"
            ],
            meta: [
                name: "modified"
                content: "Sat, 9 Nov 2024 19:29:39 GMT"
            ]
        ]
    ]
    setScene: [
        Scene: [
            ProtoDeclare: [
                name: "node"
                setProtoInterface: [
                    ProtoInterface: [
                        field: [
                            name: "position"
                            accessType: "inputOutput"
                            type: "SFVec3f"
                        ]
                    ]
                ]
                setProtoBody: [
                    ProtoBody: [
                        Group: [
                            Transform: [
                                DEF: "transform"
                                IS: [
                                    connect: [
                                        nodeField: "translation"
                                        protoField: "position"
                                    ]
                                ],
                                Shape: [
                                    setAppearance: [
                                        Appearance: [
                                            setMaterial: [
                                                Material: [
                                                    diffuseColor: [1, 0, 0]
                                                ]
                                            ]
                                        ]
                                    ]
                                    setGeometry: [
                                        Sphere: [ empty
                                        ]
                                    ]
                                ],
                                Transform: [
                                    translation: [1, 0, 0]
                                    Shape: [
                                        setAppearance: [
                                            Appearance: [
                                                setMaterial: [
                                                    Material: [
                                                        diffuseColor: [0, 0, 1]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        setGeometry: [
                                            Text: [
                                                string: ["Node"]
                                                setFontStyle: [
                                                    FontStyle: [
                                                        size: 5.0
                                                        justify: ["MIDDLE", "MIDDLE"]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ],
                            PositionInterpolator: [
                                DEF: "NodePosition"
                                key: [0, 1]
                                keyValue: [0, 0, 0, 0, 5, 0]
                            ],
                            Script: [
                                DEF: "MoveBall"
                                field: [
                                    name: "translation"
                                    accessType: "inputOutput"
                                    type: "SFVec3f"
                                    value: "50 50 0"
                                ],
                                field: [
                                    name: "old"
                                    accessType: "inputOutput"
                                    type: "SFVec3f"
                                ],
                                field: [
                                    name: "set_cycle"
                                    accessType: "inputOnly"
                                    type: "SFTime"
                                ],
                                field: [
                                    name: "keyValue"
                                    accessType: "outputOnly"
                                    type: "MFVec3f"
                                ],
#ecmascript:
#					function set_cycle(value) {
#                                                old = translation;
#						translation = new SFVec3f(Math.random()*100-50, Math.random()*100-50, Math.random()*100-50);
#		    				/*
#                                                var tmpkeyValue = new MFVec3f();
#			    			tmpkeyValue[0] = old;
#			    			tmpkeyValue[1] = translation;
#                                                keyValue = tmpkeyValue;
#		    				*/
#                                                keyValue = new MFVec3f([old, translation]);
#			    		
#						// Browser.println(translation);
#					}
                            ],
                            TimeSensor: [
                                DEF: "nodeClock"
                                cycleInterval: 3.0
                                loop: true
                            ]
                        ],
                        ROUTE: [
                            fromNode: "nodeClock"
                            fromField: "cycleTime"
                            toNode: "MoveBall"
                            toField: "set_cycle"
                        ],
                        ROUTE: [
                            fromNode: "nodeClock"
                            fromField: "fraction_changed"
                            toNode: "NodePosition"
                            toField: "set_fraction"
                        ],
                        ROUTE: [
                            fromNode: "MoveBall"
                            fromField: "keyValue"
                            toNode: "NodePosition"
                            toField: "set_keyValue"
                        ],
                        ROUTE: [
                            fromNode: "NodePosition"
                            fromField: "value_changed"
                            toNode: "transform"
                            toField: "set_translation"
                        ]
                    ]
                ]
            ],
            ProtoDeclare: [
                name: "cyl"
                setProtoInterface: [
                    ProtoInterface: [
                        field: [
                            name: "set_positionA"
                            accessType: "inputOnly"
                            type: "SFVec3f"
                        ],
                        field: [
                            name: "set_positionB"
                            accessType: "inputOnly"
                            type: "SFVec3f"
                        ]
                    ]
                ]
                setProtoBody: [
                    ProtoBody: [
                        Group: [
                            Shape: [
                                setAppearance: [
                                    Appearance: [
                                        setMaterial: [
                                            Material: [
                                                diffuseColor: [0, 1, 0]
                                            ]
                                        ]
                                    ]
                                ]
                                setGeometry: [
                                    Extrusion: [
                                        DEF: "extrusion"
                                        creaseAngle: 0.785
                                        crossSection: [1, 0, 0.92, -0.38, 0.71, -0.71, 0.38, -0.92, 0, -1, -0.38, -0.92, -0.71, -0.71, -0.92, -0.38, -1, 0, -0.92, 0.38, -0.71, 0.71, -0.38, 0.92, 0, 1, 0.38, 0.92, 0.71, 0.71, 0.92, 0.38, 1, 0]
                                        spine: [0, -50, 0, 0, 50, 0]
                                    ]
                                ]
                            ],
                            Script: [
                                DEF: "MoveCylinder"
                                field: [
                                    name: "spine"
                                    accessType: "inputOutput"
                                    type: "MFVec3f"
                                    value: "0 -50 0 0 50 0"
                                ],
                                field: [
                                    name: "set_endA"
                                    accessType: "inputOnly"
                                    type: "SFVec3f"
                                ],
                                field: [
                                    name: "set_endB"
                                    accessType: "inputOnly"
                                    type: "SFVec3f"
                                ],
                                IS: [
                                    connect: [
                                        nodeField: "set_endA"
                                        protoField: "set_positionA"
                                    ],
                                    connect: [
                                        nodeField: "set_endB"
                                        protoField: "set_positionB"
                                    ]
                                ],
#ecmascript:
#
#                function set_endA(value) {
#		    if (typeof spine === 'undefined') {
#		    	/*
#		        var tmpspine = new MFVec3f();
#			tmpspine[0] = value;
#			tmpspine[1] = value;
#			spine = tmpspine;
#		    	*/
#		        spine = new MFVec3f([value, value]);
#		    } else {
#		    	/*
#		        var tmpspine = new MFVec3f();
#			tmpspine[0] = value;
#			tmpspine[1] = spine[1];
#			spine = tmpspine;
#		        */
#		        spine = new MFVec3f([value, spine[1]]);
#		    }
#                }
#
#                function set_endB(value) {
#		    if (typeof spine === 'undefined') {
#		    	/*
#		        var tmpspine = new MFVec3f();
#			tmpspine[0] = value;
#			tmpspine[1] = value;
#			spine = tmpspine;
#		        */
#		        spine = new MFVec3f([value, value]);
#		    } else {
#		    	/*
#		        var tmpspine = new MFVec3f();
#			tmpspine[0] = spine[0];
#			tmpspine[1] = value;
#			spine = tmpspine;
#		    	*/
#		        spine = new MFVec3f([spine[0], value]);
#		    }
#                }
#
#                function set_spine(value) {
#                    spine = value;
#                }
                            ]
                        ],
                        ROUTE: [
                            fromNode: "MoveCylinder"
                            fromField: "spine_changed"
                            toNode: "extrusion"
                            toField: "set_spine"
                        ]
                    ]
                ]
            ],
            Transform: [
                DEF: "HoldsContent"
                scale: [0.1, 0.1, 0.1]
                PlaneSensor: [
                    DEF: "clickGenerator"
                    description: "click on background to add nodes, click on nodes to add links"
                    minPosition: [-50, -50]
                    maxPosition: [50, 50]
                ],
                ProtoInstance: [
                    name: "node"
                    DEF: "nodeA"
                    fieldValue: [
                        name: "position"
                        value: "0 1.388333 0"
                    ]
                ],
                ProtoInstance: [
                    name: "node"
                    DEF: "nodeB"
                    fieldValue: [
                        name: "position"
                        value: "0 1.388333 0"
                    ]
                ],
                ProtoInstance: [
                    name: "node"
                    DEF: "nodeC"
                    fieldValue: [
                        name: "position"
                        value: "0 1.388333 0"
                    ]
                ],
                ProtoInstance: [
                    name: "node"
                    DEF: "nodeD"
                    fieldValue: [
                        name: "position"
                        value: "0 1.388333 0"
                    ]
                ],
                ProtoInstance: [
                    name: "cyl"
                    DEF: "linkA"
                ],
                ProtoInstance: [
                    name: "cyl"
                    DEF: "linkB"
                ],
                ProtoInstance: [
                    name: "cyl"
                    DEF: "linkC"
                ]
            ],
            Script: [
                DEF: "clickHandler"
                field: [
                    name: "counter"
                    accessType: "inputOutput"
                    type: "SFInt32"
                ],
                field: [
                    name: "node_changed"
                    accessType: "outputOnly"
                    type: "SFNode"
                ],
                field: [
                    name: "add_node"
                    accessType: "inputOnly"
                    type: "SFBool"
                ],
#ecmascript:
#	function add_node(value) {
#                // Browser.print('hey ', counter);
#                counter = counter++;
#		Browser.appendTo(Browser.getDocument().querySelector("field [name=ModifiableNode]"),
#			{ "ProtoInstance":
#				{ "@name":"node",
#				  "@DEF":"node'+counter+'",
#				  "fieldValue": [
#					{
#						 "@name":"position",
#						 "@value":[0.0,0.0,0.0]
#					}
#				  ]
#				}
#			});
#
#        }
            ],
            ROUTE: [
                fromNode: "clickGenerator"
                fromField: "isActive"
                toNode: "clickHandler"
                toField: "add_node"
            ],
            ROUTE: [
                fromNode: "nodeA"
                fromField: "position_changed"
                toNode: "linkA"
                toField: "set_positionA"
            ],
            ROUTE: [
                fromNode: "nodeB"
                fromField: "position_changed"
                toNode: "linkA"
                toField: "set_positionB"
            ],
            ROUTE: [
                fromNode: "nodeA"
                fromField: "position_changed"
                toNode: "linkB"
                toField: "set_positionA"
            ],
            ROUTE: [
                fromNode: "nodeC"
                fromField: "position_changed"
                toNode: "linkB"
                toField: "set_positionB"
            ],
            ROUTE: [
                fromNode: "nodeA"
                fromField: "position_changed"
                toNode: "linkC"
                toField: "set_positionA"
            ],
            ROUTE: [
                fromNode: "nodeD"
                fromField: "position_changed"
                toNode: "linkC"
                toField: "set_positionB"
            ]
        ]
    ]
