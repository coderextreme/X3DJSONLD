{ "X3D": {
    "encoding": "UTF-8",
    "@profile": "Immersive",
    "@version": "4.0",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-4.0.xsd",
    "JSON schema": "http://www.web3d.org/specifications/x3d-4.0-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "creator",
          "@content": "John W Carlson"
        },
        {
          "@name": "created",
          "@content": "December 13 2015"
        },
        {
          "@name": "title",
          "@content": "forcenode.x3d"
        },
        {
          "@name": "identifier",
          "@content": "https://coderextreme.net/X3DJSONLD/src/main/data/force.x3d"
        },
        {
          "@name": "description",
          "@content": "beginnings of a force directed graph in 3D"
        },
        {
          "@name": "generator",
          "@content": "Vim, X3D-Edit, https://savage.nps.edu/X3D-Edit"
        },
        {
          "@name": "converter",
          "@content": "x3d-tidy V1.0.56, https://www.npmjs.com/package/x3d-tidy"
        },
        {
          "@name": "converted",
          "@content": "Sat, 02 Sep 2023 21:19:13 GMT"
        }
      ]
    },
    "Scene": {
      "-children": [
        { "ProtoDeclare":
          {
            "@name":"node",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@type": "SFVec3f",
                  "@name": "position"
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                { "Group":
                  {
                    "-children": [
                      { "Transform":
                        {
                          "@DEF": "transform",
                          "-children": [
                            { "Shape":
                              {
                                "-appearance": { "Appearance":
                                  {
                                    "-material": { "Material":
                                      {
                                        "@diffuseColor": [ 1, 0, 0 ]
                                      }
                                    }
                                  }
                                },
                                "-geometry": { "Sphere":
                                  {
                                  }
                                }
                              }
                            },
                            { "Transform":
                              {
                                "@translation": [ 1, 0, 1 ],
                                "-children": [
                                  { "Shape":
                                    {
                                      "-appearance": { "Appearance":
                                        {
                                          "-material": { "Material":
                                            {
                                              "@diffuseColor": [ 0, 0, 1 ]
                                            }
                                          }
                                        }
                                      },
                                      "-geometry": { "Text":
                                        {
                                          "@string": [
                                            "Node"
                                          ],
                                          "-fontStyle": { "FontStyle":
                                            {
                                              "@size": 5,
                                              "@justify": [
                                                "MIDDLE",
                                                "MIDDLE"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "IS": {
                            "connect": [
                              {
                                "@nodeField": "translation",
                                "@protoField": "position"
                              }
                            ]
                          }
                        }
                      },
                      { "PositionInterpolator":
                        {
                          "@DEF": "NodePosition",
                          "@key": [
                            0,
                            1
                          ],
                          "@keyValue": [
                            0, 0, 0,
                            0, 5, 0
                          ]
                        }
                      },
                      { "Script":
                        {
                          "@DEF": "MoveBall",
                          "field": [
                            {
                              "@accessType": "inputOutput",
                              "@type": "SFVec3f",
                              "@name": "translation",
                              "@value": [ 50, 50, 0 ]
                            },
                            {
                              "@accessType": "inputOutput",
                              "@type": "SFVec3f",
                              "@name": "old"
                            },
                            {
                              "@accessType": "inputOnly",
                              "@type": "SFTime",
                              "@name": "set_cycle"
                            },
                            {
                              "@accessType": "outputOnly",
                              "@type": "MFVec3f",
                              "@name": "keyValue"
                            }
                          ],
                          "#sourceText": [
                            "\r",
                            "ecmascript:\r",
                            "\t\t\t\t\tfunction set_cycle(value) {\r",
                            "                                                old = translation;\r",
                            "\t\t\t\t\t\ttranslation = new SFVec3f(Math.random()*100-50, Math.random()*100-50, Math.random()*100-50);\r",
                            "                                                keyValue = new MFVec3f([old, translation]);\r",
                            "\t\t\t\t\t\t// Browser.println(translation);\r",
                            "\t\t\t\t\t}\r",
                            ""
                          ]
                        }
                      },
                      { "TimeSensor":
                        {
                          "@DEF": "nodeClock",
                          "@cycleInterval": 3,
                          "@loop": true
                        }
                      }
                    ]
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "nodeClock",
                    "@fromField": "cycleTime",
                    "@toNode": "MoveBall",
                    "@toField": "set_cycle"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "nodeClock",
                    "@fromField": "fraction_changed",
                    "@toNode": "NodePosition",
                    "@toField": "set_fraction"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "MoveBall",
                    "@fromField": "keyValue",
                    "@toNode": "NodePosition",
                    "@toField": "keyValue"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "NodePosition",
                    "@fromField": "value_changed",
                    "@toNode": "transform",
                    "@toField": "translation"
                  }
                }
              ]
            }
          }
        },
        { "ProtoDeclare":
          {
            "@name":"cylinder",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOnly",
                  "@type": "SFVec3f",
                  "@name": "set_positionA"
                },
                {
                  "@accessType": "inputOnly",
                  "@type": "SFVec3f",
                  "@name": "set_positionB"
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                { "Group":
                  {
                    "-children": [
                      { "Shape":
                        {
                          "-appearance": { "Appearance":
                            {
                              "-material": { "Material":
                                {
                                  "@diffuseColor": [ 0, 1, 0 ]
                                }
                              }
                            }
                          },
                          "-geometry": { "Extrusion":
                            {
                              "@DEF": "extrusion",
                              "@creaseAngle": 0.785,
                              "@crossSection": [
                                1, 0,
                                0.92, -0.38,
                                0.71, -0.71,
                                0.38, -0.92,
                                0, -1,
                                -0.38, -0.92,
                                -0.71, -0.71,
                                -0.92, -0.38,
                                -1, -0,
                                -0.92, 0.38,
                                -0.71, 0.71,
                                -0.38, 0.92,
                                0, 1,
                                0.38, 0.92,
                                0.71, 0.71,
                                0.92, 0.38,
                                1, 0
                              ],
                              "@spine": [
                                0, -50, 0,
                                0, 50, 0
                              ]
                            }
                          }
                        }
                      },
                      { "Script":
                        {
                          "@DEF": "MoveCylinder",
                          "field": [
                            {
                              "@accessType": "inputOutput",
                              "@type": "MFVec3f",
                              "@name": "spine",
                              "@value": [
                                0, -50, 0,
                                0, 50, 0
                              ]
                            },
                            {
                              "@accessType": "inputOnly",
                              "@type": "SFVec3f",
                              "@name": "set_endA"
                            },
                            {
                              "@accessType": "inputOnly",
                              "@type": "SFVec3f",
                              "@name": "set_endB"
                            }
                          ],
                          "#sourceText": [
                            "\r",
                            "ecmascript:\r",
                            "\r",
                            "                function set_endA(value) {\r",
                            "\t\t    if (typeof spine === 'undefined') {\r",
                            "\t\t        spine = new MFVec3f([value, value]);\r",
                            "\t\t    } else {\r",
                            "\t\t        spine = new MFVec3f([value, spine[1]]);\r",
                            "\t\t    }\r",
                            "                }\r",
                            "                \r",
                            "                function set_endB(value) {\r",
                            "\t\t    if (typeof spine === 'undefined') {\r",
                            "\t\t        spine = new MFVec3f([value, value]);\r",
                            "\t\t    } else {\r",
                            "\t\t        spine = new MFVec3f([spine[0], value]);\r",
                            "\t\t    }\r",
                            "                }\r",
                            "                \r",
                            "                function set_spine(value) {\r",
                            "                    spine = value;\r",
                            "                }\r",
                            ""
                          ],
                          "IS": {
                            "connect": [
                              {
                                "@nodeField": "set_endA",
                                "@protoField": "set_positionA"
                              },
                              {
                                "@nodeField": "set_endB",
                                "@protoField": "set_positionB"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "MoveCylinder",
                    "@fromField": "spine",
                    "@toNode": "extrusion",
                    "@toField": "set_spine"
                  }
                }
              ]
            }
          }
        },
        { "Transform":
          {
            "@DEF": "HoldsContent",
            "@scale": [ 0.1, 0.1, 0.1 ],
            "-children": [
              { "PlaneSensor":
                {
                  "@DEF": "clickGenerator",
                  "@description": "click on background to add nodes, click on nodes to add links",
                  "@minPosition": [ -50, -50 ],
                  "@maxPosition": [ 50, 50 ]
                }
              },
              { "ProtoInstance":
                {
                  "@DEF": "nodeA",
                  "@name": "node"
                }
              },
              { "ProtoInstance":
                {
                  "@DEF": "nodeB",
                  "@name": "node",
                  "fieldValue": [
                    {
                      "@name": "position",
                      "@value": [ 50, 50, 50 ]
                    }
                  ]
                }
              },
              { "ProtoInstance":
                {
                  "@DEF": "nodeC",
                  "@name": "node",
                  "fieldValue": [
                    {
                      "@name": "position",
                      "@value": [ -50, -50, -50 ]
                    }
                  ]
                }
              },
              { "ProtoInstance":
                {
                  "@DEF": "nodeD",
                  "@name": "node",
                  "fieldValue": [
                    {
                      "@name": "position",
                      "@value": [ 50, 50, -50 ]
                    }
                  ]
                }
              },
              { "ProtoInstance":
                {
                  "@DEF": "linkA",
                  "@name": "cylinder"
                }
              },
              { "ProtoInstance":
                {
                  "@DEF": "linkB",
                  "@name": "cylinder"
                }
              },
              { "ProtoInstance":
                {
                  "@DEF": "linkC",
                  "@name": "cylinder"
                }
              }
            ]
          }
        },
        { "Script":
          {
            "@DEF": "clickHandler",
            "field": [
              {
                "@accessType": "inputOutput",
                "@type": "SFInt32",
                "@name": "counter"
              },
              {
                "@accessType": "outputOnly",
                "@type": "SFNode",
                "@name": "node_changed"
              },
              {
                "@accessType": "inputOnly",
                "@type": "SFBool",
                "@name": "add_node"
              }
            ],
            "#sourceText": [
              "\r",
              "ecmascript:\r",
              "\tfunction add_node(value) {\r",
              "                // Browser.print('hey ', counter);\r",
              "                counter = counter++;\r",
              "\t\tBrowser.appendTo(Browser.getDocument().querySelector(\"field [name=ModifiableNode]\"),\r",
              "\t\t\t{ \"ProtoInstance\":\r",
              "\t\t\t\t{ \"@name\":\"node\",\r",
              "\t\t\t\t  \"@DEF\":\"node'+counter+'\",\r",
              "\t\t\t\t  \"fieldValue\": [\r",
              "\t\t\t\t\t{\r",
              "\t\t\t\t\t\t \"@name\":\"position\",\r",
              "\t\t\t\t\t\t \"@value\":[0.0,0.0,0.0]\r",
              "\t\t\t\t\t}\r",
              "\t\t\t\t  ]\r",
              "\t\t\t\t}\r",
              "\t\t\t});\r",
              "                \r",
              "        }\r",
              "\t"
            ]
          }
        },
        { "ROUTE":
          {
            "@fromNode": "clickGenerator",
            "@fromField": "isActive",
            "@toNode": "clickHandler",
            "@toField": "add_node"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "nodeA",
            "@fromField": "position",
            "@toNode": "linkA",
            "@toField": "set_positionA"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "nodeB",
            "@fromField": "position",
            "@toNode": "linkA",
            "@toField": "set_positionB"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "nodeA",
            "@fromField": "position",
            "@toNode": "linkB",
            "@toField": "set_positionA"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "nodeC",
            "@fromField": "position",
            "@toNode": "linkB",
            "@toField": "set_positionB"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "nodeA",
            "@fromField": "position",
            "@toNode": "linkC",
            "@toField": "set_positionA"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "nodeD",
            "@fromField": "position",
            "@toNode": "linkC",
            "@toField": "set_positionB"
          }
        }
      ]
    }
  }
}