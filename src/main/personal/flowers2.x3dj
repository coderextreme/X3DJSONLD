{ "X3D": {
    "encoding": "UTF-8",
    "@profile": "Immersive",
    "@version": "4.0",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-4.0.xsd",
    "JSON schema": "http://www.web3d.org/specifications/x3d-4.0-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "title",
          "@content": "flowers2.x3d"
        },
        {
          "@name": "creator",
          "@content": "John Carlson"
        },
        {
          "@name": "transcriber",
          "@content": "John Carlson"
        },
        {
          "@name": "created",
          "@content": "23 January 2005"
        },
        {
          "@name": "modified",
          "@content": "21 March 2018"
        },
        {
          "@name": "description",
          "@content": "2 random mathematical roses in spherical dimensions. rho = a + b * cos(c * theta) * cos(d * phi)"
        },
        {
          "@name": "identifier",
          "@content": "https://coderextreme.net/X3DJSONLD/src/main/data/flowers2.x3d"
        },
        {
          "@name": "generator",
          "@content": "manually written"
        },
        {
          "@name": "license",
          "@content": "https://www.web3d.org/x3d/content/examples/license.html"
        },
        {
          "@name": "converter",
          "@content": "x3d-tidy V1.0.56, https://www.npmjs.com/package/x3d-tidy"
        },
        {
          "@name": "converted",
          "@content": "Sat, 02 Sep 2023 21:18:55 GMT"
        }
      ],
      "component": [
        {
          "@name": "Scripting",
          "@level": 1
        }
      ]
    },
    "Scene": {
      "-children": [
        { "ProtoDeclare":
          {
            "@name":"orbit",
            "ProtoInterface": {
              "field": [
                {
                  "@accessType": "inputOutput",
                  "@type": "SFVec3f",
                  "@name": "translation",
                  "@value": [ -8, 0, 0 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFColor",
                  "@name": "diffuseColor",
                  "@value": [ 1, 0.5, 0 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFColor",
                  "@name": "specularColor",
                  "@value": [ 1, 0.5, 0 ]
                },
                {
                  "@accessType": "inputOutput",
                  "@type": "SFFloat",
                  "@name": "transparency",
                  "@value": 0.75
                }
              ]
            },
            "ProtoBody": {
              "-children": [
                { "Group":
                  {
                    "-children": [
                      { "TimeSensor":
                        {
                          "@DEF": "Clock",
                          "@cycleInterval": 16,
                          "@loop": true
                        }
                      },
                      { "OrientationInterpolator":
                        {
                          "@DEF": "OrbitPath",
                          "@key": [
                            0,
                            0.5,
                            1
                          ],
                          "@keyValue": [
                            1, 0, 0, 0,
                            1, 0, 0, 3.14,
                            1, 0, 0, 6.28
                          ]
                        }
                      },
                      { "Transform":
                        {
                          "@DEF": "OrbitTransform",
                          "-children": [
                            { "Shape":
                              {
                                "-appearance": { "Appearance":
                                  {
                                    "-material": { "Material":
                                      {
                                        "IS": {
                                          "connect": [
                                            {
                                              "@nodeField": "diffuseColor",
                                              "@protoField": "diffuseColor"
                                            },
                                            {
                                              "@nodeField": "specularColor",
                                              "@protoField": "specularColor"
                                            },
                                            {
                                              "@nodeField": "transparency",
                                              "@protoField": "transparency"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                "-geometry": { "IndexedFaceSet":
                                  {
                                    "@DEF": "Orbit",
                                    "@ccw": false,
                                    "@convex": false,
                                    "@coordIndex": [
                                      0,
                                      1,
                                      2,
                                      -1
                                    ],
                                    "-coord": { "Coordinate":
                                      {
                                        "@DEF": "OrbitCoordinates",
                                        "@point": [
                                          0, 0, 1,
                                          0, 1, 0,
                                          1, 0, 0
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "IS": {
                            "connect": [
                              {
                                "@nodeField": "translation",
                                "@protoField": "translation"
                              }
                            ]
                          }
                        }
                      },
                      { "Script":
                        {
                          "@DEF": "OrbitScript",
                          "field": [
                            {
                              "@accessType": "inputOnly",
                              "@type": "SFFloat",
                              "@name": "set_fraction"
                            },
                            {
                              "@accessType": "outputOnly",
                              "@type": "MFVec3f",
                              "@name": "coordinates"
                            },
                            {
                              "@accessType": "outputOnly",
                              "@type": "MFInt32",
                              "@name": "coordIndexes"
                            },
                            {
                              "@accessType": "inputOutput",
                              "@type": "SFFloat",
                              "@name": "e",
                              "@value": 5
                            },
                            {
                              "@accessType": "inputOutput",
                              "@type": "SFFloat",
                              "@name": "f",
                              "@value": 5
                            },
                            {
                              "@accessType": "inputOutput",
                              "@type": "SFFloat",
                              "@name": "g",
                              "@value": 5
                            },
                            {
                              "@accessType": "inputOutput",
                              "@type": "SFFloat",
                              "@name": "h",
                              "@value": 5
                            },
                            {
                              "@accessType": "inputOutput",
                              "@type": "SFInt32",
                              "@name": "resolution",
                              "@value": 50
                            }
                          ],
                          "#sourceText": [
                            "\r",
                            "\t\t\tecmascript:\r",
                            "\r",
                            "\t\t\tvar e = 5;\r",
                            "\t\t\tvar f = 5;\r",
                            "\t\t\tvar g = 5;\r",
                            "\t\t\tvar h = 5;\r",
                            "\t\t\tvar resolution = 100;\r",
                            "\r",
                            "\t\t\tfunction initialize() {\r",
                            "\t\t\t     generateCoordinates();\r",
                            "\t\t\t     var localci = [];\r",
                            "\t\t\t     for (var i = 0; i < resolution-1; i++) {\r",
                            "\t\t\t\tfor (var j = 0; j < resolution-1; j++) {\r",
                            "\t\t\t\t     localci.push(i*resolution+j);\r",
                            "\t\t\t\t     localci.push(i*resolution+j+1);\r",
                            "\t\t\t\t     localci.push((i+1)*resolution+j+1);\r",
                            "\t\t\t\t     localci.push((i+1)*resolution+j);\r",
                            "\t\t\t\t     localci.push(-1);\r",
                            "\t\t\t\t}\r",
                            "\t\t\t    }\r",
                            "\t\t\t    coordIndexes = new MFInt32(localci);\r",
                            "\t\t\t}\r",
                            "\r",
                            "\t\t\tfunction generateCoordinates() {\r",
                            "\t\t\t     var theta = 0.0;\r",
                            "\t\t\t     var phi = 0.0;\r",
                            "\t\t\t     var delta = (2 * 3.141592653) / (resolution-1);\r",
                            "\t\t\t     var localc = [];\r",
                            "\t\t\t     for (var i = 0; i < resolution; i++) {\r",
                            "\t\t\t\tfor (var j = 0; j < resolution; j++) {\r",
                            "\t\t\t\t\tvar rho = e + f * Math.cos(g * theta) * Math.cos(h * phi);\r",
                            "\t\t\t\t\tlocalc.push(new SFVec3f(\r",
                            "\t\t\t\t\t\trho * Math.cos(phi) * Math.cos(theta),\r",
                            "\t\t\t\t\t\trho * Math.cos(phi) * Math.sin(theta),\r",
                            "\t\t\t\t\t\trho * Math.sin(phi)\r",
                            "\t\t\t\t\t));\r",
                            "\t\t\t\t\ttheta += delta;\r",
                            "\t\t\t\t}\r",
                            "\t\t\t\tphi += delta;\r",
                            "\t\t\t     }\r",
                            "\t\t\t     \r",
                            "\t\t\t     coordinates = new MFVec3f(localc);\r",
                            "\t\t\t}\r",
                            "\r",
                            "\t\t\tfunction set_fraction(fraction, eventTime) {\r",
                            "\t\t\t\tvar choice = Math.floor(Math.random() * 4);\r",
                            "\t\t\t\tswitch (choice) {\r",
                            "\t\t\t\tcase 0:\r",
                            "\t\t\t\t\te += Math.floor(Math.random() * 2) * 2 - 1;\r",
                            "\t\t\t\t\tbreak;\r",
                            "\t\t\t\tcase 1:\r",
                            "\t\t\t\t\tf += Math.floor(Math.random() * 2) * 2 - 1;\r",
                            "\t\t\t\t\tbreak;\r",
                            "\t\t\t\tcase 2:\r",
                            "\t\t\t\t\tg += Math.floor(Math.random() * 2) * 2 - 1;\r",
                            "\t\t\t\t\tbreak;\r",
                            "\t\t\t\tcase 3:\r",
                            "\t\t\t\t\th += Math.floor(Math.random() * 2) * 2 - 1;\r",
                            "\t\t\t\t\tbreak;\r",
                            "\t\t\t\t}\r",
                            "\t\t\t\tif (e < 1) {\r",
                            "\t\t\t\t\tf = 10;\r",
                            "\t\t\t\t}\r",
                            "\t\t\t\tif (f < 1) {\r",
                            "\t\t\t\t\tf = 10;\r",
                            "\t\t\t\t}\r",
                            "\t\t\t\tif (g < 1) {\r",
                            "\t\t\t\t\tg = 4;\r",
                            "\t\t\t\t}\r",
                            "\t\t\t\tif (h < 1) {\r",
                            "\t\t\t\t\th = 4;\r",
                            "\t\t\t\t}\r",
                            "\t\t\t\tgenerateCoordinates();\r",
                            "\t\t\t}\r",
                            "\t\t\t      "
                          ]
                        }
                      }
                    ]
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "OrbitScript",
                    "@fromField": "coordIndexes",
                    "@toNode": "Orbit",
                    "@toField": "set_coordIndex"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "OrbitScript",
                    "@fromField": "coordinates",
                    "@toNode": "OrbitCoordinates",
                    "@toField": "point"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "Clock",
                    "@fromField": "fraction_changed",
                    "@toNode": "OrbitScript",
                    "@toField": "set_fraction"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "OrbitPath",
                    "@fromField": "value_changed",
                    "@toNode": "OrbitTransform",
                    "@toField": "rotation"
                  }
                },
                { "ROUTE":
                  {
                    "@fromNode": "Clock",
                    "@fromField": "fraction_changed",
                    "@toNode": "OrbitPath",
                    "@toField": "set_fraction"
                  }
                }
              ]
            }
          }
        },
        { "NavigationInfo":
          {
          }
        },
        { "Viewpoint":
          {
            "@description": "Two mathematical orbitals",
            "@position": [ 0, 0, 50 ]
          }
        },
        { "Group":
          {
            "-children": [
              { "DirectionalLight":
                {
                  "@direction": [ 1, 1, 1 ]
                }
              },
              { "ProtoInstance":
                {
                  "@name": "orbit"
                }
              },
              { "ProtoInstance":
                {
                  "@name": "orbit",
                  "fieldValue": [
                    {
                      "@name": "translation",
                      "@value": [ 8, 0, 0 ]
                    },
                    {
                      "@name": "diffuseColor",
                      "@value": [ 0, 0.5, 1 ]
                    },
                    {
                      "@name": "specularColor",
                      "@value": [ 0, 0.5, 1 ]
                    },
                    {
                      "@name": "transparency",
                      "@value": 0.5
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    }
  }
}