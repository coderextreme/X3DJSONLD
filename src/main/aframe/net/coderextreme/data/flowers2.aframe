<?xml version="1.0" encoding="UTF-8"?>
<html><body><div><headU-a-entity><componentU-a-entity/><metaU-a-entity/></headU-a-entity><a-scene><NavigationInfoU-a-entity/><ViewpointU-a-entity description="Two mathematical orbitals" position="0,0,50"/><a-entity><DirectionalLightU-a-entity direction="1,1,1"/><ProtoDeclareU-a-entity name="orbit"><ProtoInterfaceU-a-entity><fieldU-a-entity/></ProtoInterfaceU-a-entity><ProtoBodyU-a-entity><a-entity><TimeSensorU-a-entity DEF="Clock" cycleInterval="16" loop="true"/><OrientationInterpolatorU-a-entity DEF="OrbitPath" key="0,0.5,1" keyValue="1,0,0,0,1,0,0,3.14,1,0,0,6.28"/><a-entity DEF="OrbitTransform"><ISU-a-entity><connectU-a-entity/></ISU-a-entity><a-entity><AppearanceU-a-entity><MaterialU-a-entity><ISU-a-entity><connectU-a-entity/></ISU-a-entity></MaterialU-a-entity></AppearanceU-a-entity><!--<IndexedFaceSet DEF="Orbit" creaseAngle="0"> <Coordinate DEF="OrbitCoordinates"/> </IndexedFaceSet>--><IndexedFaceSetU-a-entity ccw="false" convex="false" coordIndex="0,1,2,-1" DEF="Orbit"><CoordinateU-a-entity DEF="OrbitCoordinates" point="0,0,1,0,1,0,1,0,0"/></IndexedFaceSetU-a-entity></a-entity></a-entity><ScriptU-a-entity DEF="OrbitScript"><fieldU-a-entity/><![CDATA[
			
			ecmascript:

			function initialize() {
			     generateCoordinates();
			     var arrIndex = 0;
			     for (var i = 0; i < resolution-1; i++) {
				for (var j = 0; j < resolution-1; j++) {
				     coordIndexes[arrIndex++] = i*resolution+j;
				     coordIndexes[arrIndex++] = i*resolution+j+1;
				     coordIndexes[arrIndex++] = (i+1)*resolution+j+1;
				     coordIndexes[arrIndex++] = (i+1)*resolution+j;
				     coordIndexes[arrIndex++] = -1;
				}
			    }
			}

			function generateCoordinates() {
			     var theta = 0.0;
			     var phi = 0.0;
			     var delta = (2 * 3.141592653) / (resolution-1);
			     var arrIndex = 0;
			     for (var i = 0; i < resolution; i++) {
				for (var j = 0; j < resolution; j++) {
					var rho = e + f * Math.cos(g * theta) * Math.cos(h * phi);
					coordinates[arrIndex++] = new SFVec3f(
						rho * Math.cos(phi) * Math.cos(theta),
						rho * Math.cos(phi) * Math.sin(theta),
						rho * Math.sin(phi)
					);
					theta += delta;
				}
				phi += delta;
			     }
			}

			function set_fraction(fraction, eventTime) {
				var choice = Math.floor(Math.random() * 4);
				switch (choice) {
				case 0:
					e += Math.floor(Math.random() * 2) * 2 - 1;
					break;
				case 1:
					f += Math.floor(Math.random() * 2) * 2 - 1;
					break;
				case 2:
					g += Math.floor(Math.random() * 2) * 2 - 1;
					break;
				case 3:
					h += Math.floor(Math.random() * 2) * 2 - 1;
					break;
				}
				if (e < 1) {
					f = 10;
				}
				if (f < 1) {
					f = 10;
				}
				if (g < 1) {
					g = 4;
				}
				if (h < 1) {
					h = 4;
				}
				generateCoordinates();
			}
			      ]]></ScriptU-a-entity><ROUTEU-a-entity fromNode="OrbitScript" fromField="coordIndexes" toNode="Orbit" toField="set_coordIndex"/><ROUTEU-a-entity fromNode="OrbitScript" fromField="coordinates" toNode="OrbitCoordinates" toField="point"/><ROUTEU-a-entity fromNode="Clock" fromField="fraction_changed" toNode="OrbitScript" toField="set_fraction"/><ROUTEU-a-entity fromNode="OrbitPath" fromField="value_changed" toNode="OrbitTransform" toField="rotation"/><ROUTEU-a-entity fromNode="Clock" fromField="fraction_changed" toNode="OrbitPath" toField="set_fraction"/></a-entity></ProtoBodyU-a-entity></ProtoDeclareU-a-entity><ProtoInstanceU-a-entity name="orbit"><fieldValueU-a-entity/></ProtoInstanceU-a-entity><ProtoInstanceU-a-entity name="orbit"><fieldValueU-a-entity/></ProtoInstanceU-a-entity></a-entity></a-scene></div></body></html>