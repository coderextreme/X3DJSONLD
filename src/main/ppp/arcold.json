{
  "X3D": {
    "encoding": "UTF-8",
    "@profile": "Immersive",
    "@version": "3.3",
    "@xsd:noNamespaceSchemaLocation": "https://www.web3d.org/specifications/x3d-3.3.xsd",
    "JSON schema": "https://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "title",
          "@content": "arcold.x3d"
        },
        {
          "@name": "creator",
          "@content": "John Carlson"
        },
        {
          "@name": "generator",
          "@content": "manual"
        },
        {
          "@name": "identifier",
          "@content": "https://coderextreme.net/X3DJSONLD/arc.x3d"
        },
        {
          "@name": "description",
          "@content": "an attempt to implement an arc in a graph"
        },
        {
          "@name": "translated",
          "@content": "07 January 2021"
        },
        {
          "@name": "generator",
          "@content": "X3dToJson.xslt, https://www.web3d.org/x3d/stylesheets/X3dToJson.html"
        },
        {
          "@name": "reference",
          "@content": "X3D JSON encoding: https://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
        }
      ]
    },
    "Scene": {
      "-children": [
        {
          "Viewpoint": {
            "@position": [
              0,
              0,
              5
            ],
            "@description": "a moving graph"
          }
        },
        {
          "Background": {
            "@skyColor": [
              0.4,
              0.4,
              0.4
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "trans1",
            "-children": [
              {
                "Transform": {
                  "@DEF": "rotscale1",
                  "-children": [
                    {
                      "Shape": {
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@diffuseColor": [
                                  0.2,
                                  0.7,
                                  0.7
                                ]
                              }
                            }
                          }
                        },
                        "-geometry": {
                          "Cylinder": {
                            "@radius": 0.1
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "trans2",
            "-children": [
              {
                "Transform": {
                  "@DEF": "rotscale2",
                  "-children": [
                    {
                      "Shape": {
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@diffuseColor": [
                                  0.2,
                                  0.7,
                                  0.7
                                ]
                              }
                            }
                          }
                        },
                        "-geometry": {
                          "Cylinder": {
                            "@radius": 0.1
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "trans3",
            "-children": [
              {
                "Transform": {
                  "@DEF": "rotscale3",
                  "-children": [
                    {
                      "Shape": {
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@diffuseColor": [
                                  0.2,
                                  0.7,
                                  0.7
                                ]
                              }
                            }
                          }
                        },
                        "-geometry": {
                          "Cylinder": {
                            "@radius": 0.1
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {},
        {
          "#comment": "from doug sanden"
        },
        {},
        {
          "Transform": {
            "@DEF": "DECLpoint_G1_node",
            "@translation": [
              0,
              0,
              0
            ],
            "-children": [
              {
                "Shape": {
                  "-geometry": {
                    "Sphere": {
                      "@radius": 0.1
                    }
                  },
                  "-appearance": {
                    "Appearance": {
                      "-material": {
                        "Material": {
                          "@diffuseColor": [
                            1,
                            0,
                            0
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "PositionInterpolator": {
                  "@DEF": "DECLpoint_G1_PI1",
                  "@key": [
                    0,
                    1
                  ],
                  "@keyValue": [
                    0,
                    0,
                    0,
                    0,
                    5,
                    0
                  ]
                }
              },
              {
                "Script": {
                  "@DEF": "DECLpoint_G1_MB1",
                  "field": [
                    {
                      "@name": "translation",
                      "@accessType": "inputOutput",
                      "@type": "SFVec3f",
                      "@value": [
                        0,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "old",
                      "@accessType": "inputOutput",
                      "@type": "SFVec3f",
                      "@value": [
                        0,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "set_location",
                      "@accessType": "inputOnly",
                      "@type": "SFTime"
                    },
                    {
                      "@name": "keyValue",
                      "@accessType": "outputOnly",
                      "@type": "MFVec3f"
                    }
                  ],
                  "#sourceText": [
                    "",
                    "",
                    "ecmascript:",
                    "\t\tfunction set_location(value) {",
                    "                    old = translation;",
                    "\t\t    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);",
                    "                    keyValue = new MFVec3f([old, translation]);",
                    "\t\t    // Browser.println(translation);",
                    "\t\t}",
                    "",
                    ""
                  ]
                }
              },
              {
                "TimeSensor": {
                  "@DEF": "DECLpoint_G1_CL1",
                  "@cycleInterval": 3,
                  "@loop": true
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G1_CL1",
                  "@fromField": "cycleTime",
                  "@toNode": "DECLpoint_G1_MB1",
                  "@toField": "set_location"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G1_CL1",
                  "@fromField": "fraction_changed",
                  "@toNode": "DECLpoint_G1_PI1",
                  "@toField": "set_fraction"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G1_MB1",
                  "@fromField": "keyValue",
                  "@toNode": "DECLpoint_G1_PI1",
                  "@toField": "keyValue"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G1_PI1",
                  "@fromField": "value_changed",
                  "@toNode": "DECLpoint_G1_node",
                  "@toField": "set_translation"
                }
              }
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "DECLpoint_G2_node",
            "@translation": [
              0,
              0,
              0
            ],
            "-children": [
              {
                "Shape": {
                  "-geometry": {
                    "Sphere": {
                      "@radius": 0.1
                    }
                  },
                  "-appearance": {
                    "Appearance": {
                      "-material": {
                        "Material": {
                          "@diffuseColor": [
                            1,
                            0,
                            0
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "PositionInterpolator": {
                  "@DEF": "DECLpoint_G2_PI1",
                  "@key": [
                    0,
                    1
                  ],
                  "@keyValue": [
                    0,
                    0,
                    0,
                    0,
                    5,
                    0
                  ]
                }
              },
              {
                "Script": {
                  "@DEF": "DECLpoint_G2_MB1",
                  "field": [
                    {
                      "@name": "translation",
                      "@accessType": "inputOutput",
                      "@type": "SFVec3f",
                      "@value": [
                        0,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "old",
                      "@accessType": "inputOutput",
                      "@type": "SFVec3f",
                      "@value": [
                        0,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "set_location",
                      "@accessType": "inputOnly",
                      "@type": "SFTime"
                    },
                    {
                      "@name": "keyValue",
                      "@accessType": "outputOnly",
                      "@type": "MFVec3f"
                    }
                  ],
                  "#sourceText": [
                    "",
                    "",
                    "ecmascript:",
                    "\t\tfunction set_location(value) {",
                    "                    old = translation;",
                    "\t\t    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);",
                    "                    keyValue = new MFVec3f([old, translation]);",
                    "\t\t    // Browser.println(translation);",
                    "\t\t}",
                    "",
                    ""
                  ]
                }
              },
              {
                "TimeSensor": {
                  "@DEF": "DECLpoint_G2_CL1",
                  "@cycleInterval": 3,
                  "@loop": true
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G2_CL1",
                  "@fromField": "cycleTime",
                  "@toNode": "DECLpoint_G2_MB1",
                  "@toField": "set_location"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G2_CL1",
                  "@fromField": "fraction_changed",
                  "@toNode": "DECLpoint_G2_PI1",
                  "@toField": "set_fraction"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G2_MB1",
                  "@fromField": "keyValue",
                  "@toNode": "DECLpoint_G2_PI1",
                  "@toField": "keyValue"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G2_PI1",
                  "@fromField": "value_changed",
                  "@toNode": "DECLpoint_G2_node",
                  "@toField": "set_translation"
                }
              }
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "DECLpoint_G3_node",
            "@translation": [
              0,
              0,
              0
            ],
            "-children": [
              {
                "Shape": {
                  "-geometry": {
                    "Sphere": {
                      "@radius": 0.1
                    }
                  },
                  "-appearance": {
                    "Appearance": {
                      "-material": {
                        "Material": {
                          "@diffuseColor": [
                            1,
                            0,
                            0
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "PositionInterpolator": {
                  "@DEF": "DECLpoint_G3_PI1",
                  "@key": [
                    0,
                    1
                  ],
                  "@keyValue": [
                    0,
                    0,
                    0,
                    0,
                    5,
                    0
                  ]
                }
              },
              {
                "Script": {
                  "@DEF": "DECLpoint_G3_MB1",
                  "field": [
                    {
                      "@name": "translation",
                      "@accessType": "inputOutput",
                      "@type": "SFVec3f",
                      "@value": [
                        0,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "old",
                      "@accessType": "inputOutput",
                      "@type": "SFVec3f",
                      "@value": [
                        0,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "set_location",
                      "@accessType": "inputOnly",
                      "@type": "SFTime"
                    },
                    {
                      "@name": "keyValue",
                      "@accessType": "outputOnly",
                      "@type": "MFVec3f"
                    }
                  ],
                  "#sourceText": [
                    "",
                    "",
                    "ecmascript:",
                    "\t\tfunction set_location(value) {",
                    "                    old = translation;",
                    "\t\t    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);",
                    "                    keyValue = new MFVec3f([old, translation]);",
                    "\t\t    // Browser.println(translation);",
                    "\t\t}",
                    "",
                    ""
                  ]
                }
              },
              {
                "TimeSensor": {
                  "@DEF": "DECLpoint_G3_CL1",
                  "@cycleInterval": 3,
                  "@loop": true
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G3_CL1",
                  "@fromField": "cycleTime",
                  "@toNode": "DECLpoint_G3_MB1",
                  "@toField": "set_location"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G3_CL1",
                  "@fromField": "fraction_changed",
                  "@toNode": "DECLpoint_G3_PI1",
                  "@toField": "set_fraction"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G3_MB1",
                  "@fromField": "keyValue",
                  "@toNode": "DECLpoint_G3_PI1",
                  "@toField": "keyValue"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G3_PI1",
                  "@fromField": "value_changed",
                  "@toNode": "DECLpoint_G3_node",
                  "@toField": "set_translation"
                }
              }
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "DECLpoint_G4_node",
            "@translation": [
              0,
              0,
              0
            ],
            "-children": [
              {
                "Shape": {
                  "-geometry": {
                    "Sphere": {
                      "@radius": 0.1
                    }
                  },
                  "-appearance": {
                    "Appearance": {
                      "-material": {
                        "Material": {
                          "@diffuseColor": [
                            1,
                            0,
                            0
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "PositionInterpolator": {
                  "@DEF": "DECLpoint_G4_PI1",
                  "@key": [
                    0,
                    1
                  ],
                  "@keyValue": [
                    0,
                    0,
                    0,
                    0,
                    5,
                    0
                  ]
                }
              },
              {
                "Script": {
                  "@DEF": "DECLpoint_G4_MB1",
                  "field": [
                    {
                      "@name": "translation",
                      "@accessType": "inputOutput",
                      "@type": "SFVec3f",
                      "@value": [
                        0,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "old",
                      "@accessType": "inputOutput",
                      "@type": "SFVec3f",
                      "@value": [
                        0,
                        0,
                        0
                      ]
                    },
                    {
                      "@name": "set_location",
                      "@accessType": "inputOnly",
                      "@type": "SFTime"
                    },
                    {
                      "@name": "keyValue",
                      "@accessType": "outputOnly",
                      "@type": "MFVec3f"
                    }
                  ],
                  "#sourceText": [
                    "",
                    "",
                    "ecmascript:",
                    "\t\tfunction set_location(value) {",
                    "                    old = translation;",
                    "\t\t    translation = new SFVec3f(Math.random()*10-5, Math.random()*10-5, Math.random()*10-5);",
                    "                    keyValue = new MFVec3f([old, translation]);",
                    "\t\t    // Browser.println(translation);",
                    "\t\t}",
                    "",
                    ""
                  ]
                }
              },
              {
                "TimeSensor": {
                  "@DEF": "DECLpoint_G4_CL1",
                  "@cycleInterval": 3,
                  "@loop": true
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G4_CL1",
                  "@fromField": "cycleTime",
                  "@toNode": "DECLpoint_G4_MB1",
                  "@toField": "set_location"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G4_CL1",
                  "@fromField": "fraction_changed",
                  "@toNode": "DECLpoint_G4_PI1",
                  "@toField": "set_fraction"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G4_MB1",
                  "@fromField": "keyValue",
                  "@toNode": "DECLpoint_G4_PI1",
                  "@toField": "keyValue"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLpoint_G4_PI1",
                  "@fromField": "value_changed",
                  "@toNode": "DECLpoint_G4_node",
                  "@toField": "set_translation"
                }
              }
            ]
          }
        },
        {
          "Script": {
            "@DEF": "DECLx3dconnector_connector1_S1",
            "field": [
              {
                "@name": "startnode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "endnode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "transnode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "rotscalenode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "set_startpoint",
                "@accessType": "inputOnly",
                "@type": "SFVec3f"
              },
              {
                "@name": "set_endpoint",
                "@accessType": "inputOnly",
                "@type": "SFVec3f"
              }
            ],
            "#sourceText": [
              "",
              "            ecmascript:",
              "        function recompute(startpoint,endpoint){",
              "\t    if (typeof endpoint === 'undefined') {",
              "\t\treturn;",
              "\t    }",
              "            var dif = endpoint.subtract(startpoint);",
              "            var dist = dif.length()*0.5;",
              "            var dif2 = dif.multiply(0.5);",
              "            var norm = dif.normalize();",
              "            var transl = startpoint.add(dif2);",
              "\t    if (typeof Quaternion !== 'undefined') {",
              "\t\t    return {",
              "\t\t\t    scale : new SFVec3f(1.0,dist,1.0),",
              "\t\t\t    translation : transl,",
              "\t\t\t    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)",
              "\t\t    };",
              "\t    } else {",
              "\t\t    return {",
              "\t\t\t    scale : new SFVec3f(1.0,dist,1.0),",
              "\t\t\t    translation : transl,",
              "\t\t\t    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)",
              "\t\t    };",
              "\t    }",
              "\t}",
              "\tfunction recompute_and_route(startpoint, endpoint) {",
              "\t\tvar trafo = recompute(startpoint, endpoint);",
              "\t\tif (typeof trafo !== 'undefined') {",
              "\t\t\ttransnode.translation = trafo.translation;",
              "\t\t\trotscalenode.rotation = trafo.rotation;",
              "\t\t\trotscalenode.scale = trafo.scale;",
              "\t\t} else {",
              "\t\t\tBrowser.print(\"recompute returned undefined\");",
              "\t\t}",
              "\t}",
              "        function initialize(){",
              "            recompute_and_route(startnode.translation,endnode.translation);",
              "        }",
              "        function set_startpoint(val,t){",
              "            recompute_and_route(val || startnode.translation,endnode.translation);",
              "        }",
              "        function set_endpoint(val,t){",
              "            recompute_and_route(startnode.translation,val || endnode.translation);",
              "        }",
              "",
              ""
            ]
          }
        },
        {
          "Script": {
            "@DEF": "DECLx3dconnector_connector2_S1",
            "field": [
              {
                "@name": "startnode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "endnode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "transnode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "rotscalenode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "set_startpoint",
                "@accessType": "inputOnly",
                "@type": "SFVec3f"
              },
              {
                "@name": "set_endpoint",
                "@accessType": "inputOnly",
                "@type": "SFVec3f"
              }
            ],
            "#sourceText": [
              "",
              "            ecmascript:",
              "        function recompute(startpoint,endpoint){",
              "\t    if (typeof endpoint === 'undefined') {",
              "\t\treturn;",
              "\t    }",
              "            var dif = endpoint.subtract(startpoint);",
              "            var dist = dif.length()*0.5;",
              "            var dif2 = dif.multiply(0.5);",
              "            var norm = dif.normalize();",
              "            var transl = startpoint.add(dif2);",
              "\t    if (typeof Quaternion !== 'undefined') {",
              "\t\t    return {",
              "\t\t\t    scale : new SFVec3f(1.0,dist,1.0),",
              "\t\t\t    translation : transl,",
              "\t\t\t    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)",
              "\t\t    };",
              "\t    } else {",
              "\t\t    return {",
              "\t\t\t    scale : new SFVec3f(1.0,dist,1.0),",
              "\t\t\t    translation : transl,",
              "\t\t\t    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)",
              "\t\t    };",
              "\t    }",
              "\t}",
              "\tfunction recompute_and_route(startpoint, endpoint) {",
              "\t\tvar trafo = recompute(startpoint, endpoint);",
              "\t\tif (typeof trafo !== 'undefined') {",
              "\t\t\ttransnode.translation = trafo.translation;",
              "\t\t\trotscalenode.rotation = trafo.rotation;",
              "\t\t\trotscalenode.scale = trafo.scale;",
              "\t\t} else {",
              "\t\t\tBrowser.print(\"recompute returned undefined\");",
              "\t\t}",
              "\t}",
              "        function initialize(){",
              "            recompute_and_route(startnode.translation,endnode.translation);",
              "        }",
              "        function set_startpoint(val,t){",
              "            recompute_and_route(val || startnode.translation,endnode.translation);",
              "        }",
              "        function set_endpoint(val,t){",
              "            recompute_and_route(startnode.translation,val || endnode.translation);",
              "        }",
              "",
              ""
            ]
          }
        },
        {
          "Script": {
            "@DEF": "DECLx3dconnector_connector3_S1",
            "field": [
              {
                "@name": "startnode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "endnode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "transnode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "rotscalenode",
                "@accessType": "inputOutput",
                "@type": "SFNode"
              },
              {
                "@name": "set_startpoint",
                "@accessType": "inputOnly",
                "@type": "SFVec3f"
              },
              {
                "@name": "set_endpoint",
                "@accessType": "inputOnly",
                "@type": "SFVec3f"
              }
            ],
            "#sourceText": [
              "",
              "            ecmascript:",
              "        function recompute(startpoint,endpoint){",
              "\t    if (typeof endpoint === 'undefined') {",
              "\t\treturn;",
              "\t    }",
              "            var dif = endpoint.subtract(startpoint);",
              "            var dist = dif.length()*0.5;",
              "            var dif2 = dif.multiply(0.5);",
              "            var norm = dif.normalize();",
              "            var transl = startpoint.add(dif2);",
              "\t    if (typeof Quaternion !== 'undefined') {",
              "\t\t    return {",
              "\t\t\t    scale : new SFVec3f(1.0,dist,1.0),",
              "\t\t\t    translation : transl,",
              "\t\t\t    rotation : new Quaternion.rotateFromTo(new SFVec3f(0.0,1.0,0.0), norm)",
              "\t\t    };",
              "\t    } else {",
              "\t\t    return {",
              "\t\t\t    scale : new SFVec3f(1.0,dist,1.0),",
              "\t\t\t    translation : transl,",
              "\t\t\t    rotation : new SFRotation(new SFVec3f(0.0,1.0,0.0),norm)",
              "\t\t    };",
              "\t    }",
              "\t}",
              "\tfunction recompute_and_route(startpoint, endpoint) {",
              "\t\tvar trafo = recompute(startpoint, endpoint);",
              "\t\tif (typeof trafo !== 'undefined') {",
              "\t\t\ttransnode.translation = trafo.translation;",
              "\t\t\trotscalenode.rotation = trafo.rotation;",
              "\t\t\trotscalenode.scale = trafo.scale;",
              "\t\t} else {",
              "\t\t\tBrowser.print(\"recompute returned undefined\");",
              "\t\t}",
              "\t}",
              "        function initialize(){",
              "            recompute_and_route(startnode.translation,endnode.translation);",
              "        }",
              "        function set_startpoint(val,t){",
              "            recompute_and_route(val || startnode.translation,endnode.translation);",
              "        }",
              "        function set_endpoint(val,t){",
              "            recompute_and_route(startnode.translation,val || endnode.translation);",
              "        }",
              "",
              ""
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLpoint_G1_CL1",
            "@fromField": "translation_changed",
            "@toNode": "DECLx3dconnector_connector1_S1",
            "@toField": "set_startpoint"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLpoint_G2_CL1",
            "@fromField": "translation_changed",
            "@toNode": "DECLx3dconnector_connector1_S1",
            "@toField": "set_endpoint"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLpoint_G1_CL1",
            "@fromField": "translation_changed",
            "@toNode": "DECLx3dconnector_connector2_S1",
            "@toField": "set_startpoint"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLpoint_G3_CL1",
            "@fromField": "translation_changed",
            "@toNode": "DECLx3dconnector_connector2_S1",
            "@toField": "set_endpoint"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLpoint_G1_CL1",
            "@fromField": "translation_changed",
            "@toNode": "DECLx3dconnector_connector3_S1",
            "@toField": "set_startpoint"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLpoint_G4_CL1",
            "@fromField": "translation_changed",
            "@toNode": "DECLx3dconnector_connector3_S1",
            "@toField": "set_endpoint"
          }
        }
      ]
    }
  }
}