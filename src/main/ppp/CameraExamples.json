{
  "X3D": {
    "encoding": "UTF-8",
    "@profile": "Immersive",
    "@version": "3.3",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-3.3.xsd",
    "JSON schema": "http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "title",
          "@content": "CameraExamples.x3d"
        },
        {
          "@name": "description",
          "@content": "Camera, CameraShot and CameraMove examples that demonstrate storyboard capabilities and precise camera operation. This is a developmental effort for potential X3D Specification improvement."
        },
        {
          "@name": "documentation",
          "@content": "Two demos are found in the scene, click the \"red text\" on left or right to start. (a) SimpleShotsTest shows Zoom in/out, Pan left/right, Boom up/down, Tilt left/right, with each is defined by a CameraShot collecting a series of CameraMovements. (b) AimPointTest gradually slews the camera view to look at the sliding cube, then follows it around before returning to original viewpoint."
        },
        {
          "@name": "creator",
          "@content": "Don Brutzman and Jeff Weekley"
        },
        {
          "@name": "created",
          "@content": "18 June 2009"
        },
        {
          "@name": "modified",
          "@content": "12 January 2014"
        },
        {
          "@name": "TODO",
          "@content": "Schematron rules, backed up by initialize() checks"
        },
        {
          "@name": "reference",
          "@content": "BeyondViewpointCameraNodesWeb3D2009.pdf"
        },
        {
          "@name": "MovingImage",
          "@content": "CameraExamplesDemo.mp4"
        },
        {
          "@name": "reference",
          "@content": "http://www.web3d.org/x3d/specifications/ISO-IEC-FDIS-19775-1.2-X3D-AbstractSpecification/Part01/components/navigation.html"
        },
        {
          "@name": "subject",
          "@content": "Camera nodes for Viewpoint navigation control"
        },
        {
          "@name": "reference",
          "@content": "CameraPrototypes.x3d"
        },
        {
          "@name": "reference",
          "@content": "CameraExamplesConsoleLog.txt"
        },
        {
          "@name": "reference",
          "@content": "http://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.avi"
        },
        {
          "@name": "reference",
          "@content": "http://www.web3d.org/x3d/content/examples/Basic/UniversalMediaMaterials/gridBack.x3d"
        },
        {
          "@name": "identifier",
          "@content": "http://www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.x3d"
        },
        {
          "@name": "identifier",
          "@content": "http://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/content/examples/Basic/development/CameraExamples.x3d"
        },
        {
          "@name": "generator",
          "@content": "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
        },
        {
          "@name": "license",
          "@content": "../license.html"
        },
        {
          "@name": "translated",
          "@content": "24 May 2018"
        },
        {
          "@name": "generator",
          "@content": "X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
        },
        {
          "@name": "reference",
          "@content": "X3D JSON encoding: http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
        }
      ],
      "-children": [
        {
          "#comment": "TODO warn if more than one identifier present"
        }
      ]
    },
    "Scene": {
      "-children": [
        {
          "#comment": "=============== Camera =============="
        },
        {},
        {
          "#comment": "=============== CameraShot =============="
        },
        {},
        {
          "#comment": "=============== CameraMovement =============="
        },
        {},
        {
          "#comment": "=============== OfflineRender =============="
        },
        {},
        {
          "#comment": "=============== Lights, camera, action! =============="
        },
        {
          "DirectionalLight": {
            "@direction": [
              0,
              -1,
              0
            ],
            "@global": true,
            "@intensity": 0.8
          }
        },
        {
          "NavigationInfo": {
            "@type": [
              "EXAMINE",
              "FLY",
              "ANY"
            ]
          }
        },
        {
          "Viewpoint": {
            "@description": "Camera test scene entry view",
            "@position": [
              0,
              2,
              12
            ]
          }
        },
        {
          "Viewpoint": {
            "@description": "Camera test scene from above",
            "@orientation": [
              1,
              0,
              0,
              -1.57079
            ],
            "@position": [
              0,
              150,
              0
            ]
          }
        },
        {
          "#comment": "Keep prototype instances in same file while developing, then move later"
        },
        {
          "#comment": "We will create examples matching those in the paper"
        },
        {
          "#comment": "=============== Camera.SimpleShotsTest =============="
        },
        {
          "Viewpoint": {
            "@DEF": "DECLCamera_Camera.SimpleShotsTest_CameraViewpoint",
            "@position": [
              -4,
              4,
              10
            ],
            "@orientation": [
              0,
              0,
              1,
              0
            ],
            "@fieldOfView": 0.7854,
            "@description": "SimpleShotsTest for camera Zoom Dolly Pan Boom and Tilt"
          }
        },
        {
          "#comment": "NavInfo EXAMINE used since some browsers (InstantReality) try to lock view to vertical when flying to avoid disorientation"
        },
        {
          "NavigationInfo": {
            "@DEF": "DECLCamera_Camera.SimpleShotsTest_CameraNavInfo",
            "@type": [
              "EXAMINE",
              "FLY",
              "ANY"
            ],
            "@headlight": true,
            "@visibilityLimit": 0
          }
        },
        {
          "#comment": "this DirectionalLight replaces NavigationInfo headlight in order to add color capability"
        },
        {
          "DirectionalLight": {
            "@DEF": "DECLCamera_Camera.SimpleShotsTest_CameraDirectionalLight",
            "@global": true,
            "-children": [
              {
                "#comment": "TODO confirm other default field values match NavigationInfo spec"
              }
            ],
            "@on": true,
            "@color": [
              1,
              1,
              1
            ],
            "@intensity": 1
          }
        },
        {
          "PositionInterpolator": {
            "@DEF": "DECLCamera_Camera.SimpleShotsTest_CameraPositionInterpolator",
            "@key": [
              0,
              1
            ],
            "@keyValue": [
              0,
              0,
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "OrientationInterpolator": {
            "@DEF": "DECLCamera_Camera.SimpleShotsTest_CameraOrientationInterpolator",
            "@key": [
              0,
              1
            ],
            "@keyValue": [
              0,
              1,
              0,
              0,
              0,
              1,
              0,
              0
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraPositionInterpolator",
            "@fromField": "value_changed",
            "@toNode": "DECLCamera_Camera.SimpleShotsTest_CameraViewpoint",
            "@toField": "position"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraOrientationInterpolator",
            "@fromField": "value_changed",
            "@toNode": "DECLCamera_Camera.SimpleShotsTest_CameraViewpoint",
            "@toField": "orientation"
          }
        },
        {
          "Script": {
            "@DEF": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
            "@directOutput": true,
            "@mustEvaluate": true,
            "-children": [
              {
                "#comment": "binding is controlled externally, all camera operations proceed the same regardless of whether bound or not"
              }
            ],
            "field": [
              {
                "@name": "description",
                "@accessType": "inputOutput",
                "@appinfo": "Text description to be displayed for this Camera",
                "@type": "SFString",
                "@value": "SimpleShotsTest for camera Zoom Dolly Pan Boom and Tilt"
              },
              {
                "@name": "position",
                "@accessType": "inputOutput",
                "@appinfo": "Camera position in local transformation frame",
                "@type": "SFVec3f",
                "@value": [
                  -4,
                  4,
                  10
                ]
              },
              {
                "@name": "orientation",
                "@accessType": "inputOutput",
                "@appinfo": "Camera rotation in local transformation frame",
                "@type": "SFRotation",
                "@value": [
                  0,
                  0,
                  1,
                  0
                ]
              },
              {
                "@name": "set_fraction",
                "@accessType": "inputOnly",
                "@appinfo": "input fraction drives interpolators",
                "@type": "SFFloat"
              },
              {
                "@name": "set_bind",
                "@accessType": "inputOnly",
                "@appinfo": "input event binds or unbinds this Camera",
                "@type": "SFBool"
              },
              {
                "@name": "fieldOfView",
                "@accessType": "inputOutput",
                "@appinfo": "pi/4",
                "@type": "SFFloat",
                "@value": 0.7854
              },
              {
                "@name": "nearClipPlane",
                "@accessType": "inputOutput",
                "@appinfo": "Vector distance to near clipping plane",
                "@type": "SFFloat",
                "@value": 0.25
              },
              {
                "@name": "farClipPlane",
                "@accessType": "inputOutput",
                "@appinfo": "Vector distance to far clipping plane",
                "@type": "SFFloat",
                "@value": 0
              },
              {
                "@name": "shots",
                "@accessType": "inputOutput",
                "@appinfo": "Array of CameraShot nodes which in turn contain CameraMovement nodes",
                "@type": "MFNode",
                "-children": [
                  {
                    "Script": {
                      "@DEF": "DECLCameraShot_Zoom_CameraShotScript",
                      "@directOutput": true,
                      "@mustEvaluate": true,
                      "field": [
                        {
                          "@name": "description",
                          "@accessType": "inputOutput",
                          "@appinfo": "Text description to be displayed for this CameraShot",
                          "@type": "SFString",
                          "@value": "Simple shot of Camera Zoom"
                        },
                        {
                          "@name": "enabled",
                          "@accessType": "inputOutput",
                          "@appinfo": "Whether this CameraShot can be activated",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "moves",
                          "@accessType": "inputOutput",
                          "@appinfo": "Set of CameraMovement nodes",
                          "@type": "MFNode",
                          "-children": [
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Zoom In"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -50,
                                      1,
                                      -15
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE1000_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Zoom Out"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -50,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE2000_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Pause"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 1
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -50,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            }
                          ]
                        },
                        {
                          "@name": "initialPosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera position for this shot",
                          "@type": "SFVec3f",
                          "@value": [
                            -50,
                            1,
                            -10
                          ]
                        },
                        {
                          "@name": "initialOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera rotation for this shot",
                          "@type": "SFRotation",
                          "@value": [
                            0,
                            1,
                            0,
                            0
                          ]
                        },
                        {
                          "@name": "initialAimPoint",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
                          "@type": "SFVec3f"
                        },
                        {
                          "@name": "initialFieldOfView",
                          "@accessType": "inputOutput",
                          "@appinfo": "pi/4",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFStop",
                          "@accessType": "inputOutput",
                          "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFocusDistance",
                          "@accessType": "inputOutput",
                          "@appinfo": "Distance to focal plane of sharpest focus",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "shotDuration",
                          "@accessType": "outputOnly",
                          "@appinfo": "Subtotal duration of contained CameraMovement move durations",
                          "@type": "SFTime"
                        },
                        {
                          "@name": "isActive",
                          "@accessType": "outputOnly",
                          "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "traceEnabled",
                          "@accessType": "initializeOnly",
                          "@appinfo": "enable console output to trace script computations and prototype progress",
                          "@type": "SFBool",
                          "@value": false
                        },
                        {
                          "@name": "key",
                          "@accessType": "inputOutput",
                          "@appinfo": "key array for interpolators",
                          "@type": "MFFloat"
                        },
                        {
                          "@name": "keyValuePosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for PositionInterpolator",
                          "@type": "MFVec3f"
                        },
                        {
                          "@name": "keyValueOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for OrientationInterpolator",
                          "@type": "MFRotation"
                        }
                      ],
                      "#sourceText": [
                        "",
                        "",
                        "ecmascript:",
                        "function initialize () // CameraShotScript",
                        "{",
                        "//  tracePrint ('initialize start...');",
                        "",
                        "    // compute shotDuration by summing durations from contained CameraMovement nodes",
                        "    shotDuration = 0;",
                        "    for (i = 0; i < moves.length; i++)",
                        "    {",
                        "        shotDuration = shotDuration + moves[i].duration;",
                        "    }",
                        "    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');",
                        "",
                        "//  tracePrint ('... initialize() complete');",
                        "}",
                        "",
                        "function set_description (eventValue) // input event received for inputOutput field",
                        "{",
                        "    description = eventValue;",
                        "}",
                        "",
                        "function set_enabled (eventValue) // input event received for inputOutput field",
                        "{",
                        "    enabled = eventValue;",
                        "}",
                        "",
                        "function set_moves (eventValue) // input event received for inputOutput field",
                        "{",
                        "    moves = eventValue;",
                        "}",
                        "",
                        "function set_initialPosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialPosition = eventValue;",
                        "}",
                        "",
                        "function set_initialOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialOrientation = eventValue;",
                        "}",
                        "",
                        "function set_initialAimPoint (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialAimPoint = eventValue;",
                        "}",
                        "",
                        "function set_initialFieldOfView (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFieldOfView = eventValue;",
                        "}",
                        "",
                        "function set_initialFStop (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFStop = eventValue;",
                        "}",
                        "",
                        "function set_initialFocusDistance (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFocusDistance = eventValue;",
                        "}",
                        "",
                        "function set_key (eventValue) // input event received for inputOutput field",
                        "{",
                        "    key = eventValue;",
                        "}",
                        "",
                        "function set_keyValuePosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValuePosition = eventValue;",
                        "}",
                        "",
                        "function set_keyValueOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValueOrientation = eventValue;",
                        "}",
                        "",
                        "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                        "",
                        "function tracePrint (outputValue)",
                        "{",
                        "\tif (traceEnabled) alwaysPrint (outputValue);",
                        "}",
                        "function alwaysPrint (outputValue)",
                        "{",
                        "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                        "    var outputString = outputValue.toString(); // utility function according to spec",
                        "    if (outputString == null) outputString = outputValue; // direct cast",
                        "",
                        "    if  (description.length > 0)",
                        "         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\n');",
                        "    else",
                        "         Browser.print ('[CameraShot] ' + outputString + '\n');",
                        "}",
                        "",
                        ""
                      ]
                    }
                  },
                  {
                    "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                  },
                  {
                    "Script": {
                      "@DEF": "DECLCameraShot_Dolly_CameraShotScript",
                      "@directOutput": true,
                      "@mustEvaluate": true,
                      "field": [
                        {
                          "@name": "description",
                          "@accessType": "inputOutput",
                          "@appinfo": "Text description to be displayed for this CameraShot",
                          "@type": "SFString",
                          "@value": "Simple shot of Camera Dolly"
                        },
                        {
                          "@name": "enabled",
                          "@accessType": "inputOutput",
                          "@appinfo": "Whether this CameraShot can be activated",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "moves",
                          "@accessType": "inputOutput",
                          "@appinfo": "Set of CameraMovement nodes",
                          "@type": "MFNode",
                          "-children": [
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_DollyMove1_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Dolly from Right to Left"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -45,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE3000_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Dolly from Left to Right"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -40,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE4000_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Pause"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 1
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -40,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            }
                          ]
                        },
                        {
                          "@name": "initialPosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera position for this shot",
                          "@type": "SFVec3f",
                          "@value": [
                            -40,
                            1,
                            -10
                          ]
                        },
                        {
                          "@name": "initialOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera rotation for this shot",
                          "@type": "SFRotation",
                          "@value": [
                            0,
                            1,
                            0,
                            0
                          ]
                        },
                        {
                          "@name": "initialAimPoint",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
                          "@type": "SFVec3f"
                        },
                        {
                          "@name": "initialFieldOfView",
                          "@accessType": "inputOutput",
                          "@appinfo": "pi/4",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFStop",
                          "@accessType": "inputOutput",
                          "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFocusDistance",
                          "@accessType": "inputOutput",
                          "@appinfo": "Distance to focal plane of sharpest focus",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "shotDuration",
                          "@accessType": "outputOnly",
                          "@appinfo": "Subtotal duration of contained CameraMovement move durations",
                          "@type": "SFTime"
                        },
                        {
                          "@name": "isActive",
                          "@accessType": "outputOnly",
                          "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "traceEnabled",
                          "@accessType": "initializeOnly",
                          "@appinfo": "enable console output to trace script computations and prototype progress",
                          "@type": "SFBool",
                          "@value": false
                        },
                        {
                          "@name": "key",
                          "@accessType": "inputOutput",
                          "@appinfo": "key array for interpolators",
                          "@type": "MFFloat"
                        },
                        {
                          "@name": "keyValuePosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for PositionInterpolator",
                          "@type": "MFVec3f"
                        },
                        {
                          "@name": "keyValueOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for OrientationInterpolator",
                          "@type": "MFRotation"
                        }
                      ],
                      "#sourceText": [
                        "",
                        "",
                        "ecmascript:",
                        "function initialize () // CameraShotScript",
                        "{",
                        "//  tracePrint ('initialize start...');",
                        "",
                        "    // compute shotDuration by summing durations from contained CameraMovement nodes",
                        "    shotDuration = 0;",
                        "    for (i = 0; i < moves.length; i++)",
                        "    {",
                        "        shotDuration = shotDuration + moves[i].duration;",
                        "    }",
                        "    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');",
                        "",
                        "//  tracePrint ('... initialize() complete');",
                        "}",
                        "",
                        "function set_description (eventValue) // input event received for inputOutput field",
                        "{",
                        "    description = eventValue;",
                        "}",
                        "",
                        "function set_enabled (eventValue) // input event received for inputOutput field",
                        "{",
                        "    enabled = eventValue;",
                        "}",
                        "",
                        "function set_moves (eventValue) // input event received for inputOutput field",
                        "{",
                        "    moves = eventValue;",
                        "}",
                        "",
                        "function set_initialPosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialPosition = eventValue;",
                        "}",
                        "",
                        "function set_initialOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialOrientation = eventValue;",
                        "}",
                        "",
                        "function set_initialAimPoint (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialAimPoint = eventValue;",
                        "}",
                        "",
                        "function set_initialFieldOfView (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFieldOfView = eventValue;",
                        "}",
                        "",
                        "function set_initialFStop (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFStop = eventValue;",
                        "}",
                        "",
                        "function set_initialFocusDistance (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFocusDistance = eventValue;",
                        "}",
                        "",
                        "function set_key (eventValue) // input event received for inputOutput field",
                        "{",
                        "    key = eventValue;",
                        "}",
                        "",
                        "function set_keyValuePosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValuePosition = eventValue;",
                        "}",
                        "",
                        "function set_keyValueOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValueOrientation = eventValue;",
                        "}",
                        "",
                        "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                        "",
                        "function tracePrint (outputValue)",
                        "{",
                        "\tif (traceEnabled) alwaysPrint (outputValue);",
                        "}",
                        "function alwaysPrint (outputValue)",
                        "{",
                        "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                        "    var outputString = outputValue.toString(); // utility function according to spec",
                        "    if (outputString == null) outputString = outputValue; // direct cast",
                        "",
                        "    if  (description.length > 0)",
                        "         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\n');",
                        "    else",
                        "         Browser.print ('[CameraShot] ' + outputString + '\n');",
                        "}",
                        "",
                        ""
                      ]
                    }
                  },
                  {
                    "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                  },
                  {
                    "Script": {
                      "@DEF": "DECLCameraShot_Pan_CameraShotScript",
                      "@directOutput": true,
                      "@mustEvaluate": true,
                      "field": [
                        {
                          "@name": "description",
                          "@accessType": "inputOutput",
                          "@appinfo": "Text description to be displayed for this CameraShot",
                          "@type": "SFString",
                          "@value": "Simple shot of Camera Pan left right and back to center"
                        },
                        {
                          "@name": "enabled",
                          "@accessType": "inputOutput",
                          "@appinfo": "Whether this CameraShot can be activated",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "moves",
                          "@accessType": "inputOutput",
                          "@appinfo": "Set of CameraMovement nodes",
                          "@type": "MFNode",
                          "-children": [
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_PanLeft_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Pan Left"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 2
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -30,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0.4
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_PanRight_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Pan Right"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -30,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      -0.4
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE5000_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Pan back to Center"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 2
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -30,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE6000_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Pause"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 2
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -30,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            }
                          ]
                        },
                        {
                          "@name": "initialPosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera position for this shot",
                          "@type": "SFVec3f",
                          "@value": [
                            -30,
                            1,
                            -10
                          ]
                        },
                        {
                          "@name": "initialOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera rotation for this shot",
                          "@type": "SFRotation",
                          "@value": [
                            0,
                            1,
                            0,
                            0
                          ]
                        },
                        {
                          "@name": "initialAimPoint",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
                          "@type": "SFVec3f"
                        },
                        {
                          "@name": "initialFieldOfView",
                          "@accessType": "inputOutput",
                          "@appinfo": "pi/4",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFStop",
                          "@accessType": "inputOutput",
                          "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFocusDistance",
                          "@accessType": "inputOutput",
                          "@appinfo": "Distance to focal plane of sharpest focus",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "shotDuration",
                          "@accessType": "outputOnly",
                          "@appinfo": "Subtotal duration of contained CameraMovement move durations",
                          "@type": "SFTime"
                        },
                        {
                          "@name": "isActive",
                          "@accessType": "outputOnly",
                          "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "traceEnabled",
                          "@accessType": "initializeOnly",
                          "@appinfo": "enable console output to trace script computations and prototype progress",
                          "@type": "SFBool",
                          "@value": false
                        },
                        {
                          "@name": "key",
                          "@accessType": "inputOutput",
                          "@appinfo": "key array for interpolators",
                          "@type": "MFFloat"
                        },
                        {
                          "@name": "keyValuePosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for PositionInterpolator",
                          "@type": "MFVec3f"
                        },
                        {
                          "@name": "keyValueOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for OrientationInterpolator",
                          "@type": "MFRotation"
                        }
                      ],
                      "#sourceText": [
                        "",
                        "",
                        "ecmascript:",
                        "function initialize () // CameraShotScript",
                        "{",
                        "//  tracePrint ('initialize start...');",
                        "",
                        "    // compute shotDuration by summing durations from contained CameraMovement nodes",
                        "    shotDuration = 0;",
                        "    for (i = 0; i < moves.length; i++)",
                        "    {",
                        "        shotDuration = shotDuration + moves[i].duration;",
                        "    }",
                        "    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');",
                        "",
                        "//  tracePrint ('... initialize() complete');",
                        "}",
                        "",
                        "function set_description (eventValue) // input event received for inputOutput field",
                        "{",
                        "    description = eventValue;",
                        "}",
                        "",
                        "function set_enabled (eventValue) // input event received for inputOutput field",
                        "{",
                        "    enabled = eventValue;",
                        "}",
                        "",
                        "function set_moves (eventValue) // input event received for inputOutput field",
                        "{",
                        "    moves = eventValue;",
                        "}",
                        "",
                        "function set_initialPosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialPosition = eventValue;",
                        "}",
                        "",
                        "function set_initialOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialOrientation = eventValue;",
                        "}",
                        "",
                        "function set_initialAimPoint (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialAimPoint = eventValue;",
                        "}",
                        "",
                        "function set_initialFieldOfView (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFieldOfView = eventValue;",
                        "}",
                        "",
                        "function set_initialFStop (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFStop = eventValue;",
                        "}",
                        "",
                        "function set_initialFocusDistance (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFocusDistance = eventValue;",
                        "}",
                        "",
                        "function set_key (eventValue) // input event received for inputOutput field",
                        "{",
                        "    key = eventValue;",
                        "}",
                        "",
                        "function set_keyValuePosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValuePosition = eventValue;",
                        "}",
                        "",
                        "function set_keyValueOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValueOrientation = eventValue;",
                        "}",
                        "",
                        "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                        "",
                        "function tracePrint (outputValue)",
                        "{",
                        "\tif (traceEnabled) alwaysPrint (outputValue);",
                        "}",
                        "function alwaysPrint (outputValue)",
                        "{",
                        "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                        "    var outputString = outputValue.toString(); // utility function according to spec",
                        "    if (outputString == null) outputString = outputValue; // direct cast",
                        "",
                        "    if  (description.length > 0)",
                        "         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\n');",
                        "    else",
                        "         Browser.print ('[CameraShot] ' + outputString + '\n');",
                        "}",
                        "",
                        ""
                      ]
                    }
                  },
                  {
                    "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                  },
                  {
                    "Script": {
                      "@DEF": "DECLCameraShot_CameraBoom_CameraShotScript",
                      "@directOutput": true,
                      "@mustEvaluate": true,
                      "field": [
                        {
                          "@name": "description",
                          "@accessType": "inputOutput",
                          "@appinfo": "Text description to be displayed for this CameraShot",
                          "@type": "SFString",
                          "@value": "Camera Boom"
                        },
                        {
                          "@name": "enabled",
                          "@accessType": "inputOutput",
                          "@appinfo": "Whether this CameraShot can be activated",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "moves",
                          "@accessType": "inputOutput",
                          "@appinfo": "Set of CameraMovement nodes",
                          "@type": "MFNode",
                          "-children": [
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_CameraBoomUp_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Boom Up"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -20,
                                      5,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_BoomDown_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Boom Down"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -20,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_BoomPause_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Pause"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 2
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -20,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            }
                          ]
                        },
                        {
                          "@name": "initialPosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera position for this shot",
                          "@type": "SFVec3f",
                          "@value": [
                            -20,
                            1,
                            -10
                          ]
                        },
                        {
                          "@name": "initialOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera rotation for this shot",
                          "@type": "SFRotation",
                          "@value": [
                            0,
                            1,
                            0,
                            0
                          ]
                        },
                        {
                          "@name": "initialAimPoint",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
                          "@type": "SFVec3f"
                        },
                        {
                          "@name": "initialFieldOfView",
                          "@accessType": "inputOutput",
                          "@appinfo": "pi/4",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFStop",
                          "@accessType": "inputOutput",
                          "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFocusDistance",
                          "@accessType": "inputOutput",
                          "@appinfo": "Distance to focal plane of sharpest focus",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "shotDuration",
                          "@accessType": "outputOnly",
                          "@appinfo": "Subtotal duration of contained CameraMovement move durations",
                          "@type": "SFTime"
                        },
                        {
                          "@name": "isActive",
                          "@accessType": "outputOnly",
                          "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "traceEnabled",
                          "@accessType": "initializeOnly",
                          "@appinfo": "enable console output to trace script computations and prototype progress",
                          "@type": "SFBool",
                          "@value": false
                        },
                        {
                          "@name": "key",
                          "@accessType": "inputOutput",
                          "@appinfo": "key array for interpolators",
                          "@type": "MFFloat"
                        },
                        {
                          "@name": "keyValuePosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for PositionInterpolator",
                          "@type": "MFVec3f"
                        },
                        {
                          "@name": "keyValueOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for OrientationInterpolator",
                          "@type": "MFRotation"
                        }
                      ],
                      "#sourceText": [
                        "",
                        "",
                        "ecmascript:",
                        "function initialize () // CameraShotScript",
                        "{",
                        "//  tracePrint ('initialize start...');",
                        "",
                        "    // compute shotDuration by summing durations from contained CameraMovement nodes",
                        "    shotDuration = 0;",
                        "    for (i = 0; i < moves.length; i++)",
                        "    {",
                        "        shotDuration = shotDuration + moves[i].duration;",
                        "    }",
                        "    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');",
                        "",
                        "//  tracePrint ('... initialize() complete');",
                        "}",
                        "",
                        "function set_description (eventValue) // input event received for inputOutput field",
                        "{",
                        "    description = eventValue;",
                        "}",
                        "",
                        "function set_enabled (eventValue) // input event received for inputOutput field",
                        "{",
                        "    enabled = eventValue;",
                        "}",
                        "",
                        "function set_moves (eventValue) // input event received for inputOutput field",
                        "{",
                        "    moves = eventValue;",
                        "}",
                        "",
                        "function set_initialPosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialPosition = eventValue;",
                        "}",
                        "",
                        "function set_initialOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialOrientation = eventValue;",
                        "}",
                        "",
                        "function set_initialAimPoint (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialAimPoint = eventValue;",
                        "}",
                        "",
                        "function set_initialFieldOfView (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFieldOfView = eventValue;",
                        "}",
                        "",
                        "function set_initialFStop (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFStop = eventValue;",
                        "}",
                        "",
                        "function set_initialFocusDistance (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFocusDistance = eventValue;",
                        "}",
                        "",
                        "function set_key (eventValue) // input event received for inputOutput field",
                        "{",
                        "    key = eventValue;",
                        "}",
                        "",
                        "function set_keyValuePosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValuePosition = eventValue;",
                        "}",
                        "",
                        "function set_keyValueOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValueOrientation = eventValue;",
                        "}",
                        "",
                        "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                        "",
                        "function tracePrint (outputValue)",
                        "{",
                        "\tif (traceEnabled) alwaysPrint (outputValue);",
                        "}",
                        "function alwaysPrint (outputValue)",
                        "{",
                        "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                        "    var outputString = outputValue.toString(); // utility function according to spec",
                        "    if (outputString == null) outputString = outputValue; // direct cast",
                        "",
                        "    if  (description.length > 0)",
                        "         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\n');",
                        "    else",
                        "         Browser.print ('[CameraShot] ' + outputString + '\n');",
                        "}",
                        "",
                        ""
                      ]
                    }
                  },
                  {
                    "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                  },
                  {
                    "Script": {
                      "@DEF": "DECLCameraShot_CameraTilt_CameraShotScript",
                      "@directOutput": true,
                      "@mustEvaluate": true,
                      "field": [
                        {
                          "@name": "description",
                          "@accessType": "inputOutput",
                          "@appinfo": "Text description to be displayed for this CameraShot",
                          "@type": "SFString",
                          "@value": "Camera Tilt"
                        },
                        {
                          "@name": "enabled",
                          "@accessType": "inputOutput",
                          "@appinfo": "Whether this CameraShot can be activated",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "moves",
                          "@accessType": "inputOutput",
                          "@appinfo": "Set of CameraMovement nodes",
                          "@type": "MFNode",
                          "-children": [
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE7000_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Tilt Pause"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 1
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -10,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      0,
                                      1,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_TiltDown_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Tilt Left"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -10,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      0,
                                      1,
                                      0.785
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_TiltPause_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Tilt Pause"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 1
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -10,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      0,
                                      1,
                                      0.785
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE8000_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Tilt Right"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -10,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      0,
                                      1,
                                      -0.785
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_INSTANCE9000_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Tilt Pause"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 1
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -10,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      0,
                                      1,
                                      -0.785
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_TiltReset_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Camera Tilt Reset"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 1
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      -10,
                                      1,
                                      -10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      0,
                                      1,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_TiltUp_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "Return to home"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 2
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      0,
                                      2,
                                      12
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      0,
                                      1,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            }
                          ]
                        },
                        {
                          "@name": "initialPosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera position for this shot",
                          "@type": "SFVec3f",
                          "@value": [
                            -10,
                            1,
                            -10
                          ]
                        },
                        {
                          "@name": "initialOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera rotation for this shot",
                          "@type": "SFRotation",
                          "@value": [
                            0,
                            0,
                            1,
                            0
                          ]
                        },
                        {
                          "@name": "initialAimPoint",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
                          "@type": "SFVec3f"
                        },
                        {
                          "@name": "initialFieldOfView",
                          "@accessType": "inputOutput",
                          "@appinfo": "pi/4",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFStop",
                          "@accessType": "inputOutput",
                          "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFocusDistance",
                          "@accessType": "inputOutput",
                          "@appinfo": "Distance to focal plane of sharpest focus",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "shotDuration",
                          "@accessType": "outputOnly",
                          "@appinfo": "Subtotal duration of contained CameraMovement move durations",
                          "@type": "SFTime"
                        },
                        {
                          "@name": "isActive",
                          "@accessType": "outputOnly",
                          "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "traceEnabled",
                          "@accessType": "initializeOnly",
                          "@appinfo": "enable console output to trace script computations and prototype progress",
                          "@type": "SFBool",
                          "@value": true
                        },
                        {
                          "@name": "key",
                          "@accessType": "inputOutput",
                          "@appinfo": "key array for interpolators",
                          "@type": "MFFloat"
                        },
                        {
                          "@name": "keyValuePosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for PositionInterpolator",
                          "@type": "MFVec3f"
                        },
                        {
                          "@name": "keyValueOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for OrientationInterpolator",
                          "@type": "MFRotation"
                        }
                      ],
                      "#sourceText": [
                        "",
                        "",
                        "ecmascript:",
                        "function initialize () // CameraShotScript",
                        "{",
                        "//  tracePrint ('initialize start...');",
                        "",
                        "    // compute shotDuration by summing durations from contained CameraMovement nodes",
                        "    shotDuration = 0;",
                        "    for (i = 0; i < moves.length; i++)",
                        "    {",
                        "        shotDuration = shotDuration + moves[i].duration;",
                        "    }",
                        "    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');",
                        "",
                        "//  tracePrint ('... initialize() complete');",
                        "}",
                        "",
                        "function set_description (eventValue) // input event received for inputOutput field",
                        "{",
                        "    description = eventValue;",
                        "}",
                        "",
                        "function set_enabled (eventValue) // input event received for inputOutput field",
                        "{",
                        "    enabled = eventValue;",
                        "}",
                        "",
                        "function set_moves (eventValue) // input event received for inputOutput field",
                        "{",
                        "    moves = eventValue;",
                        "}",
                        "",
                        "function set_initialPosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialPosition = eventValue;",
                        "}",
                        "",
                        "function set_initialOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialOrientation = eventValue;",
                        "}",
                        "",
                        "function set_initialAimPoint (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialAimPoint = eventValue;",
                        "}",
                        "",
                        "function set_initialFieldOfView (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFieldOfView = eventValue;",
                        "}",
                        "",
                        "function set_initialFStop (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFStop = eventValue;",
                        "}",
                        "",
                        "function set_initialFocusDistance (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFocusDistance = eventValue;",
                        "}",
                        "",
                        "function set_key (eventValue) // input event received for inputOutput field",
                        "{",
                        "    key = eventValue;",
                        "}",
                        "",
                        "function set_keyValuePosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValuePosition = eventValue;",
                        "}",
                        "",
                        "function set_keyValueOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValueOrientation = eventValue;",
                        "}",
                        "",
                        "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                        "",
                        "function tracePrint (outputValue)",
                        "{",
                        "\tif (traceEnabled) alwaysPrint (outputValue);",
                        "}",
                        "function alwaysPrint (outputValue)",
                        "{",
                        "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                        "    var outputString = outputValue.toString(); // utility function according to spec",
                        "    if (outputString == null) outputString = outputValue; // direct cast",
                        "",
                        "    if  (description.length > 0)",
                        "         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\n');",
                        "    else",
                        "         Browser.print ('[CameraShot] ' + outputString + '\n');",
                        "}",
                        "",
                        ""
                      ]
                    }
                  },
                  {
                    "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                  }
                ]
              },
              {
                "@name": "filterColor",
                "@accessType": "inputOutput",
                "@appinfo": "Camera filter color that modifies virtual lens capture",
                "@type": "SFColor",
                "@value": [
                  1,
                  1,
                  1
                ]
              },
              {
                "@name": "filterTransparency",
                "@accessType": "inputOutput",
                "@appinfo": "Camera filter transparency that modifies virtual lens capture",
                "@type": "SFFloat",
                "@value": 1
              },
              {
                "@name": "upVector",
                "@accessType": "inputOutput",
                "@appinfo": "upVector changes modify camera orientation (and possibly vice versa)",
                "@type": "SFVec3f",
                "@value": [
                  0,
                  1,
                  0
                ]
              },
              {
                "@name": "fStop",
                "@accessType": "inputOutput",
                "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                "@type": "SFFloat",
                "@value": 5.6
              },
              {
                "@name": "focusDistance",
                "@accessType": "inputOutput",
                "@appinfo": "Distance to focal plane of sharpest focus",
                "@type": "SFFloat",
                "@value": 10
              },
              {
                "@name": "isActive",
                "@accessType": "outputOnly",
                "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                "@type": "SFBool"
              },
              {
                "@name": "totalDuration",
                "@accessType": "outputOnly",
                "@appinfo": "Total duration of contained enabled CameraShot (and thus CameraMovement) move durations",
                "@type": "SFTime"
              },
              {
                "@name": "offlineRender",
                "@accessType": "inputOutput",
                "@appinfo": "OfflineRender node",
                "@type": "SFNode",
                "-children": [
                  {
                    "#comment": "initialization node (if any) goes here"
                  }
                ]
              },
              {
                "@name": "ViewpointNode",
                "@accessType": "initializeOnly",
                "@appinfo": "node reference to permit getting setting fields from within Script",
                "@type": "SFNode",
                "-children": [
                  {
                    "Viewpoint": {
                      "@USE": "DECLCamera_Camera.SimpleShotsTest_CameraViewpoint"
                    }
                  }
                ]
              },
              {
                "@name": "NavInfoNode",
                "@accessType": "initializeOnly",
                "@appinfo": "node reference to permit getting setting fields from within Script",
                "@type": "SFNode",
                "-children": [
                  {
                    "NavigationInfo": {
                      "@USE": "DECLCamera_Camera.SimpleShotsTest_CameraNavInfo"
                    }
                  }
                ]
              },
              {
                "@name": "CameraPI",
                "@accessType": "initializeOnly",
                "@appinfo": "node reference to permit getting setting fields from within Script",
                "@type": "SFNode",
                "-children": [
                  {
                    "PositionInterpolator": {
                      "@USE": "DECLCamera_Camera.SimpleShotsTest_CameraPositionInterpolator"
                    }
                  }
                ]
              },
              {
                "@name": "CameraOI",
                "@accessType": "initializeOnly",
                "@appinfo": "node reference to permit getting setting fields from within Script",
                "@type": "SFNode",
                "-children": [
                  {
                    "OrientationInterpolator": {
                      "@USE": "DECLCamera_Camera.SimpleShotsTest_CameraOrientationInterpolator"
                    }
                  }
                ]
              },
              {
                "@name": "key",
                "@accessType": "inputOutput",
                "@appinfo": "key array for interpolators",
                "@type": "MFFloat"
              },
              {
                "@name": "keyValuePosition",
                "@accessType": "inputOutput",
                "@appinfo": "keyValue array for PositionInterpolator",
                "@type": "MFVec3f"
              },
              {
                "@name": "keyValueOrientation",
                "@accessType": "inputOutput",
                "@appinfo": "keyValue array for OrientationInterpolator",
                "@type": "MFRotation"
              },
              {
                "@name": "animated",
                "@accessType": "inputOutput",
                "@appinfo": "whether internal CameraShot and CameraMove nodes are tracking or changed via ROUTE events",
                "@type": "SFBool",
                "@value": false
              },
              {
                "@name": "initialized",
                "@accessType": "initializeOnly",
                "@appinfo": "perform checkShots() function once immediately after initialization",
                "@type": "SFBool",
                "@value": false
              },
              {
                "@name": "shotCount",
                "@accessType": "initializeOnly",
                "@appinfo": "how many CameraShot nodes are contained in shots array",
                "@type": "SFInt32",
                "@value": 0
              },
              {
                "@name": "movesCount",
                "@accessType": "initializeOnly",
                "@appinfo": "how many CameraMove nodes are contained in moves array",
                "@type": "SFInt32",
                "@value": 0
              },
              {
                "@name": "frameCount",
                "@accessType": "initializeOnly",
                "@appinfo": "how many frames were created in current loop",
                "@type": "SFFloat",
                "@value": 0
              },
              {
                "@name": "startTime",
                "@accessType": "initializeOnly",
                "@appinfo": "holding variable",
                "@type": "SFTime",
                "@value": 0
              },
              {
                "@name": "priorTraceTime",
                "@accessType": "initializeOnly",
                "@appinfo": "holding variable",
                "@type": "SFTime",
                "@value": 0
              },
              {
                "@name": "traceEnabled",
                "@accessType": "initializeOnly",
                "@appinfo": "enable console output to trace script computations and prototype progress",
                "@type": "SFBool",
                "@value": false
              }
            ],
            "#sourceText": [
              "",
              "",
              "ecmascript:",
              "function initialize () // CameraScript",
              "{",
              "//  tracePrint ('initialize start...');",
              "",
              "    NavInfoNode.avatarSize[0]   = nearClipPlane;",
              "",
              "    // remaining setups deferred to invocation of checkShots() method",
              "    // thanks to Yvonne Jung Fraunhofer for diagnosing better approach to function initialization",
              "    alwaysPrint ('initialize complete');",
              "}",
              "",
              "function checkShots (eventValue)",
              "{",
              "    tracePrint ('checkShots() method should only occur after initialize() methods in all other Scripts are complete');",
              "",
              "    // compute totalDuration by summing durations from contained CameraShot and CameraMovement nodes",
              "    totalDuration= 0;",
              "    shotCount  = shots.length;",
              "    movesCount = 0;",
              "    for (i = 0; i < shotCount; i++) // shots index",
              "    {",
              "       tracePrint ('shots[' + i + '].moves.length=' + shots[i].moves.length);",
              "       movesCount   += shots[i].moves.length;",
              "       totalDuration = totalDuration + shots[i].shotDuration;",
              "       if (shots[i].moves.length == 0)",
              "       {",
              "          alwaysPrint ('warning: CameraShot[' + i + '][' + shots[i].description + '] has no contained CameraMove nodes');",
              "       }",
              "    }",
              "    // size checks before proceeding",
              "    if (shotCount == 0)",
              "    {",
              "       alwaysPrint ('warning: no CameraShot nodes found for the shots, nothing to do!');",
              "       return;",
              "    }",
              "    else if (movesCount == 0)",
              "    {",
              "       alwaysPrint ('warning: no CameraMove nodes found for the shots, nothing to do!');",
              "       return;",
              "    }",
              "    else if (totalDuration == 0)",
              "    {",
              "       alwaysPrint ('warning: totalDuration = 0 seconds, nothing to do!');",
              "       return;",
              "    }",
              "    tracePrint ('number of contained CameraShot nodes=' + shotCount);",
              "    tracePrint ('number of contained CameraMove nodes=' + movesCount);",
              "    tracePrint ('totalDuration=' + totalDuration + ' seconds for all shots and moves');",
              "",
              "    // compute interpolators",
              "    var k = 0; // index for latest key, keyValuePosition, keyValueOrientation",
              "    for (i = 0; i < shotCount; i++) // shots index",
              "    {",
              "        if (i==0) // initial entries",
              "        {",
              "           key[0]                   = 0.0; // no previous move",
              "           keyValuePosition[0]      = shots[i].initialPosition;",
              "           keyValueOrientation[0]   = shots[i].initialOrientation;",
              "        }",
              "        else     // new shot repositions, reorients camera as clean break from preceding shot/move",
              "        {",
              "           key[k+1]                 = key[k]; // start from end from previous move",
              "           keyValuePosition[k+1]    = shots[i].initialPosition;",
              "           keyValueOrientation[k+1] = shots[i].initialOrientation;",
              "           k++;",
              "        }",
              "        tracePrint (shots[i].description);",
              "        tracePrint ('shots[i].moves.length=' + shots[i].moves.length);",
              "",
              "        for (j = 0; j < shots[i].moves.length; j++) // moves index",
              "        {",
              "            var durationFloat =              shots[i].moves[j].duration;  // implicit type conversion from SFTime",
              "            //  durationFloat = new SFFloat (shots[i].moves[j].duration); // explicit type conversion from SFTime",
              "            //  tracePrint ('durationFloat=' + durationFloat);",
              "            key[k+1]               = key[k] + (durationFloat / totalDuration);",
              "            keyValuePosition[k+1]  = shots[i].moves[j].goalPosition;",
              "            if (!animated)",
              "            {",
              "                 keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;",
              "            }",
              "            else",
              "            {",
              "                // using constructor SFRotation (SFVec3f fromVector, SFVec3f toVector)",
              "                // see X3D ECMAScript binding Table 7.18 — SFRotation instance creation functions",
              "",
              "                // test if difference vector is zero, if so maintain previous rotation",
              "                var shotVector = ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize();",
              "                if (shotVector.length() >= 0)",
              "                {",
              "                    // default view direction is along -Z axis",
              "                    shots[i].moves[j].goalOrientation = new SFRotation (new SFVec3f (0, 0, 1), shotVector);",
              "                    keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;",
              "                }",
              "                else // note (k > 0)",
              "                {",
              "                    keyValueOrientation[k+1] = keyValueOrientation[k];  // no change",
              "                }",
              "",
              "                tracePrint ('shots[' + i + '].moves[' + j + '].goalAimPoint=' + shots[i].moves[j].goalAimPoint.toString());",
              "                tracePrint ('        ViewpointNode.position=' + ViewpointNode.position.toString());",
              "                tracePrint ('          shotVector     delta=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).toString());",
              "                tracePrint ('          shotVector normalize=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize().toString());",
              "                tracePrint ('               goalOrientation=' + shots[i].moves[j].goalOrientation.toString());",
              "                tracePrint ('      keyValueOrientation[k+1]=' + keyValueOrientation[k+1].toString() + '\n');",
              "            }",
              "            k++; // update index to match latest key, keyValuePosition, keyValueOrientation",
              "",
              "            // check animated parameter:  set true if any of moves are tracking moves",
              "            if (!animated)  animated = shots[i].moves[j].tracking; // once true, remains true",
              "         // tracePrint ('shots[' + i + '].moves[' + j + '].tracking=' + shots[i].moves[j].tracking + ', animated=' + animated);",
              "",
              "            // intermediate trace",
              "            tracePrint ('                key=' + key);",
              "            tracePrint ('   keyValuePosition=' + keyValuePosition);",
              "            tracePrint ('keyValueOrientation=' + keyValueOrientation);",
              "            tracePrint ('- ' + shots[i].moves[j].description);",
              "        }",
              "    }",
              "    tracePrint ('                key=' + key);",
              "    tracePrint ('   keyValuePosition=' + keyValuePosition);",
              "    tracePrint ('keyValueOrientation=' + keyValueOrientation);",
              "    if (key.length != keyValuePosition.length)",
              "    {",
              "      alwaysPrint ('warning: internal error during array construction, ' +",
              "                  'key.length=' + key.length + ' must equal ' +",
              "                  'keyValuePosition.length=' + keyValuePosition.length);",
              "    }",
              "    if (key.length != keyValueOrientation.length)",
              "    {",
              "      alwaysPrint ('warning: internal error during array construction, ' +",
              "                  'key.length=' + key.length + ' must equal ' +",
              "                  'keyValueOrientation.length=' + keyValueOrientation.length);",
              "    }",
              "    if (key.length != (shotCount + movesCount))",
              "    {",
              "      alwaysPrint ('warning: internal error during array construction, ' +",
              "                  'key.length=' + key.length + ' must equal ' +",
              "                  '(shotCount + movesCount)=' + (shotCount + movesCount));",
              "    }",
              "    tracePrint ('           animated=' + animated);",
              "    // set node values",
              "    CameraPI.key      = key;",
              "    CameraOI.key      = key;",
              "    CameraPI.keyValue = keyValuePosition;",
              "    CameraOI.keyValue = keyValueOrientation;",
              "",
              "    if (!animated) // output results",
              "    {",
              "        tracePrint ('<PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');",
              "        tracePrint ('<OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');",
              "    }",
              "    tracePrint ('checkShots() complete');",
              "}",
              "",
              "function stripBrackets (fieldArray)",
              "{",
              "    // some browsers add brackets to array output strings, this function strips them",
              "    outputString = '';",
              "    for (i = 0; i < fieldArray.length; i++)",
              "    {",
              "       outputString += fieldArray[i].toString();",
              "       if (i < fieldArray.length - 1) outputString += ' ';",
              "    }",
              "    return outputString;",
              "}",
              "",
              "function set_fraction (eventValue, timestamp) // input event received for inputOnly field",
              "{",
              "   // traceEnabled = false;  // for testing purposes",
              "",
              "   // if Camera is being animated, immediately recompute interpolator settings",
              "   if (animated) checkShots (true);",
              "",
              "   // trace progress on console with reduced output frequency",
              "   if (frameCount == 0)",
              "   {",
              "      alwaysPrint ('Animation loop commencing, timestamp=' + timestamp);",
              "      startTime      = timestamp;",
              "      priorTraceTime = timestamp;",
              "      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());",
              "",
              "      if (animated) // output results",
              "      {",
              "        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());",
              "        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');",
              "        tracePrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');",
              "      }",
              "   }",
              "   else if ((timestamp - priorTraceTime) >= 1.0) // 1 second trace interval",
              "   {",
              "      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());",
              "      priorTraceTime = timestamp;",
              "",
              "      if (animated) // output results",
              "      {",
              "        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());",
              "        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');",
              "        alwaysPrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');",
              "      }",
              "   }",
              "   if (eventValue == 0)",
              "   {",
              "      // note that zero value is not necessarily sent first by TimeSensor, so otherwise ignored",
              "      frameCount++;",
              "   }",
              "   else if (eventValue == 1)",
              "   {",
              "      alwaysPrint ('shotClock=' + (timestamp - startTime) + ', frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());",
              "      if (animated) // output results",
              "      {",
              "        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());",
              "      }",
              "      alwaysPrint ('Animation loop complete.');",
              "      // do not unbind the Viewpoint and NavigationInfo nodes, let that be controlled externally",
              "   }",
              "   else",
              "   {",
              "      frameCount++;",
              "   }",
              "}",
              "",
              "function set_bind (eventValue) // input event received for inputOnly field",
              "{",
              "   // need to ensure CameraShot nodes are properly initialized",
              "   if (initialized == false)",
              "   {",
              "      checkShots (true);",
              "      initialized = true;",
              "   }",
              "   if (eventValue)",
              "   {",
              "       tracePrint ('Camera has been bound');",
              "   }",
              "   else",
              "   {",
              "       tracePrint ('Camera has been unbound');",
              "   }",
              "}",
              "",
              "function set_description (eventValue) // input event received for inputOutput field",
              "{",
              "    description = eventValue;",
              "}",
              "",
              "function set_position (eventValue) // input event received for inputOutput field",
              "{",
              "    position = eventValue;",
              "}",
              "",
              "function set_orientation (eventValue) // input event received for inputOutput field",
              "{",
              "    orientation = eventValue;",
              "}",
              "",
              "function set_fieldOfView (eventValue) // input event received for inputOutput field",
              "{",
              "    fieldOfView = eventValue;",
              "}",
              "",
              "function set_nearClipPlane (eventValue) // input event received for inputOutput field",
              "{",
              "    nearClipPlane = eventValue;",
              "}",
              "",
              "function set_farClipPlane (eventValue) // input event received for inputOutput field",
              "{",
              "    farClipPlane = eventValue;",
              "}",
              "",
              "function set_shots (eventValue) // input event received for inputOutput field",
              "{",
              "    shots = eventValue;",
              "}",
              "",
              "function set_filterColor (eventValue) // input event received for inputOutput field",
              "{",
              "    filterColor = eventValue;",
              "}",
              "",
              "function set_filterTransparency (eventValue) // input event received for inputOutput field",
              "{",
              "    filterTransparency = eventValue;",
              "}",
              "",
              "function set_upVector (eventValue) // input event received for inputOutput field",
              "{",
              "    upVector = eventValue;",
              "}",
              "",
              "function set_fStop (eventValue) // input event received for inputOutput field",
              "{",
              "    fStop = eventValue;",
              "}",
              "",
              "function set_focusDistance (eventValue) // input event received for inputOutput field",
              "{",
              "    focusDistance = eventValue;",
              "}",
              "",
              "function set_offlineRender (eventValue) // input event received for inputOutput field",
              "{",
              "    offlineRender = eventValue;",
              "}",
              "",
              "function set_key (eventValue) // input event received for inputOutput field",
              "{",
              "    key = eventValue;",
              "}",
              "",
              "function set_keyValuePosition (eventValue) // input event received for inputOutput field",
              "{",
              "    keyValuePosition = eventValue;",
              "}",
              "",
              "function set_keyValueOrientation (eventValue) // input event received for inputOutput field",
              "{",
              "    keyValueOrientation = eventValue;",
              "}",
              "",
              "function set_animated (eventValue) // input event received for inputOutput field",
              "{",
              "    animated = eventValue;",
              "}",
              "",
              "function tracePrint (outputValue)",
              "{",
              "\tif (traceEnabled) alwaysPrint (outputValue);",
              "}",
              "function alwaysPrint (outputValue)",
              "{",
              "    // try to ensure outputValue is converted to string despite Browser.println idiosyncracies",
              "    var outputString = outputValue.toString(); // utility function according to spec",
              "    if (outputString == null) outputString = outputValue; // direct cast",
              "",
              "    if  (description.length > 0)",
              "         Browser.print ('[Camera: ' + description + '] ' + outputString + '\n');",
              "    else",
              "         Browser.print ('[Camera] ' + outputString + '\n');",
              "}",
              "",
              ""
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
            "@fromField": "position",
            "@toNode": "DECLCamera_Camera.SimpleShotsTest_CameraViewpoint",
            "@toField": "position"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
            "@fromField": "orientation",
            "@toNode": "DECLCamera_Camera.SimpleShotsTest_CameraViewpoint",
            "@toField": "orientation"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
            "@fromField": "isActive",
            "@toNode": "DECLCamera_Camera.SimpleShotsTest_CameraViewpoint",
            "@toField": "set_bind"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
            "@fromField": "isActive",
            "@toNode": "DECLCamera_Camera.SimpleShotsTest_CameraNavInfo",
            "@toField": "set_bind"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
            "@fromField": "isActive",
            "@toNode": "DECLCamera_Camera.SimpleShotsTest_CameraDirectionalLight",
            "@toField": "on"
          }
        },
        {
          "Group": {
            "@DEF": "AnimationGroup.SimpleShots",
            "-children": [
              {
                "TimeSensor": {
                  "@DEF": "CameraTimer.SimpleShots"
                }
              },
              {
                "#comment": "initialize clock to match totalDuration of combined Shot Moves"
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
                  "@fromField": "totalDuration",
                  "@toNode": "CameraTimer.SimpleShots",
                  "@toField": "cycleInterval"
                }
              },
              {
                "#comment": "TimeSensor animates the CameraClock since that maintains the computed PositionInterpolator and OrientationInterpolator"
              },
              {
                "ROUTE": {
                  "@fromNode": "CameraTimer.SimpleShots",
                  "@fromField": "fraction_changed",
                  "@toNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
                  "@toField": "set_fraction"
                }
              },
              {
                "Transform": {
                  "@DEF": "Trigger.SimpleShots",
                  "@translation": [
                    -4,
                    4,
                    0
                  ],
                  "-children": [
                    {
                      "BooleanFilter": {
                        "@DEF": "TextTouchActive.SimpleShotsFilter"
                      }
                    },
                    {
                      "TouchSensor": {
                        "@DEF": "TextTouch.SimpleShots",
                        "@description": "touch to animate Camera SimpleShotsTest"
                      }
                    },
                    {
                      "ROUTE": {
                        "@fromNode": "TextTouchActive.SimpleShotsFilter",
                        "@fromField": "inputTrue",
                        "@toNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
                        "@toField": "set_bind"
                      }
                    },
                    {
                      "ROUTE": {
                        "@fromNode": "TextTouch.SimpleShots",
                        "@fromField": "isActive",
                        "@toNode": "TextTouchActive.SimpleShotsFilter",
                        "@toField": "set_boolean"
                      }
                    },
                    {
                      "ROUTE": {
                        "@fromNode": "TextTouch.SimpleShots",
                        "@fromField": "touchTime",
                        "@toNode": "CameraTimer.SimpleShots",
                        "@toField": "startTime"
                      }
                    },
                    {
                      "Shape": {
                        "-geometry": {
                          "Text": {
                            "@string": [
                              "Click to animate",
                              "SimpleShotsTest"
                            ],
                            "-fontStyle": {
                              "FontStyle": {
                                "@justify": [
                                  "MIDDLE",
                                  "MIDDLE"
                                ]
                              }
                            }
                          }
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@DEF": "ArtDeco5",
                                "@ambientIntensity": 0.24,
                                "@diffuseColor": [
                                  0.945455,
                                  0.318988,
                                  0.321717
                                ],
                                "@shininess": 0.01,
                                "@specularColor": [
                                  0.072727,
                                  0.021705,
                                  0.010732
                                ],
                                "-children": [
                                  {
                                    "#comment": "Universal Media Library: ArtDeco 5"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "#comment": "Simplify intersection test for user selecting text"
                    },
                    {
                      "Shape": {
                        "@DEF": "TransparentBox",
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@transparency": 1
                              }
                            }
                          }
                        },
                        "-geometry": {
                          "Box": {
                            "@size": [
                              6,
                              2,
                              0.0001
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "Group": {
            "@DEF": "SimpleShotsTargets",
            "-children": [
              {
                "Transform": {
                  "@DEF": "TargetBoxZoom",
                  "@translation": [
                    -50,
                    1,
                    -20
                  ],
                  "-children": [
                    {
                      "Shape": {
                        "-geometry": {
                          "Box": {}
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {}
                            },
                            "-texture": {
                              "ImageTexture": {
                                "@url": [
                                  "images/CameraMoveZoom.png",
                                  "http://www.web3d.org/x3d/content/examples/Basic/development/images/CameraMoveZoom.png"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "Transform": {
                        "@translation": [
                          0,
                          2,
                          0
                        ],
                        "-children": [
                          {
                            "Shape": {
                              "-geometry": {
                                "Text": {
                                  "@string": [
                                    "Zoom in, out"
                                  ],
                                  "-fontStyle": {
                                    "FontStyle": {
                                      "@justify": [
                                        "MIDDLE",
                                        "MIDDLE"
                                      ]
                                    }
                                  }
                                }
                              },
                              "-appearance": {
                                "Appearance": {
                                  "-material": {
                                    "Material": {}
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Transform": {
                  "@DEF": "TargetBoxDolly",
                  "@translation": [
                    -40,
                    1,
                    -20
                  ],
                  "-children": [
                    {
                      "Shape": {
                        "-geometry": {
                          "Box": {}
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {}
                            },
                            "-texture": {
                              "ImageTexture": {
                                "@url": [
                                  "images/CameraMoveDolly.png",
                                  "http://www.web3d.org/x3d/content/examples/Basic/development/images/CameraMoveDolly.png"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "Transform": {
                        "@translation": [
                          0,
                          2,
                          0
                        ],
                        "-children": [
                          {
                            "Shape": {
                              "-geometry": {
                                "Text": {
                                  "@string": [
                                    "Dolly left, right"
                                  ],
                                  "-fontStyle": {
                                    "FontStyle": {
                                      "@justify": [
                                        "MIDDLE",
                                        "MIDDLE"
                                      ]
                                    }
                                  }
                                }
                              },
                              "-appearance": {
                                "Appearance": {
                                  "-material": {
                                    "Material": {}
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Transform": {
                  "@DEF": "TargetBoxPan",
                  "@translation": [
                    -30,
                    1,
                    -20
                  ],
                  "-children": [
                    {
                      "Shape": {
                        "-geometry": {
                          "Box": {}
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {}
                            },
                            "-texture": {
                              "ImageTexture": {
                                "@url": [
                                  "images/CameraMovePan.png",
                                  "http://www.web3d.org/x3d/content/examples/Basic/development/images/CameraMovePan.png"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "Transform": {
                        "@translation": [
                          0,
                          2,
                          0
                        ],
                        "-children": [
                          {
                            "Shape": {
                              "-geometry": {
                                "Text": {
                                  "@string": [
                                    "Pan left, right"
                                  ],
                                  "-fontStyle": {
                                    "FontStyle": {
                                      "@justify": [
                                        "MIDDLE",
                                        "MIDDLE"
                                      ]
                                    }
                                  }
                                }
                              },
                              "-appearance": {
                                "Appearance": {
                                  "-material": {
                                    "Material": {}
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Transform": {
                  "@DEF": "TargetBoxBoom",
                  "@translation": [
                    -20,
                    1,
                    -20
                  ],
                  "-children": [
                    {
                      "Shape": {
                        "-geometry": {
                          "Box": {}
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {}
                            },
                            "-texture": {
                              "ImageTexture": {
                                "@url": [
                                  "images/CameraMoveBoom.png",
                                  "http://www.web3d.org/x3d/content/examples/Basic/development/images/CameraMoveBoom.png"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "Transform": {
                        "@translation": [
                          0,
                          2,
                          0
                        ],
                        "-children": [
                          {
                            "Shape": {
                              "-geometry": {
                                "Text": {
                                  "@string": [
                                    "Boom up, down"
                                  ],
                                  "-fontStyle": {
                                    "FontStyle": {
                                      "@justify": [
                                        "MIDDLE",
                                        "MIDDLE"
                                      ]
                                    }
                                  }
                                }
                              },
                              "-appearance": {
                                "Appearance": {
                                  "-material": {
                                    "Material": {}
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Transform": {
                  "@DEF": "TargetBoxTilt",
                  "@translation": [
                    -10,
                    1,
                    -20
                  ],
                  "-children": [
                    {
                      "Shape": {
                        "-geometry": {
                          "Box": {}
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {}
                            },
                            "-texture": {
                              "ImageTexture": {
                                "@url": [
                                  "images/CameraMoveTilt.png",
                                  "http://www.web3d.org/x3d/content/examples/Basic/development/images/CameraMoveTilt.png"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "Transform": {
                        "@translation": [
                          0,
                          2,
                          0
                        ],
                        "-children": [
                          {
                            "Shape": {
                              "-geometry": {
                                "Text": {
                                  "@string": [
                                    "Tilt left, right"
                                  ],
                                  "-fontStyle": {
                                    "FontStyle": {
                                      "@justify": [
                                        "MIDDLE",
                                        "MIDDLE"
                                      ]
                                    }
                                  }
                                }
                              },
                              "-appearance": {
                                "Appearance": {
                                  "-material": {
                                    "Material": {}
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "#comment": "=============== Camera.AimPointTest =============="
        },
        {
          "Viewpoint": {
            "@DEF": "DECLCamera_Camera.AimPointTest_CameraViewpoint",
            "@position": [
              4,
              4,
              10
            ],
            "@orientation": [
              0,
              0,
              1,
              0
            ],
            "@fieldOfView": 0.7854,
            "@description": "AimPointTest for moving camera tracking moving target"
          }
        },
        {
          "#comment": "NavInfo EXAMINE used since some browsers (InstantReality) try to lock view to vertical when flying to avoid disorientation"
        },
        {
          "NavigationInfo": {
            "@DEF": "DECLCamera_Camera.AimPointTest_CameraNavInfo",
            "@type": [
              "EXAMINE",
              "FLY",
              "ANY"
            ],
            "@headlight": true,
            "@visibilityLimit": 0
          }
        },
        {
          "#comment": "this DirectionalLight replaces NavigationInfo headlight in order to add color capability"
        },
        {
          "DirectionalLight": {
            "@DEF": "DECLCamera_Camera.AimPointTest_CameraDirectionalLight",
            "@global": true,
            "-children": [
              {
                "#comment": "TODO confirm other default field values match NavigationInfo spec"
              }
            ],
            "@on": true,
            "@color": [
              1,
              1,
              1
            ],
            "@intensity": 1
          }
        },
        {
          "PositionInterpolator": {
            "@DEF": "DECLCamera_Camera.AimPointTest_CameraPositionInterpolator",
            "@key": [
              0,
              1
            ],
            "@keyValue": [
              0,
              0,
              0,
              0,
              0,
              0
            ]
          }
        },
        {
          "OrientationInterpolator": {
            "@DEF": "DECLCamera_Camera.AimPointTest_CameraOrientationInterpolator",
            "@key": [
              0,
              1
            ],
            "@keyValue": [
              0,
              1,
              0,
              0,
              0,
              1,
              0,
              0
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.AimPointTest_CameraPositionInterpolator",
            "@fromField": "value_changed",
            "@toNode": "DECLCamera_Camera.AimPointTest_CameraViewpoint",
            "@toField": "position"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.AimPointTest_CameraOrientationInterpolator",
            "@fromField": "value_changed",
            "@toNode": "DECLCamera_Camera.AimPointTest_CameraViewpoint",
            "@toField": "orientation"
          }
        },
        {
          "Script": {
            "@DEF": "DECLCamera_Camera.AimPointTest_CameraScript",
            "@directOutput": true,
            "@mustEvaluate": true,
            "-children": [
              {
                "#comment": "binding is controlled externally, all camera operations proceed the same regardless of whether bound or not"
              }
            ],
            "field": [
              {
                "@name": "description",
                "@accessType": "inputOutput",
                "@appinfo": "Text description to be displayed for this Camera",
                "@type": "SFString",
                "@value": "AimPointTest for moving camera tracking moving target"
              },
              {
                "@name": "position",
                "@accessType": "inputOutput",
                "@appinfo": "Camera position in local transformation frame",
                "@type": "SFVec3f",
                "@value": [
                  4,
                  4,
                  10
                ]
              },
              {
                "@name": "orientation",
                "@accessType": "inputOutput",
                "@appinfo": "Camera rotation in local transformation frame",
                "@type": "SFRotation",
                "@value": [
                  0,
                  0,
                  1,
                  0
                ]
              },
              {
                "@name": "set_fraction",
                "@accessType": "inputOnly",
                "@appinfo": "input fraction drives interpolators",
                "@type": "SFFloat"
              },
              {
                "@name": "set_bind",
                "@accessType": "inputOnly",
                "@appinfo": "input event binds or unbinds this Camera",
                "@type": "SFBool"
              },
              {
                "@name": "fieldOfView",
                "@accessType": "inputOutput",
                "@appinfo": "pi/4",
                "@type": "SFFloat",
                "@value": 0.7854
              },
              {
                "@name": "nearClipPlane",
                "@accessType": "inputOutput",
                "@appinfo": "Vector distance to near clipping plane",
                "@type": "SFFloat",
                "@value": 0.25
              },
              {
                "@name": "farClipPlane",
                "@accessType": "inputOutput",
                "@appinfo": "Vector distance to far clipping plane",
                "@type": "SFFloat",
                "@value": 0
              },
              {
                "@name": "shots",
                "@accessType": "inputOutput",
                "@appinfo": "Array of CameraShot nodes which in turn contain CameraMovement nodes",
                "@type": "MFNode",
                "-children": [
                  {
                    "Script": {
                      "@DEF": "DECLCameraShot_Shot5_CameraShotScript",
                      "@directOutput": true,
                      "@mustEvaluate": true,
                      "field": [
                        {
                          "@name": "description",
                          "@accessType": "inputOutput",
                          "@appinfo": "Text description to be displayed for this CameraShot",
                          "@type": "SFString",
                          "@value": "#3 Tracking shot"
                        },
                        {
                          "@name": "enabled",
                          "@accessType": "inputOutput",
                          "@appinfo": "Whether this CameraShot can be activated",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "moves",
                          "@accessType": "inputOutput",
                          "@appinfo": "Set of CameraMovement nodes",
                          "@type": "MFNode",
                          "-children": [
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_MoveAimPoint3.1_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "AimPoint 3.1 moving BoxPath"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 8
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      6,
                                      6,
                                      10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation"
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool",
                                    "@value": true
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_MoveAimPoint3.2_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "AimPoint 3.2 pan right while tracking"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 8
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      40,
                                      6,
                                      12
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation"
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool",
                                    "@value": true
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_MoveAimPoint3.3_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "AimPoint 3.3 boom up while tracking"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 3
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      40,
                                      20,
                                      13
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation"
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool",
                                    "@value": true
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f"
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            },
                            {
                              "#comment": "First node determines node type of this prototype"
                            },
                            {
                              "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
                            },
                            {
                              "#comment": "Script holds CameraMovement initialization values for query by parent CameraShot, and also permits changing values via events"
                            },
                            {
                              "Script": {
                                "@DEF": "DECLCameraMovement_MoveAimPoint3.4_CameraMovementScript",
                                "@directOutput": true,
                                "@mustEvaluate": true,
                                "field": [
                                  {
                                    "@name": "description",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Text description to be displayed for this CameraMovement",
                                    "@type": "SFString",
                                    "@value": "AimPoint 3.4 restore camera back to home"
                                  },
                                  {
                                    "@name": "enabled",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether this CameraMovement can be activated",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "duration",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Duration in seconds for this move",
                                    "@type": "SFFloat",
                                    "@value": 5
                                  },
                                  {
                                    "@name": "goalPosition",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera position for this move",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      4,
                                      4,
                                      10
                                    ]
                                  },
                                  {
                                    "@name": "goalOrientation",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal camera rotation for this move",
                                    "@type": "SFRotation",
                                    "@value": [
                                      0,
                                      1,
                                      0,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "tracking",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Whether or not camera direction is tracking towards the aimPoint",
                                    "@type": "SFBool",
                                    "@value": true
                                  },
                                  {
                                    "@name": "goalAimPoint",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal aimPoint for this move, ignored if tracking=false",
                                    "@type": "SFVec3f",
                                    "@value": [
                                      4,
                                      4,
                                      0
                                    ]
                                  },
                                  {
                                    "@name": "goalFieldOfView",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Goal fieldOfView for this move",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFStop",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "goalFocusDistance",
                                    "@accessType": "inputOutput",
                                    "@appinfo": "Distance to focal plane of sharpest focus",
                                    "@type": "SFFloat"
                                  },
                                  {
                                    "@name": "isActive",
                                    "@accessType": "outputOnly",
                                    "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                                    "@type": "SFBool"
                                  },
                                  {
                                    "@name": "traceEnabled",
                                    "@accessType": "initializeOnly",
                                    "@appinfo": "enable console output to trace script computations and prototype progress",
                                    "@type": "SFBool",
                                    "@value": false
                                  }
                                ],
                                "#sourceText": [
                                  "",
                                  "",
                                  "ecmascript:",
                                  "function initialize () // CameraMovementScript",
                                  "{",
                                  "//  tracePrint ('initialize start...');",
                                  "    alwaysPrint ('initialize goalPosition=' + goalPosition.toString() + ', goalOrientation=' + goalOrientation.toString() +",
                                  "                           ', goalAimPoint=' + goalAimPoint.toString() // + ', tracking=' + tracking.toString()",
                                  "                           );",
                                  "    if (duration < 0)",
                                  "    {",
                                  "       alwaysPrint ('error: negative duration=' + duration + ', reset to 0 and ignored');",
                                  "       duration = 0;",
                                  "    }",
                                  "    else if (duration == 0)",
                                  "    {",
                                  "       alwaysPrint ('warning: duration=0, nothing to do!');",
                                  "    }",
                                  "    tracePrint ('... initialize complete');",
                                  "}",
                                  "",
                                  "function set_goalAimPoint (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalAimPoint_changed = eventValue;",
                                  "    tracePrint ('goalAimPoint=' + goalAimPoint.toString());",
                                  "",
                                  "    // updated goalOrientation tracking is handled by Camera recomputing the OrientationInterpolator",
                                  "}",
                                  "",
                                  "function set_description (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    description = eventValue;",
                                  "}",
                                  "",
                                  "function set_enabled (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    enabled = eventValue;",
                                  "}",
                                  "",
                                  "function set_duration (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    duration = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalPosition (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalPosition = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalOrientation (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalOrientation = eventValue;",
                                  "}",
                                  "",
                                  "function set_tracking (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    tracking = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFieldOfView (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFieldOfView = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFStop (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFStop = eventValue;",
                                  "}",
                                  "",
                                  "function set_goalFocusDistance (eventValue) // input event received for inputOutput field",
                                  "{",
                                  "    goalFocusDistance = eventValue;",
                                  "}",
                                  "",
                                  "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                                  "",
                                  "function tracePrint (outputValue)",
                                  "{",
                                  "\tif (traceEnabled) alwaysPrint (outputValue);",
                                  "}",
                                  "",
                                  "function alwaysPrint (outputValue)",
                                  "{",
                                  "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                                  "    var outputString = outputValue.toString(); // utility function according to spec",
                                  "    if (outputString == null) outputString = outputValue; // direct cast",
                                  "",
                                  "    if  (description.length > 0)",
                                  "         Browser.print ('[CameraMovement: ' + description + '] ' + outputString + '\n');",
                                  "    else",
                                  "         Browser.print ('[CameraMovement] ' + outputString + '\n');",
                                  "}",
                                  "",
                                  ""
                                ]
                              }
                            },
                            {
                              "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                            }
                          ]
                        },
                        {
                          "@name": "initialPosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera position for this shot",
                          "@type": "SFVec3f",
                          "@value": [
                            6,
                            6,
                            10
                          ]
                        },
                        {
                          "@name": "initialOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize camera rotation for this shot",
                          "@type": "SFRotation",
                          "@value": [
                            0,
                            1,
                            0,
                            0
                          ]
                        },
                        {
                          "@name": "initialAimPoint",
                          "@accessType": "inputOutput",
                          "@appinfo": "Setup to reinitialize aimpoint (relative location for camera direction) for this shot",
                          "@type": "SFVec3f"
                        },
                        {
                          "@name": "initialFieldOfView",
                          "@accessType": "inputOutput",
                          "@appinfo": "pi/4",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFStop",
                          "@accessType": "inputOutput",
                          "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "initialFocusDistance",
                          "@accessType": "inputOutput",
                          "@appinfo": "Distance to focal plane of sharpest focus",
                          "@type": "SFFloat"
                        },
                        {
                          "@name": "shotDuration",
                          "@accessType": "outputOnly",
                          "@appinfo": "Subtotal duration of contained CameraMovement move durations",
                          "@type": "SFTime"
                        },
                        {
                          "@name": "isActive",
                          "@accessType": "outputOnly",
                          "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                          "@type": "SFBool"
                        },
                        {
                          "@name": "traceEnabled",
                          "@accessType": "initializeOnly",
                          "@appinfo": "enable console output to trace script computations and prototype progress",
                          "@type": "SFBool",
                          "@value": false
                        },
                        {
                          "@name": "key",
                          "@accessType": "inputOutput",
                          "@appinfo": "key array for interpolators",
                          "@type": "MFFloat"
                        },
                        {
                          "@name": "keyValuePosition",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for PositionInterpolator",
                          "@type": "MFVec3f"
                        },
                        {
                          "@name": "keyValueOrientation",
                          "@accessType": "inputOutput",
                          "@appinfo": "keyValue array for OrientationInterpolator",
                          "@type": "MFRotation"
                        }
                      ],
                      "#sourceText": [
                        "",
                        "",
                        "ecmascript:",
                        "function initialize () // CameraShotScript",
                        "{",
                        "//  tracePrint ('initialize start...');",
                        "",
                        "    // compute shotDuration by summing durations from contained CameraMovement nodes",
                        "    shotDuration = 0;",
                        "    for (i = 0; i < moves.length; i++)",
                        "    {",
                        "        shotDuration = shotDuration + moves[i].duration;",
                        "    }",
                        "    alwaysPrint ('number of contained CameraMove nodes=' + moves.length + ', shotDuration=' + shotDuration + ' seconds');",
                        "",
                        "//  tracePrint ('... initialize() complete');",
                        "}",
                        "",
                        "function set_description (eventValue) // input event received for inputOutput field",
                        "{",
                        "    description = eventValue;",
                        "}",
                        "",
                        "function set_enabled (eventValue) // input event received for inputOutput field",
                        "{",
                        "    enabled = eventValue;",
                        "}",
                        "",
                        "function set_moves (eventValue) // input event received for inputOutput field",
                        "{",
                        "    moves = eventValue;",
                        "}",
                        "",
                        "function set_initialPosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialPosition = eventValue;",
                        "}",
                        "",
                        "function set_initialOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialOrientation = eventValue;",
                        "}",
                        "",
                        "function set_initialAimPoint (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialAimPoint = eventValue;",
                        "}",
                        "",
                        "function set_initialFieldOfView (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFieldOfView = eventValue;",
                        "}",
                        "",
                        "function set_initialFStop (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFStop = eventValue;",
                        "}",
                        "",
                        "function set_initialFocusDistance (eventValue) // input event received for inputOutput field",
                        "{",
                        "    initialFocusDistance = eventValue;",
                        "}",
                        "",
                        "function set_key (eventValue) // input event received for inputOutput field",
                        "{",
                        "    key = eventValue;",
                        "}",
                        "",
                        "function set_keyValuePosition (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValuePosition = eventValue;",
                        "}",
                        "",
                        "function set_keyValueOrientation (eventValue) // input event received for inputOutput field",
                        "{",
                        "    keyValueOrientation = eventValue;",
                        "}",
                        "",
                        "// TODO consider method set_active for constructed Camera node BooleanSequencer to send isActive",
                        "",
                        "function tracePrint (outputValue)",
                        "{",
                        "\tif (traceEnabled) alwaysPrint (outputValue);",
                        "}",
                        "function alwaysPrint (outputValue)",
                        "{",
                        "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
                        "    var outputString = outputValue.toString(); // utility function according to spec",
                        "    if (outputString == null) outputString = outputValue; // direct cast",
                        "",
                        "    if  (description.length > 0)",
                        "         Browser.print ('[CameraShot: ' + description + '] ' + outputString + '\n');",
                        "    else",
                        "         Browser.print ('[CameraShot] ' + outputString + '\n');",
                        "}",
                        "",
                        ""
                      ]
                    }
                  },
                  {
                    "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
                  }
                ]
              },
              {
                "@name": "filterColor",
                "@accessType": "inputOutput",
                "@appinfo": "Camera filter color that modifies virtual lens capture",
                "@type": "SFColor",
                "@value": [
                  1,
                  1,
                  1
                ]
              },
              {
                "@name": "filterTransparency",
                "@accessType": "inputOutput",
                "@appinfo": "Camera filter transparency that modifies virtual lens capture",
                "@type": "SFFloat",
                "@value": 1
              },
              {
                "@name": "upVector",
                "@accessType": "inputOutput",
                "@appinfo": "upVector changes modify camera orientation (and possibly vice versa)",
                "@type": "SFVec3f",
                "@value": [
                  0,
                  1,
                  0
                ]
              },
              {
                "@name": "fStop",
                "@accessType": "inputOutput",
                "@appinfo": "Focal length divided effective aperture diameter indicating width of focal plane",
                "@type": "SFFloat",
                "@value": 5.6
              },
              {
                "@name": "focusDistance",
                "@accessType": "inputOutput",
                "@appinfo": "Distance to focal plane of sharpest focus",
                "@type": "SFFloat",
                "@value": 10
              },
              {
                "@name": "isActive",
                "@accessType": "outputOnly",
                "@appinfo": "Mark start/stop with true/false output respectively useful to trigger external animations",
                "@type": "SFBool"
              },
              {
                "@name": "totalDuration",
                "@accessType": "outputOnly",
                "@appinfo": "Total duration of contained enabled CameraShot (and thus CameraMovement) move durations",
                "@type": "SFTime"
              },
              {
                "@name": "offlineRender",
                "@accessType": "inputOutput",
                "@appinfo": "OfflineRender node",
                "@type": "SFNode",
                "-children": [
                  {
                    "#comment": "initialization node (if any) goes here"
                  }
                ]
              },
              {
                "@name": "ViewpointNode",
                "@accessType": "initializeOnly",
                "@appinfo": "node reference to permit getting setting fields from within Script",
                "@type": "SFNode",
                "-children": [
                  {
                    "Viewpoint": {
                      "@USE": "DECLCamera_Camera.AimPointTest_CameraViewpoint"
                    }
                  }
                ]
              },
              {
                "@name": "NavInfoNode",
                "@accessType": "initializeOnly",
                "@appinfo": "node reference to permit getting setting fields from within Script",
                "@type": "SFNode",
                "-children": [
                  {
                    "NavigationInfo": {
                      "@USE": "DECLCamera_Camera.AimPointTest_CameraNavInfo"
                    }
                  }
                ]
              },
              {
                "@name": "CameraPI",
                "@accessType": "initializeOnly",
                "@appinfo": "node reference to permit getting setting fields from within Script",
                "@type": "SFNode",
                "-children": [
                  {
                    "PositionInterpolator": {
                      "@USE": "DECLCamera_Camera.AimPointTest_CameraPositionInterpolator"
                    }
                  }
                ]
              },
              {
                "@name": "CameraOI",
                "@accessType": "initializeOnly",
                "@appinfo": "node reference to permit getting setting fields from within Script",
                "@type": "SFNode",
                "-children": [
                  {
                    "OrientationInterpolator": {
                      "@USE": "DECLCamera_Camera.AimPointTest_CameraOrientationInterpolator"
                    }
                  }
                ]
              },
              {
                "@name": "key",
                "@accessType": "inputOutput",
                "@appinfo": "key array for interpolators",
                "@type": "MFFloat"
              },
              {
                "@name": "keyValuePosition",
                "@accessType": "inputOutput",
                "@appinfo": "keyValue array for PositionInterpolator",
                "@type": "MFVec3f"
              },
              {
                "@name": "keyValueOrientation",
                "@accessType": "inputOutput",
                "@appinfo": "keyValue array for OrientationInterpolator",
                "@type": "MFRotation"
              },
              {
                "@name": "animated",
                "@accessType": "inputOutput",
                "@appinfo": "whether internal CameraShot and CameraMove nodes are tracking or changed via ROUTE events",
                "@type": "SFBool",
                "@value": false
              },
              {
                "@name": "initialized",
                "@accessType": "initializeOnly",
                "@appinfo": "perform checkShots() function once immediately after initialization",
                "@type": "SFBool",
                "@value": false
              },
              {
                "@name": "shotCount",
                "@accessType": "initializeOnly",
                "@appinfo": "how many CameraShot nodes are contained in shots array",
                "@type": "SFInt32",
                "@value": 0
              },
              {
                "@name": "movesCount",
                "@accessType": "initializeOnly",
                "@appinfo": "how many CameraMove nodes are contained in moves array",
                "@type": "SFInt32",
                "@value": 0
              },
              {
                "@name": "frameCount",
                "@accessType": "initializeOnly",
                "@appinfo": "how many frames were created in current loop",
                "@type": "SFFloat",
                "@value": 0
              },
              {
                "@name": "startTime",
                "@accessType": "initializeOnly",
                "@appinfo": "holding variable",
                "@type": "SFTime",
                "@value": 0
              },
              {
                "@name": "priorTraceTime",
                "@accessType": "initializeOnly",
                "@appinfo": "holding variable",
                "@type": "SFTime",
                "@value": 0
              },
              {
                "@name": "traceEnabled",
                "@accessType": "initializeOnly",
                "@appinfo": "enable console output to trace script computations and prototype progress",
                "@type": "SFBool",
                "@value": false
              }
            ],
            "#sourceText": [
              "",
              "",
              "ecmascript:",
              "function initialize () // CameraScript",
              "{",
              "//  tracePrint ('initialize start...');",
              "",
              "    NavInfoNode.avatarSize[0]   = nearClipPlane;",
              "",
              "    // remaining setups deferred to invocation of checkShots() method",
              "    // thanks to Yvonne Jung Fraunhofer for diagnosing better approach to function initialization",
              "    alwaysPrint ('initialize complete');",
              "}",
              "",
              "function checkShots (eventValue)",
              "{",
              "    tracePrint ('checkShots() method should only occur after initialize() methods in all other Scripts are complete');",
              "",
              "    // compute totalDuration by summing durations from contained CameraShot and CameraMovement nodes",
              "    totalDuration= 0;",
              "    shotCount  = shots.length;",
              "    movesCount = 0;",
              "    for (i = 0; i < shotCount; i++) // shots index",
              "    {",
              "       tracePrint ('shots[' + i + '].moves.length=' + shots[i].moves.length);",
              "       movesCount   += shots[i].moves.length;",
              "       totalDuration = totalDuration + shots[i].shotDuration;",
              "       if (shots[i].moves.length == 0)",
              "       {",
              "          alwaysPrint ('warning: CameraShot[' + i + '][' + shots[i].description + '] has no contained CameraMove nodes');",
              "       }",
              "    }",
              "    // size checks before proceeding",
              "    if (shotCount == 0)",
              "    {",
              "       alwaysPrint ('warning: no CameraShot nodes found for the shots, nothing to do!');",
              "       return;",
              "    }",
              "    else if (movesCount == 0)",
              "    {",
              "       alwaysPrint ('warning: no CameraMove nodes found for the shots, nothing to do!');",
              "       return;",
              "    }",
              "    else if (totalDuration == 0)",
              "    {",
              "       alwaysPrint ('warning: totalDuration = 0 seconds, nothing to do!');",
              "       return;",
              "    }",
              "    tracePrint ('number of contained CameraShot nodes=' + shotCount);",
              "    tracePrint ('number of contained CameraMove nodes=' + movesCount);",
              "    tracePrint ('totalDuration=' + totalDuration + ' seconds for all shots and moves');",
              "",
              "    // compute interpolators",
              "    var k = 0; // index for latest key, keyValuePosition, keyValueOrientation",
              "    for (i = 0; i < shotCount; i++) // shots index",
              "    {",
              "        if (i==0) // initial entries",
              "        {",
              "           key[0]                   = 0.0; // no previous move",
              "           keyValuePosition[0]      = shots[i].initialPosition;",
              "           keyValueOrientation[0]   = shots[i].initialOrientation;",
              "        }",
              "        else     // new shot repositions, reorients camera as clean break from preceding shot/move",
              "        {",
              "           key[k+1]                 = key[k]; // start from end from previous move",
              "           keyValuePosition[k+1]    = shots[i].initialPosition;",
              "           keyValueOrientation[k+1] = shots[i].initialOrientation;",
              "           k++;",
              "        }",
              "        tracePrint (shots[i].description);",
              "        tracePrint ('shots[i].moves.length=' + shots[i].moves.length);",
              "",
              "        for (j = 0; j < shots[i].moves.length; j++) // moves index",
              "        {",
              "            var durationFloat =              shots[i].moves[j].duration;  // implicit type conversion from SFTime",
              "            //  durationFloat = new SFFloat (shots[i].moves[j].duration); // explicit type conversion from SFTime",
              "            //  tracePrint ('durationFloat=' + durationFloat);",
              "            key[k+1]               = key[k] + (durationFloat / totalDuration);",
              "            keyValuePosition[k+1]  = shots[i].moves[j].goalPosition;",
              "            if (!animated)",
              "            {",
              "                 keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;",
              "            }",
              "            else",
              "            {",
              "                // using constructor SFRotation (SFVec3f fromVector, SFVec3f toVector)",
              "                // see X3D ECMAScript binding Table 7.18 — SFRotation instance creation functions",
              "",
              "                // test if difference vector is zero, if so maintain previous rotation",
              "                var shotVector = ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize();",
              "                if (shotVector.length() >= 0)",
              "                {",
              "                    // default view direction is along -Z axis",
              "                    shots[i].moves[j].goalOrientation = new SFRotation (new SFVec3f (0, 0, 1), shotVector);",
              "                    keyValueOrientation[k+1] = shots[i].moves[j].goalOrientation;",
              "                }",
              "                else // note (k > 0)",
              "                {",
              "                    keyValueOrientation[k+1] = keyValueOrientation[k];  // no change",
              "                }",
              "",
              "                tracePrint ('shots[' + i + '].moves[' + j + '].goalAimPoint=' + shots[i].moves[j].goalAimPoint.toString());",
              "                tracePrint ('        ViewpointNode.position=' + ViewpointNode.position.toString());",
              "                tracePrint ('          shotVector     delta=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).toString());",
              "                tracePrint ('          shotVector normalize=' + ViewpointNode.position.subtract(shots[i].moves[j].goalAimPoint).normalize().toString());",
              "                tracePrint ('               goalOrientation=' + shots[i].moves[j].goalOrientation.toString());",
              "                tracePrint ('      keyValueOrientation[k+1]=' + keyValueOrientation[k+1].toString() + '\n');",
              "            }",
              "            k++; // update index to match latest key, keyValuePosition, keyValueOrientation",
              "",
              "            // check animated parameter:  set true if any of moves are tracking moves",
              "            if (!animated)  animated = shots[i].moves[j].tracking; // once true, remains true",
              "         // tracePrint ('shots[' + i + '].moves[' + j + '].tracking=' + shots[i].moves[j].tracking + ', animated=' + animated);",
              "",
              "            // intermediate trace",
              "            tracePrint ('                key=' + key);",
              "            tracePrint ('   keyValuePosition=' + keyValuePosition);",
              "            tracePrint ('keyValueOrientation=' + keyValueOrientation);",
              "            tracePrint ('- ' + shots[i].moves[j].description);",
              "        }",
              "    }",
              "    tracePrint ('                key=' + key);",
              "    tracePrint ('   keyValuePosition=' + keyValuePosition);",
              "    tracePrint ('keyValueOrientation=' + keyValueOrientation);",
              "    if (key.length != keyValuePosition.length)",
              "    {",
              "      alwaysPrint ('warning: internal error during array construction, ' +",
              "                  'key.length=' + key.length + ' must equal ' +",
              "                  'keyValuePosition.length=' + keyValuePosition.length);",
              "    }",
              "    if (key.length != keyValueOrientation.length)",
              "    {",
              "      alwaysPrint ('warning: internal error during array construction, ' +",
              "                  'key.length=' + key.length + ' must equal ' +",
              "                  'keyValueOrientation.length=' + keyValueOrientation.length);",
              "    }",
              "    if (key.length != (shotCount + movesCount))",
              "    {",
              "      alwaysPrint ('warning: internal error during array construction, ' +",
              "                  'key.length=' + key.length + ' must equal ' +",
              "                  '(shotCount + movesCount)=' + (shotCount + movesCount));",
              "    }",
              "    tracePrint ('           animated=' + animated);",
              "    // set node values",
              "    CameraPI.key      = key;",
              "    CameraOI.key      = key;",
              "    CameraPI.keyValue = keyValuePosition;",
              "    CameraOI.keyValue = keyValueOrientation;",
              "",
              "    if (!animated) // output results",
              "    {",
              "        tracePrint ('<PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');",
              "        tracePrint ('<OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');",
              "    }",
              "    tracePrint ('checkShots() complete');",
              "}",
              "",
              "function stripBrackets (fieldArray)",
              "{",
              "    // some browsers add brackets to array output strings, this function strips them",
              "    outputString = '';",
              "    for (i = 0; i < fieldArray.length; i++)",
              "    {",
              "       outputString += fieldArray[i].toString();",
              "       if (i < fieldArray.length - 1) outputString += ' ';",
              "    }",
              "    return outputString;",
              "}",
              "",
              "function set_fraction (eventValue, timestamp) // input event received for inputOnly field",
              "{",
              "   // traceEnabled = false;  // for testing purposes",
              "",
              "   // if Camera is being animated, immediately recompute interpolator settings",
              "   if (animated) checkShots (true);",
              "",
              "   // trace progress on console with reduced output frequency",
              "   if (frameCount == 0)",
              "   {",
              "      alwaysPrint ('Animation loop commencing, timestamp=' + timestamp);",
              "      startTime      = timestamp;",
              "      priorTraceTime = timestamp;",
              "      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());",
              "",
              "      if (animated) // output results",
              "      {",
              "        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());",
              "        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');",
              "        tracePrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');",
              "      }",
              "   }",
              "   else if ((timestamp - priorTraceTime) >= 1.0) // 1 second trace interval",
              "   {",
              "      alwaysPrint ('shotClock=' + (timestamp - startTime) + ' seconds, frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());",
              "      priorTraceTime = timestamp;",
              "",
              "      if (animated) // output results",
              "      {",
              "        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());",
              "        tracePrint ('  <PositionInterpolator    DEF=\\'CameraPositionInterpolator\\'    key=\\'' + stripBrackets(CameraPI.key) + '\\' keyValue=\\'' + stripBrackets(CameraPI.keyValue) + '\\'/>');",
              "        alwaysPrint ('  <OrientationInterpolator DEF=\\'CameraOrientationInterpolator\\' key=\\'' + stripBrackets(CameraOI.key) + '\\' keyValue=\\'' + stripBrackets(CameraOI.keyValue) + '\\'/>');",
              "      }",
              "   }",
              "   if (eventValue == 0)",
              "   {",
              "      // note that zero value is not necessarily sent first by TimeSensor, so otherwise ignored",
              "      frameCount++;",
              "   }",
              "   else if (eventValue == 1)",
              "   {",
              "      alwaysPrint ('shotClock=' + (timestamp - startTime) + ', frameCount=' + frameCount + ', fraction=' + eventValue + ', position=' + ViewpointNode.position.toString() + ', orientation=' + ViewpointNode.orientation.toString());",
              "      if (animated) // output results",
              "      {",
              "        // TODO how to report or speed up response?  alwaysPrint ('  aimPoint=' + aimPoint.toString());",
              "      }",
              "      alwaysPrint ('Animation loop complete.');",
              "      // do not unbind the Viewpoint and NavigationInfo nodes, let that be controlled externally",
              "   }",
              "   else",
              "   {",
              "      frameCount++;",
              "   }",
              "}",
              "",
              "function set_bind (eventValue) // input event received for inputOnly field",
              "{",
              "   // need to ensure CameraShot nodes are properly initialized",
              "   if (initialized == false)",
              "   {",
              "      checkShots (true);",
              "      initialized = true;",
              "   }",
              "   if (eventValue)",
              "   {",
              "       tracePrint ('Camera has been bound');",
              "   }",
              "   else",
              "   {",
              "       tracePrint ('Camera has been unbound');",
              "   }",
              "}",
              "",
              "function set_description (eventValue) // input event received for inputOutput field",
              "{",
              "    description = eventValue;",
              "}",
              "",
              "function set_position (eventValue) // input event received for inputOutput field",
              "{",
              "    position = eventValue;",
              "}",
              "",
              "function set_orientation (eventValue) // input event received for inputOutput field",
              "{",
              "    orientation = eventValue;",
              "}",
              "",
              "function set_fieldOfView (eventValue) // input event received for inputOutput field",
              "{",
              "    fieldOfView = eventValue;",
              "}",
              "",
              "function set_nearClipPlane (eventValue) // input event received for inputOutput field",
              "{",
              "    nearClipPlane = eventValue;",
              "}",
              "",
              "function set_farClipPlane (eventValue) // input event received for inputOutput field",
              "{",
              "    farClipPlane = eventValue;",
              "}",
              "",
              "function set_shots (eventValue) // input event received for inputOutput field",
              "{",
              "    shots = eventValue;",
              "}",
              "",
              "function set_filterColor (eventValue) // input event received for inputOutput field",
              "{",
              "    filterColor = eventValue;",
              "}",
              "",
              "function set_filterTransparency (eventValue) // input event received for inputOutput field",
              "{",
              "    filterTransparency = eventValue;",
              "}",
              "",
              "function set_upVector (eventValue) // input event received for inputOutput field",
              "{",
              "    upVector = eventValue;",
              "}",
              "",
              "function set_fStop (eventValue) // input event received for inputOutput field",
              "{",
              "    fStop = eventValue;",
              "}",
              "",
              "function set_focusDistance (eventValue) // input event received for inputOutput field",
              "{",
              "    focusDistance = eventValue;",
              "}",
              "",
              "function set_offlineRender (eventValue) // input event received for inputOutput field",
              "{",
              "    offlineRender = eventValue;",
              "}",
              "",
              "function set_key (eventValue) // input event received for inputOutput field",
              "{",
              "    key = eventValue;",
              "}",
              "",
              "function set_keyValuePosition (eventValue) // input event received for inputOutput field",
              "{",
              "    keyValuePosition = eventValue;",
              "}",
              "",
              "function set_keyValueOrientation (eventValue) // input event received for inputOutput field",
              "{",
              "    keyValueOrientation = eventValue;",
              "}",
              "",
              "function set_animated (eventValue) // input event received for inputOutput field",
              "{",
              "    animated = eventValue;",
              "}",
              "",
              "function tracePrint (outputValue)",
              "{",
              "\tif (traceEnabled) alwaysPrint (outputValue);",
              "}",
              "function alwaysPrint (outputValue)",
              "{",
              "    // try to ensure outputValue is converted to string despite Browser.println idiosyncracies",
              "    var outputString = outputValue.toString(); // utility function according to spec",
              "    if (outputString == null) outputString = outputValue; // direct cast",
              "",
              "    if  (description.length > 0)",
              "         Browser.print ('[Camera: ' + description + '] ' + outputString + '\n');",
              "    else",
              "         Browser.print ('[Camera] ' + outputString + '\n');",
              "}",
              "",
              ""
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.AimPointTest_CameraScript",
            "@fromField": "position",
            "@toNode": "DECLCamera_Camera.AimPointTest_CameraViewpoint",
            "@toField": "position"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.AimPointTest_CameraScript",
            "@fromField": "orientation",
            "@toNode": "DECLCamera_Camera.AimPointTest_CameraViewpoint",
            "@toField": "orientation"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.AimPointTest_CameraScript",
            "@fromField": "isActive",
            "@toNode": "DECLCamera_Camera.AimPointTest_CameraViewpoint",
            "@toField": "set_bind"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.AimPointTest_CameraScript",
            "@fromField": "isActive",
            "@toNode": "DECLCamera_Camera.AimPointTest_CameraNavInfo",
            "@toField": "set_bind"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.AimPointTest_CameraScript",
            "@fromField": "isActive",
            "@toNode": "DECLCamera_Camera.AimPointTest_CameraDirectionalLight",
            "@toField": "on"
          }
        },
        {
          "Group": {
            "@DEF": "AnimationGroup.AimPointTest",
            "-children": [
              {
                "TimeSensor": {
                  "@DEF": "CameraTimer.AimPointTest"
                }
              },
              {
                "#comment": "initialize clock to match totalDuration of combined Shot Moves"
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLCamera_Camera.AimPointTest_CameraScript",
                  "@fromField": "totalDuration",
                  "@toNode": "CameraTimer.AimPointTest",
                  "@toField": "cycleInterval"
                }
              },
              {
                "#comment": "TimeSensor animates the CameraClock since that maintains the computed PositionInterpolator and OrientationInterpolator"
              },
              {
                "ROUTE": {
                  "@fromNode": "CameraTimer.AimPointTest",
                  "@fromField": "fraction_changed",
                  "@toNode": "DECLCamera_Camera.AimPointTest_CameraScript",
                  "@toField": "set_fraction"
                }
              },
              {
                "Transform": {
                  "@DEF": "Trigger.AimPointTest",
                  "@translation": [
                    4,
                    4,
                    0
                  ],
                  "-children": [
                    {
                      "BooleanFilter": {
                        "@DEF": "TextTouchActive.AimPointFilter"
                      }
                    },
                    {
                      "TouchSensor": {
                        "@DEF": "TextTouch.AimPointTest",
                        "@description": "touch to animate Camera AimPointTest"
                      }
                    },
                    {
                      "ROUTE": {
                        "@fromNode": "TextTouchActive.AimPointFilter",
                        "@fromField": "inputTrue",
                        "@toNode": "DECLCamera_Camera.AimPointTest_CameraScript",
                        "@toField": "set_bind"
                      }
                    },
                    {
                      "ROUTE": {
                        "@fromNode": "TextTouch.AimPointTest",
                        "@fromField": "isActive",
                        "@toNode": "TextTouchActive.AimPointFilter",
                        "@toField": "set_boolean"
                      }
                    },
                    {
                      "ROUTE": {
                        "@fromNode": "TextTouch.AimPointTest",
                        "@fromField": "touchTime",
                        "@toNode": "CameraTimer.AimPointTest",
                        "@toField": "startTime"
                      }
                    },
                    {
                      "Shape": {
                        "-geometry": {
                          "Text": {
                            "@string": [
                              "Click to animate",
                              "AimPointTest"
                            ],
                            "-fontStyle": {
                              "FontStyle": {
                                "@justify": [
                                  "MIDDLE",
                                  "MIDDLE"
                                ]
                              }
                            }
                          }
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@USE": "ArtDeco5"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "Shape": {
                        "@USE": "TransparentBox"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "#comment": "TODO build a test once implemented"
        },
        {
          "#comment": "First node determines node type of this prototype"
        },
        {
          "#comment": "Subsequent nodes do not render, but still must be a valid X3D subgraph"
        },
        {
          "Script": {
            "@DEF": "DECLOfflineRender_INSTANCE10000_OfflineRenderScript",
            "@mustEvaluate": true,
            "field": [
              {
                "@name": "description",
                "@accessType": "inputOutput",
                "@appinfo": "Text description to be displayed for this OfflineRender",
                "@type": "SFString"
              },
              {
                "@name": "enabled",
                "@accessType": "inputOutput",
                "@appinfo": "Whether this OfflineRender can be activated",
                "@type": "SFBool",
                "@value": true
              },
              {
                "@name": "frameRate",
                "@accessType": "inputOutput",
                "@appinfo": "Frames per second recorded for this rendering",
                "@type": "SFFloat",
                "@value": 30
              },
              {
                "@name": "frameSize",
                "@accessType": "inputOutput",
                "@appinfo": "Size of frame in number of pixels width and height",
                "@type": "SFVec2f",
                "@value": [
                  640,
                  480
                ]
              },
              {
                "@name": "pixelAspectRatio",
                "@accessType": "inputOutput",
                "@appinfo": "Relative dimensions of pixel height/width typically 1.33 or 1",
                "@type": "SFFloat",
                "@value": 1.33
              },
              {
                "@name": "set_startTime",
                "@accessType": "inputOnly",
                "@appinfo": "Begin render operation",
                "@type": "SFTime"
              },
              {
                "@name": "progress",
                "@accessType": "outputOnly",
                "@appinfo": "Progress performing render operation (0..1)",
                "@type": "SFFloat"
              },
              {
                "@name": "renderCompleteTime",
                "@accessType": "outputOnly",
                "@appinfo": "Render operation complete",
                "@type": "SFTime"
              },
              {
                "@name": "movieFormat",
                "@accessType": "initializeOnly",
                "@appinfo": "Format of rendered output movie (mpeg mp4 etc.)",
                "@type": "MFString",
                "@value": [
                  "mpeg"
                ]
              },
              {
                "@name": "imageFormat",
                "@accessType": "initializeOnly",
                "@appinfo": "Format of rendered output images (png jpeg gif tiff etc.)",
                "@type": "MFString",
                "@value": [
                  "png"
                ]
              },
              {
                "@name": "traceEnabled",
                "@accessType": "initializeOnly",
                "@appinfo": "enable console output to trace script computations and prototype progress",
                "@type": "SFBool",
                "@value": false
              }
            ],
            "#sourceText": [
              "",
              "",
              "ecmascript:",
              "function initialize () // OfflineRenderScript",
              "{",
              "//  tracePrint ('initialize start...');",
              "",
              "    tracePrint ('... initialize complete');",
              "}",
              "",
              "function set_description (eventValue) // input event received for inputOutput field",
              "{",
              "    description = eventValue;",
              "}",
              "",
              "function set_enabled (eventValue) // input event received for inputOutput field",
              "{",
              "    enabled = eventValue;",
              "}",
              "",
              "function set_frameRate (eventValue) // input event received for inputOutput field",
              "{",
              "    frameRate = eventValue;",
              "}",
              "",
              "function set_frameSize (eventValue) // input event received for inputOutput field",
              "{",
              "    frameSize = eventValue;",
              "}",
              "",
              "function set_pixelAspectRatio (eventValue) // input event received for inputOutput field",
              "{",
              "    pixelAspectRatio = eventValue;",
              "}",
              "",
              "function set_startTime (eventValue) // input event received for inputOnly field",
              "{",
              "   // do something with input eventValue;",
              "}",
              "",
              "function tracePrint (outputValue)",
              "{",
              "\tif (traceEnabled) alwaysPrint (outputValue);",
              "}",
              "",
              "function alwaysPrint (outputValue)",
              "{",
              "\t// try to ensure outputValue is converted to string despite browser idiosyncracies",
              "    var outputString = outputValue.toString(); // utility function according to spec",
              "    if (outputString == null) outputString = outputValue; // direct cast",
              "",
              "    if  (description.length > 0)",
              "         Browser.print ('[OfflineRender: ' + description + '] ' + outputString + '\n');",
              "    else",
              "         Browser.print ('[OfflineRender] ' + outputString + '\n');",
              "}",
              "",
              ""
            ]
          }
        },
        {
          "#comment": "Add any ROUTEs here, going from Script to other nodes within ProtoBody"
        },
        {
          "#comment": "=============== animate a camera shape to visualize view changes =============="
        },
        {
          "Transform": {
            "@DEF": "CameraShapeTransform",
            "@translation": [
              0,
              0.5,
              0
            ],
            "-children": [
              {
                "#comment": "move CameraShape using active Camera"
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
                  "@fromField": "position_changed",
                  "@toNode": "CameraShapeTransform",
                  "@toField": "translation"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraScript",
                  "@fromField": "orientation_changed",
                  "@toNode": "CameraShapeTransform",
                  "@toField": "rotation"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLCamera_Camera.AimPointTest_CameraScript",
                  "@fromField": "position",
                  "@toNode": "CameraShapeTransform",
                  "@toField": "translation"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "DECLCamera_Camera.AimPointTest_CameraScript",
                  "@fromField": "orientation_changed",
                  "@toNode": "CameraShapeTransform",
                  "@toField": "rotation"
                }
              },
              {
                "Transform": {
                  "@DEF": "CameraOffsetTransform",
                  "@translation": [
                    0,
                    0,
                    0.25
                  ],
                  "-children": [
                    {
                      "TouchSensor": {
                        "@DEF": "CameraShapeTouched"
                      }
                    },
                    {
                      "Inline": {
                        "@DEF": "CameraShape",
                        "@url": [
                          "CameraShape.x3d",
                          "http://www.web3d.org/x3d/content/examples/Basic/development/CameraShape.x3d"
                        ]
                      }
                    },
                    {
                      "Shape": {
                        "@DEF": "SightLine",
                        "-geometry": {
                          "IndexedLineSet": {
                            "@coordIndex": [
                              0,
                              1
                            ],
                            "-coord": {
                              "Coordinate": {
                                "@point": [
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  -100
                                ]
                              }
                            }
                          }
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@emissiveColor": [
                                  0.8,
                                  0.8,
                                  0.4
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "#comment": "Display frustum to show camera view within the scene, toggled by user selecting CameraShape"
              },
              {},
              {},
              {
                "BooleanToggle": {
                  "@DEF": "ViewFrustumToggle"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "CameraShapeTouched",
                  "@fromField": "isActive",
                  "@toNode": "ViewFrustumToggle",
                  "@toField": "set_boolean"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "ViewFrustumToggle",
                  "@fromField": "toggle",
                  "@toNode": "DECLViewFrustum_ViewFrustumNode",
                  "@toField": "set_visible"
                }
              }
            ]
          }
        },
        {
          "#comment": "=============== add checkerboard, axes and other things to look at while animating =============="
        },
        {
          "Background": {
            "@skyColor": [
              0.282353,
              0.380392,
              0.470588
            ]
          }
        },
        {
          "Transform": {
            "@rotation": [
              1,
              0,
              0,
              -1.57079
            ],
            "@scale": [
              10,
              10,
              10
            ],
            "-children": [
              {
                "Shape": {
                  "-appearance": {
                    "Appearance": {
                      "-material": {
                        "Material": {
                          "@ambientIntensity": 0.01,
                          "@diffuseColor": [
                            1,
                            1,
                            1
                          ],
                          "@shininess": 0.05
                        }
                      }
                    }
                  },
                  "-geometry": {
                    "IndexedFaceSet": {
                      "@colorIndex": [
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0
                      ],
                      "@colorPerVertex": false,
                      "@coordIndex": [
                        0,
                        8,
                        9,
                        1,
                        -1,
                        1,
                        9,
                        10,
                        2,
                        -1,
                        2,
                        10,
                        11,
                        3,
                        -1,
                        3,
                        11,
                        12,
                        4,
                        -1,
                        4,
                        12,
                        13,
                        5,
                        -1,
                        5,
                        13,
                        14,
                        6,
                        -1,
                        6,
                        14,
                        15,
                        7,
                        -1,
                        8,
                        16,
                        17,
                        9,
                        -1,
                        9,
                        17,
                        18,
                        10,
                        -1,
                        10,
                        18,
                        19,
                        11,
                        -1,
                        11,
                        19,
                        20,
                        12,
                        -1,
                        12,
                        20,
                        21,
                        13,
                        -1,
                        13,
                        21,
                        22,
                        14,
                        -1,
                        14,
                        22,
                        23,
                        15,
                        -1,
                        16,
                        24,
                        25,
                        17,
                        -1,
                        17,
                        25,
                        26,
                        18,
                        -1,
                        18,
                        26,
                        27,
                        19,
                        -1,
                        19,
                        27,
                        28,
                        20,
                        -1,
                        20,
                        28,
                        29,
                        21,
                        -1,
                        21,
                        29,
                        30,
                        22,
                        -1,
                        22,
                        30,
                        31,
                        23,
                        -1,
                        24,
                        32,
                        33,
                        25,
                        -1,
                        25,
                        33,
                        34,
                        26,
                        -1,
                        26,
                        34,
                        35,
                        27,
                        -1,
                        27,
                        35,
                        36,
                        28,
                        -1,
                        28,
                        36,
                        37,
                        29,
                        -1,
                        29,
                        37,
                        38,
                        30,
                        -1,
                        30,
                        38,
                        39,
                        31,
                        -1,
                        32,
                        40,
                        41,
                        33,
                        -1,
                        33,
                        41,
                        42,
                        34,
                        -1,
                        34,
                        42,
                        43,
                        35,
                        -1,
                        35,
                        43,
                        44,
                        36,
                        -1,
                        36,
                        44,
                        45,
                        37,
                        -1,
                        37,
                        45,
                        46,
                        38,
                        -1,
                        38,
                        46,
                        47,
                        39,
                        -1,
                        40,
                        48,
                        49,
                        41,
                        -1,
                        41,
                        49,
                        50,
                        42,
                        -1,
                        42,
                        50,
                        51,
                        43,
                        -1,
                        43,
                        51,
                        52,
                        44,
                        -1,
                        44,
                        52,
                        53,
                        45,
                        -1,
                        45,
                        53,
                        54,
                        46,
                        -1,
                        46,
                        54,
                        55,
                        47,
                        -1,
                        48,
                        56,
                        57,
                        49,
                        -1,
                        49,
                        57,
                        58,
                        50,
                        -1,
                        50,
                        58,
                        59,
                        51,
                        -1,
                        51,
                        59,
                        60,
                        52,
                        -1,
                        52,
                        60,
                        61,
                        53,
                        -1,
                        53,
                        61,
                        62,
                        54,
                        -1,
                        54,
                        62,
                        63,
                        55,
                        -1
                      ],
                      "@normalPerVertex": false,
                      "@solid": false,
                      "-coord": {
                        "Coordinate": {
                          "@point": [
                            -5.25,
                            5.25,
                            0,
                            -3.75,
                            5.25,
                            0,
                            -2.25,
                            5.25,
                            0,
                            -0.75,
                            5.25,
                            0,
                            0.75,
                            5.25,
                            0,
                            2.25,
                            5.25,
                            0,
                            3.75,
                            5.25,
                            0,
                            5.25,
                            5.25,
                            0,
                            -5.25,
                            3.75,
                            0,
                            -3.75,
                            3.75,
                            0,
                            -2.25,
                            3.75,
                            0,
                            -0.75,
                            3.75,
                            0,
                            0.75,
                            3.75,
                            0,
                            2.25,
                            3.75,
                            0,
                            3.75,
                            3.75,
                            0,
                            5.25,
                            3.75,
                            0,
                            -5.25,
                            2.25,
                            0,
                            -3.75,
                            2.25,
                            0,
                            -2.25,
                            2.25,
                            0,
                            -0.75,
                            2.25,
                            0,
                            0.75,
                            2.25,
                            0,
                            2.25,
                            2.25,
                            0,
                            3.75,
                            2.25,
                            0,
                            5.25,
                            2.25,
                            0,
                            -5.25,
                            0.75,
                            0,
                            -3.75,
                            0.75,
                            0,
                            -2.25,
                            0.75,
                            0,
                            -0.75,
                            0.75,
                            0,
                            0.75,
                            0.75,
                            0,
                            2.25,
                            0.75,
                            0,
                            3.75,
                            0.75,
                            0,
                            5.25,
                            0.75,
                            0,
                            -5.25,
                            -0.75,
                            0,
                            -3.75,
                            -0.75,
                            0,
                            -2.25,
                            -0.75,
                            0,
                            -0.75,
                            -0.75,
                            0,
                            0.75,
                            -0.75,
                            0,
                            2.25,
                            -0.75,
                            0,
                            3.75,
                            -0.75,
                            0,
                            5.25,
                            -0.75,
                            0,
                            -5.25,
                            -2.25,
                            0,
                            -3.75,
                            -2.25,
                            0,
                            -2.25,
                            -2.25,
                            0,
                            -0.75,
                            -2.25,
                            0,
                            0.75,
                            -2.25,
                            0,
                            2.25,
                            -2.25,
                            0,
                            3.75,
                            -2.25,
                            0,
                            5.25,
                            -2.25,
                            0,
                            -5.25,
                            -3.75,
                            0,
                            -3.75,
                            -3.75,
                            0,
                            -2.25,
                            -3.75,
                            0,
                            -0.75,
                            -3.75,
                            0,
                            0.75,
                            -3.75,
                            0,
                            2.25,
                            -3.75,
                            0,
                            3.75,
                            -3.75,
                            0,
                            5.25,
                            -3.75,
                            0,
                            -5.25,
                            -5.25,
                            0,
                            -3.75,
                            -5.25,
                            0,
                            -2.25,
                            -5.25,
                            0,
                            -0.75,
                            -5.25,
                            0,
                            0.75,
                            -5.25,
                            0,
                            2.25,
                            -5.25,
                            0,
                            3.75,
                            -5.25,
                            0,
                            5.25,
                            -5.25,
                            0
                          ]
                        }
                      },
                      "-color": {
                        "Color": {
                          "@color": [
                            0.435294,
                            0.741176,
                            0,
                            0,
                            0.560784,
                            0.580392
                          ]
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        {
          "Transform": {
            "@scale": [
              3,
              3,
              3
            ],
            "@translation": [
              0,
              0.25,
              0
            ],
            "-children": [
              {
                "Inline": {
                  "@DEF": "CoordinateAxes",
                  "@url": [
                    "../../X3dForWebAuthors/Chapter03Grouping/CoordinateAxes.x3d",
                    "../../Savage/Tools/Authoring/CoordinateAxes.x3d",
                    "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter03Grouping/CoordinateAxes.x3d",
                    "https://savage.nps.edu/Savage/Tools/Authoring/CoordinateAxes.x3d",
                    "../../X3dForWebAuthors/Chapter03Grouping/CoordinateAxes.wrl",
                    "../../Savage/Tools/Authoring/CoordinateAxes.wrl",
                    "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter03Grouping/CoordinateAxes.wrl",
                    "https://savage.nps.edu/Savage/Tools/Authoring/CoordinateAxes.wrl"
                  ]
                }
              }
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "MovingBoxTransform",
            "-children": [
              {
                "PositionInterpolator": {
                  "@DEF": "BoxPath",
                  "@key": [
                    0,
                    0.25,
                    0.5,
                    0.75,
                    1
                  ],
                  "@keyValue": [
                    -5,
                    1,
                    5,
                    45,
                    1,
                    5,
                    45,
                    1,
                    -45,
                    -5,
                    1,
                    -45,
                    -5,
                    1,
                    5
                  ]
                }
              },
              {
                "TimeSensor": {
                  "@DEF": "BoxTimer",
                  "@cycleInterval": 10,
                  "@loop": true
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "BoxPath",
                  "@fromField": "value_changed",
                  "@toNode": "MovingBoxTransform",
                  "@toField": "translation"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "BoxPath",
                  "@fromField": "value_changed",
                  "@toNode": "DECLCameraMovement_MoveAimPoint3.1_CameraMovementScript",
                  "@toField": "goalAimPoint"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "BoxPath",
                  "@fromField": "value_changed",
                  "@toNode": "DECLCameraMovement_MoveAimPoint3.2_CameraMovementScript",
                  "@toField": "goalAimPoint"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "BoxPath",
                  "@fromField": "value_changed",
                  "@toNode": "DECLCameraMovement_MoveAimPoint3.3_CameraMovementScript",
                  "@toField": "goalAimPoint"
                }
              },
              {
                "ROUTE": {
                  "@fromNode": "BoxTimer",
                  "@fromField": "fraction_changed",
                  "@toNode": "BoxPath",
                  "@toField": "set_fraction"
                }
              },
              {
                "Shape": {
                  "-geometry": {
                    "Box": {}
                  },
                  "-appearance": {
                    "Appearance": {
                      "-material": {
                        "Material": {}
                      },
                      "-texture": {
                        "ImageTexture": {
                          "@url": [
                            "../earth-topo.png",
                            "http://www.web3d.org/x3d/content/examples/Basic/earth-topo.png"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        {
          "#comment": "================ CrossHair visualization for center of screen ================"
        },
        {},
        {},
        {
          "#comment": "turn on CrossHairInstance when animated camera viewpoints are bound"
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.SimpleShotsTest_CameraViewpoint",
            "@fromField": "isBound",
            "@toNode": "DECLCrossHair_CrossHairInstance",
            "@toField": "set_enabled"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLCamera_Camera.AimPointTest_CameraViewpoint",
            "@fromField": "isBound",
            "@toNode": "DECLCrossHair_CrossHairInstance",
            "@toField": "set_enabled"
          }
        },
        {
          "#comment": "turn off CrossHairInstance when animated camera viewpoints are unbound <BooleanFilter DEF='NegateCrossHair'/> <ROUTE fromField='isBound' fromNode='Camera.SimpleShotsTest' toField='set_boolean' toNode='NegateCrossHair'/> <ROUTE fromField='isBound' fromNode='Camera.AimPointTest' toField='set_boolean' toNode='NegateCrossHair'/> <ROUTE fromField='inputNegate' fromNode='NegateCrossHair' toField='set_enabled' toNode='CrossHairInstance'/>"
        },
        {
          "#comment": "=============== TODO Launch Prototype Example =============="
        },
        {
          "Anchor": {
            "@description": "launch CameraExample scene",
            "@parameter": [
              "target=_blank"
            ],
            "@url": [
              "CameraExample.x3d",
              "http://www.web3d.org/x3d/content/examples/Basic/development/CameraExample.x3d",
              "CameraExample.wrl",
              "http://www.web3d.org/x3d/content/examples/Basic/development/CameraExample.wrl"
            ],
            "-children": [
              {
                "Transform": {
                  "@translation": [
                    0,
                    -3,
                    0
                  ],
                  "-children": [
                    {
                      "Shape": {
                        "-geometry": {
                          "Text": {
                            "@string": [
                              "CameraPrototype",
                              "defines a prototype",
                              "",
                              "Click on this text to see",
                              "CameraExample scene"
                            ],
                            "-fontStyle": {
                              "FontStyle": {
                                "@justify": [
                                  "MIDDLE",
                                  "MIDDLE"
                                ],
                                "@size": 0.5
                              }
                            }
                          }
                        },
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@diffuseColor": [
                                  1,
                                  1,
                                  0.2
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    }
  }
}