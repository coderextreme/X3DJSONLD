(()=>{"use strict";var e={n:t=>{var i=t&&t.__esModule?()=>t.default:()=>t;return e.d(i,{a:i}),i},d:(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const t=window[Symbol.for("X_ITE.X3D")].require("x_ite/Components");var i=e.n(t);const n=window[Symbol.for("X_ITE.X3D")].require("x_ite/Fields");var o=e.n(n);const s=window[Symbol.for("X_ITE.X3D")].require("x_ite/Base/X3DFieldDefinition");var r=e.n(s);const c=window[Symbol.for("X_ITE.X3D")].require("x_ite/Base/FieldDefinitionArray");var a=e.n(c);const p=window[Symbol.for("X_ITE.X3D")].require("x_ite/Components/Core/X3DSensorNode");var l=e.n(p);const h=window[Symbol.for("X_ITE.X3D")].require("x_ite/Rendering/TraverseType");var d=e.n(h);const g=window[Symbol.for("X_ITE.X3D")].require("x_ite/Base/X3DConstants");var u=e.n(g);const m=window[Symbol.for("X_ITE.X3D")].require("x_ite/Namespace");var y=e.n(m);let _=0;const w={MATCH_ANY:_++,MATCH_EVERY:_++,MATCH_ONLY_ONE:_++};y().add("MatchCriterion","x_ite/Browser/Picking/MatchCriterion",w);const k=w;let S=0;const f={BOUNDS:S++,GEOMETRY:S++};y().add("IntersectionType","x_ite/Browser/Picking/IntersectionType",f);const b=f;let O=0;const T={ANY:O++,CLOSEST:O++,ALL:O++,ALL_SORTED:O++};y().add("SortOrder","x_ite/Browser/Picking/SortOrder",T);const N=T,C=window[Symbol.for("X_ITE.X3D")].require("standard/Math/Numbers/Matrix4");var P=e.n(C);function v(e,t){this.array=e,t&&(this.compare=t)}Object.assign(v.prototype,{compare:(e,t)=>e<t,sort(e,t){t-e>1&&this.quicksort(e,t-1)},quicksort(e,t){let i=e,n=t;const{array:o,compare:s}=this,r=o[e+t>>>1];for(;;){for(;s(o[i],r);)++i;for(;s(r,o[n]);)--n;if(!(i<n)){i===n&&(++i,--n);break}{const e=o[i];o[i]=o[n],o[n]=e,i++,n--}}e<n&&this.quicksort(e,n),i<t&&this.quicksort(i,t)}});const G=v;y().add("QuickSort","standard/Math/Algorithms/QuickSort",G);const M=G,x=window[Symbol.for("X_ITE.X3D")].require("standard/Utility/ObjectCache");var B,j,F,I=e.n(x)()(P());function A(e,t){return e.distance<t.distance}function D(e){l().call(this,e),this.addType(u().X3DPickSensorNode),this.objectType=new Set,this.intersectionType=b.BOUNDS,this.sortOrder=N.CLOSEST,this.pickTargetNodes=new Set,this.modelMatrices=[],this.targets=[],this.targets.size=0,this.pickedTargets=[],this.pickedTargetsSorter=new M(this.pickedTargets,A),this.pickedGeometries=new(o().MFNode)}Object.assign(Object.setPrototypeOf(D.prototype,l().prototype),{initialize(){this.getLive().addInterest("set_live__",this),this._enabled.addInterest("set_live__",this),this._objectType.addInterest("set_objectType__",this),this._matchCriterion.addInterest("set_matchCriterion__",this),this._intersectionType.addInterest("set_intersectionType__",this),this._sortOrder.addInterest("set_sortOrder__",this),this._pickTarget.addInterest("set_pickTarget__",this),this.set_objectType__(),this.set_matchCriterion__(),this.set_intersectionType__(),this.set_sortOrder__(),this.set_pickTarget__()},getObjectType(){return this.objectType},getMatchCriterion(){return this.matchCriterion},getIntersectionType(){return this.intersectionType},getSortOrder(){return this.sortOrder},getModelMatrices(){return this.modelMatrices},getTargets(){return this.targets},getPickShape:(()=>{const e=new WeakMap;return function(t){const i=e.get(t);if(void 0!==i)return i;const n=this.getBrowser(),o=n.getPrivateScene().createNode("Shape",!1),s=n.getPrivateScene().createNode("CollidableShape",!1);return o.setPrivate(!0),s.setPrivate(!0),s.setConvex(!0),o._geometry=t,s._shape=o,o.setup(),s.setup(),e.set(t,s),s}})(),getPickedGeometries:function(){var e=this.targets,t=e.size,i=this.pickedTargets,n=this.pickedGeometries;i.length=0;for(var o=0;o<t;++o){var s=e[o];s.intersected&&i.push(s)}if(0===i.length)return n.length=0,n;switch(this.sortOrder){case N.ANY:i.length=1,n[0]=this.getPickedGeometry(i[0]),n.length=1;break;case N.CLOSEST:this.pickedTargetsSorter.sort(0,i.length),i.length=1,n[0]=this.getPickedGeometry(i[0]),n.length=1;break;case N.ALL:o=0;for(var r=i.length;o<r;++o)n[o]=this.getPickedGeometry(i[o]);n.length=r;break;case N.ALL_SORTED:for(this.pickedTargetsSorter.sort(0,i.length),o=0,r=i.length;o<r;++o)n[o]=this.getPickedGeometry(i[o]);n.length=r}return n},getPickedGeometry(e){var t=this.getExecutionContext(),i=e.geometryNode;if(i.getExecutionContext()===t)return i;if((s=i.getExecutionContext()).getType().includes(u().X3DPrototypeInstance)&&s.getExecutionContext()===t)return s;for(var n=e.pickingHierarchy,o=n.length-1;o>=0;--o){var s,r=n[o];if(r.getExecutionContext()===t)return r;if((s=r.getExecutionContext()).getType().includes(u().X3DPrototypeInstance)&&s.getExecutionContext()===t)return s}return null},getPickedTargets(){return this.pickedTargets},set_live__(){this.getLive().getValue()&&this._enabled.getValue()&&!this.objectType.has("NONE")?(this.getBrowser().addPickSensor(this),this.setPickableObject(!0)):(this.getBrowser().removePickSensor(this),this.setPickableObject(!1))},set_objectType__(){this.objectType.clear();for(var e=0,t=this._objectType.length;e<t;++e)this.objectType.add(this._objectType[e]);this.set_live__()},set_matchCriterion__:(F=new Map([["MATCH_ANY",k.MATCH_ANY],["MATCH_EVERY",k.MATCH_EVERY],["MATCH_ONLY_ONE",k.MATCH_ONLY_ONE]]),function(){this.matchCriterion=F.get(this._matchCriterion.getValue()),void 0===this.matchCriterion&&(this.matchCriterion=MatchCriterionType.MATCH_ANY)}),set_intersectionType__:(j=new Map([["BOUNDS",b.BOUNDS],["GEOMETRY",b.GEOMETRY]]),function(){this.intersectionType=j.get(this._intersectionType.getValue()),void 0===this.intersectionType&&(this.intersectionType=b.BOUNDS)}),set_sortOrder__:(B=new Map([["ANY",N.ANY],["CLOSEST",N.CLOSEST],["ALL",N.ALL],["ALL_SORTED",N.ALL_SORTED]]),function(){this.sortOrder=B.get(this._sortOrder.getValue()),void 0===this.sortOrder&&(this.sortOrder=N.CLOSEST)}),set_pickTarget__(){this.pickTargetNodes.clear();for(var e=0,t=this._pickTarget.length;e<t;++e)try{for(var i=this._pickTarget[e].getValue().getInnerNode(),n=i.getType(),o=n.length-1;o>=0;--o)switch(n[o]){case u().Inline:case u().Shape:case u().X3DGroupingNode:this.pickTargetNodes.add(i);break;default:continue}}catch{}},traverse(e,t){e===d().PICKING&&this.isPickableObject()&&this.modelMatrices.push(I.pop().assign(t.getModelViewMatrix().get()))},collect(e,t,i){var n=this.pickTargetNodes;if(i.some((e=>n.has(e)))){var o=this.targets;if(o.size<o.length)var s=o[o.size];else{s={modelMatrix:new(P()),pickingHierarchy:[],pickedPoint:[],intersections:[]};o.push(s)}++o.size,s.intersected=!1,s.geometryNode=e,s.pickedPoint.length=0,s.intersections.length=0,s.modelMatrix.assign(t);for(var r=s.pickingHierarchy,c=0,a=i.length;c<a;++c)r[c]=i[c];r.length=a}},process(){for(var e=this.modelMatrices,t=0,i=e.length;t<i;++t)I.push(e[t]);this.modelMatrices.length=0,this.targets.size=0}}),Object.defineProperties(D,{typeName:{value:"X3DPickSensorNode",enumerable:!0},componentInfo:{value:Object.freeze({name:"Picking",level:1}),enumerable:!0}});const E=D;y().add("X3DPickSensorNode","x_ite/Components/Picking/X3DPickSensorNode",E);const z=E,L=window[Symbol.for("X_ITE.X3D")].require("standard/Math/Numbers/Vector3");var V=e.n(L);const X=window[Symbol.for("X_ITE.X3D")].require("standard/Math/Geometry/Box3");var R=e.n(X);const q=window[Symbol.for("X_ITE.X3D")].require("standard/Math/Geometry/Line3");var Y=e.n(q);function H(e){z.call(this,e),this.addType(u().LinePickSensor),this.pickingGeometryNode=null}Object.assign(Object.setPrototypeOf(H.prototype,z.prototype),{initialize(){z.prototype.initialize.call(this),this._pickingGeometry.addInterest("set_pickingGeometry__",this),this.set_pickingGeometry__()},set_pickingGeometry__(){this.pickingGeometryNode=null;try{const e=this._pickingGeometry.getValue().getInnerNode(),t=e.getType();for(let i=t.length-1;i>=0;--i)switch(t[i]){case u().IndexedLineSet:case u().LineSet:this.pickingGeometryNode=e;break;default:continue}}catch{}},process:(()=>{const e=new(R()),t=new(R()),i=new(V()),n=new(V()),s=new(P()),r=new(V()),c=new(V()),a=new(Y())(V().Zero,V().zAxis),p=new(V()),l=new(V()),h=[],d=[],g=new(V()),u=new(o().MFVec3f),m=new(o().MFVec3f),y=new(o().MFVec3f);return function(){if(this.pickingGeometryNode){const o=this.getModelMatrices(),_=this.getTargets();switch(this.getIntersectionType()){case b.BOUNDS:{for(let s=0,r=o.length;s<r;++s){const r=o[s];e.assign(this.pickingGeometryNode.getBBox()).multRight(r);for(let o=0,s=_.size;o<s;++o){const s=_[o];t.assign(s.geometryNode.getBBox()).multRight(s.modelMatrix),e.intersectsBox(t)&&(i.assign(e.center),n.assign(t.center),s.intersected=!0,s.distance=i.distance(n))}}const s=this.getPickedGeometries(),r=!!s.length;s.assign(s.filter((e=>e))),r!==this._isActive.getValue()&&(this._isActive=r),this._pickedGeometry.equals(s)||(this._pickedGeometry=s);break}case b.GEOMETRY:{for(let g=0,u=o.length;g<u;++g){const u=o[g];e.assign(this.pickingGeometryNode.getBBox()).multRight(u);for(let o=0,g=_.size;o<g;++o){const g=_[o],m=g.geometryNode,y=this.pickingGeometryNode.getVertices();t.assign(m.getBBox()).multRight(g.modelMatrix),s.assign(g.modelMatrix).inverse().multLeft(u);for(let e=0,t=y.length;e<t;e+=8)if(s.multVecMatrix(r.set(y[e+0],y[e+1],y[e+2])),s.multVecMatrix(c.set(y[e+4],y[e+5],y[e+6])),a.setPoints(r,c),d.length=0,m.intersectsLine(a,g.modelMatrix,h,d))for(let e=0,t=d.length;e<t;++e){const t=d[e];p.assign(t.point).subtract(r),l.assign(t.point).subtract(c);p.add(l).magnitude()<=r.distance(c)&&g.intersections.push(t)}g.intersections.length&&(i.assign(e.center),n.assign(t.center),g.intersected=!0,g.distance=i.distance(n))}}const w=this.getPickedGeometries(),k=!!w.length;w.assign(w.filter((e=>e))),k!==this._isActive.getValue()&&(this._isActive=k),this._pickedGeometry.equals(w)||(this._pickedGeometry=w);const S=this.getPickedTargets();u.length=0,m.length=0,y.length=0;for(let e=0,t=S.length;e<t;++e){const t=S[e].intersections;for(let e=0,i=t.length;e<i;++e){const i=t[e],n=i.texCoord;g.set(n.x,n.y,n.z),u.push(g),m.push(i.normal),y.push(i.point)}}this._pickedTextureCoordinate.equals(u)||(this._pickedTextureCoordinate=u),this._pickedNormal.equals(m)||(this._pickedNormal=m),this._pickedPoint.equals(y)||(this._pickedPoint=y);break}}}z.prototype.process.call(this)}})()}),Object.defineProperties(H,{typeName:{value:"LinePickSensor",enumerable:!0},componentInfo:{value:Object.freeze({name:"Picking",level:1}),enumerable:!0},containerField:{value:"children",enumerable:!0},specificationRange:{value:Object.freeze({from:"3.2",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(a())([new(r())(u().inputOutput,"metadata",new(o().SFNode)),new(r())(u().inputOutput,"description",new(o().SFString)),new(r())(u().inputOutput,"enabled",new(o().SFBool)(!0)),new(r())(u().inputOutput,"objectType",new(o().MFString)("ALL")),new(r())(u().inputOutput,"matchCriterion",new(o().SFString)("MATCH_ANY")),new(r())(u().initializeOnly,"intersectionType",new(o().SFString)("BOUNDS")),new(r())(u().initializeOnly,"sortOrder",new(o().SFString)("CLOSEST")),new(r())(u().outputOnly,"isActive",new(o().SFBool)),new(r())(u().outputOnly,"pickedTextureCoordinate",new(o().MFVec3f)),new(r())(u().outputOnly,"pickedNormal",new(o().MFVec3f)),new(r())(u().outputOnly,"pickedPoint",new(o().MFVec3f)),new(r())(u().inputOutput,"pickingGeometry",new(o().SFNode)),new(r())(u().inputOutput,"pickTarget",new(o().MFNode)),new(r())(u().outputOnly,"pickedGeometry",new(o().MFNode))]),enumerable:!0}});const U=H;y().add("LinePickSensor","x_ite/Components/Picking/LinePickSensor",U);const W=U,K=window[Symbol.for("X_ITE.X3D")].require("x_ite/Components/Grouping/X3DGroupingNode");var Q=e.n(K);function Z(e){this.addType(u().X3DPickableObject),this.objectType=new Set}Object.assign(Z.prototype,{initialize(){this._objectType.addInterest("set_objectType__",this),this.set_objectType__()},getObjectType(){return this.objectType},set_objectType__(){this.objectType.clear();for(var e=0,t=this._objectType.length;e<t;++e)this.objectType.add(this._objectType[e])},dispose(){}}),Object.defineProperties(Z,{typeName:{value:"X3DPickableObject",enumerable:!0},componentInfo:{value:Object.freeze({name:"Picking",level:1}),enumerable:!0}});const J=Z;y().add("X3DPickableObject","x_ite/Components/Picking/X3DPickableObject",J);const $=J;function ee(e){Q().call(this,e),$.call(this,e),this.addType(u().PickableGroup),this.pickSensorNodes=new Set}Object.assign(Object.setPrototypeOf(ee.prototype,Q().prototype),$.prototype,{initialize(){Q().prototype.initialize.call(this),$.prototype.initialize.call(this),this._pickable.addInterest("set_pickable__",this),this.set_pickable__()},set_pickableObjects__(){this.set_pickable__()},set_pickable__(){this.setPickableObject(this._pickable.getValue()||this.getTransformSensors().size)},traverse(e,t){if(e===d().PICKING){if(this._pickable.getValue()){if(this.getObjectType().has("NONE"))return;const i=this.getBrowser(),n=i.getPickable();if(this.getObjectType().has("ALL"))n.push(!0),Q().prototype.traverse.call(this,e,t),n.pop();else{const o=this.pickSensorNodes,s=i.getPickSensors();for(const e of s.at(-1)){if(!e.getObjectType().has("ALL")){let t=0;for(const i of this.getObjectType())if(e.getObjectType().has(i)){++t;break}switch(e.getMatchCriterion()){case k.MATCH_ANY:if(0===t)continue;break;case k.MATCH_EVERY:if(t!==pickSensor.getObjectType().size)continue;break;case k.MATCH_ONLY_ONE:if(1!==t)continue}}o.add(e)}n.push(!0),s.push(o),Q().prototype.traverse.call(this,e,t),s.pop(),n.pop(),o.clear()}}}else Q().prototype.traverse.call(this,e,t)},dispose(){$.prototype.dispose.call(this),Q().prototype.dispose.call(this)}}),Object.defineProperties(ee,{typeName:{value:"PickableGroup",enumerable:!0},componentInfo:{value:Object.freeze({name:"Picking",level:1}),enumerable:!0},containerField:{value:"children",enumerable:!0},specificationRange:{value:Object.freeze({from:"3.2",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(a())([new(r())(u().inputOutput,"metadata",new(o().SFNode)),new(r())(u().inputOutput,"description",new(o().SFString)),new(r())(u().inputOutput,"pickable",new(o().SFBool)(!0)),new(r())(u().inputOutput,"objectType",new(o().MFString)("ALL")),new(r())(u().inputOutput,"visible",new(o().SFBool)(!0)),new(r())(u().inputOutput,"bboxDisplay",new(o().SFBool)),new(r())(u().initializeOnly,"bboxSize",new(o().SFVec3f)(-1,-1,-1)),new(r())(u().initializeOnly,"bboxCenter",new(o().SFVec3f)),new(r())(u().inputOnly,"addChildren",new(o().MFNode)),new(r())(u().inputOnly,"removeChildren",new(o().MFNode)),new(r())(u().inputOutput,"children",new(o().MFNode))]),enumerable:!0}});const te=ee;y().add("PickableGroup","x_ite/Components/Picking/PickableGroup",te);const ie=te,ne=window[Symbol.for("X_ITE.X3D")].require("x_ite/Base/X3DCast");var oe=e.n(ne);const se=window[Symbol.for("X_ITE.X3D")].require("standard/Math/Numbers/Rotation4");var re=e.n(se);const ce=window[Symbol.for("X_ITE.X3D")].require("lib/ammojs/AmmoClass");var ae=e.n(ce);function pe(){this.broadphase=new(ae().btDbvtBroadphase),this.collisionConfiguration=new(ae().btDefaultCollisionConfiguration),this.dispatcher=new(ae().btCollisionDispatcher)(this.collisionConfiguration),this.collisionWorld=new(ae().btCollisionWorld)(this.dispatcher,this.broadphase,this.collisionConfiguration),this.compoundShape1=new(ae().btCompoundShape),this.motionState1=new(ae().btDefaultMotionState),this.constructionInfo1=new(ae().btRigidBodyConstructionInfo)(0,this.motionState1,this.compoundShape1),this.rigidBody1=new(ae().btRigidBody)(this.constructionInfo1),this.compoundShape2=new(ae().btCompoundShape),this.motionState2=new(ae().btDefaultMotionState),this.constructionInfo2=new(ae().btRigidBodyConstructionInfo)(0,this.motionState2,this.compoundShape2),this.rigidBody2=new(ae().btRigidBody)(this.constructionInfo2),this.collisionWorld.addCollisionObject(this.rigidBody1),this.collisionWorld.addCollisionObject(this.rigidBody2)}Object.assign(pe.prototype,{constuctor:pe,setChildShape1(e,t){this.setChildShape(this.compoundShape1,e,t)},setChildShape2(e,t){this.setChildShape(this.compoundShape2,e,t)},setChildShape1Components(e,t,i){this.setChildShapeComponents(this.compoundShape1,e,t,i)},setChildShape2Components(e,t,i){this.setChildShapeComponents(this.compoundShape2,e,t,i)},setChildShape:(()=>{const e=new(V()),t=new(re()),i=new(V())(1,1,1),n=new(ae().btVector3)(0,0,0);return function(o,s,r){o.getNumChildShapes()&&o.removeChildShapeByIndex(0),r.getNumChildShapes()&&(s.get(e,t,i),n.setValue(i.x,i.y,i.z),r.setLocalScaling(n),o.addChildShape(this.getTransform(e,t),r))}})(),setChildShapeComponents(e,t,i,n){e.getNumChildShapes()&&e.removeChildShapeByIndex(0),n.getNumChildShapes()&&(n.setLocalScaling(i),e.addChildShape(t,n))},contactTest(){this.collisionWorld.performDiscreteCollisionDetection();const e=this.dispatcher.getNumManifolds();for(let t=0;t<e;++t){const e=this.dispatcher.getManifoldByIndexInternal(t),i=e.getNumContacts();for(let t=0;t<i;++t){if(e.getContactPoint(t).getDistance()<=0)return!0}}return!1},getTransform:(()=>{const e=new(ae().btTransform),t=new(ae().btVector3)(0,0,0),i=new(P());return function(n,o,s){const r=s||e;return i.set(n,o),t.setValue(i[12],i[13],i[14]),r.getBasis().setValue(i[0],i[4],i[8],i[1],i[5],i[9],i[2],i[6],i[10]),r.setOrigin(t),r}})()});const le=pe;y().add("VolumePicker","x_ite/Browser/Picking/VolumePicker",le);const he=le;function de(e){z.call(this,e),this.addType(u().PointPickSensor),this.pickingGeometryNode=null,this.picker=new he,this.compoundShapes=[]}Object.assign(Object.setPrototypeOf(de.prototype,z.prototype),{initialize(){z.prototype.initialize.call(this),this._pickingGeometry.addInterest("set_pickingGeometry__",this),this.set_pickingGeometry__()},set_pickingGeometry__(){this.pickingGeometryNode&&this.pickingGeometryNode._rebuild.removeInterest("set_geometry__",this),this.pickingGeometryNode=oe()(u().PointSet,this._pickingGeometry),this.pickingGeometryNode&&this.pickingGeometryNode._rebuild.addInterest("set_geometry__",this),this.set_geometry__()},set_geometry__:(()=>{const e=new(ae().btVector3)(1,1,1),t=new(ae().btVector3),i=new(ae().btTransform);return function(){const n=this.compoundShapes;if(this.pickingGeometryNode){const o=this.pickingGeometryNode.getCoord();if(o){const s=o.getSize();for(let r=0;r<s;++r)if(r<n.length){const s=n[r],c=o.get1Point(r,s.point);t.setValue(c.x,c.y,c.z),i.setOrigin(t),s.setLocalScaling(e),s.updateChildTransform(0,i)}else{const e=new(ae().btCompoundShape),s=new(ae().btSphereShape)(0),c=o.get1Point(r,new(V()));e.point=c,t.setValue(c.x,c.y,c.z),i.setOrigin(t),e.addChildShape(i,s),n.push(e)}n.length=s}else n.length=0}else n.length=0}})(),process:(()=>{const e=new(R()),t=new(R()),i=new(V()),n=new(V()),s=new(ae().btTransform),r=new(ae().btVector3),c=new(V()),a=new(re()),p=new(V())(1,1,1),l=new(o().MFVec3f);return function(){if(this.pickingGeometryNode){const o=this.getModelMatrices(),h=this.getTargets();switch(this.getIntersectionType()){case b.BOUNDS:{for(let s=0,r=o.length;s<r;++s){const r=o[s];e.assign(this.pickingGeometryNode.getBBox()).multRight(r);for(let o=0,s=h.size;o<s;++o){const s=h[o];t.assign(s.geometryNode.getBBox()).multRight(s.modelMatrix),e.intersectsBox(t)&&(i.assign(e.center),n.assign(t.center),s.intersected=!0,s.distance=i.distance(n))}}const s=this.getPickedGeometries(),r=!!s.length;s.assign(s.filter((e=>e))),r!==this._isActive.getValue()&&(this._isActive=r),this._pickedGeometry.equals(s)||(this._pickedGeometry=s);break}case b.GEOMETRY:{const d=this.picker,g=this.compoundShapes;for(let l=0,u=o.length;l<u;++l){const u=o[l];e.assign(this.pickingGeometryNode.getBBox()).multRight(u),u.get(c,a,p),d.getTransform(c,a,s),r.setValue(p.x,p.y,p.z);for(let o=0,c=g.length;o<c;++o){const c=g[o];d.setChildShape1Components(s,r,c);for(let o=0,s=h.size;o<s;++o){const s=h[o],r=this.getPickShape(s.geometryNode);t.assign(s.geometryNode.getBBox()).multRight(s.modelMatrix),d.setChildShape2(s.modelMatrix,r.getCompoundShape()),d.contactTest()&&(i.assign(e.center),n.assign(t.center),s.intersected=!0,s.distance=i.distance(n),s.pickedPoint.push(c.point))}}}const u=this.getPickedGeometries(),m=!!u.length;u.assign(u.filter((e=>e))),m!==this._isActive.getValue()&&(this._isActive=m),this._pickedGeometry.equals(u)||(this._pickedGeometry=u);const y=this.getPickedTargets();l.length=0;for(let e=0,t=y.length;e<t;++e){const t=y[e].pickedPoint;for(let e=0,i=t.length;e<i;++e)l.push(t[e])}this._pickedPoint.equals(l)||(this._pickedPoint=l);break}}}z.prototype.process.call(this)}})()}),Object.defineProperties(de,{typeName:{value:"PointPickSensor",enumerable:!0},componentInfo:{value:Object.freeze({name:"Picking",level:1}),enumerable:!0},containerField:{value:"children",enumerable:!0},specificationRange:{value:Object.freeze({from:"3.2",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(a())([new(r())(u().inputOutput,"metadata",new(o().SFNode)),new(r())(u().inputOutput,"description",new(o().SFString)),new(r())(u().inputOutput,"enabled",new(o().SFBool)(!0)),new(r())(u().inputOutput,"objectType",new(o().MFString)("ALL")),new(r())(u().inputOutput,"matchCriterion",new(o().SFString)("MATCH_ANY")),new(r())(u().initializeOnly,"intersectionType",new(o().SFString)("BOUNDS")),new(r())(u().initializeOnly,"sortOrder",new(o().SFString)("CLOSEST")),new(r())(u().outputOnly,"isActive",new(o().SFBool)),new(r())(u().outputOnly,"pickedPoint",new(o().MFVec3f)),new(r())(u().inputOutput,"pickingGeometry",new(o().SFNode)),new(r())(u().inputOutput,"pickTarget",new(o().MFNode)),new(r())(u().outputOnly,"pickedGeometry",new(o().MFNode))]),enumerable:!0}});const ge=de;y().add("PointPickSensor","x_ite/Components/Picking/PointPickSensor",ge);const ue=ge;function me(e){z.call(this,e),this.addType(u().PrimitivePickSensor),this.pickingGeometryNode=null,this.picker=new he}Object.assign(Object.setPrototypeOf(me.prototype,z.prototype),{initialize(){z.prototype.initialize.call(this),this._pickingGeometry.addInterest("set_pickingGeometry__",this),this.set_pickingGeometry__()},set_pickingGeometry__(){this.pickingGeometryNode=null;try{const e=this._pickingGeometry.getValue().getInnerNode(),t=e.getType();for(let i=t.length-1;i>=0;--i)switch(t[i]){case u().Box:case u().Cone:case u().Cylinder:case u().Sphere:this.pickingGeometryNode=e;break;default:continue}}catch{}},process:(()=>{const e=new(R()),t=new(R()),i=new(V()),n=new(V());return function(){if(this.pickingGeometryNode){const o=this.getModelMatrices(),s=this.getTargets();switch(this.getIntersectionType()){case b.BOUNDS:{for(let r=0,c=o.length;r<c;++r){const c=o[r];e.assign(this.pickingGeometryNode.getBBox()).multRight(c);for(let o=0,r=s.size;o<r;++o){const r=s[o];t.assign(r.geometryNode.getBBox()).multRight(r.modelMatrix),e.intersectsBox(t)&&(i.assign(e.center),n.assign(t.center),r.intersected=!0,r.distance=i.distance(n))}}const r=this.getPickedGeometries(),c=!!r.length;r.assign(r.filter((e=>e))),c!==this._isActive.getValue()&&(this._isActive=c),this._pickedGeometry.equals(r)||(this._pickedGeometry=r);break}case b.GEOMETRY:{const r=this.picker;for(let c=0,a=o.length;c<a;++c){const a=o[c],p=this.getPickShape(this.pickingGeometryNode);e.assign(this.pickingGeometryNode.getBBox()).multRight(a),r.setChildShape1(a,p.getCompoundShape());for(let o=0,c=s.size;o<c;++o){const c=s[o],a=this.getPickShape(c.geometryNode);t.assign(c.geometryNode.getBBox()).multRight(c.modelMatrix),r.setChildShape2(c.modelMatrix,a.getCompoundShape()),r.contactTest()&&(i.assign(e.center),n.assign(t.center),c.intersected=!0,c.distance=i.distance(n))}}const c=this.getPickedGeometries(),a=!!c.length;c.assign(c.filter((e=>e))),a!==this._isActive.getValue()&&(this._isActive=a),this._pickedGeometry.equals(c)||(this._pickedGeometry=c);break}}}z.prototype.process.call(this)}})()}),Object.defineProperties(me,{typeName:{value:"PrimitivePickSensor",enumerable:!0},componentInfo:{value:Object.freeze({name:"Picking",level:2}),enumerable:!0},containerField:{value:"children",enumerable:!0},specificationRange:{value:Object.freeze({from:"3.2",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(a())([new(r())(u().inputOutput,"metadata",new(o().SFNode)),new(r())(u().inputOutput,"description",new(o().SFString)),new(r())(u().inputOutput,"enabled",new(o().SFBool)(!0)),new(r())(u().inputOutput,"objectType",new(o().MFString)("ALL")),new(r())(u().inputOutput,"matchCriterion",new(o().SFString)("MATCH_ANY")),new(r())(u().initializeOnly,"intersectionType",new(o().SFString)("BOUNDS")),new(r())(u().initializeOnly,"sortOrder",new(o().SFString)("CLOSEST")),new(r())(u().outputOnly,"isActive",new(o().SFBool)),new(r())(u().inputOutput,"pickingGeometry",new(o().SFNode)),new(r())(u().inputOutput,"pickTarget",new(o().MFNode)),new(r())(u().outputOnly,"pickedGeometry",new(o().MFNode))]),enumerable:!0}});const ye=me;y().add("PrimitivePickSensor","x_ite/Components/Picking/PrimitivePickSensor",ye);const _e=ye;function we(e){z.call(this,e),this.addType(u().VolumePickSensor),this.pickingGeometryNode=null,this.picker=new he}Object.assign(Object.setPrototypeOf(we.prototype,z.prototype),{initialize(){z.prototype.initialize.call(this),this._pickingGeometry.addInterest("set_pickingGeometry__",this),this.set_pickingGeometry__()},set_pickingGeometry__(){this.pickingGeometryNode=oe()(u().X3DGeometryNode,this._pickingGeometry)},process:(()=>{const e=new(R()),t=new(R()),i=new(V()),n=new(V());return function(){if(this.pickingGeometryNode){const o=this.getModelMatrices(),s=this.getTargets();switch(this.getIntersectionType()){case b.BOUNDS:{for(let r=0,c=o.length;r<c;++r){const c=o[r];e.assign(this.pickingGeometryNode.getBBox()).multRight(c);for(let o=0,r=s.size;o<r;++o){const r=s[o];t.assign(r.geometryNode.getBBox()).multRight(r.modelMatrix),e.intersectsBox(t)&&(i.assign(e.center),n.assign(t.center),r.intersected=!0,r.distance=i.distance(n))}}const r=this.getPickedGeometries(),c=!!r.length;r.assign(r.filter((e=>e))),c!==this._isActive.getValue()&&(this._isActive=c),this._pickedGeometry.equals(r)||(this._pickedGeometry=r);break}case b.GEOMETRY:{const r=this.picker;for(let c=0,a=o.length;c<a;++c){const a=o[c],p=this.getPickShape(this.pickingGeometryNode);e.assign(this.pickingGeometryNode.getBBox()).multRight(a),r.setChildShape1(a,p.getCompoundShape());for(let o=0,c=s.size;o<c;++o){const c=s[o],a=this.getPickShape(c.geometryNode);t.assign(c.geometryNode.getBBox()).multRight(c.modelMatrix),r.setChildShape2(c.modelMatrix,a.getCompoundShape()),r.contactTest()&&(i.assign(e.center),n.assign(t.center),c.intersected=!0,c.distance=i.distance(n))}}const c=this.getPickedGeometries(),a=!!c.length;c.assign(c.filter((e=>e))),a!==this._isActive.getValue()&&(this._isActive=a),this._pickedGeometry.equals(c)||(this._pickedGeometry=c);break}}}z.prototype.process.call(this)}})()}),Object.defineProperties(we,{typeName:{value:"VolumePickSensor",enumerable:!0},componentInfo:{value:Object.freeze({name:"Picking",level:3}),enumerable:!0},containerField:{value:"children",enumerable:!0},specificationRange:{value:Object.freeze({from:"3.2",to:"Infinity"}),enumerable:!0},fieldDefinitions:{value:new(a())([new(r())(u().inputOutput,"metadata",new(o().SFNode)),new(r())(u().inputOutput,"description",new(o().SFString)),new(r())(u().inputOutput,"enabled",new(o().SFBool)(!0)),new(r())(u().inputOutput,"objectType",new(o().MFString)("ALL")),new(r())(u().inputOutput,"matchCriterion",new(o().SFString)("MATCH_ANY")),new(r())(u().initializeOnly,"intersectionType",new(o().SFString)("BOUNDS")),new(r())(u().initializeOnly,"sortOrder",new(o().SFString)("CLOSEST")),new(r())(u().outputOnly,"isActive",new(o().SFBool)),new(r())(u().inputOutput,"pickingGeometry",new(o().SFNode)),new(r())(u().inputOutput,"pickTarget",new(o().MFNode)),new(r())(u().outputOnly,"pickedGeometry",new(o().MFNode))]),enumerable:!0}});const ke=we;y().add("VolumePickSensor","x_ite/Components/Picking/VolumePickSensor",ke);const Se=ke;i().add({name:"Picking",concreteNodes:[W,ie,ue,_e,Se],abstractNodes:[z,$]});const fe=void 0;y().add("Picking","assets/components/Picking",fe)})();