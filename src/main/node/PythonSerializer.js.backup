"use strict";

function printParentChild(element, n, node, cn, mapToMethod) {
	let addpre = ".set";
	if (cn > 0 && node.nodeName !== 'IS') {
		addpre = ".add";
	}

	let method = node.nodeName;
	if (typeof mapToMethod[element.nodeName] === 'object') {
		if (typeof mapToMethod[element.nodeName][node.nodeName] === 'string') {
			addpre = ".";
			method = mapToMethod[element.nodeName][node.nodeName];
		} else {
			method = method.charAt(0).toUpperCase() + method.slice(1);
		}
	} else if (typeof mapToMethod[element.nodeName] === 'string') {
		addpre = ".";
		method = mapToMethod[element.nodeName];
	} else {
		method = method.charAt(0).toUpperCase() + method.slice(1);
	}
	let cf = false;
	for (let a in node.attributes) {
		let attrs = node.attributes;
		try {
			parseInt(a);
			if (attrs.hasOwnProperty(a) && attrs[a].nodeType == 2) {
				let cfmethod = attrs[a].nodeName;
				if (cfmethod === 'containerField') {
					cf = true;
				}
			}
		} catch (e) {
			console.error(e);
		}
	}
	if (!cf) {
		return element.nodeName+n+addpre+method+"("+node.nodeName+n+'_'+cn+")\n";
	} else {
		return "";
	}
}

function PythonSerializer () {};

PythonSerializer.prototype = {

		serializeToString : function(json, element, file, mapToMethod, fieldTypes) {
		// console.error(file);
		var str = "";
		str += "from x3dpsail import *\n";
		str += element.nodeName+0+" = "+element.nodeName+"()\n";
		str += PythonSerializer.subSerializeToString(element, 0, mapToMethod, fieldTypes);
		return str;
	}
};

PythonSerializer.subSerializeToString = function(element, n, mapToMethod, fieldTypes, grandparent, gn) {
	var str = "";
	for (var cn in element.childNodes) {
		var node = element.childNodes[cn];
		if (element.childNodes.hasOwnProperty(cn) && node.nodeType == 1) {
			str += node.nodeName+n+'_'+cn+" = "+node.nodeName+"()\n";
			str += PythonSerializer.subSerializeToString(node, ""+n+'_'+cn, mapToMethod, fieldTypes, element, ""+n);
			str += printParentChild(element, n, node, cn, mapToMethod);
		}
	}
	node = element;
	for (var a in element.attributes) {
		var attrs = element.attributes;
		try {
			parseInt(a);
			if (attrs.hasOwnProperty(a) && attrs[a].nodeType == 2) {
				let attr = attrs[a].nodeName;
				if (attr === "xmlns:xsd" || attr === "xsd:noNamespaceSchemaLocation" || attr === 'containerField' || attr === 'type') {
					continue;
				}
				if (attr === 'containerField') {
					let method = attrs[a].nodeValue;
					method = "set"+method.charAt(0).toUpperCase() + method.slice(1);
					str += grandparent.nodeName+gn+"."+method+"(";
					str += element.nodeName+n;
				} else {
					let method = attr;
					let attrType = fieldTypes[element.nodeName][attr];
					method = "set"+method.charAt(0).toUpperCase() + method.slice(1);
					str += element.nodeName+n+"."+method+"(";
					if (attrs[a].nodeValue == 'NULL') {
						str += "None";
					} else if (attrType === "SFString") {
						str += '"'+attrs[a].nodeValue.replace(/\\?"/g, "&quot;")+'"';
					} else if (attrType === "SFInt32") {
						str += attrs[a].nodeValue;
					} else if (attrType === "SFFloat") {
						str += attrs[a].nodeValue;
					} else if (attrType === "SFDouble") {
						str += attrs[a].nodeValue;
					} else if (attrType === "SFBool") {
						if (attrs[a].nodeValue === 'true') {
							str += "True"
						} else if (attrs[a].nodeValue === 'false') {
							str += "False"
						} else {
							str += attrs[a].nodeValue;
						}
					} else if (attrType === "MFString") {
						str += "["+attrs[a].nodeValue.split('" "').join('","')+"]";
					} else if (
						attrType === "MFInt32"||
						attrType === "MFImage"||
						attrType === "SFImage") {
						str += "["+attrs[a].nodeValue.split(' ').join(',')+"]";
					} else if (
						attrType === "SFColor"||
						attrType === "MFColor"||
						attrType === "SFColorRGBA"||
						attrType === "MFColorRGBA"||
						attrType === "SFVec2f"||
						attrType === "SFVec3f"||
						attrType === "SFVec4f"||
						attrType === "MFVec2f"||
						attrType === "MFVec3f"||
						attrType === "MFVec4f"||
						attrType === "SFMatrix3f"||
						attrType === "SFMatrix4f"|
						attrType === "MFMatrix3f"||
						attrType === "MFMatrix4f"|
						attrType === "SFRotation"|
						attrType === "MFRotation"|
						attrType === "MFFloat") {
						str += "["+attrs[a].nodeValue.split(' ').join(',')+"]";
					} else if (
						attrType === "SFVec2d"||
						attrType === "SFVec3d"||
						attrType === "SFVec4d"|
						attrType === "MFVec2d"||
						attrType === "MFVec3d"||
						attrType === "MFVec4d"|
						attrType === "SFMatrix3d"||
						attrType === "SFMatrix4d"|
						attrType === "MFMatrix3d"||
						attrType === "MFMatrix4d"|
						attrType === "MFDouble") {
						str += "["+attrs[a].nodeValue.split(' ').join(',')+"]";
					} else if (attrType === "MFBool") {
						str += "["+attrs[a].nodeValue.title().split(' ').join(',')+"]";
					} else {
						str += attrs[a].nodeValue;
					}
				}
				str += ")\n";
			}
		} catch (e) {
		}
	}
	return str;
}


if (typeof module === 'object')  {
	module.exports = PythonSerializer;
}
