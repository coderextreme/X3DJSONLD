var java = require('java');
var util = require('util');
java.asyncOptions = {
  asyncSuffix: undefined,     // Don't generate node-style methods taking callbacks
  syncSuffix: "",              // Sync methods use the base name(!!)
  promiseSuffix: "Promise",   // Generate methods returning promises, using the suffix Promise.
  promisify: util.promisify, // Needs Node.js version 8 or greater, see comment below
  ifReadOnlySuffix: "_alt"
};
var autoclass = require('../../../X3Dautoclass');
var ConfigurationProperties = autoclass.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
ConfigurationProperties.setStripDefaultAttributes(true);
      var X3D0 =  (new autoclass.X3D()).setProfile("Interchange").setVersion("3.3")
      .setHead(new autoclass.head()
        .addMeta(new autoclass.meta().setName("title").setContent("ArchHalf.x3d"))
        .addMeta(new autoclass.meta().setName("description").setContent("Create a half arch with parameters clearSpanWidth=4; riseHeight=2; depth=3; topAbutmentHeight=0.5; pierWidth=0.5; pierHeight=1. Parameter clearSpanWidth measure refers to a full arc, consider clearSpanWidth/2 for the archHalf width. Modify them with Transform > scale or editing the IndexedFileSet node. See the reference file ArchModelingDiagrams.pdf and the ArchScript_more_readable.js script to find further information."))
        .addMeta(new autoclass.meta().setName("creator").setContent("Michele Foti, Don Brutzman"))
        .addMeta(new autoclass.meta().setName("created").setContent("15 December 2014"))
        .addMeta(new autoclass.meta().setName("modified").setContent("16 February 2016"))
        .addMeta(new autoclass.meta().setName("reference").setContent("ArchModelingDiagrams.pdf"))
        .addMeta(new autoclass.meta().setName("reference").setContent("https://en.wikipedia.org/wiki/Arch"))
        .addMeta(new autoclass.meta().setName("identifier").setContent("http://X3dGraphics.com/examples/X3dForAdvancedModeling/Buildings/ArchHalf.x3d"))
        .addMeta(new autoclass.meta().setName("generator").setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"))
        .addMeta(new autoclass.meta().setName("license").setContent("../license.html")))
      .setScene(new autoclass.Scene()
        .addChild(new autoclass.Shape().setDEF("Arch")
          .addComments((new autoclass.CommentsBlock("note that convex='false' (meaning concave geometry) is crucial for this IFS of a geometric chord to render properly")))
          .setGeometry(new autoclass.IndexedFaceSet().setDEF("ArchIndex").setConvex(false).setCoordIndex(java.newArray("int", [31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,144,-1,149,31,144,147,-1,134,147,144,145,-1,145,144,62,141,-1,132,133,141,62,-1,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,143,-1,148,94,143,146,-1,142,128,146,143,-1,140,125,143,142,-1,125,126,127,140,-1,31,94,95,32,-1,32,95,96,33,-1,33,96,97,34,-1,34,97,98,35,-1,35,98,99,36,-1,36,99,100,37,-1,37,100,101,38,-1,38,101,102,39,-1,39,102,103,40,-1,40,103,104,41,-1,41,104,105,42,-1,42,105,106,43,-1,43,106,107,44,-1,44,107,108,45,-1,45,108,109,46,-1,46,109,110,47,-1,47,110,111,48,-1,48,111,112,49,-1,49,112,113,50,-1,50,113,114,51,-1,51,114,115,52,-1,52,115,116,53,-1,53,116,117,54,-1,54,117,118,55,-1,55,118,119,56,-1,56,119,120,57,-1,57,120,121,58,-1,58,121,122,59,-1,59,122,123,60,-1,60,123,124,61,-1,61,124,125,62,-1,148,149,147,146,-1,146,147,134,128,-1,128,134,145,142,-1,140,141,145,142,-1,127,133,141,140,-1,127,126,132,133,-1,126,132,62,125,-1,31,94,143,144,-1,142,143,144,145,-1,140,125,62,141,-1,31,94,148,149,-1])).setSolid(false)
            .setCoord(new autoclass.Coordinate().setDEF("ArchChord").setPoint(java.newArray("float", [java.newFloat(2), java.newFloat(0), java.newFloat(0), java.newFloat(1.997498435543818), java.newFloat(0.1), java.newFloat(0), java.newFloat(1.98997487421324), java.newFloat(0.2), java.newFloat(0), java.newFloat(1.977371993328519), java.newFloat(0.3), java.newFloat(0), java.newFloat(1.9595917942265424), java.newFloat(0.4), java.newFloat(0), java.newFloat(1.9364916731037085), java.newFloat(0.5), java.newFloat(0), java.newFloat(1.907878402833891), java.newFloat(0.6), java.newFloat(0), java.newFloat(1.8734993995195193), java.newFloat(0.7), java.newFloat(0), java.newFloat(1.833030277982336), java.newFloat(0.8), java.newFloat(0), java.newFloat(1.786057109949175), java.newFloat(0.9), java.newFloat(0), java.newFloat(1.7320508075688774), java.newFloat(1), java.newFloat(0), java.newFloat(1.6703293088490068), java.newFloat(1.1), java.newFloat(0), java.newFloat(1.6), java.newFloat(1.2), java.newFloat(0), java.newFloat(1.5198684153570663), java.newFloat(1.3), java.newFloat(0), java.newFloat(1.42828568570857), java.newFloat(1.4), java.newFloat(0), java.newFloat(1.3228756555322954), java.newFloat(1.5), java.newFloat(0), java.newFloat(1.2), java.newFloat(1.6), java.newFloat(0), java.newFloat(1.0535653752852738), java.newFloat(1.7), java.newFloat(0), java.newFloat(0.9020947843768965), java.newFloat(1.785), java.newFloat(0), java.newFloat(0.7599342076785331), java.newFloat(1.85), java.newFloat(0), java.newFloat(0.6244997998398398), java.newFloat(1.9), java.newFloat(0), java.newFloat(0.5425633603552678), java.newFloat(1.925), java.newFloat(0), java.newFloat(0.4444097208657794), java.newFloat(1.95), java.newFloat(0), java.newFloat(0.36181625170796194), java.newFloat(1.967), java.newFloat(0), java.newFloat(0.2821347195933173), java.newFloat(1.98), java.newFloat(0), java.newFloat(0.19974984355438344), java.newFloat(1.99), java.newFloat(0), java.newFloat(0.16718552568927703), java.newFloat(1.993), java.newFloat(0), java.newFloat(0.14133294025102577), java.newFloat(1.995), java.newFloat(0), java.newFloat(0.10950342460398416), java.newFloat(1.997), java.newFloat(0), java.newFloat(0.08942035562443253), java.newFloat(1.998), java.newFloat(0), java.newFloat(0.06323764701505419), java.newFloat(1.999), java.newFloat(0), java.newFloat(0), java.newFloat(2), java.newFloat(0), java.newFloat(-0.06323764701505419), java.newFloat(1.999), java.newFloat(0), java.newFloat(-0.08942035562443253), java.newFloat(1.998), java.newFloat(0), java.newFloat(-0.10950342460398416), java.newFloat(1.997), java.newFloat(0), java.newFloat(-0.14133294025102577), java.newFloat(1.995), java.newFloat(0), java.newFloat(-0.16718552568927703), java.newFloat(1.993), java.newFloat(0), java.newFloat(-0.19974984355438344), java.newFloat(1.99), java.newFloat(0), java.newFloat(-0.2821347195933173), java.newFloat(1.98), java.newFloat(0), java.newFloat(-0.36181625170796194), java.newFloat(1.967), java.newFloat(0), java.newFloat(-0.4444097208657794), java.newFloat(1.95), java.newFloat(0), java.newFloat(-0.5425633603552678), java.newFloat(1.925), java.newFloat(0), java.newFloat(-0.6244997998398398), java.newFloat(1.9), java.newFloat(0), java.newFloat(-0.7599342076785331), java.newFloat(1.85), java.newFloat(0), java.newFloat(-0.9020947843768965), java.newFloat(1.785), java.newFloat(0), java.newFloat(-1.0535653752852738), java.newFloat(1.7), java.newFloat(0), java.newFloat(-1.2), java.newFloat(1.6), java.newFloat(0), java.newFloat(-1.3228756555322954), java.newFloat(1.5), java.newFloat(0), java.newFloat(-1.42828568570857), java.newFloat(1.4), java.newFloat(0), java.newFloat(-1.5198684153570663), java.newFloat(1.3), java.newFloat(0), java.newFloat(-1.6), java.newFloat(1.2), java.newFloat(0), java.newFloat(-1.6703293088490068), java.newFloat(1.1), java.newFloat(0), java.newFloat(-1.7320508075688774), java.newFloat(1), java.newFloat(0), java.newFloat(-1.786057109949175), java.newFloat(0.9), java.newFloat(0), java.newFloat(-1.833030277982336), java.newFloat(0.8), java.newFloat(0), java.newFloat(-1.8734993995195193), java.newFloat(0.7), java.newFloat(0), java.newFloat(-1.907878402833891), java.newFloat(0.6), java.newFloat(0), java.newFloat(-1.9364916731037085), java.newFloat(0.5), java.newFloat(0), java.newFloat(-1.9595917942265424), java.newFloat(0.4), java.newFloat(0), java.newFloat(-1.977371993328519), java.newFloat(0.3), java.newFloat(0), java.newFloat(-1.98997487421324), java.newFloat(0.2), java.newFloat(0), java.newFloat(-1.997498435543818), java.newFloat(0.1), java.newFloat(0), java.newFloat(-2), java.newFloat(0), java.newFloat(0), java.newFloat(2), java.newFloat(0), java.newFloat(3), java.newFloat(1.997498435543818), java.newFloat(0.1), java.newFloat(3), java.newFloat(1.98997487421324), java.newFloat(0.2), java.newFloat(3), java.newFloat(1.977371993328519), java.newFloat(0.3), java.newFloat(3), java.newFloat(1.9595917942265424), java.newFloat(0.4), java.newFloat(3), java.newFloat(1.9364916731037085), java.newFloat(0.5), java.newFloat(3), java.newFloat(1.907878402833891), java.newFloat(0.6), java.newFloat(3), java.newFloat(1.8734993995195193), java.newFloat(0.7), java.newFloat(3), java.newFloat(1.833030277982336), java.newFloat(0.8), java.newFloat(3), java.newFloat(1.786057109949175), java.newFloat(0.9), java.newFloat(3), java.newFloat(1.7320508075688774), java.newFloat(1), java.newFloat(3), java.newFloat(1.6703293088490068), java.newFloat(1.1), java.newFloat(3), java.newFloat(1.6), java.newFloat(1.2), java.newFloat(3), java.newFloat(1.5198684153570663), java.newFloat(1.3), java.newFloat(3), java.newFloat(1.42828568570857), java.newFloat(1.4), java.newFloat(3), java.newFloat(1.3228756555322954), java.newFloat(1.5), java.newFloat(3), java.newFloat(1.2), java.newFloat(1.6), java.newFloat(3), java.newFloat(1.0535653752852738), java.newFloat(1.7), java.newFloat(3), java.newFloat(0.9020947843768965), java.newFloat(1.785), java.newFloat(3), java.newFloat(0.7599342076785331), java.newFloat(1.85), java.newFloat(3), java.newFloat(0.6244997998398398), java.newFloat(1.9), java.newFloat(3), java.newFloat(0.5425633603552678), java.newFloat(1.925), java.newFloat(3), java.newFloat(0.4444097208657794), java.newFloat(1.95), java.newFloat(3), java.newFloat(0.36181625170796194), java.newFloat(1.967), java.newFloat(3), java.newFloat(0.2821347195933173), java.newFloat(1.98), java.newFloat(3), java.newFloat(0.19974984355438344), java.newFloat(1.99), java.newFloat(3), java.newFloat(0.16718552568927703), java.newFloat(1.993), java.newFloat(3), java.newFloat(0.14133294025102577), java.newFloat(1.995), java.newFloat(3), java.newFloat(0.10950342460398416), java.newFloat(1.997), java.newFloat(3), java.newFloat(0.08942035562443253), java.newFloat(1.998), java.newFloat(3), java.newFloat(0.06323764701505419), java.newFloat(1.999), java.newFloat(3), java.newFloat(0), java.newFloat(2), java.newFloat(3), java.newFloat(-0.06323764701505419), java.newFloat(1.999), java.newFloat(3), java.newFloat(-0.08942035562443253), java.newFloat(1.998), java.newFloat(3), java.newFloat(-0.10950342460398416), java.newFloat(1.997), java.newFloat(3), java.newFloat(-0.14133294025102577), java.newFloat(1.995), java.newFloat(3), java.newFloat(-0.16718552568927703), java.newFloat(1.993), java.newFloat(3), java.newFloat(-0.19974984355438344), java.newFloat(1.99), java.newFloat(3), java.newFloat(-0.2821347195933173), java.newFloat(1.98), java.newFloat(3), java.newFloat(-0.36181625170796194), java.newFloat(1.967), java.newFloat(3), java.newFloat(-0.4444097208657794), java.newFloat(1.95), java.newFloat(3), java.newFloat(-0.5425633603552678), java.newFloat(1.925), java.newFloat(3), java.newFloat(-0.6244997998398398), java.newFloat(1.9), java.newFloat(3), java.newFloat(-0.7599342076785331), java.newFloat(1.85), java.newFloat(3), java.newFloat(-0.9020947843768965), java.newFloat(1.785), java.newFloat(3), java.newFloat(-1.0535653752852738), java.newFloat(1.7), java.newFloat(3), java.newFloat(-1.2), java.newFloat(1.6), java.newFloat(3), java.newFloat(-1.3228756555322954), java.newFloat(1.5), java.newFloat(3), java.newFloat(-1.42828568570857), java.newFloat(1.4), java.newFloat(3), java.newFloat(-1.5198684153570663), java.newFloat(1.3), java.newFloat(3), java.newFloat(-1.6), java.newFloat(1.2), java.newFloat(3), java.newFloat(-1.6703293088490068), java.newFloat(1.1), java.newFloat(3), java.newFloat(-1.7320508075688774), java.newFloat(1), java.newFloat(3), java.newFloat(-1.786057109949175), java.newFloat(0.9), java.newFloat(3), java.newFloat(-1.833030277982336), java.newFloat(0.8), java.newFloat(3), java.newFloat(-1.8734993995195193), java.newFloat(0.7), java.newFloat(3), java.newFloat(-1.907878402833891), java.newFloat(0.6), java.newFloat(3), java.newFloat(-1.9364916731037085), java.newFloat(0.5), java.newFloat(3), java.newFloat(-1.9595917942265424), java.newFloat(0.4), java.newFloat(3), java.newFloat(-1.977371993328519), java.newFloat(0.3), java.newFloat(3), java.newFloat(-1.98997487421324), java.newFloat(0.2), java.newFloat(3), java.newFloat(-1.997498435543818), java.newFloat(0.1), java.newFloat(3), java.newFloat(-2), java.newFloat(0), java.newFloat(3), java.newFloat(-2), java.newFloat(-1), java.newFloat(3), java.newFloat(-2.5), java.newFloat(-1), java.newFloat(3), java.newFloat(-2.5), java.newFloat(2.5), java.newFloat(3), java.newFloat(2.5), java.newFloat(2.5), java.newFloat(3), java.newFloat(2.5), java.newFloat(-1), java.newFloat(3), java.newFloat(2), java.newFloat(-1), java.newFloat(3), java.newFloat(-2), java.newFloat(-1), java.newFloat(0), java.newFloat(-2.5), java.newFloat(-1), java.newFloat(0), java.newFloat(-2.5), java.newFloat(2.5), java.newFloat(0), java.newFloat(2.5), java.newFloat(2.5), java.newFloat(0), java.newFloat(2.5), java.newFloat(-1), java.newFloat(0), java.newFloat(2), java.newFloat(-1), java.newFloat(0), java.newFloat(2.5), java.newFloat(0), java.newFloat(3), java.newFloat(2.5), java.newFloat(0), java.newFloat(0), java.newFloat(-2.5), java.newFloat(0), java.newFloat(3), java.newFloat(-2.5), java.newFloat(0), java.newFloat(0), java.newFloat(-2.5), java.newFloat(2), java.newFloat(3), java.newFloat(-2), java.newFloat(2), java.newFloat(3), java.newFloat(-2), java.newFloat(2), java.newFloat(0), java.newFloat(-2.5), java.newFloat(2), java.newFloat(0), java.newFloat(-2), java.newFloat(2.5), java.newFloat(3), java.newFloat(-2), java.newFloat(2.5), java.newFloat(0), java.newFloat(0), java.newFloat(2.5), java.newFloat(3), java.newFloat(0), java.newFloat(2.5), java.newFloat(0), java.newFloat(2), java.newFloat(2), java.newFloat(3), java.newFloat(2.5), java.newFloat(2), java.newFloat(3), java.newFloat(2.5), java.newFloat(2), java.newFloat(0), java.newFloat(2), java.newFloat(2), java.newFloat(0), java.newFloat(2), java.newFloat(2.5), java.newFloat(3), java.newFloat(2), java.newFloat(2.5), java.newFloat(0)]))))
          .setAppearance(new autoclass.Appearance()
            .setMaterial(new autoclass.Material().setDEF("MaterialNode").setDiffuseColor(java.newArray("float", [java.newFloat(1), java.newFloat(0.75), java.newFloat(0.25)]))))))      ;
    X3D0.toFileX3D("../data/ArchHalf.new.node.x3d");
    X3D0.toFileJSON("../data/ArchHalf.new.node.json");
    process.exit(0);
