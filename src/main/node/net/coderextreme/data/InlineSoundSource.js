import java from 'node-java';
import util from 'util';
import autoclass from '../../../X3Dautoclass.js';
var ConfigurationProperties = autoclass.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
ConfigurationProperties.setStripDefaultAttributes(true);
      var X3D0 =  (new autoclass.X3D()).setProfile("Full").setVersion("4.0")
      .setHead(new autoclass.head()
        .addMeta(new autoclass.meta().setName("title").setContent("InlineSoundSource.x3d"))
        .addMeta(new autoclass.meta().setName("description").setContent("This demo is the same with the Single Audio Demo, with the difference that it uses the Inline grouping node. Namely, the scene is an X3D file and all nodes are loaded by Inline node via the \"url\" of X3D file."))
        .addMeta(new autoclass.meta().setName("info").setContent("This work presents an innovative solution of the spatial sound in X3DOM framework, that based on a combinational methodology. Specifically, we suggested the enrichment of X3DOM with spatial sound features, using both the X3D sound nodes and the structure of Web Audio API."))
        .addMeta(new autoclass.meta().setName("creator").setContent("Efi Lakka, Athanasios Malamos, Dick Puk, Don Brutzman"))
        .addMeta(new autoclass.meta().setName("created").setContent("28 October 2020"))
        .addMeta(new autoclass.meta().setName("modified").setContent("4 August 2021"))
        .addMeta(new autoclass.meta().setName("reference").setContent("CHANGELOG.txt"))
        .addMeta(new autoclass.meta().setName("TODO").setContent("credit for audio files"))
        .addMeta(new autoclass.meta().setName("reference").setContent("https://medialab.hmu.gr/minipages/x3domAudio"))
        .addMeta(new autoclass.meta().setName("identifier").setContent("https://x3dgraphics.com/examples/X3dForAdvancedModeling/AudioSpatialSound/InlineSoundSource.x3d"))
        .addMeta(new autoclass.meta().setName("generator").setContent("X3D-Edit 4.0, https://savage.nps.edu/X3D-Edit"))
        .addMeta(new autoclass.meta().setName("license").setContent("../license.html")))
      .setScene(new autoclass.Scene()
        .addChild(new autoclass.WorldInfo().setTitle("InlineSoundSource.x3d"))
        .addChild(new autoclass.NavigationInfo().setDEF("NAV"))
        .addChild(new autoclass.Background().setBackUrl(java.newArray("java.lang.String", ["images/generic/BK1.png","https://x3dgraphics.com/examples/X3dForAdvancedModeling/AudioSpatialSound/images/generic/BK1.png"])).setBottomUrl(java.newArray("java.lang.String", ["images/generic/DN1.png","https://x3dgraphics.com/examples/X3dForAdvancedModeling/AudioSpatialSound/images/generic/DN1.png"])).setFrontUrl(java.newArray("java.lang.String", ["images/generic/FR1.png","https://x3dgraphics.com/examples/X3dForAdvancedModeling/AudioSpatialSound/images/generic/FR1.png"])).setLeftUrl(java.newArray("java.lang.String", ["images/generic/LF1.png","https://x3dgraphics.com/examples/X3dForAdvancedModeling/AudioSpatialSound/images/generic/LF1.png"])).setRightUrl(java.newArray("java.lang.String", ["images/generic/RT1.png","https://x3dgraphics.com/examples/X3dForAdvancedModeling/AudioSpatialSound/images/generic/RT1.png"])).setTopUrl(java.newArray("java.lang.String", ["images/generic/UP1.png","https://x3dgraphics.com/examples/X3dForAdvancedModeling/AudioSpatialSound/images/generic/UP1.png"])))
        .addChild(new autoclass.Viewpoint().setDEF("Camera001").setDescription("Camera001").setFarDistance(java.newFloat(0)).setNearDistance(java.newFloat(1)).setOrientation(java.newArray("float", [java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(-0.523599)])).setPosition(java.newArray("float", [java.newFloat(0), java.newFloat(2000), java.newFloat(3500)])))
        .addChild(new autoclass.Transform().setDEF("Floor").setTranslation(java.newArray("float", [java.newFloat(1.241), java.newFloat(0), java.newFloat(0.358)]))
          .addChild(new autoclass.Shape()
            .setAppearance(new autoclass.Appearance().setDEF("WireColor")
              .setMaterial(new autoclass.Material().setDiffuseColor(java.newArray("float", [java.newFloat(0.122), java.newFloat(0.114), java.newFloat(0.125)]))))
            .setGeometry(new autoclass.IndexedFaceSet().setDEF("Box001-GEOMETRY").setCoordIndex(java.newArray("int", [0,1,2,-1,3,4,5,-1,6,7,8,-1,9,10,11,-1,12,13,14,-1,15,16,17,-1,18,19,20,-1,21,22,23,-1,24,25,26,-1,27,28,29,-1,30,31,32,-1,33,34,35,-1])).setSolid(false)
              .setCoord(new autoclass.Coordinate().setPoint(java.newArray("float", [java.newFloat(-1000), java.newFloat(0), java.newFloat(1000), java.newFloat(-1000), java.newFloat(0), java.newFloat(-1000), java.newFloat(1000), java.newFloat(0), java.newFloat(-1000), java.newFloat(1000), java.newFloat(0), java.newFloat(-1000), java.newFloat(1000), java.newFloat(0), java.newFloat(1000), java.newFloat(-1000), java.newFloat(0), java.newFloat(1000), java.newFloat(-1000), java.newFloat(8.031588), java.newFloat(1000), java.newFloat(1000), java.newFloat(8.031588), java.newFloat(1000), java.newFloat(1000), java.newFloat(8.031588), java.newFloat(-1000), java.newFloat(1000), java.newFloat(8.031588), java.newFloat(-1000), java.newFloat(-1000), java.newFloat(8.031588), java.newFloat(-1000), java.newFloat(-1000), java.newFloat(8.031588), java.newFloat(1000), java.newFloat(-1000), java.newFloat(0), java.newFloat(1000), java.newFloat(1000), java.newFloat(0), java.newFloat(1000), java.newFloat(1000), java.newFloat(8.031588), java.newFloat(1000), java.newFloat(1000), java.newFloat(8.031588), java.newFloat(1000), java.newFloat(-1000), java.newFloat(8.031588), java.newFloat(1000), java.newFloat(-1000), java.newFloat(0), java.newFloat(1000), java.newFloat(1000), java.newFloat(0), java.newFloat(1000), java.newFloat(1000), java.newFloat(0), java.newFloat(-1000), java.newFloat(1000), java.newFloat(8.031588), java.newFloat(-1000), java.newFloat(1000), java.newFloat(8.031588), java.newFloat(-1000), java.newFloat(1000), java.newFloat(8.031588), java.newFloat(1000), java.newFloat(1000), java.newFloat(0), java.newFloat(1000), java.newFloat(1000), java.newFloat(0), java.newFloat(-1000), java.newFloat(-1000), java.newFloat(0), java.newFloat(-1000), java.newFloat(-1000), java.newFloat(8.031588), java.newFloat(-1000), java.newFloat(-1000), java.newFloat(8.031588), java.newFloat(-1000), java.newFloat(1000), java.newFloat(8.031588), java.newFloat(-1000), java.newFloat(1000), java.newFloat(0), java.newFloat(-1000), java.newFloat(-1000), java.newFloat(0), java.newFloat(-1000), java.newFloat(-1000), java.newFloat(0), java.newFloat(1000), java.newFloat(-1000), java.newFloat(8.031588), java.newFloat(1000), java.newFloat(-1000), java.newFloat(8.031588), java.newFloat(1000), java.newFloat(-1000), java.newFloat(8.031588), java.newFloat(-1000), java.newFloat(-1000), java.newFloat(0), java.newFloat(-1000)])))
              .setNormal(new autoclass.Normal().setVector(java.newArray("float", [java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(-1), java.newFloat(0), java.newFloat(0)]))))))
        .addChild(new autoclass.Transform().setDEF("InlineScene")
          .addChild(new autoclass.Inline().setDEF("inline").setUrl(java.newArray("java.lang.String", ["x3d/example1.x3d","https://x3dgraphics.com/examples/X3dForAdvancedModeling/AudioSpatialSound/x3d/example1.x3d","x3d/example1.wrl","https://x3dgraphics.com/examples/X3dForAdvancedModeling/AudioSpatialSound/x3d/example1.wrl"])))))      ;
    X3D0.toFileX3D("../data/InlineSoundSource.new.node.x3d");
    X3D0.toFileJSON("../data/InlineSoundSource.new.node.json");
    process.exit(0);
