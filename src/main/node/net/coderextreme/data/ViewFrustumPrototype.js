var java = require('java');
var util = require('util');
java.asyncOptions = {
  asyncSuffix: undefined,     // Don't generate node-style methods taking callbacks
  syncSuffix: "",              // Sync methods use the base name(!!)
  promiseSuffix: "Promise",   // Generate methods returning promises, using the suffix Promise.
  promisify: util.promisify, // Needs Node.js version 8 or greater, see comment below
  ifReadOnlySuffix: "_alt"
};
var autoclass = require('../../../X3Dautoclass');
var ConfigurationProperties = autoclass.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
      var X3D0 =  (new autoclass.X3D()).setProfile("Immersive").setVersion("3.3")
      .setHead((new autoclass.head())
        .addMeta((new autoclass.meta()).setName("title").setContent("ViewFrustumPrototype.x3d"))
        .addMeta((new autoclass.meta()).setName("description").setContent("Define a view frustum associated with a given pair of Viewpoint and NavigationInfo nodes, provided as a reusable prototype."))
        .addMeta((new autoclass.meta()).setName("creator").setContent("Don Brutzman"))
        .addMeta((new autoclass.meta()).setName("translated").setContent("16 August 2008"))
        .addMeta((new autoclass.meta()).setName("modified").setContent("20 October 2019"))
        .addMeta((new autoclass.meta()).setName("reference").setContent("ViewFrustumExample.x3d"))
        .addMeta((new autoclass.meta()).setName("drawing").setContent("ViewFrustumComputation.png"))
        .addMeta((new autoclass.meta()).setName("Image").setContent("ViewFrustumOverheadView.png"))
        .addMeta((new autoclass.meta()).setName("Image").setContent("ViewFrustumObliqueView.png"))
        .addMeta((new autoclass.meta()).setName("subject").setContent("view culling frustum"))
        .addMeta((new autoclass.meta()).setName("identifier").setContent("http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ViewFrustumPrototype.x3d"))
        .addMeta((new autoclass.meta()).setName("generator").setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"))
        .addMeta((new autoclass.meta()).setName("license").setContent("../license.html")))
      .setScene((new autoclass.Scene())
        .addChild((new autoclass.WorldInfo()).setTitle("ViewFrustumPrototype.x3d"))
        .addChild((new autoclass.ProtoDeclare()).setName("ViewFrustum").setAppinfo("Display view frustum associated with a given pair of Viewpoint NavigationInfo nodes")
          .setProtoInterface((new autoclass.ProtoInterface())
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFNODE).setName("ViewpointNode").setAccessType(autoclass.field.ACCESSTYPE_INITIALIZEONLY).setAppinfo("required: insert Viewpoint DEF or USE node for view of interest")
              .addComments((new autoclass.CommentsBlock("NULL node, ProtoInstance must provide"))))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFNODE).setName("NavigationInfoNode").setAccessType(autoclass.field.ACCESSTYPE_INITIALIZEONLY).setAppinfo("required: insert NavigationInfo DEF or USE node of interest")
              .addComments((new autoclass.CommentsBlock("NULL node, ProtoInstance must provide"))))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFBOOL).setName("visible").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setAppinfo("whether or not frustum geometry is rendered").setValue("true"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFCOLOR).setName("lineColor").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setAppinfo("RGB color of ViewFrustum outline, default value 0.9 0.9 0.9").setValue("0.9 0.9 0.9"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFCOLOR).setName("frustumColor").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setAppinfo("RGB color of ViewFrustum hull geometry, default value 0.8 0.8 0.8").setValue("0.8 0.8 0.8"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFFLOAT).setName("transparency").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setAppinfo("transparency of ViewFrustum hull geometry, default value 0.5").setValue("0.5"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFFLOAT).setName("aspectRatio").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setAppinfo("assumed ratio height/width, default value 0.75").setValue("0.75"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFBOOL).setName("trace").setAccessType(autoclass.field.ACCESSTYPE_INITIALIZEONLY).setAppinfo("debug support, default false").setValue("false")))
          .setProtoBody((new autoclass.ProtoBody())
            .addChild((new autoclass.Switch()).setDEF("VisibilitySwitch").setWhichChoice(-1)
              .addChild((new autoclass.Transform()).setDEF("PositionTransform").setRotation(java.newArray("float", [java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(3.14159)]))
                .addChild((new autoclass.Transform()).setDEF("OrientationTransform")
                  .addChild((new autoclass.Shape())
                    .setGeometry((new autoclass.IndexedLineSet()).setDEF("FrustumLines").setCoordIndex(java.newArray("int", [0,1,2,3,0,-1,4,5,6,7,4,-1,0,4,-1,1,5,-1,2,6,-1,3,7,-1]))
                      .setCoord((new autoclass.Coordinate()).setDEF("FrustumCoordinate").setPoint(java.newArray("float", [java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(0)]))))
                    .setAppearance((new autoclass.Appearance())
                      .setMaterial((new autoclass.Material())
                        .setIS((new autoclass.IS())
                          .addConnect((new autoclass.connect()).setNodeField("emissiveColor").setProtoField("lineColor"))))))
                  .addChild((new autoclass.Shape())
                    .setGeometry((new autoclass.Extrusion()).setDEF("FrustumExtrusion"))
                    .setAppearance((new autoclass.Appearance()).setDEF("FrustumAppearance")
                      .setMaterial((new autoclass.Material())
                        .setIS((new autoclass.IS())
                          .addConnect((new autoclass.connect()).setNodeField("diffuseColor").setProtoField("frustumColor"))
                          .addConnect((new autoclass.connect()).setNodeField("transparency").setProtoField("transparency"))))))
                  .addChild((new autoclass.Shape())
                    .setGeometry((new autoclass.Sphere()).setRadius(java.newFloat(0.08)))
                    .setAppearance((new autoclass.Appearance()).setUSE("FrustumAppearance"))))))
            .addChild((new autoclass.Script()).setDEF("GeometryComputationScript").setDirectOutput(true).setUrl(java.newArray("java.lang.String", ["ViewFrustumPrototypeScript.js"]))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFBOOL).setName("visible").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setAppinfo("Whether or not frustum geometry is rendered"))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFINT32).setName("visibilitySwitchSelection").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY).setAppinfo("Adjust Switch selection to make geometry visible or not"))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFNODE).setName("ViewpointNode").setAccessType(autoclass.field.ACCESSTYPE_INITIALIZEONLY)
                .addComments((new autoclass.CommentsBlock("initialization node (if any) goes here"))))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFNODE).setName("NavigationInfoNode").setAccessType(autoclass.field.ACCESSTYPE_INITIALIZEONLY)
                .addComments((new autoclass.CommentsBlock("initialization node (if any) goes here"))))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFNODE).setName("FrustumCoordinate").setAccessType(autoclass.field.ACCESSTYPE_INITIALIZEONLY)
                .addChild((new autoclass.Coordinate()).setUSE("FrustumCoordinate")))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFNODE).setName("FrustumExtrusion").setAccessType(autoclass.field.ACCESSTYPE_INITIALIZEONLY)
                .addChild((new autoclass.Extrusion()).setUSE("FrustumExtrusion")))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFBOOL).setName("recompute").setAccessType(autoclass.field.ACCESSTYPE_INPUTONLY))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFFLOAT).setName("aspectRatio").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setAppinfo("assumed ratio height/width"))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFVEC3F).setName("position_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("orientation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_MFVEC3F).setName("spine_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_MFVEC2F).setName("scale_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_MFVEC3F).setName("point_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
              .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFBOOL).setName("trace").setAccessType(autoclass.field.ACCESSTYPE_INITIALIZEONLY))
              .setIS((new autoclass.IS())
                .addConnect((new autoclass.connect()).setNodeField("visible").setProtoField("visible"))
                .addConnect((new autoclass.connect()).setNodeField("ViewpointNode").setProtoField("ViewpointNode"))
                .addConnect((new autoclass.connect()).setNodeField("NavigationInfoNode").setProtoField("NavigationInfoNode"))
                .addConnect((new autoclass.connect()).setNodeField("aspectRatio").setProtoField("aspectRatio"))
                .addConnect((new autoclass.connect()).setNodeField("trace").setProtoField("trace"))))
            .addChild((new autoclass.ROUTE()).setFromField("visibilitySwitchSelection").setFromNode("GeometryComputationScript").setToField("whichChoice").setToNode("VisibilitySwitch"))
            .addChild((new autoclass.ROUTE()).setFromField("position_changed").setFromNode("GeometryComputationScript").setToField("translation").setToNode("PositionTransform"))
            .addChild((new autoclass.ROUTE()).setFromField("orientation_changed").setFromNode("GeometryComputationScript").setToField("rotation").setToNode("OrientationTransform"))
            .addChild((new autoclass.ROUTE()).setFromField("spine_changed").setFromNode("GeometryComputationScript").setToField("set_spine").setToNode("FrustumExtrusion"))
            .addChild((new autoclass.ROUTE()).setFromField("scale_changed").setFromNode("GeometryComputationScript").setToField("set_scale").setToNode("FrustumExtrusion"))
            .addChild((new autoclass.ROUTE()).setFromField("point_changed").setFromNode("GeometryComputationScript").setToField("point").setToNode("FrustumCoordinate"))))
        .addComments((new autoclass.CommentsBlock("Example use is in separate scene")))
        .addChild((new autoclass.Anchor()).setDescription("ViewFrustum Example").setUrl(java.newArray("java.lang.String", ["ViewFrustumExample.x3d"]))
          .addChild((new autoclass.Shape())
            .setAppearance((new autoclass.Appearance())
              .setMaterial((new autoclass.Material()).setDiffuseColor(java.newArray("float", [java.newFloat(0.8), java.newFloat(0.4), java.newFloat(0)]))))
            .setGeometry((new autoclass.Text()).setString(java.newArray("java.lang.String", ["ViewFrustumPrototype.x3d","is a Prototype declaration file.","For an example scene using the prototype,","click this text and view","ViewFrustumExample.x3d"]))
              .setFontStyle((new autoclass.FontStyle()).setJustify(java.newArray("java.lang.String", ["MIDDLE","MIDDLE"])).setSize(java.newFloat(0.8)))))))      ;
    X3D0.toFileX3D("../data/ViewFrustumPrototype.new.node.x3d");
    X3D0.toFileJSON("../data/ViewFrustumPrototype.new.node.json");
    process.exit(0);
