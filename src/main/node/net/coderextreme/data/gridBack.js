var java = require('java');
java.asyncOptions = {
  asyncSuffix: undefined,     // Don't generate node-style methods taking callbacks
  syncSuffix: "",              // Sync methods use the base name(!!)
  promiseSuffix: "Promise",   // Generate methods returning promises, using the suffix Promise.
  promisify: require('util').promisify, // Needs Node.js version 8 or greater, see comment below
  ifReadOnlySuffix: "_alt"
};
var autoclass = require('../../../X3Dautoclass');
var ConfigurationProperties = autoclass.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
      var X3D0 =  (new autoclass.X3D()).setProfile("Interchange").setVersion("3.0")
      .setHead((new autoclass.head())
        .addMeta((new autoclass.meta()).setName("title").setContent("gridBack.json"))
        .addMeta((new autoclass.meta()).setName("description").setContent("Checkerboard grid background for X3D/VRML materials selection."))
        .addMeta((new autoclass.meta()).setName("creator").setContent("David Roussel"))
        .addMeta((new autoclass.meta()).setName("translator").setContent("James Harney, Don Brutzman NPS"))
        .addMeta((new autoclass.meta()).setName("created").setContent("8 April 2002"))
        .addMeta((new autoclass.meta()).setName("modified").setContent("12 January 2014"))
        .addMeta((new autoclass.meta()).setName("reference").setContent("http://vrmlstuff.free.fr/materials"))
        .addMeta((new autoclass.meta()).setName("subject").setContent("Universal Media Material Library"))
        .addMeta((new autoclass.meta()).setName("identifier").setContent("https://www.web3d.org/x3d/content/examples/Basic/UniversalMediaMaterials/gridBack.json"))
        .addMeta((new autoclass.meta()).setName("generator").setContent("Vrml97ToX3dNist, http://ovrt.nist.gov/v2_x3d.html"))
        .addMeta((new autoclass.meta()).setName("license").setContent("../license.html")))
      .setScene((new autoclass.Scene())
        .addChild((new autoclass.Shape())
          .setAppearance((new autoclass.Appearance())
            .setMaterial((new autoclass.Material()).setAmbientIntensity(java.newFloat(0.01)).setDiffuseColor(java.newArray("float", [java.newFloat(1), java.newFloat(1), java.newFloat(1)])).setShininess(java.newFloat(0.05))))
          .setGeometry((new autoclass.IndexedFaceSet()).setColorIndex(java.newArray("int", [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0])).setColorPerVertex(false).setCoordIndex(java.newArray("int", [0,8,9,1,-1,1,9,10,2,-1,2,10,11,3,-1,3,11,12,4,-1,4,12,13,5,-1,5,13,14,6,-1,6,14,15,7,-1,8,16,17,9,-1,9,17,18,10,-1,10,18,19,11,-1,11,19,20,12,-1,12,20,21,13,-1,13,21,22,14,-1,14,22,23,15,-1,16,24,25,17,-1,17,25,26,18,-1,18,26,27,19,-1,19,27,28,20,-1,20,28,29,21,-1,21,29,30,22,-1,22,30,31,23,-1,24,32,33,25,-1,25,33,34,26,-1,26,34,35,27,-1,27,35,36,28,-1,28,36,37,29,-1,29,37,38,30,-1,30,38,39,31,-1,32,40,41,33,-1,33,41,42,34,-1,34,42,43,35,-1,35,43,44,36,-1,36,44,45,37,-1,37,45,46,38,-1,38,46,47,39,-1,40,48,49,41,-1,41,49,50,42,-1,42,50,51,43,-1,43,51,52,44,-1,44,52,53,45,-1,45,53,54,46,-1,46,54,55,47,-1,48,56,57,49,-1,49,57,58,50,-1,50,58,59,51,-1,51,59,60,52,-1,52,60,61,53,-1,53,61,62,54,-1,54,62,63,55,-1])).setNormalPerVertex(false)
            .setCoord((new autoclass.Coordinate()).setPoint(java.newArray("float", [java.newFloat(-5.25), java.newFloat(5.25), java.newFloat(0), java.newFloat(-3.75), java.newFloat(5.25), java.newFloat(0), java.newFloat(-2.25), java.newFloat(5.25), java.newFloat(0), java.newFloat(-0.75), java.newFloat(5.25), java.newFloat(0), java.newFloat(0.75), java.newFloat(5.25), java.newFloat(0), java.newFloat(2.25), java.newFloat(5.25), java.newFloat(0), java.newFloat(3.75), java.newFloat(5.25), java.newFloat(0), java.newFloat(5.25), java.newFloat(5.25), java.newFloat(0), java.newFloat(-5.25), java.newFloat(3.75), java.newFloat(0), java.newFloat(-3.75), java.newFloat(3.75), java.newFloat(0), java.newFloat(-2.25), java.newFloat(3.75), java.newFloat(0), java.newFloat(-0.75), java.newFloat(3.75), java.newFloat(0), java.newFloat(0.75), java.newFloat(3.75), java.newFloat(0), java.newFloat(2.25), java.newFloat(3.75), java.newFloat(0), java.newFloat(3.75), java.newFloat(3.75), java.newFloat(0), java.newFloat(5.25), java.newFloat(3.75), java.newFloat(0), java.newFloat(-5.25), java.newFloat(2.25), java.newFloat(0), java.newFloat(-3.75), java.newFloat(2.25), java.newFloat(0), java.newFloat(-2.25), java.newFloat(2.25), java.newFloat(0), java.newFloat(-0.75), java.newFloat(2.25), java.newFloat(0), java.newFloat(0.75), java.newFloat(2.25), java.newFloat(0), java.newFloat(2.25), java.newFloat(2.25), java.newFloat(0), java.newFloat(3.75), java.newFloat(2.25), java.newFloat(0), java.newFloat(5.25), java.newFloat(2.25), java.newFloat(0), java.newFloat(-5.25), java.newFloat(0.75), java.newFloat(0), java.newFloat(-3.75), java.newFloat(0.75), java.newFloat(0), java.newFloat(-2.25), java.newFloat(0.75), java.newFloat(0), java.newFloat(-0.75), java.newFloat(0.75), java.newFloat(0), java.newFloat(0.75), java.newFloat(0.75), java.newFloat(0), java.newFloat(2.25), java.newFloat(0.75), java.newFloat(0), java.newFloat(3.75), java.newFloat(0.75), java.newFloat(0), java.newFloat(5.25), java.newFloat(0.75), java.newFloat(0), java.newFloat(-5.25), java.newFloat(-0.75), java.newFloat(0), java.newFloat(-3.75), java.newFloat(-0.75), java.newFloat(0), java.newFloat(-2.25), java.newFloat(-0.75), java.newFloat(0), java.newFloat(-0.75), java.newFloat(-0.75), java.newFloat(0), java.newFloat(0.75), java.newFloat(-0.75), java.newFloat(0), java.newFloat(2.25), java.newFloat(-0.75), java.newFloat(0), java.newFloat(3.75), java.newFloat(-0.75), java.newFloat(0), java.newFloat(5.25), java.newFloat(-0.75), java.newFloat(0), java.newFloat(-5.25), java.newFloat(-2.25), java.newFloat(0), java.newFloat(-3.75), java.newFloat(-2.25), java.newFloat(0), java.newFloat(-2.25), java.newFloat(-2.25), java.newFloat(0), java.newFloat(-0.75), java.newFloat(-2.25), java.newFloat(0), java.newFloat(0.75), java.newFloat(-2.25), java.newFloat(0), java.newFloat(2.25), java.newFloat(-2.25), java.newFloat(0), java.newFloat(3.75), java.newFloat(-2.25), java.newFloat(0), java.newFloat(5.25), java.newFloat(-2.25), java.newFloat(0), java.newFloat(-5.25), java.newFloat(-3.75), java.newFloat(0), java.newFloat(-3.75), java.newFloat(-3.75), java.newFloat(0), java.newFloat(-2.25), java.newFloat(-3.75), java.newFloat(0), java.newFloat(-0.75), java.newFloat(-3.75), java.newFloat(0), java.newFloat(0.75), java.newFloat(-3.75), java.newFloat(0), java.newFloat(2.25), java.newFloat(-3.75), java.newFloat(0), java.newFloat(3.75), java.newFloat(-3.75), java.newFloat(0), java.newFloat(5.25), java.newFloat(-3.75), java.newFloat(0), java.newFloat(-5.25), java.newFloat(-5.25), java.newFloat(0), java.newFloat(-3.75), java.newFloat(-5.25), java.newFloat(0), java.newFloat(-2.25), java.newFloat(-5.25), java.newFloat(0), java.newFloat(-0.75), java.newFloat(-5.25), java.newFloat(0), java.newFloat(0.75), java.newFloat(-5.25), java.newFloat(0), java.newFloat(2.25), java.newFloat(-5.25), java.newFloat(0), java.newFloat(3.75), java.newFloat(-5.25), java.newFloat(0), java.newFloat(5.25), java.newFloat(-5.25), java.newFloat(0)])))
            .setColor((new autoclass.Color()).setColor(java.newArray("float", [java.newFloat(0.5), java.newFloat(0.5), java.newFloat(0.5), java.newFloat(0.75), java.newFloat(0.75), java.newFloat(0.75)]))))))      ;
    X3D0.toFileX3D("../data/gridBack.new.x3d");
