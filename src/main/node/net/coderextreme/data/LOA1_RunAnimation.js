var java = require('java');
var util = require('util');
java.asyncOptions = {
  asyncSuffix: undefined,     // Don't generate node-style methods taking callbacks
  syncSuffix: "",              // Sync methods use the base name(!!)
  promiseSuffix: "Promise",   // Generate methods returning promises, using the suffix Promise.
  promisify: util.promisify, // Needs Node.js version 8 or greater, see comment below
  ifReadOnlySuffix: "_alt"
};
var autoclass = require('../../../X3Dautoclass');
var ConfigurationProperties = autoclass.ConfigurationProperties;
ConfigurationProperties.showDefaultAttributes = false;
ConfigurationProperties.xsltEngine = ConfigurationProperties.XSLT_ENGINE_NATIVE_JAVA;
ConfigurationProperties.deleteIntermediateFiles = false;
ConfigurationProperties.setStripTrailingZeroes(true);
      var X3D0 =  (new autoclass.X3D()).setProfile("Immersive").setVersion("3.3")
      .setHead((new autoclass.head())
        .addMeta((new autoclass.meta()).setName("title").setContent("LOA1_RunAnimation.x3d"))
        .addMeta((new autoclass.meta()).setName("description").setContent("Humanoid animation prototype reusable by any Humanoid."))
        .addMeta((new autoclass.meta()).setName("creator").setContent("Cindy Ballreich cindy@ballreich.net 3Name3D"))
        .addMeta((new autoclass.meta()).setName("rights").setContent("1997 3Name3D / Yglesias, Wallock, Divekar, Inc., all rights reserved."))
        .addMeta((new autoclass.meta()).setName("translator").setContent("Ozan APAYDIN"))
        .addMeta((new autoclass.meta()).setName("translated").setContent("30 October 2001"))
        .addMeta((new autoclass.meta()).setName("modified").setContent("23 May 2020"))
        .addMeta((new autoclass.meta()).setName("reference").setContent("http://www.ballreich.net/vrml/HAnim/nancy_HAnim.wrl"))
        .addMeta((new autoclass.meta()).setName("reference").setContent("http://www.HAnim.org"))
        .addMeta((new autoclass.meta()).setName("reference").setContent("http://HAnim.org/Models"))
        .addMeta((new autoclass.meta()).setName("reference").setContent("http://HAnim.org/Nodes"))
        .addMeta((new autoclass.meta()).setName("subject").setContent("Nancy Run Animation HAnim 2001"))
        .addMeta((new autoclass.meta()).setName("identifier").setContent("https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Prototypes/LOA1_RunAnimation.x3d"))
        .addMeta((new autoclass.meta()).setName("generator").setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"))
        .addMeta((new autoclass.meta()).setName("license").setContent("../license.html")))
      .setScene((new autoclass.Scene())
        .addChild((new autoclass.WorldInfo()).setTitle("LOA1_RunAnimation.x3d"))
        .addChild((new autoclass.ProtoDeclare()).setName("LOA1_RunAnimation")
          .setProtoInterface((new autoclass.ProtoInterface())
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFTIME).setName("cycleInterval").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setValue("1"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFBOOL).setName("enabled").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setValue("true"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFBOOL).setName("loop").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setValue("true"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFTIME).setName("startTime").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setValue("0"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFTIME).setName("stopTime").setAccessType(autoclass.field.ACCESSTYPE_INPUTOUTPUT).setValue("-1"))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFFLOAT).setName("fraction_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFBOOL).setName("isActive").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFVEC3F).setName("HumanoidRoot_translation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("HumanoidRoot_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("lower_body_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("l_hip_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("l_knee_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("l_ankle_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("l_midtarsal_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("r_hip_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("r_knee_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("r_ankle_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("r_midtarsal_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("vl5_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("skullbase_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("l_shoulder_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("l_elbow_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("l_wrist_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("r_shoulder_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("r_elbow_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY))
            .addField((new autoclass.field()).setType(autoclass.field.TYPE_SFROTATION).setName("r_wrist_rotation_changed").setAccessType(autoclass.field.ACCESSTYPE_OUTPUTONLY)))
          .setProtoBody((new autoclass.ProtoBody())
            .addChild((new autoclass.Group())
              .addChild((new autoclass.TimeSensor()).setDEF("TIMER")
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("cycleInterval").setProtoField("cycleInterval"))
                  .addConnect((new autoclass.connect()).setNodeField("enabled").setProtoField("enabled"))
                  .addConnect((new autoclass.connect()).setNodeField("loop").setProtoField("loop"))
                  .addConnect((new autoclass.connect()).setNodeField("startTime").setProtoField("startTime"))
                  .addConnect((new autoclass.connect()).setNodeField("stopTime").setProtoField("stopTime"))
                  .addConnect((new autoclass.connect()).setNodeField("fraction_changed").setProtoField("fraction_changed"))
                  .addConnect((new autoclass.connect()).setNodeField("isActive").setProtoField("isActive"))))
              .addChild((new autoclass.PositionInterpolator()).setDEF("HUMANOIDROOT_POSITION_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2182), java.newFloat(0.2909), java.newFloat(0.3091), java.newFloat(0.7091), java.newFloat(0.8), java.newFloat(0.8182), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(0), java.newFloat(-0.0351), java.newFloat(0), java.newFloat(0), java.newFloat(-0.0351), java.newFloat(0), java.newFloat(0), java.newFloat(-0.04087), java.newFloat(0), java.newFloat(0), java.newFloat(-0.04886), java.newFloat(0), java.newFloat(0), java.newFloat(-0.04051), java.newFloat(0), java.newFloat(0), java.newFloat(-0.03666), java.newFloat(0), java.newFloat(0), java.newFloat(-0.03666), java.newFloat(0), java.newFloat(0), java.newFloat(-0.0351), java.newFloat(0)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("HumanoidRoot_translation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("HUMANOIDROOT_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("HumanoidRoot_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("SACROILIAC_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(0.9969), java.newFloat(-0.05444), java.newFloat(0.05596), java.newFloat(0.07687), java.newFloat(0.9969), java.newFloat(-0.05444), java.newFloat(0.05596), java.newFloat(0.07687)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("lower_body_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("L_HIP_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2182), java.newFloat(0.4909), java.newFloat(0.7455), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(-0.9986), java.newFloat(0.03354), java.newFloat(0.04001), java.newFloat(1.212), java.newFloat(-0.9889), java.newFloat(0.1328), java.newFloat(0.06696), java.newFloat(0.4025), java.newFloat(0.9894), java.newFloat(0.1453), java.newFloat(0.009351), java.newFloat(0.4114), java.newFloat(-0.9963), java.newFloat(0.07032), java.newFloat(0.05003), java.newFloat(0.7035), java.newFloat(-0.9986), java.newFloat(0.03354), java.newFloat(0.04001), java.newFloat(1.212)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("l_hip_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("L_KNEE_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2182), java.newFloat(0.4909), java.newFloat(0.7455), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1.108), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.4265), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.7052), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(2.179), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1.108)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("l_knee_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("L_ANKLE_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2182), java.newFloat(0.3091), java.newFloat(0.4909), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.03543), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(0.1037), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(0.4328), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.1929), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.03543)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("l_ankle_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("L_MIDTARSAL_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.5), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(-0.2), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("l_midtarsal_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("R_HIP_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2182), java.newFloat(0.4909), java.newFloat(0.7455), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(0.9999), java.newFloat(0.00293), java.newFloat(-0.00989), java.newFloat(0.402), java.newFloat(-1), java.newFloat(0.004977), java.newFloat(-0.00497), java.newFloat(0.5943), java.newFloat(-1), java.newFloat(0.003265), java.newFloat(-0.001752), java.newFloat(1.178), java.newFloat(-0.9999), java.newFloat(0.00815), java.newFloat(-0.01093), java.newFloat(0.3031), java.newFloat(0.9999), java.newFloat(0.00293), java.newFloat(-0.00989), java.newFloat(0.402)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("r_hip_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("R_KNEE_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.03636), java.newFloat(0.2182), java.newFloat(0.4909), java.newFloat(0.7455), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.7004), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1.011), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1.892), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(1.188), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.3964), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.7004)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("r_knee_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("R_ANKLE_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.4909), java.newFloat(0.7091), java.newFloat(0.8), java.newFloat(0.8182), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.2323), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(0.07843), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(0.09676), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(0.3274), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(0.3278), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0.2323)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("r_ankle_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("R_MIDTARSAL_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.5), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(-0.2), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(0), java.newFloat(1), java.newFloat(0), java.newFloat(0), java.newFloat(-0.2)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("r_midtarsal_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("VL5_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2545), java.newFloat(0.4909), java.newFloat(0.7636), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(0.7651), java.newFloat(0.6382), java.newFloat(0.08586), java.newFloat(0.2712), java.newFloat(0.9999), java.newFloat(0.002845), java.newFloat(-0.01547), java.newFloat(0.3756), java.newFloat(0.7459), java.newFloat(-0.6505), java.newFloat(-0.1432), java.newFloat(0.2416), java.newFloat(0.9984), java.newFloat(0.05536), java.newFloat(-0.01154), java.newFloat(0.3488), java.newFloat(0.7651), java.newFloat(0.6382), java.newFloat(0.08586), java.newFloat(0.2712)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("vl5_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("SKULLBASE_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.4909), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(0.6517), java.newFloat(-0.7559), java.newFloat(0.06211), java.newFloat(0.2508), java.newFloat(0.6467), java.newFloat(0.7527), java.newFloat(-0.1238), java.newFloat(0.2344), java.newFloat(0.6517), java.newFloat(-0.7559), java.newFloat(0.06211), java.newFloat(0.2508)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("skullbase_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("L_SHOULDER_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2182), java.newFloat(0.4909), java.newFloat(0.7455), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(0.9907), java.newFloat(-0.07264), java.newFloat(0.115), java.newFloat(1.135), java.newFloat(0.9291), java.newFloat(-0.1222), java.newFloat(0.349), java.newFloat(0.1695), java.newFloat(-0.9892), java.newFloat(0.1364), java.newFloat(-0.05394), java.newFloat(0.5112), java.newFloat(0.9942), java.newFloat(-0.0002052), java.newFloat(0.1073), java.newFloat(0.4975), java.newFloat(0.9907), java.newFloat(-0.07264), java.newFloat(0.115), java.newFloat(1.135)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("l_shoulder_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("L_ELBOW_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2182), java.newFloat(0.4909), java.newFloat(0.7455), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(0.9985), java.newFloat(0.03887), java.newFloat(0.03802), java.newFloat(4.689), java.newFloat(-0.965), java.newFloat(-0.1889), java.newFloat(-0.1821), java.newFloat(1.415), java.newFloat(0.9758), java.newFloat(0.1563), java.newFloat(0.1529), java.newFloat(4.666), java.newFloat(-0.9956), java.newFloat(-0.0936), java.newFloat(0.009826), java.newFloat(1.126), java.newFloat(0.9985), java.newFloat(0.03887), java.newFloat(0.03802), java.newFloat(4.689)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("l_elbow_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("L_WRIST_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(-0.0240995), java.newFloat(-0.999682), java.newFloat(0.00741506), java.newFloat(0.120409), java.newFloat(-0.0240995), java.newFloat(-0.999682), java.newFloat(0.00741506), java.newFloat(0.120409)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("l_wrist_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("R_SHOULDER_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2182), java.newFloat(0.4909), java.newFloat(0.7455), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(0.6979), java.newFloat(0.9094), java.newFloat(0.2062), java.newFloat(-0.3613), java.newFloat(0.4157), java.newFloat(0.9637), java.newFloat(0.1537), java.newFloat(-0.2185), java.newFloat(1.353), java.newFloat(0.4864), java.newFloat(0.08841), java.newFloat(-0.8693), java.newFloat(0.1716), java.newFloat(-1), java.newFloat(0), java.newFloat(0), java.newFloat(0.6979)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("r_shoulder_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("R_ELBOW_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(0.2182), java.newFloat(0.4909), java.newFloat(0.7455), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(0.9353), java.newFloat(-0.2978), java.newFloat(-0.191), java.newFloat(4.222), java.newFloat(-0.9362), java.newFloat(0.2924), java.newFloat(-0.1952), java.newFloat(1.05), java.newFloat(0.9941), java.newFloat(-0.09719), java.newFloat(-0.04725), java.newFloat(4.512), java.newFloat(-0.9594), java.newFloat(0.2653), java.newFloat(0.09579), java.newFloat(1.525), java.newFloat(0.9353), java.newFloat(-0.2978), java.newFloat(-0.191), java.newFloat(4.222)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("r_elbow_rotation_changed"))))
              .addChild((new autoclass.OrientationInterpolator()).setDEF("R_WRIST_ANIMATOR").setKey(java.newArray("float", [java.newFloat(0), java.newFloat(1)])).setKeyValue(java.newArray("float", [java.newFloat(-0.917742), java.newFloat(-0.237244), java.newFloat(-0.318536), java.newFloat(0.214273), java.newFloat(-0.917742), java.newFloat(-0.237244), java.newFloat(-0.318536), java.newFloat(0.214273)]))
                .setIS((new autoclass.IS())
                  .addConnect((new autoclass.connect()).setNodeField("value_changed").setProtoField("r_wrist_rotation_changed")))))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("HUMANOIDROOT_POSITION_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("HUMANOIDROOT_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("SACROILIAC_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_HIP_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_KNEE_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_ANKLE_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_MIDTARSAL_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_HIP_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_KNEE_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_ANKLE_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_MIDTARSAL_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("VL5_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("SKULLBASE_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_SHOULDER_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_ELBOW_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("L_WRIST_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_SHOULDER_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_ELBOW_ANIMATOR"))
            .addChild((new autoclass.ROUTE()).setFromField("fraction_changed").setFromNode("TIMER").setToField("set_fraction").setToNode("R_WRIST_ANIMATOR"))))
        .addComments((new autoclass.CommentsBlock("======================================")))
        .addComments((new autoclass.CommentsBlock("Point to example use in case someone inspects this file")))
        .addChild((new autoclass.Anchor()).setDescription("InterchangableActorsViaDynamicRouting").setParameter(java.newArray("java.lang.String", ["target=_blank"])).setUrl(java.newArray("java.lang.String", ["InterchangableActorsViaDynamicRouting.x3d","https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Prototypes/InterchangableActorsViaDynamicRouting.x3d","InterchangableActorsViaDynamicRouting.wrl","https://www.web3d.org/x3d/content/examples/HumanoidAnimation/Prototypes/InterchangableActorsViaDynamicRouting.wrl"]))
          .addChild((new autoclass.Shape())
            .setGeometry((new autoclass.Text()).setString(java.newArray("java.lang.String", ["LOA1_RunAnimation.x3d","defines a prototype","for animating a humanoid.","","Click this text to see","InterchangableActorsViaDynamicRouting example."]))
              .setFontStyle((new autoclass.FontStyle()).setJustify(java.newArray("java.lang.String", ["MIDDLE","MIDDLE"])).setSize(java.newFloat(0.8))))
            .setAppearance((new autoclass.Appearance())
              .setMaterial((new autoclass.Material()).setDiffuseColor(java.newArray("float", [java.newFloat(1), java.newFloat(1), java.newFloat(0.2)])))))))      ;
    X3D0.toFileX3D("../data/LOA1_RunAnimation.new.x3d");
    process.exit(0);
