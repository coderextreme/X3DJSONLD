<?xml version="1.0" encoding="UTF-8"?>
<!-- X3D diagnostics created using X3DUOM version 4.0 -->
<!-- X3D Schematron rules -->      <!-- *** start: NodeName capitalization checks generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="(lower-case(local-name()) = 'acousticproperties') and not(local-name() = 'AcousticProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is AcousticProperties </report>
      <report test="(lower-case(local-name()) = 'analyser') and not(local-name() = 'Analyser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Analyser </report>
      <report test="(lower-case(local-name()) = 'anchor') and not(local-name() = 'Anchor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Anchor </report>
      <report test="(lower-case(local-name()) = 'appearance') and not(local-name() = 'Appearance')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Appearance </report>
      <report test="(lower-case(local-name()) = 'arc2d') and not(local-name() = 'Arc2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Arc2D </report>
      <report test="(lower-case(local-name()) = 'arcclose2d') and not(local-name() = 'ArcClose2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ArcClose2D </report>
      <report test="(lower-case(local-name()) = 'audioclip') and not(local-name() = 'AudioClip')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is AudioClip </report>
      <report test="(lower-case(local-name()) = 'audiodestination') and not(local-name() = 'AudioDestination')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is AudioDestination </report>
      <report test="(lower-case(local-name()) = 'background') and not(local-name() = 'Background')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Background </report>
      <report test="(lower-case(local-name()) = 'balljoint') and not(local-name() = 'BallJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BallJoint </report>
      <report test="(lower-case(local-name()) = 'billboard') and not(local-name() = 'Billboard')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Billboard </report>
      <report test="(lower-case(local-name()) = 'biquadfilter') and not(local-name() = 'BiquadFilter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BiquadFilter </report>
      <report test="(lower-case(local-name()) = 'blendedvolumestyle') and not(local-name() = 'BlendedVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BlendedVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'booleanfilter') and not(local-name() = 'BooleanFilter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BooleanFilter </report>
      <report test="(lower-case(local-name()) = 'booleansequencer') and not(local-name() = 'BooleanSequencer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BooleanSequencer </report>
      <report test="(lower-case(local-name()) = 'booleantoggle') and not(local-name() = 'BooleanToggle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BooleanToggle </report>
      <report test="(lower-case(local-name()) = 'booleantrigger') and not(local-name() = 'BooleanTrigger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BooleanTrigger </report>
      <report test="(lower-case(local-name()) = 'boundaryenhancementvolumestyle') and not(local-name() = 'BoundaryEnhancementVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BoundaryEnhancementVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'boundedphysicsmodel') and not(local-name() = 'BoundedPhysicsModel')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BoundedPhysicsModel </report>
      <report test="(lower-case(local-name()) = 'box') and not(local-name() = 'Box')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Box </report>
      <report test="(lower-case(local-name()) = 'bufferaudiosource') and not(local-name() = 'BufferAudioSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BufferAudioSource </report>
      <report test="(lower-case(local-name()) = 'cadassembly') and not(local-name() = 'CADAssembly')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CADAssembly </report>
      <report test="(lower-case(local-name()) = 'cadface') and not(local-name() = 'CADFace')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CADFace </report>
      <report test="(lower-case(local-name()) = 'cadlayer') and not(local-name() = 'CADLayer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CADLayer </report>
      <report test="(lower-case(local-name()) = 'cadpart') and not(local-name() = 'CADPart')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CADPart </report>
      <report test="(lower-case(local-name()) = 'cartoonvolumestyle') and not(local-name() = 'CartoonVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CartoonVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'channelmerger') and not(local-name() = 'ChannelMerger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ChannelMerger </report>
      <report test="(lower-case(local-name()) = 'channelselector') and not(local-name() = 'ChannelSelector')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ChannelSelector </report>
      <report test="(lower-case(local-name()) = 'channelsplitter') and not(local-name() = 'ChannelSplitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ChannelSplitter </report>
      <report test="(lower-case(local-name()) = 'circle2d') and not(local-name() = 'Circle2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Circle2D </report>
      <report test="(lower-case(local-name()) = 'clipplane') and not(local-name() = 'ClipPlane')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ClipPlane </report>
      <report test="(lower-case(local-name()) = 'collidableoffset') and not(local-name() = 'CollidableOffset')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollidableOffset </report>
      <report test="(lower-case(local-name()) = 'collidableshape') and not(local-name() = 'CollidableShape')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollidableShape </report>
      <report test="(lower-case(local-name()) = 'collision') and not(local-name() = 'Collision')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Collision </report>
      <report test="(lower-case(local-name()) = 'collisioncollection') and not(local-name() = 'CollisionCollection')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollisionCollection </report>
      <report test="(lower-case(local-name()) = 'collisionsensor') and not(local-name() = 'CollisionSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollisionSensor </report>
      <report test="(lower-case(local-name()) = 'collisionspace') and not(local-name() = 'CollisionSpace')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollisionSpace </report>
      <report test="(lower-case(local-name()) = 'color') and not(local-name() = 'Color')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Color </report>
      <report test="(lower-case(local-name()) = 'colorchaser') and not(local-name() = 'ColorChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ColorChaser </report>
      <report test="(lower-case(local-name()) = 'colordamper') and not(local-name() = 'ColorDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ColorDamper </report>
      <report test="(lower-case(local-name()) = 'colorinterpolator') and not(local-name() = 'ColorInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ColorInterpolator </report>
      <report test="(lower-case(local-name()) = 'colorrgba') and not(local-name() = 'ColorRGBA')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ColorRGBA </report>
      <report test="(lower-case(local-name()) = 'composedcubemaptexture') and not(local-name() = 'ComposedCubeMapTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ComposedCubeMapTexture </report>
      <report test="(lower-case(local-name()) = 'composedshader') and not(local-name() = 'ComposedShader')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ComposedShader </report>
      <report test="(lower-case(local-name()) = 'composedtexture3d') and not(local-name() = 'ComposedTexture3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ComposedTexture3D </report>
      <report test="(lower-case(local-name()) = 'composedvolumestyle') and not(local-name() = 'ComposedVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ComposedVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'cone') and not(local-name() = 'Cone')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Cone </report>
      <report test="(lower-case(local-name()) = 'coneemitter') and not(local-name() = 'ConeEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ConeEmitter </report>
      <report test="(lower-case(local-name()) = 'contact') and not(local-name() = 'Contact')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Contact </report>
      <report test="(lower-case(local-name()) = 'contour2d') and not(local-name() = 'Contour2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Contour2D </report>
      <report test="(lower-case(local-name()) = 'contourpolyline2d') and not(local-name() = 'ContourPolyline2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ContourPolyline2D </report>
      <report test="(lower-case(local-name()) = 'convolver') and not(local-name() = 'Convolver')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Convolver </report>
      <report test="(lower-case(local-name()) = 'coordinate') and not(local-name() = 'Coordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Coordinate </report>
      <report test="(lower-case(local-name()) = 'coordinatechaser') and not(local-name() = 'CoordinateChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateChaser </report>
      <report test="(lower-case(local-name()) = 'coordinatedamper') and not(local-name() = 'CoordinateDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateDamper </report>
      <report test="(lower-case(local-name()) = 'coordinatedouble') and not(local-name() = 'CoordinateDouble')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateDouble </report>
      <report test="(lower-case(local-name()) = 'coordinateinterpolator') and not(local-name() = 'CoordinateInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateInterpolator </report>
      <report test="(lower-case(local-name()) = 'coordinateinterpolator2d') and not(local-name() = 'CoordinateInterpolator2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateInterpolator2D </report>
      <report test="(lower-case(local-name()) = 'cylinder') and not(local-name() = 'Cylinder')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Cylinder </report>
      <report test="(lower-case(local-name()) = 'cylindersensor') and not(local-name() = 'CylinderSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CylinderSensor </report>
      <report test="(lower-case(local-name()) = 'disentitymanager') and not(local-name() = 'DISEntityManager')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DISEntityManager </report>
      <report test="(lower-case(local-name()) = 'disentitytypemapping') and not(local-name() = 'DISEntityTypeMapping')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DISEntityTypeMapping </report>
      <report test="(lower-case(local-name()) = 'delay') and not(local-name() = 'Delay')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Delay </report>
      <report test="(lower-case(local-name()) = 'directionallight') and not(local-name() = 'DirectionalLight')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DirectionalLight </report>
      <report test="(lower-case(local-name()) = 'disk2d') and not(local-name() = 'Disk2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Disk2D </report>
      <report test="(lower-case(local-name()) = 'doubleaxishingejoint') and not(local-name() = 'DoubleAxisHingeJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DoubleAxisHingeJoint </report>
      <report test="(lower-case(local-name()) = 'dynamicscompressor') and not(local-name() = 'DynamicsCompressor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DynamicsCompressor </report>
      <report test="(lower-case(local-name()) = 'easeineaseout') and not(local-name() = 'EaseInEaseOut')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is EaseInEaseOut </report>
      <report test="(lower-case(local-name()) = 'edgeenhancementvolumestyle') and not(local-name() = 'EdgeEnhancementVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is EdgeEnhancementVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'elevationgrid') and not(local-name() = 'ElevationGrid')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ElevationGrid </report>
      <report test="(lower-case(local-name()) = 'espdutransform') and not(local-name() = 'EspduTransform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is EspduTransform </report>
      <report test="(lower-case(local-name()) = 'explosionemitter') and not(local-name() = 'ExplosionEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ExplosionEmitter </report>
      <report test="(lower-case(local-name()) = 'extrusion') and not(local-name() = 'Extrusion')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Extrusion </report>
      <report test="(lower-case(local-name()) = 'fillproperties') and not(local-name() = 'FillProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is FillProperties </report>
      <report test="(lower-case(local-name()) = 'floatvertexattribute') and not(local-name() = 'FloatVertexAttribute')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is FloatVertexAttribute </report>
      <report test="(lower-case(local-name()) = 'fog') and not(local-name() = 'Fog')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Fog </report>
      <report test="(lower-case(local-name()) = 'fogcoordinate') and not(local-name() = 'FogCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is FogCoordinate </report>
      <report test="(lower-case(local-name()) = 'fontstyle') and not(local-name() = 'FontStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is FontStyle </report>
      <report test="(lower-case(local-name()) = 'forcephysicsmodel') and not(local-name() = 'ForcePhysicsModel')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ForcePhysicsModel </report>
      <report test="(lower-case(local-name()) = 'gain') and not(local-name() = 'Gain')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Gain </report>
      <report test="(lower-case(local-name()) = 'generatedcubemaptexture') and not(local-name() = 'GeneratedCubeMapTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeneratedCubeMapTexture </report>
      <report test="(lower-case(local-name()) = 'geocoordinate') and not(local-name() = 'GeoCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoCoordinate </report>
      <report test="(lower-case(local-name()) = 'geoelevationgrid') and not(local-name() = 'GeoElevationGrid')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoElevationGrid </report>
      <report test="(lower-case(local-name()) = 'geolod') and not(local-name() = 'GeoLOD')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoLOD </report>
      <report test="(lower-case(local-name()) = 'geolocation') and not(local-name() = 'GeoLocation')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoLocation </report>
      <report test="(lower-case(local-name()) = 'geometadata') and not(local-name() = 'GeoMetadata')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoMetadata </report>
      <report test="(lower-case(local-name()) = 'geoorigin') and not(local-name() = 'GeoOrigin')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoOrigin </report>
      <report test="(lower-case(local-name()) = 'geopositioninterpolator') and not(local-name() = 'GeoPositionInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoPositionInterpolator </report>
      <report test="(lower-case(local-name()) = 'geoproximitysensor') and not(local-name() = 'GeoProximitySensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoProximitySensor </report>
      <report test="(lower-case(local-name()) = 'geotouchsensor') and not(local-name() = 'GeoTouchSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoTouchSensor </report>
      <report test="(lower-case(local-name()) = 'geotransform') and not(local-name() = 'GeoTransform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoTransform </report>
      <report test="(lower-case(local-name()) = 'geoviewpoint') and not(local-name() = 'GeoViewpoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoViewpoint </report>
      <report test="(lower-case(local-name()) = 'group') and not(local-name() = 'Group')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Group </report>
      <report test="(lower-case(local-name()) = 'hanimdisplacer') and not(local-name() = 'HAnimDisplacer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimDisplacer </report>
      <report test="(lower-case(local-name()) = 'hanimhumanoid') and not(local-name() = 'HAnimHumanoid')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimHumanoid </report>
      <report test="(lower-case(local-name()) = 'hanimjoint') and not(local-name() = 'HAnimJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimJoint </report>
      <report test="(lower-case(local-name()) = 'hanimmotion') and not(local-name() = 'HAnimMotion')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimMotion </report>
      <report test="(lower-case(local-name()) = 'hanimsegment') and not(local-name() = 'HAnimSegment')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimSegment </report>
      <report test="(lower-case(local-name()) = 'hanimsite') and not(local-name() = 'HAnimSite')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimSite </report>
      <report test="(lower-case(local-name()) = 'imagecubemaptexture') and not(local-name() = 'ImageCubeMapTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ImageCubeMapTexture </report>
      <report test="(lower-case(local-name()) = 'imagetexture') and not(local-name() = 'ImageTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ImageTexture </report>
      <report test="(lower-case(local-name()) = 'imagetexture3d') and not(local-name() = 'ImageTexture3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ImageTexture3D </report>
      <report test="(lower-case(local-name()) = 'indexedfaceset') and not(local-name() = 'IndexedFaceSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedFaceSet </report>
      <report test="(lower-case(local-name()) = 'indexedlineset') and not(local-name() = 'IndexedLineSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedLineSet </report>
      <report test="(lower-case(local-name()) = 'indexedquadset') and not(local-name() = 'IndexedQuadSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedQuadSet </report>
      <report test="(lower-case(local-name()) = 'indexedtrianglefanset') and not(local-name() = 'IndexedTriangleFanSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedTriangleFanSet </report>
      <report test="(lower-case(local-name()) = 'indexedtriangleset') and not(local-name() = 'IndexedTriangleSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedTriangleSet </report>
      <report test="(lower-case(local-name()) = 'indexedtrianglestripset') and not(local-name() = 'IndexedTriangleStripSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedTriangleStripSet </report>
      <report test="(lower-case(local-name()) = 'inline') and not(local-name() = 'Inline')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Inline </report>
      <report test="(lower-case(local-name()) = 'integersequencer') and not(local-name() = 'IntegerSequencer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IntegerSequencer </report>
      <report test="(lower-case(local-name()) = 'integertrigger') and not(local-name() = 'IntegerTrigger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IntegerTrigger </report>
      <report test="(lower-case(local-name()) = 'isosurfacevolumedata') and not(local-name() = 'IsoSurfaceVolumeData')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IsoSurfaceVolumeData </report>
      <report test="(lower-case(local-name()) = 'keysensor') and not(local-name() = 'KeySensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is KeySensor </report>
      <report test="(lower-case(local-name()) = 'lod') and not(local-name() = 'LOD')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LOD </report>
      <report test="(lower-case(local-name()) = 'layer') and not(local-name() = 'Layer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Layer </report>
      <report test="(lower-case(local-name()) = 'layerset') and not(local-name() = 'LayerSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LayerSet </report>
      <report test="(lower-case(local-name()) = 'layout') and not(local-name() = 'Layout')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Layout </report>
      <report test="(lower-case(local-name()) = 'layoutgroup') and not(local-name() = 'LayoutGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LayoutGroup </report>
      <report test="(lower-case(local-name()) = 'layoutlayer') and not(local-name() = 'LayoutLayer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LayoutLayer </report>
      <report test="(lower-case(local-name()) = 'linepicksensor') and not(local-name() = 'LinePickSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LinePickSensor </report>
      <report test="(lower-case(local-name()) = 'lineproperties') and not(local-name() = 'LineProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LineProperties </report>
      <report test="(lower-case(local-name()) = 'lineset') and not(local-name() = 'LineSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LineSet </report>
      <report test="(lower-case(local-name()) = 'listenerpointsource') and not(local-name() = 'ListenerPointSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ListenerPointSource </report>
      <report test="(lower-case(local-name()) = 'loadsensor') and not(local-name() = 'LoadSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LoadSensor </report>
      <report test="(lower-case(local-name()) = 'localfog') and not(local-name() = 'LocalFog')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LocalFog </report>
      <report test="(lower-case(local-name()) = 'material') and not(local-name() = 'Material')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Material </report>
      <report test="(lower-case(local-name()) = 'matrix3vertexattribute') and not(local-name() = 'Matrix3VertexAttribute')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Matrix3VertexAttribute </report>
      <report test="(lower-case(local-name()) = 'matrix4vertexattribute') and not(local-name() = 'Matrix4VertexAttribute')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Matrix4VertexAttribute </report>
      <report test="(lower-case(local-name()) = 'metadataboolean') and not(local-name() = 'MetadataBoolean')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataBoolean </report>
      <report test="(lower-case(local-name()) = 'metadatadouble') and not(local-name() = 'MetadataDouble')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataDouble </report>
      <report test="(lower-case(local-name()) = 'metadatafloat') and not(local-name() = 'MetadataFloat')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataFloat </report>
      <report test="(lower-case(local-name()) = 'metadatainteger') and not(local-name() = 'MetadataInteger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataInteger </report>
      <report test="(lower-case(local-name()) = 'metadataset') and not(local-name() = 'MetadataSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataSet </report>
      <report test="(lower-case(local-name()) = 'metadatastring') and not(local-name() = 'MetadataString')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataString </report>
      <report test="(lower-case(local-name()) = 'microphonesource') and not(local-name() = 'MicrophoneSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MicrophoneSource </report>
      <report test="(lower-case(local-name()) = 'motorjoint') and not(local-name() = 'MotorJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MotorJoint </report>
      <report test="(lower-case(local-name()) = 'movietexture') and not(local-name() = 'MovieTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MovieTexture </report>
      <report test="(lower-case(local-name()) = 'multitexture') and not(local-name() = 'MultiTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MultiTexture </report>
      <report test="(lower-case(local-name()) = 'multitexturecoordinate') and not(local-name() = 'MultiTextureCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MultiTextureCoordinate </report>
      <report test="(lower-case(local-name()) = 'multitexturetransform') and not(local-name() = 'MultiTextureTransform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MultiTextureTransform </report>
      <report test="(lower-case(local-name()) = 'navigationinfo') and not(local-name() = 'NavigationInfo')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NavigationInfo </report>
      <report test="(lower-case(local-name()) = 'normal') and not(local-name() = 'Normal')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Normal </report>
      <report test="(lower-case(local-name()) = 'normalinterpolator') and not(local-name() = 'NormalInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NormalInterpolator </report>
      <report test="(lower-case(local-name()) = 'nurbscurve') and not(local-name() = 'NurbsCurve')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsCurve </report>
      <report test="(lower-case(local-name()) = 'nurbscurve2d') and not(local-name() = 'NurbsCurve2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsCurve2D </report>
      <report test="(lower-case(local-name()) = 'nurbsorientationinterpolator') and not(local-name() = 'NurbsOrientationInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsOrientationInterpolator </report>
      <report test="(lower-case(local-name()) = 'nurbspatchsurface') and not(local-name() = 'NurbsPatchSurface')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsPatchSurface </report>
      <report test="(lower-case(local-name()) = 'nurbspositioninterpolator') and not(local-name() = 'NurbsPositionInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsPositionInterpolator </report>
      <report test="(lower-case(local-name()) = 'nurbsset') and not(local-name() = 'NurbsSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsSet </report>
      <report test="(lower-case(local-name()) = 'nurbssurfaceinterpolator') and not(local-name() = 'NurbsSurfaceInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsSurfaceInterpolator </report>
      <report test="(lower-case(local-name()) = 'nurbssweptsurface') and not(local-name() = 'NurbsSweptSurface')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsSweptSurface </report>
      <report test="(lower-case(local-name()) = 'nurbsswungsurface') and not(local-name() = 'NurbsSwungSurface')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsSwungSurface </report>
      <report test="(lower-case(local-name()) = 'nurbstexturecoordinate') and not(local-name() = 'NurbsTextureCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsTextureCoordinate </report>
      <report test="(lower-case(local-name()) = 'nurbstrimmedsurface') and not(local-name() = 'NurbsTrimmedSurface')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsTrimmedSurface </report>
      <report test="(lower-case(local-name()) = 'opacitymapvolumestyle') and not(local-name() = 'OpacityMapVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OpacityMapVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'orientationchaser') and not(local-name() = 'OrientationChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OrientationChaser </report>
      <report test="(lower-case(local-name()) = 'orientationdamper') and not(local-name() = 'OrientationDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OrientationDamper </report>
      <report test="(lower-case(local-name()) = 'orientationinterpolator') and not(local-name() = 'OrientationInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OrientationInterpolator </report>
      <report test="(lower-case(local-name()) = 'orthoviewpoint') and not(local-name() = 'OrthoViewpoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OrthoViewpoint </report>
      <report test="(lower-case(local-name()) = 'oscillatorsource') and not(local-name() = 'OscillatorSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OscillatorSource </report>
      <report test="(lower-case(local-name()) = 'packagedshader') and not(local-name() = 'PackagedShader')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PackagedShader </report>
      <report test="(lower-case(local-name()) = 'particlesystem') and not(local-name() = 'ParticleSystem')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ParticleSystem </report>
      <report test="(lower-case(local-name()) = 'periodicwave') and not(local-name() = 'PeriodicWave')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PeriodicWave </report>
      <report test="(lower-case(local-name()) = 'physicalmaterial') and not(local-name() = 'PhysicalMaterial')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PhysicalMaterial </report>
      <report test="(lower-case(local-name()) = 'pickablegroup') and not(local-name() = 'PickableGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PickableGroup </report>
      <report test="(lower-case(local-name()) = 'pixeltexture') and not(local-name() = 'PixelTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PixelTexture </report>
      <report test="(lower-case(local-name()) = 'pixeltexture3d') and not(local-name() = 'PixelTexture3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PixelTexture3D </report>
      <report test="(lower-case(local-name()) = 'planesensor') and not(local-name() = 'PlaneSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PlaneSensor </report>
      <report test="(lower-case(local-name()) = 'pointemitter') and not(local-name() = 'PointEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointEmitter </report>
      <report test="(lower-case(local-name()) = 'pointlight') and not(local-name() = 'PointLight')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointLight </report>
      <report test="(lower-case(local-name()) = 'pointpicksensor') and not(local-name() = 'PointPickSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointPickSensor </report>
      <report test="(lower-case(local-name()) = 'pointproperties') and not(local-name() = 'PointProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointProperties </report>
      <report test="(lower-case(local-name()) = 'pointset') and not(local-name() = 'PointSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointSet </report>
      <report test="(lower-case(local-name()) = 'polyline2d') and not(local-name() = 'Polyline2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Polyline2D </report>
      <report test="(lower-case(local-name()) = 'polylineemitter') and not(local-name() = 'PolylineEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PolylineEmitter </report>
      <report test="(lower-case(local-name()) = 'polypoint2d') and not(local-name() = 'Polypoint2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Polypoint2D </report>
      <report test="(lower-case(local-name()) = 'positionchaser') and not(local-name() = 'PositionChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionChaser </report>
      <report test="(lower-case(local-name()) = 'positionchaser2d') and not(local-name() = 'PositionChaser2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionChaser2D </report>
      <report test="(lower-case(local-name()) = 'positiondamper') and not(local-name() = 'PositionDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionDamper </report>
      <report test="(lower-case(local-name()) = 'positiondamper2d') and not(local-name() = 'PositionDamper2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionDamper2D </report>
      <report test="(lower-case(local-name()) = 'positioninterpolator') and not(local-name() = 'PositionInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionInterpolator </report>
      <report test="(lower-case(local-name()) = 'positioninterpolator2d') and not(local-name() = 'PositionInterpolator2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionInterpolator2D </report>
      <report test="(lower-case(local-name()) = 'primitivepicksensor') and not(local-name() = 'PrimitivePickSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PrimitivePickSensor </report>
      <report test="(lower-case(local-name()) = 'programshader') and not(local-name() = 'ProgramShader')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ProgramShader </report>
      <report test="(lower-case(local-name()) = 'projectionvolumestyle') and not(local-name() = 'ProjectionVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ProjectionVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'protoinstance') and not(local-name() = 'ProtoInstance')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ProtoInstance </report>
      <report test="(lower-case(local-name()) = 'proximitysensor') and not(local-name() = 'ProximitySensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ProximitySensor </report>
      <report test="(lower-case(local-name()) = 'quadset') and not(local-name() = 'QuadSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is QuadSet </report>
      <report test="(lower-case(local-name()) = 'receiverpdu') and not(local-name() = 'ReceiverPdu')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ReceiverPdu </report>
      <report test="(lower-case(local-name()) = 'rectangle2d') and not(local-name() = 'Rectangle2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Rectangle2D </report>
      <report test="(lower-case(local-name()) = 'rigidbody') and not(local-name() = 'RigidBody')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is RigidBody </report>
      <report test="(lower-case(local-name()) = 'rigidbodycollection') and not(local-name() = 'RigidBodyCollection')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is RigidBodyCollection </report>
      <report test="(lower-case(local-name()) = 'scalarchaser') and not(local-name() = 'ScalarChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScalarChaser </report>
      <report test="(lower-case(local-name()) = 'scalardamper') and not(local-name() = 'ScalarDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScalarDamper </report>
      <report test="(lower-case(local-name()) = 'scalarinterpolator') and not(local-name() = 'ScalarInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScalarInterpolator </report>
      <report test="(lower-case(local-name()) = 'screenfontstyle') and not(local-name() = 'ScreenFontStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScreenFontStyle </report>
      <report test="(lower-case(local-name()) = 'screengroup') and not(local-name() = 'ScreenGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScreenGroup </report>
      <report test="(lower-case(local-name()) = 'script') and not(local-name() = 'Script')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Script </report>
      <report test="(lower-case(local-name()) = 'segmentedvolumedata') and not(local-name() = 'SegmentedVolumeData')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SegmentedVolumeData </report>
      <report test="(lower-case(local-name()) = 'shadedvolumestyle') and not(local-name() = 'ShadedVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ShadedVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'shaderpart') and not(local-name() = 'ShaderPart')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ShaderPart </report>
      <report test="(lower-case(local-name()) = 'shaderprogram') and not(local-name() = 'ShaderProgram')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ShaderProgram </report>
      <report test="(lower-case(local-name()) = 'shape') and not(local-name() = 'Shape')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Shape </report>
      <report test="(lower-case(local-name()) = 'signalpdu') and not(local-name() = 'SignalPdu')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SignalPdu </report>
      <report test="(lower-case(local-name()) = 'silhouetteenhancementvolumestyle') and not(local-name() = 'SilhouetteEnhancementVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SilhouetteEnhancementVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'singleaxishingejoint') and not(local-name() = 'SingleAxisHingeJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SingleAxisHingeJoint </report>
      <report test="(lower-case(local-name()) = 'sliderjoint') and not(local-name() = 'SliderJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SliderJoint </report>
      <report test="(lower-case(local-name()) = 'sound') and not(local-name() = 'Sound')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Sound </report>
      <report test="(lower-case(local-name()) = 'spatialsound') and not(local-name() = 'SpatialSound')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SpatialSound </report>
      <report test="(lower-case(local-name()) = 'sphere') and not(local-name() = 'Sphere')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Sphere </report>
      <report test="(lower-case(local-name()) = 'spheresensor') and not(local-name() = 'SphereSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SphereSensor </report>
      <report test="(lower-case(local-name()) = 'splinepositioninterpolator') and not(local-name() = 'SplinePositionInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SplinePositionInterpolator </report>
      <report test="(lower-case(local-name()) = 'splinepositioninterpolator2d') and not(local-name() = 'SplinePositionInterpolator2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SplinePositionInterpolator2D </report>
      <report test="(lower-case(local-name()) = 'splinescalarinterpolator') and not(local-name() = 'SplineScalarInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SplineScalarInterpolator </report>
      <report test="(lower-case(local-name()) = 'spotlight') and not(local-name() = 'SpotLight')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SpotLight </report>
      <report test="(lower-case(local-name()) = 'squadorientationinterpolator') and not(local-name() = 'SquadOrientationInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SquadOrientationInterpolator </report>
      <report test="(lower-case(local-name()) = 'staticgroup') and not(local-name() = 'StaticGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is StaticGroup </report>
      <report test="(lower-case(local-name()) = 'streamaudiodestination') and not(local-name() = 'StreamAudioDestination')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is StreamAudioDestination </report>
      <report test="(lower-case(local-name()) = 'streamaudiosource') and not(local-name() = 'StreamAudioSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is StreamAudioSource </report>
      <report test="(lower-case(local-name()) = 'stringsensor') and not(local-name() = 'StringSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is StringSensor </report>
      <report test="(lower-case(local-name()) = 'surfaceemitter') and not(local-name() = 'SurfaceEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SurfaceEmitter </report>
      <report test="(lower-case(local-name()) = 'switch') and not(local-name() = 'Switch')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Switch </report>
      <report test="(lower-case(local-name()) = 'texcoordchaser2d') and not(local-name() = 'TexCoordChaser2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TexCoordChaser2D </report>
      <report test="(lower-case(local-name()) = 'texcoorddamper2d') and not(local-name() = 'TexCoordDamper2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TexCoordDamper2D </report>
      <report test="(lower-case(local-name()) = 'text') and not(local-name() = 'Text')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Text </report>
      <report test="(lower-case(local-name()) = 'texturebackground') and not(local-name() = 'TextureBackground')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureBackground </report>
      <report test="(lower-case(local-name()) = 'texturecoordinate') and not(local-name() = 'TextureCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureCoordinate </report>
      <report test="(lower-case(local-name()) = 'texturecoordinate3d') and not(local-name() = 'TextureCoordinate3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureCoordinate3D </report>
      <report test="(lower-case(local-name()) = 'texturecoordinate4d') and not(local-name() = 'TextureCoordinate4D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureCoordinate4D </report>
      <report test="(lower-case(local-name()) = 'texturecoordinategenerator') and not(local-name() = 'TextureCoordinateGenerator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureCoordinateGenerator </report>
      <report test="(lower-case(local-name()) = 'textureprojector') and not(local-name() = 'TextureProjector')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureProjector </report>
      <report test="(lower-case(local-name()) = 'textureprojectorparallel') and not(local-name() = 'TextureProjectorParallel')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureProjectorParallel </report>
      <report test="(lower-case(local-name()) = 'textureproperties') and not(local-name() = 'TextureProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureProperties </report>
      <report test="(lower-case(local-name()) = 'texturetransform') and not(local-name() = 'TextureTransform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureTransform </report>
      <report test="(lower-case(local-name()) = 'texturetransform3d') and not(local-name() = 'TextureTransform3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureTransform3D </report>
      <report test="(lower-case(local-name()) = 'texturetransformmatrix3d') and not(local-name() = 'TextureTransformMatrix3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureTransformMatrix3D </report>
      <report test="(lower-case(local-name()) = 'timesensor') and not(local-name() = 'TimeSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TimeSensor </report>
      <report test="(lower-case(local-name()) = 'timetrigger') and not(local-name() = 'TimeTrigger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TimeTrigger </report>
      <report test="(lower-case(local-name()) = 'tonemappedvolumestyle') and not(local-name() = 'ToneMappedVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ToneMappedVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'touchsensor') and not(local-name() = 'TouchSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TouchSensor </report>
      <report test="(lower-case(local-name()) = 'transform') and not(local-name() = 'Transform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Transform </report>
      <report test="(lower-case(local-name()) = 'transformsensor') and not(local-name() = 'TransformSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TransformSensor </report>
      <report test="(lower-case(local-name()) = 'transmitterpdu') and not(local-name() = 'TransmitterPdu')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TransmitterPdu </report>
      <report test="(lower-case(local-name()) = 'trianglefanset') and not(local-name() = 'TriangleFanSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TriangleFanSet </report>
      <report test="(lower-case(local-name()) = 'triangleset') and not(local-name() = 'TriangleSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TriangleSet </report>
      <report test="(lower-case(local-name()) = 'triangleset2d') and not(local-name() = 'TriangleSet2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TriangleSet2D </report>
      <report test="(lower-case(local-name()) = 'trianglestripset') and not(local-name() = 'TriangleStripSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TriangleStripSet </report>
      <report test="(lower-case(local-name()) = 'twosidedmaterial') and not(local-name() = 'TwoSidedMaterial')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TwoSidedMaterial </report>
      <report test="(lower-case(local-name()) = 'universaljoint') and not(local-name() = 'UniversalJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is UniversalJoint </report>
      <report test="(lower-case(local-name()) = 'unlitmaterial') and not(local-name() = 'UnlitMaterial')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is UnlitMaterial </report>
      <report test="(lower-case(local-name()) = 'viewpoint') and not(local-name() = 'Viewpoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Viewpoint </report>
      <report test="(lower-case(local-name()) = 'viewpointgroup') and not(local-name() = 'ViewpointGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ViewpointGroup </report>
      <report test="(lower-case(local-name()) = 'viewport') and not(local-name() = 'Viewport')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Viewport </report>
      <report test="(lower-case(local-name()) = 'visibilitysensor') and not(local-name() = 'VisibilitySensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is VisibilitySensor </report>
      <report test="(lower-case(local-name()) = 'volumedata') and not(local-name() = 'VolumeData')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is VolumeData </report>
      <report test="(lower-case(local-name()) = 'volumeemitter') and not(local-name() = 'VolumeEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is VolumeEmitter </report>
      <report test="(lower-case(local-name()) = 'volumepicksensor') and not(local-name() = 'VolumePickSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is VolumePickSensor </report>
      <report test="(lower-case(local-name()) = 'waveshaper') and not(local-name() = 'WaveShaper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is WaveShaper </report>
      <report test="(lower-case(local-name()) = 'windphysicsmodel') and not(local-name() = 'WindPhysicsModel')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is WindPhysicsModel </report>
      <report test="(lower-case(local-name()) = 'worldinfo') and not(local-name() = 'WorldInfo')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is WorldInfo </report>      <!-- *** finish: NodeName capitalization checks generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: fieldName capitalization checks generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="@*[(lower-case(local-name()) = 'autocalc') and not(local-name() = 'autoCalc')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoCalc </report>
      <report test="@*[(lower-case(local-name()) = 'bboxcenter') and not(local-name() = 'bboxCenter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bboxCenter </report>
      <report test="@*[(lower-case(local-name()) = 'bboxsize') and not(local-name() = 'bboxSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bboxSize </report>
      <report test="@*[(lower-case(local-name()) = 'begincap') and not(local-name() = 'beginCap')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is beginCap </report>
      <report test="@*[(lower-case(local-name()) = 'bottomradius') and not(local-name() = 'bottomRadius')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bottomRadius </report>
      <report test="@*[(lower-case(local-name()) = 'category') and not(local-name() = 'category')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is category </report>
      <report test="@*[(lower-case(local-name()) = 'ccw') and not(local-name() = 'ccw')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is ccw </report>
      <report test="@*[(lower-case(local-name()) = 'child1url') and not(local-name() = 'child1Url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is child1Url </report>
      <report test="@*[(lower-case(local-name()) = 'child2url') and not(local-name() = 'child2Url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is child2Url </report>
      <report test="@*[(lower-case(local-name()) = 'child3url') and not(local-name() = 'child3Url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is child3Url </report>
      <report test="@*[(lower-case(local-name()) = 'child4url') and not(local-name() = 'child4Url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is child4Url </report>
      <report test="@*[(lower-case(local-name()) = 'closed') and not(local-name() = 'closed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is closed </report>
      <report test="@*[(lower-case(local-name()) = 'closuretype') and not(local-name() = 'closureType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is closureType </report>
      <report test="@*[(lower-case(local-name()) = 'colorkey') and not(local-name() = 'colorKey')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is colorKey </report>
      <report test="@*[(lower-case(local-name()) = 'colorindex') and not(local-name() = 'colorIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is colorIndex </report>
      <report test="@*[(lower-case(local-name()) = 'colorpervertex') and not(local-name() = 'colorPerVertex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is colorPerVertex </report>
      <report test="@*[(lower-case(local-name()) = 'convex') and not(local-name() = 'convex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is convex </report>
      <report test="@*[(lower-case(local-name()) = 'coordindex') and not(local-name() = 'coordIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is coordIndex </report>
      <report test="@*[(lower-case(local-name()) = 'country') and not(local-name() = 'country')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is country </report>
      <report test="@*[(lower-case(local-name()) = 'creaseangle') and not(local-name() = 'creaseAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is creaseAngle </report>
      <report test="@*[(lower-case(local-name()) = 'crosssection') and not(local-name() = 'crossSection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is crossSection </report>
      <report test="@*[(lower-case(local-name()) = 'directoutput') and not(local-name() = 'directOutput')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is directOutput </report>
      <report test="@*[(lower-case(local-name()) = 'domain') and not(local-name() = 'domain')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is domain </report>
      <report test="@*[(lower-case(local-name()) = 'duration') and not(local-name() = 'duration')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is duration </report>
      <report test="@*[(lower-case(local-name()) = 'endcap') and not(local-name() = 'endCap')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is endCap </report>
      <report test="@*[(lower-case(local-name()) = 'endangle') and not(local-name() = 'endAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is endAngle </report>
      <report test="@*[(lower-case(local-name()) = 'extra') and not(local-name() = 'extra')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is extra </report>
      <report test="@*[(lower-case(local-name()) = 'forcetransitions') and not(local-name() = 'forceTransitions')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is forceTransitions </report>
      <report test="@*[(lower-case(local-name()) = 'generatemipmaps') and not(local-name() = 'generateMipMaps')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is generateMipMaps </report>
      <report test="@*[(lower-case(local-name()) = 'geogridorigin') and not(local-name() = 'geoGridOrigin')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geoGridOrigin </report>
      <report test="@*[(lower-case(local-name()) = 'geometrytype') and not(local-name() = 'geometryType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geometryType </report>
      <report test="@*[(lower-case(local-name()) = 'geosystem') and not(local-name() = 'geoSystem')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geoSystem </report>
      <report test="@*[(lower-case(local-name()) = 'height') and not(local-name() = 'height')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is height </report>
      <report test="@*[(lower-case(local-name()) = 'index') and not(local-name() = 'index')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is index </report>
      <report test="@*[(lower-case(local-name()) = 'initialdestination') and not(local-name() = 'initialDestination')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is initialDestination </report>
      <report test="@*[(lower-case(local-name()) = 'initialvalue') and not(local-name() = 'initialValue')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is initialValue </report>
      <report test="@*[(lower-case(local-name()) = 'innerradius') and not(local-name() = 'innerRadius')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is innerRadius </report>
      <report test="@*[(lower-case(local-name()) = 'internal') and not(local-name() = 'internal')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is internal </report>
      <report test="@*[(lower-case(local-name()) = 'intersectiontype') and not(local-name() = 'intersectionType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is intersectionType </report>
      <report test="@*[(lower-case(local-name()) = 'kind') and not(local-name() = 'kind')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is kind </report>
      <report test="@*[(lower-case(local-name()) = 'knot') and not(local-name() = 'knot')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is knot </report>
      <report test="@*[(lower-case(local-name()) = 'language') and not(local-name() = 'language')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is language </report>
      <report test="@*[(lower-case(local-name()) = 'linesegments') and not(local-name() = 'lineSegments')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is lineSegments </report>
      <report test="@*[(lower-case(local-name()) = 'mustevaluate') and not(local-name() = 'mustEvaluate')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is mustEvaluate </report>
      <report test="@*[(lower-case(local-name()) = 'normalindex') and not(local-name() = 'normalIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is normalIndex </report>
      <report test="@*[(lower-case(local-name()) = 'normalpervertex') and not(local-name() = 'normalPerVertex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is normalPerVertex </report>
      <report test="@*[(lower-case(local-name()) = 'numcomponents') and not(local-name() = 'numComponents')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is numComponents </report>
      <report test="@*[(lower-case(local-name()) = 'order') and not(local-name() = 'order')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is order </report>
      <report test="@*[(lower-case(local-name()) = 'outerradius') and not(local-name() = 'outerRadius')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is outerRadius </report>
      <report test="@*[(lower-case(local-name()) = 'phasefunction') and not(local-name() = 'phaseFunction')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is phaseFunction </report>
      <report test="@*[(lower-case(local-name()) = 'radius') and not(local-name() = 'radius')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radius </report>
      <report test="@*[(lower-case(local-name()) = 'range') and not(local-name() = 'range')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is range </report>
      <report test="@*[(lower-case(local-name()) = 'repeatr') and not(local-name() = 'repeatR')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is repeatR </report>
      <report test="@*[(lower-case(local-name()) = 'repeats') and not(local-name() = 'repeatS')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is repeatS </report>
      <report test="@*[(lower-case(local-name()) = 'repeatt') and not(local-name() = 'repeatT')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is repeatT </report>
      <report test="@*[(lower-case(local-name()) = 'rooturl') and not(local-name() = 'rootUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rootUrl </report>
      <report test="@*[(lower-case(local-name()) = 'rotateyup') and not(local-name() = 'rotateYUp')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rotateYUp </report>
      <report test="@*[(lower-case(local-name()) = 'size') and not(local-name() = 'size')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is size </report>
      <report test="@*[(lower-case(local-name()) = 'sortorder') and not(local-name() = 'sortOrder')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is sortOrder </report>
      <report test="@*[(lower-case(local-name()) = 'spatialize') and not(local-name() = 'spatialize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is spatialize </report>
      <report test="@*[(lower-case(local-name()) = 'specific') and not(local-name() = 'specific')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is specific </report>
      <report test="@*[(lower-case(local-name()) = 'speedfactor') and not(local-name() = 'speedFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is speedFactor </report>
      <report test="@*[(lower-case(local-name()) = 'spine') and not(local-name() = 'spine')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is spine </report>
      <report test="@*[(lower-case(local-name()) = 'startangle') and not(local-name() = 'startAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is startAngle </report>
      <report test="@*[(lower-case(local-name()) = 'subcategory') and not(local-name() = 'subcategory')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is subcategory </report>
      <report test="@*[(lower-case(local-name()) = 'texcoordindex') and not(local-name() = 'texCoordIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is texCoordIndex </report>
      <report test="@*[(lower-case(local-name()) = 'texcoordkey') and not(local-name() = 'texCoordKey')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is texCoordKey </report>
      <report test="@*[(lower-case(local-name()) = 'uclosed') and not(local-name() = 'uClosed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uClosed </report>
      <report test="@*[(lower-case(local-name()) = 'udimension') and not(local-name() = 'uDimension')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uDimension </report>
      <report test="@*[(lower-case(local-name()) = 'uknot') and not(local-name() = 'uKnot')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uKnot </report>
      <report test="@*[(lower-case(local-name()) = 'uorder') and not(local-name() = 'uOrder')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uOrder </report>
      <report test="@*[(lower-case(local-name()) = 'vclosed') and not(local-name() = 'vClosed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vClosed </report>
      <report test="@*[(lower-case(local-name()) = 'vdimension') and not(local-name() = 'vDimension')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vDimension </report>
      <report test="@*[(lower-case(local-name()) = 'vknot') and not(local-name() = 'vKnot')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vKnot </report>
      <report test="@*[(lower-case(local-name()) = 'vorder') and not(local-name() = 'vOrder')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vOrder </report>
      <report test="@*[(lower-case(local-name()) = 'xdimension') and not(local-name() = 'xDimension')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is xDimension </report>
      <report test="@*[(lower-case(local-name()) = 'xspacing') and not(local-name() = 'xSpacing')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is xSpacing </report>
      <report test="@*[(lower-case(local-name()) = 'zdimension') and not(local-name() = 'zDimension')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is zDimension </report>
      <report test="@*[(lower-case(local-name()) = 'zspacing') and not(local-name() = 'zSpacing')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is zSpacing </report>
      <report test="@*[(lower-case(local-name()) = 'absorption') and not(local-name() = 'absorption')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is absorption </report>
      <report test="@*[(lower-case(local-name()) = 'activelayer') and not(local-name() = 'activeLayer')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is activeLayer </report>
      <report test="@*[(lower-case(local-name()) = 'address') and not(local-name() = 'address')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is address </report>
      <report test="@*[(lower-case(local-name()) = 'align') and not(local-name() = 'align')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is align </report>
      <report test="@*[(lower-case(local-name()) = 'alpha') and not(local-name() = 'alpha')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is alpha </report>
      <report test="@*[(lower-case(local-name()) = 'alphacutoff') and not(local-name() = 'alphaCutoff')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is alphaCutoff </report>
      <report test="@*[(lower-case(local-name()) = 'alphamode') and not(local-name() = 'alphaMode')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is alphaMode </report>
      <report test="@*[(lower-case(local-name()) = 'ambientintensity') and not(local-name() = 'ambientIntensity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is ambientIntensity </report>
      <report test="@*[(lower-case(local-name()) = 'ambienttexturemapping') and not(local-name() = 'ambientTextureMapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is ambientTextureMapping </report>
      <report test="@*[(lower-case(local-name()) = 'anchorpoint') and not(local-name() = 'anchorPoint')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is anchorPoint </report>
      <report test="@*[(lower-case(local-name()) = 'angle') and not(local-name() = 'angle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is angle </report>
      <report test="@*[(lower-case(local-name()) = 'angulardampingfactor') and not(local-name() = 'angularDampingFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is angularDampingFactor </report>
      <report test="@*[(lower-case(local-name()) = 'angularvelocity') and not(local-name() = 'angularVelocity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is angularVelocity </report>
      <report test="@*[(lower-case(local-name()) = 'anisotropicdegree') and not(local-name() = 'anisotropicDegree')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is anisotropicDegree </report>
      <report test="@*[(lower-case(local-name()) = 'antennalocation') and not(local-name() = 'antennaLocation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is antennaLocation </report>
      <report test="@*[(lower-case(local-name()) = 'applicationid') and not(local-name() = 'applicationID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is applicationID </report>
      <report test="@*[(lower-case(local-name()) = 'applied') and not(local-name() = 'applied')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is applied </report>
      <report test="@*[(lower-case(local-name()) = 'appliedparameters') and not(local-name() = 'appliedParameters')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is appliedParameters </report>
      <report test="@*[(lower-case(local-name()) = 'antennapatterntype') and not(local-name() = 'antennaPatternType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is antennaPatternType </report>
      <report test="@*[(lower-case(local-name()) = 'antennapatternlength') and not(local-name() = 'antennaPatternLength')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is antennaPatternLength </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparameterarray') and not(local-name() = 'articulationParameterArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterArray </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparameterchangeindicatorarray') and not(local-name() = 'articulationParameterChangeIndicatorArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterChangeIndicatorArray </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparametercount') and not(local-name() = 'articulationParameterCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterCount </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparameterdesignatorarray') and not(local-name() = 'articulationParameterDesignatorArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterDesignatorArray </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparameteridpartattachedtoarray') and not(local-name() = 'articulationParameterIdPartAttachedToArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterIdPartAttachedToArray </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparametertypearray') and not(local-name() = 'articulationParameterTypeArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterTypeArray </report>
      <report test="@*[(lower-case(local-name()) = 'attack') and not(local-name() = 'attack')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is attack </report>
      <report test="@*[(lower-case(local-name()) = 'attenuation') and not(local-name() = 'attenuation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is attenuation </report>
      <report test="@*[(lower-case(local-name()) = 'autodamp') and not(local-name() = 'autoDamp')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoDamp </report>
      <report test="@*[(lower-case(local-name()) = 'autodisable') and not(local-name() = 'autoDisable')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoDisable </report>
      <report test="@*[(lower-case(local-name()) = 'autooffset') and not(local-name() = 'autoOffset')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoOffset </report>
      <report test="@*[(lower-case(local-name()) = 'autorefresh') and not(local-name() = 'autoRefresh')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoRefresh </report>
      <report test="@*[(lower-case(local-name()) = 'autorefreshtimelimit') and not(local-name() = 'autoRefreshTimeLimit')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoRefreshTimeLimit </report>
      <report test="@*[(lower-case(local-name()) = 'avatarsize') and not(local-name() = 'avatarSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is avatarSize </report>
      <report test="@*[(lower-case(local-name()) = 'axis') and not(local-name() = 'axis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis </report>
      <report test="@*[(lower-case(local-name()) = 'axis1') and not(local-name() = 'axis1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis1 </report>
      <report test="@*[(lower-case(local-name()) = 'axis1angle') and not(local-name() = 'axis1Angle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis1Angle </report>
      <report test="@*[(lower-case(local-name()) = 'axis1torque') and not(local-name() = 'axis1Torque')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis1Torque </report>
      <report test="@*[(lower-case(local-name()) = 'axis2') and not(local-name() = 'axis2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis2 </report>
      <report test="@*[(lower-case(local-name()) = 'axis2angle') and not(local-name() = 'axis2Angle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis2Angle </report>
      <report test="@*[(lower-case(local-name()) = 'axis2torque') and not(local-name() = 'axis2Torque')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis2Torque </report>
      <report test="@*[(lower-case(local-name()) = 'axis3angle') and not(local-name() = 'axis3Angle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis3Angle </report>
      <report test="@*[(lower-case(local-name()) = 'axis3torque') and not(local-name() = 'axis3Torque')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis3Torque </report>
      <report test="@*[(lower-case(local-name()) = 'axisofrotation') and not(local-name() = 'axisOfRotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axisOfRotation </report>
      <report test="@*[(lower-case(local-name()) = 'axisrotation') and not(local-name() = 'axisRotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axisRotation </report>
      <report test="@*[(lower-case(local-name()) = 'backambientintensity') and not(local-name() = 'backAmbientIntensity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backAmbientIntensity </report>
      <report test="@*[(lower-case(local-name()) = 'backdiffusecolor') and not(local-name() = 'backDiffuseColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backDiffuseColor </report>
      <report test="@*[(lower-case(local-name()) = 'backemissivecolor') and not(local-name() = 'backEmissiveColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backEmissiveColor </report>
      <report test="@*[(lower-case(local-name()) = 'backshininess') and not(local-name() = 'backShininess')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backShininess </report>
      <report test="@*[(lower-case(local-name()) = 'backspecularcolor') and not(local-name() = 'backSpecularColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backSpecularColor </report>
      <report test="@*[(lower-case(local-name()) = 'backtexture') and not(local-name() = 'backTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backTexture </report>
      <report test="@*[(lower-case(local-name()) = 'backtransparency') and not(local-name() = 'backTransparency')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backTransparency </report>
      <report test="@*[(lower-case(local-name()) = 'backurl') and not(local-name() = 'backUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backUrl </report>
      <report test="@*[(lower-case(local-name()) = 'basecolor') and not(local-name() = 'baseColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is baseColor </report>
      <report test="@*[(lower-case(local-name()) = 'basetexturemapping') and not(local-name() = 'baseTextureMapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is baseTextureMapping </report>
      <report test="@*[(lower-case(local-name()) = 'beamwidth') and not(local-name() = 'beamWidth')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is beamWidth </report>
      <report test="@*[(lower-case(local-name()) = 'bottom') and not(local-name() = 'bottom')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bottom </report>
      <report test="@*[(lower-case(local-name()) = 'bottomtexture') and not(local-name() = 'bottomTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bottomTexture </report>
      <report test="@*[(lower-case(local-name()) = 'bottomurl') and not(local-name() = 'bottomUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bottomUrl </report>
      <report test="@*[(lower-case(local-name()) = 'bounce') and not(local-name() = 'bounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bounce </report>
      <report test="@*[(lower-case(local-name()) = 'boundaryopacity') and not(local-name() = 'boundaryOpacity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is boundaryOpacity </report>
      <report test="@*[(lower-case(local-name()) = 'bordercolor') and not(local-name() = 'borderColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is borderColor </report>
      <report test="@*[(lower-case(local-name()) = 'borderwidth') and not(local-name() = 'borderWidth')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is borderWidth </report>
      <report test="@*[(lower-case(local-name()) = 'boundarymodes') and not(local-name() = 'boundaryModeS')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is boundaryModeS </report>
      <report test="@*[(lower-case(local-name()) = 'boundarymodet') and not(local-name() = 'boundaryModeT')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is boundaryModeT </report>
      <report test="@*[(lower-case(local-name()) = 'boundarymoder') and not(local-name() = 'boundaryModeR')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is boundaryModeR </report>
      <report test="@*[(lower-case(local-name()) = 'buffer') and not(local-name() = 'buffer')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is buffer </report>
      <report test="@*[(lower-case(local-name()) = 'bufferduration') and not(local-name() = 'bufferDuration')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bufferDuration </report>
      <report test="@*[(lower-case(local-name()) = 'center') and not(local-name() = 'center')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is center </report>
      <report test="@*[(lower-case(local-name()) = 'castshadow') and not(local-name() = 'castShadow')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is castShadow </report>
      <report test="@*[(lower-case(local-name()) = 'centerofmass') and not(local-name() = 'centerOfMass')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is centerOfMass </report>
      <report test="@*[(lower-case(local-name()) = 'centerofrotation') and not(local-name() = 'centerOfRotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is centerOfRotation </report>
      <report test="@*[(lower-case(local-name()) = 'class') and not(local-name() = 'class')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is class </report>
      <report test="@*[(lower-case(local-name()) = 'clipboundary') and not(local-name() = 'clipBoundary')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is clipBoundary </report>
      <report test="@*[(lower-case(local-name()) = 'channels') and not(local-name() = 'channels')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is channels </report>
      <report test="@*[(lower-case(local-name()) = 'channelcountmode') and not(local-name() = 'channelCountMode')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is channelCountMode </report>
      <report test="@*[(lower-case(local-name()) = 'channelinterpretation') and not(local-name() = 'channelInterpretation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is channelInterpretation </report>
      <report test="@*[(lower-case(local-name()) = 'channelselection') and not(local-name() = 'channelSelection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is channelSelection </report>
      <report test="@*[(lower-case(local-name()) = 'channelsenabled') and not(local-name() = 'channelsEnabled')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is channelsEnabled </report>
      <report test="@*[(lower-case(local-name()) = 'gain') and not(local-name() = 'gain')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is gain </report>
      <report test="@*[(lower-case(local-name()) = 'collisiontype') and not(local-name() = 'collisionType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is collisionType </report>
      <report test="@*[(lower-case(local-name()) = 'color') and not(local-name() = 'color')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is color </report>
      <report test="@*[(lower-case(local-name()) = 'colorsteps') and not(local-name() = 'colorSteps')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is colorSteps </report>
      <report test="@*[(lower-case(local-name()) = 'coneinnerangle') and not(local-name() = 'coneInnerAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is coneInnerAngle </report>
      <report test="@*[(lower-case(local-name()) = 'coneouterangle') and not(local-name() = 'coneOuterAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is coneOuterAngle </report>
      <report test="@*[(lower-case(local-name()) = 'coneoutergain') and not(local-name() = 'coneOuterGain')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is coneOuterGain </report>
      <report test="@*[(lower-case(local-name()) = 'contactnormal') and not(local-name() = 'contactNormal')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is contactNormal </report>
      <report test="@*[(lower-case(local-name()) = 'contourstepsize') and not(local-name() = 'contourStepSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is contourStepSize </report>
      <report test="@*[(lower-case(local-name()) = 'controlpoint') and not(local-name() = 'controlPoint')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is controlPoint </report>
      <report test="@*[(lower-case(local-name()) = 'constantforcemix') and not(local-name() = 'constantForceMix')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is constantForceMix </report>
      <report test="@*[(lower-case(local-name()) = 'contactsurfacethickness') and not(local-name() = 'contactSurfaceThickness')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is contactSurfaceThickness </report>
      <report test="@*[(lower-case(local-name()) = 'coolcolor') and not(local-name() = 'coolColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is coolColor </report>
      <report test="@*[(lower-case(local-name()) = 'createparticles') and not(local-name() = 'createParticles')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is createParticles </report>
      <report test="@*[(lower-case(local-name()) = 'cryptosystem') and not(local-name() = 'cryptoSystem')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is cryptoSystem </report>
      <report test="@*[(lower-case(local-name()) = 'cryptokeyid') and not(local-name() = 'cryptoKeyID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is cryptoKeyID </report>
      <report test="@*[(lower-case(local-name()) = 'cutoffangle') and not(local-name() = 'cutOffAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is cutOffAngle </report>
      <report test="@*[(lower-case(local-name()) = 'cycleinterval') and not(local-name() = 'cycleInterval')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is cycleInterval </report>
      <report test="@*[(lower-case(local-name()) = 'data') and not(local-name() = 'data')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is data </report>
      <report test="@*[(lower-case(local-name()) = 'datalength') and not(local-name() = 'dataLength')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is dataLength </report>
      <report test="@*[(lower-case(local-name()) = 'deadreckoning') and not(local-name() = 'deadReckoning')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is deadReckoning </report>
      <report test="@*[(lower-case(local-name()) = 'delaytime') and not(local-name() = 'delayTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is delayTime </report>
      <report test="@*[(lower-case(local-name()) = 'deletionallowed') and not(local-name() = 'deletionAllowed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is deletionAllowed </report>
      <report test="@*[(lower-case(local-name()) = 'depth') and not(local-name() = 'depth')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is depth </report>
      <report test="@*[(lower-case(local-name()) = 'description') and not(local-name() = 'description')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is description </report>
      <report test="@*[(lower-case(local-name()) = 'desiredangularvelocity1') and not(local-name() = 'desiredAngularVelocity1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is desiredAngularVelocity1 </report>
      <report test="@*[(lower-case(local-name()) = 'desiredangularvelocity2') and not(local-name() = 'desiredAngularVelocity2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is desiredAngularVelocity2 </report>
      <report test="@*[(lower-case(local-name()) = 'detonationlocation') and not(local-name() = 'detonationLocation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is detonationLocation </report>
      <report test="@*[(lower-case(local-name()) = 'detonationrelativelocation') and not(local-name() = 'detonationRelativeLocation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is detonationRelativeLocation </report>
      <report test="@*[(lower-case(local-name()) = 'detonationresult') and not(local-name() = 'detonationResult')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is detonationResult </report>
      <report test="@*[(lower-case(local-name()) = 'detune') and not(local-name() = 'detune')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is detune </report>
      <report test="@*[(lower-case(local-name()) = 'diffuse') and not(local-name() = 'diffuse')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is diffuse </report>
      <report test="@*[(lower-case(local-name()) = 'diffusecoefficients') and not(local-name() = 'diffuseCoefficients')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is diffuseCoefficients </report>
      <report test="@*[(lower-case(local-name()) = 'diffusecolor') and not(local-name() = 'diffuseColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is diffuseColor </report>
      <report test="@*[(lower-case(local-name()) = 'diffusetexturemapping') and not(local-name() = 'diffuseTextureMapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is diffuseTextureMapping </report>
      <report test="@*[(lower-case(local-name()) = 'dimensions') and not(local-name() = 'dimensions')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is dimensions </report>
      <report test="@*[(lower-case(local-name()) = 'direction') and not(local-name() = 'direction')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is direction </report>
      <report test="@*[(lower-case(local-name()) = 'disableangularspeed') and not(local-name() = 'disableAngularSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is disableAngularSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'disablelinearspeed') and not(local-name() = 'disableLinearSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is disableLinearSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'disabletime') and not(local-name() = 'disableTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is disableTime </report>
      <report test="@*[(lower-case(local-name()) = 'diskangle') and not(local-name() = 'diskAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is diskAngle </report>
      <report test="@*[(lower-case(local-name()) = 'displacements') and not(local-name() = 'displacements')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is displacements </report>
      <report test="@*[(lower-case(local-name()) = 'bboxdisplay') and not(local-name() = 'bboxDisplay')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bboxDisplay </report>
      <report test="@*[(lower-case(local-name()) = 'detune') and not(local-name() = 'detune')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is detune </report>
      <report test="@*[(lower-case(local-name()) = 'displayed') and not(local-name() = 'displayed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is displayed </report>
      <report test="@*[(lower-case(local-name()) = 'distancemodel') and not(local-name() = 'distanceModel')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is distanceModel </report>
      <report test="@*[(lower-case(local-name()) = 'easeineaseout') and not(local-name() = 'easeInEaseOut')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is easeInEaseOut </report>
      <report test="@*[(lower-case(local-name()) = 'edgecolor') and not(local-name() = 'edgeColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is edgeColor </report>
      <report test="@*[(lower-case(local-name()) = 'emissivecolor') and not(local-name() = 'emissiveColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is emissiveColor </report>
      <report test="@*[(lower-case(local-name()) = 'emissivetexturemapping') and not(local-name() = 'emissiveTextureMapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is emissiveTextureMapping </report>
      <report test="@*[(lower-case(local-name()) = 'enabled') and not(local-name() = 'enabled')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is enabled </report>
      <report test="@*[(lower-case(local-name()) = 'enabledaxes') and not(local-name() = 'enabledAxes')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is enabledAxes </report>
      <report test="@*[(lower-case(local-name()) = 'dopplerenabled') and not(local-name() = 'dopplerEnabled')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is dopplerEnabled </report>
      <report test="@*[(lower-case(local-name()) = 'enablehrtf') and not(local-name() = 'enableHRTF')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is enableHRTF </report>
      <report test="@*[(lower-case(local-name()) = 'encodingscheme') and not(local-name() = 'encodingScheme')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is encodingScheme </report>
      <report test="@*[(lower-case(local-name()) = 'endframe') and not(local-name() = 'endFrame')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is endFrame </report>
      <report test="@*[(lower-case(local-name()) = 'entityid') and not(local-name() = 'entityID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityID </report>
      <report test="@*[(lower-case(local-name()) = 'entitykind') and not(local-name() = 'entityKind')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityKind </report>
      <report test="@*[(lower-case(local-name()) = 'entitydomain') and not(local-name() = 'entityDomain')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityDomain </report>
      <report test="@*[(lower-case(local-name()) = 'entitycountry') and not(local-name() = 'entityCountry')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityCountry </report>
      <report test="@*[(lower-case(local-name()) = 'entitycategory') and not(local-name() = 'entityCategory')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityCategory </report>
      <report test="@*[(lower-case(local-name()) = 'entitysubcategory') and not(local-name() = 'entitySubcategory')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entitySubcategory </report>
      <report test="@*[(lower-case(local-name()) = 'entityspecific') and not(local-name() = 'entitySpecific')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entitySpecific </report>
      <report test="@*[(lower-case(local-name()) = 'entityextra') and not(local-name() = 'entityExtra')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityExtra </report>
      <report test="@*[(lower-case(local-name()) = 'errorcorrection') and not(local-name() = 'errorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is errorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'eventapplicationid') and not(local-name() = 'eventApplicationID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is eventApplicationID </report>
      <report test="@*[(lower-case(local-name()) = 'evententityid') and not(local-name() = 'eventEntityID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is eventEntityID </report>
      <report test="@*[(lower-case(local-name()) = 'eventnumber') and not(local-name() = 'eventNumber')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is eventNumber </report>
      <report test="@*[(lower-case(local-name()) = 'eventsiteid') and not(local-name() = 'eventSiteID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is eventSiteID </report>
      <report test="@*[(lower-case(local-name()) = 'family') and not(local-name() = 'family')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is family </report>
      <report test="@*[(lower-case(local-name()) = 'fancount') and not(local-name() = 'fanCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fanCount </report>
      <report test="@*[(lower-case(local-name()) = 'fardistance') and not(local-name() = 'farDistance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is farDistance </report>
      <report test="@*[(lower-case(local-name()) = 'fftsize') and not(local-name() = 'fftSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fftSize </report>
      <report test="@*[(lower-case(local-name()) = 'fieldofview') and not(local-name() = 'fieldOfView')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fieldOfView </report>
      <report test="@*[(lower-case(local-name()) = 'filled') and not(local-name() = 'filled')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is filled </report>
      <report test="@*[(lower-case(local-name()) = 'finiterotationaxis') and not(local-name() = 'finiteRotationAxis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is finiteRotationAxis </report>
      <report test="@*[(lower-case(local-name()) = 'fired1') and not(local-name() = 'fired1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fired1 </report>
      <report test="@*[(lower-case(local-name()) = 'fired2') and not(local-name() = 'fired2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fired2 </report>
      <report test="@*[(lower-case(local-name()) = 'firemissionindex') and not(local-name() = 'fireMissionIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fireMissionIndex </report>
      <report test="@*[(lower-case(local-name()) = 'firingrange') and not(local-name() = 'firingRange')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is firingRange </report>
      <report test="@*[(lower-case(local-name()) = 'firingrate') and not(local-name() = 'firingRate')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is firingRate </report>
      <report test="@*[(lower-case(local-name()) = 'fixed') and not(local-name() = 'fixed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fixed </report>
      <report test="@*[(lower-case(local-name()) = 'fogtype') and not(local-name() = 'fogType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fogType </report>
      <report test="@*[(lower-case(local-name()) = 'force') and not(local-name() = 'force')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is force </report>
      <report test="@*[(lower-case(local-name()) = 'forceid') and not(local-name() = 'forceID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is forceID </report>
      <report test="@*[(lower-case(local-name()) = 'forceoutput') and not(local-name() = 'forceOutput')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is forceOutput </report>
      <report test="@*[(lower-case(local-name()) = 'forces') and not(local-name() = 'forces')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is forces </report>
      <report test="@*[(lower-case(local-name()) = 'framecount') and not(local-name() = 'frameCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frameCount </report>
      <report test="@*[(lower-case(local-name()) = 'frameduration') and not(local-name() = 'frameDuration')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frameDuration </report>
      <report test="@*[(lower-case(local-name()) = 'frameincrement') and not(local-name() = 'frameIncrement')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frameIncrement </report>
      <report test="@*[(lower-case(local-name()) = 'frameindex') and not(local-name() = 'frameIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frameIndex </report>
      <report test="@*[(lower-case(local-name()) = 'frequency') and not(local-name() = 'frequency')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frequency </report>
      <report test="@*[(lower-case(local-name()) = 'frequencybincount') and not(local-name() = 'frequencyBinCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frequencyBinCount </report>
      <report test="@*[(lower-case(local-name()) = 'frictioncoefficients') and not(local-name() = 'frictionCoefficients')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frictionCoefficients </report>
      <report test="@*[(lower-case(local-name()) = 'frictiondirection') and not(local-name() = 'frictionDirection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frictionDirection </report>
      <report test="@*[(lower-case(local-name()) = 'fronttexture') and not(local-name() = 'frontTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frontTexture </report>
      <report test="@*[(lower-case(local-name()) = 'fronturl') and not(local-name() = 'frontUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frontUrl </report>
      <report test="@*[(lower-case(local-name()) = 'function') and not(local-name() = 'function')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is function </report>
      <report test="@*[(lower-case(local-name()) = 'fuse') and not(local-name() = 'fuse')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fuse </report>
      <report test="@*[(lower-case(local-name()) = 'gain') and not(local-name() = 'gain')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is gain </report>
      <report test="@*[(lower-case(local-name()) = 'geocenter') and not(local-name() = 'geoCenter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geoCenter </report>
      <report test="@*[(lower-case(local-name()) = 'geocoords') and not(local-name() = 'geoCoords')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geoCoords </report>
      <report test="@*[(lower-case(local-name()) = 'global') and not(local-name() = 'global')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is global </report>
      <report test="@*[(lower-case(local-name()) = 'gradientthreshold') and not(local-name() = 'gradientThreshold')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is gradientThreshold </report>
      <report test="@*[(lower-case(local-name()) = 'gravity') and not(local-name() = 'gravity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is gravity </report>
      <report test="@*[(lower-case(local-name()) = 'groundangle') and not(local-name() = 'groundAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is groundAngle </report>
      <report test="@*[(lower-case(local-name()) = 'groundcolor') and not(local-name() = 'groundColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is groundColor </report>
      <report test="@*[(lower-case(local-name()) = 'gustiness') and not(local-name() = 'gustiness')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is gustiness </report>
      <report test="@*[(lower-case(local-name()) = 'hatchcolor') and not(local-name() = 'hatchColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is hatchColor </report>
      <report test="@*[(lower-case(local-name()) = 'hatched') and not(local-name() = 'hatched')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is hatched </report>
      <report test="@*[(lower-case(local-name()) = 'hatchstyle') and not(local-name() = 'hatchStyle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is hatchStyle </report>
      <report test="@*[(lower-case(local-name()) = 'headlight') and not(local-name() = 'headlight')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is headlight </report>
      <report test="@*[(lower-case(local-name()) = 'horizontal') and not(local-name() = 'horizontal')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is horizontal </report>
      <report test="@*[(lower-case(local-name()) = 'id') and not(local-name() = 'id')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is id </report>
      <report test="@*[(lower-case(local-name()) = 'image') and not(local-name() = 'image')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is image </report>
      <report test="@*[(lower-case(local-name()) = 'inertia') and not(local-name() = 'inertia')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is inertia </report>
      <report test="@*[(lower-case(local-name()) = 'info') and not(local-name() = 'info')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is info </report>
      <report test="@*[(lower-case(local-name()) = 'inputsource') and not(local-name() = 'inputSource')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is inputSource </report>
      <report test="@*[(lower-case(local-name()) = 'integerkey') and not(local-name() = 'integerKey')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is integerKey </report>
      <report test="@*[(lower-case(local-name()) = 'intensity') and not(local-name() = 'intensity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is intensity </report>
      <report test="@*[(lower-case(local-name()) = 'intensitythreshold') and not(local-name() = 'intensityThreshold')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is intensityThreshold </report>
      <report test="@*[(lower-case(local-name()) = 'interauraldistance') and not(local-name() = 'interauralDistance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is interauralDistance </report>
      <report test="@*[(lower-case(local-name()) = 'iterations') and not(local-name() = 'iterations')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is iterations </report>
      <report test="@*[(lower-case(local-name()) = 'jointbindingpositions') and not(local-name() = 'jointBindingPositions')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is jointBindingPositions </report>
      <report test="@*[(lower-case(local-name()) = 'jointbindingrotations') and not(local-name() = 'jointBindingRotations')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is jointBindingRotations </report>
      <report test="@*[(lower-case(local-name()) = 'jointbindingscales') and not(local-name() = 'jointBindingScales')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is jointBindingScales </report>
      <report test="@*[(lower-case(local-name()) = 'joints') and not(local-name() = 'joints')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is joints </report>
      <report test="@*[(lower-case(local-name()) = 'justify') and not(local-name() = 'justify')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is justify </report>
      <report test="@*[(lower-case(local-name()) = 'key') and not(local-name() = 'key')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is key </report>
      <report test="@*[(lower-case(local-name()) = 'knee') and not(local-name() = 'knee')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is knee </report>
      <report test="@*[(lower-case(local-name()) = 'keyvelocity') and not(local-name() = 'keyVelocity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is keyVelocity </report>
      <report test="@*[(lower-case(local-name()) = 'jump') and not(local-name() = 'jump')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is jump </report>
      <report test="@*[(lower-case(local-name()) = 'keyvalue') and not(local-name() = 'keyValue')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is keyValue </report>
      <report test="@*[(lower-case(local-name()) = 'language') and not(local-name() = 'language')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is language </report>
      <report test="@*[(lower-case(local-name()) = 'lefttexture') and not(local-name() = 'leftTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is leftTexture </report>
      <report test="@*[(lower-case(local-name()) = 'lefttoright') and not(local-name() = 'leftToRight')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is leftToRight </report>
      <report test="@*[(lower-case(local-name()) = 'lefturl') and not(local-name() = 'leftUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is leftUrl </report>
      <report test="@*[(lower-case(local-name()) = 'length') and not(local-name() = 'length')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is length </report>
      <report test="@*[(lower-case(local-name()) = 'lengthofmodulationparameters') and not(local-name() = 'lengthOfModulationParameters')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is lengthOfModulationParameters </report>
      <report test="@*[(lower-case(local-name()) = 'lifetimevariation') and not(local-name() = 'lifetimeVariation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is lifetimeVariation </report>
      <report test="@*[(lower-case(local-name()) = 'lighting') and not(local-name() = 'lighting')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is lighting </report>
      <report test="@*[(lower-case(local-name()) = 'limitorientation') and not(local-name() = 'limitOrientation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is limitOrientation </report>
      <report test="@*[(lower-case(local-name()) = 'linearacceleration') and not(local-name() = 'linearAcceleration')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linearAcceleration </report>
      <report test="@*[(lower-case(local-name()) = 'lineardampingfactor') and not(local-name() = 'linearDampingFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linearDampingFactor </report>
      <report test="@*[(lower-case(local-name()) = 'linearvelocity') and not(local-name() = 'linearVelocity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linearVelocity </report>
      <report test="@*[(lower-case(local-name()) = 'linetype') and not(local-name() = 'linetype')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linetype </report>
      <report test="@*[(lower-case(local-name()) = 'linewidthscalefactor') and not(local-name() = 'linewidthScaleFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linewidthScaleFactor </report>
      <report test="@*[(lower-case(local-name()) = 'llimit') and not(local-name() = 'llimit')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is llimit </report>
      <report test="@*[(lower-case(local-name()) = 'loa') and not(local-name() = 'loa')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is loa </report>
      <report test="@*[(lower-case(local-name()) = 'load') and not(local-name() = 'load')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is load </report>
      <report test="@*[(lower-case(local-name()) = 'location') and not(local-name() = 'location')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is location </report>
      <report test="@*[(lower-case(local-name()) = 'loop') and not(local-name() = 'loop')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is loop </report>
      <report test="@*[(lower-case(local-name()) = 'loopend') and not(local-name() = 'loopEnd')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is loopEnd </report>
      <report test="@*[(lower-case(local-name()) = 'loopstart') and not(local-name() = 'loopStart')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is loopStart </report>
      <report test="@*[(lower-case(local-name()) = 'mapping') and not(local-name() = 'mapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is mapping </report>
      <report test="@*[(lower-case(local-name()) = 'marking') and not(local-name() = 'marking')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is marking </report>
      <report test="@*[(lower-case(local-name()) = 'mass') and not(local-name() = 'mass')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is mass </report>
      <report test="@*[(lower-case(local-name()) = 'magnificationfilter') and not(local-name() = 'magnificationFilter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is magnificationFilter </report>
      <report test="@*[(lower-case(local-name()) = 'matchcriterion') and not(local-name() = 'matchCriterion')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is matchCriterion </report>
      <report test="@*[(lower-case(local-name()) = 'matrix') and not(local-name() = 'matrix')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is matrix </report>
      <report test="@*[(lower-case(local-name()) = 'maxangle') and not(local-name() = 'maxAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxAngle </report>
      <report test="@*[(lower-case(local-name()) = 'maxangle1') and not(local-name() = 'maxAngle1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxAngle1 </report>
      <report test="@*[(lower-case(local-name()) = 'maxback') and not(local-name() = 'maxBack')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxBack </report>
      <report test="@*[(lower-case(local-name()) = 'maxchannelcount') and not(local-name() = 'maxChannelCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxChannelCount </report>
      <report test="@*[(lower-case(local-name()) = 'maxcorrectionspeed') and not(local-name() = 'maxCorrectionSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxCorrectionSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'maxdecibels') and not(local-name() = 'maxDecibels')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxDecibels </report>
      <report test="@*[(lower-case(local-name()) = 'maxdelaytime') and not(local-name() = 'maxDelayTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxDelayTime </report>
      <report test="@*[(lower-case(local-name()) = 'maxdistance') and not(local-name() = 'maxDistance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxDistance </report>
      <report test="@*[(lower-case(local-name()) = 'maxextent') and not(local-name() = 'maxExtent')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxExtent </report>
      <report test="@*[(lower-case(local-name()) = 'maxfront') and not(local-name() = 'maxFront')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxFront </report>
      <report test="@*[(lower-case(local-name()) = 'maxparticles') and not(local-name() = 'maxParticles')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxParticles </report>
      <report test="@*[(lower-case(local-name()) = 'maxposition') and not(local-name() = 'maxPosition')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxPosition </report>
      <report test="@*[(lower-case(local-name()) = 'maxseparation') and not(local-name() = 'maxSeparation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxSeparation </report>
      <report test="@*[(lower-case(local-name()) = 'maxtorque1') and not(local-name() = 'maxTorque1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxTorque1 </report>
      <report test="@*[(lower-case(local-name()) = 'maxtorque2') and not(local-name() = 'maxTorque2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxTorque2 </report>
      <report test="@*[(lower-case(local-name()) = 'mediadeviceid') and not(local-name() = 'mediaDeviceID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is mediaDeviceID </report>
      <report test="@*[(lower-case(local-name()) = 'metallic') and not(local-name() = 'metallic')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is metallic </report>
      <report test="@*[(lower-case(local-name()) = 'metallicroughnesstexturemapping') and not(local-name() = 'metallicRoughnessTextureMapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is metallicRoughnessTextureMapping </report>
      <report test="@*[(lower-case(local-name()) = 'minangle') and not(local-name() = 'minAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minAngle </report>
      <report test="@*[(lower-case(local-name()) = 'minangle1') and not(local-name() = 'minAngle1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minAngle1 </report>
      <report test="@*[(lower-case(local-name()) = 'minback') and not(local-name() = 'minBack')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minBack </report>
      <report test="@*[(lower-case(local-name()) = 'minbouncespeed') and not(local-name() = 'minBounceSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minBounceSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'mindecibels') and not(local-name() = 'minDecibels')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minDecibels </report>
      <report test="@*[(lower-case(local-name()) = 'minfront') and not(local-name() = 'minFront')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minFront </report>
      <report test="@*[(lower-case(local-name()) = 'minificationfilter') and not(local-name() = 'minificationFilter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minificationFilter </report>
      <report test="@*[(lower-case(local-name()) = 'minposition') and not(local-name() = 'minPosition')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minPosition </report>
      <report test="@*[(lower-case(local-name()) = 'minseparation') and not(local-name() = 'minSeparation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minSeparation </report>
      <report test="@*[(lower-case(local-name()) = 'mode') and not(local-name() = 'mode')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is mode </report>
      <report test="@*[(lower-case(local-name()) = 'modulationtypespreadspectrum') and not(local-name() = 'modulationTypeSpreadSpectrum')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is modulationTypeSpreadSpectrum </report>
      <report test="@*[(lower-case(local-name()) = 'modulationtypemajor') and not(local-name() = 'modulationTypeMajor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is modulationTypeMajor </report>
      <report test="@*[(lower-case(local-name()) = 'modulationtypedetail') and not(local-name() = 'modulationTypeDetail')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is modulationTypeDetail </report>
      <report test="@*[(lower-case(local-name()) = 'modulationtypesystem') and not(local-name() = 'modulationTypeSystem')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is modulationTypeSystem </report>
      <report test="@*[(lower-case(local-name()) = 'momentsofinertia') and not(local-name() = 'momentsOfInertia')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is momentsOfInertia </report>
      <report test="@*[(lower-case(local-name()) = 'motor1axis') and not(local-name() = 'motor1Axis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is motor1Axis </report>
      <report test="@*[(lower-case(local-name()) = 'motor2axis') and not(local-name() = 'motor2Axis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is motor2Axis </report>
      <report test="@*[(lower-case(local-name()) = 'motor3axis') and not(local-name() = 'motor3Axis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is motor3Axis </report>
      <report test="@*[(lower-case(local-name()) = 'multicastrelayhost') and not(local-name() = 'multicastRelayHost')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is multicastRelayHost </report>
      <report test="@*[(lower-case(local-name()) = 'multicastrelayport') and not(local-name() = 'multicastRelayPort')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is multicastRelayPort </report>
      <report test="@*[(lower-case(local-name()) = 'munitionendpoint') and not(local-name() = 'munitionEndPoint')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionEndPoint </report>
      <report test="@*[(lower-case(local-name()) = 'munitionstartpoint') and not(local-name() = 'munitionStartPoint')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionStartPoint </report>
      <report test="@*[(lower-case(local-name()) = 'munitionapplicationid') and not(local-name() = 'munitionApplicationID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionApplicationID </report>
      <report test="@*[(lower-case(local-name()) = 'munitionentityid') and not(local-name() = 'munitionEntityID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionEntityID </report>
      <report test="@*[(lower-case(local-name()) = 'munitionsiteid') and not(local-name() = 'munitionSiteID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionSiteID </report>
      <report test="@*[(lower-case(local-name()) = 'munitionquantity') and not(local-name() = 'munitionQuantity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionQuantity </report>
      <report test="@*[(lower-case(local-name()) = 'name') and not(local-name() = 'name')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is name </report>
      <report test="@*[(lower-case(local-name()) = 'neardistance') and not(local-name() = 'nearDistance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is nearDistance </report>
      <report test="@*[(lower-case(local-name()) = 'networkmode') and not(local-name() = 'networkMode')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is networkMode </report>
      <report test="@*[(lower-case(local-name()) = 'normalscale') and not(local-name() = 'normalScale')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is normalScale </report>
      <report test="@*[(lower-case(local-name()) = 'normaltexturemapping') and not(local-name() = 'normalTextureMapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is normalTextureMapping </report>
      <report test="@*[(lower-case(local-name()) = 'numberofchannels') and not(local-name() = 'numberOfChannels')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is numberOfChannels </report>
      <report test="@*[(lower-case(local-name()) = 'normalize') and not(local-name() = 'normalize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is normalize </report>
      <report test="@*[(lower-case(local-name()) = 'normalizevelocity') and not(local-name() = 'normalizeVelocity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is normalizeVelocity </report>
      <report test="@*[(lower-case(local-name()) = 'objecttype') and not(local-name() = 'objectType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is objectType </report>
      <report test="@*[(lower-case(local-name()) = 'occlusionstrength') and not(local-name() = 'occlusionStrength')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is occlusionStrength </report>
      <report test="@*[(lower-case(local-name()) = 'occlusiontexturemapping') and not(local-name() = 'occlusionTextureMapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is occlusionTextureMapping </report>
      <report test="@*[(lower-case(local-name()) = 'offset') and not(local-name() = 'offset')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is offset </report>
      <report test="@*[(lower-case(local-name()) = 'offsetunits') and not(local-name() = 'offsetUnits')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is offsetUnits </report>
      <report test="@*[(lower-case(local-name()) = 'on') and not(local-name() = 'on')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is on </report>
      <report test="@*[(lower-case(local-name()) = 'opacityfactor') and not(local-name() = 'opacityFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is opacityFactor </report>
      <report test="@*[(lower-case(local-name()) = 'optionsimag') and not(local-name() = 'optionsImag')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is optionsImag </report>
      <report test="@*[(lower-case(local-name()) = 'optionsreal') and not(local-name() = 'optionsReal')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is optionsReal </report>
      <report test="@*[(lower-case(local-name()) = 'orientation') and not(local-name() = 'orientation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is orientation </report>
      <report test="@*[(lower-case(local-name()) = 'orthogonalcolor') and not(local-name() = 'orthogonalColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is orthogonalColor </report>
      <report test="@*[(lower-case(local-name()) = 'oversample') and not(local-name() = 'oversample')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is oversample </report>
      <report test="@*[(lower-case(local-name()) = 'parallelcolor') and not(local-name() = 'parallelColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is parallelColor </report>
      <report test="@*[(lower-case(local-name()) = 'parameter') and not(local-name() = 'parameter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is parameter </report>
      <report test="@*[(lower-case(local-name()) = 'particlelifetime') and not(local-name() = 'particleLifetime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is particleLifetime </report>
      <report test="@*[(lower-case(local-name()) = 'particlesize') and not(local-name() = 'particleSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is particleSize </report>
      <report test="@*[(lower-case(local-name()) = 'pausetime') and not(local-name() = 'pauseTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pauseTime </report>
      <report test="@*[(lower-case(local-name()) = 'pickable') and not(local-name() = 'pickable')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pickable </report>
      <report test="@*[(lower-case(local-name()) = 'pitch') and not(local-name() = 'pitch')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pitch </report>
      <report test="@*[(lower-case(local-name()) = 'plane') and not(local-name() = 'plane')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is plane </report>
      <report test="@*[(lower-case(local-name()) = 'playbackrate') and not(local-name() = 'playbackRate')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is playbackRate </report>
      <report test="@*[(lower-case(local-name()) = 'point') and not(local-name() = 'point')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is point </report>
      <report test="@*[(lower-case(local-name()) = 'pointsize') and not(local-name() = 'pointSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pointSize </report>
      <report test="@*[(lower-case(local-name()) = 'pointsizescalefactor') and not(local-name() = 'pointSizeScaleFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pointSizeScaleFactor </report>
      <report test="@*[(lower-case(local-name()) = 'pointsizeminvalue') and not(local-name() = 'pointSizeMinValue')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pointSizeMinValue </report>
      <report test="@*[(lower-case(local-name()) = 'pointsizemaxvalue') and not(local-name() = 'pointSizeMaxValue')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pointSizeMaxValue </report>
      <report test="@*[(lower-case(local-name()) = 'port') and not(local-name() = 'port')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is port </report>
      <report test="@*[(lower-case(local-name()) = 'position') and not(local-name() = 'position')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is position </report>
      <report test="@*[(lower-case(local-name()) = 'power') and not(local-name() = 'power')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is power </report>
      <report test="@*[(lower-case(local-name()) = 'preferaccuracy') and not(local-name() = 'preferAccuracy')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is preferAccuracy </report>
      <report test="@*[(lower-case(local-name()) = 'priority') and not(local-name() = 'priority')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is priority </report>
      <report test="@*[(lower-case(local-name()) = 'qualityfactor') and not(local-name() = 'qualityFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is qualityFactor </report>
      <report test="@*[(lower-case(local-name()) = 'radioid') and not(local-name() = 'radioID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioID </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypekind') and not(local-name() = 'radioEntityTypeKind')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeKind </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypedomain') and not(local-name() = 'radioEntityTypeDomain')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeDomain </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypecountry') and not(local-name() = 'radioEntityTypeCountry')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeCountry </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypecategory') and not(local-name() = 'radioEntityTypeCategory')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeCategory </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypenomenclature') and not(local-name() = 'radioEntityTypeNomenclature')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeNomenclature </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypenomenclatureversion') and not(local-name() = 'radioEntityTypeNomenclatureVersion')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeNomenclatureVersion </report>
      <report test="@*[(lower-case(local-name()) = 'ratio') and not(local-name() = 'ratio')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is ratio </report>
      <report test="@*[(lower-case(local-name()) = 'readinterval') and not(local-name() = 'readInterval')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is readInterval </report>
      <report test="@*[(lower-case(local-name()) = 'receivedpower') and not(local-name() = 'receivedPower')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is receivedPower </report>
      <report test="@*[(lower-case(local-name()) = 'receiverstate') and not(local-name() = 'receiverState')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is receiverState </report>
      <report test="@*[(lower-case(local-name()) = 'reference') and not(local-name() = 'reference')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is reference </report>
      <report test="@*[(lower-case(local-name()) = 'referencedistance') and not(local-name() = 'referenceDistance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is referenceDistance </report>
      <report test="@*[(lower-case(local-name()) = 'refraction') and not(local-name() = 'refraction')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is refraction </report>
      <report test="@*[(lower-case(local-name()) = 'refresh') and not(local-name() = 'refresh')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is refresh </report>
      <report test="@*[(lower-case(local-name()) = 'relativeantennalocation') and not(local-name() = 'relativeAntennaLocation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is relativeAntennaLocation </report>
      <report test="@*[(lower-case(local-name()) = 'release') and not(local-name() = 'release')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is release </report>
      <report test="@*[(lower-case(local-name()) = 'retainedopacity') and not(local-name() = 'retainedOpacity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is retainedOpacity </report>
      <report test="@*[(lower-case(local-name()) = 'retainuseroffsets') and not(local-name() = 'retainUserOffsets')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is retainUserOffsets </report>
      <report test="@*[(lower-case(local-name()) = 'resumetime') and not(local-name() = 'resumeTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is resumeTime </report>
      <report test="@*[(lower-case(local-name()) = 'righttexture') and not(local-name() = 'rightTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rightTexture </report>
      <report test="@*[(lower-case(local-name()) = 'righturl') and not(local-name() = 'rightUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rightUrl </report>
      <report test="@*[(lower-case(local-name()) = 'rollofffactor') and not(local-name() = 'rolloffFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rolloffFactor </report>
      <report test="@*[(lower-case(local-name()) = 'rotation') and not(local-name() = 'rotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rotation </report>
      <report test="@*[(lower-case(local-name()) = 'roughness') and not(local-name() = 'roughness')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is roughness </report>
      <report test="@*[(lower-case(local-name()) = 'rtpheaderexpected') and not(local-name() = 'rtpHeaderExpected')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rtpHeaderExpected </report>
      <report test="@*[(lower-case(local-name()) = 'samplerate') and not(local-name() = 'sampleRate')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is sampleRate </report>
      <report test="@*[(lower-case(local-name()) = 'samples') and not(local-name() = 'samples')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is samples </report>
      <report test="@*[(lower-case(local-name()) = 'scale') and not(local-name() = 'scale')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is scale </report>
      <report test="@*[(lower-case(local-name()) = 'scalemode') and not(local-name() = 'scaleMode')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is scaleMode </report>
      <report test="@*[(lower-case(local-name()) = 'scaleorientation') and not(local-name() = 'scaleOrientation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is scaleOrientation </report>
      <report test="@*[(lower-case(local-name()) = 'segmentenabled') and not(local-name() = 'segmentEnabled')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is segmentEnabled </report>
      <report test="@*[(lower-case(local-name()) = 'separatebackcolor') and not(local-name() = 'separateBackColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is separateBackColor </report>
      <report test="@*[(lower-case(local-name()) = 'shininess') and not(local-name() = 'shininess')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is shininess </report>
      <report test="@*[(lower-case(local-name()) = 'shadowintensity') and not(local-name() = 'shadowIntensity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is shadowIntensity </report>
      <report test="@*[(lower-case(local-name()) = 'shadows') and not(local-name() = 'shadows')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is shadows </report>
      <report test="@*[(lower-case(local-name()) = 'side') and not(local-name() = 'side')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is side </report>
      <report test="@*[(lower-case(local-name()) = 'shininesstexturemapping') and not(local-name() = 'shininessTextureMapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is shininessTextureMapping </report>
      <report test="@*[(lower-case(local-name()) = 'silhouetteboundaryopacity') and not(local-name() = 'silhouetteBoundaryOpacity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is silhouetteBoundaryOpacity </report>
      <report test="@*[(lower-case(local-name()) = 'silhouetteretainedopacity') and not(local-name() = 'silhouetteRetainedOpacity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is silhouetteRetainedOpacity </report>
      <report test="@*[(lower-case(local-name()) = 'silhouettesharpness') and not(local-name() = 'silhouetteSharpness')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is silhouetteSharpness </report>
      <report test="@*[(lower-case(local-name()) = 'siteid') and not(local-name() = 'siteID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is siteID </report>
      <report test="@*[(lower-case(local-name()) = 'size') and not(local-name() = 'size')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is size </report>
      <report test="@*[(lower-case(local-name()) = 'sizeunits') and not(local-name() = 'sizeUnits')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is sizeUnits </report>
      <report test="@*[(lower-case(local-name()) = 'skeletalconfiguration') and not(local-name() = 'skeletalConfiguration')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skeletalConfiguration </report>
      <report test="@*[(lower-case(local-name()) = 'skincoordindex') and not(local-name() = 'skinCoordIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skinCoordIndex </report>
      <report test="@*[(lower-case(local-name()) = 'skincoordweight') and not(local-name() = 'skinCoordWeight')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skinCoordWeight </report>
      <report test="@*[(lower-case(local-name()) = 'skycolor') and not(local-name() = 'skyColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skyColor </report>
      <report test="@*[(lower-case(local-name()) = 'skyangle') and not(local-name() = 'skyAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skyAngle </report>
      <report test="@*[(lower-case(local-name()) = 'sliderforce') and not(local-name() = 'sliderForce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is sliderForce </report>
      <report test="@*[(lower-case(local-name()) = 'slipcoefficients') and not(local-name() = 'slipCoefficients')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is slipCoefficients </report>
      <report test="@*[(lower-case(local-name()) = 'slipfactors') and not(local-name() = 'slipFactors')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is slipFactors </report>
      <report test="@*[(lower-case(local-name()) = 'smoothingtimeconstant') and not(local-name() = 'smoothingTimeConstant')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is smoothingTimeConstant </report>
      <report test="@*[(lower-case(local-name()) = 'softnessconstantforcemix') and not(local-name() = 'softnessConstantForceMix')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is softnessConstantForceMix </report>
      <report test="@*[(lower-case(local-name()) = 'softnesserrorcorrection') and not(local-name() = 'softnessErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is softnessErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'solid') and not(local-name() = 'solid')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is solid </report>
      <report test="@*[(lower-case(local-name()) = 'source') and not(local-name() = 'source')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is source </report>
      <report test="@*[(lower-case(local-name()) = 'spacing') and not(local-name() = 'spacing')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is spacing </report>
      <report test="@*[(lower-case(local-name()) = 'specular') and not(local-name() = 'specular')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is specular </report>
      <report test="@*[(lower-case(local-name()) = 'specularcolor') and not(local-name() = 'specularColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is specularColor </report>
      <report test="@*[(lower-case(local-name()) = 'speculartexturemapping') and not(local-name() = 'specularTextureMapping')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is specularTextureMapping </report>
      <report test="@*[(lower-case(local-name()) = 'speed') and not(local-name() = 'speed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is speed </report>
      <report test="@*[(lower-case(local-name()) = 'startframe') and not(local-name() = 'startFrame')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is startFrame </report>
      <report test="@*[(lower-case(local-name()) = 'starttime') and not(local-name() = 'startTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is startTime </report>
      <report test="@*[(lower-case(local-name()) = 'stiffness') and not(local-name() = 'stiffness')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stiffness </report>
      <report test="@*[(lower-case(local-name()) = 'stopbounce') and not(local-name() = 'stopBounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stopBounce </report>
      <report test="@*[(lower-case(local-name()) = 'stoperrorcorrection') and not(local-name() = 'stopErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stopErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'stop1constantforcemix') and not(local-name() = 'stop1ConstantForceMix')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop1ConstantForceMix </report>
      <report test="@*[(lower-case(local-name()) = 'stop1bounce') and not(local-name() = 'stop1Bounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop1Bounce </report>
      <report test="@*[(lower-case(local-name()) = 'stop2bounce') and not(local-name() = 'stop2Bounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop2Bounce </report>
      <report test="@*[(lower-case(local-name()) = 'stop3bounce') and not(local-name() = 'stop3Bounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop3Bounce </report>
      <report test="@*[(lower-case(local-name()) = 'stop1errorcorrection') and not(local-name() = 'stop1ErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop1ErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'stop2errorcorrection') and not(local-name() = 'stop2ErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop2ErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'stop3errorcorrection') and not(local-name() = 'stop3ErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop3ErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'stoptime') and not(local-name() = 'stopTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stopTime </report>
      <report test="@*[(lower-case(local-name()) = 'streamidentifier') and not(local-name() = 'streamIdentifier')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is streamIdentifier </report>
      <report test="@*[(lower-case(local-name()) = 'string') and not(local-name() = 'string')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is string </report>
      <report test="@*[(lower-case(local-name()) = 'stripcount') and not(local-name() = 'stripCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stripCount </report>
      <report test="@*[(lower-case(local-name()) = 'style') and not(local-name() = 'style')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is style </report>
      <report test="@*[(lower-case(local-name()) = 'summary') and not(local-name() = 'summary')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is summary </report>
      <report test="@*[(lower-case(local-name()) = 'surfacearea') and not(local-name() = 'surfaceArea')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is surfaceArea </report>
      <report test="@*[(lower-case(local-name()) = 'surfacespeed') and not(local-name() = 'surfaceSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is surfaceSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'surfacetolerance') and not(local-name() = 'surfaceTolerance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is surfaceTolerance </report>
      <report test="@*[(lower-case(local-name()) = 'surfacevalues') and not(local-name() = 'surfaceValues')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is surfaceValues </report>
      <report test="@*[(lower-case(local-name()) = 'suspensionerrorcorrection') and not(local-name() = 'suspensionErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is suspensionErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'suspensionforce') and not(local-name() = 'suspensionForce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is suspensionForce </report>
      <report test="@*[(lower-case(local-name()) = 'tailtime') and not(local-name() = 'tailTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tailTime </report>
      <report test="@*[(lower-case(local-name()) = 'tau') and not(local-name() = 'tau')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tau </report>
      <report test="@*[(lower-case(local-name()) = 'tdltype') and not(local-name() = 'tdlType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tdlType </report>
      <report test="@*[(lower-case(local-name()) = 'tessellation') and not(local-name() = 'tessellation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tessellation </report>
      <report test="@*[(lower-case(local-name()) = 'tessellationscale') and not(local-name() = 'tessellationScale')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tessellationScale </report>
      <report test="@*[(lower-case(local-name()) = 'texturecompression') and not(local-name() = 'textureCompression')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is textureCompression </report>
      <report test="@*[(lower-case(local-name()) = 'texturepriority') and not(local-name() = 'texturePriority')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is texturePriority </report>
      <report test="@*[(lower-case(local-name()) = 'threshold') and not(local-name() = 'threshold')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is threshold </report>
      <report test="@*[(lower-case(local-name()) = 'timeout') and not(local-name() = 'timeOut')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is timeOut </report>
      <report test="@*[(lower-case(local-name()) = 'title') and not(local-name() = 'title')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is title </report>
      <report test="@*[(lower-case(local-name()) = 'toggle') and not(local-name() = 'toggle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is toggle </report>
      <report test="@*[(lower-case(local-name()) = 'tolerance') and not(local-name() = 'tolerance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tolerance </report>
      <report test="@*[(lower-case(local-name()) = 'top') and not(local-name() = 'top')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is top </report>
      <report test="@*[(lower-case(local-name()) = 'toptexture') and not(local-name() = 'topTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is topTexture </report>
      <report test="@*[(lower-case(local-name()) = 'toptobottom') and not(local-name() = 'topToBottom')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is topToBottom </report>
      <report test="@*[(lower-case(local-name()) = 'topurl') and not(local-name() = 'topUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is topUrl </report>
      <report test="@*[(lower-case(local-name()) = 'torques') and not(local-name() = 'torques')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is torques </report>
      <report test="@*[(lower-case(local-name()) = 'trackcurrentview') and not(local-name() = 'trackCurrentView')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is trackCurrentView </report>
      <report test="@*[(lower-case(local-name()) = 'transitiontime') and not(local-name() = 'transitionTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transitionTime </report>
      <report test="@*[(lower-case(local-name()) = 'transitiontype') and not(local-name() = 'transitionType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transitionType </report>
      <report test="@*[(lower-case(local-name()) = 'translation') and not(local-name() = 'translation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is translation </report>
      <report test="@*[(lower-case(local-name()) = 'transmitfrequencybandwidth') and not(local-name() = 'transmitFrequencyBandwidth')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitFrequencyBandwidth </report>
      <report test="@*[(lower-case(local-name()) = 'transmitstate') and not(local-name() = 'transmitState')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitState </report>
      <report test="@*[(lower-case(local-name()) = 'transmitterapplicationid') and not(local-name() = 'transmitterApplicationID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitterApplicationID </report>
      <report test="@*[(lower-case(local-name()) = 'transmitterentityid') and not(local-name() = 'transmitterEntityID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitterEntityID </report>
      <report test="@*[(lower-case(local-name()) = 'transmitterradioid') and not(local-name() = 'transmitterRadioID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitterRadioID </report>
      <report test="@*[(lower-case(local-name()) = 'transmittersiteid') and not(local-name() = 'transmitterSiteID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitterSiteID </report>
      <report test="@*[(lower-case(local-name()) = 'transparency') and not(local-name() = 'transparency')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transparency </report>
      <report test="@*[(lower-case(local-name()) = 'turbulence') and not(local-name() = 'turbulence')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is turbulence </report>
      <report test="@*[(lower-case(local-name()) = 'type') and not(local-name() = 'type')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is type </report>
      <report test="@*[(lower-case(local-name()) = 'ulimit') and not(local-name() = 'ulimit')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is ulimit </report>
      <report test="@*[(lower-case(local-name()) = 'upvector') and not(local-name() = 'upVector')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is upVector </report>
      <report test="@*[(lower-case(local-name()) = 'update') and not(local-name() = 'update')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is update </report>
      <report test="@*[(lower-case(local-name()) = 'url') and not(local-name() = 'url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is url </report>
      <report test="@*[(lower-case(local-name()) = 'usefiniterotation') and not(local-name() = 'useFiniteRotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is useFiniteRotation </report>
      <report test="@*[(lower-case(local-name()) = 'usegeometry') and not(local-name() = 'useGeometry')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is useGeometry </report>
      <report test="@*[(lower-case(local-name()) = 'useglobalgravity') and not(local-name() = 'useGlobalGravity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is useGlobalGravity </report>
      <report test="@*[(lower-case(local-name()) = 'utessellation') and not(local-name() = 'uTessellation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uTessellation </report>
      <report test="@*[(lower-case(local-name()) = 'variation') and not(local-name() = 'variation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is variation </report>
      <report test="@*[(lower-case(local-name()) = 'value') and not(local-name() = 'value')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is value </report>
      <report test="@*[(lower-case(local-name()) = 'values') and not(local-name() = 'values')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is values </report>
      <report test="@*[(lower-case(local-name()) = 'version') and not(local-name() = 'version')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is version </report>
      <report test="@*[(lower-case(local-name()) = 'vector') and not(local-name() = 'vector')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vector </report>
      <report test="@*[(lower-case(local-name()) = 'vertexcount') and not(local-name() = 'vertexCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vertexCount </report>
      <report test="@*[(lower-case(local-name()) = 'vertices') and not(local-name() = 'vertices')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vertices </report>
      <report test="@*[(lower-case(local-name()) = 'viewall') and not(local-name() = 'viewAll')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is viewAll </report>
      <report test="@*[(lower-case(local-name()) = 'visibilitylimit') and not(local-name() = 'visibilityLimit')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is visibilityLimit </report>
      <report test="@*[(lower-case(local-name()) = 'visibilityrange') and not(local-name() = 'visibilityRange')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is visibilityRange </report>
      <report test="@*[(lower-case(local-name()) = 'visible') and not(local-name() = 'visible')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is visible </report>
      <report test="@*[(lower-case(local-name()) = 'vtessellation') and not(local-name() = 'vTessellation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vTessellation </report>
      <report test="@*[(lower-case(local-name()) = 'warhead') and not(local-name() = 'warhead')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is warhead </report>
      <report test="@*[(lower-case(local-name()) = 'warmcolor') and not(local-name() = 'warmColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is warmColor </report>
      <report test="@*[(lower-case(local-name()) = 'weight') and not(local-name() = 'weight')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weight </report>
      <report test="@*[(lower-case(local-name()) = 'weightconstant1') and not(local-name() = 'weightConstant1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weightConstant1 </report>
      <report test="@*[(lower-case(local-name()) = 'weightconstant2') and not(local-name() = 'weightConstant2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weightConstant2 </report>
      <report test="@*[(lower-case(local-name()) = 'weightfunction1') and not(local-name() = 'weightFunction1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weightFunction1 </report>
      <report test="@*[(lower-case(local-name()) = 'weightfunction2') and not(local-name() = 'weightFunction2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weightFunction2 </report>
      <report test="@*[(lower-case(local-name()) = 'whichchoice') and not(local-name() = 'whichChoice')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is whichChoice </report>
      <report test="@*[(lower-case(local-name()) = 'whichgeometry') and not(local-name() = 'whichGeometry')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is whichGeometry </report>
      <report test="@*[(lower-case(local-name()) = 'writeinterval') and not(local-name() = 'writeInterval')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is writeInterval </report>
      <report test="@*[(lower-case(local-name()) = 'yscale') and not(local-name() = 'yScale')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is yScale </report>      <!-- *** finish: fieldName capitalization checks generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimJoint name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or        (@name='humanoid_root') or (@name='sacroiliac') or (@name='l_hip') or (@name='l_knee') or         (@name='l_talocrural') or (@name='l_talocalcaneonavicular') or (@name='l_cuneonavicular_1') or (@name='l_tarsometatarsal_1') or (@name='l_metatarsophalangeal_1') or         (@name='l_tarsal_interphalangeal_1') or (@name='l_cuneonavicular_2') or (@name='l_tarsometatarsal_2') or (@name='l_metatarsophalangeal_2') or (@name='l_tarsal_proximal_interphalangeal_2') or         (@name='l_tarsal_distal_interphalangeal_2') or (@name='l_cuneonavicular_3') or (@name='l_tarsometatarsal_3') or (@name='l_metatarsophalangeal_3') or (@name='l_tarsal_proximal_interphalangeal_3') or         (@name='l_tarsal_distal_interphalangeal_3') or (@name='l_calcaneocuboid') or (@name='l_transversetarsal') or (@name='l_tarsometatarsal_4') or (@name='l_metatarsophalangeal_4') or         (@name='l_tarsal_proximal_interphalangeal_4') or (@name='l_tarsal_distal_interphalangeal_4') or (@name='l_tarsometatarsal_5') or (@name='l_metatarsophalangeal_5') or (@name='l_tarsal_proximal_interphalangeal_5') or         (@name='l_tarsal_distal_interphalangeal_5') or (@name='r_hip') or (@name='r_knee') or (@name='r_talocrural') or (@name='r_talocalcaneonavicular') or         (@name='r_cuneonavicular_1') or (@name='r_tarsometatarsal_1') or (@name='r_metatarsophalangeal_1') or (@name='r_tarsal_interphalangeal_1') or (@name='r_cuneonavicular_2') or         (@name='r_tarsometatarsal_2') or (@name='r_metatarsophalangeal_2') or (@name='r_tarsal_proximal_interphalangeal_2') or (@name='r_tarsal_distal_interphalangeal_2') or (@name='r_cuneonavicular_3') or         (@name='r_tarsometatarsal_3') or (@name='r_metatarsophalangeal_3') or (@name='r_tarsal_proximal_interphalangeal_3') or (@name='r_tarsal_distal_interphalangeal_3') or (@name='r_calcaneocuboid') or         (@name='r_transversetarsal') or (@name='r_tarsometatarsal_4') or (@name='r_metatarsophalangeal_4') or (@name='r_tarsal_proximal_interphalangeal_4') or (@name='r_tarsal_distal_interphalangeal_4') or         (@name='r_tarsometatarsal_5') or (@name='r_metatarsophalangeal_5') or (@name='r_tarsal_proximal_interphalangeal_5') or (@name='r_tarsal_distal_interphalangeal_5') or (@name='vl5') or         (@name='vl4') or (@name='vl3') or (@name='vl2') or (@name='vl1') or (@name='vt12') or         (@name='vt11') or (@name='vt10') or (@name='vt9') or (@name='vt8') or (@name='vt7') or         (@name='vt6') or (@name='vt5') or (@name='vt4') or (@name='vt3') or (@name='vt2') or         (@name='vt1') or (@name='vc7') or (@name='vc6') or (@name='vc5') or (@name='vc4') or         (@name='vc3') or (@name='vc2') or (@name='vc1') or (@name='skullbase') or (@name='l_eyelid_joint') or         (@name='r_eyelid_joint') or (@name='l_eyeball_joint') or (@name='r_eyeball_joint') or (@name='l_eyebrow_joint') or (@name='r_eyebrow_joint') or         (@name='temporomandibular') or (@name='l_sternoclavicular') or (@name='l_acromioclavicular') or (@name='l_shoulder') or (@name='l_elbow') or         (@name='l_radiocarpal') or (@name='l_midcarpal_1') or (@name='l_carpometacarpal_1') or (@name='l_metacarpophalangeal_1') or (@name='l_carpal_interphalangeal_1') or         (@name='l_midcarpal_2') or (@name='l_carpometacarpal_2') or (@name='l_metacarpophalangeal_2') or (@name='l_carpal_proximal_interphalangeal_2') or (@name='l_carpal_distal_interphalangeal_2') or         (@name='l_midcarpal_3') or (@name='l_carpometacarpal_3') or (@name='l_metacarpophalangeal_3') or (@name='l_carpal_proximal_interphalangeal_3') or (@name='l_carpal_distal_interphalangeal_3') or         (@name='l_midcarpal_4_5') or (@name='l_carpometacarpal_4') or (@name='l_metacarpophalangeal_4') or (@name='l_carpal_proximal_interphalangeal_4') or (@name='l_carpal_distal_interphalangeal_4') or         (@name='l_carpometacarpal_5') or (@name='l_metacarpophalangeal_5') or (@name='l_carpal_proximal_interphalangeal_5') or (@name='l_carpal_distal_interphalangeal_5') or (@name='r_sternoclavicular') or         (@name='r_acromioclavicular') or (@name='r_shoulder') or (@name='r_elbow') or (@name='r_radiocarpal') or (@name='r_midcarpal_1') or         (@name='r_carpometacarpal_1') or (@name='r_metacarpophalangeal_1') or (@name='r_carpal_interphalangeal_1') or (@name='r_midcarpal_2') or (@name='r_carpometacarpal_2') or         (@name='r_metacarpophalangeal_2') or (@name='r_carpal_proximal_interphalangeal_2') or (@name='r_carpal_distal_interphalangeal_2') or (@name='r_midcarpal_3') or (@name='r_carpometacarpal_3') or         (@name='r_metacarpophalangeal_3') or (@name='r_carpal_proximal_interphalangeal_3') or (@name='r_carpal_distal_interphalangeal_3') or (@name='r_midcarpal_4_5') or (@name='r_carpometacarpal_4') or         (@name='r_metacarpophalangeal_4') or (@name='r_carpal_proximal_interphalangeal_4') or (@name='r_carpal_distal_interphalangeal_4') or (@name='r_carpometacarpal_5') or (@name='r_metacarpophalangeal_5') or         (@name='r_carpal_proximal_interphalangeal_5') or (@name='r_carpal_distal_interphalangeal_5')"        role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is not a recognized name for HAnim2 HAnimJoint </assert>      <!-- *** finish: HAnim2 HAnimJoint name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimJoint alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='SIJ')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'sacroiliac', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='SI joint')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'sacroiliac', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ankle')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_talocrural', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_talocalcaneal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_talocalcaneonavicular', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_cuneonavicular_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_subtalar')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_tarsometatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_tarsometatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midtarsal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metatarsophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metatarsophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_tarsal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_tarsal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calcaneuscuboid')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_calcaneocuboid', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ankle')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_talocrural', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_talocalcaneal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_talocalcaneonavicular', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_cuneonavicular_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_subtalar')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsometatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsometatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midtarsal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metatarsophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metatarsophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calcaneuscuboid')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_calcaneocuboid', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_wrist')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_radiocarpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_interphalangeal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index0')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle0')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring0')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky0')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_wrist')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_radiocarpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_interphalangeal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index0')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle0')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring0')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky0')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky1')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky2')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky3')" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_5', recommend updating X3D model source </report>      <!-- *** finish: HAnim2 HAnimJoint alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimJoint Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='humanoid_root') and not($loa = -1) and ($loa lt 0)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='0' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='sacroiliac') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_hip') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_knee') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_talocrural') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_talocalcaneonavicular') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_interphalangeal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_2') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calcaneocuboid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_transversetarsal') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_hip') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_knee') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_talocrural') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_talocalcaneonavicular') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_interphalangeal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_2') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calcaneocuboid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_transversetarsal') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl5') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl4') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl2') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt12') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt11') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt10') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt9') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt8') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt7') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt6') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt5') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt4') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt3') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt2') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc7') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc6') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc5') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc3') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc1') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='skullbase') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyelid_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyelid_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyeball_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyeball_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyebrow_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyebrow_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='temporomandibular') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_sternoclavicular') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_acromioclavicular') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_shoulder') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_elbow') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_radiocarpal') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_interphalangeal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_4_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_sternoclavicular') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_acromioclavicular') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_shoulder') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_elbow') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_radiocarpal') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_interphalangeal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_4_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>      <!-- *** finish: HAnim2 HAnimJoint Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimJoint parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='sacroiliac') and parent::HAnimJoint[not(@name='humanoid_root')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='humanoid_root', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_hip') and parent::HAnimJoint[not(@name='sacroiliac')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='sacroiliac', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_knee') and parent::HAnimJoint[not(@name='l_hip')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_hip', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_talocrural') and parent::HAnimJoint[not(@name='l_knee')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_knee', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_talocalcaneonavicular') and parent::HAnimJoint[not(@name='l_talocrural')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_1') and parent::HAnimJoint[not(@name='l_talocalcaneonavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_1') and parent::HAnimJoint[not(@name='l_cuneonavicular_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_1') and parent::HAnimJoint[not(@name='l_tarsometatarsal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_interphalangeal_1') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_2') and parent::HAnimJoint[not(@name='l_talocalcaneonavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_2') and parent::HAnimJoint[not(@name='l_cuneonavicular_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_2') and parent::HAnimJoint[not(@name='l_tarsometatarsal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_2') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_2') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_3') and parent::HAnimJoint[not(@name='l_talocalcaneonavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_3') and parent::HAnimJoint[not(@name='l_cuneonavicular_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_3') and parent::HAnimJoint[not(@name='l_tarsometatarsal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_3') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_3') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_calcaneocuboid') and parent::HAnimJoint[not(@name='l_talocrural')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_transversetarsal') and parent::HAnimJoint[not(@name='l_calcaneocuboid')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calcaneocuboid', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_4') and parent::HAnimJoint[not(@name='l_transversetarsal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_4') and parent::HAnimJoint[not(@name='l_tarsometatarsal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_4') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_4') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_5') and parent::HAnimJoint[not(@name='l_transversetarsal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_5') and parent::HAnimJoint[not(@name='l_tarsometatarsal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_5') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_5') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_hip') and parent::HAnimJoint[not(@name='sacroiliac')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='sacroiliac', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_knee') and parent::HAnimJoint[not(@name='r_hip')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_hip', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_talocrural') and parent::HAnimJoint[not(@name='r_knee')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_knee', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_talocalcaneonavicular') and parent::HAnimJoint[not(@name='r_talocrural')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_1') and parent::HAnimJoint[not(@name='r_talocalcaneonavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_1') and parent::HAnimJoint[not(@name='r_cuneonavicular_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_1') and parent::HAnimJoint[not(@name='r_tarsometatarsal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_interphalangeal_1') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_2') and parent::HAnimJoint[not(@name='r_talocalcaneonavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_2') and parent::HAnimJoint[not(@name='r_cuneonavicular_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_2') and parent::HAnimJoint[not(@name='r_tarsometatarsal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_2') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_2') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_3') and parent::HAnimJoint[not(@name='r_talocalcaneonavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_3') and parent::HAnimJoint[not(@name='r_cuneonavicular_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_3') and parent::HAnimJoint[not(@name='r_tarsometatarsal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_3') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_3') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_calcaneocuboid') and parent::HAnimJoint[not(@name='r_talocrural')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_transversetarsal') and parent::HAnimJoint[not(@name='r_calcaneocuboid')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calcaneocuboid', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_4') and parent::HAnimJoint[not(@name='r_transversetarsal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_4') and parent::HAnimJoint[not(@name='r_tarsometatarsal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_4') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_4') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_5') and parent::HAnimJoint[not(@name='r_transversetarsal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_5') and parent::HAnimJoint[not(@name='r_tarsometatarsal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_5') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_5') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl5') and parent::HAnimJoint[not(@name='sacroiliac')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='sacroiliac', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl4') and parent::HAnimJoint[not(@name='vl5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl3') and parent::HAnimJoint[not(@name='vl4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl2') and parent::HAnimJoint[not(@name='vl3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl1') and parent::HAnimJoint[not(@name='vl2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt12') and parent::HAnimJoint[not(@name='vl1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt11') and parent::HAnimJoint[not(@name='vt12')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt12', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt10') and parent::HAnimJoint[not(@name='vt11')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt11', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt9') and parent::HAnimJoint[not(@name='vt10')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt10', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt8') and parent::HAnimJoint[not(@name='vt9')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt9', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt7') and parent::HAnimJoint[not(@name='vt8')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt8', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt6') and parent::HAnimJoint[not(@name='vt7')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt5') and parent::HAnimJoint[not(@name='vt6')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt6', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt4') and parent::HAnimJoint[not(@name='vt5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt3') and parent::HAnimJoint[not(@name='vt4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt2') and parent::HAnimJoint[not(@name='vt3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt1') and parent::HAnimJoint[not(@name='vt2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc7') and parent::HAnimJoint[not(@name='vt1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc6') and parent::HAnimJoint[not(@name='vc7')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc5') and parent::HAnimJoint[not(@name='vc6')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc6', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc4') and parent::HAnimJoint[not(@name='vc5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc3') and parent::HAnimJoint[not(@name='vc4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc2') and parent::HAnimJoint[not(@name='vc3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc1') and parent::HAnimJoint[not(@name='vc2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='skullbase') and parent::HAnimJoint[not(@name='vc1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyelid_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyelid_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyeball_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyeball_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyebrow_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyebrow_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='temporomandibular') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_sternoclavicular') and parent::HAnimJoint[not(@name='vc7')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_acromioclavicular') and parent::HAnimJoint[not(@name='l_sternoclavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_sternoclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_shoulder') and parent::HAnimJoint[not(@name='l_acromioclavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_acromioclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_elbow') and parent::HAnimJoint[not(@name='l_shoulder')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_shoulder', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_radiocarpal') and parent::HAnimJoint[not(@name='l_elbow')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_elbow', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_1') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_1') and parent::HAnimJoint[not(@name='l_midcarpal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_1') and parent::HAnimJoint[not(@name='l_carpometacarpal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_interphalangeal_1') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_2') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_2') and parent::HAnimJoint[not(@name='l_midcarpal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_2') and parent::HAnimJoint[not(@name='l_carpometacarpal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_2') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_2') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_3') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_3') and parent::HAnimJoint[not(@name='l_midcarpal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_3') and parent::HAnimJoint[not(@name='l_carpometacarpal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_3') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_3') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_4_5') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_4') and parent::HAnimJoint[not(@name='l_midcarpal_4_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_4') and parent::HAnimJoint[not(@name='l_carpometacarpal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_4') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_4') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_5') and parent::HAnimJoint[not(@name='l_midcarpal_4_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_5') and parent::HAnimJoint[not(@name='l_carpometacarpal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_5') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_5') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_sternoclavicular') and parent::HAnimJoint[not(@name='vc7')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_acromioclavicular') and parent::HAnimJoint[not(@name='r_sternoclavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_sternoclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_shoulder') and parent::HAnimJoint[not(@name='r_acromioclavicular')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_acromioclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_elbow') and parent::HAnimJoint[not(@name='r_shoulder')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_shoulder', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_radiocarpal') and parent::HAnimJoint[not(@name='r_elbow')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_elbow', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_1') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_1') and parent::HAnimJoint[not(@name='r_midcarpal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_1') and parent::HAnimJoint[not(@name='r_carpometacarpal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_interphalangeal_1') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_1')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_2') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_2') and parent::HAnimJoint[not(@name='r_midcarpal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_2') and parent::HAnimJoint[not(@name='r_carpometacarpal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_2') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_2') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_2')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_3') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_3') and parent::HAnimJoint[not(@name='r_midcarpal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_3') and parent::HAnimJoint[not(@name='r_carpometacarpal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_3') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_3') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_3')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_4_5') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_4') and parent::HAnimJoint[not(@name='r_midcarpal_4_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_4') and parent::HAnimJoint[not(@name='r_carpometacarpal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_4') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_4') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_4')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_5') and parent::HAnimJoint[not(@name='r_midcarpal_4_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_5') and parent::HAnimJoint[not(@name='r_carpometacarpal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_5') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_5') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_5')]" role="warning">&lt;HAnimJoint DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_5', recommend checking model </report>      <!-- *** finish: HAnim2 HAnimJoint parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimSegment name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or        (@name='sacrum') or (@name='pelvis') or (@name='l_thigh') or (@name='l_calf') or         (@name='l_talus') or (@name='l_navicular') or (@name='l_cuneiform_1') or (@name='l_metatarsal_1') or (@name='l_tarsal_proximal_phalanx_1') or         (@name='l_tarsal_distal_phalanx_1') or (@name='l_cuneiform_2') or (@name='l_metatarsal_2') or (@name='l_tarsal_proximal_phalanx_2') or (@name='l_tarsal_middle_phalanx_2') or         (@name='l_tarsal_distal_phalanx_2') or (@name='l_cuneiform_3') or (@name='l_metatarsal_3') or (@name='l_tarsal_proximal_phalanx_3') or (@name='l_tarsal_middle_phalanx_3') or         (@name='l_tarsal_distal_phalanx_3') or (@name='l_calcaneus') or (@name='l_cuboid') or (@name='l_metatarsal_4') or (@name='l_tarsal_proximal_phalanx_4') or         (@name='l_tarsal_middle_phalanx_4') or (@name='l_tarsal_distal_phalanx_4') or (@name='l_metatarsal_5') or (@name='l_tarsal_proximal_phalanx_5') or (@name='l_tarsal_middle_phalanx_5') or         (@name='l_tarsal_distal_phalanx_5') or (@name='r_thigh') or (@name='r_calf') or (@name='r_talus') or (@name='r_navicular') or         (@name='r_cuneiform_1') or (@name='r_metatarsal_1') or (@name='r_tarsal_proximal_phalanx_1') or (@name='r_tarsal_distal_phalanx_1') or (@name='r_cuneiform_2') or         (@name='r_metatarsal_2') or (@name='r_tarsal_proximal_phalanx_2') or (@name='r_tarsal_middle_phalanx_2') or (@name='r_tarsal_distal_phalanx_2') or (@name='r_cuneiform_3') or         (@name='r_metatarsal_3') or (@name='r_tarsal_proximal_phalanx_3') or (@name='r_tarsal_middle_phalanx_3') or (@name='r_tarsal_distal_phalanx_3') or (@name='r_calcaneus') or         (@name='r_cuboid') or (@name='r_metatarsal_4') or (@name='r_tarsal_proximal_phalanx_4') or (@name='r_tarsal_middle_phalanx_4') or (@name='r_tarsal_distal_phalanx_4') or         (@name='r_metatarsal_5') or (@name='r_tarsal_proximal_phalanx_5') or (@name='r_tarsal_middle_phalanx_5') or (@name='r_tarsal_distal_phalanx_5') or (@name='l5') or         (@name='l4') or (@name='l3') or (@name='l2') or (@name='l1') or (@name='t12') or         (@name='t11') or (@name='t10') or (@name='t9') or (@name='t8') or (@name='t7') or         (@name='t6') or (@name='t5') or (@name='t4') or (@name='t3') or (@name='t2') or         (@name='t1') or (@name='c7') or (@name='c6') or (@name='c5') or (@name='c4') or         (@name='c3') or (@name='c2') or (@name='c1') or (@name='skull') or (@name='l_eyelid') or         (@name='r_eyelid') or (@name='l_eyeball') or (@name='r_eyeball') or (@name='l_eyebrow') or (@name='r_eyebrow') or         (@name='jaw') or (@name='l_clavicle') or (@name='l_scapula') or (@name='l_upperarm') or (@name='l_forearm') or         (@name='l_carpal') or (@name='l_trapezium') or (@name='l_metacarpal_1') or (@name='l_carpal_proximal_phalanx_1') or (@name='l_carpal_distal_phalanx_1') or         (@name='l_trapezoid') or (@name='l_metacarpal_2') or (@name='l_carpal_proximal_phalanx_2') or (@name='l_carpal_middle_phalanx_2') or (@name='l_carpal_distal_phalanx_2') or         (@name='l_capitate') or (@name='l_metacarpal_3') or (@name='l_carpal_proximal_phalanx_3') or (@name='l_carpal_middle_phalanx_3') or (@name='l_carpal_distal_phalanx_3') or         (@name='l_hamate') or (@name='l_metacarpal_4') or (@name='l_carpal_proximal_phalanx_4') or (@name='l_carpal_middle_phalanx_4') or (@name='l_carpal_distal_phalanx_4') or         (@name='l_metacarpal_5') or (@name='l_carpal_proximal_phalanx_5') or (@name='l_carpal_middle_phalanx_5') or (@name='l_carpal_distal_phalanx_5') or (@name='r_clavicle') or         (@name='r_scapula') or (@name='r_upperarm') or (@name='r_forearm') or (@name='r_carpal') or (@name='r_trapezium') or         (@name='r_metacarpal_1') or (@name='r_carpal_proximal_phalanx_1') or (@name='r_carpal_distal_phalanx_1') or (@name='r_trapezoid') or (@name='r_metacarpal_2') or         (@name='r_carpal_proximal_phalanx_2') or (@name='r_carpal_middle_phalanx_2') or (@name='r_carpal_distal_phalanx_2') or (@name='r_capitate') or (@name='r_metacarpal_3') or         (@name='r_carpal_proximal_phalanx_3') or (@name='r_carpal_middle_phalanx_3') or (@name='r_carpal_distal_phalanx_3') or (@name='r_hamate') or (@name='r_metacarpal_4') or         (@name='r_carpal_proximal_phalanx_4') or (@name='r_carpal_middle_phalanx_4') or (@name='r_carpal_distal_phalanx_4') or (@name='r_metacarpal_5') or (@name='r_carpal_proximal_phalanx_5') or         (@name='r_carpal_middle_phalanx_5') or (@name='r_carpal_distal_phalanx_5')"        role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is not a recognized name for HAnim2 HAnimSegment </assert>      <!-- *** finish HAnim2 HAnimSegment name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimSegment alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='l_hindfoot')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_talus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneiform')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_cuneiform_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midproximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middistal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_forefoot')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calcaneum')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_calcaneus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_hindfoot')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_talus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneiform')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_cuneiform_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midproximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middistal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_forefoot')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calcaneum')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_calcaneus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='head')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'skull', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_hand')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index_middle')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle_middle')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring_middle')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky_middle')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_hand')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index_middle')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle_middle')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring_middle')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky_metacarpal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky_proximal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky_middle')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky_distal')" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_5', recommend updating X3D model source </report>      <!-- *** finish: HAnim2 HAnimSegment alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimSegment Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='sacrum') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='pelvis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thigh') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calf') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_talus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_navicular') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_2') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calcaneus') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuboid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thigh') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calf') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_talus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_navicular') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_2') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calcaneus') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuboid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l5') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l4') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l2') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t12') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t11') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t10') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t9') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t8') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t7') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t6') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t5') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t4') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t3') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t2') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c7') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c6') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c5') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c3') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c1') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='skull') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyelid') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyelid') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyeball') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyeball') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyebrow') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyebrow') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='jaw') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_clavicle') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_scapula') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_upperarm') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_forearm') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_trapezium') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_trapezoid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_capitate') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_hamate') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_clavicle') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_scapula') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_upperarm') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_forearm') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_trapezium') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_trapezoid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_capitate') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_hamate') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>      <!-- *** finish: HAnim2 HAnimSegment Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimSegment parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='sacrum') and parent::HAnimJoint[not(@name='humanoid_root')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='humanoid_root', recommend checking model </report>
      <report test="$isHAnim2 and (@name='pelvis') and parent::HAnimJoint[not(@name='sacroiliac')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='sacroiliac', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_thigh') and parent::HAnimJoint[not(@name='l_hip')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_hip', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_calf') and parent::HAnimJoint[not(@name='l_knee')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_knee', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_talus') and parent::HAnimJoint[not(@name='l_talocrural')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_navicular') and parent::HAnimJoint[not(@name='l_talocalcaneonavicular')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_1') and parent::HAnimJoint[not(@name='l_cuneonavicular_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_1') and parent::HAnimJoint[not(@name='l_tarsometatarsal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_1') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='l_tarsal_interphalangeal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_interphalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_2') and parent::HAnimJoint[not(@name='l_cuneonavicular_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_2') and parent::HAnimJoint[not(@name='l_tarsometatarsal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_2') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_2') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_2') and parent::HAnimJoint[not(@name='l_tarsal_distal_interphalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_3') and parent::HAnimJoint[not(@name='l_cuneonavicular_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_3') and parent::HAnimJoint[not(@name='l_tarsometatarsal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_3') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_3') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_3') and parent::HAnimJoint[not(@name='l_tarsal_distal_interphalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_calcaneus') and parent::HAnimJoint[not(@name='l_calcaneocuboid')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calcaneocuboid', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuboid') and parent::HAnimJoint[not(@name='l_transversetarsal')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_4') and parent::HAnimJoint[not(@name='l_tarsometatarsal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_4') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_4') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_4') and parent::HAnimJoint[not(@name='l_tarsal_distal_interphalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_5') and parent::HAnimJoint[not(@name='l_tarsometatarsal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_5') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_5') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_5') and parent::HAnimJoint[not(@name='l_tarsal_distal_interphalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_thigh') and parent::HAnimJoint[not(@name='r_hip')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_hip', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_calf') and parent::HAnimJoint[not(@name='r_knee')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_knee', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_talus') and parent::HAnimJoint[not(@name='r_talocrural')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_navicular') and parent::HAnimJoint[not(@name='r_talocalcaneonavicular')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_1') and parent::HAnimJoint[not(@name='r_cuneonavicular_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_1') and parent::HAnimJoint[not(@name='r_tarsometatarsal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_1') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='r_tarsal_interphalangeal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_interphalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_2') and parent::HAnimJoint[not(@name='r_cuneonavicular_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_2') and parent::HAnimJoint[not(@name='r_tarsometatarsal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_2') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_2') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_2') and parent::HAnimJoint[not(@name='r_tarsal_distal_interphalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_3') and parent::HAnimJoint[not(@name='r_cuneonavicular_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_3') and parent::HAnimJoint[not(@name='r_tarsometatarsal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_3') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_3') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_3') and parent::HAnimJoint[not(@name='r_tarsal_distal_interphalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_calcaneus') and parent::HAnimJoint[not(@name='r_calcaneocuboid')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calcaneocuboid', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuboid') and parent::HAnimJoint[not(@name='r_transversetarsal')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_4') and parent::HAnimJoint[not(@name='r_tarsometatarsal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_4') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_4') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_4') and parent::HAnimJoint[not(@name='r_tarsal_distal_interphalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_5') and parent::HAnimJoint[not(@name='r_tarsometatarsal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_5') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_5') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_5') and parent::HAnimJoint[not(@name='r_tarsal_distal_interphalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l5') and parent::HAnimJoint[not(@name='vl5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l4') and parent::HAnimJoint[not(@name='vl4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l3') and parent::HAnimJoint[not(@name='vl3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l2') and parent::HAnimJoint[not(@name='vl2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l1') and parent::HAnimJoint[not(@name='vl1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t12') and parent::HAnimJoint[not(@name='vt12')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt12', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t11') and parent::HAnimJoint[not(@name='vt11')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt11', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t10') and parent::HAnimJoint[not(@name='vt10')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt10', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t9') and parent::HAnimJoint[not(@name='vt9')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt9', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t8') and parent::HAnimJoint[not(@name='vt8')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt8', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t7') and parent::HAnimJoint[not(@name='vt7')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t6') and parent::HAnimJoint[not(@name='vt6')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt6', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t5') and parent::HAnimJoint[not(@name='vt5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t4') and parent::HAnimJoint[not(@name='vt4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t3') and parent::HAnimJoint[not(@name='vt3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t2') and parent::HAnimJoint[not(@name='vt2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t1') and parent::HAnimJoint[not(@name='vt1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c7') and parent::HAnimJoint[not(@name='vc7')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c6') and parent::HAnimJoint[not(@name='vc6')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc6', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c5') and parent::HAnimJoint[not(@name='vc5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c4') and parent::HAnimJoint[not(@name='vc4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c3') and parent::HAnimJoint[not(@name='vc3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c2') and parent::HAnimJoint[not(@name='vc2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c1') and parent::HAnimJoint[not(@name='vc1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='skull') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyelid') and parent::HAnimJoint[not(@name='l_eyelid_joint')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_eyelid_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyelid') and parent::HAnimJoint[not(@name='r_eyelid_joint')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_eyelid_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyeball') and parent::HAnimJoint[not(@name='l_eyeball_joint')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_eyeball_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyeball') and parent::HAnimJoint[not(@name='r_eyeball_joint')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_eyeball_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyebrow') and parent::HAnimJoint[not(@name='l_eyebrow_joint')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_eyebrow_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyebrow') and parent::HAnimJoint[not(@name='r_eyebrow_joint')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_eyebrow_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='jaw') and parent::HAnimJoint[not(@name='temporomandibular')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='temporomandibular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_clavicle') and parent::HAnimJoint[not(@name='l_sternoclavicular')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_sternoclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_scapula') and parent::HAnimJoint[not(@name='l_acromioclavicular')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_acromioclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_upperarm') and parent::HAnimJoint[not(@name='l_shoulder')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_shoulder', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_forearm') and parent::HAnimJoint[not(@name='l_elbow')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_elbow', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_trapezium') and parent::HAnimJoint[not(@name='l_midcarpal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_1') and parent::HAnimJoint[not(@name='l_carpometacarpal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_1') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_1') and parent::HAnimJoint[not(@name='l_carpal_interphalangeal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_interphalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_trapezoid') and parent::HAnimJoint[not(@name='l_midcarpal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_2') and parent::HAnimJoint[not(@name='l_carpometacarpal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_2') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_2') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_2') and parent::HAnimJoint[not(@name='l_carpal_distal_interphalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_capitate') and parent::HAnimJoint[not(@name='l_midcarpal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_3') and parent::HAnimJoint[not(@name='l_carpometacarpal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_3') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_3') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_3') and parent::HAnimJoint[not(@name='l_carpal_distal_interphalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_hamate') and parent::HAnimJoint[not(@name='l_midcarpal_4_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_4') and parent::HAnimJoint[not(@name='l_carpometacarpal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_4') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_4') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_4') and parent::HAnimJoint[not(@name='l_carpal_distal_interphalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_5') and parent::HAnimJoint[not(@name='l_carpometacarpal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_5') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_5') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_5') and parent::HAnimJoint[not(@name='l_carpal_distal_interphalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_clavicle') and parent::HAnimJoint[not(@name='r_sternoclavicular')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_sternoclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_scapula') and parent::HAnimJoint[not(@name='r_acromioclavicular')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_acromioclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_upperarm') and parent::HAnimJoint[not(@name='r_shoulder')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_shoulder', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_forearm') and parent::HAnimJoint[not(@name='r_elbow')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_elbow', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_trapezium') and parent::HAnimJoint[not(@name='r_midcarpal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_1') and parent::HAnimJoint[not(@name='r_carpometacarpal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_1') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_1') and parent::HAnimJoint[not(@name='r_carpal_interphalangeal_1')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_interphalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_trapezoid') and parent::HAnimJoint[not(@name='r_midcarpal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_2') and parent::HAnimJoint[not(@name='r_carpometacarpal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_2') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_2') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_2') and parent::HAnimJoint[not(@name='r_carpal_distal_interphalangeal_2')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_capitate') and parent::HAnimJoint[not(@name='r_midcarpal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_3') and parent::HAnimJoint[not(@name='r_carpometacarpal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_3') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_3') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_3') and parent::HAnimJoint[not(@name='r_carpal_distal_interphalangeal_3')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_hamate') and parent::HAnimJoint[not(@name='r_midcarpal_4_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_4') and parent::HAnimJoint[not(@name='r_carpometacarpal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_4') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_4') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_4') and parent::HAnimJoint[not(@name='r_carpal_distal_interphalangeal_4')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_5') and parent::HAnimJoint[not(@name='r_carpometacarpal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_5') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_5') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_5') and parent::HAnimJoint[not(@name='r_carpal_distal_interphalangeal_5')]" role="warning">&lt;HAnimSegment DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_interphalangeal_5', recommend checking model </report>      <!-- *** finish: HAnim2 HAnimSegment parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimSite name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or        starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or         starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or         starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or         starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or         starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or         starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or         starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or         starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or         starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or         starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or         starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or         starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or         starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or         starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or         starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or         starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or         starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or         starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or         starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or         starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or         starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or         starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or         starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or         starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or         contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or         contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or         contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or         contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or         contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or         contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or         contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or         contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or         contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or         contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or         contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or         contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or         contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or         contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or         contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or         contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or         contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or         contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or         contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or         contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or         contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or         contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or         contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or         contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or         contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or         contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or         contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or         contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or         contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')"        role="info">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is not a recognized name for HAnim2 HAnimSite </assert>      <!-- *** finish: HAnim2 HAnimSite name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimSite alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and starts-with(@name,'skull_tip')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'skull_vertex', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'vertex')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'skull_vertex', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_clavicale')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_clavicle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_ant')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_axilla_proximal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_post')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_axilla_distal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_clavicale')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_clavicle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_ant')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_axilla_proximal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_post')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_axilla_distal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'middle back')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'spine_1_middle_back', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'lower back')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'spine_2_lower_back', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'waist_preferred_ant') and not(contains(.,'waist_preferred_anterior'))" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'waist_preferred_anterior', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'waist_preferred_post') and not(contains(.,'waist_preferred_posterior'))" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'waist_preferred_posterior', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_rib10_midspine')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_rib10', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Left Bustpoint')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_thelion', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_rib10_midspine')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_rib10', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Right Bustpoint')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_thelion', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Left Anterior Superior Iliac Spine')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_asis', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Left Posterior Superior Iliac Spine')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_psis', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Right Anterior Superior Iliac Spine')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_asis', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Right Posterior Superior Iliac Spine')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_psis', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_lateral_epicn')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_femoral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_lateral_epicondyles')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_femoral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_medial_epicn')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_femoral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_medial_epicondyles')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_femoral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_kneecap')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_suprapatella', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_trochanter') and not(contains(.,'trochanterion'))" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_trochanterion', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_lateral_epicn')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_femoral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_lateral_epicondyles')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_femoral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_medial_epicn')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_femoral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_medial_epicondyles')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_femoral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_kneecap')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_suprapatella', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_trochanter') and not(contains(.,'trochanterion'))" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_trochanterion', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metatarsal_pha1')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metatarsal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metatarsal_pha5')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metatarsal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_calcaneous_post')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_calcaneus_posterior', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metatarsal_pha1')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metatarsal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metatarsal_pha5')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metatarsal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_calcaneous_post')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_calcaneus_posterior', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_lateral_epicn')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_humeral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_lateral_epicondyles')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_humeral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_medial_epicn')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_humeral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_medial_epicondyles')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_humeral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_lateral_epicn')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_humeral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_lateral_epicondyles')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_humeral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_medial_epicn')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_humeral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_medial_epicondyles')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_humeral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_pha2')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metacarpal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metacarpal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_pha5')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metacarpal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_pha2')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metacarpal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metacarpal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_pha5')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metacarpal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'nuchal') and not(contains(.,'nuchale'))" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'nuchale', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'belly button')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'navel', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_canthus')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_ectocanthus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_canthus')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_ectocanthus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'chin')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'menton', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'mesosternum')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'mesosternale', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'median plane')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'rear_center_midsagittal_plane', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_thumb_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_index_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_middle_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_ring_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_pinky_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_thumb_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_index_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_middle_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_ring_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_pinky_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_digit2')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_pha5')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_tarsal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_digit2')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_pha5')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_tarsal_distal_phalanx_5', recommend updating X3D model source </report>      <!-- *** next: HAnim2 HAnimSite alias test matching HAnimSegment alias names, which may match -->
      <report test="$isHAnim2 and contains(@name,'l_hindfoot')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_talus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_cuneiform')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_cuneiform_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_midproximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metatarsal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middistal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_proximal_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_middle_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_forefoot')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_calcaneum')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_calcaneus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_hindfoot')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_talus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_cuneiform')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_cuneiform_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_midproximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middistal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_proximal_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_middle_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_forefoot')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_calcaneum')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_calcaneus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'head')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'skull', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_hand')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_thumb_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_thumb_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_thumb_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_index_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_index_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_proximal_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_index_middle')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_middle_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_index_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middle_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middle_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middle_middle')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middle_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ring_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ring_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ring_middle')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ring_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_pinky_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_pinky_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_pinky_middle')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_pinky_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_hand')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_thumb_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_thumb_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_thumb_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_index_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_index_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_proximal_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_index_middle')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_middle_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_index_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middle_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middle_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middle_middle')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middle_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ring_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ring_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ring_middle')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ring_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_pinky_metacarpal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_pinky_proximal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_pinky_middle')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_pinky_distal')" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_5', recommend updating X3D model source </report>      <!-- *** finish: HAnim2 HAnimSite alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimSite Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and contains(@name,'skull_vertex') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'glabella') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'sellion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_infraorbitale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tragion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_gonion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_infraorbitale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tragion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_gonion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'supramenton') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'cervicale') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'adams_apple') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'suprasternale') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'substernale') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_clavicle') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_acromion') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_axilla_proximal') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_axilla_distal') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_axilla_posterior_folds') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_clavicle') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_acromion') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_axilla_proximal') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_axilla_distal') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_axilla_posterior_folds') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'spine_1_middle_back') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'spine_2_lower_back') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'waist_preferred_anterior') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'waist_preferred_posterior') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_rib10') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_thelion') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_rib10') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_thelion') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_asis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_iliocristale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_psis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_asis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_iliocristale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_psis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'crotch') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_femoral_lateral_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_femoral_medial_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_suprapatella') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_trochanterion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_femoral_lateral_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_femoral_medial_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_suprapatella') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_trochanterion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tibiale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_medial_malleolus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_lateral_malleolus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_sphyrion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tibiale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_medial_malleolus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_lateral_malleolus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_sphyrion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metatarsal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metatarsal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_dactylion') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_calcaneus_posterior') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metatarsal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metatarsal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_dactylion') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_calcaneus_posterior') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_humeral_lateral_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_humeral_medial_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_olecranon') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_humeral_lateral_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_humeral_medial_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_olecranon') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_radiale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ulnar_styloid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_radial_styloid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_radiale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ulnar_styloid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_radial_styloid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metacarpal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metacarpal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metacarpal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metacarpal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metacarpal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metacarpal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'nuchale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_neck_base') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_neck_base') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'navel') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ectocanthus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ectocanthus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'menton') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'mesosternale') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'opisthocranion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_knee_crease') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_knee_crease') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'rear_center_midsagittal_plane') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'buttocks_standing_wall_contact_point') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_chest_midsagittal_plane') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_chest_midsagittal_plane') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_bideltoid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_bideltoid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>      <!-- *** finish: HAnim2 HAnimSite Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <!-- *** start: HAnim2 HAnimSite parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and starts-with(@name,'skull_vertex') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'glabella') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'sellion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_infraorbitale') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tragion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_gonion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_infraorbitale') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tragion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_gonion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'supramenton') and parent::HAnimJoint[not(@name='jaw')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='jaw', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'cervicale') and parent::HAnimJoint[not(@name='t1')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'adams_apple') and parent::HAnimJoint[not(@name='c2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='c2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'suprasternale') and parent::HAnimJoint[not(@name='t1')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'substernale') and parent::HAnimJoint[not(@name='t10')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t10', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_clavicle') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_acromion') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_proximal') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_distal') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_posterior_folds') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_clavicle') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_acromion') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_proximal') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_distal') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_posterior_folds') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'spine_1_middle_back') and parent::HAnimJoint[not(@name='t5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'spine_2_lower_back') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'waist_preferred_anterior') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'waist_preferred_posterior') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_rib10') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_thelion') and parent::HAnimJoint[not(@name='t9')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t9', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_rib10') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_thelion') and parent::HAnimJoint[not(@name='t9')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t9', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_asis') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_iliocristale') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_psis') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_asis') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_iliocristale') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_psis') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'crotch') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_lateral_epicondyle') and parent::HAnimJoint[not(@name='l_thigh')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_medial_epicondyle') and parent::HAnimJoint[not(@name='l_thigh')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_suprapatella') and parent::HAnimJoint[not(@name='l_thigh')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_trochanterion') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_lateral_epicondyle') and parent::HAnimJoint[not(@name='r_thigh')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_medial_epicondyle') and parent::HAnimJoint[not(@name='r_thigh')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_suprapatella') and parent::HAnimJoint[not(@name='r_thigh')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_trochanterion') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tibiale') and parent::HAnimJoint[not(@name='l_calf')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_medial_malleolus') and parent::HAnimJoint[not(@name='l_calf')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_lateral_malleolus') and parent::HAnimJoint[not(@name='l_calf')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_sphyrion') and parent::HAnimJoint[not(@name='l_talus')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talus', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tibiale') and parent::HAnimJoint[not(@name='r_calf')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_medial_malleolus') and parent::HAnimJoint[not(@name='r_calf')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_lateral_malleolus') and parent::HAnimJoint[not(@name='r_calf')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_sphyrion') and parent::HAnimJoint[not(@name='r_talus')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talus', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metatarsal_phalanx_1') and parent::HAnimJoint[not(@name='l_tarsal_proximal_phalanx_1')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metatarsal_phalanx_5') and parent::HAnimJoint[not(@name='l_tarsal_proximal_phalanx_5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_dactylion') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_calcaneus_posterior') and parent::HAnimJoint[not(@name='l_talus')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talus', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metatarsal_phalanx_1') and parent::HAnimJoint[not(@name='r_tarsal_proximal_phalanx_1')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metatarsal_phalanx_5') and parent::HAnimJoint[not(@name='r_tarsal_proximal_phalanx_5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_dactylion') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_calcaneus_posterior') and parent::HAnimJoint[not(@name='r_talus')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talus', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_lateral_epicondyle') and parent::HAnimJoint[not(@name='l_upperarm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_upperarm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_medial_epicondyle') and parent::HAnimJoint[not(@name='l_forearm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_olecranon') and parent::HAnimJoint[not(@name='l_forearm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_lateral_epicondyle') and parent::HAnimJoint[not(@name='r_upperarm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_upperarm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_medial_epicondyle') and parent::HAnimJoint[not(@name='r_forearm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_olecranon') and parent::HAnimJoint[not(@name='r_forearm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_radiale') and parent::HAnimJoint[not(@name='l_forearm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_ulnar_styloid') and parent::HAnimJoint[not(@name='l_carpal')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_radial_styloid') and parent::HAnimJoint[not(@name='l_forearm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_radiale') and parent::HAnimJoint[not(@name='r_forearm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_ulnar_styloid') and parent::HAnimJoint[not(@name='r_carpal')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_radial_styloid') and parent::HAnimJoint[not(@name='r_forearm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx_2') and parent::HAnimJoint[not(@name='l_metacarpal_2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx_3') and parent::HAnimJoint[not(@name='l_metacarpal_3')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx_5') and parent::HAnimJoint[not(@name='l_metacarpal_5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx_2') and parent::HAnimJoint[not(@name='r_metacarpal_2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx_3') and parent::HAnimJoint[not(@name='r_metacarpal_3')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx_5') and parent::HAnimJoint[not(@name='r_metacarpal_5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'nuchale') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_neck_base') and parent::HAnimJoint[not(@name='c7')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='c7', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_neck_base') and parent::HAnimJoint[not(@name='c7')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='c7', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'navel') and parent::HAnimJoint[not(@name='l5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_ectocanthus') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_ectocanthus') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'menton') and parent::HAnimJoint[not(@name='jaw')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='jaw', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'mesosternale') and parent::HAnimJoint[not(@name='t6')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t6', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'opisthocranion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_knee_crease') and parent::HAnimJoint[not(@name='l_thigh')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_knee_crease') and parent::HAnimJoint[not(@name='r_thigh')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'rear_center_midsagittal_plane') and parent::HAnimJoint[not(@name='t6')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t6', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'buttocks_standing_wall_contact_point') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_chest_midsagittal_plane') and parent::HAnimJoint[not(@name='t6')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t6', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_chest_midsagittal_plane') and parent::HAnimJoint[not(@name='t6')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t6', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_bideltoid') and parent::HAnimJoint[not(@name='l_upperarm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_upperarm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_bideltoid') and parent::HAnimJoint[not(@name='r_upperarm')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_upperarm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_1') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_1')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_2') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_3') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_3')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_4') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_4')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_4', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_5') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_1') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_1')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_2') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_3') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_3')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_4') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_4')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_4', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_5') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_1')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_2') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_3') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_3')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_4') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_4')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_4', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_5') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_1')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_2') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_2')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_3') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_3')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_4') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_4')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_4', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_5') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_5')]" role="warning">&lt;HAnimSite DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_5', recommend checking model </report>      <!-- *** finish: HAnim2 HAnimSite parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <!-- X3dTidy.xslt correction rules in X3dDiagnostics4.0.xml autogenerated from X3DUOM -->                <!-- *** start: NodeName capitalization corrections generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
                <xsl:when test="(lower-case(local-name()) = 'acousticproperties') and not(local-name() = 'AcousticProperties')"><xsl:text>AcousticProperties</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'analyser') and not(local-name() = 'Analyser')"><xsl:text>Analyser</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'anchor') and not(local-name() = 'Anchor')"><xsl:text>Anchor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'appearance') and not(local-name() = 'Appearance')"><xsl:text>Appearance</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'arc2d') and not(local-name() = 'Arc2D')"><xsl:text>Arc2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'arcclose2d') and not(local-name() = 'ArcClose2D')"><xsl:text>ArcClose2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'audioclip') and not(local-name() = 'AudioClip')"><xsl:text>AudioClip</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'audiodestination') and not(local-name() = 'AudioDestination')"><xsl:text>AudioDestination</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'background') and not(local-name() = 'Background')"><xsl:text>Background</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'balljoint') and not(local-name() = 'BallJoint')"><xsl:text>BallJoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'billboard') and not(local-name() = 'Billboard')"><xsl:text>Billboard</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'biquadfilter') and not(local-name() = 'BiquadFilter')"><xsl:text>BiquadFilter</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'blendedvolumestyle') and not(local-name() = 'BlendedVolumeStyle')"><xsl:text>BlendedVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'booleanfilter') and not(local-name() = 'BooleanFilter')"><xsl:text>BooleanFilter</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'booleansequencer') and not(local-name() = 'BooleanSequencer')"><xsl:text>BooleanSequencer</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'booleantoggle') and not(local-name() = 'BooleanToggle')"><xsl:text>BooleanToggle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'booleantrigger') and not(local-name() = 'BooleanTrigger')"><xsl:text>BooleanTrigger</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'boundaryenhancementvolumestyle') and not(local-name() = 'BoundaryEnhancementVolumeStyle')"><xsl:text>BoundaryEnhancementVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'boundedphysicsmodel') and not(local-name() = 'BoundedPhysicsModel')"><xsl:text>BoundedPhysicsModel</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'box') and not(local-name() = 'Box')"><xsl:text>Box</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bufferaudiosource') and not(local-name() = 'BufferAudioSource')"><xsl:text>BufferAudioSource</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cadassembly') and not(local-name() = 'CADAssembly')"><xsl:text>CADAssembly</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cadface') and not(local-name() = 'CADFace')"><xsl:text>CADFace</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cadlayer') and not(local-name() = 'CADLayer')"><xsl:text>CADLayer</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cadpart') and not(local-name() = 'CADPart')"><xsl:text>CADPart</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cartoonvolumestyle') and not(local-name() = 'CartoonVolumeStyle')"><xsl:text>CartoonVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'channelmerger') and not(local-name() = 'ChannelMerger')"><xsl:text>ChannelMerger</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'channelselector') and not(local-name() = 'ChannelSelector')"><xsl:text>ChannelSelector</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'channelsplitter') and not(local-name() = 'ChannelSplitter')"><xsl:text>ChannelSplitter</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'circle2d') and not(local-name() = 'Circle2D')"><xsl:text>Circle2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'clipplane') and not(local-name() = 'ClipPlane')"><xsl:text>ClipPlane</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'collidableoffset') and not(local-name() = 'CollidableOffset')"><xsl:text>CollidableOffset</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'collidableshape') and not(local-name() = 'CollidableShape')"><xsl:text>CollidableShape</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'collision') and not(local-name() = 'Collision')"><xsl:text>Collision</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'collisioncollection') and not(local-name() = 'CollisionCollection')"><xsl:text>CollisionCollection</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'collisionsensor') and not(local-name() = 'CollisionSensor')"><xsl:text>CollisionSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'collisionspace') and not(local-name() = 'CollisionSpace')"><xsl:text>CollisionSpace</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'color') and not(local-name() = 'Color')"><xsl:text>Color</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'colorchaser') and not(local-name() = 'ColorChaser')"><xsl:text>ColorChaser</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'colordamper') and not(local-name() = 'ColorDamper')"><xsl:text>ColorDamper</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'colorinterpolator') and not(local-name() = 'ColorInterpolator')"><xsl:text>ColorInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'colorrgba') and not(local-name() = 'ColorRGBA')"><xsl:text>ColorRGBA</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'composedcubemaptexture') and not(local-name() = 'ComposedCubeMapTexture')"><xsl:text>ComposedCubeMapTexture</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'composedshader') and not(local-name() = 'ComposedShader')"><xsl:text>ComposedShader</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'composedtexture3d') and not(local-name() = 'ComposedTexture3D')"><xsl:text>ComposedTexture3D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'composedvolumestyle') and not(local-name() = 'ComposedVolumeStyle')"><xsl:text>ComposedVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cone') and not(local-name() = 'Cone')"><xsl:text>Cone</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coneemitter') and not(local-name() = 'ConeEmitter')"><xsl:text>ConeEmitter</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'contact') and not(local-name() = 'Contact')"><xsl:text>Contact</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'contour2d') and not(local-name() = 'Contour2D')"><xsl:text>Contour2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'contourpolyline2d') and not(local-name() = 'ContourPolyline2D')"><xsl:text>ContourPolyline2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'convolver') and not(local-name() = 'Convolver')"><xsl:text>Convolver</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coordinate') and not(local-name() = 'Coordinate')"><xsl:text>Coordinate</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coordinatechaser') and not(local-name() = 'CoordinateChaser')"><xsl:text>CoordinateChaser</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coordinatedamper') and not(local-name() = 'CoordinateDamper')"><xsl:text>CoordinateDamper</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coordinatedouble') and not(local-name() = 'CoordinateDouble')"><xsl:text>CoordinateDouble</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coordinateinterpolator') and not(local-name() = 'CoordinateInterpolator')"><xsl:text>CoordinateInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coordinateinterpolator2d') and not(local-name() = 'CoordinateInterpolator2D')"><xsl:text>CoordinateInterpolator2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cylinder') and not(local-name() = 'Cylinder')"><xsl:text>Cylinder</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cylindersensor') and not(local-name() = 'CylinderSensor')"><xsl:text>CylinderSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'disentitymanager') and not(local-name() = 'DISEntityManager')"><xsl:text>DISEntityManager</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'disentitytypemapping') and not(local-name() = 'DISEntityTypeMapping')"><xsl:text>DISEntityTypeMapping</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'delay') and not(local-name() = 'Delay')"><xsl:text>Delay</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'directionallight') and not(local-name() = 'DirectionalLight')"><xsl:text>DirectionalLight</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'disk2d') and not(local-name() = 'Disk2D')"><xsl:text>Disk2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'doubleaxishingejoint') and not(local-name() = 'DoubleAxisHingeJoint')"><xsl:text>DoubleAxisHingeJoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'dynamicscompressor') and not(local-name() = 'DynamicsCompressor')"><xsl:text>DynamicsCompressor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'easeineaseout') and not(local-name() = 'EaseInEaseOut')"><xsl:text>EaseInEaseOut</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'edgeenhancementvolumestyle') and not(local-name() = 'EdgeEnhancementVolumeStyle')"><xsl:text>EdgeEnhancementVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'elevationgrid') and not(local-name() = 'ElevationGrid')"><xsl:text>ElevationGrid</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'espdutransform') and not(local-name() = 'EspduTransform')"><xsl:text>EspduTransform</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'explosionemitter') and not(local-name() = 'ExplosionEmitter')"><xsl:text>ExplosionEmitter</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'extrusion') and not(local-name() = 'Extrusion')"><xsl:text>Extrusion</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fillproperties') and not(local-name() = 'FillProperties')"><xsl:text>FillProperties</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'floatvertexattribute') and not(local-name() = 'FloatVertexAttribute')"><xsl:text>FloatVertexAttribute</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fog') and not(local-name() = 'Fog')"><xsl:text>Fog</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fogcoordinate') and not(local-name() = 'FogCoordinate')"><xsl:text>FogCoordinate</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fontstyle') and not(local-name() = 'FontStyle')"><xsl:text>FontStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'forcephysicsmodel') and not(local-name() = 'ForcePhysicsModel')"><xsl:text>ForcePhysicsModel</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'gain') and not(local-name() = 'Gain')"><xsl:text>Gain</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'generatedcubemaptexture') and not(local-name() = 'GeneratedCubeMapTexture')"><xsl:text>GeneratedCubeMapTexture</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geocoordinate') and not(local-name() = 'GeoCoordinate')"><xsl:text>GeoCoordinate</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geoelevationgrid') and not(local-name() = 'GeoElevationGrid')"><xsl:text>GeoElevationGrid</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geolod') and not(local-name() = 'GeoLOD')"><xsl:text>GeoLOD</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geolocation') and not(local-name() = 'GeoLocation')"><xsl:text>GeoLocation</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geometadata') and not(local-name() = 'GeoMetadata')"><xsl:text>GeoMetadata</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geoorigin') and not(local-name() = 'GeoOrigin')"><xsl:text>GeoOrigin</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geopositioninterpolator') and not(local-name() = 'GeoPositionInterpolator')"><xsl:text>GeoPositionInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geoproximitysensor') and not(local-name() = 'GeoProximitySensor')"><xsl:text>GeoProximitySensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geotouchsensor') and not(local-name() = 'GeoTouchSensor')"><xsl:text>GeoTouchSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geotransform') and not(local-name() = 'GeoTransform')"><xsl:text>GeoTransform</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geoviewpoint') and not(local-name() = 'GeoViewpoint')"><xsl:text>GeoViewpoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'group') and not(local-name() = 'Group')"><xsl:text>Group</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'hanimdisplacer') and not(local-name() = 'HAnimDisplacer')"><xsl:text>HAnimDisplacer</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'hanimhumanoid') and not(local-name() = 'HAnimHumanoid')"><xsl:text>HAnimHumanoid</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'hanimjoint') and not(local-name() = 'HAnimJoint')"><xsl:text>HAnimJoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'hanimmotion') and not(local-name() = 'HAnimMotion')"><xsl:text>HAnimMotion</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'hanimsegment') and not(local-name() = 'HAnimSegment')"><xsl:text>HAnimSegment</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'hanimsite') and not(local-name() = 'HAnimSite')"><xsl:text>HAnimSite</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'imagecubemaptexture') and not(local-name() = 'ImageCubeMapTexture')"><xsl:text>ImageCubeMapTexture</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'imagetexture') and not(local-name() = 'ImageTexture')"><xsl:text>ImageTexture</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'imagetexture3d') and not(local-name() = 'ImageTexture3D')"><xsl:text>ImageTexture3D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'indexedfaceset') and not(local-name() = 'IndexedFaceSet')"><xsl:text>IndexedFaceSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'indexedlineset') and not(local-name() = 'IndexedLineSet')"><xsl:text>IndexedLineSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'indexedquadset') and not(local-name() = 'IndexedQuadSet')"><xsl:text>IndexedQuadSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'indexedtrianglefanset') and not(local-name() = 'IndexedTriangleFanSet')"><xsl:text>IndexedTriangleFanSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'indexedtriangleset') and not(local-name() = 'IndexedTriangleSet')"><xsl:text>IndexedTriangleSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'indexedtrianglestripset') and not(local-name() = 'IndexedTriangleStripSet')"><xsl:text>IndexedTriangleStripSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'inline') and not(local-name() = 'Inline')"><xsl:text>Inline</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'integersequencer') and not(local-name() = 'IntegerSequencer')"><xsl:text>IntegerSequencer</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'integertrigger') and not(local-name() = 'IntegerTrigger')"><xsl:text>IntegerTrigger</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'isosurfacevolumedata') and not(local-name() = 'IsoSurfaceVolumeData')"><xsl:text>IsoSurfaceVolumeData</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'keysensor') and not(local-name() = 'KeySensor')"><xsl:text>KeySensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lod') and not(local-name() = 'LOD')"><xsl:text>LOD</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'layer') and not(local-name() = 'Layer')"><xsl:text>Layer</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'layerset') and not(local-name() = 'LayerSet')"><xsl:text>LayerSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'layout') and not(local-name() = 'Layout')"><xsl:text>Layout</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'layoutgroup') and not(local-name() = 'LayoutGroup')"><xsl:text>LayoutGroup</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'layoutlayer') and not(local-name() = 'LayoutLayer')"><xsl:text>LayoutLayer</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'linepicksensor') and not(local-name() = 'LinePickSensor')"><xsl:text>LinePickSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lineproperties') and not(local-name() = 'LineProperties')"><xsl:text>LineProperties</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lineset') and not(local-name() = 'LineSet')"><xsl:text>LineSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'listenerpointsource') and not(local-name() = 'ListenerPointSource')"><xsl:text>ListenerPointSource</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'loadsensor') and not(local-name() = 'LoadSensor')"><xsl:text>LoadSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'localfog') and not(local-name() = 'LocalFog')"><xsl:text>LocalFog</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'material') and not(local-name() = 'Material')"><xsl:text>Material</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'matrix3vertexattribute') and not(local-name() = 'Matrix3VertexAttribute')"><xsl:text>Matrix3VertexAttribute</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'matrix4vertexattribute') and not(local-name() = 'Matrix4VertexAttribute')"><xsl:text>Matrix4VertexAttribute</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'metadataboolean') and not(local-name() = 'MetadataBoolean')"><xsl:text>MetadataBoolean</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'metadatadouble') and not(local-name() = 'MetadataDouble')"><xsl:text>MetadataDouble</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'metadatafloat') and not(local-name() = 'MetadataFloat')"><xsl:text>MetadataFloat</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'metadatainteger') and not(local-name() = 'MetadataInteger')"><xsl:text>MetadataInteger</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'metadataset') and not(local-name() = 'MetadataSet')"><xsl:text>MetadataSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'metadatastring') and not(local-name() = 'MetadataString')"><xsl:text>MetadataString</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'microphonesource') and not(local-name() = 'MicrophoneSource')"><xsl:text>MicrophoneSource</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'motorjoint') and not(local-name() = 'MotorJoint')"><xsl:text>MotorJoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'movietexture') and not(local-name() = 'MovieTexture')"><xsl:text>MovieTexture</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'multitexture') and not(local-name() = 'MultiTexture')"><xsl:text>MultiTexture</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'multitexturecoordinate') and not(local-name() = 'MultiTextureCoordinate')"><xsl:text>MultiTextureCoordinate</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'multitexturetransform') and not(local-name() = 'MultiTextureTransform')"><xsl:text>MultiTextureTransform</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'navigationinfo') and not(local-name() = 'NavigationInfo')"><xsl:text>NavigationInfo</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'normal') and not(local-name() = 'Normal')"><xsl:text>Normal</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'normalinterpolator') and not(local-name() = 'NormalInterpolator')"><xsl:text>NormalInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbscurve') and not(local-name() = 'NurbsCurve')"><xsl:text>NurbsCurve</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbscurve2d') and not(local-name() = 'NurbsCurve2D')"><xsl:text>NurbsCurve2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbsorientationinterpolator') and not(local-name() = 'NurbsOrientationInterpolator')"><xsl:text>NurbsOrientationInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbspatchsurface') and not(local-name() = 'NurbsPatchSurface')"><xsl:text>NurbsPatchSurface</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbspositioninterpolator') and not(local-name() = 'NurbsPositionInterpolator')"><xsl:text>NurbsPositionInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbsset') and not(local-name() = 'NurbsSet')"><xsl:text>NurbsSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbssurfaceinterpolator') and not(local-name() = 'NurbsSurfaceInterpolator')"><xsl:text>NurbsSurfaceInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbssweptsurface') and not(local-name() = 'NurbsSweptSurface')"><xsl:text>NurbsSweptSurface</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbsswungsurface') and not(local-name() = 'NurbsSwungSurface')"><xsl:text>NurbsSwungSurface</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbstexturecoordinate') and not(local-name() = 'NurbsTextureCoordinate')"><xsl:text>NurbsTextureCoordinate</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'nurbstrimmedsurface') and not(local-name() = 'NurbsTrimmedSurface')"><xsl:text>NurbsTrimmedSurface</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'opacitymapvolumestyle') and not(local-name() = 'OpacityMapVolumeStyle')"><xsl:text>OpacityMapVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'orientationchaser') and not(local-name() = 'OrientationChaser')"><xsl:text>OrientationChaser</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'orientationdamper') and not(local-name() = 'OrientationDamper')"><xsl:text>OrientationDamper</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'orientationinterpolator') and not(local-name() = 'OrientationInterpolator')"><xsl:text>OrientationInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'orthoviewpoint') and not(local-name() = 'OrthoViewpoint')"><xsl:text>OrthoViewpoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'oscillatorsource') and not(local-name() = 'OscillatorSource')"><xsl:text>OscillatorSource</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'packagedshader') and not(local-name() = 'PackagedShader')"><xsl:text>PackagedShader</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'particlesystem') and not(local-name() = 'ParticleSystem')"><xsl:text>ParticleSystem</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'periodicwave') and not(local-name() = 'PeriodicWave')"><xsl:text>PeriodicWave</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'physicalmaterial') and not(local-name() = 'PhysicalMaterial')"><xsl:text>PhysicalMaterial</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pickablegroup') and not(local-name() = 'PickableGroup')"><xsl:text>PickableGroup</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pixeltexture') and not(local-name() = 'PixelTexture')"><xsl:text>PixelTexture</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pixeltexture3d') and not(local-name() = 'PixelTexture3D')"><xsl:text>PixelTexture3D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'planesensor') and not(local-name() = 'PlaneSensor')"><xsl:text>PlaneSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pointemitter') and not(local-name() = 'PointEmitter')"><xsl:text>PointEmitter</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pointlight') and not(local-name() = 'PointLight')"><xsl:text>PointLight</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pointpicksensor') and not(local-name() = 'PointPickSensor')"><xsl:text>PointPickSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pointproperties') and not(local-name() = 'PointProperties')"><xsl:text>PointProperties</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pointset') and not(local-name() = 'PointSet')"><xsl:text>PointSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'polyline2d') and not(local-name() = 'Polyline2D')"><xsl:text>Polyline2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'polylineemitter') and not(local-name() = 'PolylineEmitter')"><xsl:text>PolylineEmitter</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'polypoint2d') and not(local-name() = 'Polypoint2D')"><xsl:text>Polypoint2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'positionchaser') and not(local-name() = 'PositionChaser')"><xsl:text>PositionChaser</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'positionchaser2d') and not(local-name() = 'PositionChaser2D')"><xsl:text>PositionChaser2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'positiondamper') and not(local-name() = 'PositionDamper')"><xsl:text>PositionDamper</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'positiondamper2d') and not(local-name() = 'PositionDamper2D')"><xsl:text>PositionDamper2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'positioninterpolator') and not(local-name() = 'PositionInterpolator')"><xsl:text>PositionInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'positioninterpolator2d') and not(local-name() = 'PositionInterpolator2D')"><xsl:text>PositionInterpolator2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'primitivepicksensor') and not(local-name() = 'PrimitivePickSensor')"><xsl:text>PrimitivePickSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'programshader') and not(local-name() = 'ProgramShader')"><xsl:text>ProgramShader</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'projectionvolumestyle') and not(local-name() = 'ProjectionVolumeStyle')"><xsl:text>ProjectionVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'protoinstance') and not(local-name() = 'ProtoInstance')"><xsl:text>ProtoInstance</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'proximitysensor') and not(local-name() = 'ProximitySensor')"><xsl:text>ProximitySensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'quadset') and not(local-name() = 'QuadSet')"><xsl:text>QuadSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'receiverpdu') and not(local-name() = 'ReceiverPdu')"><xsl:text>ReceiverPdu</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'rectangle2d') and not(local-name() = 'Rectangle2D')"><xsl:text>Rectangle2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'rigidbody') and not(local-name() = 'RigidBody')"><xsl:text>RigidBody</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'rigidbodycollection') and not(local-name() = 'RigidBodyCollection')"><xsl:text>RigidBodyCollection</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'scalarchaser') and not(local-name() = 'ScalarChaser')"><xsl:text>ScalarChaser</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'scalardamper') and not(local-name() = 'ScalarDamper')"><xsl:text>ScalarDamper</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'scalarinterpolator') and not(local-name() = 'ScalarInterpolator')"><xsl:text>ScalarInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'screenfontstyle') and not(local-name() = 'ScreenFontStyle')"><xsl:text>ScreenFontStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'screengroup') and not(local-name() = 'ScreenGroup')"><xsl:text>ScreenGroup</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'script') and not(local-name() = 'Script')"><xsl:text>Script</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'segmentedvolumedata') and not(local-name() = 'SegmentedVolumeData')"><xsl:text>SegmentedVolumeData</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'shadedvolumestyle') and not(local-name() = 'ShadedVolumeStyle')"><xsl:text>ShadedVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'shaderpart') and not(local-name() = 'ShaderPart')"><xsl:text>ShaderPart</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'shaderprogram') and not(local-name() = 'ShaderProgram')"><xsl:text>ShaderProgram</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'shape') and not(local-name() = 'Shape')"><xsl:text>Shape</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'signalpdu') and not(local-name() = 'SignalPdu')"><xsl:text>SignalPdu</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'silhouetteenhancementvolumestyle') and not(local-name() = 'SilhouetteEnhancementVolumeStyle')"><xsl:text>SilhouetteEnhancementVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'singleaxishingejoint') and not(local-name() = 'SingleAxisHingeJoint')"><xsl:text>SingleAxisHingeJoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'sliderjoint') and not(local-name() = 'SliderJoint')"><xsl:text>SliderJoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'sound') and not(local-name() = 'Sound')"><xsl:text>Sound</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'spatialsound') and not(local-name() = 'SpatialSound')"><xsl:text>SpatialSound</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'sphere') and not(local-name() = 'Sphere')"><xsl:text>Sphere</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'spheresensor') and not(local-name() = 'SphereSensor')"><xsl:text>SphereSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'splinepositioninterpolator') and not(local-name() = 'SplinePositionInterpolator')"><xsl:text>SplinePositionInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'splinepositioninterpolator2d') and not(local-name() = 'SplinePositionInterpolator2D')"><xsl:text>SplinePositionInterpolator2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'splinescalarinterpolator') and not(local-name() = 'SplineScalarInterpolator')"><xsl:text>SplineScalarInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'spotlight') and not(local-name() = 'SpotLight')"><xsl:text>SpotLight</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'squadorientationinterpolator') and not(local-name() = 'SquadOrientationInterpolator')"><xsl:text>SquadOrientationInterpolator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'staticgroup') and not(local-name() = 'StaticGroup')"><xsl:text>StaticGroup</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'streamaudiodestination') and not(local-name() = 'StreamAudioDestination')"><xsl:text>StreamAudioDestination</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'streamaudiosource') and not(local-name() = 'StreamAudioSource')"><xsl:text>StreamAudioSource</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stringsensor') and not(local-name() = 'StringSensor')"><xsl:text>StringSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'surfaceemitter') and not(local-name() = 'SurfaceEmitter')"><xsl:text>SurfaceEmitter</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'switch') and not(local-name() = 'Switch')"><xsl:text>Switch</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texcoordchaser2d') and not(local-name() = 'TexCoordChaser2D')"><xsl:text>TexCoordChaser2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texcoorddamper2d') and not(local-name() = 'TexCoordDamper2D')"><xsl:text>TexCoordDamper2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'text') and not(local-name() = 'Text')"><xsl:text>Text</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturebackground') and not(local-name() = 'TextureBackground')"><xsl:text>TextureBackground</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturecoordinate') and not(local-name() = 'TextureCoordinate')"><xsl:text>TextureCoordinate</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturecoordinate3d') and not(local-name() = 'TextureCoordinate3D')"><xsl:text>TextureCoordinate3D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturecoordinate4d') and not(local-name() = 'TextureCoordinate4D')"><xsl:text>TextureCoordinate4D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturecoordinategenerator') and not(local-name() = 'TextureCoordinateGenerator')"><xsl:text>TextureCoordinateGenerator</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'textureprojector') and not(local-name() = 'TextureProjector')"><xsl:text>TextureProjector</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'textureprojectorparallel') and not(local-name() = 'TextureProjectorParallel')"><xsl:text>TextureProjectorParallel</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'textureproperties') and not(local-name() = 'TextureProperties')"><xsl:text>TextureProperties</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturetransform') and not(local-name() = 'TextureTransform')"><xsl:text>TextureTransform</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturetransform3d') and not(local-name() = 'TextureTransform3D')"><xsl:text>TextureTransform3D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturetransformmatrix3d') and not(local-name() = 'TextureTransformMatrix3D')"><xsl:text>TextureTransformMatrix3D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'timesensor') and not(local-name() = 'TimeSensor')"><xsl:text>TimeSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'timetrigger') and not(local-name() = 'TimeTrigger')"><xsl:text>TimeTrigger</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'tonemappedvolumestyle') and not(local-name() = 'ToneMappedVolumeStyle')"><xsl:text>ToneMappedVolumeStyle</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'touchsensor') and not(local-name() = 'TouchSensor')"><xsl:text>TouchSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transform') and not(local-name() = 'Transform')"><xsl:text>Transform</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transformsensor') and not(local-name() = 'TransformSensor')"><xsl:text>TransformSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transmitterpdu') and not(local-name() = 'TransmitterPdu')"><xsl:text>TransmitterPdu</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'trianglefanset') and not(local-name() = 'TriangleFanSet')"><xsl:text>TriangleFanSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'triangleset') and not(local-name() = 'TriangleSet')"><xsl:text>TriangleSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'triangleset2d') and not(local-name() = 'TriangleSet2D')"><xsl:text>TriangleSet2D</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'trianglestripset') and not(local-name() = 'TriangleStripSet')"><xsl:text>TriangleStripSet</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'twosidedmaterial') and not(local-name() = 'TwoSidedMaterial')"><xsl:text>TwoSidedMaterial</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'universaljoint') and not(local-name() = 'UniversalJoint')"><xsl:text>UniversalJoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'unlitmaterial') and not(local-name() = 'UnlitMaterial')"><xsl:text>UnlitMaterial</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'viewpoint') and not(local-name() = 'Viewpoint')"><xsl:text>Viewpoint</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'viewpointgroup') and not(local-name() = 'ViewpointGroup')"><xsl:text>ViewpointGroup</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'viewport') and not(local-name() = 'Viewport')"><xsl:text>Viewport</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'visibilitysensor') and not(local-name() = 'VisibilitySensor')"><xsl:text>VisibilitySensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'volumedata') and not(local-name() = 'VolumeData')"><xsl:text>VolumeData</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'volumeemitter') and not(local-name() = 'VolumeEmitter')"><xsl:text>VolumeEmitter</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'volumepicksensor') and not(local-name() = 'VolumePickSensor')"><xsl:text>VolumePickSensor</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'waveshaper') and not(local-name() = 'WaveShaper')"><xsl:text>WaveShaper</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'windphysicsmodel') and not(local-name() = 'WindPhysicsModel')"><xsl:text>WindPhysicsModel</xsl:text></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'worldinfo') and not(local-name() = 'WorldInfo')"><xsl:text>WorldInfo</xsl:text></xsl:when>                <!-- *** finish: NodeName capitalization corrections generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->                <!-- *** start: fieldName capitalization corrections generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
                <xsl:when test="(lower-case(local-name()) = 'autocalc') and not(local-name() = 'autoCalc')"><xsl:text>autoCalc</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to autoCalc</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bboxcenter') and not(local-name() = 'bboxCenter')"><xsl:text>bboxCenter</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to bboxCenter</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bboxsize') and not(local-name() = 'bboxSize')"><xsl:text>bboxSize</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to bboxSize</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'begincap') and not(local-name() = 'beginCap')"><xsl:text>beginCap</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to beginCap</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bottomradius') and not(local-name() = 'bottomRadius')"><xsl:text>bottomRadius</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to bottomRadius</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'category') and not(local-name() = 'category')"><xsl:text>category</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to category</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'ccw') and not(local-name() = 'ccw')"><xsl:text>ccw</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to ccw</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'child1url') and not(local-name() = 'child1Url')"><xsl:text>child1Url</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to child1Url</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'child2url') and not(local-name() = 'child2Url')"><xsl:text>child2Url</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to child2Url</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'child3url') and not(local-name() = 'child3Url')"><xsl:text>child3Url</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to child3Url</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'child4url') and not(local-name() = 'child4Url')"><xsl:text>child4Url</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to child4Url</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'closed') and not(local-name() = 'closed')"><xsl:text>closed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to closed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'closuretype') and not(local-name() = 'closureType')"><xsl:text>closureType</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to closureType</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'colorkey') and not(local-name() = 'colorKey')"><xsl:text>colorKey</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to colorKey</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'colorindex') and not(local-name() = 'colorIndex')"><xsl:text>colorIndex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to colorIndex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'colorpervertex') and not(local-name() = 'colorPerVertex')"><xsl:text>colorPerVertex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to colorPerVertex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'convex') and not(local-name() = 'convex')"><xsl:text>convex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to convex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coordindex') and not(local-name() = 'coordIndex')"><xsl:text>coordIndex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to coordIndex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'country') and not(local-name() = 'country')"><xsl:text>country</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to country</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'creaseangle') and not(local-name() = 'creaseAngle')"><xsl:text>creaseAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to creaseAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'crosssection') and not(local-name() = 'crossSection')"><xsl:text>crossSection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to crossSection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'directoutput') and not(local-name() = 'directOutput')"><xsl:text>directOutput</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to directOutput</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'domain') and not(local-name() = 'domain')"><xsl:text>domain</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to domain</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'duration') and not(local-name() = 'duration')"><xsl:text>duration</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to duration</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'endcap') and not(local-name() = 'endCap')"><xsl:text>endCap</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to endCap</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'endangle') and not(local-name() = 'endAngle')"><xsl:text>endAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to endAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'extra') and not(local-name() = 'extra')"><xsl:text>extra</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to extra</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'forcetransitions') and not(local-name() = 'forceTransitions')"><xsl:text>forceTransitions</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to forceTransitions</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'generatemipmaps') and not(local-name() = 'generateMipMaps')"><xsl:text>generateMipMaps</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to generateMipMaps</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geogridorigin') and not(local-name() = 'geoGridOrigin')"><xsl:text>geoGridOrigin</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to geoGridOrigin</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geometrytype') and not(local-name() = 'geometryType')"><xsl:text>geometryType</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to geometryType</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geosystem') and not(local-name() = 'geoSystem')"><xsl:text>geoSystem</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to geoSystem</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'height') and not(local-name() = 'height')"><xsl:text>height</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to height</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'index') and not(local-name() = 'index')"><xsl:text>index</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to index</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'initialdestination') and not(local-name() = 'initialDestination')"><xsl:text>initialDestination</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to initialDestination</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'initialvalue') and not(local-name() = 'initialValue')"><xsl:text>initialValue</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to initialValue</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'innerradius') and not(local-name() = 'innerRadius')"><xsl:text>innerRadius</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to innerRadius</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'internal') and not(local-name() = 'internal')"><xsl:text>internal</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to internal</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'intersectiontype') and not(local-name() = 'intersectionType')"><xsl:text>intersectionType</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to intersectionType</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'kind') and not(local-name() = 'kind')"><xsl:text>kind</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to kind</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'knot') and not(local-name() = 'knot')"><xsl:text>knot</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to knot</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'language') and not(local-name() = 'language')"><xsl:text>language</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to language</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'linesegments') and not(local-name() = 'lineSegments')"><xsl:text>lineSegments</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to lineSegments</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'mustevaluate') and not(local-name() = 'mustEvaluate')"><xsl:text>mustEvaluate</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to mustEvaluate</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'normalindex') and not(local-name() = 'normalIndex')"><xsl:text>normalIndex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to normalIndex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'normalpervertex') and not(local-name() = 'normalPerVertex')"><xsl:text>normalPerVertex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to normalPerVertex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'numcomponents') and not(local-name() = 'numComponents')"><xsl:text>numComponents</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to numComponents</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'order') and not(local-name() = 'order')"><xsl:text>order</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to order</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'outerradius') and not(local-name() = 'outerRadius')"><xsl:text>outerRadius</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to outerRadius</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'phasefunction') and not(local-name() = 'phaseFunction')"><xsl:text>phaseFunction</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to phaseFunction</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'radius') and not(local-name() = 'radius')"><xsl:text>radius</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to radius</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'range') and not(local-name() = 'range')"><xsl:text>range</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to range</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'repeatr') and not(local-name() = 'repeatR')"><xsl:text>repeatR</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to repeatR</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'repeats') and not(local-name() = 'repeatS')"><xsl:text>repeatS</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to repeatS</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'repeatt') and not(local-name() = 'repeatT')"><xsl:text>repeatT</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to repeatT</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'rooturl') and not(local-name() = 'rootUrl')"><xsl:text>rootUrl</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to rootUrl</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'rotateyup') and not(local-name() = 'rotateYUp')"><xsl:text>rotateYUp</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to rotateYUp</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'size') and not(local-name() = 'size')"><xsl:text>size</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to size</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'sortorder') and not(local-name() = 'sortOrder')"><xsl:text>sortOrder</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to sortOrder</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'spatialize') and not(local-name() = 'spatialize')"><xsl:text>spatialize</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to spatialize</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'specific') and not(local-name() = 'specific')"><xsl:text>specific</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to specific</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'speedfactor') and not(local-name() = 'speedFactor')"><xsl:text>speedFactor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to speedFactor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'spine') and not(local-name() = 'spine')"><xsl:text>spine</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to spine</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'startangle') and not(local-name() = 'startAngle')"><xsl:text>startAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to startAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'subcategory') and not(local-name() = 'subcategory')"><xsl:text>subcategory</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to subcategory</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texcoordindex') and not(local-name() = 'texCoordIndex')"><xsl:text>texCoordIndex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to texCoordIndex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texcoordkey') and not(local-name() = 'texCoordKey')"><xsl:text>texCoordKey</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to texCoordKey</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'uclosed') and not(local-name() = 'uClosed')"><xsl:text>uClosed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to uClosed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'udimension') and not(local-name() = 'uDimension')"><xsl:text>uDimension</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to uDimension</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'uknot') and not(local-name() = 'uKnot')"><xsl:text>uKnot</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to uKnot</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'uorder') and not(local-name() = 'uOrder')"><xsl:text>uOrder</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to uOrder</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'vclosed') and not(local-name() = 'vClosed')"><xsl:text>vClosed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to vClosed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'vdimension') and not(local-name() = 'vDimension')"><xsl:text>vDimension</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to vDimension</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'vknot') and not(local-name() = 'vKnot')"><xsl:text>vKnot</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to vKnot</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'vorder') and not(local-name() = 'vOrder')"><xsl:text>vOrder</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to vOrder</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'xdimension') and not(local-name() = 'xDimension')"><xsl:text>xDimension</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to xDimension</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'xspacing') and not(local-name() = 'xSpacing')"><xsl:text>xSpacing</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to xSpacing</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'zdimension') and not(local-name() = 'zDimension')"><xsl:text>zDimension</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to zDimension</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'zspacing') and not(local-name() = 'zSpacing')"><xsl:text>zSpacing</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to zSpacing</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'absorption') and not(local-name() = 'absorption')"><xsl:text>absorption</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to absorption</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'activelayer') and not(local-name() = 'activeLayer')"><xsl:text>activeLayer</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to activeLayer</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'address') and not(local-name() = 'address')"><xsl:text>address</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to address</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'align') and not(local-name() = 'align')"><xsl:text>align</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to align</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'alpha') and not(local-name() = 'alpha')"><xsl:text>alpha</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to alpha</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'alphacutoff') and not(local-name() = 'alphaCutoff')"><xsl:text>alphaCutoff</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to alphaCutoff</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'alphamode') and not(local-name() = 'alphaMode')"><xsl:text>alphaMode</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to alphaMode</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'ambientintensity') and not(local-name() = 'ambientIntensity')"><xsl:text>ambientIntensity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to ambientIntensity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'ambienttexturemapping') and not(local-name() = 'ambientTextureMapping')"><xsl:text>ambientTextureMapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to ambientTextureMapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'anchorpoint') and not(local-name() = 'anchorPoint')"><xsl:text>anchorPoint</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to anchorPoint</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'angle') and not(local-name() = 'angle')"><xsl:text>angle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to angle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'angulardampingfactor') and not(local-name() = 'angularDampingFactor')"><xsl:text>angularDampingFactor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to angularDampingFactor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'angularvelocity') and not(local-name() = 'angularVelocity')"><xsl:text>angularVelocity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to angularVelocity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'anisotropicdegree') and not(local-name() = 'anisotropicDegree')"><xsl:text>anisotropicDegree</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to anisotropicDegree</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'antennalocation') and not(local-name() = 'antennaLocation')"><xsl:text>antennaLocation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to antennaLocation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'applicationid') and not(local-name() = 'applicationID')"><xsl:text>applicationID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to applicationID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'applied') and not(local-name() = 'applied')"><xsl:text>applied</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to applied</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'appliedparameters') and not(local-name() = 'appliedParameters')"><xsl:text>appliedParameters</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to appliedParameters</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'antennapatterntype') and not(local-name() = 'antennaPatternType')"><xsl:text>antennaPatternType</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to antennaPatternType</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'antennapatternlength') and not(local-name() = 'antennaPatternLength')"><xsl:text>antennaPatternLength</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to antennaPatternLength</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'articulationparameterarray') and not(local-name() = 'articulationParameterArray')"><xsl:text>articulationParameterArray</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to articulationParameterArray</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'articulationparameterchangeindicatorarray') and not(local-name() = 'articulationParameterChangeIndicatorArray')"><xsl:text>articulationParameterChangeIndicatorArray</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to articulationParameterChangeIndicatorArray</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'articulationparametercount') and not(local-name() = 'articulationParameterCount')"><xsl:text>articulationParameterCount</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to articulationParameterCount</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'articulationparameterdesignatorarray') and not(local-name() = 'articulationParameterDesignatorArray')"><xsl:text>articulationParameterDesignatorArray</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to articulationParameterDesignatorArray</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'articulationparameteridpartattachedtoarray') and not(local-name() = 'articulationParameterIdPartAttachedToArray')"><xsl:text>articulationParameterIdPartAttachedToArray</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to articulationParameterIdPartAttachedToArray</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'articulationparametertypearray') and not(local-name() = 'articulationParameterTypeArray')"><xsl:text>articulationParameterTypeArray</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to articulationParameterTypeArray</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'attack') and not(local-name() = 'attack')"><xsl:text>attack</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to attack</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'attenuation') and not(local-name() = 'attenuation')"><xsl:text>attenuation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to attenuation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'autodamp') and not(local-name() = 'autoDamp')"><xsl:text>autoDamp</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to autoDamp</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'autodisable') and not(local-name() = 'autoDisable')"><xsl:text>autoDisable</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to autoDisable</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'autooffset') and not(local-name() = 'autoOffset')"><xsl:text>autoOffset</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to autoOffset</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'autorefresh') and not(local-name() = 'autoRefresh')"><xsl:text>autoRefresh</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to autoRefresh</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'autorefreshtimelimit') and not(local-name() = 'autoRefreshTimeLimit')"><xsl:text>autoRefreshTimeLimit</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to autoRefreshTimeLimit</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'avatarsize') and not(local-name() = 'avatarSize')"><xsl:text>avatarSize</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to avatarSize</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axis') and not(local-name() = 'axis')"><xsl:text>axis</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axis</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axis1') and not(local-name() = 'axis1')"><xsl:text>axis1</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axis1</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axis1angle') and not(local-name() = 'axis1Angle')"><xsl:text>axis1Angle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axis1Angle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axis1torque') and not(local-name() = 'axis1Torque')"><xsl:text>axis1Torque</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axis1Torque</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axis2') and not(local-name() = 'axis2')"><xsl:text>axis2</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axis2</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axis2angle') and not(local-name() = 'axis2Angle')"><xsl:text>axis2Angle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axis2Angle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axis2torque') and not(local-name() = 'axis2Torque')"><xsl:text>axis2Torque</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axis2Torque</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axis3angle') and not(local-name() = 'axis3Angle')"><xsl:text>axis3Angle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axis3Angle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axis3torque') and not(local-name() = 'axis3Torque')"><xsl:text>axis3Torque</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axis3Torque</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axisofrotation') and not(local-name() = 'axisOfRotation')"><xsl:text>axisOfRotation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axisOfRotation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'axisrotation') and not(local-name() = 'axisRotation')"><xsl:text>axisRotation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to axisRotation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'backambientintensity') and not(local-name() = 'backAmbientIntensity')"><xsl:text>backAmbientIntensity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to backAmbientIntensity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'backdiffusecolor') and not(local-name() = 'backDiffuseColor')"><xsl:text>backDiffuseColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to backDiffuseColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'backemissivecolor') and not(local-name() = 'backEmissiveColor')"><xsl:text>backEmissiveColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to backEmissiveColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'backshininess') and not(local-name() = 'backShininess')"><xsl:text>backShininess</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to backShininess</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'backspecularcolor') and not(local-name() = 'backSpecularColor')"><xsl:text>backSpecularColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to backSpecularColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'backtexture') and not(local-name() = 'backTexture')"><xsl:text>backTexture</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to backTexture</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'backtransparency') and not(local-name() = 'backTransparency')"><xsl:text>backTransparency</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to backTransparency</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'backurl') and not(local-name() = 'backUrl')"><xsl:text>backUrl</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to backUrl</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'basecolor') and not(local-name() = 'baseColor')"><xsl:text>baseColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to baseColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'basetexturemapping') and not(local-name() = 'baseTextureMapping')"><xsl:text>baseTextureMapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to baseTextureMapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'beamwidth') and not(local-name() = 'beamWidth')"><xsl:text>beamWidth</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to beamWidth</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bottom') and not(local-name() = 'bottom')"><xsl:text>bottom</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to bottom</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bottomtexture') and not(local-name() = 'bottomTexture')"><xsl:text>bottomTexture</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to bottomTexture</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bottomurl') and not(local-name() = 'bottomUrl')"><xsl:text>bottomUrl</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to bottomUrl</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bounce') and not(local-name() = 'bounce')"><xsl:text>bounce</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to bounce</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'boundaryopacity') and not(local-name() = 'boundaryOpacity')"><xsl:text>boundaryOpacity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to boundaryOpacity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bordercolor') and not(local-name() = 'borderColor')"><xsl:text>borderColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to borderColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'borderwidth') and not(local-name() = 'borderWidth')"><xsl:text>borderWidth</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to borderWidth</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'boundarymodes') and not(local-name() = 'boundaryModeS')"><xsl:text>boundaryModeS</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to boundaryModeS</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'boundarymodet') and not(local-name() = 'boundaryModeT')"><xsl:text>boundaryModeT</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to boundaryModeT</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'boundarymoder') and not(local-name() = 'boundaryModeR')"><xsl:text>boundaryModeR</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to boundaryModeR</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'buffer') and not(local-name() = 'buffer')"><xsl:text>buffer</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to buffer</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bufferduration') and not(local-name() = 'bufferDuration')"><xsl:text>bufferDuration</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to bufferDuration</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'center') and not(local-name() = 'center')"><xsl:text>center</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to center</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'castshadow') and not(local-name() = 'castShadow')"><xsl:text>castShadow</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to castShadow</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'centerofmass') and not(local-name() = 'centerOfMass')"><xsl:text>centerOfMass</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to centerOfMass</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'centerofrotation') and not(local-name() = 'centerOfRotation')"><xsl:text>centerOfRotation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to centerOfRotation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'class') and not(local-name() = 'class')"><xsl:text>class</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to class</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'clipboundary') and not(local-name() = 'clipBoundary')"><xsl:text>clipBoundary</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to clipBoundary</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'channels') and not(local-name() = 'channels')"><xsl:text>channels</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to channels</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'channelcountmode') and not(local-name() = 'channelCountMode')"><xsl:text>channelCountMode</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to channelCountMode</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'channelinterpretation') and not(local-name() = 'channelInterpretation')"><xsl:text>channelInterpretation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to channelInterpretation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'channelselection') and not(local-name() = 'channelSelection')"><xsl:text>channelSelection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to channelSelection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'channelsenabled') and not(local-name() = 'channelsEnabled')"><xsl:text>channelsEnabled</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to channelsEnabled</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'gain') and not(local-name() = 'gain')"><xsl:text>gain</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to gain</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'collisiontype') and not(local-name() = 'collisionType')"><xsl:text>collisionType</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to collisionType</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'color') and not(local-name() = 'color')"><xsl:text>color</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to color</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'colorsteps') and not(local-name() = 'colorSteps')"><xsl:text>colorSteps</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to colorSteps</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coneinnerangle') and not(local-name() = 'coneInnerAngle')"><xsl:text>coneInnerAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to coneInnerAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coneouterangle') and not(local-name() = 'coneOuterAngle')"><xsl:text>coneOuterAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to coneOuterAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coneoutergain') and not(local-name() = 'coneOuterGain')"><xsl:text>coneOuterGain</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to coneOuterGain</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'contactnormal') and not(local-name() = 'contactNormal')"><xsl:text>contactNormal</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to contactNormal</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'contourstepsize') and not(local-name() = 'contourStepSize')"><xsl:text>contourStepSize</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to contourStepSize</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'controlpoint') and not(local-name() = 'controlPoint')"><xsl:text>controlPoint</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to controlPoint</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'constantforcemix') and not(local-name() = 'constantForceMix')"><xsl:text>constantForceMix</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to constantForceMix</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'contactsurfacethickness') and not(local-name() = 'contactSurfaceThickness')"><xsl:text>contactSurfaceThickness</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to contactSurfaceThickness</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'coolcolor') and not(local-name() = 'coolColor')"><xsl:text>coolColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to coolColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'createparticles') and not(local-name() = 'createParticles')"><xsl:text>createParticles</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to createParticles</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cryptosystem') and not(local-name() = 'cryptoSystem')"><xsl:text>cryptoSystem</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to cryptoSystem</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cryptokeyid') and not(local-name() = 'cryptoKeyID')"><xsl:text>cryptoKeyID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to cryptoKeyID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cutoffangle') and not(local-name() = 'cutOffAngle')"><xsl:text>cutOffAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to cutOffAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'cycleinterval') and not(local-name() = 'cycleInterval')"><xsl:text>cycleInterval</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to cycleInterval</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'data') and not(local-name() = 'data')"><xsl:text>data</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to data</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'datalength') and not(local-name() = 'dataLength')"><xsl:text>dataLength</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to dataLength</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'deadreckoning') and not(local-name() = 'deadReckoning')"><xsl:text>deadReckoning</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to deadReckoning</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'delaytime') and not(local-name() = 'delayTime')"><xsl:text>delayTime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to delayTime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'deletionallowed') and not(local-name() = 'deletionAllowed')"><xsl:text>deletionAllowed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to deletionAllowed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'depth') and not(local-name() = 'depth')"><xsl:text>depth</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to depth</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'description') and not(local-name() = 'description')"><xsl:text>description</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to description</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'desiredangularvelocity1') and not(local-name() = 'desiredAngularVelocity1')"><xsl:text>desiredAngularVelocity1</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to desiredAngularVelocity1</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'desiredangularvelocity2') and not(local-name() = 'desiredAngularVelocity2')"><xsl:text>desiredAngularVelocity2</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to desiredAngularVelocity2</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'detonationlocation') and not(local-name() = 'detonationLocation')"><xsl:text>detonationLocation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to detonationLocation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'detonationrelativelocation') and not(local-name() = 'detonationRelativeLocation')"><xsl:text>detonationRelativeLocation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to detonationRelativeLocation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'detonationresult') and not(local-name() = 'detonationResult')"><xsl:text>detonationResult</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to detonationResult</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'detune') and not(local-name() = 'detune')"><xsl:text>detune</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to detune</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'diffuse') and not(local-name() = 'diffuse')"><xsl:text>diffuse</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to diffuse</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'diffusecoefficients') and not(local-name() = 'diffuseCoefficients')"><xsl:text>diffuseCoefficients</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to diffuseCoefficients</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'diffusecolor') and not(local-name() = 'diffuseColor')"><xsl:text>diffuseColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to diffuseColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'diffusetexturemapping') and not(local-name() = 'diffuseTextureMapping')"><xsl:text>diffuseTextureMapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to diffuseTextureMapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'dimensions') and not(local-name() = 'dimensions')"><xsl:text>dimensions</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to dimensions</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'direction') and not(local-name() = 'direction')"><xsl:text>direction</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to direction</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'disableangularspeed') and not(local-name() = 'disableAngularSpeed')"><xsl:text>disableAngularSpeed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to disableAngularSpeed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'disablelinearspeed') and not(local-name() = 'disableLinearSpeed')"><xsl:text>disableLinearSpeed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to disableLinearSpeed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'disabletime') and not(local-name() = 'disableTime')"><xsl:text>disableTime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to disableTime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'diskangle') and not(local-name() = 'diskAngle')"><xsl:text>diskAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to diskAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'displacements') and not(local-name() = 'displacements')"><xsl:text>displacements</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to displacements</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'bboxdisplay') and not(local-name() = 'bboxDisplay')"><xsl:text>bboxDisplay</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to bboxDisplay</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'detune') and not(local-name() = 'detune')"><xsl:text>detune</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to detune</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'displayed') and not(local-name() = 'displayed')"><xsl:text>displayed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to displayed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'distancemodel') and not(local-name() = 'distanceModel')"><xsl:text>distanceModel</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to distanceModel</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'easeineaseout') and not(local-name() = 'easeInEaseOut')"><xsl:text>easeInEaseOut</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to easeInEaseOut</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'edgecolor') and not(local-name() = 'edgeColor')"><xsl:text>edgeColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to edgeColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'emissivecolor') and not(local-name() = 'emissiveColor')"><xsl:text>emissiveColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to emissiveColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'emissivetexturemapping') and not(local-name() = 'emissiveTextureMapping')"><xsl:text>emissiveTextureMapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to emissiveTextureMapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'enabled') and not(local-name() = 'enabled')"><xsl:text>enabled</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to enabled</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'enabledaxes') and not(local-name() = 'enabledAxes')"><xsl:text>enabledAxes</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to enabledAxes</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'dopplerenabled') and not(local-name() = 'dopplerEnabled')"><xsl:text>dopplerEnabled</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to dopplerEnabled</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'enablehrtf') and not(local-name() = 'enableHRTF')"><xsl:text>enableHRTF</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to enableHRTF</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'encodingscheme') and not(local-name() = 'encodingScheme')"><xsl:text>encodingScheme</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to encodingScheme</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'endframe') and not(local-name() = 'endFrame')"><xsl:text>endFrame</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to endFrame</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'entityid') and not(local-name() = 'entityID')"><xsl:text>entityID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to entityID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'entitykind') and not(local-name() = 'entityKind')"><xsl:text>entityKind</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to entityKind</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'entitydomain') and not(local-name() = 'entityDomain')"><xsl:text>entityDomain</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to entityDomain</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'entitycountry') and not(local-name() = 'entityCountry')"><xsl:text>entityCountry</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to entityCountry</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'entitycategory') and not(local-name() = 'entityCategory')"><xsl:text>entityCategory</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to entityCategory</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'entitysubcategory') and not(local-name() = 'entitySubcategory')"><xsl:text>entitySubcategory</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to entitySubcategory</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'entityspecific') and not(local-name() = 'entitySpecific')"><xsl:text>entitySpecific</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to entitySpecific</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'entityextra') and not(local-name() = 'entityExtra')"><xsl:text>entityExtra</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to entityExtra</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'errorcorrection') and not(local-name() = 'errorCorrection')"><xsl:text>errorCorrection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to errorCorrection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'eventapplicationid') and not(local-name() = 'eventApplicationID')"><xsl:text>eventApplicationID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to eventApplicationID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'evententityid') and not(local-name() = 'eventEntityID')"><xsl:text>eventEntityID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to eventEntityID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'eventnumber') and not(local-name() = 'eventNumber')"><xsl:text>eventNumber</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to eventNumber</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'eventsiteid') and not(local-name() = 'eventSiteID')"><xsl:text>eventSiteID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to eventSiteID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'family') and not(local-name() = 'family')"><xsl:text>family</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to family</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fancount') and not(local-name() = 'fanCount')"><xsl:text>fanCount</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to fanCount</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fardistance') and not(local-name() = 'farDistance')"><xsl:text>farDistance</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to farDistance</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fftsize') and not(local-name() = 'fftSize')"><xsl:text>fftSize</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to fftSize</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fieldofview') and not(local-name() = 'fieldOfView')"><xsl:text>fieldOfView</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to fieldOfView</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'filled') and not(local-name() = 'filled')"><xsl:text>filled</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to filled</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'finiterotationaxis') and not(local-name() = 'finiteRotationAxis')"><xsl:text>finiteRotationAxis</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to finiteRotationAxis</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fired1') and not(local-name() = 'fired1')"><xsl:text>fired1</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to fired1</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fired2') and not(local-name() = 'fired2')"><xsl:text>fired2</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to fired2</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'firemissionindex') and not(local-name() = 'fireMissionIndex')"><xsl:text>fireMissionIndex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to fireMissionIndex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'firingrange') and not(local-name() = 'firingRange')"><xsl:text>firingRange</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to firingRange</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'firingrate') and not(local-name() = 'firingRate')"><xsl:text>firingRate</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to firingRate</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fixed') and not(local-name() = 'fixed')"><xsl:text>fixed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to fixed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fogtype') and not(local-name() = 'fogType')"><xsl:text>fogType</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to fogType</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'force') and not(local-name() = 'force')"><xsl:text>force</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to force</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'forceid') and not(local-name() = 'forceID')"><xsl:text>forceID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to forceID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'forceoutput') and not(local-name() = 'forceOutput')"><xsl:text>forceOutput</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to forceOutput</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'forces') and not(local-name() = 'forces')"><xsl:text>forces</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to forces</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'framecount') and not(local-name() = 'frameCount')"><xsl:text>frameCount</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frameCount</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'frameduration') and not(local-name() = 'frameDuration')"><xsl:text>frameDuration</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frameDuration</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'frameincrement') and not(local-name() = 'frameIncrement')"><xsl:text>frameIncrement</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frameIncrement</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'frameindex') and not(local-name() = 'frameIndex')"><xsl:text>frameIndex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frameIndex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'frequency') and not(local-name() = 'frequency')"><xsl:text>frequency</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frequency</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'frequencybincount') and not(local-name() = 'frequencyBinCount')"><xsl:text>frequencyBinCount</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frequencyBinCount</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'frictioncoefficients') and not(local-name() = 'frictionCoefficients')"><xsl:text>frictionCoefficients</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frictionCoefficients</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'frictiondirection') and not(local-name() = 'frictionDirection')"><xsl:text>frictionDirection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frictionDirection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fronttexture') and not(local-name() = 'frontTexture')"><xsl:text>frontTexture</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frontTexture</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fronturl') and not(local-name() = 'frontUrl')"><xsl:text>frontUrl</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to frontUrl</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'function') and not(local-name() = 'function')"><xsl:text>function</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to function</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'fuse') and not(local-name() = 'fuse')"><xsl:text>fuse</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to fuse</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'gain') and not(local-name() = 'gain')"><xsl:text>gain</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to gain</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geocenter') and not(local-name() = 'geoCenter')"><xsl:text>geoCenter</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to geoCenter</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'geocoords') and not(local-name() = 'geoCoords')"><xsl:text>geoCoords</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to geoCoords</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'global') and not(local-name() = 'global')"><xsl:text>global</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to global</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'gradientthreshold') and not(local-name() = 'gradientThreshold')"><xsl:text>gradientThreshold</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to gradientThreshold</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'gravity') and not(local-name() = 'gravity')"><xsl:text>gravity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to gravity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'groundangle') and not(local-name() = 'groundAngle')"><xsl:text>groundAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to groundAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'groundcolor') and not(local-name() = 'groundColor')"><xsl:text>groundColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to groundColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'gustiness') and not(local-name() = 'gustiness')"><xsl:text>gustiness</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to gustiness</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'hatchcolor') and not(local-name() = 'hatchColor')"><xsl:text>hatchColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to hatchColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'hatched') and not(local-name() = 'hatched')"><xsl:text>hatched</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to hatched</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'hatchstyle') and not(local-name() = 'hatchStyle')"><xsl:text>hatchStyle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to hatchStyle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'headlight') and not(local-name() = 'headlight')"><xsl:text>headlight</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to headlight</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'horizontal') and not(local-name() = 'horizontal')"><xsl:text>horizontal</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to horizontal</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'id') and not(local-name() = 'id')"><xsl:text>id</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to id</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'image') and not(local-name() = 'image')"><xsl:text>image</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to image</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'inertia') and not(local-name() = 'inertia')"><xsl:text>inertia</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to inertia</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'info') and not(local-name() = 'info')"><xsl:text>info</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to info</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'inputsource') and not(local-name() = 'inputSource')"><xsl:text>inputSource</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to inputSource</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'integerkey') and not(local-name() = 'integerKey')"><xsl:text>integerKey</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to integerKey</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'intensity') and not(local-name() = 'intensity')"><xsl:text>intensity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to intensity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'intensitythreshold') and not(local-name() = 'intensityThreshold')"><xsl:text>intensityThreshold</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to intensityThreshold</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'interauraldistance') and not(local-name() = 'interauralDistance')"><xsl:text>interauralDistance</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to interauralDistance</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'iterations') and not(local-name() = 'iterations')"><xsl:text>iterations</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to iterations</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'jointbindingpositions') and not(local-name() = 'jointBindingPositions')"><xsl:text>jointBindingPositions</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to jointBindingPositions</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'jointbindingrotations') and not(local-name() = 'jointBindingRotations')"><xsl:text>jointBindingRotations</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to jointBindingRotations</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'jointbindingscales') and not(local-name() = 'jointBindingScales')"><xsl:text>jointBindingScales</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to jointBindingScales</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'joints') and not(local-name() = 'joints')"><xsl:text>joints</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to joints</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'justify') and not(local-name() = 'justify')"><xsl:text>justify</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to justify</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'key') and not(local-name() = 'key')"><xsl:text>key</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to key</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'knee') and not(local-name() = 'knee')"><xsl:text>knee</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to knee</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'keyvelocity') and not(local-name() = 'keyVelocity')"><xsl:text>keyVelocity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to keyVelocity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'jump') and not(local-name() = 'jump')"><xsl:text>jump</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to jump</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'keyvalue') and not(local-name() = 'keyValue')"><xsl:text>keyValue</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to keyValue</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'language') and not(local-name() = 'language')"><xsl:text>language</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to language</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lefttexture') and not(local-name() = 'leftTexture')"><xsl:text>leftTexture</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to leftTexture</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lefttoright') and not(local-name() = 'leftToRight')"><xsl:text>leftToRight</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to leftToRight</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lefturl') and not(local-name() = 'leftUrl')"><xsl:text>leftUrl</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to leftUrl</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'length') and not(local-name() = 'length')"><xsl:text>length</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to length</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lengthofmodulationparameters') and not(local-name() = 'lengthOfModulationParameters')"><xsl:text>lengthOfModulationParameters</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to lengthOfModulationParameters</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lifetimevariation') and not(local-name() = 'lifetimeVariation')"><xsl:text>lifetimeVariation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to lifetimeVariation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lighting') and not(local-name() = 'lighting')"><xsl:text>lighting</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to lighting</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'limitorientation') and not(local-name() = 'limitOrientation')"><xsl:text>limitOrientation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to limitOrientation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'linearacceleration') and not(local-name() = 'linearAcceleration')"><xsl:text>linearAcceleration</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to linearAcceleration</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'lineardampingfactor') and not(local-name() = 'linearDampingFactor')"><xsl:text>linearDampingFactor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to linearDampingFactor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'linearvelocity') and not(local-name() = 'linearVelocity')"><xsl:text>linearVelocity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to linearVelocity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'linetype') and not(local-name() = 'linetype')"><xsl:text>linetype</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to linetype</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'linewidthscalefactor') and not(local-name() = 'linewidthScaleFactor')"><xsl:text>linewidthScaleFactor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to linewidthScaleFactor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'llimit') and not(local-name() = 'llimit')"><xsl:text>llimit</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to llimit</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'loa') and not(local-name() = 'loa')"><xsl:text>loa</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to loa</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'load') and not(local-name() = 'load')"><xsl:text>load</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to load</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'location') and not(local-name() = 'location')"><xsl:text>location</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to location</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'loop') and not(local-name() = 'loop')"><xsl:text>loop</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to loop</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'loopend') and not(local-name() = 'loopEnd')"><xsl:text>loopEnd</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to loopEnd</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'loopstart') and not(local-name() = 'loopStart')"><xsl:text>loopStart</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to loopStart</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'mapping') and not(local-name() = 'mapping')"><xsl:text>mapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to mapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'marking') and not(local-name() = 'marking')"><xsl:text>marking</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to marking</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'mass') and not(local-name() = 'mass')"><xsl:text>mass</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to mass</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'magnificationfilter') and not(local-name() = 'magnificationFilter')"><xsl:text>magnificationFilter</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to magnificationFilter</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'matchcriterion') and not(local-name() = 'matchCriterion')"><xsl:text>matchCriterion</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to matchCriterion</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'matrix') and not(local-name() = 'matrix')"><xsl:text>matrix</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to matrix</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxangle') and not(local-name() = 'maxAngle')"><xsl:text>maxAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxangle1') and not(local-name() = 'maxAngle1')"><xsl:text>maxAngle1</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxAngle1</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxback') and not(local-name() = 'maxBack')"><xsl:text>maxBack</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxBack</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxchannelcount') and not(local-name() = 'maxChannelCount')"><xsl:text>maxChannelCount</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxChannelCount</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxcorrectionspeed') and not(local-name() = 'maxCorrectionSpeed')"><xsl:text>maxCorrectionSpeed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxCorrectionSpeed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxdecibels') and not(local-name() = 'maxDecibels')"><xsl:text>maxDecibels</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxDecibels</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxdelaytime') and not(local-name() = 'maxDelayTime')"><xsl:text>maxDelayTime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxDelayTime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxdistance') and not(local-name() = 'maxDistance')"><xsl:text>maxDistance</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxDistance</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxextent') and not(local-name() = 'maxExtent')"><xsl:text>maxExtent</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxExtent</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxfront') and not(local-name() = 'maxFront')"><xsl:text>maxFront</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxFront</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxparticles') and not(local-name() = 'maxParticles')"><xsl:text>maxParticles</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxParticles</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxposition') and not(local-name() = 'maxPosition')"><xsl:text>maxPosition</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxPosition</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxseparation') and not(local-name() = 'maxSeparation')"><xsl:text>maxSeparation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxSeparation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxtorque1') and not(local-name() = 'maxTorque1')"><xsl:text>maxTorque1</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxTorque1</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'maxtorque2') and not(local-name() = 'maxTorque2')"><xsl:text>maxTorque2</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to maxTorque2</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'mediadeviceid') and not(local-name() = 'mediaDeviceID')"><xsl:text>mediaDeviceID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to mediaDeviceID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'metallic') and not(local-name() = 'metallic')"><xsl:text>metallic</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to metallic</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'metallicroughnesstexturemapping') and not(local-name() = 'metallicRoughnessTextureMapping')"><xsl:text>metallicRoughnessTextureMapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to metallicRoughnessTextureMapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'minangle') and not(local-name() = 'minAngle')"><xsl:text>minAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to minAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'minangle1') and not(local-name() = 'minAngle1')"><xsl:text>minAngle1</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to minAngle1</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'minback') and not(local-name() = 'minBack')"><xsl:text>minBack</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to minBack</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'minbouncespeed') and not(local-name() = 'minBounceSpeed')"><xsl:text>minBounceSpeed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to minBounceSpeed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'mindecibels') and not(local-name() = 'minDecibels')"><xsl:text>minDecibels</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to minDecibels</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'minfront') and not(local-name() = 'minFront')"><xsl:text>minFront</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to minFront</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'minificationfilter') and not(local-name() = 'minificationFilter')"><xsl:text>minificationFilter</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to minificationFilter</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'minposition') and not(local-name() = 'minPosition')"><xsl:text>minPosition</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to minPosition</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'minseparation') and not(local-name() = 'minSeparation')"><xsl:text>minSeparation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to minSeparation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'mode') and not(local-name() = 'mode')"><xsl:text>mode</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to mode</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'modulationtypespreadspectrum') and not(local-name() = 'modulationTypeSpreadSpectrum')"><xsl:text>modulationTypeSpreadSpectrum</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to modulationTypeSpreadSpectrum</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'modulationtypemajor') and not(local-name() = 'modulationTypeMajor')"><xsl:text>modulationTypeMajor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to modulationTypeMajor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'modulationtypedetail') and not(local-name() = 'modulationTypeDetail')"><xsl:text>modulationTypeDetail</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to modulationTypeDetail</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'modulationtypesystem') and not(local-name() = 'modulationTypeSystem')"><xsl:text>modulationTypeSystem</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to modulationTypeSystem</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'momentsofinertia') and not(local-name() = 'momentsOfInertia')"><xsl:text>momentsOfInertia</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to momentsOfInertia</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'motor1axis') and not(local-name() = 'motor1Axis')"><xsl:text>motor1Axis</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to motor1Axis</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'motor2axis') and not(local-name() = 'motor2Axis')"><xsl:text>motor2Axis</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to motor2Axis</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'motor3axis') and not(local-name() = 'motor3Axis')"><xsl:text>motor3Axis</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to motor3Axis</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'multicastrelayhost') and not(local-name() = 'multicastRelayHost')"><xsl:text>multicastRelayHost</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to multicastRelayHost</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'multicastrelayport') and not(local-name() = 'multicastRelayPort')"><xsl:text>multicastRelayPort</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to multicastRelayPort</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'munitionendpoint') and not(local-name() = 'munitionEndPoint')"><xsl:text>munitionEndPoint</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to munitionEndPoint</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'munitionstartpoint') and not(local-name() = 'munitionStartPoint')"><xsl:text>munitionStartPoint</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to munitionStartPoint</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'munitionapplicationid') and not(local-name() = 'munitionApplicationID')"><xsl:text>munitionApplicationID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to munitionApplicationID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'munitionentityid') and not(local-name() = 'munitionEntityID')"><xsl:text>munitionEntityID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to munitionEntityID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'munitionsiteid') and not(local-name() = 'munitionSiteID')"><xsl:text>munitionSiteID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to munitionSiteID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'munitionquantity') and not(local-name() = 'munitionQuantity')"><xsl:text>munitionQuantity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to munitionQuantity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'name') and not(local-name() = 'name')"><xsl:text>name</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to name</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'neardistance') and not(local-name() = 'nearDistance')"><xsl:text>nearDistance</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to nearDistance</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'networkmode') and not(local-name() = 'networkMode')"><xsl:text>networkMode</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to networkMode</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'normalscale') and not(local-name() = 'normalScale')"><xsl:text>normalScale</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to normalScale</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'normaltexturemapping') and not(local-name() = 'normalTextureMapping')"><xsl:text>normalTextureMapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to normalTextureMapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'numberofchannels') and not(local-name() = 'numberOfChannels')"><xsl:text>numberOfChannels</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to numberOfChannels</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'normalize') and not(local-name() = 'normalize')"><xsl:text>normalize</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to normalize</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'normalizevelocity') and not(local-name() = 'normalizeVelocity')"><xsl:text>normalizeVelocity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to normalizeVelocity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'objecttype') and not(local-name() = 'objectType')"><xsl:text>objectType</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to objectType</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'occlusionstrength') and not(local-name() = 'occlusionStrength')"><xsl:text>occlusionStrength</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to occlusionStrength</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'occlusiontexturemapping') and not(local-name() = 'occlusionTextureMapping')"><xsl:text>occlusionTextureMapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to occlusionTextureMapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'offset') and not(local-name() = 'offset')"><xsl:text>offset</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to offset</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'offsetunits') and not(local-name() = 'offsetUnits')"><xsl:text>offsetUnits</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to offsetUnits</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'on') and not(local-name() = 'on')"><xsl:text>on</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to on</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'opacityfactor') and not(local-name() = 'opacityFactor')"><xsl:text>opacityFactor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to opacityFactor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'optionsimag') and not(local-name() = 'optionsImag')"><xsl:text>optionsImag</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to optionsImag</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'optionsreal') and not(local-name() = 'optionsReal')"><xsl:text>optionsReal</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to optionsReal</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'orientation') and not(local-name() = 'orientation')"><xsl:text>orientation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to orientation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'orthogonalcolor') and not(local-name() = 'orthogonalColor')"><xsl:text>orthogonalColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to orthogonalColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'oversample') and not(local-name() = 'oversample')"><xsl:text>oversample</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to oversample</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'parallelcolor') and not(local-name() = 'parallelColor')"><xsl:text>parallelColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to parallelColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'parameter') and not(local-name() = 'parameter')"><xsl:text>parameter</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to parameter</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'particlelifetime') and not(local-name() = 'particleLifetime')"><xsl:text>particleLifetime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to particleLifetime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'particlesize') and not(local-name() = 'particleSize')"><xsl:text>particleSize</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to particleSize</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pausetime') and not(local-name() = 'pauseTime')"><xsl:text>pauseTime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to pauseTime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pickable') and not(local-name() = 'pickable')"><xsl:text>pickable</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to pickable</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pitch') and not(local-name() = 'pitch')"><xsl:text>pitch</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to pitch</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'plane') and not(local-name() = 'plane')"><xsl:text>plane</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to plane</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'playbackrate') and not(local-name() = 'playbackRate')"><xsl:text>playbackRate</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to playbackRate</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'point') and not(local-name() = 'point')"><xsl:text>point</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to point</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pointsize') and not(local-name() = 'pointSize')"><xsl:text>pointSize</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to pointSize</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pointsizescalefactor') and not(local-name() = 'pointSizeScaleFactor')"><xsl:text>pointSizeScaleFactor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to pointSizeScaleFactor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pointsizeminvalue') and not(local-name() = 'pointSizeMinValue')"><xsl:text>pointSizeMinValue</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to pointSizeMinValue</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'pointsizemaxvalue') and not(local-name() = 'pointSizeMaxValue')"><xsl:text>pointSizeMaxValue</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to pointSizeMaxValue</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'port') and not(local-name() = 'port')"><xsl:text>port</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to port</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'position') and not(local-name() = 'position')"><xsl:text>position</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to position</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'power') and not(local-name() = 'power')"><xsl:text>power</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to power</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'preferaccuracy') and not(local-name() = 'preferAccuracy')"><xsl:text>preferAccuracy</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to preferAccuracy</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'priority') and not(local-name() = 'priority')"><xsl:text>priority</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to priority</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'qualityfactor') and not(local-name() = 'qualityFactor')"><xsl:text>qualityFactor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to qualityFactor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'radioid') and not(local-name() = 'radioID')"><xsl:text>radioID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to radioID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'radioentitytypekind') and not(local-name() = 'radioEntityTypeKind')"><xsl:text>radioEntityTypeKind</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to radioEntityTypeKind</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'radioentitytypedomain') and not(local-name() = 'radioEntityTypeDomain')"><xsl:text>radioEntityTypeDomain</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to radioEntityTypeDomain</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'radioentitytypecountry') and not(local-name() = 'radioEntityTypeCountry')"><xsl:text>radioEntityTypeCountry</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to radioEntityTypeCountry</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'radioentitytypecategory') and not(local-name() = 'radioEntityTypeCategory')"><xsl:text>radioEntityTypeCategory</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to radioEntityTypeCategory</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'radioentitytypenomenclature') and not(local-name() = 'radioEntityTypeNomenclature')"><xsl:text>radioEntityTypeNomenclature</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to radioEntityTypeNomenclature</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'radioentitytypenomenclatureversion') and not(local-name() = 'radioEntityTypeNomenclatureVersion')"><xsl:text>radioEntityTypeNomenclatureVersion</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to radioEntityTypeNomenclatureVersion</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'ratio') and not(local-name() = 'ratio')"><xsl:text>ratio</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to ratio</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'readinterval') and not(local-name() = 'readInterval')"><xsl:text>readInterval</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to readInterval</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'receivedpower') and not(local-name() = 'receivedPower')"><xsl:text>receivedPower</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to receivedPower</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'receiverstate') and not(local-name() = 'receiverState')"><xsl:text>receiverState</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to receiverState</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'reference') and not(local-name() = 'reference')"><xsl:text>reference</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to reference</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'referencedistance') and not(local-name() = 'referenceDistance')"><xsl:text>referenceDistance</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to referenceDistance</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'refraction') and not(local-name() = 'refraction')"><xsl:text>refraction</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to refraction</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'refresh') and not(local-name() = 'refresh')"><xsl:text>refresh</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to refresh</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'relativeantennalocation') and not(local-name() = 'relativeAntennaLocation')"><xsl:text>relativeAntennaLocation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to relativeAntennaLocation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'release') and not(local-name() = 'release')"><xsl:text>release</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to release</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'retainedopacity') and not(local-name() = 'retainedOpacity')"><xsl:text>retainedOpacity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to retainedOpacity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'retainuseroffsets') and not(local-name() = 'retainUserOffsets')"><xsl:text>retainUserOffsets</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to retainUserOffsets</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'resumetime') and not(local-name() = 'resumeTime')"><xsl:text>resumeTime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to resumeTime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'righttexture') and not(local-name() = 'rightTexture')"><xsl:text>rightTexture</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to rightTexture</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'righturl') and not(local-name() = 'rightUrl')"><xsl:text>rightUrl</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to rightUrl</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'rollofffactor') and not(local-name() = 'rolloffFactor')"><xsl:text>rolloffFactor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to rolloffFactor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'rotation') and not(local-name() = 'rotation')"><xsl:text>rotation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to rotation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'roughness') and not(local-name() = 'roughness')"><xsl:text>roughness</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to roughness</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'rtpheaderexpected') and not(local-name() = 'rtpHeaderExpected')"><xsl:text>rtpHeaderExpected</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to rtpHeaderExpected</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'samplerate') and not(local-name() = 'sampleRate')"><xsl:text>sampleRate</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to sampleRate</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'samples') and not(local-name() = 'samples')"><xsl:text>samples</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to samples</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'scale') and not(local-name() = 'scale')"><xsl:text>scale</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to scale</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'scalemode') and not(local-name() = 'scaleMode')"><xsl:text>scaleMode</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to scaleMode</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'scaleorientation') and not(local-name() = 'scaleOrientation')"><xsl:text>scaleOrientation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to scaleOrientation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'segmentenabled') and not(local-name() = 'segmentEnabled')"><xsl:text>segmentEnabled</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to segmentEnabled</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'separatebackcolor') and not(local-name() = 'separateBackColor')"><xsl:text>separateBackColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to separateBackColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'shininess') and not(local-name() = 'shininess')"><xsl:text>shininess</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to shininess</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'shadowintensity') and not(local-name() = 'shadowIntensity')"><xsl:text>shadowIntensity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to shadowIntensity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'shadows') and not(local-name() = 'shadows')"><xsl:text>shadows</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to shadows</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'side') and not(local-name() = 'side')"><xsl:text>side</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to side</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'shininesstexturemapping') and not(local-name() = 'shininessTextureMapping')"><xsl:text>shininessTextureMapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to shininessTextureMapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'silhouetteboundaryopacity') and not(local-name() = 'silhouetteBoundaryOpacity')"><xsl:text>silhouetteBoundaryOpacity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to silhouetteBoundaryOpacity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'silhouetteretainedopacity') and not(local-name() = 'silhouetteRetainedOpacity')"><xsl:text>silhouetteRetainedOpacity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to silhouetteRetainedOpacity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'silhouettesharpness') and not(local-name() = 'silhouetteSharpness')"><xsl:text>silhouetteSharpness</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to silhouetteSharpness</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'siteid') and not(local-name() = 'siteID')"><xsl:text>siteID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to siteID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'size') and not(local-name() = 'size')"><xsl:text>size</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to size</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'sizeunits') and not(local-name() = 'sizeUnits')"><xsl:text>sizeUnits</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to sizeUnits</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'skeletalconfiguration') and not(local-name() = 'skeletalConfiguration')"><xsl:text>skeletalConfiguration</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to skeletalConfiguration</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'skincoordindex') and not(local-name() = 'skinCoordIndex')"><xsl:text>skinCoordIndex</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to skinCoordIndex</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'skincoordweight') and not(local-name() = 'skinCoordWeight')"><xsl:text>skinCoordWeight</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to skinCoordWeight</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'skycolor') and not(local-name() = 'skyColor')"><xsl:text>skyColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to skyColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'skyangle') and not(local-name() = 'skyAngle')"><xsl:text>skyAngle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to skyAngle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'sliderforce') and not(local-name() = 'sliderForce')"><xsl:text>sliderForce</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to sliderForce</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'slipcoefficients') and not(local-name() = 'slipCoefficients')"><xsl:text>slipCoefficients</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to slipCoefficients</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'slipfactors') and not(local-name() = 'slipFactors')"><xsl:text>slipFactors</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to slipFactors</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'smoothingtimeconstant') and not(local-name() = 'smoothingTimeConstant')"><xsl:text>smoothingTimeConstant</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to smoothingTimeConstant</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'softnessconstantforcemix') and not(local-name() = 'softnessConstantForceMix')"><xsl:text>softnessConstantForceMix</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to softnessConstantForceMix</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'softnesserrorcorrection') and not(local-name() = 'softnessErrorCorrection')"><xsl:text>softnessErrorCorrection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to softnessErrorCorrection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'solid') and not(local-name() = 'solid')"><xsl:text>solid</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to solid</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'source') and not(local-name() = 'source')"><xsl:text>source</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to source</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'spacing') and not(local-name() = 'spacing')"><xsl:text>spacing</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to spacing</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'specular') and not(local-name() = 'specular')"><xsl:text>specular</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to specular</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'specularcolor') and not(local-name() = 'specularColor')"><xsl:text>specularColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to specularColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'speculartexturemapping') and not(local-name() = 'specularTextureMapping')"><xsl:text>specularTextureMapping</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to specularTextureMapping</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'speed') and not(local-name() = 'speed')"><xsl:text>speed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to speed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'startframe') and not(local-name() = 'startFrame')"><xsl:text>startFrame</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to startFrame</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'starttime') and not(local-name() = 'startTime')"><xsl:text>startTime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to startTime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stiffness') and not(local-name() = 'stiffness')"><xsl:text>stiffness</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stiffness</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stopbounce') and not(local-name() = 'stopBounce')"><xsl:text>stopBounce</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stopBounce</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stoperrorcorrection') and not(local-name() = 'stopErrorCorrection')"><xsl:text>stopErrorCorrection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stopErrorCorrection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stop1constantforcemix') and not(local-name() = 'stop1ConstantForceMix')"><xsl:text>stop1ConstantForceMix</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stop1ConstantForceMix</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stop1bounce') and not(local-name() = 'stop1Bounce')"><xsl:text>stop1Bounce</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stop1Bounce</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stop2bounce') and not(local-name() = 'stop2Bounce')"><xsl:text>stop2Bounce</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stop2Bounce</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stop3bounce') and not(local-name() = 'stop3Bounce')"><xsl:text>stop3Bounce</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stop3Bounce</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stop1errorcorrection') and not(local-name() = 'stop1ErrorCorrection')"><xsl:text>stop1ErrorCorrection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stop1ErrorCorrection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stop2errorcorrection') and not(local-name() = 'stop2ErrorCorrection')"><xsl:text>stop2ErrorCorrection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stop2ErrorCorrection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stop3errorcorrection') and not(local-name() = 'stop3ErrorCorrection')"><xsl:text>stop3ErrorCorrection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stop3ErrorCorrection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stoptime') and not(local-name() = 'stopTime')"><xsl:text>stopTime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stopTime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'streamidentifier') and not(local-name() = 'streamIdentifier')"><xsl:text>streamIdentifier</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to streamIdentifier</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'string') and not(local-name() = 'string')"><xsl:text>string</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to string</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'stripcount') and not(local-name() = 'stripCount')"><xsl:text>stripCount</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to stripCount</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'style') and not(local-name() = 'style')"><xsl:text>style</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to style</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'summary') and not(local-name() = 'summary')"><xsl:text>summary</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to summary</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'surfacearea') and not(local-name() = 'surfaceArea')"><xsl:text>surfaceArea</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to surfaceArea</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'surfacespeed') and not(local-name() = 'surfaceSpeed')"><xsl:text>surfaceSpeed</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to surfaceSpeed</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'surfacetolerance') and not(local-name() = 'surfaceTolerance')"><xsl:text>surfaceTolerance</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to surfaceTolerance</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'surfacevalues') and not(local-name() = 'surfaceValues')"><xsl:text>surfaceValues</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to surfaceValues</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'suspensionerrorcorrection') and not(local-name() = 'suspensionErrorCorrection')"><xsl:text>suspensionErrorCorrection</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to suspensionErrorCorrection</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'suspensionforce') and not(local-name() = 'suspensionForce')"><xsl:text>suspensionForce</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to suspensionForce</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'tailtime') and not(local-name() = 'tailTime')"><xsl:text>tailTime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to tailTime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'tau') and not(local-name() = 'tau')"><xsl:text>tau</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to tau</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'tdltype') and not(local-name() = 'tdlType')"><xsl:text>tdlType</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to tdlType</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'tessellation') and not(local-name() = 'tessellation')"><xsl:text>tessellation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to tessellation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'tessellationscale') and not(local-name() = 'tessellationScale')"><xsl:text>tessellationScale</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to tessellationScale</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturecompression') and not(local-name() = 'textureCompression')"><xsl:text>textureCompression</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to textureCompression</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'texturepriority') and not(local-name() = 'texturePriority')"><xsl:text>texturePriority</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to texturePriority</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'threshold') and not(local-name() = 'threshold')"><xsl:text>threshold</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to threshold</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'timeout') and not(local-name() = 'timeOut')"><xsl:text>timeOut</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to timeOut</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'title') and not(local-name() = 'title')"><xsl:text>title</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to title</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'toggle') and not(local-name() = 'toggle')"><xsl:text>toggle</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to toggle</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'tolerance') and not(local-name() = 'tolerance')"><xsl:text>tolerance</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to tolerance</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'top') and not(local-name() = 'top')"><xsl:text>top</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to top</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'toptexture') and not(local-name() = 'topTexture')"><xsl:text>topTexture</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to topTexture</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'toptobottom') and not(local-name() = 'topToBottom')"><xsl:text>topToBottom</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to topToBottom</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'topurl') and not(local-name() = 'topUrl')"><xsl:text>topUrl</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to topUrl</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'torques') and not(local-name() = 'torques')"><xsl:text>torques</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to torques</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'trackcurrentview') and not(local-name() = 'trackCurrentView')"><xsl:text>trackCurrentView</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to trackCurrentView</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transitiontime') and not(local-name() = 'transitionTime')"><xsl:text>transitionTime</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to transitionTime</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transitiontype') and not(local-name() = 'transitionType')"><xsl:text>transitionType</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to transitionType</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'translation') and not(local-name() = 'translation')"><xsl:text>translation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to translation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transmitfrequencybandwidth') and not(local-name() = 'transmitFrequencyBandwidth')"><xsl:text>transmitFrequencyBandwidth</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to transmitFrequencyBandwidth</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transmitstate') and not(local-name() = 'transmitState')"><xsl:text>transmitState</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to transmitState</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transmitterapplicationid') and not(local-name() = 'transmitterApplicationID')"><xsl:text>transmitterApplicationID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to transmitterApplicationID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transmitterentityid') and not(local-name() = 'transmitterEntityID')"><xsl:text>transmitterEntityID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to transmitterEntityID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transmitterradioid') and not(local-name() = 'transmitterRadioID')"><xsl:text>transmitterRadioID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to transmitterRadioID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transmittersiteid') and not(local-name() = 'transmitterSiteID')"><xsl:text>transmitterSiteID</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to transmitterSiteID</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'transparency') and not(local-name() = 'transparency')"><xsl:text>transparency</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to transparency</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'turbulence') and not(local-name() = 'turbulence')"><xsl:text>turbulence</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to turbulence</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'type') and not(local-name() = 'type')"><xsl:text>type</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to type</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'ulimit') and not(local-name() = 'ulimit')"><xsl:text>ulimit</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to ulimit</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'upvector') and not(local-name() = 'upVector')"><xsl:text>upVector</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to upVector</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'update') and not(local-name() = 'update')"><xsl:text>update</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to update</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'url') and not(local-name() = 'url')"><xsl:text>url</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to url</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'usefiniterotation') and not(local-name() = 'useFiniteRotation')"><xsl:text>useFiniteRotation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to useFiniteRotation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'usegeometry') and not(local-name() = 'useGeometry')"><xsl:text>useGeometry</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to useGeometry</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'useglobalgravity') and not(local-name() = 'useGlobalGravity')"><xsl:text>useGlobalGravity</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to useGlobalGravity</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'utessellation') and not(local-name() = 'uTessellation')"><xsl:text>uTessellation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to uTessellation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'variation') and not(local-name() = 'variation')"><xsl:text>variation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to variation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'value') and not(local-name() = 'value')"><xsl:text>value</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to value</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'values') and not(local-name() = 'values')"><xsl:text>values</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to values</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'version') and not(local-name() = 'version')"><xsl:text>version</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to version</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'vector') and not(local-name() = 'vector')"><xsl:text>vector</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to vector</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'vertexcount') and not(local-name() = 'vertexCount')"><xsl:text>vertexCount</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to vertexCount</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'vertices') and not(local-name() = 'vertices')"><xsl:text>vertices</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to vertices</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'viewall') and not(local-name() = 'viewAll')"><xsl:text>viewAll</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to viewAll</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'visibilitylimit') and not(local-name() = 'visibilityLimit')"><xsl:text>visibilityLimit</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to visibilityLimit</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'visibilityrange') and not(local-name() = 'visibilityRange')"><xsl:text>visibilityRange</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to visibilityRange</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'visible') and not(local-name() = 'visible')"><xsl:text>visible</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to visible</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'vtessellation') and not(local-name() = 'vTessellation')"><xsl:text>vTessellation</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to vTessellation</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'warhead') and not(local-name() = 'warhead')"><xsl:text>warhead</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to warhead</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'warmcolor') and not(local-name() = 'warmColor')"><xsl:text>warmColor</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to warmColor</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'weight') and not(local-name() = 'weight')"><xsl:text>weight</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to weight</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'weightconstant1') and not(local-name() = 'weightConstant1')"><xsl:text>weightConstant1</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to weightConstant1</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'weightconstant2') and not(local-name() = 'weightConstant2')"><xsl:text>weightConstant2</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to weightConstant2</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'weightfunction1') and not(local-name() = 'weightFunction1')"><xsl:text>weightFunction1</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to weightFunction1</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'weightfunction2') and not(local-name() = 'weightFunction2')"><xsl:text>weightFunction2</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to weightFunction2</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'whichchoice') and not(local-name() = 'whichChoice')"><xsl:text>whichChoice</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to whichChoice</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'whichgeometry') and not(local-name() = 'whichGeometry')"><xsl:text>whichGeometry</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to whichGeometry</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'writeinterval') and not(local-name() = 'writeInterval')"><xsl:text>writeInterval</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to writeInterval</xsl:text></xsl:message></xsl:when>
                <xsl:when test="(lower-case(local-name()) = 'yscale') and not(local-name() = 'yScale')"><xsl:text>yScale</xsl:text><xsl:message><xsl:text>*** fix attribute capitalization, change </xsl:text><xsl:value-of select="local-name(.)"/><xsl:text> to yScale</xsl:text></xsl:message></xsl:when>                <!-- *** finish: fieldName capitalization corrections generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <!-- *** start: HAnim2 HAnimJoint alias conversion generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <xsl:when
           test="(local-name(..)='HAnimJoint') and (local-name()='name') and $isHAnim2 and ((.='SIJ') or (.='SI joint') or (.='l_ankle') or (.='l_talocalcaneal') or (.='l_cuneonavicular') or (.='l_subtalar') or (.='l_tarsometatarsal') or (.='l_midtarsal') or (.='l_metatarsophalangeal') or (.='l_tarsal_proximal_interphalangeal') or (.='l_tarsal_distal_interphalangeal') or (.='l_calcaneuscuboid') or (.='r_ankle') or (.='r_talocalcaneal') or (.='r_cuneonavicular') or (.='r_subtalar') or (.='r_tarsometatarsal') or (.='r_midtarsal') or (.='r_metatarsophalangeal') or (.='r_tarsal_proximal_interphalangeal') or (.='r_metatarsal') or (.='r_tarsal_distal_interphalangeal') or (.='r_calcaneuscuboid') or (.='l_wrist') or (.='l_thumb1') or (.='l_thumb2') or (.='l_thumb3') or (.='l_index0') or (.='l_carpometacarpal') or (.='l_index1') or (.='l_metacarpophalangeal') or (.='l_index2') or (.='l_carpal_proximal_interphalangeal') or (.='l_index3') or (.='l_carpal_distal_interphalangeal') or (.='l_middle0') or (.='l_middle1') or (.='l_middle2') or (.='l_middle3') or (.='l_ring0') or (.='l_ring1') or (.='l_ring2') or (.='l_ring3') or (.='l_pinky0') or (.='l_pinky1') or (.='l_pinky2') or (.='l_pinky3') or (.='r_wrist') or (.='r_thumb1') or (.='r_thumb2') or (.='r_thumb3') or (.='r_index0') or (.='r_carpometacarpal') or (.='r_index1') or (.='r_metacarpophalangeal') or (.='r_index2') or (.='r_carpal_proximal_interphalangeal') or (.='r_index3') or (.='r_carpal_distal_interphalangeal') or (.='r_middle0') or (.='r_middle1') or (.='r_middle2') or (.='r_middle3') or (.='r_ring0') or (.='r_ring1') or (.='r_ring2') or (.='r_ring3') or (.='r_pinky0') or (.='r_pinky1') or (.='r_pinky2') or (.='r_pinky3'))">
        <xsl:variable name="newName">
            <!-- find preferred value for this alias -->
            <xsl:choose>
                <xsl:when test="(.='SIJ')"><xsl:text>sacroiliac</xsl:text></xsl:when>
                <xsl:when test="(.='SI joint')"><xsl:text>sacroiliac</xsl:text></xsl:when>
                <xsl:when test="(.='l_ankle')"><xsl:text>l_talocrural</xsl:text></xsl:when>
                <xsl:when test="(.='l_talocalcaneal')"><xsl:text>l_talocalcaneonavicular</xsl:text></xsl:when>
                <xsl:when test="(.='l_cuneonavicular')"><xsl:text>l_cuneonavicular_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_subtalar')"><xsl:text>l_tarsometatarsal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_tarsometatarsal')"><xsl:text>l_tarsometatarsal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_midtarsal')"><xsl:text>l_metatarsophalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_metatarsophalangeal')"><xsl:text>l_metatarsophalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_tarsal_proximal_interphalangeal')"><xsl:text>l_tarsal_proximal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_tarsal_distal_interphalangeal')"><xsl:text>l_tarsal_distal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_calcaneuscuboid')"><xsl:text>l_calcaneocuboid</xsl:text></xsl:when>
                <xsl:when test="(.='r_ankle')"><xsl:text>r_talocrural</xsl:text></xsl:when>
                <xsl:when test="(.='r_talocalcaneal')"><xsl:text>r_talocalcaneonavicular</xsl:text></xsl:when>
                <xsl:when test="(.='r_cuneonavicular')"><xsl:text>r_cuneonavicular_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_subtalar')"><xsl:text>r_tarsometatarsal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_tarsometatarsal')"><xsl:text>r_tarsometatarsal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_midtarsal')"><xsl:text>r_metatarsophalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_metatarsophalangeal')"><xsl:text>r_metatarsophalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_tarsal_proximal_interphalangeal')"><xsl:text>r_tarsal_proximal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_metatarsal')"><xsl:text>r_tarsal_distal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_tarsal_distal_interphalangeal')"><xsl:text>r_tarsal_distal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_calcaneuscuboid')"><xsl:text>r_calcaneocuboid</xsl:text></xsl:when>
                <xsl:when test="(.='l_wrist')"><xsl:text>l_radiocarpal</xsl:text></xsl:when>
                <xsl:when test="(.='l_thumb1')"><xsl:text>l_carpometacarpal_1</xsl:text></xsl:when>
                <xsl:when test="(.='l_thumb2')"><xsl:text>l_metacarpophalangeal_1</xsl:text></xsl:when>
                <xsl:when test="(.='l_thumb3')"><xsl:text>l_carpal_interphalangeal_1</xsl:text></xsl:when>
                <xsl:when test="(.='l_index0')"><xsl:text>l_carpometacarpal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_carpometacarpal')"><xsl:text>l_carpometacarpal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_index1')"><xsl:text>l_metacarpophalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_metacarpophalangeal')"><xsl:text>l_metacarpophalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_index2')"><xsl:text>l_carpal_proximal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_carpal_proximal_interphalangeal')"><xsl:text>l_carpal_proximal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_index3')"><xsl:text>l_carpal_distal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_carpal_distal_interphalangeal')"><xsl:text>l_carpal_distal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_middle0')"><xsl:text>l_carpometacarpal_3</xsl:text></xsl:when>
                <xsl:when test="(.='l_middle1')"><xsl:text>l_metacarpophalangeal_3</xsl:text></xsl:when>
                <xsl:when test="(.='l_middle2')"><xsl:text>l_carpal_proximal_interphalangeal_3</xsl:text></xsl:when>
                <xsl:when test="(.='l_middle3')"><xsl:text>l_carpal_distal_interphalangeal_3</xsl:text></xsl:when>
                <xsl:when test="(.='l_ring0')"><xsl:text>l_carpometacarpal_4</xsl:text></xsl:when>
                <xsl:when test="(.='l_ring1')"><xsl:text>l_metacarpophalangeal_4</xsl:text></xsl:when>
                <xsl:when test="(.='l_ring2')"><xsl:text>l_carpal_proximal_interphalangeal_4</xsl:text></xsl:when>
                <xsl:when test="(.='l_ring3')"><xsl:text>l_carpal_distal_interphalangeal_4</xsl:text></xsl:when>
                <xsl:when test="(.='l_pinky0')"><xsl:text>l_carpometacarpal_5</xsl:text></xsl:when>
                <xsl:when test="(.='l_pinky1')"><xsl:text>l_metacarpophalangeal_5</xsl:text></xsl:when>
                <xsl:when test="(.='l_pinky2')"><xsl:text>l_carpal_proximal_interphalangeal_5</xsl:text></xsl:when>
                <xsl:when test="(.='l_pinky3')"><xsl:text>l_carpal_distal_interphalangeal_5</xsl:text></xsl:when>
                <xsl:when test="(.='r_wrist')"><xsl:text>r_radiocarpal</xsl:text></xsl:when>
                <xsl:when test="(.='r_thumb1')"><xsl:text>r_carpometacarpal_1</xsl:text></xsl:when>
                <xsl:when test="(.='r_thumb2')"><xsl:text>r_metacarpophalangeal_1</xsl:text></xsl:when>
                <xsl:when test="(.='r_thumb3')"><xsl:text>r_carpal_interphalangeal_1</xsl:text></xsl:when>
                <xsl:when test="(.='r_index0')"><xsl:text>r_carpometacarpal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_carpometacarpal')"><xsl:text>r_carpometacarpal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_index1')"><xsl:text>r_metacarpophalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_metacarpophalangeal')"><xsl:text>r_metacarpophalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_index2')"><xsl:text>r_carpal_proximal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_carpal_proximal_interphalangeal')"><xsl:text>r_carpal_proximal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_index3')"><xsl:text>r_carpal_distal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_carpal_distal_interphalangeal')"><xsl:text>r_carpal_distal_interphalangeal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_middle0')"><xsl:text>r_carpometacarpal_3</xsl:text></xsl:when>
                <xsl:when test="(.='r_middle1')"><xsl:text>r_metacarpophalangeal_3</xsl:text></xsl:when>
                <xsl:when test="(.='r_middle2')"><xsl:text>r_carpal_proximal_interphalangeal_3</xsl:text></xsl:when>
                <xsl:when test="(.='r_middle3')"><xsl:text>r_carpal_distal_interphalangeal_3</xsl:text></xsl:when>
                <xsl:when test="(.='r_ring0')"><xsl:text>r_carpometacarpal_4</xsl:text></xsl:when>
                <xsl:when test="(.='r_ring1')"><xsl:text>r_metacarpophalangeal_4</xsl:text></xsl:when>
                <xsl:when test="(.='r_ring2')"><xsl:text>r_carpal_proximal_interphalangeal_4</xsl:text></xsl:when>
                <xsl:when test="(.='r_ring3')"><xsl:text>r_carpal_distal_interphalangeal_4</xsl:text></xsl:when>
                <xsl:when test="(.='r_pinky0')"><xsl:text>r_carpometacarpal_5</xsl:text></xsl:when>
                <xsl:when test="(.='r_pinky1')"><xsl:text>r_metacarpophalangeal_5</xsl:text></xsl:when>
                <xsl:when test="(.='r_pinky2')"><xsl:text>r_carpal_proximal_interphalangeal_5</xsl:text></xsl:when>
                <xsl:when test="(.='r_pinky3')"><xsl:text>r_carpal_distal_interphalangeal_5</xsl:text></xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="."/>
                    <!-- <xsl:message>
                        <xsl:text>*** internal error: improper diagnostic for HAnimJoint alias conversion of name='</xsl:text>
                        <xsl:value-of select="."/>
                        <xsl:text>', retaining original value</xsl:text>
                    </xsl:message> -->
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:value-of select='$newName'/>
        <xsl:if test="not(. = $newName)">
            <xsl:message>
                <xsl:text>*** replaced HAnim2 </xsl:text>
                <xsl:value-of select="local-name(..)"/>
                <xsl:text> alias </xsl:text>
                <xsl:value-of select="local-name()"/>
                <xsl:text>='</xsl:text>
                <xsl:value-of select="."/>
                <xsl:text>' with preferred name='</xsl:text>
                <xsl:value-of select='$newName'/>
                <xsl:text>' (run X3dTidy again to fix corresponding DEF and USE references)</xsl:text>
            </xsl:message>
        </xsl:if>
      </xsl:when>
      <!-- *** finish HAnim2 HAnimJoint alias conversion generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <!-- *** start: HAnim2 HAnimSegment alias conversion generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <xsl:when
           test="(local-name(..)='HAnimSegment') and (local-name()='name') and $isHAnim2 and ((.='l_hindfoot') or (.='l_cuneiform') or (.='l_midproximal') or (.='l_metatarsal') or (.='l_middistal') or (.='l_tarsal_proximal_phalanx') or (.='l_tarsal_middle_phalanx') or (.='l_forefoot') or (.='l_tarsal_distal_phalanx') or (.='l_calcaneum') or (.='r_hindfoot') or (.='r_cuneiform') or (.='r_midproximal') or (.='r_middistal') or (.='r_tarsal_proximal_phalanx') or (.='r_tarsal_middle_phalanx') or (.='r_forefoot') or (.='r_tarsal_distal_phalanx') or (.='r_calcaneum') or (.='head') or (.='l_hand') or (.='l_thumb_metacarpal') or (.='l_thumb_proximal') or (.='l_thumb_distal') or (.='l_index_metacarpal') or (.='l_index_proximal') or (.='l_carpal_proximal_phalanx') or (.='l_index_middle') or (.='l_carpal_middle_phalanx') or (.='l_index_distal') or (.='l_carpal_distal_phalanx') or (.='l_middle_metacarpal') or (.='l_middle_proximal') or (.='l_middle_middle') or (.='l_middle_distal') or (.='l_ring_metacarpal') or (.='l_ring_proximal') or (.='l_ring_middle') or (.='l_ring_distal') or (.='l_pinky_metacarpal') or (.='l_pinky_proximal') or (.='l_pinky_middle') or (.='l_pinky_distal') or (.='r_hand') or (.='r_thumb_metacarpal') or (.='r_thumb_proximal') or (.='r_thumb_distal') or (.='r_index_metacarpal') or (.='r_index_proximal') or (.='r_carpal_proximal_phalanx') or (.='r_index_middle') or (.='r_carpal_middle_phalanx') or (.='r_index_distal') or (.='r_carpal_distal_phalanx') or (.='r_middle_metacarpal') or (.='r_middle_proximal') or (.='r_middle_middle') or (.='r_middle_distal') or (.='r_ring_metacarpal') or (.='r_ring_proximal') or (.='r_ring_middle') or (.='r_ring_distal') or (.='r_pinky_metacarpal') or (.='r_pinky_proximal') or (.='r_pinky_middle') or (.='r_pinky_distal'))">
        <xsl:variable name="newName">
            <!-- find preferred value for this alias -->
            <xsl:choose>
                <xsl:when test="(.='l_hindfoot')"><xsl:text>l_talus</xsl:text></xsl:when>
                <xsl:when test="(.='l_cuneiform')"><xsl:text>l_cuneiform_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_midproximal')"><xsl:text>l_metatarsal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_metatarsal')"><xsl:text>l_metatarsal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_middistal')"><xsl:text>l_tarsal_proximal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_tarsal_proximal_phalanx')"><xsl:text>l_tarsal_proximal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_tarsal_middle_phalanx')"><xsl:text>l_tarsal_middle_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_forefoot')"><xsl:text>l_tarsal_distal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_tarsal_distal_phalanx')"><xsl:text>l_tarsal_distal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_calcaneum')"><xsl:text>l_calcaneus</xsl:text></xsl:when>
                <xsl:when test="(.='r_hindfoot')"><xsl:text>r_talus</xsl:text></xsl:when>
                <xsl:when test="(.='r_cuneiform')"><xsl:text>r_cuneiform_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_midproximal')"><xsl:text>r_metatarsal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_middistal')"><xsl:text>r_tarsal_proximal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_tarsal_proximal_phalanx')"><xsl:text>r_tarsal_proximal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_tarsal_middle_phalanx')"><xsl:text>r_tarsal_middle_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_forefoot')"><xsl:text>r_tarsal_distal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_tarsal_distal_phalanx')"><xsl:text>r_tarsal_distal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_calcaneum')"><xsl:text>r_calcaneus</xsl:text></xsl:when>
                <xsl:when test="(.='head')"><xsl:text>skull</xsl:text></xsl:when>
                <xsl:when test="(.='l_hand')"><xsl:text>l_carpal</xsl:text></xsl:when>
                <xsl:when test="(.='l_thumb_metacarpal')"><xsl:text>l_metacarpal_1</xsl:text></xsl:when>
                <xsl:when test="(.='l_thumb_proximal')"><xsl:text>l_carpal_proximal_phalanx_1</xsl:text></xsl:when>
                <xsl:when test="(.='l_thumb_distal')"><xsl:text>l_carpal_distal_phalanx_1</xsl:text></xsl:when>
                <xsl:when test="(.='l_index_metacarpal')"><xsl:text>l_metacarpal_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_index_proximal')"><xsl:text>l_carpal_proximal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_carpal_proximal_phalanx')"><xsl:text>l_carpal_proximal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_index_middle')"><xsl:text>l_carpal_middle_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_carpal_middle_phalanx')"><xsl:text>l_carpal_middle_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_index_distal')"><xsl:text>l_carpal_distal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_carpal_distal_phalanx')"><xsl:text>l_carpal_distal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='l_middle_metacarpal')"><xsl:text>l_metacarpal_3</xsl:text></xsl:when>
                <xsl:when test="(.='l_middle_proximal')"><xsl:text>l_carpal_proximal_phalanx_3</xsl:text></xsl:when>
                <xsl:when test="(.='l_middle_middle')"><xsl:text>l_carpal_middle_phalanx_3</xsl:text></xsl:when>
                <xsl:when test="(.='l_middle_distal')"><xsl:text>l_carpal_distal_phalanx_3</xsl:text></xsl:when>
                <xsl:when test="(.='l_ring_metacarpal')"><xsl:text>l_metacarpal_4</xsl:text></xsl:when>
                <xsl:when test="(.='l_ring_proximal')"><xsl:text>l_carpal_proximal_phalanx_4</xsl:text></xsl:when>
                <xsl:when test="(.='l_ring_middle')"><xsl:text>l_carpal_middle_phalanx_4</xsl:text></xsl:when>
                <xsl:when test="(.='l_ring_distal')"><xsl:text>l_carpal_distal_phalanx_4</xsl:text></xsl:when>
                <xsl:when test="(.='l_pinky_metacarpal')"><xsl:text>l_metacarpal_5</xsl:text></xsl:when>
                <xsl:when test="(.='l_pinky_proximal')"><xsl:text>l_carpal_proximal_phalanx_5</xsl:text></xsl:when>
                <xsl:when test="(.='l_pinky_middle')"><xsl:text>l_carpal_middle_phalanx_5</xsl:text></xsl:when>
                <xsl:when test="(.='l_pinky_distal')"><xsl:text>l_carpal_distal_phalanx_5</xsl:text></xsl:when>
                <xsl:when test="(.='r_hand')"><xsl:text>r_carpal</xsl:text></xsl:when>
                <xsl:when test="(.='r_thumb_metacarpal')"><xsl:text>r_metacarpal_1</xsl:text></xsl:when>
                <xsl:when test="(.='r_thumb_proximal')"><xsl:text>r_carpal_proximal_phalanx_1</xsl:text></xsl:when>
                <xsl:when test="(.='r_thumb_distal')"><xsl:text>r_carpal_distal_phalanx_1</xsl:text></xsl:when>
                <xsl:when test="(.='r_index_metacarpal')"><xsl:text>r_metacarpal_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_index_proximal')"><xsl:text>r_carpal_proximal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_carpal_proximal_phalanx')"><xsl:text>r_carpal_proximal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_index_middle')"><xsl:text>r_carpal_middle_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_carpal_middle_phalanx')"><xsl:text>r_carpal_middle_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_index_distal')"><xsl:text>r_carpal_distal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_carpal_distal_phalanx')"><xsl:text>r_carpal_distal_phalanx_2</xsl:text></xsl:when>
                <xsl:when test="(.='r_middle_metacarpal')"><xsl:text>r_metacarpal_3</xsl:text></xsl:when>
                <xsl:when test="(.='r_middle_proximal')"><xsl:text>r_carpal_proximal_phalanx_3</xsl:text></xsl:when>
                <xsl:when test="(.='r_middle_middle')"><xsl:text>r_carpal_middle_phalanx_3</xsl:text></xsl:when>
                <xsl:when test="(.='r_middle_distal')"><xsl:text>r_carpal_distal_phalanx_3</xsl:text></xsl:when>
                <xsl:when test="(.='r_ring_metacarpal')"><xsl:text>r_metacarpal_4</xsl:text></xsl:when>
                <xsl:when test="(.='r_ring_proximal')"><xsl:text>r_carpal_proximal_phalanx_4</xsl:text></xsl:when>
                <xsl:when test="(.='r_ring_middle')"><xsl:text>r_carpal_middle_phalanx_4</xsl:text></xsl:when>
                <xsl:when test="(.='r_ring_distal')"><xsl:text>r_carpal_distal_phalanx_4</xsl:text></xsl:when>
                <xsl:when test="(.='r_pinky_metacarpal')"><xsl:text>r_metacarpal_5</xsl:text></xsl:when>
                <xsl:when test="(.='r_pinky_proximal')"><xsl:text>r_carpal_proximal_phalanx_5</xsl:text></xsl:when>
                <xsl:when test="(.='r_pinky_middle')"><xsl:text>r_carpal_middle_phalanx_5</xsl:text></xsl:when>
                <xsl:when test="(.='r_pinky_distal')"><xsl:text>r_carpal_distal_phalanx_5</xsl:text></xsl:when>
                 <xsl:otherwise>
                    <xsl:value-of select="."/>
                    <!-- <xsl:message>
                        <xsl:text>*** internal error: improper diagnostic for HAnimSegment alias conversion of name='</xsl:text>
                        <xsl:value-of select="."/>
                        <xsl:text>', retaining original value</xsl:text>
                    </xsl:message> -->
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:value-of select='$newName'/>
        <xsl:if test="not(. = $newName)">
            <xsl:message>
                <xsl:text>*** replaced HAnim2 </xsl:text>
                <xsl:value-of select="local-name(..)"/>
                <xsl:text> alias </xsl:text>
                <xsl:value-of select="local-name()"/>
                <xsl:text>='</xsl:text>
                <xsl:value-of select="."/>
                <xsl:text>' with preferred name='</xsl:text>
                <xsl:value-of select='$newName'/>
                <xsl:text>' (run X3dTidy again to fix corresponding DEF and USE references)</xsl:text>
            </xsl:message>
        </xsl:if>
      </xsl:when>
      <!-- *** finish: HAnim2 HAnimSegment alias conversion generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <!-- *** start: HAnim2 HAnimSite alias conversion generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->      <xsl:when
           test="(local-name(..)='HAnimSite') and (local-name()='name') and $isHAnim2 and (starts-with(@name,'skull_tip') or starts-with(@name,'vertex') or starts-with(@name,'l_clavicale') or starts-with(@name,'l_axilla_ant') or starts-with(@name,'l_axilla_post') or starts-with(@name,'r_clavicale') or starts-with(@name,'r_axilla_ant') or starts-with(@name,'r_axilla_post') or starts-with(@name,'middle back') or starts-with(@name,'lower back') or starts-with(@name,'waist_preferred_ant') or starts-with(@name,'waist_preferred_post') or starts-with(@name,'l_rib10_midspine') or starts-with(@name,'Left Bustpoint') or starts-with(@name,'r_rib10_midspine') or starts-with(@name,'Right Bustpoint') or starts-with(@name,'Left Anterior Superior Iliac Spine') or starts-with(@name,'Left Posterior Superior Iliac Spine') or starts-with(@name,'Right Anterior Superior Iliac Spine') or starts-with(@name,'Right Posterior Superior Iliac Spine') or starts-with(@name,'l_femoral_lateral_epicn') or starts-with(@name,'l_femoral_lateral_epicondyles') or starts-with(@name,'l_femoral_medial_epicn') or starts-with(@name,'l_femoral_medial_epicondyles') or starts-with(@name,'l_kneecap') or starts-with(@name,'l_trochanter') or starts-with(@name,'r_femoral_lateral_epicn') or starts-with(@name,'r_femoral_lateral_epicondyles') or starts-with(@name,'r_femoral_medial_epicn') or starts-with(@name,'r_femoral_medial_epicondyles') or starts-with(@name,'r_kneecap') or starts-with(@name,'r_trochanter') or starts-with(@name,'l_metatarsal_pha1') or starts-with(@name,'l_metatarsal_pha5') or starts-with(@name,'l_calcaneous_post') or starts-with(@name,'r_metatarsal_pha1') or starts-with(@name,'r_metatarsal_pha5') or starts-with(@name,'r_calcaneous_post') or starts-with(@name,'l_humeral_lateral_epicn') or starts-with(@name,'l_humeral_lateral_epicondyles') or starts-with(@name,'l_humeral_medial_epicn') or starts-with(@name,'l_humeral_medial_epicondyles') or starts-with(@name,'r_humeral_lateral_epicn') or starts-with(@name,'r_humeral_lateral_epicondyles') or starts-with(@name,'r_humeral_medial_epicn') or starts-with(@name,'r_humeral_medial_epicondyles') or starts-with(@name,'l_metacarpal_pha2') or starts-with(@name,'l_metacarpal_phalanx') or starts-with(@name,'l_metacarpal_pha5') or starts-with(@name,'r_metacarpal_pha2') or starts-with(@name,'r_metacarpal_phalanx') or starts-with(@name,'r_metacarpal_pha5') or starts-with(@name,'nuchal') or starts-with(@name,'belly button') or starts-with(@name,'l_canthus') or starts-with(@name,'r_canthus') or starts-with(@name,'chin') or starts-with(@name,'mesosternum') or starts-with(@name,'median plane') or starts-with(@name,'l_thumb_distal') or starts-with(@name,'l_index_distal') or starts-with(@name,'l_middle_distal') or starts-with(@name,'l_ring_distal') or starts-with(@name,'l_pinky_distal') or starts-with(@name,'r_thumb_distal') or starts-with(@name,'r_index_distal') or starts-with(@name,'r_middle_distal') or starts-with(@name,'r_ring_distal') or starts-with(@name,'r_pinky_distal') or starts-with(@name,'l_digit2') or starts-with(@name,'l_tarsal_distal_pha5') or starts-with(@name,'r_digit2') or starts-with(@name,'r_tarsal_distal_pha5') or contains(@name,'l_hindfoot') or contains(@name,'l_cuneiform') or contains(@name,'l_midproximal') or contains(@name,'l_metatarsal') or contains(@name,'l_middistal') or contains(@name,'l_tarsal_proximal_phalanx') or contains(@name,'l_tarsal_middle_phalanx') or contains(@name,'l_forefoot') or contains(@name,'l_tarsal_distal_phalanx') or contains(@name,'l_calcaneum') or contains(@name,'r_hindfoot') or contains(@name,'r_cuneiform') or contains(@name,'r_midproximal') or contains(@name,'r_middistal') or contains(@name,'r_tarsal_proximal_phalanx') or contains(@name,'r_tarsal_middle_phalanx') or contains(@name,'r_forefoot') or contains(@name,'r_tarsal_distal_phalanx') or contains(@name,'r_calcaneum') or contains(@name,'head') or contains(@name,'l_hand') or contains(@name,'l_thumb_metacarpal') or contains(@name,'l_thumb_proximal') or contains(@name,'l_thumb_distal') or contains(@name,'l_index_metacarpal') or contains(@name,'l_index_proximal') or contains(@name,'l_carpal_proximal_phalanx') or contains(@name,'l_index_middle') or contains(@name,'l_carpal_middle_phalanx') or contains(@name,'l_index_distal') or contains(@name,'l_carpal_distal_phalanx') or contains(@name,'l_middle_metacarpal') or contains(@name,'l_middle_proximal') or contains(@name,'l_middle_middle') or contains(@name,'l_middle_distal') or contains(@name,'l_ring_metacarpal') or contains(@name,'l_ring_proximal') or contains(@name,'l_ring_middle') or contains(@name,'l_ring_distal') or contains(@name,'l_pinky_metacarpal') or contains(@name,'l_pinky_proximal') or contains(@name,'l_pinky_middle') or contains(@name,'l_pinky_distal') or contains(@name,'r_hand') or contains(@name,'r_thumb_metacarpal') or contains(@name,'r_thumb_proximal') or contains(@name,'r_thumb_distal') or contains(@name,'r_index_metacarpal') or contains(@name,'r_index_proximal') or contains(@name,'r_carpal_proximal_phalanx') or contains(@name,'r_index_middle') or contains(@name,'r_carpal_middle_phalanx') or contains(@name,'r_index_distal') or contains(@name,'r_carpal_distal_phalanx') or contains(@name,'r_middle_metacarpal') or contains(@name,'r_middle_proximal') or contains(@name,'r_middle_middle') or contains(@name,'r_middle_distal') or contains(@name,'r_ring_metacarpal') or contains(@name,'r_ring_proximal') or contains(@name,'r_ring_middle') or contains(@name,'r_ring_distal') or contains(@name,'r_pinky_metacarpal') or contains(@name,'r_pinky_proximal') or contains(@name,'r_pinky_middle') or contains(@name,'r_pinky_distal'))">
        <xsl:variable name="suffix">
            <xsl:choose>
                <xsl:when test="ends-with(.,'_pt')">
                    <xsl:text>_pt</xsl:text>
                </xsl:when>
                <xsl:when test="ends-with(.,'_tip')">
                    <xsl:text>_tip</xsl:text>
                </xsl:when>
                <xsl:when test="ends-with(.,'_view')">
                    <xsl:text>_view</xsl:text>
                </xsl:when>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="newName">
            <!-- find preferred value for this alias -->
            <xsl:choose>
                <xsl:when test="starts-with(.,'skull_tip')"><xsl:text>skull_vertex</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'vertex')"><xsl:text>skull_vertex</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_clavicale')"><xsl:text>l_clavicle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_axilla_ant')"><xsl:text>l_axilla_proximal</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_axilla_post')"><xsl:text>l_axilla_distal</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_clavicale')"><xsl:text>r_clavicle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_axilla_ant')"><xsl:text>r_axilla_proximal</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_axilla_post')"><xsl:text>r_axilla_distal</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'middle back')"><xsl:text>spine_1_middle_back</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'lower back')"><xsl:text>spine_2_lower_back</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'waist_preferred_ant') and not(contains(.,'waist_preferred_anterior'))"><xsl:text>waist_preferred_anterior</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'waist_preferred_post') and not(contains(.,'waist_preferred_posterior'))"><xsl:text>waist_preferred_posterior</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_rib10_midspine')"><xsl:text>l_rib10</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'Left Bustpoint')"><xsl:text>l_thelion</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_rib10_midspine')"><xsl:text>r_rib10</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'Right Bustpoint')"><xsl:text>r_thelion</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'Left Anterior Superior Iliac Spine')"><xsl:text>l_asis</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'Left Posterior Superior Iliac Spine')"><xsl:text>l_psis</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'Right Anterior Superior Iliac Spine')"><xsl:text>r_asis</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'Right Posterior Superior Iliac Spine')"><xsl:text>r_psis</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_femoral_lateral_epicn')"><xsl:text>l_femoral_lateral_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_femoral_lateral_epicondyles')"><xsl:text>l_femoral_lateral_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_femoral_medial_epicn')"><xsl:text>l_femoral_medial_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_femoral_medial_epicondyles')"><xsl:text>l_femoral_medial_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_kneecap')"><xsl:text>l_suprapatella</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_trochanter') and not(contains(.,'trochanterion'))"><xsl:text>l_trochanterion</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_femoral_lateral_epicn')"><xsl:text>r_femoral_lateral_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_femoral_lateral_epicondyles')"><xsl:text>r_femoral_lateral_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_femoral_medial_epicn')"><xsl:text>r_femoral_medial_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_femoral_medial_epicondyles')"><xsl:text>r_femoral_medial_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_kneecap')"><xsl:text>r_suprapatella</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_trochanter') and not(contains(.,'trochanterion'))"><xsl:text>r_trochanterion</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_metatarsal_pha1')"><xsl:text>l_metatarsal_phalanx_1</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_metatarsal_pha5')"><xsl:text>l_metatarsal_phalanx_5</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_calcaneous_post')"><xsl:text>l_calcaneus_posterior</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_metatarsal_pha1')"><xsl:text>r_metatarsal_phalanx_1</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_metatarsal_pha5')"><xsl:text>r_metatarsal_phalanx_5</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_calcaneous_post')"><xsl:text>r_calcaneus_posterior</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_humeral_lateral_epicn')"><xsl:text>l_humeral_lateral_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_humeral_lateral_epicondyles')"><xsl:text>l_humeral_lateral_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_humeral_medial_epicn')"><xsl:text>l_humeral_medial_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_humeral_medial_epicondyles')"><xsl:text>l_humeral_medial_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_humeral_lateral_epicn')"><xsl:text>r_humeral_lateral_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_humeral_lateral_epicondyles')"><xsl:text>r_humeral_lateral_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_humeral_medial_epicn')"><xsl:text>r_humeral_medial_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_humeral_medial_epicondyles')"><xsl:text>r_humeral_medial_epicondyle</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_metacarpal_pha2')"><xsl:text>l_metacarpal_phalanx_2</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_metacarpal_phalanx') and not(contains(.,'phalanx_'))"><xsl:text>l_metacarpal_phalanx_2</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_metacarpal_pha5')"><xsl:text>l_metacarpal_phalanx_5</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_metacarpal_pha2')"><xsl:text>r_metacarpal_phalanx_2</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_metacarpal_phalanx') and not(contains(.,'phalanx_'))"><xsl:text>r_metacarpal_phalanx_2</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_metacarpal_pha5')"><xsl:text>r_metacarpal_phalanx_5</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'nuchal') and not(contains(.,'nuchale'))"><xsl:text>nuchale</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'belly button')"><xsl:text>navel</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_canthus')"><xsl:text>l_ectocanthus</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_canthus')"><xsl:text>r_ectocanthus</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'chin')"><xsl:text>menton</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'mesosternum')"><xsl:text>mesosternale</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'median plane')"><xsl:text>rear_center_midsagittal_plane</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_thumb_distal')"><xsl:text>l_carpal_distal_phalanx_1</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_index_distal')"><xsl:text>l_carpal_distal_phalanx_2</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_middle_distal')"><xsl:text>l_carpal_distal_phalanx_3</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_ring_distal')"><xsl:text>l_carpal_distal_phalanx_4</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_pinky_distal')"><xsl:text>l_carpal_distal_phalanx_5</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_thumb_distal')"><xsl:text>r_carpal_distal_phalanx_1</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_index_distal')"><xsl:text>r_carpal_distal_phalanx_2</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_middle_distal')"><xsl:text>r_carpal_distal_phalanx_3</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_ring_distal')"><xsl:text>r_carpal_distal_phalanx_4</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_pinky_distal')"><xsl:text>r_carpal_distal_phalanx_5</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_digit2')"><xsl:text>l_tarsal_distal_phalanx_2</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'l_tarsal_distal_pha5')"><xsl:text>l_tarsal_distal_phalanx_5</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_digit2')"><xsl:text>r_tarsal_distal_phalanx_2</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <xsl:when test="starts-with(.,'r_tarsal_distal_pha5')"><xsl:text>r_tarsal_distal_phalanx_5</xsl:text><xsl:value-of select="$suffix"/></xsl:when>
                <!-- *** next: HAnim2 HAnimSite alias test matching HAnimSegment alias names, which may match -->
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_hindfoot')"><xsl:value-of select="substring-before(../@name,'l_hindfoot')"/><xsl:text>l_talus</xsl:text><xsl:value-of select="substring-after(../@name,'l_hindfoot')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_cuneiform')"><xsl:value-of select="substring-before(../@name,'l_cuneiform')"/><xsl:text>l_cuneiform_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_cuneiform')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_midproximal')"><xsl:value-of select="substring-before(../@name,'l_midproximal')"/><xsl:text>l_metatarsal_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_midproximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_metatarsal')"><xsl:value-of select="substring-before(../@name,'l_metatarsal')"/><xsl:text>l_metatarsal_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_metatarsal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_middistal')"><xsl:value-of select="substring-before(../@name,'l_middistal')"/><xsl:text>l_tarsal_proximal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_middistal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_tarsal_proximal_phalanx')"><xsl:value-of select="substring-before(../@name,'l_tarsal_proximal_phalanx')"/><xsl:text>l_tarsal_proximal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_tarsal_proximal_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_tarsal_middle_phalanx')"><xsl:value-of select="substring-before(../@name,'l_tarsal_middle_phalanx')"/><xsl:text>l_tarsal_middle_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_tarsal_middle_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_forefoot')"><xsl:value-of select="substring-before(../@name,'l_forefoot')"/><xsl:text>l_tarsal_distal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_forefoot')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_tarsal_distal_phalanx')"><xsl:value-of select="substring-before(../@name,'l_tarsal_distal_phalanx')"/><xsl:text>l_tarsal_distal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_tarsal_distal_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_calcaneum')"><xsl:value-of select="substring-before(../@name,'l_calcaneum')"/><xsl:text>l_calcaneus</xsl:text><xsl:value-of select="substring-after(../@name,'l_calcaneum')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_hindfoot')"><xsl:value-of select="substring-before(../@name,'r_hindfoot')"/><xsl:text>r_talus</xsl:text><xsl:value-of select="substring-after(../@name,'r_hindfoot')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_cuneiform')"><xsl:value-of select="substring-before(../@name,'r_cuneiform')"/><xsl:text>r_cuneiform_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_cuneiform')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_midproximal')"><xsl:value-of select="substring-before(../@name,'r_midproximal')"/><xsl:text>r_metatarsal_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_midproximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_middistal')"><xsl:value-of select="substring-before(../@name,'r_middistal')"/><xsl:text>r_tarsal_proximal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_middistal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_tarsal_proximal_phalanx')"><xsl:value-of select="substring-before(../@name,'r_tarsal_proximal_phalanx')"/><xsl:text>r_tarsal_proximal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_tarsal_proximal_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_tarsal_middle_phalanx')"><xsl:value-of select="substring-before(../@name,'r_tarsal_middle_phalanx')"/><xsl:text>r_tarsal_middle_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_tarsal_middle_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_forefoot')"><xsl:value-of select="substring-before(../@name,'r_forefoot')"/><xsl:text>r_tarsal_distal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_forefoot')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_tarsal_distal_phalanx')"><xsl:value-of select="substring-before(../@name,'r_tarsal_distal_phalanx')"/><xsl:text>r_tarsal_distal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_tarsal_distal_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_calcaneum')"><xsl:value-of select="substring-before(../@name,'r_calcaneum')"/><xsl:text>r_calcaneus</xsl:text><xsl:value-of select="substring-after(../@name,'r_calcaneum')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'head')"><xsl:value-of select="substring-before(../@name,'head')"/><xsl:text>skull</xsl:text><xsl:value-of select="substring-after(../@name,'head')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_hand')"><xsl:value-of select="substring-before(../@name,'l_hand')"/><xsl:text>l_carpal</xsl:text><xsl:value-of select="substring-after(../@name,'l_hand')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_thumb_metacarpal')"><xsl:value-of select="substring-before(../@name,'l_thumb_metacarpal')"/><xsl:text>l_metacarpal_1</xsl:text><xsl:value-of select="substring-after(../@name,'l_thumb_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_thumb_proximal')"><xsl:value-of select="substring-before(../@name,'l_thumb_proximal')"/><xsl:text>l_carpal_proximal_phalanx_1</xsl:text><xsl:value-of select="substring-after(../@name,'l_thumb_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_thumb_distal')"><xsl:value-of select="substring-before(../@name,'l_thumb_distal')"/><xsl:text>l_carpal_distal_phalanx_1</xsl:text><xsl:value-of select="substring-after(../@name,'l_thumb_distal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_index_metacarpal')"><xsl:value-of select="substring-before(../@name,'l_index_metacarpal')"/><xsl:text>l_metacarpal_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_index_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_index_proximal')"><xsl:value-of select="substring-before(../@name,'l_index_proximal')"/><xsl:text>l_carpal_proximal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_index_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_carpal_proximal_phalanx')"><xsl:value-of select="substring-before(../@name,'l_carpal_proximal_phalanx')"/><xsl:text>l_carpal_proximal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_carpal_proximal_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_index_middle')"><xsl:value-of select="substring-before(../@name,'l_index_middle')"/><xsl:text>l_carpal_middle_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_index_middle')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_carpal_middle_phalanx')"><xsl:value-of select="substring-before(../@name,'l_carpal_middle_phalanx')"/><xsl:text>l_carpal_middle_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_carpal_middle_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_index_distal')"><xsl:value-of select="substring-before(../@name,'l_index_distal')"/><xsl:text>l_carpal_distal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_index_distal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_carpal_distal_phalanx')"><xsl:value-of select="substring-before(../@name,'l_carpal_distal_phalanx')"/><xsl:text>l_carpal_distal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'l_carpal_distal_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_middle_metacarpal')"><xsl:value-of select="substring-before(../@name,'l_middle_metacarpal')"/><xsl:text>l_metacarpal_3</xsl:text><xsl:value-of select="substring-after(../@name,'l_middle_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_middle_proximal')"><xsl:value-of select="substring-before(../@name,'l_middle_proximal')"/><xsl:text>l_carpal_proximal_phalanx_3</xsl:text><xsl:value-of select="substring-after(../@name,'l_middle_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_middle_middle')"><xsl:value-of select="substring-before(../@name,'l_middle_middle')"/><xsl:text>l_carpal_middle_phalanx_3</xsl:text><xsl:value-of select="substring-after(../@name,'l_middle_middle')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_middle_distal')"><xsl:value-of select="substring-before(../@name,'l_middle_distal')"/><xsl:text>l_carpal_distal_phalanx_3</xsl:text><xsl:value-of select="substring-after(../@name,'l_middle_distal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_ring_metacarpal')"><xsl:value-of select="substring-before(../@name,'l_ring_metacarpal')"/><xsl:text>l_metacarpal_4</xsl:text><xsl:value-of select="substring-after(../@name,'l_ring_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_ring_proximal')"><xsl:value-of select="substring-before(../@name,'l_ring_proximal')"/><xsl:text>l_carpal_proximal_phalanx_4</xsl:text><xsl:value-of select="substring-after(../@name,'l_ring_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_ring_middle')"><xsl:value-of select="substring-before(../@name,'l_ring_middle')"/><xsl:text>l_carpal_middle_phalanx_4</xsl:text><xsl:value-of select="substring-after(../@name,'l_ring_middle')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_ring_distal')"><xsl:value-of select="substring-before(../@name,'l_ring_distal')"/><xsl:text>l_carpal_distal_phalanx_4</xsl:text><xsl:value-of select="substring-after(../@name,'l_ring_distal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_pinky_metacarpal')"><xsl:value-of select="substring-before(../@name,'l_pinky_metacarpal')"/><xsl:text>l_metacarpal_5</xsl:text><xsl:value-of select="substring-after(../@name,'l_pinky_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_pinky_proximal')"><xsl:value-of select="substring-before(../@name,'l_pinky_proximal')"/><xsl:text>l_carpal_proximal_phalanx_5</xsl:text><xsl:value-of select="substring-after(../@name,'l_pinky_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_pinky_middle')"><xsl:value-of select="substring-before(../@name,'l_pinky_middle')"/><xsl:text>l_carpal_middle_phalanx_5</xsl:text><xsl:value-of select="substring-after(../@name,'l_pinky_middle')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'l_pinky_distal')"><xsl:value-of select="substring-before(../@name,'l_pinky_distal')"/><xsl:text>l_carpal_distal_phalanx_5</xsl:text><xsl:value-of select="substring-after(../@name,'l_pinky_distal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_hand')"><xsl:value-of select="substring-before(../@name,'r_hand')"/><xsl:text>r_carpal</xsl:text><xsl:value-of select="substring-after(../@name,'r_hand')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_thumb_metacarpal')"><xsl:value-of select="substring-before(../@name,'r_thumb_metacarpal')"/><xsl:text>r_metacarpal_1</xsl:text><xsl:value-of select="substring-after(../@name,'r_thumb_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_thumb_proximal')"><xsl:value-of select="substring-before(../@name,'r_thumb_proximal')"/><xsl:text>r_carpal_proximal_phalanx_1</xsl:text><xsl:value-of select="substring-after(../@name,'r_thumb_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_thumb_distal')"><xsl:value-of select="substring-before(../@name,'r_thumb_distal')"/><xsl:text>r_carpal_distal_phalanx_1</xsl:text><xsl:value-of select="substring-after(../@name,'r_thumb_distal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_index_metacarpal')"><xsl:value-of select="substring-before(../@name,'r_index_metacarpal')"/><xsl:text>r_metacarpal_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_index_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_index_proximal')"><xsl:value-of select="substring-before(../@name,'r_index_proximal')"/><xsl:text>r_carpal_proximal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_index_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_carpal_proximal_phalanx')"><xsl:value-of select="substring-before(../@name,'r_carpal_proximal_phalanx')"/><xsl:text>r_carpal_proximal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_carpal_proximal_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_index_middle')"><xsl:value-of select="substring-before(../@name,'r_index_middle')"/><xsl:text>r_carpal_middle_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_index_middle')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_carpal_middle_phalanx')"><xsl:value-of select="substring-before(../@name,'r_carpal_middle_phalanx')"/><xsl:text>r_carpal_middle_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_carpal_middle_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_index_distal')"><xsl:value-of select="substring-before(../@name,'r_index_distal')"/><xsl:text>r_carpal_distal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_index_distal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_carpal_distal_phalanx')"><xsl:value-of select="substring-before(../@name,'r_carpal_distal_phalanx')"/><xsl:text>r_carpal_distal_phalanx_2</xsl:text><xsl:value-of select="substring-after(../@name,'r_carpal_distal_phalanx')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_middle_metacarpal')"><xsl:value-of select="substring-before(../@name,'r_middle_metacarpal')"/><xsl:text>r_metacarpal_3</xsl:text><xsl:value-of select="substring-after(../@name,'r_middle_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_middle_proximal')"><xsl:value-of select="substring-before(../@name,'r_middle_proximal')"/><xsl:text>r_carpal_proximal_phalanx_3</xsl:text><xsl:value-of select="substring-after(../@name,'r_middle_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_middle_middle')"><xsl:value-of select="substring-before(../@name,'r_middle_middle')"/><xsl:text>r_carpal_middle_phalanx_3</xsl:text><xsl:value-of select="substring-after(../@name,'r_middle_middle')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_middle_distal')"><xsl:value-of select="substring-before(../@name,'r_middle_distal')"/><xsl:text>r_carpal_distal_phalanx_3</xsl:text><xsl:value-of select="substring-after(../@name,'r_middle_distal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_ring_metacarpal')"><xsl:value-of select="substring-before(../@name,'r_ring_metacarpal')"/><xsl:text>r_metacarpal_4</xsl:text><xsl:value-of select="substring-after(../@name,'r_ring_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_ring_proximal')"><xsl:value-of select="substring-before(../@name,'r_ring_proximal')"/><xsl:text>r_carpal_proximal_phalanx_4</xsl:text><xsl:value-of select="substring-after(../@name,'r_ring_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_ring_middle')"><xsl:value-of select="substring-before(../@name,'r_ring_middle')"/><xsl:text>r_carpal_middle_phalanx_4</xsl:text><xsl:value-of select="substring-after(../@name,'r_ring_middle')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_ring_distal')"><xsl:value-of select="substring-before(../@name,'r_ring_distal')"/><xsl:text>r_carpal_distal_phalanx_4</xsl:text><xsl:value-of select="substring-after(../@name,'r_ring_distal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_pinky_metacarpal')"><xsl:value-of select="substring-before(../@name,'r_pinky_metacarpal')"/><xsl:text>r_metacarpal_5</xsl:text><xsl:value-of select="substring-after(../@name,'r_pinky_metacarpal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_pinky_proximal')"><xsl:value-of select="substring-before(../@name,'r_pinky_proximal')"/><xsl:text>r_carpal_proximal_phalanx_5</xsl:text><xsl:value-of select="substring-after(../@name,'r_pinky_proximal')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_pinky_middle')"><xsl:value-of select="substring-before(../@name,'r_pinky_middle')"/><xsl:text>r_carpal_middle_phalanx_5</xsl:text><xsl:value-of select="substring-after(../@name,'r_pinky_middle')"/></xsl:when>
                <xsl:when test="(local-name(..)='HAnimSegment') and contains(../@name,'r_pinky_distal')"><xsl:value-of select="substring-before(../@name,'r_pinky_distal')"/><xsl:text>r_carpal_distal_phalanx_5</xsl:text><xsl:value-of select="substring-after(../@name,'r_pinky_distal')"/></xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="."/>
                    <!-- <xsl:message>
                        <xsl:text>*** internal error: improper diagnostic for HAnimSite conversion test of name='</xsl:text>
                        <xsl:value-of select="."/>
                        <xsl:text>', retaining original value</xsl:text>
                    </xsl:message> -->
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:value-of select='$newName'/>
        <xsl:if test="not(. = $newName)">
            <xsl:message>
                <xsl:text>*** replaced HAnim2 </xsl:text>
                <xsl:value-of select="local-name(..)"/>
                <xsl:text> alias </xsl:text>
                <xsl:value-of select="local-name()"/>
                <xsl:text>='</xsl:text>
                <xsl:value-of select="."/>
                <xsl:text>' with preferred name='</xsl:text>
                <xsl:value-of select='$newName'/>
                <xsl:text>' (run X3dTidy again to fix corresponding DEF and USE references)</xsl:text>
            </xsl:message>
        </xsl:if>
      </xsl:when>
      <!-- *** finish: HAnim2 HAnimSite alias conversion generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->