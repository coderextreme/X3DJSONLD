from bs4 import BeautifulSoup
import re

packages = {}

class ClassPrinter:
    def __init__(self, node):
        self.node = node
        self.parents = []

        addinhers = self.node.find_all("AdditionalInheritance")
        for addinher in addinhers:
            try:
                if not addinher['basetype'].startsWith["X3D"] or addinher['basetype'].startswith["X3DConcrete"]:
                    self.parents.append(addinher['baseType'])
            except:
                pass

        inhers = self.node.find_all("Inheritance")
        for inher in inhers:
            try:
                if not inher['basetype'].startsWith["X3D"] or inher['basetype'].startswith["X3DConcrete"]:
                    self.parents.append(inher['baseType'])
            except:
                pass

        self.componentInfo = self.node.find("componentInfo")

        self.printed = False


    def printClass(self):
        str = ""
        if self.printed:
            return str
        for parent in self.parents:
            try:
                str += classes[parent].printClass()
            except:
                pass
        try:
            package = self.componentInfo['name']
        except:
            package = "fields"
        package = re.sub(r"-", "", package)

        try:
            clazz = self.node['name'] 
        except:
            clazz = self.node['type'] 

        if clazz in ["X3DBoundedObject", "X3DPickableObject", "X3DPrototypeInstance", "X3DUrlObject", "X3DFogObject", "X3DMetadataObject", "X3DProgrammableShaderObject"] or clazz.endswith("Node") and not clazz in ["SFNode", "MFNode", "X3DConcreteNode"]:
            superpackage = "sai"
        else:
            superpackage = "jsail"

        fullpackage = "org.web3d.x3d."+superpackage+"."+package
        if clazz not in ("IMPORT", "EXPORT", "meta"):
            try:
                if packages[fullpackage] is not None:
                    packages[fullpackage].append(clazz)
            except:
                packages[fullpackage] = []
                packages[fullpackage].append(clazz)

        self.printed = True
        return str

code = ""

soup = BeautifulSoup(open("../../specifications/X3dUnifiedObjectModel-4.0.xml"), "xml")


classes = {}

#ants = soup.find_all("AbstractNodeType")
#for ant in ants:
#    classes[ant['name']] = ClassPrinter(ant)

#aots = soup.find_all("AbstractObjectType")
#for aot in aots:
#    classes[aot['name']] = ClassPrinter(aot)

cns = soup.find_all("ConcreteNode")
for cn in cns:
    classes[cn['name']] = ClassPrinter(cn)

sts = soup.find_all("Statement")
for st in sts:
    classes[st['name']] = ClassPrinter(st)

fts = soup.find_all("FieldType")
for ft in fts:
    classes[ft['type']] = ClassPrinter(ft)

for k,v in classes.items():
    code += v.printClass()

packages["org.web3d.x3d.jsail.Core"].append("CommentsBlock")
packages["org.web3d.x3d.jsail"] = []
packages["org.web3d.x3d.jsail"].append("ConfigurationProperties")

for fullpackage in packages:
    code += "\t("+fullpackage+" " + (" ".join(packages[fullpackage]))+ ")\n"

# generated by clojure serializer
# code += "(def EXPORT org.web3d.x3d.jsail.Networking.EXPORT)\n"
# code += "(def IMPORT org.web3d.x3d.jsail.Networking.IMPORT)\n"

f = open("../clojure/net/coderextreme/data/X3Dautoclass.clj", "w")
f.write(code)
f.close()

f = open("../clojure/net/coderextreme/personal/X3Dautoclass.clj", "w")
f.write(code)
f.close()
