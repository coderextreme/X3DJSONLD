VERSION = "2.15.1"
import re, pickle
from fastjsonschema import JsonSchemaValueException


REGEX_PATTERNS = pickle.loads(b"\x80\x04\x95a\x00\x00\x00\x00\x00\x00\x00}\x94\x8c\x18uri-reference_re_pattern\x94\x8c\x02re\x94\x8c\x08_compile\x94\x93\x94\x8c'^(\\w+:(\\/?\\/?))?[^#\\\\\\s]*(#[^\\\\\\s]*)?\\Z\x94K \x86\x94R\x94s.")

NoneType = type(None)

def validate_x3d_3_0_jsonschema_json(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'$schema': 'https://json-schema.org/draft/2020-12/schema', '$id': 'x3d-3.0-JSONSchema.json', 'title': 'JSON Schema X3D V3.0', 'description': 'Experimental JSON Schema for X3D V3.0', 'type': 'object', 'properties': {'X3D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/X3D'}}, 'required': ['X3D'], 'additionalProperties': False, '$defs': {'-childStatements': {'description': 'Comments and ROUTEs', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'IMPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IMPORT'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'EXPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EXPORT'}}, 'additionalProperties': False}}, '@geoSystem': {'description': 'Attempts to validate all possible combinations', 'oneOf': [{'type': 'array', 'minItems': 2, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}}, {'type': 'array', 'minItems': 1, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, {'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, {'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, {'type': 'array', 'minItems': 2, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 1, 'maxItems': 1, 'prefixItems': [{'type': 'string', 'enum': ['GC', 'GCC'], 'default': 'GD'}], 'items': False}]}, 'SceneGraphStructureStatement': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'Anchor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@parameter': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Appearance': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fillProperties': {'$ref': '#/$defs/-FillPropertiesSFNode'}, '-lineProperties': {'$ref': '#/$defs/-LinePropertiesSFNode'}, '-material': {'$ref': '#/$defs/-X3DMaterialNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Arc2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ArcClose2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closureType': {'enum': ['PIE', 'CHORD'], 'default': 'PIE', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'AudioClip': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Background': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@backUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@bottomUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@frontUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@leftUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rightUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@topUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Billboard': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@axisOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanFilter': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanSequencer': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFBool inputOutput', 'type': 'array', 'items': {'type': 'boolean'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanToggle': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@toggle': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanTrigger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Box': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Circle2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Collision': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-proxy': {'$ref': '#/$defs/-X3DChildNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Color': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ColorInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ColorRGBA': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColorRGBA inputOutput', 'type': 'array', 'minItems': 4, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'component': {'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@level': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@name': {'enum': ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time'], '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@level', '@name'], 'additionalProperties': False}}, 'Cone': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@bottomRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'connect': {'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@nodeField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@protoField': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@nodeField', '@protoField'], 'additionalProperties': False}}, 'Contour2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '-children': {'$ref': '#/$defs/-NurbsCurve2D-ContourPolyline2DMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ContourPolyline2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Coordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CoordinateDouble': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CoordinateInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CoordinateInterpolator2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Cylinder': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@top': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CylinderSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@diskAngle': {'default': 0.26179167, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxAngle': {'default': -1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minAngle': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@offset': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'DirectionalLight': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Disk2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@innerRadius': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@outerRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ElevationGrid': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'EspduTransform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterArray': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@articulationParameterChangeIndicatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterCount': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterDesignatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterIdPartAttachedToArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterTypeArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@collisionType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@deadReckoning': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@detonationLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationRelativeLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationResult': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityExtra': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySpecific': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySubcategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventNumber': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fired1': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fired2': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fireMissionIndex': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@firingRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@firingRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@forceID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fuse': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@linearAcceleration': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@linearVelocity': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@marking': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionEndPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@munitionEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionQuantity': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionStartPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@warhead': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'EXPORT': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@localDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@localDEF'], 'additionalProperties': False}, 'ExternProtoDeclare': {'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}}, 'required': ['@name', '@url'], 'additionalProperties': False}, 'Extrusion': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@beginCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@crossSection': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'prefixItems': [{'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': {'type': 'number'}}, '@endCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'MFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@scale': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@spine': {'$comment': 'MFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'field': {'type': 'array', 'items': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@accessType': {'enum': ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@type': {'enum': ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@accessType', '@name', '@type'], 'additionalProperties': False}}, 'fieldValue': {'type': 'array', 'items': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@name'], 'additionalProperties': False}}, 'FillProperties': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@filled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@hatched': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchStyle': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Fog': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@fogType': {'enum': ['LINEAR', 'EXPONENTIAL'], 'default': 'LINEAR', '$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@visibilityRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'FontStyle': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@family': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}}, '@horizontal': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@justify': {'$comment': 'MFString initializeOnly', 'type': 'array', 'items': {'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}}, '@language': {'$comment': 'SFString initializeOnly', 'type': 'string'}, '@leftToRight': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@spacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@style': {'enum': ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC'], 'default': 'PLAIN', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@topToBottom': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoElevationGrid': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@geoGridOrigin': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@height': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@yScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoLocation': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoLOD': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@child1Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child2Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child3Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child4Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'default': 10, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-rootNode': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@rootUrl': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoMetadata': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-data': {'$ref': '#/$defs/-X3DNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@summary': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoOrigin': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotateYUp': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoPositionInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoTouchSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoViewpoint': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@navType': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'default': 'EXAMINE', 'type': 'string'}, {'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, '@speedFactor': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Group': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimDisplacer': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@displacements': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@weight': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimHumanoid': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-joints': {'$ref': '#/$defs/-HAnimJointMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '-segments': {'$ref': '#/$defs/-HAnimSegmentMFNode'}, '-sites': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '-skeleton': {'$ref': '#/$defs/-HAnimJoint-HAnimSiteMFNode'}, '-skin': {'$ref': '#/$defs/-Group-Transform-Shape-IndexedFaceSetMFNode'}, '-skinCoord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-skinNormal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@version': {'enum': ['1.0', '2.0'], 'default': '1.0', '$comment': 'SFString inputOutput', 'type': 'string'}, '-viewpoints': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimJoint': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-HAnimJoint-HAnimSegment-HAnimSiteMFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@limitOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@llimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@skinCoordIndex': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@skinCoordWeight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@stiffness': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@ulimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimSegment': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@centerOfMass': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@mass': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@momentsOfInertia': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@name': {'anyOf': [{'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimSite': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'head': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'component': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/component'}, 'meta': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/meta'}}, 'additionalProperties': False}, 'ImageTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IMPORT': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@importedDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@inlineDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@importedDEF', '@inlineDEF'], 'additionalProperties': False}, 'IndexedFaceSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@texCoordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedLineSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedTriangleFanSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedTriangleSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedTriangleStripSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Inline': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@load': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IntegerSequencer': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IntegerTrigger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@integerKey': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IS': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'connect': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/connect'}}, 'additionalProperties': False}, 'KeySensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LineProperties': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@applied': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@linetype': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@linewidthScaleFactor': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LineSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vertexCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 2, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LoadSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@timeOut': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '-watchList': {'$ref': '#/$defs/-X3DUrlObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LOD': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Material': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@diffuseColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@emissiveColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@shininess': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@specularColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'meta': {'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@content': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@dir': {'enum': ['rtl', 'ltr'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@http-equiv': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@lang': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'anyOf': [{'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@scheme': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@content', '@name'], 'additionalProperties': False}}, 'MetadataDouble': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataFloat': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataInteger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-value': {'$ref': '#/$defs/-X3DMetadataObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataString': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MovieTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MultiTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@alpha': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@function': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}}, '@source': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MultiTextureCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MultiTextureTransform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NavigationInfo': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@avatarSize': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'prefixItems': [{'default': 0.25, 'minimum': 0, 'type': 'number'}, {'default': 1.6, 'minimum': 0, 'type': 'number'}, {'default': 0.75, 'minimum': 0, 'type': 'number'}], 'items': {'minimum': 0, 'type': 'number'}}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transitionTime': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@transitionType': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}}, '@type': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'EXAMINE', 'type': 'string'}, {'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@visibilityLimit': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Normal': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vector': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': -1, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NormalInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsCurve': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsCurve2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsOrientationInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsPatchSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsPositionInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DNurbsSurfaceGeometryNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@tessellationScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSurfaceInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSweptSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-crossSectionCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-NurbsCurveSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSwungSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-profileCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsTextureCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsTrimmedSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '-trimmingContour': {'$ref': '#/$defs/-Contour2DMFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'OrientationInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFRotation inputOutput', 'type': 'array', 'minItems': 4, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PixelTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@image': {'$comment': 'SFImage inputOutput', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PlaneSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@offset': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PointLight': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PointSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Polyline2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@lineSegments': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Polypoint2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PositionInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PositionInterpolator2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ProtoBody': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'ProtoDeclare': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'ProtoBody': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoBody'}, 'ProtoInterface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInterface'}}, 'required': ['@name'], 'additionalProperties': False}, 'ProtoInstance': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}}, 'IS': {'$ref': '#/$defs/IS'}, 'fieldValue': {'$ref': '#/$defs/fieldValue'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ProtoInterface': {'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'ProximitySensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ReceiverPdu': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@receivedPower': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@receiverState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterRadioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Rectangle2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ROUTE': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromNode': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toNode': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@fromField', '@fromNode', '@toField', '@toNode'], 'additionalProperties': False}, 'ScalarInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Scene': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DChildNode-X3DMetadataObjectMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'Script': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'#sourceText': {'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}, 'field': {'$ref': '#/$defs/field'}, '-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@directOutput': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mustEvaluate': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Shape': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-appearance': {'$ref': '#/$defs/-X3DAppearanceNodeSFNode'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DGeometryNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'SignalPdu': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@data': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@dataLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@encodingScheme': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@sampleRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@samples': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@tdlType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Sound': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@maxBack': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@maxFront': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minBack': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@minFront': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@priority': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-source': {'$ref': '#/$defs/-X3DSoundSourceNodeSFNode'}, '@spatialize': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Sphere': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'SphereSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@offset': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'SpotLight': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@beamWidth': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@cutOffAngle': {'default': 1.570796, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'StaticGroup': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'StringSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@deletionAllowed': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Switch': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@whichChoice': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Text': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fontStyle': {'$ref': '#/$defs/-X3DFontStyleNodeSFNode'}, '@length': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'number'}}, '@maxExtent': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@string': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureBackground': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-backTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-bottomTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-frontTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-leftTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-rightTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-topTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureCoordinateGenerator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'enum': ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL'], 'default': 'SPHERE', '$comment': 'SFString inputOutput', 'type': 'string'}, '@parameter': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureTransform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@scale': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@translation': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TimeSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@cycleInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TimeTrigger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TouchSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Transform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TransmitterPdu': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@antennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@antennaPatternLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@antennaPatternType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@cryptoKeyID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@cryptoSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@frequency': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@inputSource': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@lengthOfModulationParameters': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@modulationTypeDetail': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeMajor': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSpreadSpectrum': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@power': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@radioEntityTypeCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclature': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclatureVersion': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@relativeAntennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitFrequencyBandwidth': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transmitState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleFanSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@fanCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleSet2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vertices': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleStripSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@stripCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Viewpoint': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@centerOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'VisibilitySensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'WorldInfo': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@title': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'X3D': {'type': 'object', 'properties': {'@xsd:noNamespaceSchemaLocation': {'type': 'string', 'format': 'uri-reference'}, 'JSON schema': {'type': 'string'}, 'encoding': {'type': 'string', 'enum': ['UTF-8', 'UTF-16', 'UTF-32']}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'head': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/head'}, '@profile': {'enum': ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full'], 'default': 'Immersive', '$comment': 'SFString inputOutput', 'type': 'string'}, 'Scene': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Scene'}, '@version': {'enum': ['3.0'], 'default': '3.3', '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@profile', 'Scene', 'encoding', '@version'], 'additionalProperties': False}, '-X3DChildNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}}, '-X3DMetadataObjectSFNode': {'type': 'object', 'properties': {'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-FillPropertiesSFNode': {'type': 'object', 'properties': {'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-LinePropertiesSFNode': {'type': 'object', 'properties': {'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DMaterialNodeSFNode': {'type': 'object', 'properties': {'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTextureNodeSFNode': {'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTextureTransformNodeSFNode': {'type': 'object', 'properties': {'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DChildNodeSFNode': {'type': 'object', 'properties': {'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}, '-NurbsCurve2D-ContourPolyline2DMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DColorNodeSFNode': {'type': 'object', 'properties': {'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DNormalNodeSFNode': {'type': 'object', 'properties': {'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTextureCoordinateNodeSFNode': {'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}}, 'additionalProperties': False}}, '-GeoOriginSFNode': {'type': 'object', 'properties': {'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-HAnimJointMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimSegmentMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimSiteMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimJoint-HAnimSiteMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-Group-Transform-Shape-IndexedFaceSetMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DCoordinateNodeSFNode': {'type': 'object', 'properties': {'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-HAnimJoint-HAnimSegment-HAnimSiteMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimDisplacerMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DUrlObjectMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DMetadataObjectMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureCoordinateNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureTransformNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode': {'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DNurbsSurfaceGeometryNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DNurbsControlCurveNodeSFNode': {'type': 'object', 'properties': {'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-NurbsCurveSFNode': {'type': 'object', 'properties': {'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-Contour2DMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DChildNode-X3DMetadataObjectMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}}, 'additionalProperties': False}}, '-X3DAppearanceNodeSFNode': {'type': 'object', 'properties': {'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DGeometryNodeSFNode': {'type': 'object', 'properties': {'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DSoundSourceNodeSFNode': {'type': 'object', 'properties': {'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DFontStyleNodeSFNode': {'type': 'object', 'properties': {'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTexture2DNode-MultiTextureSFNode': {'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_len = len(data)
        if not all(prop in data for prop in ['X3D']):
            raise JsonSchemaValueException("data must contain ['X3D'] properties", value=data, name="data", definition={'$schema': 'https://json-schema.org/draft/2020-12/schema', '$id': 'x3d-3.0-JSONSchema.json', 'title': 'JSON Schema X3D V3.0', 'description': 'Experimental JSON Schema for X3D V3.0', 'type': 'object', 'properties': {'X3D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/X3D'}}, 'required': ['X3D'], 'additionalProperties': False, '$defs': {'-childStatements': {'description': 'Comments and ROUTEs', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'IMPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IMPORT'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'EXPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EXPORT'}}, 'additionalProperties': False}}, '@geoSystem': {'description': 'Attempts to validate all possible combinations', 'oneOf': [{'type': 'array', 'minItems': 2, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}}, {'type': 'array', 'minItems': 1, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, {'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, {'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, {'type': 'array', 'minItems': 2, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 1, 'maxItems': 1, 'prefixItems': [{'type': 'string', 'enum': ['GC', 'GCC'], 'default': 'GD'}], 'items': False}]}, 'SceneGraphStructureStatement': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'Anchor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@parameter': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Appearance': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fillProperties': {'$ref': '#/$defs/-FillPropertiesSFNode'}, '-lineProperties': {'$ref': '#/$defs/-LinePropertiesSFNode'}, '-material': {'$ref': '#/$defs/-X3DMaterialNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Arc2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ArcClose2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closureType': {'enum': ['PIE', 'CHORD'], 'default': 'PIE', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'AudioClip': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Background': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@backUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@bottomUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@frontUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@leftUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rightUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@topUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Billboard': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@axisOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanFilter': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanSequencer': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFBool inputOutput', 'type': 'array', 'items': {'type': 'boolean'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanToggle': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@toggle': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanTrigger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Box': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Circle2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Collision': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-proxy': {'$ref': '#/$defs/-X3DChildNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Color': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ColorInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ColorRGBA': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColorRGBA inputOutput', 'type': 'array', 'minItems': 4, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'component': {'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@level': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@name': {'enum': ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time'], '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@level', '@name'], 'additionalProperties': False}}, 'Cone': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@bottomRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'connect': {'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@nodeField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@protoField': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@nodeField', '@protoField'], 'additionalProperties': False}}, 'Contour2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '-children': {'$ref': '#/$defs/-NurbsCurve2D-ContourPolyline2DMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ContourPolyline2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Coordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CoordinateDouble': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CoordinateInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CoordinateInterpolator2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Cylinder': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@top': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CylinderSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@diskAngle': {'default': 0.26179167, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxAngle': {'default': -1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minAngle': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@offset': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'DirectionalLight': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Disk2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@innerRadius': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@outerRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ElevationGrid': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'EspduTransform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterArray': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@articulationParameterChangeIndicatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterCount': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterDesignatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterIdPartAttachedToArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterTypeArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@collisionType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@deadReckoning': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@detonationLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationRelativeLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationResult': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityExtra': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySpecific': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySubcategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventNumber': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fired1': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fired2': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fireMissionIndex': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@firingRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@firingRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@forceID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fuse': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@linearAcceleration': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@linearVelocity': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@marking': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionEndPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@munitionEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionQuantity': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionStartPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@warhead': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'EXPORT': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@localDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@localDEF'], 'additionalProperties': False}, 'ExternProtoDeclare': {'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}}, 'required': ['@name', '@url'], 'additionalProperties': False}, 'Extrusion': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@beginCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@crossSection': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'prefixItems': [{'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': {'type': 'number'}}, '@endCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'MFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@scale': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@spine': {'$comment': 'MFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'field': {'type': 'array', 'items': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@accessType': {'enum': ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@type': {'enum': ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@accessType', '@name', '@type'], 'additionalProperties': False}}, 'fieldValue': {'type': 'array', 'items': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@name'], 'additionalProperties': False}}, 'FillProperties': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@filled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@hatched': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchStyle': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Fog': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@fogType': {'enum': ['LINEAR', 'EXPONENTIAL'], 'default': 'LINEAR', '$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@visibilityRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'FontStyle': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@family': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}}, '@horizontal': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@justify': {'$comment': 'MFString initializeOnly', 'type': 'array', 'items': {'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}}, '@language': {'$comment': 'SFString initializeOnly', 'type': 'string'}, '@leftToRight': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@spacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@style': {'enum': ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC'], 'default': 'PLAIN', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@topToBottom': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoElevationGrid': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@geoGridOrigin': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@height': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@yScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoLocation': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoLOD': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@child1Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child2Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child3Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child4Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'default': 10, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-rootNode': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@rootUrl': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoMetadata': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-data': {'$ref': '#/$defs/-X3DNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@summary': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoOrigin': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotateYUp': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoPositionInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoTouchSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoViewpoint': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@navType': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'default': 'EXAMINE', 'type': 'string'}, {'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, '@speedFactor': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Group': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimDisplacer': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@displacements': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@weight': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimHumanoid': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-joints': {'$ref': '#/$defs/-HAnimJointMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '-segments': {'$ref': '#/$defs/-HAnimSegmentMFNode'}, '-sites': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '-skeleton': {'$ref': '#/$defs/-HAnimJoint-HAnimSiteMFNode'}, '-skin': {'$ref': '#/$defs/-Group-Transform-Shape-IndexedFaceSetMFNode'}, '-skinCoord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-skinNormal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@version': {'enum': ['1.0', '2.0'], 'default': '1.0', '$comment': 'SFString inputOutput', 'type': 'string'}, '-viewpoints': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimJoint': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-HAnimJoint-HAnimSegment-HAnimSiteMFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@limitOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@llimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@skinCoordIndex': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@skinCoordWeight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@stiffness': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@ulimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimSegment': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@centerOfMass': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@mass': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@momentsOfInertia': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@name': {'anyOf': [{'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimSite': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'head': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'component': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/component'}, 'meta': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/meta'}}, 'additionalProperties': False}, 'ImageTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IMPORT': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@importedDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@inlineDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@importedDEF', '@inlineDEF'], 'additionalProperties': False}, 'IndexedFaceSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@texCoordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedLineSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedTriangleFanSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedTriangleSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedTriangleStripSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Inline': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@load': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IntegerSequencer': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IntegerTrigger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@integerKey': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IS': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'connect': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/connect'}}, 'additionalProperties': False}, 'KeySensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LineProperties': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@applied': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@linetype': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@linewidthScaleFactor': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LineSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vertexCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 2, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LoadSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@timeOut': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '-watchList': {'$ref': '#/$defs/-X3DUrlObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LOD': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Material': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@diffuseColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@emissiveColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@shininess': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@specularColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'meta': {'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@content': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@dir': {'enum': ['rtl', 'ltr'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@http-equiv': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@lang': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'anyOf': [{'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@scheme': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@content', '@name'], 'additionalProperties': False}}, 'MetadataDouble': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataFloat': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataInteger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-value': {'$ref': '#/$defs/-X3DMetadataObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataString': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MovieTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MultiTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@alpha': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@function': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}}, '@source': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MultiTextureCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MultiTextureTransform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NavigationInfo': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@avatarSize': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'prefixItems': [{'default': 0.25, 'minimum': 0, 'type': 'number'}, {'default': 1.6, 'minimum': 0, 'type': 'number'}, {'default': 0.75, 'minimum': 0, 'type': 'number'}], 'items': {'minimum': 0, 'type': 'number'}}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transitionTime': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@transitionType': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}}, '@type': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'EXAMINE', 'type': 'string'}, {'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@visibilityLimit': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Normal': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vector': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': -1, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NormalInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsCurve': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsCurve2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsOrientationInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsPatchSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsPositionInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DNurbsSurfaceGeometryNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@tessellationScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSurfaceInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSweptSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-crossSectionCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-NurbsCurveSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSwungSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-profileCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsTextureCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsTrimmedSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '-trimmingContour': {'$ref': '#/$defs/-Contour2DMFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'OrientationInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFRotation inputOutput', 'type': 'array', 'minItems': 4, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PixelTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@image': {'$comment': 'SFImage inputOutput', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PlaneSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@offset': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PointLight': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PointSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Polyline2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@lineSegments': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Polypoint2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PositionInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PositionInterpolator2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ProtoBody': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'ProtoDeclare': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'ProtoBody': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoBody'}, 'ProtoInterface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInterface'}}, 'required': ['@name'], 'additionalProperties': False}, 'ProtoInstance': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}}, 'IS': {'$ref': '#/$defs/IS'}, 'fieldValue': {'$ref': '#/$defs/fieldValue'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ProtoInterface': {'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'ProximitySensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ReceiverPdu': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@receivedPower': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@receiverState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterRadioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Rectangle2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ROUTE': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromNode': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toNode': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@fromField', '@fromNode', '@toField', '@toNode'], 'additionalProperties': False}, 'ScalarInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Scene': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DChildNode-X3DMetadataObjectMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'Script': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'#sourceText': {'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}, 'field': {'$ref': '#/$defs/field'}, '-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@directOutput': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mustEvaluate': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Shape': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-appearance': {'$ref': '#/$defs/-X3DAppearanceNodeSFNode'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DGeometryNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'SignalPdu': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@data': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@dataLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@encodingScheme': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@sampleRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@samples': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@tdlType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Sound': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@maxBack': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@maxFront': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minBack': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@minFront': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@priority': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-source': {'$ref': '#/$defs/-X3DSoundSourceNodeSFNode'}, '@spatialize': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Sphere': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'SphereSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@offset': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'SpotLight': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@beamWidth': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@cutOffAngle': {'default': 1.570796, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'StaticGroup': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'StringSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@deletionAllowed': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Switch': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@whichChoice': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Text': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fontStyle': {'$ref': '#/$defs/-X3DFontStyleNodeSFNode'}, '@length': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'number'}}, '@maxExtent': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@string': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureBackground': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-backTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-bottomTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-frontTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-leftTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-rightTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-topTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureCoordinateGenerator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'enum': ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL'], 'default': 'SPHERE', '$comment': 'SFString inputOutput', 'type': 'string'}, '@parameter': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureTransform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@scale': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@translation': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TimeSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@cycleInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TimeTrigger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TouchSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Transform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TransmitterPdu': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@antennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@antennaPatternLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@antennaPatternType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@cryptoKeyID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@cryptoSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@frequency': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@inputSource': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@lengthOfModulationParameters': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@modulationTypeDetail': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeMajor': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSpreadSpectrum': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@power': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@radioEntityTypeCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclature': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclatureVersion': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@relativeAntennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitFrequencyBandwidth': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transmitState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleFanSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@fanCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleSet2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vertices': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleStripSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@stripCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Viewpoint': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@centerOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'VisibilitySensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'WorldInfo': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@title': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'X3D': {'type': 'object', 'properties': {'@xsd:noNamespaceSchemaLocation': {'type': 'string', 'format': 'uri-reference'}, 'JSON schema': {'type': 'string'}, 'encoding': {'type': 'string', 'enum': ['UTF-8', 'UTF-16', 'UTF-32']}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'head': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/head'}, '@profile': {'enum': ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full'], 'default': 'Immersive', '$comment': 'SFString inputOutput', 'type': 'string'}, 'Scene': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Scene'}, '@version': {'enum': ['3.0'], 'default': '3.3', '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@profile', 'Scene', 'encoding', '@version'], 'additionalProperties': False}, '-X3DChildNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}}, '-X3DMetadataObjectSFNode': {'type': 'object', 'properties': {'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-FillPropertiesSFNode': {'type': 'object', 'properties': {'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-LinePropertiesSFNode': {'type': 'object', 'properties': {'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DMaterialNodeSFNode': {'type': 'object', 'properties': {'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTextureNodeSFNode': {'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTextureTransformNodeSFNode': {'type': 'object', 'properties': {'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DChildNodeSFNode': {'type': 'object', 'properties': {'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}, '-NurbsCurve2D-ContourPolyline2DMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DColorNodeSFNode': {'type': 'object', 'properties': {'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DNormalNodeSFNode': {'type': 'object', 'properties': {'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTextureCoordinateNodeSFNode': {'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}}, 'additionalProperties': False}}, '-GeoOriginSFNode': {'type': 'object', 'properties': {'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-HAnimJointMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimSegmentMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimSiteMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimJoint-HAnimSiteMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-Group-Transform-Shape-IndexedFaceSetMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DCoordinateNodeSFNode': {'type': 'object', 'properties': {'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-HAnimJoint-HAnimSegment-HAnimSiteMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimDisplacerMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DUrlObjectMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DMetadataObjectMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureCoordinateNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureTransformNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode': {'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DNurbsSurfaceGeometryNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DNurbsControlCurveNodeSFNode': {'type': 'object', 'properties': {'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-NurbsCurveSFNode': {'type': 'object', 'properties': {'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-Contour2DMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DChildNode-X3DMetadataObjectMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}}, 'additionalProperties': False}}, '-X3DAppearanceNodeSFNode': {'type': 'object', 'properties': {'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DGeometryNodeSFNode': {'type': 'object', 'properties': {'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DSoundSourceNodeSFNode': {'type': 'object', 'properties': {'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DFontStyleNodeSFNode': {'type': 'object', 'properties': {'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTexture2DNode-MultiTextureSFNode': {'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}}, rule='required')
        data_keys = set(data.keys())
        if "X3D" in data_keys:
            data_keys.remove("X3D")
            data__X3D = data["X3D"]
            validate_x3d_3_0_jsonschema_json___defs_x3d(data__X3D)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'$schema': 'https://json-schema.org/draft/2020-12/schema', '$id': 'x3d-3.0-JSONSchema.json', 'title': 'JSON Schema X3D V3.0', 'description': 'Experimental JSON Schema for X3D V3.0', 'type': 'object', 'properties': {'X3D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/X3D'}}, 'required': ['X3D'], 'additionalProperties': False, '$defs': {'-childStatements': {'description': 'Comments and ROUTEs', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'IMPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IMPORT'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'EXPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EXPORT'}}, 'additionalProperties': False}}, '@geoSystem': {'description': 'Attempts to validate all possible combinations', 'oneOf': [{'type': 'array', 'minItems': 2, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}}, {'type': 'array', 'minItems': 1, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, {'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, {'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, {'type': 'array', 'minItems': 2, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 1, 'maxItems': 1, 'prefixItems': [{'type': 'string', 'enum': ['GC', 'GCC'], 'default': 'GD'}], 'items': False}]}, 'SceneGraphStructureStatement': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'Anchor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@parameter': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Appearance': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fillProperties': {'$ref': '#/$defs/-FillPropertiesSFNode'}, '-lineProperties': {'$ref': '#/$defs/-LinePropertiesSFNode'}, '-material': {'$ref': '#/$defs/-X3DMaterialNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Arc2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ArcClose2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closureType': {'enum': ['PIE', 'CHORD'], 'default': 'PIE', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'AudioClip': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Background': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@backUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@bottomUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@frontUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@leftUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rightUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@topUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Billboard': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@axisOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanFilter': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanSequencer': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFBool inputOutput', 'type': 'array', 'items': {'type': 'boolean'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanToggle': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@toggle': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'BooleanTrigger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Box': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Circle2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Collision': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-proxy': {'$ref': '#/$defs/-X3DChildNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Color': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ColorInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ColorRGBA': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColorRGBA inputOutput', 'type': 'array', 'minItems': 4, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'component': {'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@level': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@name': {'enum': ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time'], '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@level', '@name'], 'additionalProperties': False}}, 'Cone': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@bottomRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'connect': {'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@nodeField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@protoField': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@nodeField', '@protoField'], 'additionalProperties': False}}, 'Contour2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '-children': {'$ref': '#/$defs/-NurbsCurve2D-ContourPolyline2DMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ContourPolyline2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Coordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CoordinateDouble': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CoordinateInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CoordinateInterpolator2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Cylinder': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@top': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'CylinderSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@diskAngle': {'default': 0.26179167, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxAngle': {'default': -1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minAngle': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@offset': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'DirectionalLight': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Disk2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@innerRadius': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@outerRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ElevationGrid': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'EspduTransform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterArray': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@articulationParameterChangeIndicatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterCount': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterDesignatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterIdPartAttachedToArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterTypeArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@collisionType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@deadReckoning': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@detonationLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationRelativeLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationResult': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityExtra': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySpecific': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySubcategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventNumber': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fired1': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fired2': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fireMissionIndex': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@firingRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@firingRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@forceID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fuse': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@linearAcceleration': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@linearVelocity': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@marking': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionEndPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@munitionEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionQuantity': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionStartPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@warhead': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'EXPORT': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@localDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@localDEF'], 'additionalProperties': False}, 'ExternProtoDeclare': {'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}}, 'required': ['@name', '@url'], 'additionalProperties': False}, 'Extrusion': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@beginCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@crossSection': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'prefixItems': [{'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': {'type': 'number'}}, '@endCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'MFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@scale': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@spine': {'$comment': 'MFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'field': {'type': 'array', 'items': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@accessType': {'enum': ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@type': {'enum': ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@accessType', '@name', '@type'], 'additionalProperties': False}}, 'fieldValue': {'type': 'array', 'items': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@name'], 'additionalProperties': False}}, 'FillProperties': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@filled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@hatched': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchStyle': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Fog': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@fogType': {'enum': ['LINEAR', 'EXPONENTIAL'], 'default': 'LINEAR', '$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@visibilityRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'FontStyle': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@family': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}}, '@horizontal': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@justify': {'$comment': 'MFString initializeOnly', 'type': 'array', 'items': {'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}}, '@language': {'$comment': 'SFString initializeOnly', 'type': 'string'}, '@leftToRight': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@spacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@style': {'enum': ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC'], 'default': 'PLAIN', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@topToBottom': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoElevationGrid': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@geoGridOrigin': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@height': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@yScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoLocation': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoLOD': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@child1Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child2Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child3Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child4Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'default': 10, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-rootNode': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@rootUrl': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoMetadata': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-data': {'$ref': '#/$defs/-X3DNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@summary': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoOrigin': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotateYUp': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoPositionInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoTouchSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'GeoViewpoint': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@navType': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'default': 'EXAMINE', 'type': 'string'}, {'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, '@speedFactor': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Group': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimDisplacer': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@displacements': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@weight': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimHumanoid': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-joints': {'$ref': '#/$defs/-HAnimJointMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '-segments': {'$ref': '#/$defs/-HAnimSegmentMFNode'}, '-sites': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '-skeleton': {'$ref': '#/$defs/-HAnimJoint-HAnimSiteMFNode'}, '-skin': {'$ref': '#/$defs/-Group-Transform-Shape-IndexedFaceSetMFNode'}, '-skinCoord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-skinNormal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@version': {'enum': ['1.0', '2.0'], 'default': '1.0', '$comment': 'SFString inputOutput', 'type': 'string'}, '-viewpoints': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimJoint': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-HAnimJoint-HAnimSegment-HAnimSiteMFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@limitOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@llimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@skinCoordIndex': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@skinCoordWeight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@stiffness': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@ulimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimSegment': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@centerOfMass': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@mass': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@momentsOfInertia': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@name': {'anyOf': [{'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'HAnimSite': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'head': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'component': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/component'}, 'meta': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/meta'}}, 'additionalProperties': False}, 'ImageTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IMPORT': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@importedDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@inlineDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@importedDEF', '@inlineDEF'], 'additionalProperties': False}, 'IndexedFaceSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@texCoordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedLineSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedTriangleFanSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedTriangleSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IndexedTriangleStripSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Inline': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@load': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IntegerSequencer': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IntegerTrigger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@integerKey': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'IS': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'connect': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/connect'}}, 'additionalProperties': False}, 'KeySensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LineProperties': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@applied': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@linetype': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@linewidthScaleFactor': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LineSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vertexCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 2, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LoadSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@timeOut': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '-watchList': {'$ref': '#/$defs/-X3DUrlObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'LOD': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Material': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@diffuseColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@emissiveColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@shininess': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@specularColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'meta': {'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@content': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@dir': {'enum': ['rtl', 'ltr'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@http-equiv': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@lang': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'anyOf': [{'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@scheme': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@content', '@name'], 'additionalProperties': False}}, 'MetadataDouble': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataFloat': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataInteger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-value': {'$ref': '#/$defs/-X3DMetadataObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MetadataString': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MovieTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MultiTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@alpha': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@function': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}}, '@source': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MultiTextureCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'MultiTextureTransform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NavigationInfo': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@avatarSize': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'prefixItems': [{'default': 0.25, 'minimum': 0, 'type': 'number'}, {'default': 1.6, 'minimum': 0, 'type': 'number'}, {'default': 0.75, 'minimum': 0, 'type': 'number'}], 'items': {'minimum': 0, 'type': 'number'}}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transitionTime': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@transitionType': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}}, '@type': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'EXAMINE', 'type': 'string'}, {'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@visibilityLimit': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Normal': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vector': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': -1, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NormalInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsCurve': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsCurve2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsOrientationInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsPatchSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsPositionInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DNurbsSurfaceGeometryNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@tessellationScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSurfaceInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSweptSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-crossSectionCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-NurbsCurveSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsSwungSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-profileCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsTextureCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'NurbsTrimmedSurface': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '-trimmingContour': {'$ref': '#/$defs/-Contour2DMFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'OrientationInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFRotation inputOutput', 'type': 'array', 'minItems': 4, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PixelTexture': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@image': {'$comment': 'SFImage inputOutput', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PlaneSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@offset': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PointLight': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PointSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Polyline2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@lineSegments': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Polypoint2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PositionInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'PositionInterpolator2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ProtoBody': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'ProtoDeclare': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'ProtoBody': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoBody'}, 'ProtoInterface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInterface'}}, 'required': ['@name'], 'additionalProperties': False}, 'ProtoInstance': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}}, 'IS': {'$ref': '#/$defs/IS'}, 'fieldValue': {'$ref': '#/$defs/fieldValue'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ProtoInterface': {'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'ProximitySensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ReceiverPdu': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@receivedPower': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@receiverState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterRadioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Rectangle2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'ROUTE': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromNode': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toNode': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@fromField', '@fromNode', '@toField', '@toNode'], 'additionalProperties': False}, 'ScalarInterpolator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Scene': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DChildNode-X3DMetadataObjectMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, 'Script': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'#sourceText': {'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}, 'field': {'$ref': '#/$defs/field'}, '-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@directOutput': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mustEvaluate': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Shape': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-appearance': {'$ref': '#/$defs/-X3DAppearanceNodeSFNode'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DGeometryNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'SignalPdu': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@data': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@dataLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@encodingScheme': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@sampleRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@samples': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@tdlType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Sound': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@maxBack': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@maxFront': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minBack': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@minFront': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@priority': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-source': {'$ref': '#/$defs/-X3DSoundSourceNodeSFNode'}, '@spatialize': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Sphere': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'SphereSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@offset': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'SpotLight': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@beamWidth': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@cutOffAngle': {'default': 1.570796, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'StaticGroup': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'StringSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@deletionAllowed': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Switch': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@whichChoice': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Text': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fontStyle': {'$ref': '#/$defs/-X3DFontStyleNodeSFNode'}, '@length': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'number'}}, '@maxExtent': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@string': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureBackground': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-backTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-bottomTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-frontTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-leftTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-rightTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-topTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureCoordinate': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureCoordinateGenerator': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'enum': ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL'], 'default': 'SPHERE', '$comment': 'SFString inputOutput', 'type': 'string'}, '@parameter': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TextureTransform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@scale': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@translation': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TimeSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@cycleInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TimeTrigger': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TouchSensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Transform': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TransmitterPdu': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@antennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@antennaPatternLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@antennaPatternType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@cryptoKeyID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@cryptoSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@frequency': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@inputSource': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@lengthOfModulationParameters': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@modulationTypeDetail': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeMajor': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSpreadSpectrum': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@power': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@radioEntityTypeCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclature': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclatureVersion': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@relativeAntennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitFrequencyBandwidth': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transmitState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleFanSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@fanCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleSet2D': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vertices': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'TriangleStripSet': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@stripCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'Viewpoint': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@centerOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'VisibilitySensor': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'WorldInfo': {'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@title': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, 'X3D': {'type': 'object', 'properties': {'@xsd:noNamespaceSchemaLocation': {'type': 'string', 'format': 'uri-reference'}, 'JSON schema': {'type': 'string'}, 'encoding': {'type': 'string', 'enum': ['UTF-8', 'UTF-16', 'UTF-32']}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'head': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/head'}, '@profile': {'enum': ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full'], 'default': 'Immersive', '$comment': 'SFString inputOutput', 'type': 'string'}, 'Scene': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Scene'}, '@version': {'enum': ['3.0'], 'default': '3.3', '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@profile', 'Scene', 'encoding', '@version'], 'additionalProperties': False}, '-X3DChildNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}}, '-X3DMetadataObjectSFNode': {'type': 'object', 'properties': {'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-FillPropertiesSFNode': {'type': 'object', 'properties': {'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-LinePropertiesSFNode': {'type': 'object', 'properties': {'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DMaterialNodeSFNode': {'type': 'object', 'properties': {'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTextureNodeSFNode': {'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTextureTransformNodeSFNode': {'type': 'object', 'properties': {'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DChildNodeSFNode': {'type': 'object', 'properties': {'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}, '-NurbsCurve2D-ContourPolyline2DMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DColorNodeSFNode': {'type': 'object', 'properties': {'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DNormalNodeSFNode': {'type': 'object', 'properties': {'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTextureCoordinateNodeSFNode': {'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}}, 'additionalProperties': False}}, '-GeoOriginSFNode': {'type': 'object', 'properties': {'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-HAnimJointMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimSegmentMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimSiteMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimJoint-HAnimSiteMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-Group-Transform-Shape-IndexedFaceSetMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DCoordinateNodeSFNode': {'type': 'object', 'properties': {'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-HAnimJoint-HAnimSegment-HAnimSiteMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-HAnimDisplacerMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DUrlObjectMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DMetadataObjectMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureCoordinateNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureTransformNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode': {'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DNurbsSurfaceGeometryNodeMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DNurbsControlCurveNodeSFNode': {'type': 'object', 'properties': {'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-NurbsCurveSFNode': {'type': 'object', 'properties': {'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-Contour2DMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, '-X3DChildNode-X3DMetadataObjectMFNode': {'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}}, 'additionalProperties': False}}, '-X3DAppearanceNodeSFNode': {'type': 'object', 'properties': {'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DGeometryNodeSFNode': {'type': 'object', 'properties': {'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DSoundSourceNodeSFNode': {'type': 'object', 'properties': {'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DFontStyleNodeSFNode': {'type': 'object', 'properties': {'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, '-X3DTexture2DNode-MultiTextureSFNode': {'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_x3d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@xsd:noNamespaceSchemaLocation': {'type': 'string', 'format': 'uri-reference'}, 'JSON schema': {'type': 'string'}, 'encoding': {'type': 'string', 'enum': ['UTF-8', 'UTF-16', 'UTF-32']}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'head': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/head'}, '@profile': {'enum': ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full'], 'default': 'Immersive', '$comment': 'SFString inputOutput', 'type': 'string'}, 'Scene': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Scene'}, '@version': {'enum': ['3.0'], 'default': '3.3', '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@profile', 'Scene', 'encoding', '@version'], 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_len = len(data)
        if not all(prop in data for prop in ['@profile', 'Scene', 'encoding', '@version']):
            raise JsonSchemaValueException("data must contain ['@profile', 'Scene', 'encoding', '@version'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@xsd:noNamespaceSchemaLocation': {'type': 'string', 'format': 'uri-reference'}, 'JSON schema': {'type': 'string'}, 'encoding': {'type': 'string', 'enum': ['UTF-8', 'UTF-16', 'UTF-32']}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'head': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/head'}, '@profile': {'enum': ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full'], 'default': 'Immersive', '$comment': 'SFString inputOutput', 'type': 'string'}, 'Scene': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Scene'}, '@version': {'enum': ['3.0'], 'default': '3.3', '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@profile', 'Scene', 'encoding', '@version'], 'additionalProperties': False}, rule='required')
        data_keys = set(data.keys())
        if "@xsd:noNamespaceSchemaLocation" in data_keys:
            data_keys.remove("@xsd:noNamespaceSchemaLocation")
            data__xsdnoNamespaceSchemaLocation = data["@xsd:noNamespaceSchemaLocation"]
            if not isinstance(data__xsdnoNamespaceSchemaLocation, (str)):
                raise JsonSchemaValueException("data.@xsd:noNamespaceSchemaLocation must be string", value=data__xsdnoNamespaceSchemaLocation, name="data.@xsd:noNamespaceSchemaLocation", definition={'type': 'string', 'format': 'uri-reference'}, rule='type')
            if isinstance(data__xsdnoNamespaceSchemaLocation, str):
                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__xsdnoNamespaceSchemaLocation):
                    raise JsonSchemaValueException("data.@xsd:noNamespaceSchemaLocation must be uri-reference", value=data__xsdnoNamespaceSchemaLocation, name="data.@xsd:noNamespaceSchemaLocation", definition={'type': 'string', 'format': 'uri-reference'}, rule='format')
        if "JSON schema" in data_keys:
            data_keys.remove("JSON schema")
            data__JSONschema = data["JSON schema"]
            if not isinstance(data__JSONschema, (str)):
                raise JsonSchemaValueException("data.JSON schema must be string", value=data__JSONschema, name="data.JSON schema", definition={'type': 'string'}, rule='type')
        if "encoding" in data_keys:
            data_keys.remove("encoding")
            data__encoding = data["encoding"]
            if not isinstance(data__encoding, (str)):
                raise JsonSchemaValueException("data.encoding must be string", value=data__encoding, name="data.encoding", definition={'type': 'string', 'enum': ['UTF-8', 'UTF-16', 'UTF-32']}, rule='type')
            if data__encoding not in ['UTF-8', 'UTF-16', 'UTF-32']:
                raise JsonSchemaValueException("data.encoding must be one of ['UTF-8', 'UTF-16', 'UTF-32']", value=data__encoding, name="data.encoding", definition={'type': 'string', 'enum': ['UTF-8', 'UTF-16', 'UTF-32']}, rule='enum')
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "head" in data_keys:
            data_keys.remove("head")
            data__head = data["head"]
            validate_x3d_3_0_jsonschema_json___defs_head(data__head)
        if "@profile" in data_keys:
            data_keys.remove("@profile")
            data__profile = data["@profile"]
            if not isinstance(data__profile, (str)):
                raise JsonSchemaValueException("data.@profile must be string", value=data__profile, name="data.@profile", definition={'enum': ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full'], 'default': 'Immersive', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
            if data__profile not in ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full']:
                raise JsonSchemaValueException("data.@profile must be one of ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full']", value=data__profile, name="data.@profile", definition={'enum': ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full'], 'default': 'Immersive', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
        else: data["@profile"] = 'Immersive'
        if "Scene" in data_keys:
            data_keys.remove("Scene")
            data__Scene = data["Scene"]
            validate_x3d_3_0_jsonschema_json___defs_scene(data__Scene)
        if "@version" in data_keys:
            data_keys.remove("@version")
            data__version = data["@version"]
            if not isinstance(data__version, (str)):
                raise JsonSchemaValueException("data.@version must be string", value=data__version, name="data.@version", definition={'enum': ['3.0'], 'default': '3.3', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
            if data__version not in ['3.0']:
                raise JsonSchemaValueException("data.@version must be one of ['3.0']", value=data__version, name="data.@version", definition={'enum': ['3.0'], 'default': '3.3', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
        else: data["@version"] = '3.3'
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@xsd:noNamespaceSchemaLocation': {'type': 'string', 'format': 'uri-reference'}, 'JSON schema': {'type': 'string'}, 'encoding': {'type': 'string', 'enum': ['UTF-8', 'UTF-16', 'UTF-32']}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'head': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/head'}, '@profile': {'enum': ['Core', 'Interchange', 'Interactive', 'Immersive', 'MPEG4Interactive', 'Full'], 'default': 'Immersive', '$comment': 'SFString inputOutput', 'type': 'string'}, 'Scene': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Scene'}, '@version': {'enum': ['3.0'], 'default': '3.3', '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@profile', 'Scene', 'encoding', '@version'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_scene(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DChildNode-X3DMetadataObjectMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__x3dchildnode_x3dmetadataobjectmfnode(data__children)
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DChildNode-X3DMetadataObjectMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dchildnode_x3dmetadataobjectmfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "Background" in data_item_keys:
                    data_item_keys.remove("Background")
                    data_item__Background = data_item["Background"]
                    validate_x3d_3_0_jsonschema_json___defs_background(data_item__Background)
                if "TextureBackground" in data_item_keys:
                    data_item_keys.remove("TextureBackground")
                    data_item__TextureBackground = data_item["TextureBackground"]
                    validate_x3d_3_0_jsonschema_json___defs_texturebackground(data_item__TextureBackground)
                if "Fog" in data_item_keys:
                    data_item_keys.remove("Fog")
                    data_item__Fog = data_item["Fog"]
                    validate_x3d_3_0_jsonschema_json___defs_fog(data_item__Fog)
                if "GeoViewpoint" in data_item_keys:
                    data_item_keys.remove("GeoViewpoint")
                    data_item__GeoViewpoint = data_item["GeoViewpoint"]
                    validate_x3d_3_0_jsonschema_json___defs_geoviewpoint(data_item__GeoViewpoint)
                if "NavigationInfo" in data_item_keys:
                    data_item_keys.remove("NavigationInfo")
                    data_item__NavigationInfo = data_item["NavigationInfo"]
                    validate_x3d_3_0_jsonschema_json___defs_navigationinfo(data_item__NavigationInfo)
                if "Viewpoint" in data_item_keys:
                    data_item_keys.remove("Viewpoint")
                    data_item__Viewpoint = data_item["Viewpoint"]
                    validate_x3d_3_0_jsonschema_json___defs_viewpoint(data_item__Viewpoint)
                if "Anchor" in data_item_keys:
                    data_item_keys.remove("Anchor")
                    data_item__Anchor = data_item["Anchor"]
                    validate_x3d_3_0_jsonschema_json___defs_anchor(data_item__Anchor)
                if "Billboard" in data_item_keys:
                    data_item_keys.remove("Billboard")
                    data_item__Billboard = data_item["Billboard"]
                    validate_x3d_3_0_jsonschema_json___defs_billboard(data_item__Billboard)
                if "Collision" in data_item_keys:
                    data_item_keys.remove("Collision")
                    data_item__Collision = data_item["Collision"]
                    validate_x3d_3_0_jsonschema_json___defs_collision(data_item__Collision)
                if "EspduTransform" in data_item_keys:
                    data_item_keys.remove("EspduTransform")
                    data_item__EspduTransform = data_item["EspduTransform"]
                    validate_x3d_3_0_jsonschema_json___defs_espdutransform(data_item__EspduTransform)
                if "GeoLocation" in data_item_keys:
                    data_item_keys.remove("GeoLocation")
                    data_item__GeoLocation = data_item["GeoLocation"]
                    validate_x3d_3_0_jsonschema_json___defs_geolocation(data_item__GeoLocation)
                if "Group" in data_item_keys:
                    data_item_keys.remove("Group")
                    data_item__Group = data_item["Group"]
                    validate_x3d_3_0_jsonschema_json___defs_group(data_item__Group)
                if "HAnimSegment" in data_item_keys:
                    data_item_keys.remove("HAnimSegment")
                    data_item__HAnimSegment = data_item["HAnimSegment"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsegment(data_item__HAnimSegment)
                if "HAnimSite" in data_item_keys:
                    data_item_keys.remove("HAnimSite")
                    data_item__HAnimSite = data_item["HAnimSite"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsite(data_item__HAnimSite)
                if "LOD" in data_item_keys:
                    data_item_keys.remove("LOD")
                    data_item__LOD = data_item["LOD"]
                    validate_x3d_3_0_jsonschema_json___defs_lod(data_item__LOD)
                if "Switch" in data_item_keys:
                    data_item_keys.remove("Switch")
                    data_item__Switch = data_item["Switch"]
                    validate_x3d_3_0_jsonschema_json___defs_switch(data_item__Switch)
                if "Transform" in data_item_keys:
                    data_item_keys.remove("Transform")
                    data_item__Transform = data_item["Transform"]
                    validate_x3d_3_0_jsonschema_json___defs_transform(data_item__Transform)
                if "GeoMetadata" in data_item_keys:
                    data_item_keys.remove("GeoMetadata")
                    data_item__GeoMetadata = data_item["GeoMetadata"]
                    validate_x3d_3_0_jsonschema_json___defs_geometadata(data_item__GeoMetadata)
                if "WorldInfo" in data_item_keys:
                    data_item_keys.remove("WorldInfo")
                    data_item__WorldInfo = data_item["WorldInfo"]
                    validate_x3d_3_0_jsonschema_json___defs_worldinfo(data_item__WorldInfo)
                if "ColorInterpolator" in data_item_keys:
                    data_item_keys.remove("ColorInterpolator")
                    data_item__ColorInterpolator = data_item["ColorInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_colorinterpolator(data_item__ColorInterpolator)
                if "CoordinateInterpolator" in data_item_keys:
                    data_item_keys.remove("CoordinateInterpolator")
                    data_item__CoordinateInterpolator = data_item["CoordinateInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator(data_item__CoordinateInterpolator)
                if "CoordinateInterpolator2D" in data_item_keys:
                    data_item_keys.remove("CoordinateInterpolator2D")
                    data_item__CoordinateInterpolator2D = data_item["CoordinateInterpolator2D"]
                    validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator2d(data_item__CoordinateInterpolator2D)
                if "GeoPositionInterpolator" in data_item_keys:
                    data_item_keys.remove("GeoPositionInterpolator")
                    data_item__GeoPositionInterpolator = data_item["GeoPositionInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_geopositioninterpolator(data_item__GeoPositionInterpolator)
                if "NormalInterpolator" in data_item_keys:
                    data_item_keys.remove("NormalInterpolator")
                    data_item__NormalInterpolator = data_item["NormalInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_normalinterpolator(data_item__NormalInterpolator)
                if "OrientationInterpolator" in data_item_keys:
                    data_item_keys.remove("OrientationInterpolator")
                    data_item__OrientationInterpolator = data_item["OrientationInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_orientationinterpolator(data_item__OrientationInterpolator)
                if "PositionInterpolator" in data_item_keys:
                    data_item_keys.remove("PositionInterpolator")
                    data_item__PositionInterpolator = data_item["PositionInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_positioninterpolator(data_item__PositionInterpolator)
                if "PositionInterpolator2D" in data_item_keys:
                    data_item_keys.remove("PositionInterpolator2D")
                    data_item__PositionInterpolator2D = data_item["PositionInterpolator2D"]
                    validate_x3d_3_0_jsonschema_json___defs_positioninterpolator2d(data_item__PositionInterpolator2D)
                if "ScalarInterpolator" in data_item_keys:
                    data_item_keys.remove("ScalarInterpolator")
                    data_item__ScalarInterpolator = data_item["ScalarInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_scalarinterpolator(data_item__ScalarInterpolator)
                if "DirectionalLight" in data_item_keys:
                    data_item_keys.remove("DirectionalLight")
                    data_item__DirectionalLight = data_item["DirectionalLight"]
                    validate_x3d_3_0_jsonschema_json___defs_directionallight(data_item__DirectionalLight)
                if "PointLight" in data_item_keys:
                    data_item_keys.remove("PointLight")
                    data_item__PointLight = data_item["PointLight"]
                    validate_x3d_3_0_jsonschema_json___defs_pointlight(data_item__PointLight)
                if "SpotLight" in data_item_keys:
                    data_item_keys.remove("SpotLight")
                    data_item__SpotLight = data_item["SpotLight"]
                    validate_x3d_3_0_jsonschema_json___defs_spotlight(data_item__SpotLight)
                if "Script" in data_item_keys:
                    data_item_keys.remove("Script")
                    data_item__Script = data_item["Script"]
                    validate_x3d_3_0_jsonschema_json___defs_script(data_item__Script)
                if "ProximitySensor" in data_item_keys:
                    data_item_keys.remove("ProximitySensor")
                    data_item__ProximitySensor = data_item["ProximitySensor"]
                    validate_x3d_3_0_jsonschema_json___defs_proximitysensor(data_item__ProximitySensor)
                if "VisibilitySensor" in data_item_keys:
                    data_item_keys.remove("VisibilitySensor")
                    data_item__VisibilitySensor = data_item["VisibilitySensor"]
                    validate_x3d_3_0_jsonschema_json___defs_visibilitysensor(data_item__VisibilitySensor)
                if "KeySensor" in data_item_keys:
                    data_item_keys.remove("KeySensor")
                    data_item__KeySensor = data_item["KeySensor"]
                    validate_x3d_3_0_jsonschema_json___defs_keysensor(data_item__KeySensor)
                if "StringSensor" in data_item_keys:
                    data_item_keys.remove("StringSensor")
                    data_item__StringSensor = data_item["StringSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_stringsensor(data_item__StringSensor)
                if "LoadSensor" in data_item_keys:
                    data_item_keys.remove("LoadSensor")
                    data_item__LoadSensor = data_item["LoadSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_loadsensor(data_item__LoadSensor)
                if "ReceiverPdu" in data_item_keys:
                    data_item_keys.remove("ReceiverPdu")
                    data_item__ReceiverPdu = data_item["ReceiverPdu"]
                    validate_x3d_3_0_jsonschema_json___defs_receiverpdu(data_item__ReceiverPdu)
                if "SignalPdu" in data_item_keys:
                    data_item_keys.remove("SignalPdu")
                    data_item__SignalPdu = data_item["SignalPdu"]
                    validate_x3d_3_0_jsonschema_json___defs_signalpdu(data_item__SignalPdu)
                if "TransmitterPdu" in data_item_keys:
                    data_item_keys.remove("TransmitterPdu")
                    data_item__TransmitterPdu = data_item["TransmitterPdu"]
                    validate_x3d_3_0_jsonschema_json___defs_transmitterpdu(data_item__TransmitterPdu)
                if "CylinderSensor" in data_item_keys:
                    data_item_keys.remove("CylinderSensor")
                    data_item__CylinderSensor = data_item["CylinderSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_cylindersensor(data_item__CylinderSensor)
                if "PlaneSensor" in data_item_keys:
                    data_item_keys.remove("PlaneSensor")
                    data_item__PlaneSensor = data_item["PlaneSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_planesensor(data_item__PlaneSensor)
                if "SphereSensor" in data_item_keys:
                    data_item_keys.remove("SphereSensor")
                    data_item__SphereSensor = data_item["SphereSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_spheresensor(data_item__SphereSensor)
                if "GeoTouchSensor" in data_item_keys:
                    data_item_keys.remove("GeoTouchSensor")
                    data_item__GeoTouchSensor = data_item["GeoTouchSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_geotouchsensor(data_item__GeoTouchSensor)
                if "TouchSensor" in data_item_keys:
                    data_item_keys.remove("TouchSensor")
                    data_item__TouchSensor = data_item["TouchSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_touchsensor(data_item__TouchSensor)
                if "TimeSensor" in data_item_keys:
                    data_item_keys.remove("TimeSensor")
                    data_item__TimeSensor = data_item["TimeSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_timesensor(data_item__TimeSensor)
                if "BooleanSequencer" in data_item_keys:
                    data_item_keys.remove("BooleanSequencer")
                    data_item__BooleanSequencer = data_item["BooleanSequencer"]
                    validate_x3d_3_0_jsonschema_json___defs_booleansequencer(data_item__BooleanSequencer)
                if "IntegerSequencer" in data_item_keys:
                    data_item_keys.remove("IntegerSequencer")
                    data_item__IntegerSequencer = data_item["IntegerSequencer"]
                    validate_x3d_3_0_jsonschema_json___defs_integersequencer(data_item__IntegerSequencer)
                if "Shape" in data_item_keys:
                    data_item_keys.remove("Shape")
                    data_item__Shape = data_item["Shape"]
                    validate_x3d_3_0_jsonschema_json___defs_shape(data_item__Shape)
                if "Sound" in data_item_keys:
                    data_item_keys.remove("Sound")
                    data_item__Sound = data_item["Sound"]
                    validate_x3d_3_0_jsonschema_json___defs_sound(data_item__Sound)
                if "AudioClip" in data_item_keys:
                    data_item_keys.remove("AudioClip")
                    data_item__AudioClip = data_item["AudioClip"]
                    validate_x3d_3_0_jsonschema_json___defs_audioclip(data_item__AudioClip)
                if "MovieTexture" in data_item_keys:
                    data_item_keys.remove("MovieTexture")
                    data_item__MovieTexture = data_item["MovieTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_movietexture(data_item__MovieTexture)
                if "BooleanTrigger" in data_item_keys:
                    data_item_keys.remove("BooleanTrigger")
                    data_item__BooleanTrigger = data_item["BooleanTrigger"]
                    validate_x3d_3_0_jsonschema_json___defs_booleantrigger(data_item__BooleanTrigger)
                if "IntegerTrigger" in data_item_keys:
                    data_item_keys.remove("IntegerTrigger")
                    data_item__IntegerTrigger = data_item["IntegerTrigger"]
                    validate_x3d_3_0_jsonschema_json___defs_integertrigger(data_item__IntegerTrigger)
                if "TimeTrigger" in data_item_keys:
                    data_item_keys.remove("TimeTrigger")
                    data_item__TimeTrigger = data_item["TimeTrigger"]
                    validate_x3d_3_0_jsonschema_json___defs_timetrigger(data_item__TimeTrigger)
                if "BooleanFilter" in data_item_keys:
                    data_item_keys.remove("BooleanFilter")
                    data_item__BooleanFilter = data_item["BooleanFilter"]
                    validate_x3d_3_0_jsonschema_json___defs_booleanfilter(data_item__BooleanFilter)
                if "BooleanToggle" in data_item_keys:
                    data_item_keys.remove("BooleanToggle")
                    data_item__BooleanToggle = data_item["BooleanToggle"]
                    validate_x3d_3_0_jsonschema_json___defs_booleantoggle(data_item__BooleanToggle)
                if "ExternProtoDeclare" in data_item_keys:
                    data_item_keys.remove("ExternProtoDeclare")
                    data_item__ExternProtoDeclare = data_item["ExternProtoDeclare"]
                    validate_x3d_3_0_jsonschema_json___defs_externprotodeclare(data_item__ExternProtoDeclare)
                if "GeoLOD" in data_item_keys:
                    data_item_keys.remove("GeoLOD")
                    data_item__GeoLOD = data_item["GeoLOD"]
                    validate_x3d_3_0_jsonschema_json___defs_geolod(data_item__GeoLOD)
                if "HAnimHumanoid" in data_item_keys:
                    data_item_keys.remove("HAnimHumanoid")
                    data_item__HAnimHumanoid = data_item["HAnimHumanoid"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimhumanoid(data_item__HAnimHumanoid)
                if "HAnimJoint" in data_item_keys:
                    data_item_keys.remove("HAnimJoint")
                    data_item__HAnimJoint = data_item["HAnimJoint"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimjoint(data_item__HAnimJoint)
                if "Inline" in data_item_keys:
                    data_item_keys.remove("Inline")
                    data_item__Inline = data_item["Inline"]
                    validate_x3d_3_0_jsonschema_json___defs_inline(data_item__Inline)
                if "NurbsOrientationInterpolator" in data_item_keys:
                    data_item_keys.remove("NurbsOrientationInterpolator")
                    data_item__NurbsOrientationInterpolator = data_item["NurbsOrientationInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbsorientationinterpolator(data_item__NurbsOrientationInterpolator)
                if "NurbsPositionInterpolator" in data_item_keys:
                    data_item_keys.remove("NurbsPositionInterpolator")
                    data_item__NurbsPositionInterpolator = data_item["NurbsPositionInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbspositioninterpolator(data_item__NurbsPositionInterpolator)
                if "NurbsSet" in data_item_keys:
                    data_item_keys.remove("NurbsSet")
                    data_item__NurbsSet = data_item["NurbsSet"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbsset(data_item__NurbsSet)
                if "NurbsSurfaceInterpolator" in data_item_keys:
                    data_item_keys.remove("NurbsSurfaceInterpolator")
                    data_item__NurbsSurfaceInterpolator = data_item["NurbsSurfaceInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbssurfaceinterpolator(data_item__NurbsSurfaceInterpolator)
                if "ProtoDeclare" in data_item_keys:
                    data_item_keys.remove("ProtoDeclare")
                    data_item__ProtoDeclare = data_item["ProtoDeclare"]
                    validate_x3d_3_0_jsonschema_json___defs_protodeclare(data_item__ProtoDeclare)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if "ROUTE" in data_item_keys:
                    data_item_keys.remove("ROUTE")
                    data_item__ROUTE = data_item["ROUTE"]
                    validate_x3d_3_0_jsonschema_json___defs_route(data_item__ROUTE)
                if "StaticGroup" in data_item_keys:
                    data_item_keys.remove("StaticGroup")
                    data_item__StaticGroup = data_item["StaticGroup"]
                    validate_x3d_3_0_jsonschema_json___defs_staticgroup(data_item__StaticGroup)
                if "MetadataDouble" in data_item_keys:
                    data_item_keys.remove("MetadataDouble")
                    data_item__MetadataDouble = data_item["MetadataDouble"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatadouble(data_item__MetadataDouble)
                if "MetadataFloat" in data_item_keys:
                    data_item_keys.remove("MetadataFloat")
                    data_item__MetadataFloat = data_item["MetadataFloat"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatafloat(data_item__MetadataFloat)
                if "MetadataInteger" in data_item_keys:
                    data_item_keys.remove("MetadataInteger")
                    data_item__MetadataInteger = data_item["MetadataInteger"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatainteger(data_item__MetadataInteger)
                if "MetadataSet" in data_item_keys:
                    data_item_keys.remove("MetadataSet")
                    data_item__MetadataSet = data_item["MetadataSet"]
                    validate_x3d_3_0_jsonschema_json___defs_metadataset(data_item__MetadataSet)
                if "MetadataString" in data_item_keys:
                    data_item_keys.remove("MetadataString")
                    data_item__MetadataString = data_item["MetadataString"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatastring(data_item__MetadataString)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_metadatastring(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@reference" in data_keys:
                    data_keys.remove("@reference")
                    data__reference = data["@reference"]
                    if not isinstance(data__reference, (str)):
                        raise JsonSchemaValueException("data.@reference must be string", value=data__reference, name="data.@reference", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@value" in data_keys:
                    data_keys.remove("@value")
                    data__value = data["@value"]
                    if not isinstance(data__value, (list, tuple)):
                        raise JsonSchemaValueException("data.@value must be array", value=data__value, name="data.@value", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, rule='type')
                    data__value_is_list = isinstance(data__value, (list, tuple))
                    if data__value_is_list:
                        data__value_len = len(data__value)
                        for data__value_x, data__value_item in enumerate(data__value):
                            if not isinstance(data__value_item, (str)):
                                raise JsonSchemaValueException(""+"data.@value[{data__value_x}]".format(**locals())+" must be string", value=data__value_item, name=""+"data.@value[{data__value_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "MetadataDouble" in data_keys:
            data_keys.remove("MetadataDouble")
            data__MetadataDouble = data["MetadataDouble"]
            validate_x3d_3_0_jsonschema_json___defs_metadatadouble(data__MetadataDouble)
        if "MetadataFloat" in data_keys:
            data_keys.remove("MetadataFloat")
            data__MetadataFloat = data["MetadataFloat"]
            validate_x3d_3_0_jsonschema_json___defs_metadatafloat(data__MetadataFloat)
        if "MetadataInteger" in data_keys:
            data_keys.remove("MetadataInteger")
            data__MetadataInteger = data["MetadataInteger"]
            validate_x3d_3_0_jsonschema_json___defs_metadatainteger(data__MetadataInteger)
        if "MetadataSet" in data_keys:
            data_keys.remove("MetadataSet")
            data__MetadataSet = data["MetadataSet"]
            validate_x3d_3_0_jsonschema_json___defs_metadataset(data__MetadataSet)
        if "MetadataString" in data_keys:
            data_keys.remove("MetadataString")
            data__MetadataString = data["MetadataString"]
            validate_x3d_3_0_jsonschema_json___defs_metadatastring(data__MetadataString)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_metadataset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-value': {'$ref': '#/$defs/-X3DMetadataObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-value': {'$ref': '#/$defs/-X3DMetadataObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@reference" in data_keys:
                    data_keys.remove("@reference")
                    data__reference = data["@reference"]
                    if not isinstance(data__reference, (str)):
                        raise JsonSchemaValueException("data.@reference must be string", value=data__reference, name="data.@reference", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "-value" in data_keys:
                    data_keys.remove("-value")
                    data__value = data["-value"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectmfnode(data__value)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-value': {'$ref': '#/$defs/-X3DMetadataObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-value': {'$ref': '#/$defs/-X3DMetadataObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectmfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "MetadataDouble" in data_item_keys:
                    data_item_keys.remove("MetadataDouble")
                    data_item__MetadataDouble = data_item["MetadataDouble"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatadouble(data_item__MetadataDouble)
                if "MetadataFloat" in data_item_keys:
                    data_item_keys.remove("MetadataFloat")
                    data_item__MetadataFloat = data_item["MetadataFloat"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatafloat(data_item__MetadataFloat)
                if "MetadataInteger" in data_item_keys:
                    data_item_keys.remove("MetadataInteger")
                    data_item__MetadataInteger = data_item["MetadataInteger"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatainteger(data_item__MetadataInteger)
                if "MetadataSet" in data_item_keys:
                    data_item_keys.remove("MetadataSet")
                    data_item__MetadataSet = data_item["MetadataSet"]
                    validate_x3d_3_0_jsonschema_json___defs_metadataset(data_item__MetadataSet)
                if "MetadataString" in data_item_keys:
                    data_item_keys.remove("MetadataString")
                    data_item__MetadataString = data_item["MetadataString"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatastring(data_item__MetadataString)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_metadatainteger(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@reference" in data_keys:
                    data_keys.remove("@reference")
                    data__reference = data["@reference"]
                    if not isinstance(data__reference, (str)):
                        raise JsonSchemaValueException("data.@reference must be string", value=data__reference, name="data.@reference", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@value" in data_keys:
                    data_keys.remove("@value")
                    data__value = data["@value"]
                    if not isinstance(data__value, (list, tuple)):
                        raise JsonSchemaValueException("data.@value must be array", value=data__value, name="data.@value", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, rule='type')
                    data__value_is_list = isinstance(data__value, (list, tuple))
                    if data__value_is_list:
                        data__value_len = len(data__value)
                        for data__value_x, data__value_item in enumerate(data__value):
                            if not isinstance(data__value_item, (int)) and not (isinstance(data__value_item, float) and data__value_item.is_integer()) or isinstance(data__value_item, bool):
                                raise JsonSchemaValueException(""+"data.@value[{data__value_x}]".format(**locals())+" must be integer", value=data__value_item, name=""+"data.@value[{data__value_x}]".format(**locals())+"", definition={'type': 'integer'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_metadatafloat(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@reference" in data_keys:
                    data_keys.remove("@reference")
                    data__reference = data["@reference"]
                    if not isinstance(data__reference, (str)):
                        raise JsonSchemaValueException("data.@reference must be string", value=data__reference, name="data.@reference", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@value" in data_keys:
                    data_keys.remove("@value")
                    data__value = data["@value"]
                    if not isinstance(data__value, (list, tuple)):
                        raise JsonSchemaValueException("data.@value must be array", value=data__value, name="data.@value", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__value_is_list = isinstance(data__value, (list, tuple))
                    if data__value_is_list:
                        data__value_len = len(data__value)
                        for data__value_x, data__value_item in enumerate(data__value):
                            if not isinstance(data__value_item, (int, float)) or isinstance(data__value_item, bool):
                                raise JsonSchemaValueException(""+"data.@value[{data__value_x}]".format(**locals())+" must be number", value=data__value_item, name=""+"data.@value[{data__value_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_metadatadouble(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@reference" in data_keys:
                    data_keys.remove("@reference")
                    data__reference = data["@reference"]
                    if not isinstance(data__reference, (str)):
                        raise JsonSchemaValueException("data.@reference must be string", value=data__reference, name="data.@reference", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@value" in data_keys:
                    data_keys.remove("@value")
                    data__value = data["@value"]
                    if not isinstance(data__value, (list, tuple)):
                        raise JsonSchemaValueException("data.@value must be array", value=data__value, name="data.@value", definition={'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__value_is_list = isinstance(data__value, (list, tuple))
                    if data__value_is_list:
                        data__value_len = len(data__value)
                        for data__value_x, data__value_item in enumerate(data__value):
                            if not isinstance(data__value_item, (int, float)) or isinstance(data__value_item, bool):
                                raise JsonSchemaValueException(""+"data.@value[{data__value_x}]".format(**locals())+" must be number", value=data__value_item, name=""+"data.@value[{data__value_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@reference': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_staticgroup(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "Background" in data_item_keys:
                    data_item_keys.remove("Background")
                    data_item__Background = data_item["Background"]
                    validate_x3d_3_0_jsonschema_json___defs_background(data_item__Background)
                if "TextureBackground" in data_item_keys:
                    data_item_keys.remove("TextureBackground")
                    data_item__TextureBackground = data_item["TextureBackground"]
                    validate_x3d_3_0_jsonschema_json___defs_texturebackground(data_item__TextureBackground)
                if "Fog" in data_item_keys:
                    data_item_keys.remove("Fog")
                    data_item__Fog = data_item["Fog"]
                    validate_x3d_3_0_jsonschema_json___defs_fog(data_item__Fog)
                if "GeoViewpoint" in data_item_keys:
                    data_item_keys.remove("GeoViewpoint")
                    data_item__GeoViewpoint = data_item["GeoViewpoint"]
                    validate_x3d_3_0_jsonschema_json___defs_geoviewpoint(data_item__GeoViewpoint)
                if "NavigationInfo" in data_item_keys:
                    data_item_keys.remove("NavigationInfo")
                    data_item__NavigationInfo = data_item["NavigationInfo"]
                    validate_x3d_3_0_jsonschema_json___defs_navigationinfo(data_item__NavigationInfo)
                if "Viewpoint" in data_item_keys:
                    data_item_keys.remove("Viewpoint")
                    data_item__Viewpoint = data_item["Viewpoint"]
                    validate_x3d_3_0_jsonschema_json___defs_viewpoint(data_item__Viewpoint)
                if "Anchor" in data_item_keys:
                    data_item_keys.remove("Anchor")
                    data_item__Anchor = data_item["Anchor"]
                    validate_x3d_3_0_jsonschema_json___defs_anchor(data_item__Anchor)
                if "Billboard" in data_item_keys:
                    data_item_keys.remove("Billboard")
                    data_item__Billboard = data_item["Billboard"]
                    validate_x3d_3_0_jsonschema_json___defs_billboard(data_item__Billboard)
                if "Collision" in data_item_keys:
                    data_item_keys.remove("Collision")
                    data_item__Collision = data_item["Collision"]
                    validate_x3d_3_0_jsonschema_json___defs_collision(data_item__Collision)
                if "EspduTransform" in data_item_keys:
                    data_item_keys.remove("EspduTransform")
                    data_item__EspduTransform = data_item["EspduTransform"]
                    validate_x3d_3_0_jsonschema_json___defs_espdutransform(data_item__EspduTransform)
                if "GeoLocation" in data_item_keys:
                    data_item_keys.remove("GeoLocation")
                    data_item__GeoLocation = data_item["GeoLocation"]
                    validate_x3d_3_0_jsonschema_json___defs_geolocation(data_item__GeoLocation)
                if "Group" in data_item_keys:
                    data_item_keys.remove("Group")
                    data_item__Group = data_item["Group"]
                    validate_x3d_3_0_jsonschema_json___defs_group(data_item__Group)
                if "HAnimSegment" in data_item_keys:
                    data_item_keys.remove("HAnimSegment")
                    data_item__HAnimSegment = data_item["HAnimSegment"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsegment(data_item__HAnimSegment)
                if "HAnimSite" in data_item_keys:
                    data_item_keys.remove("HAnimSite")
                    data_item__HAnimSite = data_item["HAnimSite"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsite(data_item__HAnimSite)
                if "LOD" in data_item_keys:
                    data_item_keys.remove("LOD")
                    data_item__LOD = data_item["LOD"]
                    validate_x3d_3_0_jsonschema_json___defs_lod(data_item__LOD)
                if "Switch" in data_item_keys:
                    data_item_keys.remove("Switch")
                    data_item__Switch = data_item["Switch"]
                    validate_x3d_3_0_jsonschema_json___defs_switch(data_item__Switch)
                if "Transform" in data_item_keys:
                    data_item_keys.remove("Transform")
                    data_item__Transform = data_item["Transform"]
                    validate_x3d_3_0_jsonschema_json___defs_transform(data_item__Transform)
                if "GeoMetadata" in data_item_keys:
                    data_item_keys.remove("GeoMetadata")
                    data_item__GeoMetadata = data_item["GeoMetadata"]
                    validate_x3d_3_0_jsonschema_json___defs_geometadata(data_item__GeoMetadata)
                if "WorldInfo" in data_item_keys:
                    data_item_keys.remove("WorldInfo")
                    data_item__WorldInfo = data_item["WorldInfo"]
                    validate_x3d_3_0_jsonschema_json___defs_worldinfo(data_item__WorldInfo)
                if "ColorInterpolator" in data_item_keys:
                    data_item_keys.remove("ColorInterpolator")
                    data_item__ColorInterpolator = data_item["ColorInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_colorinterpolator(data_item__ColorInterpolator)
                if "CoordinateInterpolator" in data_item_keys:
                    data_item_keys.remove("CoordinateInterpolator")
                    data_item__CoordinateInterpolator = data_item["CoordinateInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator(data_item__CoordinateInterpolator)
                if "CoordinateInterpolator2D" in data_item_keys:
                    data_item_keys.remove("CoordinateInterpolator2D")
                    data_item__CoordinateInterpolator2D = data_item["CoordinateInterpolator2D"]
                    validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator2d(data_item__CoordinateInterpolator2D)
                if "GeoPositionInterpolator" in data_item_keys:
                    data_item_keys.remove("GeoPositionInterpolator")
                    data_item__GeoPositionInterpolator = data_item["GeoPositionInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_geopositioninterpolator(data_item__GeoPositionInterpolator)
                if "NormalInterpolator" in data_item_keys:
                    data_item_keys.remove("NormalInterpolator")
                    data_item__NormalInterpolator = data_item["NormalInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_normalinterpolator(data_item__NormalInterpolator)
                if "OrientationInterpolator" in data_item_keys:
                    data_item_keys.remove("OrientationInterpolator")
                    data_item__OrientationInterpolator = data_item["OrientationInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_orientationinterpolator(data_item__OrientationInterpolator)
                if "PositionInterpolator" in data_item_keys:
                    data_item_keys.remove("PositionInterpolator")
                    data_item__PositionInterpolator = data_item["PositionInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_positioninterpolator(data_item__PositionInterpolator)
                if "PositionInterpolator2D" in data_item_keys:
                    data_item_keys.remove("PositionInterpolator2D")
                    data_item__PositionInterpolator2D = data_item["PositionInterpolator2D"]
                    validate_x3d_3_0_jsonschema_json___defs_positioninterpolator2d(data_item__PositionInterpolator2D)
                if "ScalarInterpolator" in data_item_keys:
                    data_item_keys.remove("ScalarInterpolator")
                    data_item__ScalarInterpolator = data_item["ScalarInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_scalarinterpolator(data_item__ScalarInterpolator)
                if "DirectionalLight" in data_item_keys:
                    data_item_keys.remove("DirectionalLight")
                    data_item__DirectionalLight = data_item["DirectionalLight"]
                    validate_x3d_3_0_jsonschema_json___defs_directionallight(data_item__DirectionalLight)
                if "PointLight" in data_item_keys:
                    data_item_keys.remove("PointLight")
                    data_item__PointLight = data_item["PointLight"]
                    validate_x3d_3_0_jsonschema_json___defs_pointlight(data_item__PointLight)
                if "SpotLight" in data_item_keys:
                    data_item_keys.remove("SpotLight")
                    data_item__SpotLight = data_item["SpotLight"]
                    validate_x3d_3_0_jsonschema_json___defs_spotlight(data_item__SpotLight)
                if "Script" in data_item_keys:
                    data_item_keys.remove("Script")
                    data_item__Script = data_item["Script"]
                    validate_x3d_3_0_jsonschema_json___defs_script(data_item__Script)
                if "ProximitySensor" in data_item_keys:
                    data_item_keys.remove("ProximitySensor")
                    data_item__ProximitySensor = data_item["ProximitySensor"]
                    validate_x3d_3_0_jsonschema_json___defs_proximitysensor(data_item__ProximitySensor)
                if "VisibilitySensor" in data_item_keys:
                    data_item_keys.remove("VisibilitySensor")
                    data_item__VisibilitySensor = data_item["VisibilitySensor"]
                    validate_x3d_3_0_jsonschema_json___defs_visibilitysensor(data_item__VisibilitySensor)
                if "KeySensor" in data_item_keys:
                    data_item_keys.remove("KeySensor")
                    data_item__KeySensor = data_item["KeySensor"]
                    validate_x3d_3_0_jsonschema_json___defs_keysensor(data_item__KeySensor)
                if "StringSensor" in data_item_keys:
                    data_item_keys.remove("StringSensor")
                    data_item__StringSensor = data_item["StringSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_stringsensor(data_item__StringSensor)
                if "LoadSensor" in data_item_keys:
                    data_item_keys.remove("LoadSensor")
                    data_item__LoadSensor = data_item["LoadSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_loadsensor(data_item__LoadSensor)
                if "ReceiverPdu" in data_item_keys:
                    data_item_keys.remove("ReceiverPdu")
                    data_item__ReceiverPdu = data_item["ReceiverPdu"]
                    validate_x3d_3_0_jsonschema_json___defs_receiverpdu(data_item__ReceiverPdu)
                if "SignalPdu" in data_item_keys:
                    data_item_keys.remove("SignalPdu")
                    data_item__SignalPdu = data_item["SignalPdu"]
                    validate_x3d_3_0_jsonschema_json___defs_signalpdu(data_item__SignalPdu)
                if "TransmitterPdu" in data_item_keys:
                    data_item_keys.remove("TransmitterPdu")
                    data_item__TransmitterPdu = data_item["TransmitterPdu"]
                    validate_x3d_3_0_jsonschema_json___defs_transmitterpdu(data_item__TransmitterPdu)
                if "CylinderSensor" in data_item_keys:
                    data_item_keys.remove("CylinderSensor")
                    data_item__CylinderSensor = data_item["CylinderSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_cylindersensor(data_item__CylinderSensor)
                if "PlaneSensor" in data_item_keys:
                    data_item_keys.remove("PlaneSensor")
                    data_item__PlaneSensor = data_item["PlaneSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_planesensor(data_item__PlaneSensor)
                if "SphereSensor" in data_item_keys:
                    data_item_keys.remove("SphereSensor")
                    data_item__SphereSensor = data_item["SphereSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_spheresensor(data_item__SphereSensor)
                if "GeoTouchSensor" in data_item_keys:
                    data_item_keys.remove("GeoTouchSensor")
                    data_item__GeoTouchSensor = data_item["GeoTouchSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_geotouchsensor(data_item__GeoTouchSensor)
                if "TouchSensor" in data_item_keys:
                    data_item_keys.remove("TouchSensor")
                    data_item__TouchSensor = data_item["TouchSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_touchsensor(data_item__TouchSensor)
                if "TimeSensor" in data_item_keys:
                    data_item_keys.remove("TimeSensor")
                    data_item__TimeSensor = data_item["TimeSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_timesensor(data_item__TimeSensor)
                if "BooleanSequencer" in data_item_keys:
                    data_item_keys.remove("BooleanSequencer")
                    data_item__BooleanSequencer = data_item["BooleanSequencer"]
                    validate_x3d_3_0_jsonschema_json___defs_booleansequencer(data_item__BooleanSequencer)
                if "IntegerSequencer" in data_item_keys:
                    data_item_keys.remove("IntegerSequencer")
                    data_item__IntegerSequencer = data_item["IntegerSequencer"]
                    validate_x3d_3_0_jsonschema_json___defs_integersequencer(data_item__IntegerSequencer)
                if "Shape" in data_item_keys:
                    data_item_keys.remove("Shape")
                    data_item__Shape = data_item["Shape"]
                    validate_x3d_3_0_jsonschema_json___defs_shape(data_item__Shape)
                if "Sound" in data_item_keys:
                    data_item_keys.remove("Sound")
                    data_item__Sound = data_item["Sound"]
                    validate_x3d_3_0_jsonschema_json___defs_sound(data_item__Sound)
                if "AudioClip" in data_item_keys:
                    data_item_keys.remove("AudioClip")
                    data_item__AudioClip = data_item["AudioClip"]
                    validate_x3d_3_0_jsonschema_json___defs_audioclip(data_item__AudioClip)
                if "MovieTexture" in data_item_keys:
                    data_item_keys.remove("MovieTexture")
                    data_item__MovieTexture = data_item["MovieTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_movietexture(data_item__MovieTexture)
                if "BooleanTrigger" in data_item_keys:
                    data_item_keys.remove("BooleanTrigger")
                    data_item__BooleanTrigger = data_item["BooleanTrigger"]
                    validate_x3d_3_0_jsonschema_json___defs_booleantrigger(data_item__BooleanTrigger)
                if "IntegerTrigger" in data_item_keys:
                    data_item_keys.remove("IntegerTrigger")
                    data_item__IntegerTrigger = data_item["IntegerTrigger"]
                    validate_x3d_3_0_jsonschema_json___defs_integertrigger(data_item__IntegerTrigger)
                if "TimeTrigger" in data_item_keys:
                    data_item_keys.remove("TimeTrigger")
                    data_item__TimeTrigger = data_item["TimeTrigger"]
                    validate_x3d_3_0_jsonschema_json___defs_timetrigger(data_item__TimeTrigger)
                if "BooleanFilter" in data_item_keys:
                    data_item_keys.remove("BooleanFilter")
                    data_item__BooleanFilter = data_item["BooleanFilter"]
                    validate_x3d_3_0_jsonschema_json___defs_booleanfilter(data_item__BooleanFilter)
                if "BooleanToggle" in data_item_keys:
                    data_item_keys.remove("BooleanToggle")
                    data_item__BooleanToggle = data_item["BooleanToggle"]
                    validate_x3d_3_0_jsonschema_json___defs_booleantoggle(data_item__BooleanToggle)
                if "ExternProtoDeclare" in data_item_keys:
                    data_item_keys.remove("ExternProtoDeclare")
                    data_item__ExternProtoDeclare = data_item["ExternProtoDeclare"]
                    validate_x3d_3_0_jsonschema_json___defs_externprotodeclare(data_item__ExternProtoDeclare)
                if "GeoLOD" in data_item_keys:
                    data_item_keys.remove("GeoLOD")
                    data_item__GeoLOD = data_item["GeoLOD"]
                    validate_x3d_3_0_jsonschema_json___defs_geolod(data_item__GeoLOD)
                if "HAnimHumanoid" in data_item_keys:
                    data_item_keys.remove("HAnimHumanoid")
                    data_item__HAnimHumanoid = data_item["HAnimHumanoid"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimhumanoid(data_item__HAnimHumanoid)
                if "HAnimJoint" in data_item_keys:
                    data_item_keys.remove("HAnimJoint")
                    data_item__HAnimJoint = data_item["HAnimJoint"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimjoint(data_item__HAnimJoint)
                if "Inline" in data_item_keys:
                    data_item_keys.remove("Inline")
                    data_item__Inline = data_item["Inline"]
                    validate_x3d_3_0_jsonschema_json___defs_inline(data_item__Inline)
                if "NurbsOrientationInterpolator" in data_item_keys:
                    data_item_keys.remove("NurbsOrientationInterpolator")
                    data_item__NurbsOrientationInterpolator = data_item["NurbsOrientationInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbsorientationinterpolator(data_item__NurbsOrientationInterpolator)
                if "NurbsPositionInterpolator" in data_item_keys:
                    data_item_keys.remove("NurbsPositionInterpolator")
                    data_item__NurbsPositionInterpolator = data_item["NurbsPositionInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbspositioninterpolator(data_item__NurbsPositionInterpolator)
                if "NurbsSet" in data_item_keys:
                    data_item_keys.remove("NurbsSet")
                    data_item__NurbsSet = data_item["NurbsSet"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbsset(data_item__NurbsSet)
                if "NurbsSurfaceInterpolator" in data_item_keys:
                    data_item_keys.remove("NurbsSurfaceInterpolator")
                    data_item__NurbsSurfaceInterpolator = data_item["NurbsSurfaceInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbssurfaceinterpolator(data_item__NurbsSurfaceInterpolator)
                if "ProtoDeclare" in data_item_keys:
                    data_item_keys.remove("ProtoDeclare")
                    data_item__ProtoDeclare = data_item["ProtoDeclare"]
                    validate_x3d_3_0_jsonschema_json___defs_protodeclare(data_item__ProtoDeclare)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if "ROUTE" in data_item_keys:
                    data_item_keys.remove("ROUTE")
                    data_item__ROUTE = data_item["ROUTE"]
                    validate_x3d_3_0_jsonschema_json___defs_route(data_item__ROUTE)
                if "StaticGroup" in data_item_keys:
                    data_item_keys.remove("StaticGroup")
                    data_item__StaticGroup = data_item["StaticGroup"]
                    validate_x3d_3_0_jsonschema_json___defs_staticgroup(data_item__StaticGroup)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_route(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromNode': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toNode': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@fromField', '@fromNode', '@toField', '@toNode'], 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_len = len(data)
        if not all(prop in data for prop in ['@fromField', '@fromNode', '@toField', '@toNode']):
            raise JsonSchemaValueException("data must contain ['@fromField', '@fromNode', '@toField', '@toNode'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromNode': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toNode': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@fromField', '@fromNode', '@toField', '@toNode'], 'additionalProperties': False}, rule='required')
        data_keys = set(data.keys())
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@fromField" in data_keys:
            data_keys.remove("@fromField")
            data__fromField = data["@fromField"]
            if not isinstance(data__fromField, (str)):
                raise JsonSchemaValueException("data.@fromField must be string", value=data__fromField, name="data.@fromField", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@fromNode" in data_keys:
            data_keys.remove("@fromNode")
            data__fromNode = data["@fromNode"]
            if not isinstance(data__fromNode, (str)):
                raise JsonSchemaValueException("data.@fromNode must be string", value=data__fromNode, name="data.@fromNode", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@toField" in data_keys:
            data_keys.remove("@toField")
            data__toField = data["@toField"]
            if not isinstance(data__toField, (str)):
                raise JsonSchemaValueException("data.@toField must be string", value=data__toField, name="data.@toField", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@toNode" in data_keys:
            data_keys.remove("@toNode")
            data__toNode = data["@toNode"]
            if not isinstance(data__toNode, (str)):
                raise JsonSchemaValueException("data.@toNode must be string", value=data__toNode, name="data.@toNode", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fromNode': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@toNode': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@fromField', '@fromNode', '@toField', '@toNode'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_protoinstance(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}}, 'IS': {'$ref': '#/$defs/IS'}, 'fieldValue': {'$ref': '#/$defs/fieldValue'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}}, 'IS': {'$ref': '#/$defs/IS'}, 'fieldValue': {'$ref': '#/$defs/fieldValue'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "fieldValue" in data_keys:
                    data_keys.remove("fieldValue")
                    data__fieldValue = data["fieldValue"]
                    validate_x3d_3_0_jsonschema_json___defs_fieldvalue(data__fieldValue)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}}, 'IS': {'$ref': '#/$defs/IS'}, 'fieldValue': {'$ref': '#/$defs/fieldValue'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}}, 'additionalProperties': False}}, 'IS': {'$ref': '#/$defs/IS'}, 'fieldValue': {'$ref': '#/$defs/fieldValue'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_fieldvalue(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'items': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@name'], 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@name'], 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_len = len(data_item)
                if not all(prop in data_item for prop in ['@name']):
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must contain ['@name'] properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@name'], 'additionalProperties': False}, rule='required')
                data_item_keys = set(data_item.keys())
                if "IS" in data_item_keys:
                    data_item_keys.remove("IS")
                    data_item__IS = data_item["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data_item__IS)
                if "-children" in data_item_keys:
                    data_item_keys.remove("-children")
                    data_item__children = data_item["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnodemfnode(data_item__children)
                if "@class" in data_item_keys:
                    data_item_keys.remove("@class")
                    data_item__class = data_item["@class"]
                    if not isinstance(data_item__class, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@class".format(**locals())+" must be string", value=data_item__class, name=""+"data[{data_x}].@class".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@name" in data_item_keys:
                    data_item_keys.remove("@name")
                    data_item__name = data_item["@name"]
                    if not isinstance(data_item__name, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@name".format(**locals())+" must be string", value=data_item__name, name=""+"data[{data_x}].@name".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@value" in data_item_keys:
                    data_item_keys.remove("@value")
                    data_item__value = data_item["@value"]
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@name'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dnodemfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "Material" in data_item_keys:
                    data_item_keys.remove("Material")
                    data_item__Material = data_item["Material"]
                    validate_x3d_3_0_jsonschema_json___defs_material(data_item__Material)
                if "ImageTexture" in data_item_keys:
                    data_item_keys.remove("ImageTexture")
                    data_item__ImageTexture = data_item["ImageTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_imagetexture(data_item__ImageTexture)
                if "MovieTexture" in data_item_keys:
                    data_item_keys.remove("MovieTexture")
                    data_item__MovieTexture = data_item["MovieTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_movietexture(data_item__MovieTexture)
                if "PixelTexture" in data_item_keys:
                    data_item_keys.remove("PixelTexture")
                    data_item__PixelTexture = data_item["PixelTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_pixeltexture(data_item__PixelTexture)
                if "MultiTexture" in data_item_keys:
                    data_item_keys.remove("MultiTexture")
                    data_item__MultiTexture = data_item["MultiTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_multitexture(data_item__MultiTexture)
                if "MultiTextureTransform" in data_item_keys:
                    data_item_keys.remove("MultiTextureTransform")
                    data_item__MultiTextureTransform = data_item["MultiTextureTransform"]
                    validate_x3d_3_0_jsonschema_json___defs_multitexturetransform(data_item__MultiTextureTransform)
                if "TextureTransform" in data_item_keys:
                    data_item_keys.remove("TextureTransform")
                    data_item__TextureTransform = data_item["TextureTransform"]
                    validate_x3d_3_0_jsonschema_json___defs_texturetransform(data_item__TextureTransform)
                if "FillProperties" in data_item_keys:
                    data_item_keys.remove("FillProperties")
                    data_item__FillProperties = data_item["FillProperties"]
                    validate_x3d_3_0_jsonschema_json___defs_fillproperties(data_item__FillProperties)
                if "LineProperties" in data_item_keys:
                    data_item_keys.remove("LineProperties")
                    data_item__LineProperties = data_item["LineProperties"]
                    validate_x3d_3_0_jsonschema_json___defs_lineproperties(data_item__LineProperties)
                if "Appearance" in data_item_keys:
                    data_item_keys.remove("Appearance")
                    data_item__Appearance = data_item["Appearance"]
                    validate_x3d_3_0_jsonschema_json___defs_appearance(data_item__Appearance)
                if "Background" in data_item_keys:
                    data_item_keys.remove("Background")
                    data_item__Background = data_item["Background"]
                    validate_x3d_3_0_jsonschema_json___defs_background(data_item__Background)
                if "TextureBackground" in data_item_keys:
                    data_item_keys.remove("TextureBackground")
                    data_item__TextureBackground = data_item["TextureBackground"]
                    validate_x3d_3_0_jsonschema_json___defs_texturebackground(data_item__TextureBackground)
                if "Fog" in data_item_keys:
                    data_item_keys.remove("Fog")
                    data_item__Fog = data_item["Fog"]
                    validate_x3d_3_0_jsonschema_json___defs_fog(data_item__Fog)
                if "GeoViewpoint" in data_item_keys:
                    data_item_keys.remove("GeoViewpoint")
                    data_item__GeoViewpoint = data_item["GeoViewpoint"]
                    validate_x3d_3_0_jsonschema_json___defs_geoviewpoint(data_item__GeoViewpoint)
                if "NavigationInfo" in data_item_keys:
                    data_item_keys.remove("NavigationInfo")
                    data_item__NavigationInfo = data_item["NavigationInfo"]
                    validate_x3d_3_0_jsonschema_json___defs_navigationinfo(data_item__NavigationInfo)
                if "Viewpoint" in data_item_keys:
                    data_item_keys.remove("Viewpoint")
                    data_item__Viewpoint = data_item["Viewpoint"]
                    validate_x3d_3_0_jsonschema_json___defs_viewpoint(data_item__Viewpoint)
                if "Anchor" in data_item_keys:
                    data_item_keys.remove("Anchor")
                    data_item__Anchor = data_item["Anchor"]
                    validate_x3d_3_0_jsonschema_json___defs_anchor(data_item__Anchor)
                if "Billboard" in data_item_keys:
                    data_item_keys.remove("Billboard")
                    data_item__Billboard = data_item["Billboard"]
                    validate_x3d_3_0_jsonschema_json___defs_billboard(data_item__Billboard)
                if "Collision" in data_item_keys:
                    data_item_keys.remove("Collision")
                    data_item__Collision = data_item["Collision"]
                    validate_x3d_3_0_jsonschema_json___defs_collision(data_item__Collision)
                if "EspduTransform" in data_item_keys:
                    data_item_keys.remove("EspduTransform")
                    data_item__EspduTransform = data_item["EspduTransform"]
                    validate_x3d_3_0_jsonschema_json___defs_espdutransform(data_item__EspduTransform)
                if "GeoLocation" in data_item_keys:
                    data_item_keys.remove("GeoLocation")
                    data_item__GeoLocation = data_item["GeoLocation"]
                    validate_x3d_3_0_jsonschema_json___defs_geolocation(data_item__GeoLocation)
                if "Group" in data_item_keys:
                    data_item_keys.remove("Group")
                    data_item__Group = data_item["Group"]
                    validate_x3d_3_0_jsonschema_json___defs_group(data_item__Group)
                if "HAnimSegment" in data_item_keys:
                    data_item_keys.remove("HAnimSegment")
                    data_item__HAnimSegment = data_item["HAnimSegment"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsegment(data_item__HAnimSegment)
                if "HAnimSite" in data_item_keys:
                    data_item_keys.remove("HAnimSite")
                    data_item__HAnimSite = data_item["HAnimSite"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsite(data_item__HAnimSite)
                if "LOD" in data_item_keys:
                    data_item_keys.remove("LOD")
                    data_item__LOD = data_item["LOD"]
                    validate_x3d_3_0_jsonschema_json___defs_lod(data_item__LOD)
                if "Switch" in data_item_keys:
                    data_item_keys.remove("Switch")
                    data_item__Switch = data_item["Switch"]
                    validate_x3d_3_0_jsonschema_json___defs_switch(data_item__Switch)
                if "Transform" in data_item_keys:
                    data_item_keys.remove("Transform")
                    data_item__Transform = data_item["Transform"]
                    validate_x3d_3_0_jsonschema_json___defs_transform(data_item__Transform)
                if "GeoMetadata" in data_item_keys:
                    data_item_keys.remove("GeoMetadata")
                    data_item__GeoMetadata = data_item["GeoMetadata"]
                    validate_x3d_3_0_jsonschema_json___defs_geometadata(data_item__GeoMetadata)
                if "WorldInfo" in data_item_keys:
                    data_item_keys.remove("WorldInfo")
                    data_item__WorldInfo = data_item["WorldInfo"]
                    validate_x3d_3_0_jsonschema_json___defs_worldinfo(data_item__WorldInfo)
                if "ColorInterpolator" in data_item_keys:
                    data_item_keys.remove("ColorInterpolator")
                    data_item__ColorInterpolator = data_item["ColorInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_colorinterpolator(data_item__ColorInterpolator)
                if "CoordinateInterpolator" in data_item_keys:
                    data_item_keys.remove("CoordinateInterpolator")
                    data_item__CoordinateInterpolator = data_item["CoordinateInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator(data_item__CoordinateInterpolator)
                if "CoordinateInterpolator2D" in data_item_keys:
                    data_item_keys.remove("CoordinateInterpolator2D")
                    data_item__CoordinateInterpolator2D = data_item["CoordinateInterpolator2D"]
                    validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator2d(data_item__CoordinateInterpolator2D)
                if "GeoPositionInterpolator" in data_item_keys:
                    data_item_keys.remove("GeoPositionInterpolator")
                    data_item__GeoPositionInterpolator = data_item["GeoPositionInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_geopositioninterpolator(data_item__GeoPositionInterpolator)
                if "NormalInterpolator" in data_item_keys:
                    data_item_keys.remove("NormalInterpolator")
                    data_item__NormalInterpolator = data_item["NormalInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_normalinterpolator(data_item__NormalInterpolator)
                if "OrientationInterpolator" in data_item_keys:
                    data_item_keys.remove("OrientationInterpolator")
                    data_item__OrientationInterpolator = data_item["OrientationInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_orientationinterpolator(data_item__OrientationInterpolator)
                if "PositionInterpolator" in data_item_keys:
                    data_item_keys.remove("PositionInterpolator")
                    data_item__PositionInterpolator = data_item["PositionInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_positioninterpolator(data_item__PositionInterpolator)
                if "PositionInterpolator2D" in data_item_keys:
                    data_item_keys.remove("PositionInterpolator2D")
                    data_item__PositionInterpolator2D = data_item["PositionInterpolator2D"]
                    validate_x3d_3_0_jsonschema_json___defs_positioninterpolator2d(data_item__PositionInterpolator2D)
                if "ScalarInterpolator" in data_item_keys:
                    data_item_keys.remove("ScalarInterpolator")
                    data_item__ScalarInterpolator = data_item["ScalarInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_scalarinterpolator(data_item__ScalarInterpolator)
                if "DirectionalLight" in data_item_keys:
                    data_item_keys.remove("DirectionalLight")
                    data_item__DirectionalLight = data_item["DirectionalLight"]
                    validate_x3d_3_0_jsonschema_json___defs_directionallight(data_item__DirectionalLight)
                if "PointLight" in data_item_keys:
                    data_item_keys.remove("PointLight")
                    data_item__PointLight = data_item["PointLight"]
                    validate_x3d_3_0_jsonschema_json___defs_pointlight(data_item__PointLight)
                if "SpotLight" in data_item_keys:
                    data_item_keys.remove("SpotLight")
                    data_item__SpotLight = data_item["SpotLight"]
                    validate_x3d_3_0_jsonschema_json___defs_spotlight(data_item__SpotLight)
                if "Script" in data_item_keys:
                    data_item_keys.remove("Script")
                    data_item__Script = data_item["Script"]
                    validate_x3d_3_0_jsonschema_json___defs_script(data_item__Script)
                if "ProximitySensor" in data_item_keys:
                    data_item_keys.remove("ProximitySensor")
                    data_item__ProximitySensor = data_item["ProximitySensor"]
                    validate_x3d_3_0_jsonschema_json___defs_proximitysensor(data_item__ProximitySensor)
                if "VisibilitySensor" in data_item_keys:
                    data_item_keys.remove("VisibilitySensor")
                    data_item__VisibilitySensor = data_item["VisibilitySensor"]
                    validate_x3d_3_0_jsonschema_json___defs_visibilitysensor(data_item__VisibilitySensor)
                if "KeySensor" in data_item_keys:
                    data_item_keys.remove("KeySensor")
                    data_item__KeySensor = data_item["KeySensor"]
                    validate_x3d_3_0_jsonschema_json___defs_keysensor(data_item__KeySensor)
                if "StringSensor" in data_item_keys:
                    data_item_keys.remove("StringSensor")
                    data_item__StringSensor = data_item["StringSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_stringsensor(data_item__StringSensor)
                if "LoadSensor" in data_item_keys:
                    data_item_keys.remove("LoadSensor")
                    data_item__LoadSensor = data_item["LoadSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_loadsensor(data_item__LoadSensor)
                if "ReceiverPdu" in data_item_keys:
                    data_item_keys.remove("ReceiverPdu")
                    data_item__ReceiverPdu = data_item["ReceiverPdu"]
                    validate_x3d_3_0_jsonschema_json___defs_receiverpdu(data_item__ReceiverPdu)
                if "SignalPdu" in data_item_keys:
                    data_item_keys.remove("SignalPdu")
                    data_item__SignalPdu = data_item["SignalPdu"]
                    validate_x3d_3_0_jsonschema_json___defs_signalpdu(data_item__SignalPdu)
                if "TransmitterPdu" in data_item_keys:
                    data_item_keys.remove("TransmitterPdu")
                    data_item__TransmitterPdu = data_item["TransmitterPdu"]
                    validate_x3d_3_0_jsonschema_json___defs_transmitterpdu(data_item__TransmitterPdu)
                if "CylinderSensor" in data_item_keys:
                    data_item_keys.remove("CylinderSensor")
                    data_item__CylinderSensor = data_item["CylinderSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_cylindersensor(data_item__CylinderSensor)
                if "PlaneSensor" in data_item_keys:
                    data_item_keys.remove("PlaneSensor")
                    data_item__PlaneSensor = data_item["PlaneSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_planesensor(data_item__PlaneSensor)
                if "SphereSensor" in data_item_keys:
                    data_item_keys.remove("SphereSensor")
                    data_item__SphereSensor = data_item["SphereSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_spheresensor(data_item__SphereSensor)
                if "GeoTouchSensor" in data_item_keys:
                    data_item_keys.remove("GeoTouchSensor")
                    data_item__GeoTouchSensor = data_item["GeoTouchSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_geotouchsensor(data_item__GeoTouchSensor)
                if "TouchSensor" in data_item_keys:
                    data_item_keys.remove("TouchSensor")
                    data_item__TouchSensor = data_item["TouchSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_touchsensor(data_item__TouchSensor)
                if "TimeSensor" in data_item_keys:
                    data_item_keys.remove("TimeSensor")
                    data_item__TimeSensor = data_item["TimeSensor"]
                    validate_x3d_3_0_jsonschema_json___defs_timesensor(data_item__TimeSensor)
                if "BooleanSequencer" in data_item_keys:
                    data_item_keys.remove("BooleanSequencer")
                    data_item__BooleanSequencer = data_item["BooleanSequencer"]
                    validate_x3d_3_0_jsonschema_json___defs_booleansequencer(data_item__BooleanSequencer)
                if "IntegerSequencer" in data_item_keys:
                    data_item_keys.remove("IntegerSequencer")
                    data_item__IntegerSequencer = data_item["IntegerSequencer"]
                    validate_x3d_3_0_jsonschema_json___defs_integersequencer(data_item__IntegerSequencer)
                if "Shape" in data_item_keys:
                    data_item_keys.remove("Shape")
                    data_item__Shape = data_item["Shape"]
                    validate_x3d_3_0_jsonschema_json___defs_shape(data_item__Shape)
                if "Sound" in data_item_keys:
                    data_item_keys.remove("Sound")
                    data_item__Sound = data_item["Sound"]
                    validate_x3d_3_0_jsonschema_json___defs_sound(data_item__Sound)
                if "AudioClip" in data_item_keys:
                    data_item_keys.remove("AudioClip")
                    data_item__AudioClip = data_item["AudioClip"]
                    validate_x3d_3_0_jsonschema_json___defs_audioclip(data_item__AudioClip)
                if "BooleanTrigger" in data_item_keys:
                    data_item_keys.remove("BooleanTrigger")
                    data_item__BooleanTrigger = data_item["BooleanTrigger"]
                    validate_x3d_3_0_jsonschema_json___defs_booleantrigger(data_item__BooleanTrigger)
                if "IntegerTrigger" in data_item_keys:
                    data_item_keys.remove("IntegerTrigger")
                    data_item__IntegerTrigger = data_item["IntegerTrigger"]
                    validate_x3d_3_0_jsonschema_json___defs_integertrigger(data_item__IntegerTrigger)
                if "TimeTrigger" in data_item_keys:
                    data_item_keys.remove("TimeTrigger")
                    data_item__TimeTrigger = data_item["TimeTrigger"]
                    validate_x3d_3_0_jsonschema_json___defs_timetrigger(data_item__TimeTrigger)
                if "BooleanFilter" in data_item_keys:
                    data_item_keys.remove("BooleanFilter")
                    data_item__BooleanFilter = data_item["BooleanFilter"]
                    validate_x3d_3_0_jsonschema_json___defs_booleanfilter(data_item__BooleanFilter)
                if "BooleanToggle" in data_item_keys:
                    data_item_keys.remove("BooleanToggle")
                    data_item__BooleanToggle = data_item["BooleanToggle"]
                    validate_x3d_3_0_jsonschema_json___defs_booleantoggle(data_item__BooleanToggle)
                if "ExternProtoDeclare" in data_item_keys:
                    data_item_keys.remove("ExternProtoDeclare")
                    data_item__ExternProtoDeclare = data_item["ExternProtoDeclare"]
                    validate_x3d_3_0_jsonschema_json___defs_externprotodeclare(data_item__ExternProtoDeclare)
                if "GeoLOD" in data_item_keys:
                    data_item_keys.remove("GeoLOD")
                    data_item__GeoLOD = data_item["GeoLOD"]
                    validate_x3d_3_0_jsonschema_json___defs_geolod(data_item__GeoLOD)
                if "HAnimHumanoid" in data_item_keys:
                    data_item_keys.remove("HAnimHumanoid")
                    data_item__HAnimHumanoid = data_item["HAnimHumanoid"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimhumanoid(data_item__HAnimHumanoid)
                if "HAnimJoint" in data_item_keys:
                    data_item_keys.remove("HAnimJoint")
                    data_item__HAnimJoint = data_item["HAnimJoint"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimjoint(data_item__HAnimJoint)
                if "Inline" in data_item_keys:
                    data_item_keys.remove("Inline")
                    data_item__Inline = data_item["Inline"]
                    validate_x3d_3_0_jsonschema_json___defs_inline(data_item__Inline)
                if "NurbsOrientationInterpolator" in data_item_keys:
                    data_item_keys.remove("NurbsOrientationInterpolator")
                    data_item__NurbsOrientationInterpolator = data_item["NurbsOrientationInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbsorientationinterpolator(data_item__NurbsOrientationInterpolator)
                if "NurbsPositionInterpolator" in data_item_keys:
                    data_item_keys.remove("NurbsPositionInterpolator")
                    data_item__NurbsPositionInterpolator = data_item["NurbsPositionInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbspositioninterpolator(data_item__NurbsPositionInterpolator)
                if "NurbsSet" in data_item_keys:
                    data_item_keys.remove("NurbsSet")
                    data_item__NurbsSet = data_item["NurbsSet"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbsset(data_item__NurbsSet)
                if "NurbsSurfaceInterpolator" in data_item_keys:
                    data_item_keys.remove("NurbsSurfaceInterpolator")
                    data_item__NurbsSurfaceInterpolator = data_item["NurbsSurfaceInterpolator"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbssurfaceinterpolator(data_item__NurbsSurfaceInterpolator)
                if "ProtoDeclare" in data_item_keys:
                    data_item_keys.remove("ProtoDeclare")
                    data_item__ProtoDeclare = data_item["ProtoDeclare"]
                    validate_x3d_3_0_jsonschema_json___defs_protodeclare(data_item__ProtoDeclare)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if "ROUTE" in data_item_keys:
                    data_item_keys.remove("ROUTE")
                    data_item__ROUTE = data_item["ROUTE"]
                    validate_x3d_3_0_jsonschema_json___defs_route(data_item__ROUTE)
                if "StaticGroup" in data_item_keys:
                    data_item_keys.remove("StaticGroup")
                    data_item__StaticGroup = data_item["StaticGroup"]
                    validate_x3d_3_0_jsonschema_json___defs_staticgroup(data_item__StaticGroup)
                if "FontStyle" in data_item_keys:
                    data_item_keys.remove("FontStyle")
                    data_item__FontStyle = data_item["FontStyle"]
                    validate_x3d_3_0_jsonschema_json___defs_fontstyle(data_item__FontStyle)
                if "Color" in data_item_keys:
                    data_item_keys.remove("Color")
                    data_item__Color = data_item["Color"]
                    validate_x3d_3_0_jsonschema_json___defs_color(data_item__Color)
                if "ColorRGBA" in data_item_keys:
                    data_item_keys.remove("ColorRGBA")
                    data_item__ColorRGBA = data_item["ColorRGBA"]
                    validate_x3d_3_0_jsonschema_json___defs_colorrgba(data_item__ColorRGBA)
                if "Coordinate" in data_item_keys:
                    data_item_keys.remove("Coordinate")
                    data_item__Coordinate = data_item["Coordinate"]
                    validate_x3d_3_0_jsonschema_json___defs_coordinate(data_item__Coordinate)
                if "CoordinateDouble" in data_item_keys:
                    data_item_keys.remove("CoordinateDouble")
                    data_item__CoordinateDouble = data_item["CoordinateDouble"]
                    validate_x3d_3_0_jsonschema_json___defs_coordinatedouble(data_item__CoordinateDouble)
                if "GeoCoordinate" in data_item_keys:
                    data_item_keys.remove("GeoCoordinate")
                    data_item__GeoCoordinate = data_item["GeoCoordinate"]
                    validate_x3d_3_0_jsonschema_json___defs_geocoordinate(data_item__GeoCoordinate)
                if "Normal" in data_item_keys:
                    data_item_keys.remove("Normal")
                    data_item__Normal = data_item["Normal"]
                    validate_x3d_3_0_jsonschema_json___defs_normal(data_item__Normal)
                if "MultiTextureCoordinate" in data_item_keys:
                    data_item_keys.remove("MultiTextureCoordinate")
                    data_item__MultiTextureCoordinate = data_item["MultiTextureCoordinate"]
                    validate_x3d_3_0_jsonschema_json___defs_multitexturecoordinate(data_item__MultiTextureCoordinate)
                if "TextureCoordinate" in data_item_keys:
                    data_item_keys.remove("TextureCoordinate")
                    data_item__TextureCoordinate = data_item["TextureCoordinate"]
                    validate_x3d_3_0_jsonschema_json___defs_texturecoordinate(data_item__TextureCoordinate)
                if "TextureCoordinateGenerator" in data_item_keys:
                    data_item_keys.remove("TextureCoordinateGenerator")
                    data_item__TextureCoordinateGenerator = data_item["TextureCoordinateGenerator"]
                    validate_x3d_3_0_jsonschema_json___defs_texturecoordinategenerator(data_item__TextureCoordinateGenerator)
                if "HAnimDisplacer" in data_item_keys:
                    data_item_keys.remove("HAnimDisplacer")
                    data_item__HAnimDisplacer = data_item["HAnimDisplacer"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimdisplacer(data_item__HAnimDisplacer)
                if "IndexedFaceSet" in data_item_keys:
                    data_item_keys.remove("IndexedFaceSet")
                    data_item__IndexedFaceSet = data_item["IndexedFaceSet"]
                    validate_x3d_3_0_jsonschema_json___defs_indexedfaceset(data_item__IndexedFaceSet)
                if "IndexedTriangleFanSet" in data_item_keys:
                    data_item_keys.remove("IndexedTriangleFanSet")
                    data_item__IndexedTriangleFanSet = data_item["IndexedTriangleFanSet"]
                    validate_x3d_3_0_jsonschema_json___defs_indexedtrianglefanset(data_item__IndexedTriangleFanSet)
                if "IndexedTriangleSet" in data_item_keys:
                    data_item_keys.remove("IndexedTriangleSet")
                    data_item__IndexedTriangleSet = data_item["IndexedTriangleSet"]
                    validate_x3d_3_0_jsonschema_json___defs_indexedtriangleset(data_item__IndexedTriangleSet)
                if "IndexedTriangleStripSet" in data_item_keys:
                    data_item_keys.remove("IndexedTriangleStripSet")
                    data_item__IndexedTriangleStripSet = data_item["IndexedTriangleStripSet"]
                    validate_x3d_3_0_jsonschema_json___defs_indexedtrianglestripset(data_item__IndexedTriangleStripSet)
                if "TriangleFanSet" in data_item_keys:
                    data_item_keys.remove("TriangleFanSet")
                    data_item__TriangleFanSet = data_item["TriangleFanSet"]
                    validate_x3d_3_0_jsonschema_json___defs_trianglefanset(data_item__TriangleFanSet)
                if "TriangleSet" in data_item_keys:
                    data_item_keys.remove("TriangleSet")
                    data_item__TriangleSet = data_item["TriangleSet"]
                    validate_x3d_3_0_jsonschema_json___defs_triangleset(data_item__TriangleSet)
                if "TriangleStripSet" in data_item_keys:
                    data_item_keys.remove("TriangleStripSet")
                    data_item__TriangleStripSet = data_item["TriangleStripSet"]
                    validate_x3d_3_0_jsonschema_json___defs_trianglestripset(data_item__TriangleStripSet)
                if "NurbsPatchSurface" in data_item_keys:
                    data_item_keys.remove("NurbsPatchSurface")
                    data_item__NurbsPatchSurface = data_item["NurbsPatchSurface"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbspatchsurface(data_item__NurbsPatchSurface)
                if "NurbsTrimmedSurface" in data_item_keys:
                    data_item_keys.remove("NurbsTrimmedSurface")
                    data_item__NurbsTrimmedSurface = data_item["NurbsTrimmedSurface"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbstrimmedsurface(data_item__NurbsTrimmedSurface)
                if "NurbsCurve" in data_item_keys:
                    data_item_keys.remove("NurbsCurve")
                    data_item__NurbsCurve = data_item["NurbsCurve"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbscurve(data_item__NurbsCurve)
                if "NurbsSweptSurface" in data_item_keys:
                    data_item_keys.remove("NurbsSweptSurface")
                    data_item__NurbsSweptSurface = data_item["NurbsSweptSurface"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbssweptsurface(data_item__NurbsSweptSurface)
                if "NurbsSwungSurface" in data_item_keys:
                    data_item_keys.remove("NurbsSwungSurface")
                    data_item__NurbsSwungSurface = data_item["NurbsSwungSurface"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbsswungsurface(data_item__NurbsSwungSurface)
                if "Arc2D" in data_item_keys:
                    data_item_keys.remove("Arc2D")
                    data_item__Arc2D = data_item["Arc2D"]
                    validate_x3d_3_0_jsonschema_json___defs_arc2d(data_item__Arc2D)
                if "ArcClose2D" in data_item_keys:
                    data_item_keys.remove("ArcClose2D")
                    data_item__ArcClose2D = data_item["ArcClose2D"]
                    validate_x3d_3_0_jsonschema_json___defs_arcclose2d(data_item__ArcClose2D)
                if "Box" in data_item_keys:
                    data_item_keys.remove("Box")
                    data_item__Box = data_item["Box"]
                    validate_x3d_3_0_jsonschema_json___defs_box(data_item__Box)
                if "Circle2D" in data_item_keys:
                    data_item_keys.remove("Circle2D")
                    data_item__Circle2D = data_item["Circle2D"]
                    validate_x3d_3_0_jsonschema_json___defs_circle2d(data_item__Circle2D)
                if "Cone" in data_item_keys:
                    data_item_keys.remove("Cone")
                    data_item__Cone = data_item["Cone"]
                    validate_x3d_3_0_jsonschema_json___defs_cone(data_item__Cone)
                if "Cylinder" in data_item_keys:
                    data_item_keys.remove("Cylinder")
                    data_item__Cylinder = data_item["Cylinder"]
                    validate_x3d_3_0_jsonschema_json___defs_cylinder(data_item__Cylinder)
                if "Disk2D" in data_item_keys:
                    data_item_keys.remove("Disk2D")
                    data_item__Disk2D = data_item["Disk2D"]
                    validate_x3d_3_0_jsonschema_json___defs_disk2d(data_item__Disk2D)
                if "ElevationGrid" in data_item_keys:
                    data_item_keys.remove("ElevationGrid")
                    data_item__ElevationGrid = data_item["ElevationGrid"]
                    validate_x3d_3_0_jsonschema_json___defs_elevationgrid(data_item__ElevationGrid)
                if "Extrusion" in data_item_keys:
                    data_item_keys.remove("Extrusion")
                    data_item__Extrusion = data_item["Extrusion"]
                    validate_x3d_3_0_jsonschema_json___defs_extrusion(data_item__Extrusion)
                if "GeoElevationGrid" in data_item_keys:
                    data_item_keys.remove("GeoElevationGrid")
                    data_item__GeoElevationGrid = data_item["GeoElevationGrid"]
                    validate_x3d_3_0_jsonschema_json___defs_geoelevationgrid(data_item__GeoElevationGrid)
                if "IndexedLineSet" in data_item_keys:
                    data_item_keys.remove("IndexedLineSet")
                    data_item__IndexedLineSet = data_item["IndexedLineSet"]
                    validate_x3d_3_0_jsonschema_json___defs_indexedlineset(data_item__IndexedLineSet)
                if "LineSet" in data_item_keys:
                    data_item_keys.remove("LineSet")
                    data_item__LineSet = data_item["LineSet"]
                    validate_x3d_3_0_jsonschema_json___defs_lineset(data_item__LineSet)
                if "PointSet" in data_item_keys:
                    data_item_keys.remove("PointSet")
                    data_item__PointSet = data_item["PointSet"]
                    validate_x3d_3_0_jsonschema_json___defs_pointset(data_item__PointSet)
                if "Polyline2D" in data_item_keys:
                    data_item_keys.remove("Polyline2D")
                    data_item__Polyline2D = data_item["Polyline2D"]
                    validate_x3d_3_0_jsonschema_json___defs_polyline2d(data_item__Polyline2D)
                if "Polypoint2D" in data_item_keys:
                    data_item_keys.remove("Polypoint2D")
                    data_item__Polypoint2D = data_item["Polypoint2D"]
                    validate_x3d_3_0_jsonschema_json___defs_polypoint2d(data_item__Polypoint2D)
                if "Rectangle2D" in data_item_keys:
                    data_item_keys.remove("Rectangle2D")
                    data_item__Rectangle2D = data_item["Rectangle2D"]
                    validate_x3d_3_0_jsonschema_json___defs_rectangle2d(data_item__Rectangle2D)
                if "Sphere" in data_item_keys:
                    data_item_keys.remove("Sphere")
                    data_item__Sphere = data_item["Sphere"]
                    validate_x3d_3_0_jsonschema_json___defs_sphere(data_item__Sphere)
                if "Text" in data_item_keys:
                    data_item_keys.remove("Text")
                    data_item__Text = data_item["Text"]
                    validate_x3d_3_0_jsonschema_json___defs_text(data_item__Text)
                if "TriangleSet2D" in data_item_keys:
                    data_item_keys.remove("TriangleSet2D")
                    data_item__TriangleSet2D = data_item["TriangleSet2D"]
                    validate_x3d_3_0_jsonschema_json___defs_triangleset2d(data_item__TriangleSet2D)
                if "ContourPolyline2D" in data_item_keys:
                    data_item_keys.remove("ContourPolyline2D")
                    data_item__ContourPolyline2D = data_item["ContourPolyline2D"]
                    validate_x3d_3_0_jsonschema_json___defs_contourpolyline2d(data_item__ContourPolyline2D)
                if "NurbsCurve2D" in data_item_keys:
                    data_item_keys.remove("NurbsCurve2D")
                    data_item__NurbsCurve2D = data_item["NurbsCurve2D"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbscurve2d(data_item__NurbsCurve2D)
                if "Contour2D" in data_item_keys:
                    data_item_keys.remove("Contour2D")
                    data_item__Contour2D = data_item["Contour2D"]
                    validate_x3d_3_0_jsonschema_json___defs_contour2d(data_item__Contour2D)
                if "GeoOrigin" in data_item_keys:
                    data_item_keys.remove("GeoOrigin")
                    data_item__GeoOrigin = data_item["GeoOrigin"]
                    validate_x3d_3_0_jsonschema_json___defs_geoorigin(data_item__GeoOrigin)
                if "MetadataDouble" in data_item_keys:
                    data_item_keys.remove("MetadataDouble")
                    data_item__MetadataDouble = data_item["MetadataDouble"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatadouble(data_item__MetadataDouble)
                if "MetadataFloat" in data_item_keys:
                    data_item_keys.remove("MetadataFloat")
                    data_item__MetadataFloat = data_item["MetadataFloat"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatafloat(data_item__MetadataFloat)
                if "MetadataInteger" in data_item_keys:
                    data_item_keys.remove("MetadataInteger")
                    data_item__MetadataInteger = data_item["MetadataInteger"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatainteger(data_item__MetadataInteger)
                if "MetadataSet" in data_item_keys:
                    data_item_keys.remove("MetadataSet")
                    data_item__MetadataSet = data_item["MetadataSet"]
                    validate_x3d_3_0_jsonschema_json___defs_metadataset(data_item__MetadataSet)
                if "MetadataString" in data_item_keys:
                    data_item_keys.remove("MetadataString")
                    data_item__MetadataString = data_item["MetadataString"]
                    validate_x3d_3_0_jsonschema_json___defs_metadatastring(data_item__MetadataString)
                if "NurbsTextureCoordinate" in data_item_keys:
                    data_item_keys.remove("NurbsTextureCoordinate")
                    data_item__NurbsTextureCoordinate = data_item["NurbsTextureCoordinate"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbstexturecoordinate(data_item__NurbsTextureCoordinate)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}, 'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'MetadataDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataDouble'}, 'MetadataFloat': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataFloat'}, 'MetadataInteger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataInteger'}, 'MetadataSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataSet'}, 'MetadataString': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MetadataString'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbstexturecoordinate(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@controlPoint" in data_keys:
                    data_keys.remove("@controlPoint")
                    data__controlPoint = data["@controlPoint"]
                    if not isinstance(data__controlPoint, (list, tuple)):
                        raise JsonSchemaValueException("data.@controlPoint must be array", value=data__controlPoint, name="data.@controlPoint", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='type')
                    data__controlPoint_is_list = isinstance(data__controlPoint, (list, tuple))
                    if data__controlPoint_is_list:
                        data__controlPoint_len = len(data__controlPoint)
                        if data__controlPoint_len < 2:
                            raise JsonSchemaValueException("data.@controlPoint must contain at least 2 items", value=data__controlPoint, name="data.@controlPoint", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='minItems')
                        for data__controlPoint_x, data__controlPoint_item in enumerate(data__controlPoint):
                            if not isinstance(data__controlPoint_item, (int, float)) or isinstance(data__controlPoint_item, bool):
                                raise JsonSchemaValueException(""+"data.@controlPoint[{data__controlPoint_x}]".format(**locals())+" must be number", value=data__controlPoint_item, name=""+"data.@controlPoint[{data__controlPoint_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@uDimension" in data_keys:
                    data_keys.remove("@uDimension")
                    data__uDimension = data["@uDimension"]
                    if not isinstance(data__uDimension, (int)) and not (isinstance(data__uDimension, float) and data__uDimension.is_integer()) or isinstance(data__uDimension, bool):
                        raise JsonSchemaValueException("data.@uDimension must be integer", value=data__uDimension, name="data.@uDimension", definition={'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@uDimension"] = 0
                if "@uKnot" in data_keys:
                    data_keys.remove("@uKnot")
                    data__uKnot = data["@uKnot"]
                    if not isinstance(data__uKnot, (list, tuple)):
                        raise JsonSchemaValueException("data.@uKnot must be array", value=data__uKnot, name="data.@uKnot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__uKnot_is_list = isinstance(data__uKnot, (list, tuple))
                    if data__uKnot_is_list:
                        data__uKnot_len = len(data__uKnot)
                        for data__uKnot_x, data__uKnot_item in enumerate(data__uKnot):
                            if not isinstance(data__uKnot_item, (int, float)) or isinstance(data__uKnot_item, bool):
                                raise JsonSchemaValueException(""+"data.@uKnot[{data__uKnot_x}]".format(**locals())+" must be number", value=data__uKnot_item, name=""+"data.@uKnot[{data__uKnot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@uOrder" in data_keys:
                    data_keys.remove("@uOrder")
                    data__uOrder = data["@uOrder"]
                    if not isinstance(data__uOrder, (int)) and not (isinstance(data__uOrder, float) and data__uOrder.is_integer()) or isinstance(data__uOrder, bool):
                        raise JsonSchemaValueException("data.@uOrder must be integer", value=data__uOrder, name="data.@uOrder", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@uOrder"] = 3
                if "@vDimension" in data_keys:
                    data_keys.remove("@vDimension")
                    data__vDimension = data["@vDimension"]
                    if not isinstance(data__vDimension, (int)) and not (isinstance(data__vDimension, float) and data__vDimension.is_integer()) or isinstance(data__vDimension, bool):
                        raise JsonSchemaValueException("data.@vDimension must be integer", value=data__vDimension, name="data.@vDimension", definition={'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@vDimension"] = 0
                if "@vKnot" in data_keys:
                    data_keys.remove("@vKnot")
                    data__vKnot = data["@vKnot"]
                    if not isinstance(data__vKnot, (list, tuple)):
                        raise JsonSchemaValueException("data.@vKnot must be array", value=data__vKnot, name="data.@vKnot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__vKnot_is_list = isinstance(data__vKnot, (list, tuple))
                    if data__vKnot_is_list:
                        data__vKnot_len = len(data__vKnot)
                        for data__vKnot_x, data__vKnot_item in enumerate(data__vKnot):
                            if not isinstance(data__vKnot_item, (int, float)) or isinstance(data__vKnot_item, bool):
                                raise JsonSchemaValueException(""+"data.@vKnot[{data__vKnot_x}]".format(**locals())+" must be number", value=data__vKnot_item, name=""+"data.@vKnot[{data__vKnot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@vOrder" in data_keys:
                    data_keys.remove("@vOrder")
                    data__vOrder = data["@vOrder"]
                    if not isinstance(data__vOrder, (int)) and not (isinstance(data__vOrder, float) and data__vOrder.is_integer()) or isinstance(data__vOrder, bool):
                        raise JsonSchemaValueException("data.@vOrder must be integer", value=data__vOrder, name="data.@vOrder", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@vOrder"] = 3
                if "@weight" in data_keys:
                    data_keys.remove("@weight")
                    data__weight = data["@weight"]
                    if not isinstance(data__weight, (list, tuple)):
                        raise JsonSchemaValueException("data.@weight must be array", value=data__weight, name="data.@weight", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, rule='type')
                    data__weight_is_list = isinstance(data__weight, (list, tuple))
                    if data__weight_is_list:
                        data__weight_len = len(data__weight)
                        for data__weight_x, data__weight_item in enumerate(data__weight):
                            if not isinstance(data__weight_item, (int, float)) or isinstance(data__weight_item, bool):
                                raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be number", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__weight_item, (int, float)):
                                if data__weight_item <= 0:
                                    raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be bigger than 0", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='exclusiveMinimum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_geoorigin(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotateYUp': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotateYUp': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@geoCoords" in data_keys:
                    data_keys.remove("@geoCoords")
                    data__geoCoords = data["@geoCoords"]
                    if not isinstance(data__geoCoords, (list, tuple)):
                        raise JsonSchemaValueException("data.@geoCoords must be array", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__geoCoords_is_list = isinstance(data__geoCoords, (list, tuple))
                    if data__geoCoords_is_list:
                        data__geoCoords_len = len(data__geoCoords)
                        if data__geoCoords_len < 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain at least 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__geoCoords_len > 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain less than or equal to 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__geoCoords_x, data__geoCoords_item in enumerate(data__geoCoords):
                            if not isinstance(data__geoCoords_item, (int, float)) or isinstance(data__geoCoords_item, bool):
                                raise JsonSchemaValueException(""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+" must be number", value=data__geoCoords_item, name=""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@rotateYUp" in data_keys:
                    data_keys.remove("@rotateYUp")
                    data__rotateYUp = data["@rotateYUp"]
                    if not isinstance(data__rotateYUp, (bool)):
                        raise JsonSchemaValueException("data.@rotateYUp must be boolean", value=data__rotateYUp, name="data.@rotateYUp", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@rotateYUp"] = False
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotateYUp': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotateYUp': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__geosystem(data):
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (list, tuple)):
                raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'minItems': 2, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}}, rule='type')
            data_is_list = isinstance(data, (list, tuple))
            if data_is_list:
                data_len = len(data)
                if data_len < 2:
                    raise JsonSchemaValueException("data must contain at least 2 items", value=data, name="data", definition={'type': 'array', 'minItems': 2, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}}, rule='minItems')
                if data_len > 3:
                    raise JsonSchemaValueException("data must contain less than or equal to 3 items", value=data, name="data", definition={'type': 'array', 'minItems': 2, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}}, rule='maxItems')
                for data_x, data_item in enumerate(data):
                    if not isinstance(data_item, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be string", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}, rule='type')
                    if data_item not in ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']:
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be one of ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}, rule='enum')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (list, tuple)):
                raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'minItems': 1, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}], 'items': {'type': 'string', 'enum': ['WGS84']}}, rule='type')
            data_is_list = isinstance(data, (list, tuple))
            if data_is_list:
                data_len = len(data)
                if data_len < 1:
                    raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'type': 'array', 'minItems': 1, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}], 'items': {'type': 'string', 'enum': ['WGS84']}}, rule='minItems')
                if data_len > 3:
                    raise JsonSchemaValueException("data must contain less than or equal to 3 items", value=data, name="data", definition={'type': 'array', 'minItems': 1, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}], 'items': {'type': 'string', 'enum': ['WGS84']}}, rule='maxItems')
                for data_x, data_item in enumerate(data):
                    if not isinstance(data_item, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be string", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['WGS84']}, rule='type')
                    if data_item not in ['WGS84']:
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be one of ['WGS84']", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['WGS84']}, rule='enum')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (list, tuple)):
                raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, rule='type')
            data_is_list = isinstance(data, (list, tuple))
            if data_is_list:
                data_len = len(data)
                if data_len < 4:
                    raise JsonSchemaValueException("data must contain at least 4 items", value=data, name="data", definition={'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, rule='minItems')
                if data_len > 5:
                    raise JsonSchemaValueException("data must contain less than or equal to 5 items", value=data, name="data", definition={'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, rule='maxItems')
                for data_x, data_item in enumerate(data):
                    if not isinstance(data_item, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be string", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['S', 'N']}, rule='type')
                    if data_item not in ['S', 'N']:
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be one of ['S', 'N']", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['S', 'N']}, rule='enum')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (list, tuple)):
                raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, rule='type')
            data_is_list = isinstance(data, (list, tuple))
            if data_is_list:
                data_len = len(data)
                if data_len < 3:
                    raise JsonSchemaValueException("data must contain at least 3 items", value=data, name="data", definition={'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, rule='minItems')
                if data_len > 5:
                    raise JsonSchemaValueException("data must contain less than or equal to 5 items", value=data, name="data", definition={'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, rule='maxItems')
                for data_x, data_item in enumerate(data):
                    if not isinstance(data_item, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be string", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['WGS84']}, rule='type')
                    if data_item not in ['WGS84']:
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be one of ['WGS84']", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['WGS84']}, rule='enum')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (list, tuple)):
                raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, rule='type')
            data_is_list = isinstance(data, (list, tuple))
            if data_is_list:
                data_len = len(data)
                if data_len < 4:
                    raise JsonSchemaValueException("data must contain at least 4 items", value=data, name="data", definition={'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, rule='minItems')
                if data_len > 5:
                    raise JsonSchemaValueException("data must contain less than or equal to 5 items", value=data, name="data", definition={'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, rule='maxItems')
                for data_x, data_item in enumerate(data):
                    if not isinstance(data_item, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be string", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['S', 'N']}, rule='type')
                    if data_item not in ['S', 'N']:
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be one of ['S', 'N']", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['S', 'N']}, rule='enum')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (list, tuple)):
                raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, rule='type')
            data_is_list = isinstance(data, (list, tuple))
            if data_is_list:
                data_len = len(data)
                if data_len < 3:
                    raise JsonSchemaValueException("data must contain at least 3 items", value=data, name="data", definition={'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, rule='minItems')
                if data_len > 5:
                    raise JsonSchemaValueException("data must contain less than or equal to 5 items", value=data, name="data", definition={'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, rule='maxItems')
                for data_x, data_item in enumerate(data):
                    if not isinstance(data_item, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be string", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, rule='type')
                    if data_item not in ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']:
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be one of ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, rule='enum')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (list, tuple)):
                raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, rule='type')
            data_is_list = isinstance(data, (list, tuple))
            if data_is_list:
                data_len = len(data)
                if data_len < 4:
                    raise JsonSchemaValueException("data must contain at least 4 items", value=data, name="data", definition={'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, rule='minItems')
                if data_len > 5:
                    raise JsonSchemaValueException("data must contain less than or equal to 5 items", value=data, name="data", definition={'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, rule='maxItems')
                for data_x, data_item in enumerate(data):
                    if not isinstance(data_item, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be string", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, rule='type')
                    if data_item not in ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']:
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be one of ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, rule='enum')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (list, tuple)):
                raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'minItems': 2, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, rule='type')
            data_is_list = isinstance(data, (list, tuple))
            if data_is_list:
                data_len = len(data)
                if data_len < 2:
                    raise JsonSchemaValueException("data must contain at least 2 items", value=data, name="data", definition={'type': 'array', 'minItems': 2, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, rule='minItems')
                if data_len > 5:
                    raise JsonSchemaValueException("data must contain less than or equal to 5 items", value=data, name="data", definition={'type': 'array', 'minItems': 2, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, rule='maxItems')
                for data_x, data_item in enumerate(data):
                    if not isinstance(data_item, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be string", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['WGS84']}, rule='type')
                    if data_item not in ['WGS84']:
                        raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be one of ['WGS84']", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'string', 'enum': ['WGS84']}, rule='enum')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (list, tuple)):
                raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'minItems': 1, 'maxItems': 1, 'prefixItems': [{'type': 'string', 'enum': ['GC', 'GCC'], 'default': 'GD'}], 'items': False}, rule='type')
            data_is_list = isinstance(data, (list, tuple))
            if data_is_list:
                data_len = len(data)
                if data_len < 1:
                    raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'type': 'array', 'minItems': 1, 'maxItems': 1, 'prefixItems': [{'type': 'string', 'enum': ['GC', 'GCC'], 'default': 'GD'}], 'items': False}, rule='minItems')
                if data_len > 1:
                    raise JsonSchemaValueException("data must contain less than or equal to 1 items", value=data, name="data", definition={'type': 'array', 'minItems': 1, 'maxItems': 1, 'prefixItems': [{'type': 'string', 'enum': ['GC', 'GCC'], 'default': 'GD'}], 'items': False}, rule='maxItems')
                if data:
                    raise JsonSchemaValueException("data must not be there", value=data, name="data", definition={'type': 'array', 'minItems': 1, 'maxItems': 1, 'prefixItems': [{'type': 'string', 'enum': ['GC', 'GCC'], 'default': 'GD'}], 'items': False}, rule='items')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'description': 'Attempts to validate all possible combinations', 'oneOf': [{'type': 'array', 'minItems': 2, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}}, {'type': 'array', 'minItems': 1, 'maxItems': 3, 'prefixItems': [{'type': 'string', 'enum': ['GD', 'GDC'], 'default': 'GD'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE'], 'default': 'WE'}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, {'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['S', 'N']}}, {'type': 'array', 'minItems': 3, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['WGS84']}, {'type': 'string', 'enum': ['S', 'N']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, {'type': 'array', 'minItems': 4, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['WGS84']}], 'items': {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}}, {'type': 'array', 'minItems': 2, 'maxItems': 5, 'prefixItems': [{'type': 'string', 'enum': ['UTM'], 'default': 'GD'}, {'type': 'string', 'enum': ['Z01', 'Z1', 'Z02', 'Z2', 'Z03', 'Z3', 'Z04', 'Z4', 'Z05', 'Z5', 'Z06', 'Z6', 'Z07', 'Z7', 'Z08', 'Z8', 'Z09', 'Z9', 'Z10', 'Z11', 'Z12', 'Z13', 'Z14', 'Z15', 'Z16', 'Z17', 'Z18', 'Z19', 'Z20', 'Z21', 'Z22', 'Z23', 'Z24', 'Z25', 'Z26', 'Z27', 'Z28', 'Z29', 'Z30', 'Z31', 'Z32', 'Z33', 'Z34', 'Z35', 'Z36', 'Z37', 'Z38', 'Z39', 'Z40', 'Z41', 'Z42', 'Z43', 'Z44', 'Z45', 'Z46', 'Z47', 'Z48', 'Z49', 'Z50', 'Z51', 'Z52', 'Z53', 'Z54', 'Z55', 'Z56', 'Z57', 'Z58', 'Z59', 'Z60'], 'default': 'WE'}, {'type': 'string', 'enum': ['S', 'N']}, {'type': 'string', 'enum': ['AM', 'AN', 'BN', 'BR', 'CC', 'CD', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'FA', 'HE', 'HO', 'ID', 'IN', 'KA', 'RF', 'SA', 'WD', 'WE']}], 'items': {'type': 'string', 'enum': ['WGS84']}}, {'type': 'array', 'minItems': 1, 'maxItems': 1, 'prefixItems': [{'type': 'string', 'enum': ['GC', 'GCC'], 'default': 'GD'}], 'items': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_contour2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '-children': {'$ref': '#/$defs/-NurbsCurve2D-ContourPolyline2DMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '-children': {'$ref': '#/$defs/-NurbsCurve2D-ContourPolyline2DMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__nurbscurve2d_contourpolyline2dmfnode(data__children)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '-children': {'$ref': '#/$defs/-NurbsCurve2D-ContourPolyline2DMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '-children': {'$ref': '#/$defs/-NurbsCurve2D-ContourPolyline2DMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__nurbscurve2d_contourpolyline2dmfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "NurbsCurve2D" in data_item_keys:
                    data_item_keys.remove("NurbsCurve2D")
                    data_item__NurbsCurve2D = data_item["NurbsCurve2D"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbscurve2d(data_item__NurbsCurve2D)
                if "ContourPolyline2D" in data_item_keys:
                    data_item_keys.remove("ContourPolyline2D")
                    data_item__ContourPolyline2D = data_item["ContourPolyline2D"]
                    validate_x3d_3_0_jsonschema_json___defs_contourpolyline2d(data_item__ContourPolyline2D)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbscurve2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@closed" in data_keys:
                    data_keys.remove("@closed")
                    data__closed = data["@closed"]
                    if not isinstance(data__closed, (bool)):
                        raise JsonSchemaValueException("data.@closed must be boolean", value=data__closed, name="data.@closed", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@closed"] = False
                if "@controlPoint" in data_keys:
                    data_keys.remove("@controlPoint")
                    data__controlPoint = data["@controlPoint"]
                    if not isinstance(data__controlPoint, (list, tuple)):
                        raise JsonSchemaValueException("data.@controlPoint must be array", value=data__controlPoint, name="data.@controlPoint", definition={'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='type')
                    data__controlPoint_is_list = isinstance(data__controlPoint, (list, tuple))
                    if data__controlPoint_is_list:
                        data__controlPoint_len = len(data__controlPoint)
                        if data__controlPoint_len < 2:
                            raise JsonSchemaValueException("data.@controlPoint must contain at least 2 items", value=data__controlPoint, name="data.@controlPoint", definition={'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='minItems')
                        for data__controlPoint_x, data__controlPoint_item in enumerate(data__controlPoint):
                            if not isinstance(data__controlPoint_item, (int, float)) or isinstance(data__controlPoint_item, bool):
                                raise JsonSchemaValueException(""+"data.@controlPoint[{data__controlPoint_x}]".format(**locals())+" must be number", value=data__controlPoint_item, name=""+"data.@controlPoint[{data__controlPoint_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@knot" in data_keys:
                    data_keys.remove("@knot")
                    data__knot = data["@knot"]
                    if not isinstance(data__knot, (list, tuple)):
                        raise JsonSchemaValueException("data.@knot must be array", value=data__knot, name="data.@knot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__knot_is_list = isinstance(data__knot, (list, tuple))
                    if data__knot_is_list:
                        data__knot_len = len(data__knot)
                        for data__knot_x, data__knot_item in enumerate(data__knot):
                            if not isinstance(data__knot_item, (int, float)) or isinstance(data__knot_item, bool):
                                raise JsonSchemaValueException(""+"data.@knot[{data__knot_x}]".format(**locals())+" must be number", value=data__knot_item, name=""+"data.@knot[{data__knot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@order" in data_keys:
                    data_keys.remove("@order")
                    data__order = data["@order"]
                    if not isinstance(data__order, (int)) and not (isinstance(data__order, float) and data__order.is_integer()) or isinstance(data__order, bool):
                        raise JsonSchemaValueException("data.@order must be integer", value=data__order, name="data.@order", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@order"] = 3
                if "@tessellation" in data_keys:
                    data_keys.remove("@tessellation")
                    data__tessellation = data["@tessellation"]
                    if not isinstance(data__tessellation, (int)) and not (isinstance(data__tessellation, float) and data__tessellation.is_integer()) or isinstance(data__tessellation, bool):
                        raise JsonSchemaValueException("data.@tessellation must be integer", value=data__tessellation, name="data.@tessellation", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@tessellation"] = 0
                if "@weight" in data_keys:
                    data_keys.remove("@weight")
                    data__weight = data["@weight"]
                    if not isinstance(data__weight, (list, tuple)):
                        raise JsonSchemaValueException("data.@weight must be array", value=data__weight, name="data.@weight", definition={'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, rule='type')
                    data__weight_is_list = isinstance(data__weight, (list, tuple))
                    if data__weight_is_list:
                        data__weight_len = len(data__weight)
                        for data__weight_x, data__weight_item in enumerate(data__weight):
                            if not isinstance(data__weight_item, (int, float)) or isinstance(data__weight_item, bool):
                                raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be number", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__weight_item, (int, float)):
                                if data__weight_item <= 0:
                                    raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be bigger than 0", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='exclusiveMinimum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_contourpolyline2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@controlPoint" in data_keys:
                    data_keys.remove("@controlPoint")
                    data__controlPoint = data["@controlPoint"]
                    if not isinstance(data__controlPoint, (list, tuple)):
                        raise JsonSchemaValueException("data.@controlPoint must be array", value=data__controlPoint, name="data.@controlPoint", definition={'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='type')
                    data__controlPoint_is_list = isinstance(data__controlPoint, (list, tuple))
                    if data__controlPoint_is_list:
                        data__controlPoint_len = len(data__controlPoint)
                        if data__controlPoint_len < 2:
                            raise JsonSchemaValueException("data.@controlPoint must contain at least 2 items", value=data__controlPoint, name="data.@controlPoint", definition={'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='minItems')
                        for data__controlPoint_x, data__controlPoint_item in enumerate(data__controlPoint):
                            if not isinstance(data__controlPoint_item, (int, float)) or isinstance(data__controlPoint_item, bool):
                                raise JsonSchemaValueException(""+"data.@controlPoint[{data__controlPoint_x}]".format(**locals())+" must be number", value=data__controlPoint_item, name=""+"data.@controlPoint[{data__controlPoint_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@controlPoint': {'$comment': 'MFVec2d inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_triangleset2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vertices': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vertices': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = False
                if "@vertices" in data_keys:
                    data_keys.remove("@vertices")
                    data__vertices = data["@vertices"]
                    if not isinstance(data__vertices, (list, tuple)):
                        raise JsonSchemaValueException("data.@vertices must be array", value=data__vertices, name="data.@vertices", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='type')
                    data__vertices_is_list = isinstance(data__vertices, (list, tuple))
                    if data__vertices_is_list:
                        data__vertices_len = len(data__vertices)
                        if data__vertices_len < 2:
                            raise JsonSchemaValueException("data.@vertices must contain at least 2 items", value=data__vertices, name="data.@vertices", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='minItems')
                        for data__vertices_x, data__vertices_item in enumerate(data__vertices):
                            if not isinstance(data__vertices_item, (int, float)) or isinstance(data__vertices_item, bool):
                                raise JsonSchemaValueException(""+"data.@vertices[{data__vertices_x}]".format(**locals())+" must be number", value=data__vertices_item, name=""+"data.@vertices[{data__vertices_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vertices': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vertices': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_text(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fontStyle': {'$ref': '#/$defs/-X3DFontStyleNodeSFNode'}, '@length': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'number'}}, '@maxExtent': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@string': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fontStyle': {'$ref': '#/$defs/-X3DFontStyleNodeSFNode'}, '@length': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'number'}}, '@maxExtent': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@string': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-fontStyle" in data_keys:
                    data_keys.remove("-fontStyle")
                    data__fontStyle = data["-fontStyle"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dfontstylenodesfnode(data__fontStyle)
                if "@length" in data_keys:
                    data_keys.remove("@length")
                    data__length = data["@length"]
                    if not isinstance(data__length, (list, tuple)):
                        raise JsonSchemaValueException("data.@length must be array", value=data__length, name="data.@length", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'number'}}, rule='type')
                    data__length_is_list = isinstance(data__length, (list, tuple))
                    if data__length_is_list:
                        data__length_len = len(data__length)
                        for data__length_x, data__length_item in enumerate(data__length):
                            if not isinstance(data__length_item, (int, float)) or isinstance(data__length_item, bool):
                                raise JsonSchemaValueException(""+"data.@length[{data__length_x}]".format(**locals())+" must be number", value=data__length_item, name=""+"data.@length[{data__length_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__length_item, (int, float)):
                                if data__length_item < 0:
                                    raise JsonSchemaValueException(""+"data.@length[{data__length_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__length_item, name=""+"data.@length[{data__length_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'number'}, rule='minimum')
                if "@maxExtent" in data_keys:
                    data_keys.remove("@maxExtent")
                    data__maxExtent = data["@maxExtent"]
                    if not isinstance(data__maxExtent, (int, float)) or isinstance(data__maxExtent, bool):
                        raise JsonSchemaValueException("data.@maxExtent must be number", value=data__maxExtent, name="data.@maxExtent", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@maxExtent"] = 0
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = False
                if "@string" in data_keys:
                    data_keys.remove("@string")
                    data__string = data["@string"]
                    if not isinstance(data__string, (list, tuple)):
                        raise JsonSchemaValueException("data.@string must be array", value=data__string, name="data.@string", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, rule='type')
                    data__string_is_list = isinstance(data__string, (list, tuple))
                    if data__string_is_list:
                        data__string_len = len(data__string)
                        for data__string_x, data__string_item in enumerate(data__string):
                            if not isinstance(data__string_item, (str)):
                                raise JsonSchemaValueException(""+"data.@string[{data__string_x}]".format(**locals())+" must be string", value=data__string_item, name=""+"data.@string[{data__string_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fontStyle': {'$ref': '#/$defs/-X3DFontStyleNodeSFNode'}, '@length': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'number'}}, '@maxExtent': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@string': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fontStyle': {'$ref': '#/$defs/-X3DFontStyleNodeSFNode'}, '@length': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'number'}}, '@maxExtent': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@string': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dfontstylenodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "FontStyle" in data_keys:
            data_keys.remove("FontStyle")
            data__FontStyle = data["FontStyle"]
            validate_x3d_3_0_jsonschema_json___defs_fontstyle(data__FontStyle)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'FontStyle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FontStyle'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_sphere(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@radius" in data_keys:
                    data_keys.remove("@radius")
                    data__radius = data["@radius"]
                    if not isinstance(data__radius, (int, float)) or isinstance(data__radius, bool):
                        raise JsonSchemaValueException("data.@radius must be number", value=data__radius, name="data.@radius", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@radius"] = 1
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_rectangle2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@size" in data_keys:
                    data_keys.remove("@size")
                    data__size = data["@size"]
                    if not isinstance(data__size, (list, tuple)):
                        raise JsonSchemaValueException("data.@size must be array", value=data__size, name="data.@size", definition={'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='type')
                    data__size_is_list = isinstance(data__size, (list, tuple))
                    if data__size_is_list:
                        data__size_len = len(data__size)
                        if data__size_len < 2:
                            raise JsonSchemaValueException("data.@size must contain at least 2 items", value=data__size, name="data.@size", definition={'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__size_len > 2:
                            raise JsonSchemaValueException("data.@size must contain less than or equal to 2 items", value=data__size, name="data.@size", definition={'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__size_x, data__size_item in enumerate(data__size):
                            if not isinstance(data__size_item, (int, float)) or isinstance(data__size_item, bool):
                                raise JsonSchemaValueException(""+"data.@size[{data__size_x}]".format(**locals())+" must be number", value=data__size_item, name=""+"data.@size[{data__size_x}]".format(**locals())+"", definition={'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__size_item, (int, float)):
                                if data__size_item <= 0:
                                    raise JsonSchemaValueException(""+"data.@size[{data__size_x}]".format(**locals())+" must be bigger than 0", value=data__size_item, name=""+"data.@size[{data__size_x}]".format(**locals())+"", definition={'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}, rule='exclusiveMinimum')
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = False
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 2, 'exclusiveMinimum': 0, 'type': 'number'}}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_polypoint2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@point" in data_keys:
                    data_keys.remove("@point")
                    data__point = data["@point"]
                    if not isinstance(data__point, (list, tuple)):
                        raise JsonSchemaValueException("data.@point must be array", value=data__point, name="data.@point", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='type')
                    data__point_is_list = isinstance(data__point, (list, tuple))
                    if data__point_is_list:
                        data__point_len = len(data__point)
                        if data__point_len < 2:
                            raise JsonSchemaValueException("data.@point must contain at least 2 items", value=data__point, name="data.@point", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='minItems')
                        for data__point_x, data__point_item in enumerate(data__point):
                            if not isinstance(data__point_item, (int, float)) or isinstance(data__point_item, bool):
                                raise JsonSchemaValueException(""+"data.@point[{data__point_x}]".format(**locals())+" must be number", value=data__point_item, name=""+"data.@point[{data__point_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_polyline2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@lineSegments': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@lineSegments': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@lineSegments" in data_keys:
                    data_keys.remove("@lineSegments")
                    data__lineSegments = data["@lineSegments"]
                    if not isinstance(data__lineSegments, (list, tuple)):
                        raise JsonSchemaValueException("data.@lineSegments must be array", value=data__lineSegments, name="data.@lineSegments", definition={'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='type')
                    data__lineSegments_is_list = isinstance(data__lineSegments, (list, tuple))
                    if data__lineSegments_is_list:
                        data__lineSegments_len = len(data__lineSegments)
                        if data__lineSegments_len < 2:
                            raise JsonSchemaValueException("data.@lineSegments must contain at least 2 items", value=data__lineSegments, name="data.@lineSegments", definition={'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='minItems')
                        for data__lineSegments_x, data__lineSegments_item in enumerate(data__lineSegments):
                            if not isinstance(data__lineSegments_item, (int, float)) or isinstance(data__lineSegments_item, bool):
                                raise JsonSchemaValueException(""+"data.@lineSegments[{data__lineSegments_x}]".format(**locals())+" must be number", value=data__lineSegments_item, name=""+"data.@lineSegments[{data__lineSegments_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@lineSegments': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@lineSegments': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_pointset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "Coordinate" in data_keys:
            data_keys.remove("Coordinate")
            data__Coordinate = data["Coordinate"]
            validate_x3d_3_0_jsonschema_json___defs_coordinate(data__Coordinate)
        if "CoordinateDouble" in data_keys:
            data_keys.remove("CoordinateDouble")
            data__CoordinateDouble = data["CoordinateDouble"]
            validate_x3d_3_0_jsonschema_json___defs_coordinatedouble(data__CoordinateDouble)
        if "GeoCoordinate" in data_keys:
            data_keys.remove("GeoCoordinate")
            data__GeoCoordinate = data["GeoCoordinate"]
            validate_x3d_3_0_jsonschema_json___defs_geocoordinate(data__GeoCoordinate)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'Coordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Coordinate'}, 'CoordinateDouble': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateDouble'}, 'GeoCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "Color" in data_keys:
            data_keys.remove("Color")
            data__Color = data["Color"]
            validate_x3d_3_0_jsonschema_json___defs_color(data__Color)
        if "ColorRGBA" in data_keys:
            data_keys.remove("ColorRGBA")
            data__ColorRGBA = data["ColorRGBA"]
            validate_x3d_3_0_jsonschema_json___defs_colorrgba(data__ColorRGBA)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'Color': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Color'}, 'ColorRGBA': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorRGBA'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_lineset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vertexCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 2, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vertexCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 2, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@vertexCount" in data_keys:
                    data_keys.remove("@vertexCount")
                    data__vertexCount = data["@vertexCount"]
                    if not isinstance(data__vertexCount, (list, tuple)):
                        raise JsonSchemaValueException("data.@vertexCount must be array", value=data__vertexCount, name="data.@vertexCount", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 2, 'type': 'integer'}}, rule='type')
                    data__vertexCount_is_list = isinstance(data__vertexCount, (list, tuple))
                    if data__vertexCount_is_list:
                        data__vertexCount_len = len(data__vertexCount)
                        for data__vertexCount_x, data__vertexCount_item in enumerate(data__vertexCount):
                            if not isinstance(data__vertexCount_item, (int)) and not (isinstance(data__vertexCount_item, float) and data__vertexCount_item.is_integer()) or isinstance(data__vertexCount_item, bool):
                                raise JsonSchemaValueException(""+"data.@vertexCount[{data__vertexCount_x}]".format(**locals())+" must be integer", value=data__vertexCount_item, name=""+"data.@vertexCount[{data__vertexCount_x}]".format(**locals())+"", definition={'minimum': 2, 'type': 'integer'}, rule='type')
                            if isinstance(data__vertexCount_item, (int, float)):
                                if data__vertexCount_item < 2:
                                    raise JsonSchemaValueException(""+"data.@vertexCount[{data__vertexCount_x}]".format(**locals())+" must be bigger than or equal to 2", value=data__vertexCount_item, name=""+"data.@vertexCount[{data__vertexCount_x}]".format(**locals())+"", definition={'minimum': 2, 'type': 'integer'}, rule='minimum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vertexCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 2, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vertexCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 2, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_indexedlineset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorIndex" in data_keys:
                    data_keys.remove("@colorIndex")
                    data__colorIndex = data["@colorIndex"]
                    if not isinstance(data__colorIndex, (list, tuple)):
                        raise JsonSchemaValueException("data.@colorIndex must be array", value=data__colorIndex, name="data.@colorIndex", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, rule='type')
                    data__colorIndex_is_list = isinstance(data__colorIndex, (list, tuple))
                    if data__colorIndex_is_list:
                        data__colorIndex_len = len(data__colorIndex)
                        for data__colorIndex_x, data__colorIndex_item in enumerate(data__colorIndex):
                            if not isinstance(data__colorIndex_item, (int)) and not (isinstance(data__colorIndex_item, float) and data__colorIndex_item.is_integer()) or isinstance(data__colorIndex_item, bool):
                                raise JsonSchemaValueException(""+"data.@colorIndex[{data__colorIndex_x}]".format(**locals())+" must be integer", value=data__colorIndex_item, name=""+"data.@colorIndex[{data__colorIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='type')
                            if isinstance(data__colorIndex_item, (int, float)):
                                if data__colorIndex_item < -1:
                                    raise JsonSchemaValueException(""+"data.@colorIndex[{data__colorIndex_x}]".format(**locals())+" must be bigger than or equal to -1", value=data__colorIndex_item, name=""+"data.@colorIndex[{data__colorIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='minimum')
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "@coordIndex" in data_keys:
                    data_keys.remove("@coordIndex")
                    data__coordIndex = data["@coordIndex"]
                    if not isinstance(data__coordIndex, (list, tuple)):
                        raise JsonSchemaValueException("data.@coordIndex must be array", value=data__coordIndex, name="data.@coordIndex", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, rule='type')
                    data__coordIndex_is_list = isinstance(data__coordIndex, (list, tuple))
                    if data__coordIndex_is_list:
                        data__coordIndex_len = len(data__coordIndex)
                        for data__coordIndex_x, data__coordIndex_item in enumerate(data__coordIndex):
                            if not isinstance(data__coordIndex_item, (int)) and not (isinstance(data__coordIndex_item, float) and data__coordIndex_item.is_integer()) or isinstance(data__coordIndex_item, bool):
                                raise JsonSchemaValueException(""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+" must be integer", value=data__coordIndex_item, name=""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='type')
                            if isinstance(data__coordIndex_item, (int, float)):
                                if data__coordIndex_item < -1:
                                    raise JsonSchemaValueException(""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+" must be bigger than or equal to -1", value=data__coordIndex_item, name=""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='minimum')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_geoelevationgrid(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@geoGridOrigin': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@height': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@yScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@geoGridOrigin': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@height': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@yScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "@creaseAngle" in data_keys:
                    data_keys.remove("@creaseAngle")
                    data__creaseAngle = data["@creaseAngle"]
                    if not isinstance(data__creaseAngle, (int, float)) or isinstance(data__creaseAngle, bool):
                        raise JsonSchemaValueException("data.@creaseAngle must be number", value=data__creaseAngle, name="data.@creaseAngle", definition={'default': 0, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, rule='type')
                else: data["@creaseAngle"] = 0
                if "@geoGridOrigin" in data_keys:
                    data_keys.remove("@geoGridOrigin")
                    data__geoGridOrigin = data["@geoGridOrigin"]
                    if not isinstance(data__geoGridOrigin, (list, tuple)):
                        raise JsonSchemaValueException("data.@geoGridOrigin must be array", value=data__geoGridOrigin, name="data.@geoGridOrigin", definition={'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__geoGridOrigin_is_list = isinstance(data__geoGridOrigin, (list, tuple))
                    if data__geoGridOrigin_is_list:
                        data__geoGridOrigin_len = len(data__geoGridOrigin)
                        if data__geoGridOrigin_len < 3:
                            raise JsonSchemaValueException("data.@geoGridOrigin must contain at least 3 items", value=data__geoGridOrigin, name="data.@geoGridOrigin", definition={'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__geoGridOrigin_len > 3:
                            raise JsonSchemaValueException("data.@geoGridOrigin must contain less than or equal to 3 items", value=data__geoGridOrigin, name="data.@geoGridOrigin", definition={'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__geoGridOrigin_x, data__geoGridOrigin_item in enumerate(data__geoGridOrigin):
                            if not isinstance(data__geoGridOrigin_item, (int, float)) or isinstance(data__geoGridOrigin_item, bool):
                                raise JsonSchemaValueException(""+"data.@geoGridOrigin[{data__geoGridOrigin_x}]".format(**locals())+" must be number", value=data__geoGridOrigin_item, name=""+"data.@geoGridOrigin[{data__geoGridOrigin_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-geoOrigin" in data_keys:
                    data_keys.remove("-geoOrigin")
                    data__geoOrigin = data["-geoOrigin"]
                    validate_x3d_3_0_jsonschema_json___defs__geooriginsfnode(data__geoOrigin)
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "@height" in data_keys:
                    data_keys.remove("@height")
                    data__height = data["@height"]
                    if not isinstance(data__height, (list, tuple)):
                        raise JsonSchemaValueException("data.@height must be array", value=data__height, name="data.@height", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__height_is_list = isinstance(data__height, (list, tuple))
                    if data__height_is_list:
                        data__height_len = len(data__height)
                        for data__height_x, data__height_item in enumerate(data__height):
                            if not isinstance(data__height_item, (int, float)) or isinstance(data__height_item, bool):
                                raise JsonSchemaValueException(""+"data.@height[{data__height_x}]".format(**locals())+" must be number", value=data__height_item, name=""+"data.@height[{data__height_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-normal" in data_keys:
                    data_keys.remove("-normal")
                    data__normal = data["-normal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__normal)
                if "@normalPerVertex" in data_keys:
                    data_keys.remove("@normalPerVertex")
                    data__normalPerVertex = data["@normalPerVertex"]
                    if not isinstance(data__normalPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@normalPerVertex must be boolean", value=data__normalPerVertex, name="data.@normalPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@normalPerVertex"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data__texCoord)
                if "@xDimension" in data_keys:
                    data_keys.remove("@xDimension")
                    data__xDimension = data["@xDimension"]
                    if not isinstance(data__xDimension, (int)) and not (isinstance(data__xDimension, float) and data__xDimension.is_integer()) or isinstance(data__xDimension, bool):
                        raise JsonSchemaValueException("data.@xDimension must be integer", value=data__xDimension, name="data.@xDimension", definition={'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@xDimension"] = 2
                if "@xSpacing" in data_keys:
                    data_keys.remove("@xSpacing")
                    data__xSpacing = data["@xSpacing"]
                    if not isinstance(data__xSpacing, (int, float)) or isinstance(data__xSpacing, bool):
                        raise JsonSchemaValueException("data.@xSpacing must be number", value=data__xSpacing, name="data.@xSpacing", definition={'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, rule='type')
                else: data["@xSpacing"] = 1
                if "@yScale" in data_keys:
                    data_keys.remove("@yScale")
                    data__yScale = data["@yScale"]
                    if not isinstance(data__yScale, (int, float)) or isinstance(data__yScale, bool):
                        raise JsonSchemaValueException("data.@yScale must be number", value=data__yScale, name="data.@yScale", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@yScale"] = 1
                if "@zDimension" in data_keys:
                    data_keys.remove("@zDimension")
                    data__zDimension = data["@zDimension"]
                    if not isinstance(data__zDimension, (int)) and not (isinstance(data__zDimension, float) and data__zDimension.is_integer()) or isinstance(data__zDimension, bool):
                        raise JsonSchemaValueException("data.@zDimension must be integer", value=data__zDimension, name="data.@zDimension", definition={'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@zDimension"] = 2
                if "@zSpacing" in data_keys:
                    data_keys.remove("@zSpacing")
                    data__zSpacing = data["@zSpacing"]
                    if not isinstance(data__zSpacing, (int, float)) or isinstance(data__zSpacing, bool):
                        raise JsonSchemaValueException("data.@zSpacing must be number", value=data__zSpacing, name="data.@zSpacing", definition={'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, rule='type')
                else: data["@zSpacing"] = 1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@geoGridOrigin': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@height': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@yScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@geoGridOrigin': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@height': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@yScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFDouble initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "MultiTextureCoordinate" in data_keys:
            data_keys.remove("MultiTextureCoordinate")
            data__MultiTextureCoordinate = data["MultiTextureCoordinate"]
            validate_x3d_3_0_jsonschema_json___defs_multitexturecoordinate(data__MultiTextureCoordinate)
        if "TextureCoordinate" in data_keys:
            data_keys.remove("TextureCoordinate")
            data__TextureCoordinate = data["TextureCoordinate"]
            validate_x3d_3_0_jsonschema_json___defs_texturecoordinate(data__TextureCoordinate)
        if "TextureCoordinateGenerator" in data_keys:
            data_keys.remove("TextureCoordinateGenerator")
            data__TextureCoordinateGenerator = data["TextureCoordinateGenerator"]
            validate_x3d_3_0_jsonschema_json___defs_texturecoordinategenerator(data__TextureCoordinateGenerator)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "Normal" in data_keys:
            data_keys.remove("Normal")
            data__Normal = data["Normal"]
            validate_x3d_3_0_jsonschema_json___defs_normal(data__Normal)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'Normal': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Normal'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__geooriginsfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "GeoOrigin" in data_keys:
            data_keys.remove("GeoOrigin")
            data__GeoOrigin = data["GeoOrigin"]
            validate_x3d_3_0_jsonschema_json___defs_geoorigin(data__GeoOrigin)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'GeoOrigin': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoOrigin'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_extrusion(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@beginCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@crossSection': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'prefixItems': [{'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': {'type': 'number'}}, '@endCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'MFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@scale': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@spine': {'$comment': 'MFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@beginCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@crossSection': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'prefixItems': [{'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': {'type': 'number'}}, '@endCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'MFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@scale': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@spine': {'$comment': 'MFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@beginCap" in data_keys:
                    data_keys.remove("@beginCap")
                    data__beginCap = data["@beginCap"]
                    if not isinstance(data__beginCap, (bool)):
                        raise JsonSchemaValueException("data.@beginCap must be boolean", value=data__beginCap, name="data.@beginCap", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@beginCap"] = True
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "@convex" in data_keys:
                    data_keys.remove("@convex")
                    data__convex = data["@convex"]
                    if not isinstance(data__convex, (bool)):
                        raise JsonSchemaValueException("data.@convex must be boolean", value=data__convex, name="data.@convex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@convex"] = True
                if "@creaseAngle" in data_keys:
                    data_keys.remove("@creaseAngle")
                    data__creaseAngle = data["@creaseAngle"]
                    if not isinstance(data__creaseAngle, (int, float)) or isinstance(data__creaseAngle, bool):
                        raise JsonSchemaValueException("data.@creaseAngle must be number", value=data__creaseAngle, name="data.@creaseAngle", definition={'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@creaseAngle"] = 0
                if "@crossSection" in data_keys:
                    data_keys.remove("@crossSection")
                    data__crossSection = data["@crossSection"]
                    if not isinstance(data__crossSection, (list, tuple)):
                        raise JsonSchemaValueException("data.@crossSection must be array", value=data__crossSection, name="data.@crossSection", definition={'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'prefixItems': [{'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': {'type': 'number'}}, rule='type')
                    data__crossSection_is_list = isinstance(data__crossSection, (list, tuple))
                    if data__crossSection_is_list:
                        data__crossSection_len = len(data__crossSection)
                        if data__crossSection_len < 2:
                            raise JsonSchemaValueException("data.@crossSection must contain at least 2 items", value=data__crossSection, name="data.@crossSection", definition={'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'prefixItems': [{'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': {'type': 'number'}}, rule='minItems')
                        for data__crossSection_x, data__crossSection_item in enumerate(data__crossSection):
                            if not isinstance(data__crossSection_item, (int, float)) or isinstance(data__crossSection_item, bool):
                                raise JsonSchemaValueException(""+"data.@crossSection[{data__crossSection_x}]".format(**locals())+" must be number", value=data__crossSection_item, name=""+"data.@crossSection[{data__crossSection_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@endCap" in data_keys:
                    data_keys.remove("@endCap")
                    data__endCap = data["@endCap"]
                    if not isinstance(data__endCap, (bool)):
                        raise JsonSchemaValueException("data.@endCap must be boolean", value=data__endCap, name="data.@endCap", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@endCap"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@orientation" in data_keys:
                    data_keys.remove("@orientation")
                    data__orientation = data["@orientation"]
                    if not isinstance(data__orientation, (list, tuple)):
                        raise JsonSchemaValueException("data.@orientation must be array", value=data__orientation, name="data.@orientation", definition={'$comment': 'MFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, rule='type')
                    data__orientation_is_list = isinstance(data__orientation, (list, tuple))
                    if data__orientation_is_list:
                        data__orientation_len = len(data__orientation)
                        if data__orientation_len < 4:
                            raise JsonSchemaValueException("data.@orientation must contain at least 4 items", value=data__orientation, name="data.@orientation", definition={'$comment': 'MFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, rule='minItems')
                        for data__orientation_x, data__orientation_item in enumerate(data__orientation):
                            if not isinstance(data__orientation_item, (int, float)) or isinstance(data__orientation_item, bool):
                                raise JsonSchemaValueException(""+"data.@orientation[{data__orientation_x}]".format(**locals())+" must be number", value=data__orientation_item, name=""+"data.@orientation[{data__orientation_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@scale" in data_keys:
                    data_keys.remove("@scale")
                    data__scale = data["@scale"]
                    if not isinstance(data__scale, (list, tuple)):
                        raise JsonSchemaValueException("data.@scale must be array", value=data__scale, name="data.@scale", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'default': 1, 'type': 'number'}}, rule='type')
                    data__scale_is_list = isinstance(data__scale, (list, tuple))
                    if data__scale_is_list:
                        data__scale_len = len(data__scale)
                        if data__scale_len < 2:
                            raise JsonSchemaValueException("data.@scale must contain at least 2 items", value=data__scale, name="data.@scale", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'default': 1, 'type': 'number'}}, rule='minItems')
                        for data__scale_x, data__scale_item in enumerate(data__scale):
                            if not isinstance(data__scale_item, (int, float)) or isinstance(data__scale_item, bool):
                                raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be number", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'type': 'number'}, rule='type')
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "@spine" in data_keys:
                    data_keys.remove("@spine")
                    data__spine = data["@spine"]
                    if not isinstance(data__spine, (list, tuple)):
                        raise JsonSchemaValueException("data.@spine must be array", value=data__spine, name="data.@spine", definition={'$comment': 'MFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, rule='type')
                    data__spine_is_list = isinstance(data__spine, (list, tuple))
                    if data__spine_is_list:
                        data__spine_len = len(data__spine)
                        if data__spine_len < 3:
                            raise JsonSchemaValueException("data.@spine must contain at least 3 items", value=data__spine, name="data.@spine", definition={'$comment': 'MFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, rule='minItems')
                        for data__spine_x, data__spine_item in enumerate(data__spine):
                            if not isinstance(data__spine_item, (int, float)) or isinstance(data__spine_item, bool):
                                raise JsonSchemaValueException(""+"data.@spine[{data__spine_x}]".format(**locals())+" must be number", value=data__spine_item, name=""+"data.@spine[{data__spine_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@beginCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@crossSection': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'prefixItems': [{'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': {'type': 'number'}}, '@endCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'MFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@scale': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@spine': {'$comment': 'MFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@beginCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@crossSection': {'$comment': 'MFVec2f initializeOnly', 'type': 'array', 'minItems': 2, 'prefixItems': [{'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': -1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': {'type': 'number'}}, '@endCap': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'MFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@scale': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@spine': {'$comment': 'MFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_elevationgrid(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "@creaseAngle" in data_keys:
                    data_keys.remove("@creaseAngle")
                    data__creaseAngle = data["@creaseAngle"]
                    if not isinstance(data__creaseAngle, (int, float)) or isinstance(data__creaseAngle, bool):
                        raise JsonSchemaValueException("data.@creaseAngle must be number", value=data__creaseAngle, name="data.@creaseAngle", definition={'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@creaseAngle"] = 0
                if "@height" in data_keys:
                    data_keys.remove("@height")
                    data__height = data["@height"]
                    if not isinstance(data__height, (list, tuple)):
                        raise JsonSchemaValueException("data.@height must be array", value=data__height, name="data.@height", definition={'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__height_is_list = isinstance(data__height, (list, tuple))
                    if data__height_is_list:
                        data__height_len = len(data__height)
                        for data__height_x, data__height_item in enumerate(data__height):
                            if not isinstance(data__height_item, (int, float)) or isinstance(data__height_item, bool):
                                raise JsonSchemaValueException(""+"data.@height[{data__height_x}]".format(**locals())+" must be number", value=data__height_item, name=""+"data.@height[{data__height_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-normal" in data_keys:
                    data_keys.remove("-normal")
                    data__normal = data["-normal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__normal)
                if "@normalPerVertex" in data_keys:
                    data_keys.remove("@normalPerVertex")
                    data__normalPerVertex = data["@normalPerVertex"]
                    if not isinstance(data__normalPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@normalPerVertex must be boolean", value=data__normalPerVertex, name="data.@normalPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@normalPerVertex"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data__texCoord)
                if "@xDimension" in data_keys:
                    data_keys.remove("@xDimension")
                    data__xDimension = data["@xDimension"]
                    if not isinstance(data__xDimension, (int)) and not (isinstance(data__xDimension, float) and data__xDimension.is_integer()) or isinstance(data__xDimension, bool):
                        raise JsonSchemaValueException("data.@xDimension must be integer", value=data__xDimension, name="data.@xDimension", definition={'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@xDimension"] = 2
                if "@xSpacing" in data_keys:
                    data_keys.remove("@xSpacing")
                    data__xSpacing = data["@xSpacing"]
                    if not isinstance(data__xSpacing, (int, float)) or isinstance(data__xSpacing, bool):
                        raise JsonSchemaValueException("data.@xSpacing must be number", value=data__xSpacing, name="data.@xSpacing", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@xSpacing"] = 1
                if "@zDimension" in data_keys:
                    data_keys.remove("@zDimension")
                    data__zDimension = data["@zDimension"]
                    if not isinstance(data__zDimension, (int)) and not (isinstance(data__zDimension, float) and data__zDimension.is_integer()) or isinstance(data__zDimension, bool):
                        raise JsonSchemaValueException("data.@zDimension must be integer", value=data__zDimension, name="data.@zDimension", definition={'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@zDimension"] = 2
                if "@zSpacing" in data_keys:
                    data_keys.remove("@zSpacing")
                    data__zSpacing = data["@zSpacing"]
                    if not isinstance(data__zSpacing, (int, float)) or isinstance(data__zSpacing, bool):
                        raise JsonSchemaValueException("data.@zSpacing must be number", value=data__zSpacing, name="data.@zSpacing", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@zSpacing"] = 1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@xDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@xSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@zDimension': {'default': 2, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@zSpacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_disk2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@innerRadius': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@outerRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@innerRadius': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@outerRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@innerRadius" in data_keys:
                    data_keys.remove("@innerRadius")
                    data__innerRadius = data["@innerRadius"]
                    if not isinstance(data__innerRadius, (int, float)) or isinstance(data__innerRadius, bool):
                        raise JsonSchemaValueException("data.@innerRadius must be number", value=data__innerRadius, name="data.@innerRadius", definition={'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@innerRadius"] = 0
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@outerRadius" in data_keys:
                    data_keys.remove("@outerRadius")
                    data__outerRadius = data["@outerRadius"]
                    if not isinstance(data__outerRadius, (int, float)) or isinstance(data__outerRadius, bool):
                        raise JsonSchemaValueException("data.@outerRadius must be number", value=data__outerRadius, name="data.@outerRadius", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@outerRadius"] = 1
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = False
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@innerRadius': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@outerRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@innerRadius': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@outerRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_cylinder(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@top': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@top': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bottom" in data_keys:
                    data_keys.remove("@bottom")
                    data__bottom = data["@bottom"]
                    if not isinstance(data__bottom, (bool)):
                        raise JsonSchemaValueException("data.@bottom must be boolean", value=data__bottom, name="data.@bottom", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@bottom"] = True
                if "@height" in data_keys:
                    data_keys.remove("@height")
                    data__height = data["@height"]
                    if not isinstance(data__height, (int, float)) or isinstance(data__height, bool):
                        raise JsonSchemaValueException("data.@height must be number", value=data__height, name="data.@height", definition={'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@height"] = 2
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@radius" in data_keys:
                    data_keys.remove("@radius")
                    data__radius = data["@radius"]
                    if not isinstance(data__radius, (int, float)) or isinstance(data__radius, bool):
                        raise JsonSchemaValueException("data.@radius must be number", value=data__radius, name="data.@radius", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@radius"] = 1
                if "@side" in data_keys:
                    data_keys.remove("@side")
                    data__side = data["@side"]
                    if not isinstance(data__side, (bool)):
                        raise JsonSchemaValueException("data.@side must be boolean", value=data__side, name="data.@side", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@side"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "@top" in data_keys:
                    data_keys.remove("@top")
                    data__top = data["@top"]
                    if not isinstance(data__top, (bool)):
                        raise JsonSchemaValueException("data.@top must be boolean", value=data__top, name="data.@top", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@top"] = True
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@top': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@top': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_cone(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@bottomRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@bottomRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bottom" in data_keys:
                    data_keys.remove("@bottom")
                    data__bottom = data["@bottom"]
                    if not isinstance(data__bottom, (bool)):
                        raise JsonSchemaValueException("data.@bottom must be boolean", value=data__bottom, name="data.@bottom", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@bottom"] = True
                if "@bottomRadius" in data_keys:
                    data_keys.remove("@bottomRadius")
                    data__bottomRadius = data["@bottomRadius"]
                    if not isinstance(data__bottomRadius, (int, float)) or isinstance(data__bottomRadius, bool):
                        raise JsonSchemaValueException("data.@bottomRadius must be number", value=data__bottomRadius, name="data.@bottomRadius", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@bottomRadius"] = 1
                if "@height" in data_keys:
                    data_keys.remove("@height")
                    data__height = data["@height"]
                    if not isinstance(data__height, (int, float)) or isinstance(data__height, bool):
                        raise JsonSchemaValueException("data.@height must be number", value=data__height, name="data.@height", definition={'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@height"] = 2
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@side" in data_keys:
                    data_keys.remove("@side")
                    data__side = data["@side"]
                    if not isinstance(data__side, (bool)):
                        raise JsonSchemaValueException("data.@side must be boolean", value=data__side, name="data.@side", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@side"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@bottomRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bottom': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@bottomRadius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@height': {'default': 2, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@side': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_circle2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@radius" in data_keys:
                    data_keys.remove("@radius")
                    data__radius = data["@radius"]
                    if not isinstance(data__radius, (int, float)) or isinstance(data__radius, bool):
                        raise JsonSchemaValueException("data.@radius must be number", value=data__radius, name="data.@radius", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@radius"] = 1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_box(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@size" in data_keys:
                    data_keys.remove("@size")
                    data__size = data["@size"]
                    if not isinstance(data__size, (list, tuple)):
                        raise JsonSchemaValueException("data.@size must be array", value=data__size, name="data.@size", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, rule='type')
                    data__size_is_list = isinstance(data__size, (list, tuple))
                    if data__size_is_list:
                        data__size_len = len(data__size)
                        if data__size_len < 3:
                            raise JsonSchemaValueException("data.@size must contain at least 3 items", value=data__size, name="data.@size", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, rule='minItems')
                        if data__size_len > 3:
                            raise JsonSchemaValueException("data.@size must contain less than or equal to 3 items", value=data__size, name="data.@size", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, rule='maxItems')
                        for data__size_x, data__size_item in enumerate(data__size):
                            if not isinstance(data__size_item, (int, float)) or isinstance(data__size_item, bool):
                                raise JsonSchemaValueException(""+"data.@size[{data__size_x}]".format(**locals())+" must be number", value=data__size_item, name=""+"data.@size[{data__size_x}]".format(**locals())+"", definition={'default': 2, 'type': 'number'}, rule='type')
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 2, 'type': 'number'}}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_arcclose2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closureType': {'enum': ['PIE', 'CHORD'], 'default': 'PIE', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closureType': {'enum': ['PIE', 'CHORD'], 'default': 'PIE', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@closureType" in data_keys:
                    data_keys.remove("@closureType")
                    data__closureType = data["@closureType"]
                    if not isinstance(data__closureType, (str)):
                        raise JsonSchemaValueException("data.@closureType must be string", value=data__closureType, name="data.@closureType", definition={'enum': ['PIE', 'CHORD'], 'default': 'PIE', '$comment': 'SFString initializeOnly', 'type': 'string'}, rule='type')
                    if data__closureType not in ['PIE', 'CHORD']:
                        raise JsonSchemaValueException("data.@closureType must be one of ['PIE', 'CHORD']", value=data__closureType, name="data.@closureType", definition={'enum': ['PIE', 'CHORD'], 'default': 'PIE', '$comment': 'SFString initializeOnly', 'type': 'string'}, rule='enum')
                else: data["@closureType"] = 'PIE'
                if "@endAngle" in data_keys:
                    data_keys.remove("@endAngle")
                    data__endAngle = data["@endAngle"]
                    if not isinstance(data__endAngle, (int, float)) or isinstance(data__endAngle, bool):
                        raise JsonSchemaValueException("data.@endAngle must be number", value=data__endAngle, name="data.@endAngle", definition={'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@endAngle"] = 1.570796
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@radius" in data_keys:
                    data_keys.remove("@radius")
                    data__radius = data["@radius"]
                    if not isinstance(data__radius, (int, float)) or isinstance(data__radius, bool):
                        raise JsonSchemaValueException("data.@radius must be number", value=data__radius, name="data.@radius", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@radius"] = 1
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = False
                if "@startAngle" in data_keys:
                    data_keys.remove("@startAngle")
                    data__startAngle = data["@startAngle"]
                    if not isinstance(data__startAngle, (int, float)) or isinstance(data__startAngle, bool):
                        raise JsonSchemaValueException("data.@startAngle must be number", value=data__startAngle, name="data.@startAngle", definition={'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@startAngle"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closureType': {'enum': ['PIE', 'CHORD'], 'default': 'PIE', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closureType': {'enum': ['PIE', 'CHORD'], 'default': 'PIE', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@solid': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_arc2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@endAngle" in data_keys:
                    data_keys.remove("@endAngle")
                    data__endAngle = data["@endAngle"]
                    if not isinstance(data__endAngle, (int, float)) or isinstance(data__endAngle, bool):
                        raise JsonSchemaValueException("data.@endAngle must be number", value=data__endAngle, name="data.@endAngle", definition={'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@endAngle"] = 1.570796
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@radius" in data_keys:
                    data_keys.remove("@radius")
                    data__radius = data["@radius"]
                    if not isinstance(data__radius, (int, float)) or isinstance(data__radius, bool):
                        raise JsonSchemaValueException("data.@radius must be number", value=data__radius, name="data.@radius", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@radius"] = 1
                if "@startAngle" in data_keys:
                    data_keys.remove("@startAngle")
                    data__startAngle = data["@startAngle"]
                    if not isinstance(data__startAngle, (int, float)) or isinstance(data__startAngle, bool):
                        raise JsonSchemaValueException("data.@startAngle must be number", value=data__startAngle, name="data.@startAngle", definition={'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@startAngle"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@endAngle': {'default': 1.570796, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@radius': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@startAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbsswungsurface(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-profileCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-profileCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-profileCurve" in data_keys:
                    data_keys.remove("-profileCurve")
                    data__profileCurve = data["-profileCurve"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnurbscontrolcurvenodesfnode(data__profileCurve)
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-trajectoryCurve" in data_keys:
                    data_keys.remove("-trajectoryCurve")
                    data__trajectoryCurve = data["-trajectoryCurve"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnurbscontrolcurvenodesfnode(data__trajectoryCurve)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-profileCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-profileCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dnurbscontrolcurvenodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "ContourPolyline2D" in data_keys:
            data_keys.remove("ContourPolyline2D")
            data__ContourPolyline2D = data["ContourPolyline2D"]
            validate_x3d_3_0_jsonschema_json___defs_contourpolyline2d(data__ContourPolyline2D)
        if "NurbsCurve2D" in data_keys:
            data_keys.remove("NurbsCurve2D")
            data__NurbsCurve2D = data["NurbsCurve2D"]
            validate_x3d_3_0_jsonschema_json___defs_nurbscurve2d(data__NurbsCurve2D)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'ContourPolyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ContourPolyline2D'}, 'NurbsCurve2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbssweptsurface(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-crossSectionCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-NurbsCurveSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-crossSectionCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-NurbsCurveSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-crossSectionCurve" in data_keys:
                    data_keys.remove("-crossSectionCurve")
                    data__crossSectionCurve = data["-crossSectionCurve"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnurbscontrolcurvenodesfnode(data__crossSectionCurve)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-trajectoryCurve" in data_keys:
                    data_keys.remove("-trajectoryCurve")
                    data__trajectoryCurve = data["-trajectoryCurve"]
                    validate_x3d_3_0_jsonschema_json___defs__nurbscurvesfnode(data__trajectoryCurve)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-crossSectionCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-NurbsCurveSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-crossSectionCurve': {'$ref': '#/$defs/-X3DNurbsControlCurveNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-trajectoryCurve': {'$ref': '#/$defs/-NurbsCurveSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__nurbscurvesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "NurbsCurve" in data_keys:
            data_keys.remove("NurbsCurve")
            data__NurbsCurve = data["NurbsCurve"]
            validate_x3d_3_0_jsonschema_json___defs_nurbscurve(data__NurbsCurve)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbscurve(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@closed" in data_keys:
                    data_keys.remove("@closed")
                    data__closed = data["@closed"]
                    if not isinstance(data__closed, (bool)):
                        raise JsonSchemaValueException("data.@closed must be boolean", value=data__closed, name="data.@closed", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@closed"] = False
                if "-controlPoint" in data_keys:
                    data_keys.remove("-controlPoint")
                    data__controlPoint = data["-controlPoint"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__controlPoint)
                if "@knot" in data_keys:
                    data_keys.remove("@knot")
                    data__knot = data["@knot"]
                    if not isinstance(data__knot, (list, tuple)):
                        raise JsonSchemaValueException("data.@knot must be array", value=data__knot, name="data.@knot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__knot_is_list = isinstance(data__knot, (list, tuple))
                    if data__knot_is_list:
                        data__knot_len = len(data__knot)
                        for data__knot_x, data__knot_item in enumerate(data__knot):
                            if not isinstance(data__knot_item, (int, float)) or isinstance(data__knot_item, bool):
                                raise JsonSchemaValueException(""+"data.@knot[{data__knot_x}]".format(**locals())+" must be number", value=data__knot_item, name=""+"data.@knot[{data__knot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@order" in data_keys:
                    data_keys.remove("@order")
                    data__order = data["@order"]
                    if not isinstance(data__order, (int)) and not (isinstance(data__order, float) and data__order.is_integer()) or isinstance(data__order, bool):
                        raise JsonSchemaValueException("data.@order must be integer", value=data__order, name="data.@order", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@order"] = 3
                if "@tessellation" in data_keys:
                    data_keys.remove("@tessellation")
                    data__tessellation = data["@tessellation"]
                    if not isinstance(data__tessellation, (int)) and not (isinstance(data__tessellation, float) and data__tessellation.is_integer()) or isinstance(data__tessellation, bool):
                        raise JsonSchemaValueException("data.@tessellation must be integer", value=data__tessellation, name="data.@tessellation", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@tessellation"] = 0
                if "@weight" in data_keys:
                    data_keys.remove("@weight")
                    data__weight = data["@weight"]
                    if not isinstance(data__weight, (list, tuple)):
                        raise JsonSchemaValueException("data.@weight must be array", value=data__weight, name="data.@weight", definition={'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, rule='type')
                    data__weight_is_list = isinstance(data__weight, (list, tuple))
                    if data__weight_is_list:
                        data__weight_len = len(data__weight)
                        for data__weight_x, data__weight_item in enumerate(data__weight):
                            if not isinstance(data__weight_item, (int, float)) or isinstance(data__weight_item, bool):
                                raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be number", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__weight_item, (int, float)):
                                if data__weight_item <= 0:
                                    raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be bigger than 0", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='exclusiveMinimum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@closed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@tessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbstrimmedsurface(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '-trimmingContour': {'$ref': '#/$defs/-Contour2DMFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '-trimmingContour': {'$ref': '#/$defs/-Contour2DMFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-controlPoint" in data_keys:
                    data_keys.remove("-controlPoint")
                    data__controlPoint = data["-controlPoint"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__controlPoint)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenode_nurbstexturecoordinatesfnode(data__texCoord)
                if "-trimmingContour" in data_keys:
                    data_keys.remove("-trimmingContour")
                    data__trimmingContour = data["-trimmingContour"]
                    validate_x3d_3_0_jsonschema_json___defs__contour2dmfnode(data__trimmingContour)
                if "@uClosed" in data_keys:
                    data_keys.remove("@uClosed")
                    data__uClosed = data["@uClosed"]
                    if not isinstance(data__uClosed, (bool)):
                        raise JsonSchemaValueException("data.@uClosed must be boolean", value=data__uClosed, name="data.@uClosed", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@uClosed"] = False
                if "@uDimension" in data_keys:
                    data_keys.remove("@uDimension")
                    data__uDimension = data["@uDimension"]
                    if not isinstance(data__uDimension, (int)) and not (isinstance(data__uDimension, float) and data__uDimension.is_integer()) or isinstance(data__uDimension, bool):
                        raise JsonSchemaValueException("data.@uDimension must be integer", value=data__uDimension, name="data.@uDimension", definition={'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@uDimension"] = 0
                if "@uKnot" in data_keys:
                    data_keys.remove("@uKnot")
                    data__uKnot = data["@uKnot"]
                    if not isinstance(data__uKnot, (list, tuple)):
                        raise JsonSchemaValueException("data.@uKnot must be array", value=data__uKnot, name="data.@uKnot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__uKnot_is_list = isinstance(data__uKnot, (list, tuple))
                    if data__uKnot_is_list:
                        data__uKnot_len = len(data__uKnot)
                        for data__uKnot_x, data__uKnot_item in enumerate(data__uKnot):
                            if not isinstance(data__uKnot_item, (int, float)) or isinstance(data__uKnot_item, bool):
                                raise JsonSchemaValueException(""+"data.@uKnot[{data__uKnot_x}]".format(**locals())+" must be number", value=data__uKnot_item, name=""+"data.@uKnot[{data__uKnot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@uOrder" in data_keys:
                    data_keys.remove("@uOrder")
                    data__uOrder = data["@uOrder"]
                    if not isinstance(data__uOrder, (int)) and not (isinstance(data__uOrder, float) and data__uOrder.is_integer()) or isinstance(data__uOrder, bool):
                        raise JsonSchemaValueException("data.@uOrder must be integer", value=data__uOrder, name="data.@uOrder", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@uOrder"] = 3
                if "@uTessellation" in data_keys:
                    data_keys.remove("@uTessellation")
                    data__uTessellation = data["@uTessellation"]
                    if not isinstance(data__uTessellation, (int)) and not (isinstance(data__uTessellation, float) and data__uTessellation.is_integer()) or isinstance(data__uTessellation, bool):
                        raise JsonSchemaValueException("data.@uTessellation must be integer", value=data__uTessellation, name="data.@uTessellation", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@uTessellation"] = 0
                if "@vClosed" in data_keys:
                    data_keys.remove("@vClosed")
                    data__vClosed = data["@vClosed"]
                    if not isinstance(data__vClosed, (bool)):
                        raise JsonSchemaValueException("data.@vClosed must be boolean", value=data__vClosed, name="data.@vClosed", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@vClosed"] = False
                if "@vDimension" in data_keys:
                    data_keys.remove("@vDimension")
                    data__vDimension = data["@vDimension"]
                    if not isinstance(data__vDimension, (int)) and not (isinstance(data__vDimension, float) and data__vDimension.is_integer()) or isinstance(data__vDimension, bool):
                        raise JsonSchemaValueException("data.@vDimension must be integer", value=data__vDimension, name="data.@vDimension", definition={'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@vDimension"] = 0
                if "@vKnot" in data_keys:
                    data_keys.remove("@vKnot")
                    data__vKnot = data["@vKnot"]
                    if not isinstance(data__vKnot, (list, tuple)):
                        raise JsonSchemaValueException("data.@vKnot must be array", value=data__vKnot, name="data.@vKnot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__vKnot_is_list = isinstance(data__vKnot, (list, tuple))
                    if data__vKnot_is_list:
                        data__vKnot_len = len(data__vKnot)
                        for data__vKnot_x, data__vKnot_item in enumerate(data__vKnot):
                            if not isinstance(data__vKnot_item, (int, float)) or isinstance(data__vKnot_item, bool):
                                raise JsonSchemaValueException(""+"data.@vKnot[{data__vKnot_x}]".format(**locals())+" must be number", value=data__vKnot_item, name=""+"data.@vKnot[{data__vKnot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@vOrder" in data_keys:
                    data_keys.remove("@vOrder")
                    data__vOrder = data["@vOrder"]
                    if not isinstance(data__vOrder, (int)) and not (isinstance(data__vOrder, float) and data__vOrder.is_integer()) or isinstance(data__vOrder, bool):
                        raise JsonSchemaValueException("data.@vOrder must be integer", value=data__vOrder, name="data.@vOrder", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@vOrder"] = 3
                if "@vTessellation" in data_keys:
                    data_keys.remove("@vTessellation")
                    data__vTessellation = data["@vTessellation"]
                    if not isinstance(data__vTessellation, (int)) and not (isinstance(data__vTessellation, float) and data__vTessellation.is_integer()) or isinstance(data__vTessellation, bool):
                        raise JsonSchemaValueException("data.@vTessellation must be integer", value=data__vTessellation, name="data.@vTessellation", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@vTessellation"] = 0
                if "@weight" in data_keys:
                    data_keys.remove("@weight")
                    data__weight = data["@weight"]
                    if not isinstance(data__weight, (list, tuple)):
                        raise JsonSchemaValueException("data.@weight must be array", value=data__weight, name="data.@weight", definition={'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, rule='type')
                    data__weight_is_list = isinstance(data__weight, (list, tuple))
                    if data__weight_is_list:
                        data__weight_len = len(data__weight)
                        for data__weight_x, data__weight_item in enumerate(data__weight):
                            if not isinstance(data__weight_item, (int, float)) or isinstance(data__weight_item, bool):
                                raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be number", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__weight_item, (int, float)):
                                if data__weight_item <= 0:
                                    raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be bigger than 0", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='exclusiveMinimum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '-trimmingContour': {'$ref': '#/$defs/-Contour2DMFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '-trimmingContour': {'$ref': '#/$defs/-Contour2DMFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__contour2dmfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "Contour2D" in data_item_keys:
                    data_item_keys.remove("Contour2D")
                    data_item__Contour2D = data_item["Contour2D"]
                    validate_x3d_3_0_jsonschema_json___defs_contour2d(data_item__Contour2D)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Contour2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Contour2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenode_nurbstexturecoordinatesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "MultiTextureCoordinate" in data_keys:
            data_keys.remove("MultiTextureCoordinate")
            data__MultiTextureCoordinate = data["MultiTextureCoordinate"]
            validate_x3d_3_0_jsonschema_json___defs_multitexturecoordinate(data__MultiTextureCoordinate)
        if "TextureCoordinate" in data_keys:
            data_keys.remove("TextureCoordinate")
            data__TextureCoordinate = data["TextureCoordinate"]
            validate_x3d_3_0_jsonschema_json___defs_texturecoordinate(data__TextureCoordinate)
        if "TextureCoordinateGenerator" in data_keys:
            data_keys.remove("TextureCoordinateGenerator")
            data__TextureCoordinateGenerator = data["TextureCoordinateGenerator"]
            validate_x3d_3_0_jsonschema_json___defs_texturecoordinategenerator(data__TextureCoordinateGenerator)
        if "NurbsTextureCoordinate" in data_keys:
            data_keys.remove("NurbsTextureCoordinate")
            data__NurbsTextureCoordinate = data["NurbsTextureCoordinate"]
            validate_x3d_3_0_jsonschema_json___defs_nurbstexturecoordinate(data__NurbsTextureCoordinate)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'NurbsTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTextureCoordinate'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbspatchsurface(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-controlPoint" in data_keys:
                    data_keys.remove("-controlPoint")
                    data__controlPoint = data["-controlPoint"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__controlPoint)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenode_nurbstexturecoordinatesfnode(data__texCoord)
                if "@uClosed" in data_keys:
                    data_keys.remove("@uClosed")
                    data__uClosed = data["@uClosed"]
                    if not isinstance(data__uClosed, (bool)):
                        raise JsonSchemaValueException("data.@uClosed must be boolean", value=data__uClosed, name="data.@uClosed", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@uClosed"] = False
                if "@uDimension" in data_keys:
                    data_keys.remove("@uDimension")
                    data__uDimension = data["@uDimension"]
                    if not isinstance(data__uDimension, (int)) and not (isinstance(data__uDimension, float) and data__uDimension.is_integer()) or isinstance(data__uDimension, bool):
                        raise JsonSchemaValueException("data.@uDimension must be integer", value=data__uDimension, name="data.@uDimension", definition={'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@uDimension"] = 0
                if "@uKnot" in data_keys:
                    data_keys.remove("@uKnot")
                    data__uKnot = data["@uKnot"]
                    if not isinstance(data__uKnot, (list, tuple)):
                        raise JsonSchemaValueException("data.@uKnot must be array", value=data__uKnot, name="data.@uKnot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__uKnot_is_list = isinstance(data__uKnot, (list, tuple))
                    if data__uKnot_is_list:
                        data__uKnot_len = len(data__uKnot)
                        for data__uKnot_x, data__uKnot_item in enumerate(data__uKnot):
                            if not isinstance(data__uKnot_item, (int, float)) or isinstance(data__uKnot_item, bool):
                                raise JsonSchemaValueException(""+"data.@uKnot[{data__uKnot_x}]".format(**locals())+" must be number", value=data__uKnot_item, name=""+"data.@uKnot[{data__uKnot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@uOrder" in data_keys:
                    data_keys.remove("@uOrder")
                    data__uOrder = data["@uOrder"]
                    if not isinstance(data__uOrder, (int)) and not (isinstance(data__uOrder, float) and data__uOrder.is_integer()) or isinstance(data__uOrder, bool):
                        raise JsonSchemaValueException("data.@uOrder must be integer", value=data__uOrder, name="data.@uOrder", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@uOrder"] = 3
                if "@uTessellation" in data_keys:
                    data_keys.remove("@uTessellation")
                    data__uTessellation = data["@uTessellation"]
                    if not isinstance(data__uTessellation, (int)) and not (isinstance(data__uTessellation, float) and data__uTessellation.is_integer()) or isinstance(data__uTessellation, bool):
                        raise JsonSchemaValueException("data.@uTessellation must be integer", value=data__uTessellation, name="data.@uTessellation", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@uTessellation"] = 0
                if "@vClosed" in data_keys:
                    data_keys.remove("@vClosed")
                    data__vClosed = data["@vClosed"]
                    if not isinstance(data__vClosed, (bool)):
                        raise JsonSchemaValueException("data.@vClosed must be boolean", value=data__vClosed, name="data.@vClosed", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@vClosed"] = False
                if "@vDimension" in data_keys:
                    data_keys.remove("@vDimension")
                    data__vDimension = data["@vDimension"]
                    if not isinstance(data__vDimension, (int)) and not (isinstance(data__vDimension, float) and data__vDimension.is_integer()) or isinstance(data__vDimension, bool):
                        raise JsonSchemaValueException("data.@vDimension must be integer", value=data__vDimension, name="data.@vDimension", definition={'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@vDimension"] = 0
                if "@vKnot" in data_keys:
                    data_keys.remove("@vKnot")
                    data__vKnot = data["@vKnot"]
                    if not isinstance(data__vKnot, (list, tuple)):
                        raise JsonSchemaValueException("data.@vKnot must be array", value=data__vKnot, name="data.@vKnot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__vKnot_is_list = isinstance(data__vKnot, (list, tuple))
                    if data__vKnot_is_list:
                        data__vKnot_len = len(data__vKnot)
                        for data__vKnot_x, data__vKnot_item in enumerate(data__vKnot):
                            if not isinstance(data__vKnot_item, (int, float)) or isinstance(data__vKnot_item, bool):
                                raise JsonSchemaValueException(""+"data.@vKnot[{data__vKnot_x}]".format(**locals())+" must be number", value=data__vKnot_item, name=""+"data.@vKnot[{data__vKnot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@vOrder" in data_keys:
                    data_keys.remove("@vOrder")
                    data__vOrder = data["@vOrder"]
                    if not isinstance(data__vOrder, (int)) and not (isinstance(data__vOrder, float) and data__vOrder.is_integer()) or isinstance(data__vOrder, bool):
                        raise JsonSchemaValueException("data.@vOrder must be integer", value=data__vOrder, name="data.@vOrder", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@vOrder"] = 3
                if "@vTessellation" in data_keys:
                    data_keys.remove("@vTessellation")
                    data__vTessellation = data["@vTessellation"]
                    if not isinstance(data__vTessellation, (int)) and not (isinstance(data__vTessellation, float) and data__vTessellation.is_integer()) or isinstance(data__vTessellation, bool):
                        raise JsonSchemaValueException("data.@vTessellation must be integer", value=data__vTessellation, name="data.@vTessellation", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@vTessellation"] = 0
                if "@weight" in data_keys:
                    data_keys.remove("@weight")
                    data__weight = data["@weight"]
                    if not isinstance(data__weight, (list, tuple)):
                        raise JsonSchemaValueException("data.@weight must be array", value=data__weight, name="data.@weight", definition={'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, rule='type')
                    data__weight_is_list = isinstance(data__weight, (list, tuple))
                    if data__weight_is_list:
                        data__weight_len = len(data__weight)
                        for data__weight_x, data__weight_item in enumerate(data__weight):
                            if not isinstance(data__weight_item, (int, float)) or isinstance(data__weight_item, bool):
                                raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be number", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__weight_item, (int, float)):
                                if data__weight_item <= 0:
                                    raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be bigger than 0", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'exclusiveMinimum': 0, 'type': 'number'}, rule='exclusiveMinimum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNode-NurbsTextureCoordinateSFNode'}, '@uClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@vClosed': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vTessellation': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'exclusiveMinimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_trianglestripset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@stripCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@stripCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-normal" in data_keys:
                    data_keys.remove("-normal")
                    data__normal = data["-normal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__normal)
                if "@normalPerVertex" in data_keys:
                    data_keys.remove("@normalPerVertex")
                    data__normalPerVertex = data["@normalPerVertex"]
                    if not isinstance(data__normalPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@normalPerVertex must be boolean", value=data__normalPerVertex, name="data.@normalPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@normalPerVertex"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "@stripCount" in data_keys:
                    data_keys.remove("@stripCount")
                    data__stripCount = data["@stripCount"]
                    if not isinstance(data__stripCount, (list, tuple)):
                        raise JsonSchemaValueException("data.@stripCount must be array", value=data__stripCount, name="data.@stripCount", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, rule='type')
                    data__stripCount_is_list = isinstance(data__stripCount, (list, tuple))
                    if data__stripCount_is_list:
                        data__stripCount_len = len(data__stripCount)
                        for data__stripCount_x, data__stripCount_item in enumerate(data__stripCount):
                            if not isinstance(data__stripCount_item, (int)) and not (isinstance(data__stripCount_item, float) and data__stripCount_item.is_integer()) or isinstance(data__stripCount_item, bool):
                                raise JsonSchemaValueException(""+"data.@stripCount[{data__stripCount_x}]".format(**locals())+" must be integer", value=data__stripCount_item, name=""+"data.@stripCount[{data__stripCount_x}]".format(**locals())+"", definition={'minimum': 3, 'type': 'integer'}, rule='type')
                            if isinstance(data__stripCount_item, (int, float)):
                                if data__stripCount_item < 3:
                                    raise JsonSchemaValueException(""+"data.@stripCount[{data__stripCount_x}]".format(**locals())+" must be bigger than or equal to 3", value=data__stripCount_item, name=""+"data.@stripCount[{data__stripCount_x}]".format(**locals())+"", definition={'minimum': 3, 'type': 'integer'}, rule='minimum')
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data__texCoord)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@stripCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@stripCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_triangleset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-normal" in data_keys:
                    data_keys.remove("-normal")
                    data__normal = data["-normal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__normal)
                if "@normalPerVertex" in data_keys:
                    data_keys.remove("@normalPerVertex")
                    data__normalPerVertex = data["@normalPerVertex"]
                    if not isinstance(data__normalPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@normalPerVertex must be boolean", value=data__normalPerVertex, name="data.@normalPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@normalPerVertex"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data__texCoord)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_trianglefanset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@fanCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@fanCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "@fanCount" in data_keys:
                    data_keys.remove("@fanCount")
                    data__fanCount = data["@fanCount"]
                    if not isinstance(data__fanCount, (list, tuple)):
                        raise JsonSchemaValueException("data.@fanCount must be array", value=data__fanCount, name="data.@fanCount", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, rule='type')
                    data__fanCount_is_list = isinstance(data__fanCount, (list, tuple))
                    if data__fanCount_is_list:
                        data__fanCount_len = len(data__fanCount)
                        for data__fanCount_x, data__fanCount_item in enumerate(data__fanCount):
                            if not isinstance(data__fanCount_item, (int)) and not (isinstance(data__fanCount_item, float) and data__fanCount_item.is_integer()) or isinstance(data__fanCount_item, bool):
                                raise JsonSchemaValueException(""+"data.@fanCount[{data__fanCount_x}]".format(**locals())+" must be integer", value=data__fanCount_item, name=""+"data.@fanCount[{data__fanCount_x}]".format(**locals())+"", definition={'minimum': 3, 'type': 'integer'}, rule='type')
                            if isinstance(data__fanCount_item, (int, float)):
                                if data__fanCount_item < 3:
                                    raise JsonSchemaValueException(""+"data.@fanCount[{data__fanCount_x}]".format(**locals())+" must be bigger than or equal to 3", value=data__fanCount_item, name=""+"data.@fanCount[{data__fanCount_x}]".format(**locals())+"", definition={'minimum': 3, 'type': 'integer'}, rule='minimum')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-normal" in data_keys:
                    data_keys.remove("-normal")
                    data__normal = data["-normal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__normal)
                if "@normalPerVertex" in data_keys:
                    data_keys.remove("@normalPerVertex")
                    data__normalPerVertex = data["@normalPerVertex"]
                    if not isinstance(data__normalPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@normalPerVertex must be boolean", value=data__normalPerVertex, name="data.@normalPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@normalPerVertex"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data__texCoord)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@fanCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@fanCount': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 3, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_indexedtrianglestripset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "@index" in data_keys:
                    data_keys.remove("@index")
                    data__index = data["@index"]
                    if not isinstance(data__index, (list, tuple)):
                        raise JsonSchemaValueException("data.@index must be array", value=data__index, name="data.@index", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, rule='type')
                    data__index_is_list = isinstance(data__index, (list, tuple))
                    if data__index_is_list:
                        data__index_len = len(data__index)
                        for data__index_x, data__index_item in enumerate(data__index):
                            if not isinstance(data__index_item, (int)) and not (isinstance(data__index_item, float) and data__index_item.is_integer()) or isinstance(data__index_item, bool):
                                raise JsonSchemaValueException(""+"data.@index[{data__index_x}]".format(**locals())+" must be integer", value=data__index_item, name=""+"data.@index[{data__index_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='type')
                            if isinstance(data__index_item, (int, float)):
                                if data__index_item < -1:
                                    raise JsonSchemaValueException(""+"data.@index[{data__index_x}]".format(**locals())+" must be bigger than or equal to -1", value=data__index_item, name=""+"data.@index[{data__index_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='minimum')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-normal" in data_keys:
                    data_keys.remove("-normal")
                    data__normal = data["-normal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__normal)
                if "@normalPerVertex" in data_keys:
                    data_keys.remove("@normalPerVertex")
                    data__normalPerVertex = data["@normalPerVertex"]
                    if not isinstance(data__normalPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@normalPerVertex must be boolean", value=data__normalPerVertex, name="data.@normalPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@normalPerVertex"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data__texCoord)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_indexedtriangleset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "@index" in data_keys:
                    data_keys.remove("@index")
                    data__index = data["@index"]
                    if not isinstance(data__index, (list, tuple)):
                        raise JsonSchemaValueException("data.@index must be array", value=data__index, name="data.@index", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, rule='type')
                    data__index_is_list = isinstance(data__index, (list, tuple))
                    if data__index_is_list:
                        data__index_len = len(data__index)
                        for data__index_x, data__index_item in enumerate(data__index):
                            if not isinstance(data__index_item, (int)) and not (isinstance(data__index_item, float) and data__index_item.is_integer()) or isinstance(data__index_item, bool):
                                raise JsonSchemaValueException(""+"data.@index[{data__index_x}]".format(**locals())+" must be integer", value=data__index_item, name=""+"data.@index[{data__index_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'integer'}, rule='type')
                            if isinstance(data__index_item, (int, float)):
                                if data__index_item < 0:
                                    raise JsonSchemaValueException(""+"data.@index[{data__index_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__index_item, name=""+"data.@index[{data__index_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'integer'}, rule='minimum')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-normal" in data_keys:
                    data_keys.remove("-normal")
                    data__normal = data["-normal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__normal)
                if "@normalPerVertex" in data_keys:
                    data_keys.remove("@normalPerVertex")
                    data__normalPerVertex = data["@normalPerVertex"]
                    if not isinstance(data__normalPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@normalPerVertex must be boolean", value=data__normalPerVertex, name="data.@normalPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@normalPerVertex"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data__texCoord)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_indexedtrianglefanset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "@index" in data_keys:
                    data_keys.remove("@index")
                    data__index = data["@index"]
                    if not isinstance(data__index, (list, tuple)):
                        raise JsonSchemaValueException("data.@index must be array", value=data__index, name="data.@index", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, rule='type')
                    data__index_is_list = isinstance(data__index, (list, tuple))
                    if data__index_is_list:
                        data__index_len = len(data__index)
                        for data__index_x, data__index_item in enumerate(data__index):
                            if not isinstance(data__index_item, (int)) and not (isinstance(data__index_item, float) and data__index_item.is_integer()) or isinstance(data__index_item, bool):
                                raise JsonSchemaValueException(""+"data.@index[{data__index_x}]".format(**locals())+" must be integer", value=data__index_item, name=""+"data.@index[{data__index_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='type')
                            if isinstance(data__index_item, (int, float)):
                                if data__index_item < -1:
                                    raise JsonSchemaValueException(""+"data.@index[{data__index_x}]".format(**locals())+" must be bigger than or equal to -1", value=data__index_item, name=""+"data.@index[{data__index_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='minimum')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-normal" in data_keys:
                    data_keys.remove("-normal")
                    data__normal = data["-normal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__normal)
                if "@normalPerVertex" in data_keys:
                    data_keys.remove("@normalPerVertex")
                    data__normalPerVertex = data["@normalPerVertex"]
                    if not isinstance(data__normalPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@normalPerVertex must be boolean", value=data__normalPerVertex, name="data.@normalPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@normalPerVertex"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data__texCoord)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@index': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_indexedfaceset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@texCoordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@texCoordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ccw" in data_keys:
                    data_keys.remove("@ccw")
                    data__ccw = data["@ccw"]
                    if not isinstance(data__ccw, (bool)):
                        raise JsonSchemaValueException("data.@ccw must be boolean", value=data__ccw, name="data.@ccw", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@ccw"] = True
                if "-color" in data_keys:
                    data_keys.remove("-color")
                    data__color = data["-color"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcolornodesfnode(data__color)
                if "@colorIndex" in data_keys:
                    data_keys.remove("@colorIndex")
                    data__colorIndex = data["@colorIndex"]
                    if not isinstance(data__colorIndex, (list, tuple)):
                        raise JsonSchemaValueException("data.@colorIndex must be array", value=data__colorIndex, name="data.@colorIndex", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, rule='type')
                    data__colorIndex_is_list = isinstance(data__colorIndex, (list, tuple))
                    if data__colorIndex_is_list:
                        data__colorIndex_len = len(data__colorIndex)
                        for data__colorIndex_x, data__colorIndex_item in enumerate(data__colorIndex):
                            if not isinstance(data__colorIndex_item, (int)) and not (isinstance(data__colorIndex_item, float) and data__colorIndex_item.is_integer()) or isinstance(data__colorIndex_item, bool):
                                raise JsonSchemaValueException(""+"data.@colorIndex[{data__colorIndex_x}]".format(**locals())+" must be integer", value=data__colorIndex_item, name=""+"data.@colorIndex[{data__colorIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='type')
                            if isinstance(data__colorIndex_item, (int, float)):
                                if data__colorIndex_item < -1:
                                    raise JsonSchemaValueException(""+"data.@colorIndex[{data__colorIndex_x}]".format(**locals())+" must be bigger than or equal to -1", value=data__colorIndex_item, name=""+"data.@colorIndex[{data__colorIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='minimum')
                if "@colorPerVertex" in data_keys:
                    data_keys.remove("@colorPerVertex")
                    data__colorPerVertex = data["@colorPerVertex"]
                    if not isinstance(data__colorPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@colorPerVertex must be boolean", value=data__colorPerVertex, name="data.@colorPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@colorPerVertex"] = True
                if "@convex" in data_keys:
                    data_keys.remove("@convex")
                    data__convex = data["@convex"]
                    if not isinstance(data__convex, (bool)):
                        raise JsonSchemaValueException("data.@convex must be boolean", value=data__convex, name="data.@convex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@convex"] = True
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "@coordIndex" in data_keys:
                    data_keys.remove("@coordIndex")
                    data__coordIndex = data["@coordIndex"]
                    if not isinstance(data__coordIndex, (list, tuple)):
                        raise JsonSchemaValueException("data.@coordIndex must be array", value=data__coordIndex, name="data.@coordIndex", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, rule='type')
                    data__coordIndex_is_list = isinstance(data__coordIndex, (list, tuple))
                    if data__coordIndex_is_list:
                        data__coordIndex_len = len(data__coordIndex)
                        for data__coordIndex_x, data__coordIndex_item in enumerate(data__coordIndex):
                            if not isinstance(data__coordIndex_item, (int)) and not (isinstance(data__coordIndex_item, float) and data__coordIndex_item.is_integer()) or isinstance(data__coordIndex_item, bool):
                                raise JsonSchemaValueException(""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+" must be integer", value=data__coordIndex_item, name=""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='type')
                            if isinstance(data__coordIndex_item, (int, float)):
                                if data__coordIndex_item < -1:
                                    raise JsonSchemaValueException(""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+" must be bigger than or equal to -1", value=data__coordIndex_item, name=""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='minimum')
                if "@creaseAngle" in data_keys:
                    data_keys.remove("@creaseAngle")
                    data__creaseAngle = data["@creaseAngle"]
                    if not isinstance(data__creaseAngle, (int, float)) or isinstance(data__creaseAngle, bool):
                        raise JsonSchemaValueException("data.@creaseAngle must be number", value=data__creaseAngle, name="data.@creaseAngle", definition={'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@creaseAngle"] = 0
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-normal" in data_keys:
                    data_keys.remove("-normal")
                    data__normal = data["-normal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__normal)
                if "@normalIndex" in data_keys:
                    data_keys.remove("@normalIndex")
                    data__normalIndex = data["@normalIndex"]
                    if not isinstance(data__normalIndex, (list, tuple)):
                        raise JsonSchemaValueException("data.@normalIndex must be array", value=data__normalIndex, name="data.@normalIndex", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, rule='type')
                    data__normalIndex_is_list = isinstance(data__normalIndex, (list, tuple))
                    if data__normalIndex_is_list:
                        data__normalIndex_len = len(data__normalIndex)
                        for data__normalIndex_x, data__normalIndex_item in enumerate(data__normalIndex):
                            if not isinstance(data__normalIndex_item, (int)) and not (isinstance(data__normalIndex_item, float) and data__normalIndex_item.is_integer()) or isinstance(data__normalIndex_item, bool):
                                raise JsonSchemaValueException(""+"data.@normalIndex[{data__normalIndex_x}]".format(**locals())+" must be integer", value=data__normalIndex_item, name=""+"data.@normalIndex[{data__normalIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='type')
                            if isinstance(data__normalIndex_item, (int, float)):
                                if data__normalIndex_item < -1:
                                    raise JsonSchemaValueException(""+"data.@normalIndex[{data__normalIndex_x}]".format(**locals())+" must be bigger than or equal to -1", value=data__normalIndex_item, name=""+"data.@normalIndex[{data__normalIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='minimum')
                if "@normalPerVertex" in data_keys:
                    data_keys.remove("@normalPerVertex")
                    data__normalPerVertex = data["@normalPerVertex"]
                    if not isinstance(data__normalPerVertex, (bool)):
                        raise JsonSchemaValueException("data.@normalPerVertex must be boolean", value=data__normalPerVertex, name="data.@normalPerVertex", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@normalPerVertex"] = True
                if "@solid" in data_keys:
                    data_keys.remove("@solid")
                    data__solid = data["@solid"]
                    if not isinstance(data__solid, (bool)):
                        raise JsonSchemaValueException("data.@solid must be boolean", value=data__solid, name="data.@solid", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@solid"] = True
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodesfnode(data__texCoord)
                if "@texCoordIndex" in data_keys:
                    data_keys.remove("@texCoordIndex")
                    data__texCoordIndex = data["@texCoordIndex"]
                    if not isinstance(data__texCoordIndex, (list, tuple)):
                        raise JsonSchemaValueException("data.@texCoordIndex must be array", value=data__texCoordIndex, name="data.@texCoordIndex", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, rule='type')
                    data__texCoordIndex_is_list = isinstance(data__texCoordIndex, (list, tuple))
                    if data__texCoordIndex_is_list:
                        data__texCoordIndex_len = len(data__texCoordIndex)
                        for data__texCoordIndex_x, data__texCoordIndex_item in enumerate(data__texCoordIndex):
                            if not isinstance(data__texCoordIndex_item, (int)) and not (isinstance(data__texCoordIndex_item, float) and data__texCoordIndex_item.is_integer()) or isinstance(data__texCoordIndex_item, bool):
                                raise JsonSchemaValueException(""+"data.@texCoordIndex[{data__texCoordIndex_x}]".format(**locals())+" must be integer", value=data__texCoordIndex_item, name=""+"data.@texCoordIndex[{data__texCoordIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='type')
                            if isinstance(data__texCoordIndex_item, (int, float)):
                                if data__texCoordIndex_item < -1:
                                    raise JsonSchemaValueException(""+"data.@texCoordIndex[{data__texCoordIndex_x}]".format(**locals())+" must be bigger than or equal to -1", value=data__texCoordIndex_item, name=""+"data.@texCoordIndex[{data__texCoordIndex_x}]".format(**locals())+"", definition={'minimum': -1, 'type': 'integer'}, rule='minimum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@texCoordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ccw': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-color': {'$ref': '#/$defs/-X3DColorNodeSFNode'}, '@colorIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@colorPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@convex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@creaseAngle': {'default': 0, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-normal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@normalIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@normalPerVertex': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@solid': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeSFNode'}, '@texCoordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': -1, 'type': 'integer'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_hanimdisplacer(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@displacements': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@weight': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@displacements': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@weight': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@coordIndex" in data_keys:
                    data_keys.remove("@coordIndex")
                    data__coordIndex = data["@coordIndex"]
                    if not isinstance(data__coordIndex, (list, tuple)):
                        raise JsonSchemaValueException("data.@coordIndex must be array", value=data__coordIndex, name="data.@coordIndex", definition={'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, rule='type')
                    data__coordIndex_is_list = isinstance(data__coordIndex, (list, tuple))
                    if data__coordIndex_is_list:
                        data__coordIndex_len = len(data__coordIndex)
                        for data__coordIndex_x, data__coordIndex_item in enumerate(data__coordIndex):
                            if not isinstance(data__coordIndex_item, (int)) and not (isinstance(data__coordIndex_item, float) and data__coordIndex_item.is_integer()) or isinstance(data__coordIndex_item, bool):
                                raise JsonSchemaValueException(""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+" must be integer", value=data__coordIndex_item, name=""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'integer'}, rule='type')
                            if isinstance(data__coordIndex_item, (int, float)):
                                if data__coordIndex_item < 0:
                                    raise JsonSchemaValueException(""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__coordIndex_item, name=""+"data.@coordIndex[{data__coordIndex_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'integer'}, rule='minimum')
                if "@displacements" in data_keys:
                    data_keys.remove("@displacements")
                    data__displacements = data["@displacements"]
                    if not isinstance(data__displacements, (list, tuple)):
                        raise JsonSchemaValueException("data.@displacements must be array", value=data__displacements, name="data.@displacements", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='type')
                    data__displacements_is_list = isinstance(data__displacements, (list, tuple))
                    if data__displacements_is_list:
                        data__displacements_len = len(data__displacements)
                        if data__displacements_len < 3:
                            raise JsonSchemaValueException("data.@displacements must contain at least 3 items", value=data__displacements, name="data.@displacements", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='minItems')
                        for data__displacements_x, data__displacements_item in enumerate(data__displacements):
                            if not isinstance(data__displacements_item, (int, float)) or isinstance(data__displacements_item, bool):
                                raise JsonSchemaValueException(""+"data.@displacements[{data__displacements_x}]".format(**locals())+" must be number", value=data__displacements_item, name=""+"data.@displacements[{data__displacements_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    data__name_any_of_count = 0
                    if not data__name_any_of_count:
                        try:
                            if data__name not in ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']:
                                raise JsonSchemaValueException("data.@name must be one of ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']", value=data__name, name="data.@name", definition={'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, rule='enum')
                            data__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data__name_any_of_count:
                        try:
                            if not isinstance(data__name, (str)):
                                raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'type': 'string'}, rule='type')
                            data__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data__name_any_of_count:
                        raise JsonSchemaValueException("data.@name must be valid by one of anyOf definition", value=data__name, name="data.@name", definition={'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='anyOf')
                if "@weight" in data_keys:
                    data_keys.remove("@weight")
                    data__weight = data["@weight"]
                    if not isinstance(data__weight, (int, float)) or isinstance(data__weight, bool):
                        raise JsonSchemaValueException("data.@weight must be number", value=data__weight, name="data.@weight", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@weight"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@displacements': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@weight': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@coordIndex': {'$comment': 'MFInt32 initializeOnly', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@displacements': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@weight': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_texturecoordinategenerator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'enum': ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL'], 'default': 'SPHERE', '$comment': 'SFString inputOutput', 'type': 'string'}, '@parameter': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'enum': ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL'], 'default': 'SPHERE', '$comment': 'SFString inputOutput', 'type': 'string'}, '@parameter': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@mode" in data_keys:
                    data_keys.remove("@mode")
                    data__mode = data["@mode"]
                    if not isinstance(data__mode, (str)):
                        raise JsonSchemaValueException("data.@mode must be string", value=data__mode, name="data.@mode", definition={'enum': ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL'], 'default': 'SPHERE', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data__mode not in ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL']:
                        raise JsonSchemaValueException("data.@mode must be one of ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL']", value=data__mode, name="data.@mode", definition={'enum': ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL'], 'default': 'SPHERE', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                else: data["@mode"] = 'SPHERE'
                if "@parameter" in data_keys:
                    data_keys.remove("@parameter")
                    data__parameter = data["@parameter"]
                    if not isinstance(data__parameter, (list, tuple)):
                        raise JsonSchemaValueException("data.@parameter must be array", value=data__parameter, name="data.@parameter", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__parameter_is_list = isinstance(data__parameter, (list, tuple))
                    if data__parameter_is_list:
                        data__parameter_len = len(data__parameter)
                        for data__parameter_x, data__parameter_item in enumerate(data__parameter):
                            if not isinstance(data__parameter_item, (int, float)) or isinstance(data__parameter_item, bool):
                                raise JsonSchemaValueException(""+"data.@parameter[{data__parameter_x}]".format(**locals())+" must be number", value=data__parameter_item, name=""+"data.@parameter[{data__parameter_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'enum': ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL'], 'default': 'SPHERE', '$comment': 'SFString inputOutput', 'type': 'string'}, '@parameter': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'enum': ['SPHERE', 'CAMERASPACENORMAL', 'CAMERASPACEPOSITION', 'CAMERASPACEREFLECTIONVECTOR', 'SPHERE-LOCAL', 'COORD', 'COORD-EYE', 'NOISE', 'NOISE-EYE', 'SPHERE-REFLECT', 'SPHERE-REFLECT-LOCAL'], 'default': 'SPHERE', '$comment': 'SFString inputOutput', 'type': 'string'}, '@parameter': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_texturecoordinate(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@point" in data_keys:
                    data_keys.remove("@point")
                    data__point = data["@point"]
                    if not isinstance(data__point, (list, tuple)):
                        raise JsonSchemaValueException("data.@point must be array", value=data__point, name="data.@point", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='type')
                    data__point_is_list = isinstance(data__point, (list, tuple))
                    if data__point_is_list:
                        data__point_len = len(data__point)
                        if data__point_len < 2:
                            raise JsonSchemaValueException("data.@point must contain at least 2 items", value=data__point, name="data.@point", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='minItems')
                        for data__point_x, data__point_item in enumerate(data__point):
                            if not isinstance(data__point_item, (int, float)) or isinstance(data__point_item, bool):
                                raise JsonSchemaValueException(""+"data.@point[{data__point_x}]".format(**locals())+" must be number", value=data__point_item, name=""+"data.@point[{data__point_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_multitexturecoordinate(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-texCoord" in data_keys:
                    data_keys.remove("-texCoord")
                    data__texCoord = data["-texCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodemfnode(data__texCoord)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texCoord': {'$ref': '#/$defs/-X3DTextureCoordinateNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dtexturecoordinatenodemfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "MultiTextureCoordinate" in data_item_keys:
                    data_item_keys.remove("MultiTextureCoordinate")
                    data_item__MultiTextureCoordinate = data_item["MultiTextureCoordinate"]
                    validate_x3d_3_0_jsonschema_json___defs_multitexturecoordinate(data_item__MultiTextureCoordinate)
                if "TextureCoordinate" in data_item_keys:
                    data_item_keys.remove("TextureCoordinate")
                    data_item__TextureCoordinate = data_item["TextureCoordinate"]
                    validate_x3d_3_0_jsonschema_json___defs_texturecoordinate(data_item__TextureCoordinate)
                if "TextureCoordinateGenerator" in data_item_keys:
                    data_item_keys.remove("TextureCoordinateGenerator")
                    data_item__TextureCoordinateGenerator = data_item["TextureCoordinateGenerator"]
                    validate_x3d_3_0_jsonschema_json___defs_texturecoordinategenerator(data_item__TextureCoordinateGenerator)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureCoordinate'}, 'TextureCoordinate': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinate'}, 'TextureCoordinateGenerator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureCoordinateGenerator'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_normal(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vector': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': -1, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vector': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': -1, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@vector" in data_keys:
                    data_keys.remove("@vector")
                    data__vector = data["@vector"]
                    if not isinstance(data__vector, (list, tuple)):
                        raise JsonSchemaValueException("data.@vector must be array", value=data__vector, name="data.@vector", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': -1, 'type': 'number'}}, rule='type')
                    data__vector_is_list = isinstance(data__vector, (list, tuple))
                    if data__vector_is_list:
                        data__vector_len = len(data__vector)
                        if data__vector_len < 3:
                            raise JsonSchemaValueException("data.@vector must contain at least 3 items", value=data__vector, name="data.@vector", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': -1, 'type': 'number'}}, rule='minItems')
                        for data__vector_x, data__vector_item in enumerate(data__vector):
                            if not isinstance(data__vector_item, (int, float)) or isinstance(data__vector_item, bool):
                                raise JsonSchemaValueException(""+"data.@vector[{data__vector_x}]".format(**locals())+" must be number", value=data__vector_item, name=""+"data.@vector[{data__vector_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': -1, 'type': 'number'}, rule='type')
                            if isinstance(data__vector_item, (int, float)):
                                if data__vector_item < -1:
                                    raise JsonSchemaValueException(""+"data.@vector[{data__vector_x}]".format(**locals())+" must be bigger than or equal to -1", value=data__vector_item, name=""+"data.@vector[{data__vector_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': -1, 'type': 'number'}, rule='minimum')
                                if data__vector_item > 1:
                                    raise JsonSchemaValueException(""+"data.@vector[{data__vector_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__vector_item, name=""+"data.@vector[{data__vector_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': -1, 'type': 'number'}, rule='maximum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vector': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': -1, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@vector': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': -1, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_geocoordinate(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-geoOrigin" in data_keys:
                    data_keys.remove("-geoOrigin")
                    data__geoOrigin = data["-geoOrigin"]
                    validate_x3d_3_0_jsonschema_json___defs__geooriginsfnode(data__geoOrigin)
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@point" in data_keys:
                    data_keys.remove("@point")
                    data__point = data["@point"]
                    if not isinstance(data__point, (list, tuple)):
                        raise JsonSchemaValueException("data.@point must be array", value=data__point, name="data.@point", definition={'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='type')
                    data__point_is_list = isinstance(data__point, (list, tuple))
                    if data__point_is_list:
                        data__point_len = len(data__point)
                        if data__point_len < 3:
                            raise JsonSchemaValueException("data.@point must contain at least 3 items", value=data__point, name="data.@point", definition={'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='minItems')
                        for data__point_x, data__point_item in enumerate(data__point):
                            if not isinstance(data__point_item, (int, float)) or isinstance(data__point_item, bool):
                                raise JsonSchemaValueException(""+"data.@point[{data__point_x}]".format(**locals())+" must be number", value=data__point_item, name=""+"data.@point[{data__point_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_coordinatedouble(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@point" in data_keys:
                    data_keys.remove("@point")
                    data__point = data["@point"]
                    if not isinstance(data__point, (list, tuple)):
                        raise JsonSchemaValueException("data.@point must be array", value=data__point, name="data.@point", definition={'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='type')
                    data__point_is_list = isinstance(data__point, (list, tuple))
                    if data__point_is_list:
                        data__point_len = len(data__point)
                        if data__point_len < 3:
                            raise JsonSchemaValueException("data.@point must contain at least 3 items", value=data__point, name="data.@point", definition={'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='minItems')
                        for data__point_x, data__point_item in enumerate(data__point):
                            if not isinstance(data__point_item, (int, float)) or isinstance(data__point_item, bool):
                                raise JsonSchemaValueException(""+"data.@point[{data__point_x}]".format(**locals())+" must be number", value=data__point_item, name=""+"data.@point[{data__point_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_coordinate(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@point" in data_keys:
                    data_keys.remove("@point")
                    data__point = data["@point"]
                    if not isinstance(data__point, (list, tuple)):
                        raise JsonSchemaValueException("data.@point must be array", value=data__point, name="data.@point", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='type')
                    data__point_is_list = isinstance(data__point, (list, tuple))
                    if data__point_is_list:
                        data__point_len = len(data__point)
                        if data__point_len < 3:
                            raise JsonSchemaValueException("data.@point must contain at least 3 items", value=data__point, name="data.@point", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='minItems')
                        for data__point_x, data__point_item in enumerate(data__point):
                            if not isinstance(data__point_item, (int, float)) or isinstance(data__point_item, bool):
                                raise JsonSchemaValueException(""+"data.@point[{data__point_x}]".format(**locals())+" must be number", value=data__point_item, name=""+"data.@point[{data__point_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@point': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_colorrgba(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColorRGBA inputOutput', 'type': 'array', 'minItems': 4, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColorRGBA inputOutput', 'type': 'array', 'minItems': 4, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@color" in data_keys:
                    data_keys.remove("@color")
                    data__color = data["@color"]
                    if not isinstance(data__color, (list, tuple)):
                        raise JsonSchemaValueException("data.@color must be array", value=data__color, name="data.@color", definition={'$comment': 'MFColorRGBA inputOutput', 'type': 'array', 'minItems': 4, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__color_is_list = isinstance(data__color, (list, tuple))
                    if data__color_is_list:
                        data__color_len = len(data__color)
                        if data__color_len < 4:
                            raise JsonSchemaValueException("data.@color must contain at least 4 items", value=data__color, name="data.@color", definition={'$comment': 'MFColorRGBA inputOutput', 'type': 'array', 'minItems': 4, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        for data__color_x, data__color_item in enumerate(data__color):
                            if not isinstance(data__color_item, (int, float)) or isinstance(data__color_item, bool):
                                raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be number", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__color_item, (int, float)):
                                if data__color_item < 0:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__color_item > 1:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColorRGBA inputOutput', 'type': 'array', 'minItems': 4, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColorRGBA inputOutput', 'type': 'array', 'minItems': 4, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_color(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@color" in data_keys:
                    data_keys.remove("@color")
                    data__color = data["@color"]
                    if not isinstance(data__color, (list, tuple)):
                        raise JsonSchemaValueException("data.@color must be array", value=data__color, name="data.@color", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__color_is_list = isinstance(data__color, (list, tuple))
                    if data__color_is_list:
                        data__color_len = len(data__color)
                        if data__color_len < 3:
                            raise JsonSchemaValueException("data.@color must contain at least 3 items", value=data__color, name="data.@color", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        for data__color_x, data__color_item in enumerate(data__color):
                            if not isinstance(data__color_item, (int, float)) or isinstance(data__color_item, bool):
                                raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be number", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__color_item, (int, float)):
                                if data__color_item < 0:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__color_item > 1:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_fontstyle(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@family': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}}, '@horizontal': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@justify': {'$comment': 'MFString initializeOnly', 'type': 'array', 'items': {'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}}, '@language': {'$comment': 'SFString initializeOnly', 'type': 'string'}, '@leftToRight': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@spacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@style': {'enum': ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC'], 'default': 'PLAIN', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@topToBottom': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@family': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}}, '@horizontal': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@justify': {'$comment': 'MFString initializeOnly', 'type': 'array', 'items': {'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}}, '@language': {'$comment': 'SFString initializeOnly', 'type': 'string'}, '@leftToRight': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@spacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@style': {'enum': ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC'], 'default': 'PLAIN', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@topToBottom': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@family" in data_keys:
                    data_keys.remove("@family")
                    data__family = data["@family"]
                    if not isinstance(data__family, (list, tuple)):
                        raise JsonSchemaValueException("data.@family must be array", value=data__family, name="data.@family", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}}, rule='type')
                    data__family_is_list = isinstance(data__family, (list, tuple))
                    if data__family_is_list:
                        data__family_len = len(data__family)
                        for data__family_x, data__family_item in enumerate(data__family):
                            if not isinstance(data__family_item, (str)):
                                raise JsonSchemaValueException(""+"data.@family[{data__family_x}]".format(**locals())+" must be string", value=data__family_item, name=""+"data.@family[{data__family_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}, rule='type')
                            data__family_item_any_of_count = 0
                            if not data__family_item_any_of_count:
                                try:
                                    if data__family_item not in ['SANS', 'SERIF', 'TYPEWRITER']:
                                        raise JsonSchemaValueException(""+"data.@family[{data__family_x}]".format(**locals())+" must be one of ['SANS', 'SERIF', 'TYPEWRITER']", value=data__family_item, name=""+"data.@family[{data__family_x}]".format(**locals())+"", definition={'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, rule='enum')
                                    data__family_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__family_item_any_of_count:
                                try:
                                    if not isinstance(data__family_item, (str)):
                                        raise JsonSchemaValueException(""+"data.@family[{data__family_x}]".format(**locals())+" must be string", value=data__family_item, name=""+"data.@family[{data__family_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                                    data__family_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__family_item_any_of_count:
                                raise JsonSchemaValueException(""+"data.@family[{data__family_x}]".format(**locals())+" must be valid by one of anyOf definition", value=data__family_item, name=""+"data.@family[{data__family_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}, rule='anyOf')
                if "@horizontal" in data_keys:
                    data_keys.remove("@horizontal")
                    data__horizontal = data["@horizontal"]
                    if not isinstance(data__horizontal, (bool)):
                        raise JsonSchemaValueException("data.@horizontal must be boolean", value=data__horizontal, name="data.@horizontal", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@horizontal"] = True
                if "@justify" in data_keys:
                    data_keys.remove("@justify")
                    data__justify = data["@justify"]
                    if not isinstance(data__justify, (list, tuple)):
                        raise JsonSchemaValueException("data.@justify must be array", value=data__justify, name="data.@justify", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'items': {'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}}, rule='type')
                    data__justify_is_list = isinstance(data__justify, (list, tuple))
                    if data__justify_is_list:
                        data__justify_len = len(data__justify)
                        for data__justify_x, data__justify_item in enumerate(data__justify):
                            if not isinstance(data__justify_item, (str)):
                                raise JsonSchemaValueException(""+"data.@justify[{data__justify_x}]".format(**locals())+" must be string", value=data__justify_item, name=""+"data.@justify[{data__justify_x}]".format(**locals())+"", definition={'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}, rule='type')
                            if data__justify_item not in ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"']:
                                raise JsonSchemaValueException(""+"data.@justify[{data__justify_x}]".format(**locals())+" must be one of ['MIDDLE', '\"MIDDLE\" \"BEGIN\"', '\"MIDDLE\" \"END\"', '\"MIDDLE\" \"FIRST\"', '\"MIDDLE\" \"MIDDLE\"', 'BEGIN', '\"BEGIN\" \"BEGIN\"', '\"BEGIN\" \"END\"', '\"BEGIN\" \"FIRST\"', '\"BEGIN\" \"MIDDLE\"', 'END', '\"END\" \"BEGIN\"', '\"END\" \"END\"', '\"END\" \"FIRST\"', '\"END\" \"MIDDLE\"', 'FIRST', '\"FIRST\" \"BEGIN\"', '\"FIRST\" \"END\"', '\"FIRST\" \"FIRST\"', '\"FIRST\" \"MIDDLE\"']", value=data__justify_item, name=""+"data.@justify[{data__justify_x}]".format(**locals())+"", definition={'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}, rule='enum')
                if "@language" in data_keys:
                    data_keys.remove("@language")
                    data__language = data["@language"]
                    if not isinstance(data__language, (str)):
                        raise JsonSchemaValueException("data.@language must be string", value=data__language, name="data.@language", definition={'$comment': 'SFString initializeOnly', 'type': 'string'}, rule='type')
                if "@leftToRight" in data_keys:
                    data_keys.remove("@leftToRight")
                    data__leftToRight = data["@leftToRight"]
                    if not isinstance(data__leftToRight, (bool)):
                        raise JsonSchemaValueException("data.@leftToRight must be boolean", value=data__leftToRight, name="data.@leftToRight", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@leftToRight"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@size" in data_keys:
                    data_keys.remove("@size")
                    data__size = data["@size"]
                    if not isinstance(data__size, (int, float)) or isinstance(data__size, bool):
                        raise JsonSchemaValueException("data.@size must be number", value=data__size, name="data.@size", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@size"] = 1
                if "@spacing" in data_keys:
                    data_keys.remove("@spacing")
                    data__spacing = data["@spacing"]
                    if not isinstance(data__spacing, (int, float)) or isinstance(data__spacing, bool):
                        raise JsonSchemaValueException("data.@spacing must be number", value=data__spacing, name="data.@spacing", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@spacing"] = 1
                if "@style" in data_keys:
                    data_keys.remove("@style")
                    data__style = data["@style"]
                    if not isinstance(data__style, (str)):
                        raise JsonSchemaValueException("data.@style must be string", value=data__style, name="data.@style", definition={'enum': ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC'], 'default': 'PLAIN', '$comment': 'SFString initializeOnly', 'type': 'string'}, rule='type')
                    if data__style not in ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC']:
                        raise JsonSchemaValueException("data.@style must be one of ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC']", value=data__style, name="data.@style", definition={'enum': ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC'], 'default': 'PLAIN', '$comment': 'SFString initializeOnly', 'type': 'string'}, rule='enum')
                else: data["@style"] = 'PLAIN'
                if "@topToBottom" in data_keys:
                    data_keys.remove("@topToBottom")
                    data__topToBottom = data["@topToBottom"]
                    if not isinstance(data__topToBottom, (bool)):
                        raise JsonSchemaValueException("data.@topToBottom must be boolean", value=data__topToBottom, name="data.@topToBottom", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@topToBottom"] = True
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@family': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}}, '@horizontal': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@justify': {'$comment': 'MFString initializeOnly', 'type': 'array', 'items': {'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}}, '@language': {'$comment': 'SFString initializeOnly', 'type': 'string'}, '@leftToRight': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@spacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@style': {'enum': ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC'], 'default': 'PLAIN', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@topToBottom': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@family': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['SANS', 'SERIF', 'TYPEWRITER']}, {'type': 'string'}], 'default': 'SERIF', 'type': 'string'}}, '@horizontal': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@justify': {'$comment': 'MFString initializeOnly', 'type': 'array', 'items': {'enum': ['MIDDLE', '"MIDDLE" "BEGIN"', '"MIDDLE" "END"', '"MIDDLE" "FIRST"', '"MIDDLE" "MIDDLE"', 'BEGIN', '"BEGIN" "BEGIN"', '"BEGIN" "END"', '"BEGIN" "FIRST"', '"BEGIN" "MIDDLE"', 'END', '"END" "BEGIN"', '"END" "END"', '"END" "FIRST"', '"END" "MIDDLE"', 'FIRST', '"FIRST" "BEGIN"', '"FIRST" "END"', '"FIRST" "FIRST"', '"FIRST" "MIDDLE"'], 'default': 'BEGIN', 'type': 'string'}}, '@language': {'$comment': 'SFString initializeOnly', 'type': 'string'}, '@leftToRight': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@spacing': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@style': {'enum': ['PLAIN', 'BOLD', 'ITALIC', 'BOLDITALIC'], 'default': 'PLAIN', '$comment': 'SFString initializeOnly', 'type': 'string'}, '@topToBottom': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_appearance(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fillProperties': {'$ref': '#/$defs/-FillPropertiesSFNode'}, '-lineProperties': {'$ref': '#/$defs/-LinePropertiesSFNode'}, '-material': {'$ref': '#/$defs/-X3DMaterialNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fillProperties': {'$ref': '#/$defs/-FillPropertiesSFNode'}, '-lineProperties': {'$ref': '#/$defs/-LinePropertiesSFNode'}, '-material': {'$ref': '#/$defs/-X3DMaterialNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-fillProperties" in data_keys:
                    data_keys.remove("-fillProperties")
                    data__fillProperties = data["-fillProperties"]
                    validate_x3d_3_0_jsonschema_json___defs__fillpropertiessfnode(data__fillProperties)
                if "-lineProperties" in data_keys:
                    data_keys.remove("-lineProperties")
                    data__lineProperties = data["-lineProperties"]
                    validate_x3d_3_0_jsonschema_json___defs__linepropertiessfnode(data__lineProperties)
                if "-material" in data_keys:
                    data_keys.remove("-material")
                    data__material = data["-material"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmaterialnodesfnode(data__material)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-texture" in data_keys:
                    data_keys.remove("-texture")
                    data__texture = data["-texture"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturenodesfnode(data__texture)
                if "-textureTransform" in data_keys:
                    data_keys.remove("-textureTransform")
                    data__textureTransform = data["-textureTransform"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturetransformnodesfnode(data__textureTransform)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fillProperties': {'$ref': '#/$defs/-FillPropertiesSFNode'}, '-lineProperties': {'$ref': '#/$defs/-LinePropertiesSFNode'}, '-material': {'$ref': '#/$defs/-X3DMaterialNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-fillProperties': {'$ref': '#/$defs/-FillPropertiesSFNode'}, '-lineProperties': {'$ref': '#/$defs/-LinePropertiesSFNode'}, '-material': {'$ref': '#/$defs/-X3DMaterialNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dtexturetransformnodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "MultiTextureTransform" in data_keys:
            data_keys.remove("MultiTextureTransform")
            data__MultiTextureTransform = data["MultiTextureTransform"]
            validate_x3d_3_0_jsonschema_json___defs_multitexturetransform(data__MultiTextureTransform)
        if "TextureTransform" in data_keys:
            data_keys.remove("TextureTransform")
            data__TextureTransform = data["TextureTransform"]
            validate_x3d_3_0_jsonschema_json___defs_texturetransform(data__TextureTransform)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dtexturenodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "ImageTexture" in data_keys:
            data_keys.remove("ImageTexture")
            data__ImageTexture = data["ImageTexture"]
            validate_x3d_3_0_jsonschema_json___defs_imagetexture(data__ImageTexture)
        if "MovieTexture" in data_keys:
            data_keys.remove("MovieTexture")
            data__MovieTexture = data["MovieTexture"]
            validate_x3d_3_0_jsonschema_json___defs_movietexture(data__MovieTexture)
        if "PixelTexture" in data_keys:
            data_keys.remove("PixelTexture")
            data__PixelTexture = data["PixelTexture"]
            validate_x3d_3_0_jsonschema_json___defs_pixeltexture(data__PixelTexture)
        if "MultiTexture" in data_keys:
            data_keys.remove("MultiTexture")
            data__MultiTexture = data["MultiTexture"]
            validate_x3d_3_0_jsonschema_json___defs_multitexture(data__MultiTexture)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dmaterialnodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "Material" in data_keys:
            data_keys.remove("Material")
            data__Material = data["Material"]
            validate_x3d_3_0_jsonschema_json___defs_material(data__Material)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'Material': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Material'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__linepropertiessfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "LineProperties" in data_keys:
            data_keys.remove("LineProperties")
            data__LineProperties = data["LineProperties"]
            validate_x3d_3_0_jsonschema_json___defs_lineproperties(data__LineProperties)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'LineProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__fillpropertiessfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "FillProperties" in data_keys:
            data_keys.remove("FillProperties")
            data__FillProperties = data["FillProperties"]
            validate_x3d_3_0_jsonschema_json___defs_fillproperties(data__FillProperties)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'FillProperties': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/FillProperties'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_lineproperties(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@applied': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@linetype': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@linewidthScaleFactor': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@applied': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@linetype': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@linewidthScaleFactor': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@applied" in data_keys:
                    data_keys.remove("@applied")
                    data__applied = data["@applied"]
                    if not isinstance(data__applied, (bool)):
                        raise JsonSchemaValueException("data.@applied must be boolean", value=data__applied, name="data.@applied", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@applied"] = True
                if "@linetype" in data_keys:
                    data_keys.remove("@linetype")
                    data__linetype = data["@linetype"]
                    if not isinstance(data__linetype, (int)) and not (isinstance(data__linetype, float) and data__linetype.is_integer()) or isinstance(data__linetype, bool):
                        raise JsonSchemaValueException("data.@linetype must be integer", value=data__linetype, name="data.@linetype", definition={'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@linetype"] = 1
                if "@linewidthScaleFactor" in data_keys:
                    data_keys.remove("@linewidthScaleFactor")
                    data__linewidthScaleFactor = data["@linewidthScaleFactor"]
                    if not isinstance(data__linewidthScaleFactor, (int, float)) or isinstance(data__linewidthScaleFactor, bool):
                        raise JsonSchemaValueException("data.@linewidthScaleFactor must be number", value=data__linewidthScaleFactor, name="data.@linewidthScaleFactor", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@linewidthScaleFactor"] = 0
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@applied': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@linetype': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@linewidthScaleFactor': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@applied': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@linetype': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@linewidthScaleFactor': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_fillproperties(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@filled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@hatched': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchStyle': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@filled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@hatched': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchStyle': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@filled" in data_keys:
                    data_keys.remove("@filled")
                    data__filled = data["@filled"]
                    if not isinstance(data__filled, (bool)):
                        raise JsonSchemaValueException("data.@filled must be boolean", value=data__filled, name="data.@filled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@filled"] = True
                if "@hatchColor" in data_keys:
                    data_keys.remove("@hatchColor")
                    data__hatchColor = data["@hatchColor"]
                    if not isinstance(data__hatchColor, (list, tuple)):
                        raise JsonSchemaValueException("data.@hatchColor must be array", value=data__hatchColor, name="data.@hatchColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__hatchColor_is_list = isinstance(data__hatchColor, (list, tuple))
                    if data__hatchColor_is_list:
                        data__hatchColor_len = len(data__hatchColor)
                        if data__hatchColor_len < 3:
                            raise JsonSchemaValueException("data.@hatchColor must contain at least 3 items", value=data__hatchColor, name="data.@hatchColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__hatchColor_len > 3:
                            raise JsonSchemaValueException("data.@hatchColor must contain less than or equal to 3 items", value=data__hatchColor, name="data.@hatchColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__hatchColor_x, data__hatchColor_item in enumerate(data__hatchColor):
                            if not isinstance(data__hatchColor_item, (int, float)) or isinstance(data__hatchColor_item, bool):
                                raise JsonSchemaValueException(""+"data.@hatchColor[{data__hatchColor_x}]".format(**locals())+" must be number", value=data__hatchColor_item, name=""+"data.@hatchColor[{data__hatchColor_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__hatchColor_item, (int, float)):
                                if data__hatchColor_item < 0:
                                    raise JsonSchemaValueException(""+"data.@hatchColor[{data__hatchColor_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__hatchColor_item, name=""+"data.@hatchColor[{data__hatchColor_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__hatchColor_item > 1:
                                    raise JsonSchemaValueException(""+"data.@hatchColor[{data__hatchColor_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__hatchColor_item, name=""+"data.@hatchColor[{data__hatchColor_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@hatched" in data_keys:
                    data_keys.remove("@hatched")
                    data__hatched = data["@hatched"]
                    if not isinstance(data__hatched, (bool)):
                        raise JsonSchemaValueException("data.@hatched must be boolean", value=data__hatched, name="data.@hatched", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@hatched"] = True
                if "@hatchStyle" in data_keys:
                    data_keys.remove("@hatchStyle")
                    data__hatchStyle = data["@hatchStyle"]
                    if not isinstance(data__hatchStyle, (int)) and not (isinstance(data__hatchStyle, float) and data__hatchStyle.is_integer()) or isinstance(data__hatchStyle, bool):
                        raise JsonSchemaValueException("data.@hatchStyle must be integer", value=data__hatchStyle, name="data.@hatchStyle", definition={'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@hatchStyle"] = 1
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@filled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@hatched': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchStyle': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@filled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@hatched': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@hatchStyle': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_texturetransform(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@scale': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@translation': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@scale': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@translation': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 2:
                            raise JsonSchemaValueException("data.@center must contain at least 2 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 2:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 2 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@rotation" in data_keys:
                    data_keys.remove("@rotation")
                    data__rotation = data["@rotation"]
                    if not isinstance(data__rotation, (int, float)) or isinstance(data__rotation, bool):
                        raise JsonSchemaValueException("data.@rotation must be number", value=data__rotation, name="data.@rotation", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@rotation"] = 0
                if "@scale" in data_keys:
                    data_keys.remove("@scale")
                    data__scale = data["@scale"]
                    if not isinstance(data__scale, (list, tuple)):
                        raise JsonSchemaValueException("data.@scale must be array", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, rule='type')
                    data__scale_is_list = isinstance(data__scale, (list, tuple))
                    if data__scale_is_list:
                        data__scale_len = len(data__scale)
                        if data__scale_len < 2:
                            raise JsonSchemaValueException("data.@scale must contain at least 2 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, rule='minItems')
                        if data__scale_len > 2:
                            raise JsonSchemaValueException("data.@scale must contain less than or equal to 2 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, rule='maxItems')
                        for data__scale_x, data__scale_item in enumerate(data__scale):
                            if not isinstance(data__scale_item, (int, float)) or isinstance(data__scale_item, bool):
                                raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be number", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'type': 'number'}, rule='type')
                if "@translation" in data_keys:
                    data_keys.remove("@translation")
                    data__translation = data["@translation"]
                    if not isinstance(data__translation, (list, tuple)):
                        raise JsonSchemaValueException("data.@translation must be array", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__translation_is_list = isinstance(data__translation, (list, tuple))
                    if data__translation_is_list:
                        data__translation_len = len(data__translation)
                        if data__translation_len < 2:
                            raise JsonSchemaValueException("data.@translation must contain at least 2 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__translation_len > 2:
                            raise JsonSchemaValueException("data.@translation must contain less than or equal to 2 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__translation_x, data__translation_item in enumerate(data__translation):
                            if not isinstance(data__translation_item, (int, float)) or isinstance(data__translation_item, bool):
                                raise JsonSchemaValueException(""+"data.@translation[{data__translation_x}]".format(**locals())+" must be number", value=data__translation_item, name=""+"data.@translation[{data__translation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@scale': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@translation': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@scale': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 1, 'type': 'number'}}, '@translation': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_multitexturetransform(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-textureTransform" in data_keys:
                    data_keys.remove("-textureTransform")
                    data__textureTransform = data["-textureTransform"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturetransformnodemfnode(data__textureTransform)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-textureTransform': {'$ref': '#/$defs/-X3DTextureTransformNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dtexturetransformnodemfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "MultiTextureTransform" in data_item_keys:
                    data_item_keys.remove("MultiTextureTransform")
                    data_item__MultiTextureTransform = data_item["MultiTextureTransform"]
                    validate_x3d_3_0_jsonschema_json___defs_multitexturetransform(data_item__MultiTextureTransform)
                if "TextureTransform" in data_item_keys:
                    data_item_keys.remove("TextureTransform")
                    data_item__TextureTransform = data_item["TextureTransform"]
                    validate_x3d_3_0_jsonschema_json___defs_texturetransform(data_item__TextureTransform)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'MultiTextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTextureTransform'}, 'TextureTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureTransform'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_multitexture(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@alpha': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@function': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}}, '@source': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@alpha': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@function': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}}, '@source': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@alpha" in data_keys:
                    data_keys.remove("@alpha")
                    data__alpha = data["@alpha"]
                    if not isinstance(data__alpha, (int, float)) or isinstance(data__alpha, bool):
                        raise JsonSchemaValueException("data.@alpha must be number", value=data__alpha, name="data.@alpha", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@alpha"] = 1
                if "@color" in data_keys:
                    data_keys.remove("@color")
                    data__color = data["@color"]
                    if not isinstance(data__color, (list, tuple)):
                        raise JsonSchemaValueException("data.@color must be array", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__color_is_list = isinstance(data__color, (list, tuple))
                    if data__color_is_list:
                        data__color_len = len(data__color)
                        if data__color_len < 3:
                            raise JsonSchemaValueException("data.@color must contain at least 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__color_len > 3:
                            raise JsonSchemaValueException("data.@color must contain less than or equal to 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__color_x, data__color_item in enumerate(data__color):
                            if not isinstance(data__color_item, (int, float)) or isinstance(data__color_item, bool):
                                raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be number", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__color_item, (int, float)):
                                if data__color_item < 0:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__color_item > 1:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@function" in data_keys:
                    data_keys.remove("@function")
                    data__function = data["@function"]
                    if not isinstance(data__function, (list, tuple)):
                        raise JsonSchemaValueException("data.@function must be array", value=data__function, name="data.@function", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}}, rule='type')
                    data__function_is_list = isinstance(data__function, (list, tuple))
                    if data__function_is_list:
                        data__function_len = len(data__function)
                        for data__function_x, data__function_item in enumerate(data__function):
                            if not isinstance(data__function_item, (str)):
                                raise JsonSchemaValueException(""+"data.@function[{data__function_x}]".format(**locals())+" must be string", value=data__function_item, name=""+"data.@function[{data__function_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}, rule='type')
                            data__function_item_any_of_count = 0
                            if not data__function_item_any_of_count:
                                try:
                                    if data__function_item not in ['COMPLEMENT', 'ALPHAREPLICATE', '']:
                                        raise JsonSchemaValueException(""+"data.@function[{data__function_x}]".format(**locals())+" must be one of ['COMPLEMENT', 'ALPHAREPLICATE', '']", value=data__function_item, name=""+"data.@function[{data__function_x}]".format(**locals())+"", definition={'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, rule='enum')
                                    data__function_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__function_item_any_of_count:
                                try:
                                    if not isinstance(data__function_item, (str)):
                                        raise JsonSchemaValueException(""+"data.@function[{data__function_x}]".format(**locals())+" must be string", value=data__function_item, name=""+"data.@function[{data__function_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                                    data__function_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__function_item_any_of_count:
                                raise JsonSchemaValueException(""+"data.@function[{data__function_x}]".format(**locals())+" must be valid by one of anyOf definition", value=data__function_item, name=""+"data.@function[{data__function_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}, rule='anyOf')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@mode" in data_keys:
                    data_keys.remove("@mode")
                    data__mode = data["@mode"]
                    if not isinstance(data__mode, (list, tuple)):
                        raise JsonSchemaValueException("data.@mode must be array", value=data__mode, name="data.@mode", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}}, rule='type')
                    data__mode_is_list = isinstance(data__mode, (list, tuple))
                    if data__mode_is_list:
                        data__mode_len = len(data__mode)
                        for data__mode_x, data__mode_item in enumerate(data__mode):
                            if not isinstance(data__mode_item, (str)):
                                raise JsonSchemaValueException(""+"data.@mode[{data__mode_x}]".format(**locals())+" must be string", value=data__mode_item, name=""+"data.@mode[{data__mode_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}, rule='type')
                            data__mode_item_any_of_count = 0
                            if not data__mode_item_any_of_count:
                                try:
                                    if data__mode_item not in ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']:
                                        raise JsonSchemaValueException(""+"data.@mode[{data__mode_x}]".format(**locals())+" must be one of ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']", value=data__mode_item, name=""+"data.@mode[{data__mode_x}]".format(**locals())+"", definition={'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, rule='enum')
                                    data__mode_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__mode_item_any_of_count:
                                try:
                                    if not isinstance(data__mode_item, (str)):
                                        raise JsonSchemaValueException(""+"data.@mode[{data__mode_x}]".format(**locals())+" must be string", value=data__mode_item, name=""+"data.@mode[{data__mode_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                                    data__mode_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__mode_item_any_of_count:
                                raise JsonSchemaValueException(""+"data.@mode[{data__mode_x}]".format(**locals())+" must be valid by one of anyOf definition", value=data__mode_item, name=""+"data.@mode[{data__mode_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}, rule='anyOf')
                if "@source" in data_keys:
                    data_keys.remove("@source")
                    data__source = data["@source"]
                    if not isinstance(data__source, (list, tuple)):
                        raise JsonSchemaValueException("data.@source must be array", value=data__source, name="data.@source", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}}, rule='type')
                    data__source_is_list = isinstance(data__source, (list, tuple))
                    if data__source_is_list:
                        data__source_len = len(data__source)
                        for data__source_x, data__source_item in enumerate(data__source):
                            if not isinstance(data__source_item, (str)):
                                raise JsonSchemaValueException(""+"data.@source[{data__source_x}]".format(**locals())+" must be string", value=data__source_item, name=""+"data.@source[{data__source_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}, rule='type')
                            data__source_item_any_of_count = 0
                            if not data__source_item_any_of_count:
                                try:
                                    if data__source_item not in ['DIFFUSE', 'FACTOR', 'SPECULAR', '']:
                                        raise JsonSchemaValueException(""+"data.@source[{data__source_x}]".format(**locals())+" must be one of ['DIFFUSE', 'FACTOR', 'SPECULAR', '']", value=data__source_item, name=""+"data.@source[{data__source_x}]".format(**locals())+"", definition={'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, rule='enum')
                                    data__source_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__source_item_any_of_count:
                                try:
                                    if not isinstance(data__source_item, (str)):
                                        raise JsonSchemaValueException(""+"data.@source[{data__source_x}]".format(**locals())+" must be string", value=data__source_item, name=""+"data.@source[{data__source_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                                    data__source_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__source_item_any_of_count:
                                raise JsonSchemaValueException(""+"data.@source[{data__source_x}]".format(**locals())+" must be valid by one of anyOf definition", value=data__source_item, name=""+"data.@source[{data__source_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}, rule='anyOf')
                if "-texture" in data_keys:
                    data_keys.remove("-texture")
                    data__texture = data["-texture"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexturenodemfnode(data__texture)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@alpha': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@function': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}}, '@source': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@alpha': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@function': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['COMPLEMENT', 'ALPHAREPLICATE', '']}, {'type': 'string'}], 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mode': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['ADD', 'ADDSIGNED', 'ADDSIGNED2X', 'ADDSMOOTH', 'BLENDCURRENTALPHA', 'BLENDDIFFUSEALPHA', 'BLENDFACTORALPHA', 'BLENDTEXTUREALPHA', 'DOTPRODUCT3', 'MODULATE', 'MODULATE2X', 'MODULATE4X', 'MODULATEALPHA_ADDCOLOR', 'MODULATEINVALPHA_ADDCOLOR', 'MODULATEINVCOLOR_ADDALPHA', 'OFF', 'REPLACE', 'SELECTARG1', 'SELECTARG2', 'SUBTRACT']}, {'type': 'string'}], 'type': 'string'}}, '@source': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['DIFFUSE', 'FACTOR', 'SPECULAR', '']}, {'type': 'string'}], 'type': 'string'}}, '-texture': {'$ref': '#/$defs/-X3DTextureNodeMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dtexturenodemfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "ImageTexture" in data_item_keys:
                    data_item_keys.remove("ImageTexture")
                    data_item__ImageTexture = data_item["ImageTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_imagetexture(data_item__ImageTexture)
                if "MovieTexture" in data_item_keys:
                    data_item_keys.remove("MovieTexture")
                    data_item__MovieTexture = data_item["MovieTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_movietexture(data_item__MovieTexture)
                if "PixelTexture" in data_item_keys:
                    data_item_keys.remove("PixelTexture")
                    data_item__PixelTexture = data_item["PixelTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_pixeltexture(data_item__PixelTexture)
                if "MultiTexture" in data_item_keys:
                    data_item_keys.remove("MultiTexture")
                    data_item__MultiTexture = data_item["MultiTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_multitexture(data_item__MultiTexture)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_pixeltexture(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@image': {'$comment': 'SFImage inputOutput', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@image': {'$comment': 'SFImage inputOutput', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@image" in data_keys:
                    data_keys.remove("@image")
                    data__image = data["@image"]
                    if not isinstance(data__image, (list, tuple)):
                        raise JsonSchemaValueException("data.@image must be array", value=data__image, name="data.@image", definition={'$comment': 'SFImage inputOutput', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__image_is_list = isinstance(data__image, (list, tuple))
                    if data__image_is_list:
                        data__image_len = len(data__image)
                        for data__image_x, data__image_item in enumerate(data__image):
                            if not isinstance(data__image_item, (int, float)) or isinstance(data__image_item, bool):
                                raise JsonSchemaValueException(""+"data.@image[{data__image_x}]".format(**locals())+" must be number", value=data__image_item, name=""+"data.@image[{data__image_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@repeatS" in data_keys:
                    data_keys.remove("@repeatS")
                    data__repeatS = data["@repeatS"]
                    if not isinstance(data__repeatS, (bool)):
                        raise JsonSchemaValueException("data.@repeatS must be boolean", value=data__repeatS, name="data.@repeatS", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@repeatS"] = True
                if "@repeatT" in data_keys:
                    data_keys.remove("@repeatT")
                    data__repeatT = data["@repeatT"]
                    if not isinstance(data__repeatT, (bool)):
                        raise JsonSchemaValueException("data.@repeatT must be boolean", value=data__repeatT, name="data.@repeatT", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@repeatT"] = True
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@image': {'$comment': 'SFImage inputOutput', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@image': {'$comment': 'SFImage inputOutput', 'type': 'array', 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_imagetexture(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@repeatS" in data_keys:
                    data_keys.remove("@repeatS")
                    data__repeatS = data["@repeatS"]
                    if not isinstance(data__repeatS, (bool)):
                        raise JsonSchemaValueException("data.@repeatS must be boolean", value=data__repeatS, name="data.@repeatS", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@repeatS"] = True
                if "@repeatT" in data_keys:
                    data_keys.remove("@repeatT")
                    data__repeatT = data["@repeatT"]
                    if not isinstance(data__repeatT, (bool)):
                        raise JsonSchemaValueException("data.@repeatT must be boolean", value=data__repeatT, name="data.@repeatT", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@repeatT"] = True
                if "@url" in data_keys:
                    data_keys.remove("@url")
                    data__url = data["@url"]
                    if not isinstance(data__url, (list, tuple)):
                        raise JsonSchemaValueException("data.@url must be array", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__url_is_list = isinstance(data__url, (list, tuple))
                    if data__url_is_list:
                        data__url_len = len(data__url)
                        if data__url_len < 1:
                            raise JsonSchemaValueException("data.@url must contain at least 1 items", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__url_x, data__url_item in enumerate(data__url):
                            if not isinstance(data__url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be string", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__url_item):
                                    raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be uri-reference", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_material(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@diffuseColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@emissiveColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@shininess': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@specularColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@diffuseColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@emissiveColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@shininess': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@specularColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ambientIntensity" in data_keys:
                    data_keys.remove("@ambientIntensity")
                    data__ambientIntensity = data["@ambientIntensity"]
                    if not isinstance(data__ambientIntensity, (int, float)) or isinstance(data__ambientIntensity, bool):
                        raise JsonSchemaValueException("data.@ambientIntensity must be number", value=data__ambientIntensity, name="data.@ambientIntensity", definition={'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@ambientIntensity"] = 0.2
                if "@diffuseColor" in data_keys:
                    data_keys.remove("@diffuseColor")
                    data__diffuseColor = data["@diffuseColor"]
                    if not isinstance(data__diffuseColor, (list, tuple)):
                        raise JsonSchemaValueException("data.@diffuseColor must be array", value=data__diffuseColor, name="data.@diffuseColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__diffuseColor_is_list = isinstance(data__diffuseColor, (list, tuple))
                    if data__diffuseColor_is_list:
                        data__diffuseColor_len = len(data__diffuseColor)
                        if data__diffuseColor_len < 3:
                            raise JsonSchemaValueException("data.@diffuseColor must contain at least 3 items", value=data__diffuseColor, name="data.@diffuseColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__diffuseColor_len > 3:
                            raise JsonSchemaValueException("data.@diffuseColor must contain less than or equal to 3 items", value=data__diffuseColor, name="data.@diffuseColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__diffuseColor_x, data__diffuseColor_item in enumerate(data__diffuseColor):
                            if not isinstance(data__diffuseColor_item, (int, float)) or isinstance(data__diffuseColor_item, bool):
                                raise JsonSchemaValueException(""+"data.@diffuseColor[{data__diffuseColor_x}]".format(**locals())+" must be number", value=data__diffuseColor_item, name=""+"data.@diffuseColor[{data__diffuseColor_x}]".format(**locals())+"", definition={'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__diffuseColor_item, (int, float)):
                                if data__diffuseColor_item < 0:
                                    raise JsonSchemaValueException(""+"data.@diffuseColor[{data__diffuseColor_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__diffuseColor_item, name=""+"data.@diffuseColor[{data__diffuseColor_x}]".format(**locals())+"", definition={'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__diffuseColor_item > 1:
                                    raise JsonSchemaValueException(""+"data.@diffuseColor[{data__diffuseColor_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__diffuseColor_item, name=""+"data.@diffuseColor[{data__diffuseColor_x}]".format(**locals())+"", definition={'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@emissiveColor" in data_keys:
                    data_keys.remove("@emissiveColor")
                    data__emissiveColor = data["@emissiveColor"]
                    if not isinstance(data__emissiveColor, (list, tuple)):
                        raise JsonSchemaValueException("data.@emissiveColor must be array", value=data__emissiveColor, name="data.@emissiveColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__emissiveColor_is_list = isinstance(data__emissiveColor, (list, tuple))
                    if data__emissiveColor_is_list:
                        data__emissiveColor_len = len(data__emissiveColor)
                        if data__emissiveColor_len < 3:
                            raise JsonSchemaValueException("data.@emissiveColor must contain at least 3 items", value=data__emissiveColor, name="data.@emissiveColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__emissiveColor_len > 3:
                            raise JsonSchemaValueException("data.@emissiveColor must contain less than or equal to 3 items", value=data__emissiveColor, name="data.@emissiveColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__emissiveColor_x, data__emissiveColor_item in enumerate(data__emissiveColor):
                            if not isinstance(data__emissiveColor_item, (int, float)) or isinstance(data__emissiveColor_item, bool):
                                raise JsonSchemaValueException(""+"data.@emissiveColor[{data__emissiveColor_x}]".format(**locals())+" must be number", value=data__emissiveColor_item, name=""+"data.@emissiveColor[{data__emissiveColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__emissiveColor_item, (int, float)):
                                if data__emissiveColor_item < 0:
                                    raise JsonSchemaValueException(""+"data.@emissiveColor[{data__emissiveColor_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__emissiveColor_item, name=""+"data.@emissiveColor[{data__emissiveColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__emissiveColor_item > 1:
                                    raise JsonSchemaValueException(""+"data.@emissiveColor[{data__emissiveColor_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__emissiveColor_item, name=""+"data.@emissiveColor[{data__emissiveColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@shininess" in data_keys:
                    data_keys.remove("@shininess")
                    data__shininess = data["@shininess"]
                    if not isinstance(data__shininess, (int, float)) or isinstance(data__shininess, bool):
                        raise JsonSchemaValueException("data.@shininess must be number", value=data__shininess, name="data.@shininess", definition={'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@shininess"] = 0.2
                if "@specularColor" in data_keys:
                    data_keys.remove("@specularColor")
                    data__specularColor = data["@specularColor"]
                    if not isinstance(data__specularColor, (list, tuple)):
                        raise JsonSchemaValueException("data.@specularColor must be array", value=data__specularColor, name="data.@specularColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__specularColor_is_list = isinstance(data__specularColor, (list, tuple))
                    if data__specularColor_is_list:
                        data__specularColor_len = len(data__specularColor)
                        if data__specularColor_len < 3:
                            raise JsonSchemaValueException("data.@specularColor must contain at least 3 items", value=data__specularColor, name="data.@specularColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__specularColor_len > 3:
                            raise JsonSchemaValueException("data.@specularColor must contain less than or equal to 3 items", value=data__specularColor, name="data.@specularColor", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__specularColor_x, data__specularColor_item in enumerate(data__specularColor):
                            if not isinstance(data__specularColor_item, (int, float)) or isinstance(data__specularColor_item, bool):
                                raise JsonSchemaValueException(""+"data.@specularColor[{data__specularColor_x}]".format(**locals())+" must be number", value=data__specularColor_item, name=""+"data.@specularColor[{data__specularColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__specularColor_item, (int, float)):
                                if data__specularColor_item < 0:
                                    raise JsonSchemaValueException(""+"data.@specularColor[{data__specularColor_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__specularColor_item, name=""+"data.@specularColor[{data__specularColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__specularColor_item > 1:
                                    raise JsonSchemaValueException(""+"data.@specularColor[{data__specularColor_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__specularColor_item, name=""+"data.@specularColor[{data__specularColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@transparency" in data_keys:
                    data_keys.remove("@transparency")
                    data__transparency = data["@transparency"]
                    if not isinstance(data__transparency, (int, float)) or isinstance(data__transparency, bool):
                        raise JsonSchemaValueException("data.@transparency must be number", value=data__transparency, name="data.@transparency", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@transparency"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@diffuseColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@emissiveColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@shininess': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@specularColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@diffuseColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0.8, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@emissiveColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@shininess': {'default': 0.2, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@specularColor': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_protodeclare(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'ProtoBody': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoBody'}, 'ProtoInterface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInterface'}}, 'required': ['@name'], 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_len = len(data)
        if not all(prop in data for prop in ['@name']):
            raise JsonSchemaValueException("data must contain ['@name'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'ProtoBody': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoBody'}, 'ProtoInterface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInterface'}}, 'required': ['@name'], 'additionalProperties': False}, rule='required')
        data_keys = set(data.keys())
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "@appinfo" in data_keys:
            data_keys.remove("@appinfo")
            data__appinfo = data["@appinfo"]
            if not isinstance(data__appinfo, (str)):
                raise JsonSchemaValueException("data.@appinfo must be string", value=data__appinfo, name="data.@appinfo", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@documentation" in data_keys:
            data_keys.remove("@documentation")
            data__documentation = data["@documentation"]
            if not isinstance(data__documentation, (str)):
                raise JsonSchemaValueException("data.@documentation must be string", value=data__documentation, name="data.@documentation", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@name" in data_keys:
            data_keys.remove("@name")
            data__name = data["@name"]
            if not isinstance(data__name, (str)):
                raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "ProtoBody" in data_keys:
            data_keys.remove("ProtoBody")
            data__ProtoBody = data["ProtoBody"]
            validate_x3d_3_0_jsonschema_json___defs_protobody(data__ProtoBody)
        if "ProtoInterface" in data_keys:
            data_keys.remove("ProtoInterface")
            data__ProtoInterface = data["ProtoInterface"]
            validate_x3d_3_0_jsonschema_json___defs_protointerface(data__ProtoInterface)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'ProtoBody': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoBody'}, 'ProtoInterface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInterface'}}, 'required': ['@name'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_protointerface(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "field" in data_keys:
            data_keys.remove("field")
            data__field = data["field"]
            validate_x3d_3_0_jsonschema_json___defs_field(data__field)
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_field(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'items': {'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@accessType': {'enum': ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@type': {'enum': ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@accessType', '@name', '@type'], 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@accessType': {'enum': ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@type': {'enum': ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@accessType', '@name', '@type'], 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_len = len(data_item)
                if not all(prop in data_item for prop in ['@accessType', '@name', '@type']):
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must contain ['@accessType', '@name', '@type'] properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@accessType': {'enum': ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@type': {'enum': ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@accessType', '@name', '@type'], 'additionalProperties': False}, rule='required')
                data_item_keys = set(data_item.keys())
                if "IS" in data_item_keys:
                    data_item_keys.remove("IS")
                    data_item__IS = data_item["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data_item__IS)
                if "@accessType" in data_item_keys:
                    data_item_keys.remove("@accessType")
                    data_item__accessType = data_item["@accessType"]
                    if not isinstance(data_item__accessType, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@accessType".format(**locals())+" must be string", value=data_item__accessType, name=""+"data[{data_x}].@accessType".format(**locals())+"", definition={'enum': ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput'], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data_item__accessType not in ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput']:
                        raise JsonSchemaValueException(""+"data[{data_x}].@accessType".format(**locals())+" must be one of ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput']", value=data_item__accessType, name=""+"data[{data_x}].@accessType".format(**locals())+"", definition={'enum': ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput'], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                if "@appinfo" in data_item_keys:
                    data_item_keys.remove("@appinfo")
                    data_item__appinfo = data_item["@appinfo"]
                    if not isinstance(data_item__appinfo, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@appinfo".format(**locals())+" must be string", value=data_item__appinfo, name=""+"data[{data_x}].@appinfo".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "-children" in data_item_keys:
                    data_item_keys.remove("-children")
                    data_item__children = data_item["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnodemfnode(data_item__children)
                if "@class" in data_item_keys:
                    data_item_keys.remove("@class")
                    data_item__class = data_item["@class"]
                    if not isinstance(data_item__class, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@class".format(**locals())+" must be string", value=data_item__class, name=""+"data[{data_x}].@class".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@documentation" in data_item_keys:
                    data_item_keys.remove("@documentation")
                    data_item__documentation = data_item["@documentation"]
                    if not isinstance(data_item__documentation, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@documentation".format(**locals())+" must be string", value=data_item__documentation, name=""+"data[{data_x}].@documentation".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@name" in data_item_keys:
                    data_item_keys.remove("@name")
                    data_item__name = data_item["@name"]
                    if not isinstance(data_item__name, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@name".format(**locals())+" must be string", value=data_item__name, name=""+"data[{data_x}].@name".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@type" in data_item_keys:
                    data_item_keys.remove("@type")
                    data_item__type = data_item["@type"]
                    if not isinstance(data_item__type, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@type".format(**locals())+" must be string", value=data_item__type, name=""+"data[{data_x}].@type".format(**locals())+"", definition={'enum': ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f'], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data_item__type not in ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f']:
                        raise JsonSchemaValueException(""+"data[{data_x}].@type".format(**locals())+" must be one of ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f']", value=data_item__type, name=""+"data[{data_x}].@type".format(**locals())+"", definition={'enum': ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f'], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                if "@value" in data_item_keys:
                    data_item_keys.remove("@value")
                    data_item__value = data_item["@value"]
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@accessType': {'enum': ['initializeOnly', 'inputOnly', 'outputOnly', 'inputOutput'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@type': {'enum': ['SFBool', 'MFBool', 'SFColor', 'MFColor', 'SFColorRGBA', 'MFColorRGBA', 'SFDouble', 'MFDouble', 'SFFloat', 'MFFloat', 'SFImage', 'MFImage', 'SFInt32', 'MFInt32', 'SFNode', 'MFNode', 'SFRotation', 'MFRotation', 'SFString', 'MFString', 'SFTime', 'MFTime', 'SFVec2d', 'MFVec2d', 'SFVec2f', 'MFVec2f', 'SFVec3d', 'MFVec3d', 'SFVec3f', 'MFVec3f', 'SFVec4d', 'MFVec4d', 'SFVec4f', 'MFVec4f', 'SFMatrix3d', 'MFMatrix3d', 'SFMatrix3f', 'MFMatrix3f', 'SFMatrix4d', 'MFMatrix4d', 'SFMatrix4f', 'MFMatrix4f'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@value': {}}, 'required': ['@accessType', '@name', '@type'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_protobody(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__x3dnodemfnode(data__children)
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-X3DNodeMFNode'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbssurfaceinterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-controlPoint" in data_keys:
                    data_keys.remove("-controlPoint")
                    data__controlPoint = data["-controlPoint"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__controlPoint)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@uDimension" in data_keys:
                    data_keys.remove("@uDimension")
                    data__uDimension = data["@uDimension"]
                    if not isinstance(data__uDimension, (int)) and not (isinstance(data__uDimension, float) and data__uDimension.is_integer()) or isinstance(data__uDimension, bool):
                        raise JsonSchemaValueException("data.@uDimension must be integer", value=data__uDimension, name="data.@uDimension", definition={'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@uDimension"] = 0
                if "@uKnot" in data_keys:
                    data_keys.remove("@uKnot")
                    data__uKnot = data["@uKnot"]
                    if not isinstance(data__uKnot, (list, tuple)):
                        raise JsonSchemaValueException("data.@uKnot must be array", value=data__uKnot, name="data.@uKnot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__uKnot_is_list = isinstance(data__uKnot, (list, tuple))
                    if data__uKnot_is_list:
                        data__uKnot_len = len(data__uKnot)
                        for data__uKnot_x, data__uKnot_item in enumerate(data__uKnot):
                            if not isinstance(data__uKnot_item, (int, float)) or isinstance(data__uKnot_item, bool):
                                raise JsonSchemaValueException(""+"data.@uKnot[{data__uKnot_x}]".format(**locals())+" must be number", value=data__uKnot_item, name=""+"data.@uKnot[{data__uKnot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@uOrder" in data_keys:
                    data_keys.remove("@uOrder")
                    data__uOrder = data["@uOrder"]
                    if not isinstance(data__uOrder, (int)) and not (isinstance(data__uOrder, float) and data__uOrder.is_integer()) or isinstance(data__uOrder, bool):
                        raise JsonSchemaValueException("data.@uOrder must be integer", value=data__uOrder, name="data.@uOrder", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@uOrder"] = 3
                if "@vDimension" in data_keys:
                    data_keys.remove("@vDimension")
                    data__vDimension = data["@vDimension"]
                    if not isinstance(data__vDimension, (int)) and not (isinstance(data__vDimension, float) and data__vDimension.is_integer()) or isinstance(data__vDimension, bool):
                        raise JsonSchemaValueException("data.@vDimension must be integer", value=data__vDimension, name="data.@vDimension", definition={'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@vDimension"] = 0
                if "@vKnot" in data_keys:
                    data_keys.remove("@vKnot")
                    data__vKnot = data["@vKnot"]
                    if not isinstance(data__vKnot, (list, tuple)):
                        raise JsonSchemaValueException("data.@vKnot must be array", value=data__vKnot, name="data.@vKnot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__vKnot_is_list = isinstance(data__vKnot, (list, tuple))
                    if data__vKnot_is_list:
                        data__vKnot_len = len(data__vKnot)
                        for data__vKnot_x, data__vKnot_item in enumerate(data__vKnot):
                            if not isinstance(data__vKnot_item, (int, float)) or isinstance(data__vKnot_item, bool):
                                raise JsonSchemaValueException(""+"data.@vKnot[{data__vKnot_x}]".format(**locals())+" must be number", value=data__vKnot_item, name=""+"data.@vKnot[{data__vKnot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@vOrder" in data_keys:
                    data_keys.remove("@vOrder")
                    data__vOrder = data["@vOrder"]
                    if not isinstance(data__vOrder, (int)) and not (isinstance(data__vOrder, float) and data__vOrder.is_integer()) or isinstance(data__vOrder, bool):
                        raise JsonSchemaValueException("data.@vOrder must be integer", value=data__vOrder, name="data.@vOrder", definition={'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, rule='type')
                else: data["@vOrder"] = 3
                if "@weight" in data_keys:
                    data_keys.remove("@weight")
                    data__weight = data["@weight"]
                    if not isinstance(data__weight, (list, tuple)):
                        raise JsonSchemaValueException("data.@weight must be array", value=data__weight, name="data.@weight", definition={'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__weight_is_list = isinstance(data__weight, (list, tuple))
                    if data__weight_is_list:
                        data__weight_len = len(data__weight)
                        for data__weight_x, data__weight_item in enumerate(data__weight):
                            if not isinstance(data__weight_item, (int, float)) or isinstance(data__weight_item, bool):
                                raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be number", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@uDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@uKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@uOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vDimension': {'default': 0, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@vKnot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@vOrder': {'default': 3, '$comment': 'SFInt32 initializeOnly', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbsset(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DNurbsSurfaceGeometryNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@tessellationScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DNurbsSurfaceGeometryNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@tessellationScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-geometry" in data_keys:
                    data_keys.remove("-geometry")
                    data__geometry = data["-geometry"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnurbssurfacegeometrynodemfnode(data__geometry)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@tessellationScale" in data_keys:
                    data_keys.remove("@tessellationScale")
                    data__tessellationScale = data["@tessellationScale"]
                    if not isinstance(data__tessellationScale, (int, float)) or isinstance(data__tessellationScale, bool):
                        raise JsonSchemaValueException("data.@tessellationScale must be number", value=data__tessellationScale, name="data.@tessellationScale", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@tessellationScale"] = 1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DNurbsSurfaceGeometryNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@tessellationScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DNurbsSurfaceGeometryNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@tessellationScale': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dnurbssurfacegeometrynodemfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "NurbsPatchSurface" in data_item_keys:
                    data_item_keys.remove("NurbsPatchSurface")
                    data_item__NurbsPatchSurface = data_item["NurbsPatchSurface"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbspatchsurface(data_item__NurbsPatchSurface)
                if "NurbsTrimmedSurface" in data_item_keys:
                    data_item_keys.remove("NurbsTrimmedSurface")
                    data_item__NurbsTrimmedSurface = data_item["NurbsTrimmedSurface"]
                    validate_x3d_3_0_jsonschema_json___defs_nurbstrimmedsurface(data_item__NurbsTrimmedSurface)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbspositioninterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-controlPoint" in data_keys:
                    data_keys.remove("-controlPoint")
                    data__controlPoint = data["-controlPoint"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__controlPoint)
                if "@knot" in data_keys:
                    data_keys.remove("@knot")
                    data__knot = data["@knot"]
                    if not isinstance(data__knot, (list, tuple)):
                        raise JsonSchemaValueException("data.@knot must be array", value=data__knot, name="data.@knot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__knot_is_list = isinstance(data__knot, (list, tuple))
                    if data__knot_is_list:
                        data__knot_len = len(data__knot)
                        for data__knot_x, data__knot_item in enumerate(data__knot):
                            if not isinstance(data__knot_item, (int, float)) or isinstance(data__knot_item, bool):
                                raise JsonSchemaValueException(""+"data.@knot[{data__knot_x}]".format(**locals())+" must be number", value=data__knot_item, name=""+"data.@knot[{data__knot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@order" in data_keys:
                    data_keys.remove("@order")
                    data__order = data["@order"]
                    if not isinstance(data__order, (int)) and not (isinstance(data__order, float) and data__order.is_integer()) or isinstance(data__order, bool):
                        raise JsonSchemaValueException("data.@order must be integer", value=data__order, name="data.@order", definition={'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@order"] = 3
                if "@weight" in data_keys:
                    data_keys.remove("@weight")
                    data__weight = data["@weight"]
                    if not isinstance(data__weight, (list, tuple)):
                        raise JsonSchemaValueException("data.@weight must be array", value=data__weight, name="data.@weight", definition={'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__weight_is_list = isinstance(data__weight, (list, tuple))
                    if data__weight_is_list:
                        data__weight_len = len(data__weight)
                        for data__weight_x, data__weight_item in enumerate(data__weight):
                            if not isinstance(data__weight_item, (int, float)) or isinstance(data__weight_item, bool):
                                raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be number", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_nurbsorientationinterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-controlPoint" in data_keys:
                    data_keys.remove("-controlPoint")
                    data__controlPoint = data["-controlPoint"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__controlPoint)
                if "@knot" in data_keys:
                    data_keys.remove("@knot")
                    data__knot = data["@knot"]
                    if not isinstance(data__knot, (list, tuple)):
                        raise JsonSchemaValueException("data.@knot must be array", value=data__knot, name="data.@knot", definition={'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__knot_is_list = isinstance(data__knot, (list, tuple))
                    if data__knot_is_list:
                        data__knot_len = len(data__knot)
                        for data__knot_x, data__knot_item in enumerate(data__knot):
                            if not isinstance(data__knot_item, (int, float)) or isinstance(data__knot_item, bool):
                                raise JsonSchemaValueException(""+"data.@knot[{data__knot_x}]".format(**locals())+" must be number", value=data__knot_item, name=""+"data.@knot[{data__knot_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@order" in data_keys:
                    data_keys.remove("@order")
                    data__order = data["@order"]
                    if not isinstance(data__order, (int)) and not (isinstance(data__order, float) and data__order.is_integer()) or isinstance(data__order, bool):
                        raise JsonSchemaValueException("data.@order must be integer", value=data__order, name="data.@order", definition={'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@order"] = 3
                if "@weight" in data_keys:
                    data_keys.remove("@weight")
                    data__weight = data["@weight"]
                    if not isinstance(data__weight, (list, tuple)):
                        raise JsonSchemaValueException("data.@weight must be array", value=data__weight, name="data.@weight", definition={'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__weight_is_list = isinstance(data__weight, (list, tuple))
                    if data__weight_is_list:
                        data__weight_len = len(data__weight)
                        for data__weight_x, data__weight_item in enumerate(data__weight):
                            if not isinstance(data__weight_item, (int, float)) or isinstance(data__weight_item, bool):
                                raise JsonSchemaValueException(""+"data.@weight[{data__weight_x}]".format(**locals())+" must be number", value=data__weight_item, name=""+"data.@weight[{data__weight_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-controlPoint': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '@knot': {'$comment': 'MFDouble initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@order': {'default': 3, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@weight': {'$comment': 'MFDouble inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_inline(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@load': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@load': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@load" in data_keys:
                    data_keys.remove("@load")
                    data__load = data["@load"]
                    if not isinstance(data__load, (bool)):
                        raise JsonSchemaValueException("data.@load must be boolean", value=data__load, name="data.@load", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@load"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@url" in data_keys:
                    data_keys.remove("@url")
                    data__url = data["@url"]
                    if not isinstance(data__url, (list, tuple)):
                        raise JsonSchemaValueException("data.@url must be array", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__url_is_list = isinstance(data__url, (list, tuple))
                    if data__url_is_list:
                        data__url_len = len(data__url)
                        if data__url_len < 1:
                            raise JsonSchemaValueException("data.@url must contain at least 1 items", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__url_x, data__url_item in enumerate(data__url):
                            if not isinstance(data__url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be string", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__url_item):
                                    raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be uri-reference", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@load': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@load': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_hanimjoint(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-HAnimJoint-HAnimSegment-HAnimSiteMFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@limitOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@llimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@skinCoordIndex': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@skinCoordWeight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@stiffness': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@ulimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-HAnimJoint-HAnimSegment-HAnimSiteMFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@limitOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@llimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@skinCoordIndex': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@skinCoordWeight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@stiffness': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@ulimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 3:
                            raise JsonSchemaValueException("data.@center must contain at least 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 3:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__hanimjoint_hanimsegment_hanimsitemfnode(data__children)
                if "-displacers" in data_keys:
                    data_keys.remove("-displacers")
                    data__displacers = data["-displacers"]
                    validate_x3d_3_0_jsonschema_json___defs__hanimdisplacermfnode(data__displacers)
                if "@limitOrientation" in data_keys:
                    data_keys.remove("@limitOrientation")
                    data__limitOrientation = data["@limitOrientation"]
                    if not isinstance(data__limitOrientation, (list, tuple)):
                        raise JsonSchemaValueException("data.@limitOrientation must be array", value=data__limitOrientation, name="data.@limitOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__limitOrientation_is_list = isinstance(data__limitOrientation, (list, tuple))
                    if data__limitOrientation_is_list:
                        data__limitOrientation_len = len(data__limitOrientation)
                        if data__limitOrientation_len < 4:
                            raise JsonSchemaValueException("data.@limitOrientation must contain at least 4 items", value=data__limitOrientation, name="data.@limitOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__limitOrientation_len > 4:
                            raise JsonSchemaValueException("data.@limitOrientation must contain less than or equal to 4 items", value=data__limitOrientation, name="data.@limitOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__limitOrientation:
                            raise JsonSchemaValueException("data.@limitOrientation must not be there", value=data__limitOrientation, name="data.@limitOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@llimit" in data_keys:
                    data_keys.remove("@llimit")
                    data__llimit = data["@llimit"]
                    if not isinstance(data__llimit, (list, tuple)):
                        raise JsonSchemaValueException("data.@llimit must be array", value=data__llimit, name="data.@llimit", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__llimit_is_list = isinstance(data__llimit, (list, tuple))
                    if data__llimit_is_list:
                        data__llimit_len = len(data__llimit)
                        if data__llimit_len < 3:
                            raise JsonSchemaValueException("data.@llimit must contain at least 3 items", value=data__llimit, name="data.@llimit", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__llimit_len > 3:
                            raise JsonSchemaValueException("data.@llimit must contain less than or equal to 3 items", value=data__llimit, name="data.@llimit", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__llimit_x, data__llimit_item in enumerate(data__llimit):
                            if not isinstance(data__llimit_item, (int, float)) or isinstance(data__llimit_item, bool):
                                raise JsonSchemaValueException(""+"data.@llimit[{data__llimit_x}]".format(**locals())+" must be number", value=data__llimit_item, name=""+"data.@llimit[{data__llimit_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'anyOf': [{'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    data__name_any_of_count = 0
                    if not data__name_any_of_count:
                        try:
                            if data__name not in ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']:
                                raise JsonSchemaValueException("data.@name must be one of ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']", value=data__name, name="data.@name", definition={'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, rule='enum')
                            data__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data__name_any_of_count:
                        try:
                            if not isinstance(data__name, (str)):
                                raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'type': 'string'}, rule='type')
                            data__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data__name_any_of_count:
                        raise JsonSchemaValueException("data.@name must be valid by one of anyOf definition", value=data__name, name="data.@name", definition={'anyOf': [{'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='anyOf')
                if "@rotation" in data_keys:
                    data_keys.remove("@rotation")
                    data__rotation = data["@rotation"]
                    if not isinstance(data__rotation, (list, tuple)):
                        raise JsonSchemaValueException("data.@rotation must be array", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__rotation_is_list = isinstance(data__rotation, (list, tuple))
                    if data__rotation_is_list:
                        data__rotation_len = len(data__rotation)
                        if data__rotation_len < 4:
                            raise JsonSchemaValueException("data.@rotation must contain at least 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__rotation_len > 4:
                            raise JsonSchemaValueException("data.@rotation must contain less than or equal to 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__rotation:
                            raise JsonSchemaValueException("data.@rotation must not be there", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@scale" in data_keys:
                    data_keys.remove("@scale")
                    data__scale = data["@scale"]
                    if not isinstance(data__scale, (list, tuple)):
                        raise JsonSchemaValueException("data.@scale must be array", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='type')
                    data__scale_is_list = isinstance(data__scale, (list, tuple))
                    if data__scale_is_list:
                        data__scale_len = len(data__scale)
                        if data__scale_len < 3:
                            raise JsonSchemaValueException("data.@scale must contain at least 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__scale_len > 3:
                            raise JsonSchemaValueException("data.@scale must contain less than or equal to 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__scale_x, data__scale_item in enumerate(data__scale):
                            if not isinstance(data__scale_item, (int, float)) or isinstance(data__scale_item, bool):
                                raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be number", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__scale_item, (int, float)):
                                if data__scale_item <= 0:
                                    raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be bigger than 0", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}, rule='exclusiveMinimum')
                if "@scaleOrientation" in data_keys:
                    data_keys.remove("@scaleOrientation")
                    data__scaleOrientation = data["@scaleOrientation"]
                    if not isinstance(data__scaleOrientation, (list, tuple)):
                        raise JsonSchemaValueException("data.@scaleOrientation must be array", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__scaleOrientation_is_list = isinstance(data__scaleOrientation, (list, tuple))
                    if data__scaleOrientation_is_list:
                        data__scaleOrientation_len = len(data__scaleOrientation)
                        if data__scaleOrientation_len < 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain at least 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__scaleOrientation_len > 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain less than or equal to 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__scaleOrientation:
                            raise JsonSchemaValueException("data.@scaleOrientation must not be there", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@skinCoordIndex" in data_keys:
                    data_keys.remove("@skinCoordIndex")
                    data__skinCoordIndex = data["@skinCoordIndex"]
                    if not isinstance(data__skinCoordIndex, (list, tuple)):
                        raise JsonSchemaValueException("data.@skinCoordIndex must be array", value=data__skinCoordIndex, name="data.@skinCoordIndex", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, rule='type')
                    data__skinCoordIndex_is_list = isinstance(data__skinCoordIndex, (list, tuple))
                    if data__skinCoordIndex_is_list:
                        data__skinCoordIndex_len = len(data__skinCoordIndex)
                        for data__skinCoordIndex_x, data__skinCoordIndex_item in enumerate(data__skinCoordIndex):
                            if not isinstance(data__skinCoordIndex_item, (int)) and not (isinstance(data__skinCoordIndex_item, float) and data__skinCoordIndex_item.is_integer()) or isinstance(data__skinCoordIndex_item, bool):
                                raise JsonSchemaValueException(""+"data.@skinCoordIndex[{data__skinCoordIndex_x}]".format(**locals())+" must be integer", value=data__skinCoordIndex_item, name=""+"data.@skinCoordIndex[{data__skinCoordIndex_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'integer'}, rule='type')
                            if isinstance(data__skinCoordIndex_item, (int, float)):
                                if data__skinCoordIndex_item < 0:
                                    raise JsonSchemaValueException(""+"data.@skinCoordIndex[{data__skinCoordIndex_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__skinCoordIndex_item, name=""+"data.@skinCoordIndex[{data__skinCoordIndex_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'integer'}, rule='minimum')
                if "@skinCoordWeight" in data_keys:
                    data_keys.remove("@skinCoordWeight")
                    data__skinCoordWeight = data["@skinCoordWeight"]
                    if not isinstance(data__skinCoordWeight, (list, tuple)):
                        raise JsonSchemaValueException("data.@skinCoordWeight must be array", value=data__skinCoordWeight, name="data.@skinCoordWeight", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__skinCoordWeight_is_list = isinstance(data__skinCoordWeight, (list, tuple))
                    if data__skinCoordWeight_is_list:
                        data__skinCoordWeight_len = len(data__skinCoordWeight)
                        for data__skinCoordWeight_x, data__skinCoordWeight_item in enumerate(data__skinCoordWeight):
                            if not isinstance(data__skinCoordWeight_item, (int, float)) or isinstance(data__skinCoordWeight_item, bool):
                                raise JsonSchemaValueException(""+"data.@skinCoordWeight[{data__skinCoordWeight_x}]".format(**locals())+" must be number", value=data__skinCoordWeight_item, name=""+"data.@skinCoordWeight[{data__skinCoordWeight_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@stiffness" in data_keys:
                    data_keys.remove("@stiffness")
                    data__stiffness = data["@stiffness"]
                    if not isinstance(data__stiffness, (list, tuple)):
                        raise JsonSchemaValueException("data.@stiffness must be array", value=data__stiffness, name="data.@stiffness", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__stiffness_is_list = isinstance(data__stiffness, (list, tuple))
                    if data__stiffness_is_list:
                        data__stiffness_len = len(data__stiffness)
                        if data__stiffness_len < 3:
                            raise JsonSchemaValueException("data.@stiffness must contain at least 3 items", value=data__stiffness, name="data.@stiffness", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__stiffness_len > 3:
                            raise JsonSchemaValueException("data.@stiffness must contain less than or equal to 3 items", value=data__stiffness, name="data.@stiffness", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__stiffness_x, data__stiffness_item in enumerate(data__stiffness):
                            if not isinstance(data__stiffness_item, (int, float)) or isinstance(data__stiffness_item, bool):
                                raise JsonSchemaValueException(""+"data.@stiffness[{data__stiffness_x}]".format(**locals())+" must be number", value=data__stiffness_item, name=""+"data.@stiffness[{data__stiffness_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__stiffness_item, (int, float)):
                                if data__stiffness_item < 0:
                                    raise JsonSchemaValueException(""+"data.@stiffness[{data__stiffness_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__stiffness_item, name=""+"data.@stiffness[{data__stiffness_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__stiffness_item > 1:
                                    raise JsonSchemaValueException(""+"data.@stiffness[{data__stiffness_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__stiffness_item, name=""+"data.@stiffness[{data__stiffness_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@translation" in data_keys:
                    data_keys.remove("@translation")
                    data__translation = data["@translation"]
                    if not isinstance(data__translation, (list, tuple)):
                        raise JsonSchemaValueException("data.@translation must be array", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__translation_is_list = isinstance(data__translation, (list, tuple))
                    if data__translation_is_list:
                        data__translation_len = len(data__translation)
                        if data__translation_len < 3:
                            raise JsonSchemaValueException("data.@translation must contain at least 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__translation_len > 3:
                            raise JsonSchemaValueException("data.@translation must contain less than or equal to 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__translation_x, data__translation_item in enumerate(data__translation):
                            if not isinstance(data__translation_item, (int, float)) or isinstance(data__translation_item, bool):
                                raise JsonSchemaValueException(""+"data.@translation[{data__translation_x}]".format(**locals())+" must be number", value=data__translation_item, name=""+"data.@translation[{data__translation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@ulimit" in data_keys:
                    data_keys.remove("@ulimit")
                    data__ulimit = data["@ulimit"]
                    if not isinstance(data__ulimit, (list, tuple)):
                        raise JsonSchemaValueException("data.@ulimit must be array", value=data__ulimit, name="data.@ulimit", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__ulimit_is_list = isinstance(data__ulimit, (list, tuple))
                    if data__ulimit_is_list:
                        data__ulimit_len = len(data__ulimit)
                        if data__ulimit_len < 3:
                            raise JsonSchemaValueException("data.@ulimit must contain at least 3 items", value=data__ulimit, name="data.@ulimit", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__ulimit_len > 3:
                            raise JsonSchemaValueException("data.@ulimit must contain less than or equal to 3 items", value=data__ulimit, name="data.@ulimit", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__ulimit_x, data__ulimit_item in enumerate(data__ulimit):
                            if not isinstance(data__ulimit_item, (int, float)) or isinstance(data__ulimit_item, bool):
                                raise JsonSchemaValueException(""+"data.@ulimit[{data__ulimit_x}]".format(**locals())+" must be number", value=data__ulimit_item, name=""+"data.@ulimit[{data__ulimit_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-HAnimJoint-HAnimSegment-HAnimSiteMFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@limitOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@llimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@skinCoordIndex': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@skinCoordWeight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@stiffness': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@ulimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-HAnimJoint-HAnimSegment-HAnimSiteMFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@limitOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@llimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['humanoid_root', 'sacroiliac', 'l_hip', 'l_knee', 'l_ankle', 'l_subtalar', 'l_midtarsal', 'l_metatarsal', 'r_hip', 'r_knee', 'r_ankle', 'r_subtalar', 'r_midtarsal', 'r_metatarsal', 'vl5', 'vl4', 'vl3', 'vl2', 'vl1', 'vt12', 'vt11', 'vt10', 'vt9', 'vt8', 'vt7', 'vt6', 'vt5', 'vt4', 'vt3', 'vt2', 'vt1', 'vc7', 'vc6', 'vc5', 'vc4', 'vc3', 'vc2', 'vc1', 'skullbase', 'l_eyelid_joint', 'r_eyelid_joint', 'l_eyeball_joint', 'r_eyeball_joint', 'l_eyebrow_joint', 'r_eyebrow_joint', 'temporomandibular', 'l_sternoclavicular', 'l_acromioclavicular', 'l_shoulder', 'l_elbow', 'l_wrist', 'l_thumb1', 'l_thumb2', 'l_thumb3', 'l_index0', 'l_index1', 'l_index2', 'l_index3', 'l_middle0', 'l_middle1', 'l_middle2', 'l_middle3', 'l_ring0', 'l_ring1', 'l_ring2', 'l_ring3', 'l_pinky0', 'l_pinky1', 'l_pinky2', 'l_pinky3', 'r_sternoclavicular', 'r_acromioclavicular', 'r_shoulder', 'r_elbow', 'r_wrist', 'r_thumb1', 'r_thumb2', 'r_thumb3', 'r_index0', 'r_index1', 'r_index2', 'r_index3', 'r_middle0', 'r_middle1', 'r_middle2', 'r_middle3', 'r_ring0', 'r_ring1', 'r_ring2', 'r_ring3', 'r_pinky0', 'r_pinky1', 'r_pinky2', 'r_pinky3']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@skinCoordIndex': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'minimum': 0, 'type': 'integer'}}, '@skinCoordWeight': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@stiffness': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@ulimit': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__hanimdisplacermfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "HAnimDisplacer" in data_item_keys:
                    data_item_keys.remove("HAnimDisplacer")
                    data_item__HAnimDisplacer = data_item["HAnimDisplacer"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimdisplacer(data_item__HAnimDisplacer)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimDisplacer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimDisplacer'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__hanimjoint_hanimsegment_hanimsitemfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "HAnimJoint" in data_item_keys:
                    data_item_keys.remove("HAnimJoint")
                    data_item__HAnimJoint = data_item["HAnimJoint"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimjoint(data_item__HAnimJoint)
                if "HAnimSegment" in data_item_keys:
                    data_item_keys.remove("HAnimSegment")
                    data_item__HAnimSegment = data_item["HAnimSegment"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsegment(data_item__HAnimSegment)
                if "HAnimSite" in data_item_keys:
                    data_item_keys.remove("HAnimSite")
                    data_item__HAnimSite = data_item["HAnimSite"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsite(data_item__HAnimSite)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_hanimhumanoid(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-joints': {'$ref': '#/$defs/-HAnimJointMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '-segments': {'$ref': '#/$defs/-HAnimSegmentMFNode'}, '-sites': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '-skeleton': {'$ref': '#/$defs/-HAnimJoint-HAnimSiteMFNode'}, '-skin': {'$ref': '#/$defs/-Group-Transform-Shape-IndexedFaceSetMFNode'}, '-skinCoord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-skinNormal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@version': {'enum': ['1.0', '2.0'], 'default': '1.0', '$comment': 'SFString inputOutput', 'type': 'string'}, '-viewpoints': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-joints': {'$ref': '#/$defs/-HAnimJointMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '-segments': {'$ref': '#/$defs/-HAnimSegmentMFNode'}, '-sites': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '-skeleton': {'$ref': '#/$defs/-HAnimJoint-HAnimSiteMFNode'}, '-skin': {'$ref': '#/$defs/-Group-Transform-Shape-IndexedFaceSetMFNode'}, '-skinCoord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-skinNormal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@version': {'enum': ['1.0', '2.0'], 'default': '1.0', '$comment': 'SFString inputOutput', 'type': 'string'}, '-viewpoints': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 3:
                            raise JsonSchemaValueException("data.@center must contain at least 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 3:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@info" in data_keys:
                    data_keys.remove("@info")
                    data__info = data["@info"]
                    if not isinstance(data__info, (list, tuple)):
                        raise JsonSchemaValueException("data.@info must be array", value=data__info, name="data.@info", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, rule='type')
                    data__info_is_list = isinstance(data__info, (list, tuple))
                    if data__info_is_list:
                        data__info_len = len(data__info)
                        for data__info_x, data__info_item in enumerate(data__info):
                            if not isinstance(data__info_item, (str)):
                                raise JsonSchemaValueException(""+"data.@info[{data__info_x}]".format(**locals())+" must be string", value=data__info_item, name=""+"data.@info[{data__info_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "-joints" in data_keys:
                    data_keys.remove("-joints")
                    data__joints = data["-joints"]
                    validate_x3d_3_0_jsonschema_json___defs__hanimjointmfnode(data__joints)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@rotation" in data_keys:
                    data_keys.remove("@rotation")
                    data__rotation = data["@rotation"]
                    if not isinstance(data__rotation, (list, tuple)):
                        raise JsonSchemaValueException("data.@rotation must be array", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__rotation_is_list = isinstance(data__rotation, (list, tuple))
                    if data__rotation_is_list:
                        data__rotation_len = len(data__rotation)
                        if data__rotation_len < 4:
                            raise JsonSchemaValueException("data.@rotation must contain at least 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__rotation_len > 4:
                            raise JsonSchemaValueException("data.@rotation must contain less than or equal to 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__rotation:
                            raise JsonSchemaValueException("data.@rotation must not be there", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@scale" in data_keys:
                    data_keys.remove("@scale")
                    data__scale = data["@scale"]
                    if not isinstance(data__scale, (list, tuple)):
                        raise JsonSchemaValueException("data.@scale must be array", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='type')
                    data__scale_is_list = isinstance(data__scale, (list, tuple))
                    if data__scale_is_list:
                        data__scale_len = len(data__scale)
                        if data__scale_len < 3:
                            raise JsonSchemaValueException("data.@scale must contain at least 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__scale_len > 3:
                            raise JsonSchemaValueException("data.@scale must contain less than or equal to 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__scale_x, data__scale_item in enumerate(data__scale):
                            if not isinstance(data__scale_item, (int, float)) or isinstance(data__scale_item, bool):
                                raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be number", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__scale_item, (int, float)):
                                if data__scale_item <= 0:
                                    raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be bigger than 0", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}, rule='exclusiveMinimum')
                if "@scaleOrientation" in data_keys:
                    data_keys.remove("@scaleOrientation")
                    data__scaleOrientation = data["@scaleOrientation"]
                    if not isinstance(data__scaleOrientation, (list, tuple)):
                        raise JsonSchemaValueException("data.@scaleOrientation must be array", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__scaleOrientation_is_list = isinstance(data__scaleOrientation, (list, tuple))
                    if data__scaleOrientation_is_list:
                        data__scaleOrientation_len = len(data__scaleOrientation)
                        if data__scaleOrientation_len < 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain at least 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__scaleOrientation_len > 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain less than or equal to 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__scaleOrientation:
                            raise JsonSchemaValueException("data.@scaleOrientation must not be there", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "-segments" in data_keys:
                    data_keys.remove("-segments")
                    data__segments = data["-segments"]
                    validate_x3d_3_0_jsonschema_json___defs__hanimsegmentmfnode(data__segments)
                if "-sites" in data_keys:
                    data_keys.remove("-sites")
                    data__sites = data["-sites"]
                    validate_x3d_3_0_jsonschema_json___defs__hanimsitemfnode(data__sites)
                if "-skeleton" in data_keys:
                    data_keys.remove("-skeleton")
                    data__skeleton = data["-skeleton"]
                    validate_x3d_3_0_jsonschema_json___defs__hanimjoint_hanimsitemfnode(data__skeleton)
                if "-skin" in data_keys:
                    data_keys.remove("-skin")
                    data__skin = data["-skin"]
                    validate_x3d_3_0_jsonschema_json___defs__group_transform_shape_indexedfacesetmfnode(data__skin)
                if "-skinCoord" in data_keys:
                    data_keys.remove("-skinCoord")
                    data__skinCoord = data["-skinCoord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__skinCoord)
                if "-skinNormal" in data_keys:
                    data_keys.remove("-skinNormal")
                    data__skinNormal = data["-skinNormal"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnormalnodesfnode(data__skinNormal)
                if "@translation" in data_keys:
                    data_keys.remove("@translation")
                    data__translation = data["@translation"]
                    if not isinstance(data__translation, (list, tuple)):
                        raise JsonSchemaValueException("data.@translation must be array", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__translation_is_list = isinstance(data__translation, (list, tuple))
                    if data__translation_is_list:
                        data__translation_len = len(data__translation)
                        if data__translation_len < 3:
                            raise JsonSchemaValueException("data.@translation must contain at least 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__translation_len > 3:
                            raise JsonSchemaValueException("data.@translation must contain less than or equal to 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__translation_x, data__translation_item in enumerate(data__translation):
                            if not isinstance(data__translation_item, (int, float)) or isinstance(data__translation_item, bool):
                                raise JsonSchemaValueException(""+"data.@translation[{data__translation_x}]".format(**locals())+" must be number", value=data__translation_item, name=""+"data.@translation[{data__translation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@version" in data_keys:
                    data_keys.remove("@version")
                    data__version = data["@version"]
                    if not isinstance(data__version, (str)):
                        raise JsonSchemaValueException("data.@version must be string", value=data__version, name="data.@version", definition={'enum': ['1.0', '2.0'], 'default': '1.0', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data__version not in ['1.0', '2.0']:
                        raise JsonSchemaValueException("data.@version must be one of ['1.0', '2.0']", value=data__version, name="data.@version", definition={'enum': ['1.0', '2.0'], 'default': '1.0', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                else: data["@version"] = '1.0'
                if "-viewpoints" in data_keys:
                    data_keys.remove("-viewpoints")
                    data__viewpoints = data["-viewpoints"]
                    validate_x3d_3_0_jsonschema_json___defs__hanimsitemfnode(data__viewpoints)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-joints': {'$ref': '#/$defs/-HAnimJointMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '-segments': {'$ref': '#/$defs/-HAnimSegmentMFNode'}, '-sites': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '-skeleton': {'$ref': '#/$defs/-HAnimJoint-HAnimSiteMFNode'}, '-skin': {'$ref': '#/$defs/-Group-Transform-Shape-IndexedFaceSetMFNode'}, '-skinCoord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-skinNormal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@version': {'enum': ['1.0', '2.0'], 'default': '1.0', '$comment': 'SFString inputOutput', 'type': 'string'}, '-viewpoints': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-joints': {'$ref': '#/$defs/-HAnimJointMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '-segments': {'$ref': '#/$defs/-HAnimSegmentMFNode'}, '-sites': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '-skeleton': {'$ref': '#/$defs/-HAnimJoint-HAnimSiteMFNode'}, '-skin': {'$ref': '#/$defs/-Group-Transform-Shape-IndexedFaceSetMFNode'}, '-skinCoord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-skinNormal': {'$ref': '#/$defs/-X3DNormalNodeSFNode'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@version': {'enum': ['1.0', '2.0'], 'default': '1.0', '$comment': 'SFString inputOutput', 'type': 'string'}, '-viewpoints': {'$ref': '#/$defs/-HAnimSiteMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__group_transform_shape_indexedfacesetmfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "Group" in data_item_keys:
                    data_item_keys.remove("Group")
                    data_item__Group = data_item["Group"]
                    validate_x3d_3_0_jsonschema_json___defs_group(data_item__Group)
                if "Transform" in data_item_keys:
                    data_item_keys.remove("Transform")
                    data_item__Transform = data_item["Transform"]
                    validate_x3d_3_0_jsonschema_json___defs_transform(data_item__Transform)
                if "Shape" in data_item_keys:
                    data_item_keys.remove("Shape")
                    data_item__Shape = data_item["Shape"]
                    validate_x3d_3_0_jsonschema_json___defs_shape(data_item__Shape)
                if "IndexedFaceSet" in data_item_keys:
                    data_item_keys.remove("IndexedFaceSet")
                    data_item__IndexedFaceSet = data_item["IndexedFaceSet"]
                    validate_x3d_3_0_jsonschema_json___defs_indexedfaceset(data_item__IndexedFaceSet)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__hanimjoint_hanimsitemfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "HAnimJoint" in data_item_keys:
                    data_item_keys.remove("HAnimJoint")
                    data_item__HAnimJoint = data_item["HAnimJoint"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimjoint(data_item__HAnimJoint)
                if "HAnimSite" in data_item_keys:
                    data_item_keys.remove("HAnimSite")
                    data_item__HAnimSite = data_item["HAnimSite"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsite(data_item__HAnimSite)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__hanimsitemfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "HAnimSite" in data_item_keys:
                    data_item_keys.remove("HAnimSite")
                    data_item__HAnimSite = data_item["HAnimSite"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsite(data_item__HAnimSite)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__hanimsegmentmfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "HAnimSegment" in data_item_keys:
                    data_item_keys.remove("HAnimSegment")
                    data_item__HAnimSegment = data_item["HAnimSegment"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimsegment(data_item__HAnimSegment)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__hanimjointmfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "HAnimJoint" in data_item_keys:
                    data_item_keys.remove("HAnimJoint")
                    data_item__HAnimJoint = data_item["HAnimJoint"]
                    validate_x3d_3_0_jsonschema_json___defs_hanimjoint(data_item__HAnimJoint)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_geolod(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@child1Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child2Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child3Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child4Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'default': 10, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-rootNode': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@rootUrl': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@child1Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child2Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child3Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child4Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'default': 10, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-rootNode': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@rootUrl': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 3:
                            raise JsonSchemaValueException("data.@center must contain at least 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 3:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@child1Url" in data_keys:
                    data_keys.remove("@child1Url")
                    data__child1Url = data["@child1Url"]
                    if not isinstance(data__child1Url, (list, tuple)):
                        raise JsonSchemaValueException("data.@child1Url must be array", value=data__child1Url, name="data.@child1Url", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__child1Url_is_list = isinstance(data__child1Url, (list, tuple))
                    if data__child1Url_is_list:
                        data__child1Url_len = len(data__child1Url)
                        if data__child1Url_len < 1:
                            raise JsonSchemaValueException("data.@child1Url must contain at least 1 items", value=data__child1Url, name="data.@child1Url", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__child1Url_x, data__child1Url_item in enumerate(data__child1Url):
                            if not isinstance(data__child1Url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@child1Url[{data__child1Url_x}]".format(**locals())+" must be string", value=data__child1Url_item, name=""+"data.@child1Url[{data__child1Url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__child1Url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__child1Url_item):
                                    raise JsonSchemaValueException(""+"data.@child1Url[{data__child1Url_x}]".format(**locals())+" must be uri-reference", value=data__child1Url_item, name=""+"data.@child1Url[{data__child1Url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@child2Url" in data_keys:
                    data_keys.remove("@child2Url")
                    data__child2Url = data["@child2Url"]
                    if not isinstance(data__child2Url, (list, tuple)):
                        raise JsonSchemaValueException("data.@child2Url must be array", value=data__child2Url, name="data.@child2Url", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__child2Url_is_list = isinstance(data__child2Url, (list, tuple))
                    if data__child2Url_is_list:
                        data__child2Url_len = len(data__child2Url)
                        if data__child2Url_len < 1:
                            raise JsonSchemaValueException("data.@child2Url must contain at least 1 items", value=data__child2Url, name="data.@child2Url", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__child2Url_x, data__child2Url_item in enumerate(data__child2Url):
                            if not isinstance(data__child2Url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@child2Url[{data__child2Url_x}]".format(**locals())+" must be string", value=data__child2Url_item, name=""+"data.@child2Url[{data__child2Url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__child2Url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__child2Url_item):
                                    raise JsonSchemaValueException(""+"data.@child2Url[{data__child2Url_x}]".format(**locals())+" must be uri-reference", value=data__child2Url_item, name=""+"data.@child2Url[{data__child2Url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@child3Url" in data_keys:
                    data_keys.remove("@child3Url")
                    data__child3Url = data["@child3Url"]
                    if not isinstance(data__child3Url, (list, tuple)):
                        raise JsonSchemaValueException("data.@child3Url must be array", value=data__child3Url, name="data.@child3Url", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__child3Url_is_list = isinstance(data__child3Url, (list, tuple))
                    if data__child3Url_is_list:
                        data__child3Url_len = len(data__child3Url)
                        if data__child3Url_len < 1:
                            raise JsonSchemaValueException("data.@child3Url must contain at least 1 items", value=data__child3Url, name="data.@child3Url", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__child3Url_x, data__child3Url_item in enumerate(data__child3Url):
                            if not isinstance(data__child3Url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@child3Url[{data__child3Url_x}]".format(**locals())+" must be string", value=data__child3Url_item, name=""+"data.@child3Url[{data__child3Url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__child3Url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__child3Url_item):
                                    raise JsonSchemaValueException(""+"data.@child3Url[{data__child3Url_x}]".format(**locals())+" must be uri-reference", value=data__child3Url_item, name=""+"data.@child3Url[{data__child3Url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@child4Url" in data_keys:
                    data_keys.remove("@child4Url")
                    data__child4Url = data["@child4Url"]
                    if not isinstance(data__child4Url, (list, tuple)):
                        raise JsonSchemaValueException("data.@child4Url must be array", value=data__child4Url, name="data.@child4Url", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__child4Url_is_list = isinstance(data__child4Url, (list, tuple))
                    if data__child4Url_is_list:
                        data__child4Url_len = len(data__child4Url)
                        if data__child4Url_len < 1:
                            raise JsonSchemaValueException("data.@child4Url must contain at least 1 items", value=data__child4Url, name="data.@child4Url", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__child4Url_x, data__child4Url_item in enumerate(data__child4Url):
                            if not isinstance(data__child4Url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@child4Url[{data__child4Url_x}]".format(**locals())+" must be string", value=data__child4Url_item, name=""+"data.@child4Url[{data__child4Url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__child4Url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__child4Url_item):
                                    raise JsonSchemaValueException(""+"data.@child4Url[{data__child4Url_x}]".format(**locals())+" must be uri-reference", value=data__child4Url_item, name=""+"data.@child4Url[{data__child4Url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "-geoOrigin" in data_keys:
                    data_keys.remove("-geoOrigin")
                    data__geoOrigin = data["-geoOrigin"]
                    validate_x3d_3_0_jsonschema_json___defs__geooriginsfnode(data__geoOrigin)
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@range" in data_keys:
                    data_keys.remove("@range")
                    data__range = data["@range"]
                    if not isinstance(data__range, (int, float)) or isinstance(data__range, bool):
                        raise JsonSchemaValueException("data.@range must be number", value=data__range, name="data.@range", definition={'default': 10, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@range"] = 10
                if "-rootNode" in data_keys:
                    data_keys.remove("-rootNode")
                    data__rootNode = data["-rootNode"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__rootNode)
                if "@rootUrl" in data_keys:
                    data_keys.remove("@rootUrl")
                    data__rootUrl = data["@rootUrl"]
                    if not isinstance(data__rootUrl, (list, tuple)):
                        raise JsonSchemaValueException("data.@rootUrl must be array", value=data__rootUrl, name="data.@rootUrl", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__rootUrl_is_list = isinstance(data__rootUrl, (list, tuple))
                    if data__rootUrl_is_list:
                        data__rootUrl_len = len(data__rootUrl)
                        if data__rootUrl_len < 1:
                            raise JsonSchemaValueException("data.@rootUrl must contain at least 1 items", value=data__rootUrl, name="data.@rootUrl", definition={'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__rootUrl_x, data__rootUrl_item in enumerate(data__rootUrl):
                            if not isinstance(data__rootUrl_item, (str)):
                                raise JsonSchemaValueException(""+"data.@rootUrl[{data__rootUrl_x}]".format(**locals())+" must be string", value=data__rootUrl_item, name=""+"data.@rootUrl[{data__rootUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__rootUrl_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__rootUrl_item):
                                    raise JsonSchemaValueException(""+"data.@rootUrl[{data__rootUrl_x}]".format(**locals())+" must be uri-reference", value=data__rootUrl_item, name=""+"data.@rootUrl[{data__rootUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@child1Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child2Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child3Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child4Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'default': 10, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-rootNode': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@rootUrl': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3d initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@child1Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child2Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child3Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@child4Url': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'default': 10, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '-rootNode': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@rootUrl': {'$comment': 'MFString initializeOnly', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_externprotodeclare(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}}, 'required': ['@name', '@url'], 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_len = len(data)
        if not all(prop in data for prop in ['@name', '@url']):
            raise JsonSchemaValueException("data must contain ['@name', '@url'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}}, 'required': ['@name', '@url'], 'additionalProperties': False}, rule='required')
        data_keys = set(data.keys())
        if "field" in data_keys:
            data_keys.remove("field")
            data__field = data["field"]
            validate_x3d_3_0_jsonschema_json___defs_field(data__field)
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "@appinfo" in data_keys:
            data_keys.remove("@appinfo")
            data__appinfo = data["@appinfo"]
            if not isinstance(data__appinfo, (str)):
                raise JsonSchemaValueException("data.@appinfo must be string", value=data__appinfo, name="data.@appinfo", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@documentation" in data_keys:
            data_keys.remove("@documentation")
            data__documentation = data["@documentation"]
            if not isinstance(data__documentation, (str)):
                raise JsonSchemaValueException("data.@documentation must be string", value=data__documentation, name="data.@documentation", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@name" in data_keys:
            data_keys.remove("@name")
            data__name = data["@name"]
            if not isinstance(data__name, (str)):
                raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@url" in data_keys:
            data_keys.remove("@url")
            data__url = data["@url"]
            if not isinstance(data__url, (list, tuple)):
                raise JsonSchemaValueException("data.@url must be array", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
            data__url_is_list = isinstance(data__url, (list, tuple))
            if data__url_is_list:
                data__url_len = len(data__url)
                if data__url_len < 1:
                    raise JsonSchemaValueException("data.@url must contain at least 1 items", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                for data__url_x, data__url_item in enumerate(data__url):
                    if not isinstance(data__url_item, (str)):
                        raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be string", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                    if isinstance(data__url_item, str):
                        if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__url_item):
                            raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be uri-reference", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'field': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/field'}, '-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@appinfo': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@documentation': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}}, 'required': ['@name', '@url'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_booleantoggle(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@toggle': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@toggle': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@toggle" in data_keys:
                    data_keys.remove("@toggle")
                    data__toggle = data["@toggle"]
                    if not isinstance(data__toggle, (bool)):
                        raise JsonSchemaValueException("data.@toggle must be boolean", value=data__toggle, name="data.@toggle", definition={'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@toggle"] = False
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@toggle': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@toggle': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_booleanfilter(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_timetrigger(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_integertrigger(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@integerKey': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@integerKey': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@integerKey" in data_keys:
                    data_keys.remove("@integerKey")
                    data__integerKey = data["@integerKey"]
                    if not isinstance(data__integerKey, (int)) and not (isinstance(data__integerKey, float) and data__integerKey.is_integer()) or isinstance(data__integerKey, bool):
                        raise JsonSchemaValueException("data.@integerKey must be integer", value=data__integerKey, name="data.@integerKey", definition={'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@integerKey"] = -1
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@integerKey': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@integerKey': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_booleantrigger(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_movietexture(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@loop" in data_keys:
                    data_keys.remove("@loop")
                    data__loop = data["@loop"]
                    if not isinstance(data__loop, (bool)):
                        raise JsonSchemaValueException("data.@loop must be boolean", value=data__loop, name="data.@loop", definition={'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@loop"] = False
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@pauseTime" in data_keys:
                    data_keys.remove("@pauseTime")
                    data__pauseTime = data["@pauseTime"]
                    if not isinstance(data__pauseTime, (int, float)) or isinstance(data__pauseTime, bool):
                        raise JsonSchemaValueException("data.@pauseTime must be number", value=data__pauseTime, name="data.@pauseTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@pauseTime"] = 0
                if "@pitch" in data_keys:
                    data_keys.remove("@pitch")
                    data__pitch = data["@pitch"]
                    if not isinstance(data__pitch, (int, float)) or isinstance(data__pitch, bool):
                        raise JsonSchemaValueException("data.@pitch must be number", value=data__pitch, name="data.@pitch", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@pitch"] = 1
                if "@repeatS" in data_keys:
                    data_keys.remove("@repeatS")
                    data__repeatS = data["@repeatS"]
                    if not isinstance(data__repeatS, (bool)):
                        raise JsonSchemaValueException("data.@repeatS must be boolean", value=data__repeatS, name="data.@repeatS", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@repeatS"] = True
                if "@repeatT" in data_keys:
                    data_keys.remove("@repeatT")
                    data__repeatT = data["@repeatT"]
                    if not isinstance(data__repeatT, (bool)):
                        raise JsonSchemaValueException("data.@repeatT must be boolean", value=data__repeatT, name="data.@repeatT", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@repeatT"] = True
                if "@resumeTime" in data_keys:
                    data_keys.remove("@resumeTime")
                    data__resumeTime = data["@resumeTime"]
                    if not isinstance(data__resumeTime, (int, float)) or isinstance(data__resumeTime, bool):
                        raise JsonSchemaValueException("data.@resumeTime must be number", value=data__resumeTime, name="data.@resumeTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@resumeTime"] = 0
                if "@speed" in data_keys:
                    data_keys.remove("@speed")
                    data__speed = data["@speed"]
                    if not isinstance(data__speed, (int, float)) or isinstance(data__speed, bool):
                        raise JsonSchemaValueException("data.@speed must be number", value=data__speed, name="data.@speed", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@speed"] = 1
                if "@startTime" in data_keys:
                    data_keys.remove("@startTime")
                    data__startTime = data["@startTime"]
                    if not isinstance(data__startTime, (int, float)) or isinstance(data__startTime, bool):
                        raise JsonSchemaValueException("data.@startTime must be number", value=data__startTime, name="data.@startTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@startTime"] = 0
                if "@stopTime" in data_keys:
                    data_keys.remove("@stopTime")
                    data__stopTime = data["@stopTime"]
                    if not isinstance(data__stopTime, (int, float)) or isinstance(data__stopTime, bool):
                        raise JsonSchemaValueException("data.@stopTime must be number", value=data__stopTime, name="data.@stopTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@stopTime"] = 0
                if "@url" in data_keys:
                    data_keys.remove("@url")
                    data__url = data["@url"]
                    if not isinstance(data__url, (list, tuple)):
                        raise JsonSchemaValueException("data.@url must be array", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__url_is_list = isinstance(data__url, (list, tuple))
                    if data__url_is_list:
                        data__url_len = len(data__url)
                        if data__url_len < 1:
                            raise JsonSchemaValueException("data.@url must contain at least 1 items", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__url_x, data__url_item in enumerate(data__url):
                            if not isinstance(data__url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be string", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__url_item):
                                    raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be uri-reference", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@repeatS': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@repeatT': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_audioclip(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@loop" in data_keys:
                    data_keys.remove("@loop")
                    data__loop = data["@loop"]
                    if not isinstance(data__loop, (bool)):
                        raise JsonSchemaValueException("data.@loop must be boolean", value=data__loop, name="data.@loop", definition={'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@loop"] = False
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@pauseTime" in data_keys:
                    data_keys.remove("@pauseTime")
                    data__pauseTime = data["@pauseTime"]
                    if not isinstance(data__pauseTime, (int, float)) or isinstance(data__pauseTime, bool):
                        raise JsonSchemaValueException("data.@pauseTime must be number", value=data__pauseTime, name="data.@pauseTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@pauseTime"] = 0
                if "@pitch" in data_keys:
                    data_keys.remove("@pitch")
                    data__pitch = data["@pitch"]
                    if not isinstance(data__pitch, (int, float)) or isinstance(data__pitch, bool):
                        raise JsonSchemaValueException("data.@pitch must be number", value=data__pitch, name="data.@pitch", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@pitch"] = 1
                if "@resumeTime" in data_keys:
                    data_keys.remove("@resumeTime")
                    data__resumeTime = data["@resumeTime"]
                    if not isinstance(data__resumeTime, (int, float)) or isinstance(data__resumeTime, bool):
                        raise JsonSchemaValueException("data.@resumeTime must be number", value=data__resumeTime, name="data.@resumeTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@resumeTime"] = 0
                if "@startTime" in data_keys:
                    data_keys.remove("@startTime")
                    data__startTime = data["@startTime"]
                    if not isinstance(data__startTime, (int, float)) or isinstance(data__startTime, bool):
                        raise JsonSchemaValueException("data.@startTime must be number", value=data__startTime, name="data.@startTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@startTime"] = 0
                if "@stopTime" in data_keys:
                    data_keys.remove("@stopTime")
                    data__stopTime = data["@stopTime"]
                    if not isinstance(data__stopTime, (int, float)) or isinstance(data__stopTime, bool):
                        raise JsonSchemaValueException("data.@stopTime must be number", value=data__stopTime, name="data.@stopTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@stopTime"] = 0
                if "@url" in data_keys:
                    data_keys.remove("@url")
                    data__url = data["@url"]
                    if not isinstance(data__url, (list, tuple)):
                        raise JsonSchemaValueException("data.@url must be array", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__url_is_list = isinstance(data__url, (list, tuple))
                    if data__url_is_list:
                        data__url_len = len(data__url)
                        if data__url_len < 1:
                            raise JsonSchemaValueException("data.@url must contain at least 1 items", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__url_x, data__url_item in enumerate(data__url):
                            if not isinstance(data__url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be string", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__url_item):
                                    raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be uri-reference", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@pitch': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_sound(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@maxBack': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@maxFront': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minBack': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@minFront': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@priority': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-source': {'$ref': '#/$defs/-X3DSoundSourceNodeSFNode'}, '@spatialize': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@maxBack': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@maxFront': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minBack': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@minFront': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@priority': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-source': {'$ref': '#/$defs/-X3DSoundSourceNodeSFNode'}, '@spatialize': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@direction" in data_keys:
                    data_keys.remove("@direction")
                    data__direction = data["@direction"]
                    if not isinstance(data__direction, (list, tuple)):
                        raise JsonSchemaValueException("data.@direction must be array", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, rule='type')
                    data__direction_is_list = isinstance(data__direction, (list, tuple))
                    if data__direction_is_list:
                        data__direction_len = len(data__direction)
                        if data__direction_len < 3:
                            raise JsonSchemaValueException("data.@direction must contain at least 3 items", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__direction_len > 3:
                            raise JsonSchemaValueException("data.@direction must contain less than or equal to 3 items", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__direction:
                            raise JsonSchemaValueException("data.@direction must not be there", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, rule='items')
                if "@intensity" in data_keys:
                    data_keys.remove("@intensity")
                    data__intensity = data["@intensity"]
                    if not isinstance(data__intensity, (int, float)) or isinstance(data__intensity, bool):
                        raise JsonSchemaValueException("data.@intensity must be number", value=data__intensity, name="data.@intensity", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@intensity"] = 1
                if "@location" in data_keys:
                    data_keys.remove("@location")
                    data__location = data["@location"]
                    if not isinstance(data__location, (list, tuple)):
                        raise JsonSchemaValueException("data.@location must be array", value=data__location, name="data.@location", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__location_is_list = isinstance(data__location, (list, tuple))
                    if data__location_is_list:
                        data__location_len = len(data__location)
                        if data__location_len < 3:
                            raise JsonSchemaValueException("data.@location must contain at least 3 items", value=data__location, name="data.@location", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__location_len > 3:
                            raise JsonSchemaValueException("data.@location must contain less than or equal to 3 items", value=data__location, name="data.@location", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__location_x, data__location_item in enumerate(data__location):
                            if not isinstance(data__location_item, (int, float)) or isinstance(data__location_item, bool):
                                raise JsonSchemaValueException(""+"data.@location[{data__location_x}]".format(**locals())+" must be number", value=data__location_item, name=""+"data.@location[{data__location_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@maxBack" in data_keys:
                    data_keys.remove("@maxBack")
                    data__maxBack = data["@maxBack"]
                    if not isinstance(data__maxBack, (int, float)) or isinstance(data__maxBack, bool):
                        raise JsonSchemaValueException("data.@maxBack must be number", value=data__maxBack, name="data.@maxBack", definition={'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@maxBack"] = 10
                if "@maxFront" in data_keys:
                    data_keys.remove("@maxFront")
                    data__maxFront = data["@maxFront"]
                    if not isinstance(data__maxFront, (int, float)) or isinstance(data__maxFront, bool):
                        raise JsonSchemaValueException("data.@maxFront must be number", value=data__maxFront, name="data.@maxFront", definition={'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@maxFront"] = 10
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@minBack" in data_keys:
                    data_keys.remove("@minBack")
                    data__minBack = data["@minBack"]
                    if not isinstance(data__minBack, (int, float)) or isinstance(data__minBack, bool):
                        raise JsonSchemaValueException("data.@minBack must be number", value=data__minBack, name="data.@minBack", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@minBack"] = 1
                if "@minFront" in data_keys:
                    data_keys.remove("@minFront")
                    data__minFront = data["@minFront"]
                    if not isinstance(data__minFront, (int, float)) or isinstance(data__minFront, bool):
                        raise JsonSchemaValueException("data.@minFront must be number", value=data__minFront, name="data.@minFront", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@minFront"] = 1
                if "@priority" in data_keys:
                    data_keys.remove("@priority")
                    data__priority = data["@priority"]
                    if not isinstance(data__priority, (int, float)) or isinstance(data__priority, bool):
                        raise JsonSchemaValueException("data.@priority must be number", value=data__priority, name="data.@priority", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@priority"] = 0
                if "-source" in data_keys:
                    data_keys.remove("-source")
                    data__source = data["-source"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dsoundsourcenodesfnode(data__source)
                if "@spatialize" in data_keys:
                    data_keys.remove("@spatialize")
                    data__spatialize = data["@spatialize"]
                    if not isinstance(data__spatialize, (bool)):
                        raise JsonSchemaValueException("data.@spatialize must be boolean", value=data__spatialize, name="data.@spatialize", definition={'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@spatialize"] = True
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@maxBack': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@maxFront': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minBack': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@minFront': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@priority': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-source': {'$ref': '#/$defs/-X3DSoundSourceNodeSFNode'}, '@spatialize': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@maxBack': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@maxFront': {'default': 10, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minBack': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@minFront': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@priority': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-source': {'$ref': '#/$defs/-X3DSoundSourceNodeSFNode'}, '@spatialize': {'default': True, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dsoundsourcenodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "AudioClip" in data_keys:
            data_keys.remove("AudioClip")
            data__AudioClip = data["AudioClip"]
            validate_x3d_3_0_jsonschema_json___defs_audioclip(data__AudioClip)
        if "MovieTexture" in data_keys:
            data_keys.remove("MovieTexture")
            data__MovieTexture = data["MovieTexture"]
            validate_x3d_3_0_jsonschema_json___defs_movietexture(data__MovieTexture)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_shape(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-appearance': {'$ref': '#/$defs/-X3DAppearanceNodeSFNode'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DGeometryNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-appearance': {'$ref': '#/$defs/-X3DAppearanceNodeSFNode'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DGeometryNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-appearance" in data_keys:
                    data_keys.remove("-appearance")
                    data__appearance = data["-appearance"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dappearancenodesfnode(data__appearance)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-geometry" in data_keys:
                    data_keys.remove("-geometry")
                    data__geometry = data["-geometry"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dgeometrynodesfnode(data__geometry)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-appearance': {'$ref': '#/$defs/-X3DAppearanceNodeSFNode'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DGeometryNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-appearance': {'$ref': '#/$defs/-X3DAppearanceNodeSFNode'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-geometry': {'$ref': '#/$defs/-X3DGeometryNodeSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dgeometrynodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "IndexedFaceSet" in data_keys:
            data_keys.remove("IndexedFaceSet")
            data__IndexedFaceSet = data["IndexedFaceSet"]
            validate_x3d_3_0_jsonschema_json___defs_indexedfaceset(data__IndexedFaceSet)
        if "IndexedTriangleFanSet" in data_keys:
            data_keys.remove("IndexedTriangleFanSet")
            data__IndexedTriangleFanSet = data["IndexedTriangleFanSet"]
            validate_x3d_3_0_jsonschema_json___defs_indexedtrianglefanset(data__IndexedTriangleFanSet)
        if "IndexedTriangleSet" in data_keys:
            data_keys.remove("IndexedTriangleSet")
            data__IndexedTriangleSet = data["IndexedTriangleSet"]
            validate_x3d_3_0_jsonschema_json___defs_indexedtriangleset(data__IndexedTriangleSet)
        if "IndexedTriangleStripSet" in data_keys:
            data_keys.remove("IndexedTriangleStripSet")
            data__IndexedTriangleStripSet = data["IndexedTriangleStripSet"]
            validate_x3d_3_0_jsonschema_json___defs_indexedtrianglestripset(data__IndexedTriangleStripSet)
        if "TriangleFanSet" in data_keys:
            data_keys.remove("TriangleFanSet")
            data__TriangleFanSet = data["TriangleFanSet"]
            validate_x3d_3_0_jsonschema_json___defs_trianglefanset(data__TriangleFanSet)
        if "TriangleSet" in data_keys:
            data_keys.remove("TriangleSet")
            data__TriangleSet = data["TriangleSet"]
            validate_x3d_3_0_jsonschema_json___defs_triangleset(data__TriangleSet)
        if "TriangleStripSet" in data_keys:
            data_keys.remove("TriangleStripSet")
            data__TriangleStripSet = data["TriangleStripSet"]
            validate_x3d_3_0_jsonschema_json___defs_trianglestripset(data__TriangleStripSet)
        if "NurbsPatchSurface" in data_keys:
            data_keys.remove("NurbsPatchSurface")
            data__NurbsPatchSurface = data["NurbsPatchSurface"]
            validate_x3d_3_0_jsonschema_json___defs_nurbspatchsurface(data__NurbsPatchSurface)
        if "NurbsTrimmedSurface" in data_keys:
            data_keys.remove("NurbsTrimmedSurface")
            data__NurbsTrimmedSurface = data["NurbsTrimmedSurface"]
            validate_x3d_3_0_jsonschema_json___defs_nurbstrimmedsurface(data__NurbsTrimmedSurface)
        if "NurbsCurve" in data_keys:
            data_keys.remove("NurbsCurve")
            data__NurbsCurve = data["NurbsCurve"]
            validate_x3d_3_0_jsonschema_json___defs_nurbscurve(data__NurbsCurve)
        if "NurbsSweptSurface" in data_keys:
            data_keys.remove("NurbsSweptSurface")
            data__NurbsSweptSurface = data["NurbsSweptSurface"]
            validate_x3d_3_0_jsonschema_json___defs_nurbssweptsurface(data__NurbsSweptSurface)
        if "NurbsSwungSurface" in data_keys:
            data_keys.remove("NurbsSwungSurface")
            data__NurbsSwungSurface = data["NurbsSwungSurface"]
            validate_x3d_3_0_jsonschema_json___defs_nurbsswungsurface(data__NurbsSwungSurface)
        if "Arc2D" in data_keys:
            data_keys.remove("Arc2D")
            data__Arc2D = data["Arc2D"]
            validate_x3d_3_0_jsonschema_json___defs_arc2d(data__Arc2D)
        if "ArcClose2D" in data_keys:
            data_keys.remove("ArcClose2D")
            data__ArcClose2D = data["ArcClose2D"]
            validate_x3d_3_0_jsonschema_json___defs_arcclose2d(data__ArcClose2D)
        if "Box" in data_keys:
            data_keys.remove("Box")
            data__Box = data["Box"]
            validate_x3d_3_0_jsonschema_json___defs_box(data__Box)
        if "Circle2D" in data_keys:
            data_keys.remove("Circle2D")
            data__Circle2D = data["Circle2D"]
            validate_x3d_3_0_jsonschema_json___defs_circle2d(data__Circle2D)
        if "Cone" in data_keys:
            data_keys.remove("Cone")
            data__Cone = data["Cone"]
            validate_x3d_3_0_jsonschema_json___defs_cone(data__Cone)
        if "Cylinder" in data_keys:
            data_keys.remove("Cylinder")
            data__Cylinder = data["Cylinder"]
            validate_x3d_3_0_jsonschema_json___defs_cylinder(data__Cylinder)
        if "Disk2D" in data_keys:
            data_keys.remove("Disk2D")
            data__Disk2D = data["Disk2D"]
            validate_x3d_3_0_jsonschema_json___defs_disk2d(data__Disk2D)
        if "ElevationGrid" in data_keys:
            data_keys.remove("ElevationGrid")
            data__ElevationGrid = data["ElevationGrid"]
            validate_x3d_3_0_jsonschema_json___defs_elevationgrid(data__ElevationGrid)
        if "Extrusion" in data_keys:
            data_keys.remove("Extrusion")
            data__Extrusion = data["Extrusion"]
            validate_x3d_3_0_jsonschema_json___defs_extrusion(data__Extrusion)
        if "GeoElevationGrid" in data_keys:
            data_keys.remove("GeoElevationGrid")
            data__GeoElevationGrid = data["GeoElevationGrid"]
            validate_x3d_3_0_jsonschema_json___defs_geoelevationgrid(data__GeoElevationGrid)
        if "IndexedLineSet" in data_keys:
            data_keys.remove("IndexedLineSet")
            data__IndexedLineSet = data["IndexedLineSet"]
            validate_x3d_3_0_jsonschema_json___defs_indexedlineset(data__IndexedLineSet)
        if "LineSet" in data_keys:
            data_keys.remove("LineSet")
            data__LineSet = data["LineSet"]
            validate_x3d_3_0_jsonschema_json___defs_lineset(data__LineSet)
        if "PointSet" in data_keys:
            data_keys.remove("PointSet")
            data__PointSet = data["PointSet"]
            validate_x3d_3_0_jsonschema_json___defs_pointset(data__PointSet)
        if "Polyline2D" in data_keys:
            data_keys.remove("Polyline2D")
            data__Polyline2D = data["Polyline2D"]
            validate_x3d_3_0_jsonschema_json___defs_polyline2d(data__Polyline2D)
        if "Polypoint2D" in data_keys:
            data_keys.remove("Polypoint2D")
            data__Polypoint2D = data["Polypoint2D"]
            validate_x3d_3_0_jsonschema_json___defs_polypoint2d(data__Polypoint2D)
        if "Rectangle2D" in data_keys:
            data_keys.remove("Rectangle2D")
            data__Rectangle2D = data["Rectangle2D"]
            validate_x3d_3_0_jsonschema_json___defs_rectangle2d(data__Rectangle2D)
        if "Sphere" in data_keys:
            data_keys.remove("Sphere")
            data__Sphere = data["Sphere"]
            validate_x3d_3_0_jsonschema_json___defs_sphere(data__Sphere)
        if "Text" in data_keys:
            data_keys.remove("Text")
            data__Text = data["Text"]
            validate_x3d_3_0_jsonschema_json___defs_text(data__Text)
        if "TriangleSet2D" in data_keys:
            data_keys.remove("TriangleSet2D")
            data__TriangleSet2D = data["TriangleSet2D"]
            validate_x3d_3_0_jsonschema_json___defs_triangleset2d(data__TriangleSet2D)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IndexedFaceSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedFaceSet'}, 'IndexedTriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleFanSet'}, 'IndexedTriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleSet'}, 'IndexedTriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedTriangleStripSet'}, 'TriangleFanSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleFanSet'}, 'TriangleSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet'}, 'TriangleStripSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleStripSet'}, 'NurbsPatchSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPatchSurface'}, 'NurbsTrimmedSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsTrimmedSurface'}, 'NurbsCurve': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsCurve'}, 'NurbsSweptSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSweptSurface'}, 'NurbsSwungSurface': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSwungSurface'}, 'Arc2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Arc2D'}, 'ArcClose2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ArcClose2D'}, 'Box': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Box'}, 'Circle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Circle2D'}, 'Cone': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cone'}, 'Cylinder': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Cylinder'}, 'Disk2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Disk2D'}, 'ElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ElevationGrid'}, 'Extrusion': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Extrusion'}, 'GeoElevationGrid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoElevationGrid'}, 'IndexedLineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IndexedLineSet'}, 'LineSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LineSet'}, 'PointSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointSet'}, 'Polyline2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polyline2D'}, 'Polypoint2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Polypoint2D'}, 'Rectangle2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Rectangle2D'}, 'Sphere': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sphere'}, 'Text': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Text'}, 'TriangleSet2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TriangleSet2D'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dappearancenodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "Appearance" in data_keys:
            data_keys.remove("Appearance")
            data__Appearance = data["Appearance"]
            validate_x3d_3_0_jsonschema_json___defs_appearance(data__Appearance)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'Appearance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Appearance'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_integersequencer(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int)) and not (isinstance(data__keyValue_item, float) and data__keyValue_item.is_integer()) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be integer", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'integer'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_booleansequencer(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFBool inputOutput', 'type': 'array', 'items': {'type': 'boolean'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFBool inputOutput', 'type': 'array', 'items': {'type': 'boolean'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFBool inputOutput', 'type': 'array', 'items': {'type': 'boolean'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (bool)):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be boolean", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'boolean'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFBool inputOutput', 'type': 'array', 'items': {'type': 'boolean'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFBool inputOutput', 'type': 'array', 'items': {'type': 'boolean'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_timesensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@cycleInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@cycleInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@cycleInterval" in data_keys:
                    data_keys.remove("@cycleInterval")
                    data__cycleInterval = data["@cycleInterval"]
                    if not isinstance(data__cycleInterval, (int, float)) or isinstance(data__cycleInterval, bool):
                        raise JsonSchemaValueException("data.@cycleInterval must be number", value=data__cycleInterval, name="data.@cycleInterval", definition={'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@cycleInterval"] = 1
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "@loop" in data_keys:
                    data_keys.remove("@loop")
                    data__loop = data["@loop"]
                    if not isinstance(data__loop, (bool)):
                        raise JsonSchemaValueException("data.@loop must be boolean", value=data__loop, name="data.@loop", definition={'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@loop"] = False
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@pauseTime" in data_keys:
                    data_keys.remove("@pauseTime")
                    data__pauseTime = data["@pauseTime"]
                    if not isinstance(data__pauseTime, (int, float)) or isinstance(data__pauseTime, bool):
                        raise JsonSchemaValueException("data.@pauseTime must be number", value=data__pauseTime, name="data.@pauseTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@pauseTime"] = 0
                if "@resumeTime" in data_keys:
                    data_keys.remove("@resumeTime")
                    data__resumeTime = data["@resumeTime"]
                    if not isinstance(data__resumeTime, (int, float)) or isinstance(data__resumeTime, bool):
                        raise JsonSchemaValueException("data.@resumeTime must be number", value=data__resumeTime, name="data.@resumeTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@resumeTime"] = 0
                if "@startTime" in data_keys:
                    data_keys.remove("@startTime")
                    data__startTime = data["@startTime"]
                    if not isinstance(data__startTime, (int, float)) or isinstance(data__startTime, bool):
                        raise JsonSchemaValueException("data.@startTime must be number", value=data__startTime, name="data.@startTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@startTime"] = 0
                if "@stopTime" in data_keys:
                    data_keys.remove("@stopTime")
                    data__stopTime = data["@stopTime"]
                    if not isinstance(data__stopTime, (int, float)) or isinstance(data__stopTime, bool):
                        raise JsonSchemaValueException("data.@stopTime must be number", value=data__stopTime, name="data.@stopTime", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@stopTime"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@cycleInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@cycleInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@loop': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@pauseTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@resumeTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@startTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@stopTime': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_touchsensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_geotouchsensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "-geoOrigin" in data_keys:
                    data_keys.remove("-geoOrigin")
                    data__geoOrigin = data["-geoOrigin"]
                    validate_x3d_3_0_jsonschema_json___defs__geooriginsfnode(data__geoOrigin)
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_spheresensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@offset': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@offset': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@autoOffset" in data_keys:
                    data_keys.remove("@autoOffset")
                    data__autoOffset = data["@autoOffset"]
                    if not isinstance(data__autoOffset, (bool)):
                        raise JsonSchemaValueException("data.@autoOffset must be boolean", value=data__autoOffset, name="data.@autoOffset", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@autoOffset"] = True
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@offset" in data_keys:
                    data_keys.remove("@offset")
                    data__offset = data["@offset"]
                    if not isinstance(data__offset, (list, tuple)):
                        raise JsonSchemaValueException("data.@offset must be array", value=data__offset, name="data.@offset", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__offset_is_list = isinstance(data__offset, (list, tuple))
                    if data__offset_is_list:
                        data__offset_len = len(data__offset)
                        if data__offset_len < 4:
                            raise JsonSchemaValueException("data.@offset must contain at least 4 items", value=data__offset, name="data.@offset", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__offset_len > 4:
                            raise JsonSchemaValueException("data.@offset must contain less than or equal to 4 items", value=data__offset, name="data.@offset", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__offset:
                            raise JsonSchemaValueException("data.@offset must not be there", value=data__offset, name="data.@offset", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@offset': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@offset': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_planesensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@offset': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@offset': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@autoOffset" in data_keys:
                    data_keys.remove("@autoOffset")
                    data__autoOffset = data["@autoOffset"]
                    if not isinstance(data__autoOffset, (bool)):
                        raise JsonSchemaValueException("data.@autoOffset must be boolean", value=data__autoOffset, name="data.@autoOffset", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@autoOffset"] = True
                if "@axisRotation" in data_keys:
                    data_keys.remove("@axisRotation")
                    data__axisRotation = data["@axisRotation"]
                    if not isinstance(data__axisRotation, (list, tuple)):
                        raise JsonSchemaValueException("data.@axisRotation must be array", value=data__axisRotation, name="data.@axisRotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__axisRotation_is_list = isinstance(data__axisRotation, (list, tuple))
                    if data__axisRotation_is_list:
                        data__axisRotation_len = len(data__axisRotation)
                        if data__axisRotation_len < 4:
                            raise JsonSchemaValueException("data.@axisRotation must contain at least 4 items", value=data__axisRotation, name="data.@axisRotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__axisRotation_len > 4:
                            raise JsonSchemaValueException("data.@axisRotation must contain less than or equal to 4 items", value=data__axisRotation, name="data.@axisRotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__axisRotation:
                            raise JsonSchemaValueException("data.@axisRotation must not be there", value=data__axisRotation, name="data.@axisRotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "@maxPosition" in data_keys:
                    data_keys.remove("@maxPosition")
                    data__maxPosition = data["@maxPosition"]
                    if not isinstance(data__maxPosition, (list, tuple)):
                        raise JsonSchemaValueException("data.@maxPosition must be array", value=data__maxPosition, name="data.@maxPosition", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__maxPosition_is_list = isinstance(data__maxPosition, (list, tuple))
                    if data__maxPosition_is_list:
                        data__maxPosition_len = len(data__maxPosition)
                        if data__maxPosition_len < 2:
                            raise JsonSchemaValueException("data.@maxPosition must contain at least 2 items", value=data__maxPosition, name="data.@maxPosition", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__maxPosition_len > 2:
                            raise JsonSchemaValueException("data.@maxPosition must contain less than or equal to 2 items", value=data__maxPosition, name="data.@maxPosition", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__maxPosition_x, data__maxPosition_item in enumerate(data__maxPosition):
                            if not isinstance(data__maxPosition_item, (int, float)) or isinstance(data__maxPosition_item, bool):
                                raise JsonSchemaValueException(""+"data.@maxPosition[{data__maxPosition_x}]".format(**locals())+" must be number", value=data__maxPosition_item, name=""+"data.@maxPosition[{data__maxPosition_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@minPosition" in data_keys:
                    data_keys.remove("@minPosition")
                    data__minPosition = data["@minPosition"]
                    if not isinstance(data__minPosition, (list, tuple)):
                        raise JsonSchemaValueException("data.@minPosition must be array", value=data__minPosition, name="data.@minPosition", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__minPosition_is_list = isinstance(data__minPosition, (list, tuple))
                    if data__minPosition_is_list:
                        data__minPosition_len = len(data__minPosition)
                        if data__minPosition_len < 2:
                            raise JsonSchemaValueException("data.@minPosition must contain at least 2 items", value=data__minPosition, name="data.@minPosition", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__minPosition_len > 2:
                            raise JsonSchemaValueException("data.@minPosition must contain less than or equal to 2 items", value=data__minPosition, name="data.@minPosition", definition={'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__minPosition_x, data__minPosition_item in enumerate(data__minPosition):
                            if not isinstance(data__minPosition_item, (int, float)) or isinstance(data__minPosition_item, bool):
                                raise JsonSchemaValueException(""+"data.@minPosition[{data__minPosition_x}]".format(**locals())+" must be number", value=data__minPosition_item, name=""+"data.@minPosition[{data__minPosition_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@offset" in data_keys:
                    data_keys.remove("@offset")
                    data__offset = data["@offset"]
                    if not isinstance(data__offset, (list, tuple)):
                        raise JsonSchemaValueException("data.@offset must be array", value=data__offset, name="data.@offset", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__offset_is_list = isinstance(data__offset, (list, tuple))
                    if data__offset_is_list:
                        data__offset_len = len(data__offset)
                        if data__offset_len < 3:
                            raise JsonSchemaValueException("data.@offset must contain at least 3 items", value=data__offset, name="data.@offset", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__offset_len > 3:
                            raise JsonSchemaValueException("data.@offset must contain less than or equal to 3 items", value=data__offset, name="data.@offset", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__offset_x, data__offset_item in enumerate(data__offset):
                            if not isinstance(data__offset_item, (int, float)) or isinstance(data__offset_item, bool):
                                raise JsonSchemaValueException(""+"data.@offset[{data__offset_x}]".format(**locals())+" must be number", value=data__offset_item, name=""+"data.@offset[{data__offset_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@offset': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': -1, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minPosition': {'$comment': 'SFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'maxItems': 2, 'items': {'default': 0, 'type': 'number'}}, '@offset': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_cylindersensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@diskAngle': {'default': 0.26179167, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxAngle': {'default': -1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minAngle': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@offset': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@diskAngle': {'default': 0.26179167, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxAngle': {'default': -1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minAngle': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@offset': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@autoOffset" in data_keys:
                    data_keys.remove("@autoOffset")
                    data__autoOffset = data["@autoOffset"]
                    if not isinstance(data__autoOffset, (bool)):
                        raise JsonSchemaValueException("data.@autoOffset must be boolean", value=data__autoOffset, name="data.@autoOffset", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@autoOffset"] = True
                if "@axisRotation" in data_keys:
                    data_keys.remove("@axisRotation")
                    data__axisRotation = data["@axisRotation"]
                    if not isinstance(data__axisRotation, (list, tuple)):
                        raise JsonSchemaValueException("data.@axisRotation must be array", value=data__axisRotation, name="data.@axisRotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__axisRotation_is_list = isinstance(data__axisRotation, (list, tuple))
                    if data__axisRotation_is_list:
                        data__axisRotation_len = len(data__axisRotation)
                        if data__axisRotation_len < 4:
                            raise JsonSchemaValueException("data.@axisRotation must contain at least 4 items", value=data__axisRotation, name="data.@axisRotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__axisRotation_len > 4:
                            raise JsonSchemaValueException("data.@axisRotation must contain less than or equal to 4 items", value=data__axisRotation, name="data.@axisRotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__axisRotation:
                            raise JsonSchemaValueException("data.@axisRotation must not be there", value=data__axisRotation, name="data.@axisRotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@diskAngle" in data_keys:
                    data_keys.remove("@diskAngle")
                    data__diskAngle = data["@diskAngle"]
                    if not isinstance(data__diskAngle, (int, float)) or isinstance(data__diskAngle, bool):
                        raise JsonSchemaValueException("data.@diskAngle must be number", value=data__diskAngle, name="data.@diskAngle", definition={'default': 0.26179167, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@diskAngle"] = 0.26179167
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "@maxAngle" in data_keys:
                    data_keys.remove("@maxAngle")
                    data__maxAngle = data["@maxAngle"]
                    if not isinstance(data__maxAngle, (int, float)) or isinstance(data__maxAngle, bool):
                        raise JsonSchemaValueException("data.@maxAngle must be number", value=data__maxAngle, name="data.@maxAngle", definition={'default': -1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@maxAngle"] = -1
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@minAngle" in data_keys:
                    data_keys.remove("@minAngle")
                    data__minAngle = data["@minAngle"]
                    if not isinstance(data__minAngle, (int, float)) or isinstance(data__minAngle, bool):
                        raise JsonSchemaValueException("data.@minAngle must be number", value=data__minAngle, name="data.@minAngle", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@minAngle"] = 0
                if "@offset" in data_keys:
                    data_keys.remove("@offset")
                    data__offset = data["@offset"]
                    if not isinstance(data__offset, (int, float)) or isinstance(data__offset, bool):
                        raise JsonSchemaValueException("data.@offset must be number", value=data__offset, name="data.@offset", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@offset"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@diskAngle': {'default': 0.26179167, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxAngle': {'default': -1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minAngle': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@offset': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@autoOffset': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@axisRotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@diskAngle': {'default': 0.26179167, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@maxAngle': {'default': -1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@minAngle': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@offset': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_transmitterpdu(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@antennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@antennaPatternLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@antennaPatternType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@cryptoKeyID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@cryptoSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@frequency': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@inputSource': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@lengthOfModulationParameters': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@modulationTypeDetail': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeMajor': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSpreadSpectrum': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@power': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@radioEntityTypeCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclature': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclatureVersion': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@relativeAntennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitFrequencyBandwidth': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transmitState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@antennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@antennaPatternLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@antennaPatternType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@cryptoKeyID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@cryptoSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@frequency': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@inputSource': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@lengthOfModulationParameters': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@modulationTypeDetail': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeMajor': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSpreadSpectrum': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@power': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@radioEntityTypeCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclature': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclatureVersion': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@relativeAntennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitFrequencyBandwidth': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transmitState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@address" in data_keys:
                    data_keys.remove("@address")
                    data__address = data["@address"]
                    if not isinstance(data__address, (str)):
                        raise JsonSchemaValueException("data.@address must be string", value=data__address, name="data.@address", definition={'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                else: data["@address"] = 'localhost'
                if "@antennaLocation" in data_keys:
                    data_keys.remove("@antennaLocation")
                    data__antennaLocation = data["@antennaLocation"]
                    if not isinstance(data__antennaLocation, (list, tuple)):
                        raise JsonSchemaValueException("data.@antennaLocation must be array", value=data__antennaLocation, name="data.@antennaLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__antennaLocation_is_list = isinstance(data__antennaLocation, (list, tuple))
                    if data__antennaLocation_is_list:
                        data__antennaLocation_len = len(data__antennaLocation)
                        if data__antennaLocation_len < 3:
                            raise JsonSchemaValueException("data.@antennaLocation must contain at least 3 items", value=data__antennaLocation, name="data.@antennaLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__antennaLocation_len > 3:
                            raise JsonSchemaValueException("data.@antennaLocation must contain less than or equal to 3 items", value=data__antennaLocation, name="data.@antennaLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__antennaLocation_x, data__antennaLocation_item in enumerate(data__antennaLocation):
                            if not isinstance(data__antennaLocation_item, (int, float)) or isinstance(data__antennaLocation_item, bool):
                                raise JsonSchemaValueException(""+"data.@antennaLocation[{data__antennaLocation_x}]".format(**locals())+" must be number", value=data__antennaLocation_item, name=""+"data.@antennaLocation[{data__antennaLocation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@antennaPatternLength" in data_keys:
                    data_keys.remove("@antennaPatternLength")
                    data__antennaPatternLength = data["@antennaPatternLength"]
                    if not isinstance(data__antennaPatternLength, (int)) and not (isinstance(data__antennaPatternLength, float) and data__antennaPatternLength.is_integer()) or isinstance(data__antennaPatternLength, bool):
                        raise JsonSchemaValueException("data.@antennaPatternLength must be integer", value=data__antennaPatternLength, name="data.@antennaPatternLength", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@antennaPatternLength"] = 0
                if "@antennaPatternType" in data_keys:
                    data_keys.remove("@antennaPatternType")
                    data__antennaPatternType = data["@antennaPatternType"]
                    if not isinstance(data__antennaPatternType, (int)) and not (isinstance(data__antennaPatternType, float) and data__antennaPatternType.is_integer()) or isinstance(data__antennaPatternType, bool):
                        raise JsonSchemaValueException("data.@antennaPatternType must be integer", value=data__antennaPatternType, name="data.@antennaPatternType", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@antennaPatternType"] = 0
                if "@applicationID" in data_keys:
                    data_keys.remove("@applicationID")
                    data__applicationID = data["@applicationID"]
                    if not isinstance(data__applicationID, (int)) and not (isinstance(data__applicationID, float) and data__applicationID.is_integer()) or isinstance(data__applicationID, bool):
                        raise JsonSchemaValueException("data.@applicationID must be integer", value=data__applicationID, name="data.@applicationID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@applicationID"] = 0
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@cryptoKeyID" in data_keys:
                    data_keys.remove("@cryptoKeyID")
                    data__cryptoKeyID = data["@cryptoKeyID"]
                    if not isinstance(data__cryptoKeyID, (int)) and not (isinstance(data__cryptoKeyID, float) and data__cryptoKeyID.is_integer()) or isinstance(data__cryptoKeyID, bool):
                        raise JsonSchemaValueException("data.@cryptoKeyID must be integer", value=data__cryptoKeyID, name="data.@cryptoKeyID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@cryptoKeyID"] = 0
                if "@cryptoSystem" in data_keys:
                    data_keys.remove("@cryptoSystem")
                    data__cryptoSystem = data["@cryptoSystem"]
                    if not isinstance(data__cryptoSystem, (int)) and not (isinstance(data__cryptoSystem, float) and data__cryptoSystem.is_integer()) or isinstance(data__cryptoSystem, bool):
                        raise JsonSchemaValueException("data.@cryptoSystem must be integer", value=data__cryptoSystem, name="data.@cryptoSystem", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@cryptoSystem"] = 0
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "@entityID" in data_keys:
                    data_keys.remove("@entityID")
                    data__entityID = data["@entityID"]
                    if not isinstance(data__entityID, (int)) and not (isinstance(data__entityID, float) and data__entityID.is_integer()) or isinstance(data__entityID, bool):
                        raise JsonSchemaValueException("data.@entityID must be integer", value=data__entityID, name="data.@entityID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entityID"] = 0
                if "@frequency" in data_keys:
                    data_keys.remove("@frequency")
                    data__frequency = data["@frequency"]
                    if not isinstance(data__frequency, (int)) and not (isinstance(data__frequency, float) and data__frequency.is_integer()) or isinstance(data__frequency, bool):
                        raise JsonSchemaValueException("data.@frequency must be integer", value=data__frequency, name="data.@frequency", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@frequency"] = 0
                if "@geoCoords" in data_keys:
                    data_keys.remove("@geoCoords")
                    data__geoCoords = data["@geoCoords"]
                    if not isinstance(data__geoCoords, (list, tuple)):
                        raise JsonSchemaValueException("data.@geoCoords must be array", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__geoCoords_is_list = isinstance(data__geoCoords, (list, tuple))
                    if data__geoCoords_is_list:
                        data__geoCoords_len = len(data__geoCoords)
                        if data__geoCoords_len < 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain at least 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__geoCoords_len > 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain less than or equal to 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__geoCoords_x, data__geoCoords_item in enumerate(data__geoCoords):
                            if not isinstance(data__geoCoords_item, (int, float)) or isinstance(data__geoCoords_item, bool):
                                raise JsonSchemaValueException(""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+" must be number", value=data__geoCoords_item, name=""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "@inputSource" in data_keys:
                    data_keys.remove("@inputSource")
                    data__inputSource = data["@inputSource"]
                    if not isinstance(data__inputSource, (int)) and not (isinstance(data__inputSource, float) and data__inputSource.is_integer()) or isinstance(data__inputSource, bool):
                        raise JsonSchemaValueException("data.@inputSource must be integer", value=data__inputSource, name="data.@inputSource", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@inputSource"] = 0
                if "@lengthOfModulationParameters" in data_keys:
                    data_keys.remove("@lengthOfModulationParameters")
                    data__lengthOfModulationParameters = data["@lengthOfModulationParameters"]
                    if not isinstance(data__lengthOfModulationParameters, (int)) and not (isinstance(data__lengthOfModulationParameters, float) and data__lengthOfModulationParameters.is_integer()) or isinstance(data__lengthOfModulationParameters, bool):
                        raise JsonSchemaValueException("data.@lengthOfModulationParameters must be integer", value=data__lengthOfModulationParameters, name="data.@lengthOfModulationParameters", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@lengthOfModulationParameters"] = 0
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@modulationTypeDetail" in data_keys:
                    data_keys.remove("@modulationTypeDetail")
                    data__modulationTypeDetail = data["@modulationTypeDetail"]
                    if not isinstance(data__modulationTypeDetail, (int)) and not (isinstance(data__modulationTypeDetail, float) and data__modulationTypeDetail.is_integer()) or isinstance(data__modulationTypeDetail, bool):
                        raise JsonSchemaValueException("data.@modulationTypeDetail must be integer", value=data__modulationTypeDetail, name="data.@modulationTypeDetail", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@modulationTypeDetail"] = 0
                if "@modulationTypeMajor" in data_keys:
                    data_keys.remove("@modulationTypeMajor")
                    data__modulationTypeMajor = data["@modulationTypeMajor"]
                    if not isinstance(data__modulationTypeMajor, (int)) and not (isinstance(data__modulationTypeMajor, float) and data__modulationTypeMajor.is_integer()) or isinstance(data__modulationTypeMajor, bool):
                        raise JsonSchemaValueException("data.@modulationTypeMajor must be integer", value=data__modulationTypeMajor, name="data.@modulationTypeMajor", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@modulationTypeMajor"] = 0
                if "@modulationTypeSpreadSpectrum" in data_keys:
                    data_keys.remove("@modulationTypeSpreadSpectrum")
                    data__modulationTypeSpreadSpectrum = data["@modulationTypeSpreadSpectrum"]
                    if not isinstance(data__modulationTypeSpreadSpectrum, (int)) and not (isinstance(data__modulationTypeSpreadSpectrum, float) and data__modulationTypeSpreadSpectrum.is_integer()) or isinstance(data__modulationTypeSpreadSpectrum, bool):
                        raise JsonSchemaValueException("data.@modulationTypeSpreadSpectrum must be integer", value=data__modulationTypeSpreadSpectrum, name="data.@modulationTypeSpreadSpectrum", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@modulationTypeSpreadSpectrum"] = 0
                if "@modulationTypeSystem" in data_keys:
                    data_keys.remove("@modulationTypeSystem")
                    data__modulationTypeSystem = data["@modulationTypeSystem"]
                    if not isinstance(data__modulationTypeSystem, (int)) and not (isinstance(data__modulationTypeSystem, float) and data__modulationTypeSystem.is_integer()) or isinstance(data__modulationTypeSystem, bool):
                        raise JsonSchemaValueException("data.@modulationTypeSystem must be integer", value=data__modulationTypeSystem, name="data.@modulationTypeSystem", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@modulationTypeSystem"] = 0
                if "@multicastRelayHost" in data_keys:
                    data_keys.remove("@multicastRelayHost")
                    data__multicastRelayHost = data["@multicastRelayHost"]
                    if not isinstance(data__multicastRelayHost, (str)):
                        raise JsonSchemaValueException("data.@multicastRelayHost must be string", value=data__multicastRelayHost, name="data.@multicastRelayHost", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@multicastRelayPort" in data_keys:
                    data_keys.remove("@multicastRelayPort")
                    data__multicastRelayPort = data["@multicastRelayPort"]
                    if not isinstance(data__multicastRelayPort, (int)) and not (isinstance(data__multicastRelayPort, float) and data__multicastRelayPort.is_integer()) or isinstance(data__multicastRelayPort, bool):
                        raise JsonSchemaValueException("data.@multicastRelayPort must be integer", value=data__multicastRelayPort, name="data.@multicastRelayPort", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@multicastRelayPort"] = 0
                if "@networkMode" in data_keys:
                    data_keys.remove("@networkMode")
                    data__networkMode = data["@networkMode"]
                    if not isinstance(data__networkMode, (str)):
                        raise JsonSchemaValueException("data.@networkMode must be string", value=data__networkMode, name="data.@networkMode", definition={'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data__networkMode not in ['standAlone', 'networkReader', 'networkWriter']:
                        raise JsonSchemaValueException("data.@networkMode must be one of ['standAlone', 'networkReader', 'networkWriter']", value=data__networkMode, name="data.@networkMode", definition={'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                else: data["@networkMode"] = 'standAlone'
                if "@port" in data_keys:
                    data_keys.remove("@port")
                    data__port = data["@port"]
                    if not isinstance(data__port, (int)) and not (isinstance(data__port, float) and data__port.is_integer()) or isinstance(data__port, bool):
                        raise JsonSchemaValueException("data.@port must be integer", value=data__port, name="data.@port", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@port"] = 0
                if "@power" in data_keys:
                    data_keys.remove("@power")
                    data__power = data["@power"]
                    if not isinstance(data__power, (int, float)) or isinstance(data__power, bool):
                        raise JsonSchemaValueException("data.@power must be number", value=data__power, name="data.@power", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@power"] = 0
                if "@radioEntityTypeCategory" in data_keys:
                    data_keys.remove("@radioEntityTypeCategory")
                    data__radioEntityTypeCategory = data["@radioEntityTypeCategory"]
                    if not isinstance(data__radioEntityTypeCategory, (int)) and not (isinstance(data__radioEntityTypeCategory, float) and data__radioEntityTypeCategory.is_integer()) or isinstance(data__radioEntityTypeCategory, bool):
                        raise JsonSchemaValueException("data.@radioEntityTypeCategory must be integer", value=data__radioEntityTypeCategory, name="data.@radioEntityTypeCategory", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@radioEntityTypeCategory"] = 0
                if "@radioEntityTypeCountry" in data_keys:
                    data_keys.remove("@radioEntityTypeCountry")
                    data__radioEntityTypeCountry = data["@radioEntityTypeCountry"]
                    if not isinstance(data__radioEntityTypeCountry, (int)) and not (isinstance(data__radioEntityTypeCountry, float) and data__radioEntityTypeCountry.is_integer()) or isinstance(data__radioEntityTypeCountry, bool):
                        raise JsonSchemaValueException("data.@radioEntityTypeCountry must be integer", value=data__radioEntityTypeCountry, name="data.@radioEntityTypeCountry", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@radioEntityTypeCountry"] = 0
                if "@radioEntityTypeDomain" in data_keys:
                    data_keys.remove("@radioEntityTypeDomain")
                    data__radioEntityTypeDomain = data["@radioEntityTypeDomain"]
                    if not isinstance(data__radioEntityTypeDomain, (int)) and not (isinstance(data__radioEntityTypeDomain, float) and data__radioEntityTypeDomain.is_integer()) or isinstance(data__radioEntityTypeDomain, bool):
                        raise JsonSchemaValueException("data.@radioEntityTypeDomain must be integer", value=data__radioEntityTypeDomain, name="data.@radioEntityTypeDomain", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@radioEntityTypeDomain"] = 0
                if "@radioEntityTypeKind" in data_keys:
                    data_keys.remove("@radioEntityTypeKind")
                    data__radioEntityTypeKind = data["@radioEntityTypeKind"]
                    if not isinstance(data__radioEntityTypeKind, (int)) and not (isinstance(data__radioEntityTypeKind, float) and data__radioEntityTypeKind.is_integer()) or isinstance(data__radioEntityTypeKind, bool):
                        raise JsonSchemaValueException("data.@radioEntityTypeKind must be integer", value=data__radioEntityTypeKind, name="data.@radioEntityTypeKind", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@radioEntityTypeKind"] = 0
                if "@radioEntityTypeNomenclature" in data_keys:
                    data_keys.remove("@radioEntityTypeNomenclature")
                    data__radioEntityTypeNomenclature = data["@radioEntityTypeNomenclature"]
                    if not isinstance(data__radioEntityTypeNomenclature, (int)) and not (isinstance(data__radioEntityTypeNomenclature, float) and data__radioEntityTypeNomenclature.is_integer()) or isinstance(data__radioEntityTypeNomenclature, bool):
                        raise JsonSchemaValueException("data.@radioEntityTypeNomenclature must be integer", value=data__radioEntityTypeNomenclature, name="data.@radioEntityTypeNomenclature", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@radioEntityTypeNomenclature"] = 0
                if "@radioEntityTypeNomenclatureVersion" in data_keys:
                    data_keys.remove("@radioEntityTypeNomenclatureVersion")
                    data__radioEntityTypeNomenclatureVersion = data["@radioEntityTypeNomenclatureVersion"]
                    if not isinstance(data__radioEntityTypeNomenclatureVersion, (int)) and not (isinstance(data__radioEntityTypeNomenclatureVersion, float) and data__radioEntityTypeNomenclatureVersion.is_integer()) or isinstance(data__radioEntityTypeNomenclatureVersion, bool):
                        raise JsonSchemaValueException("data.@radioEntityTypeNomenclatureVersion must be integer", value=data__radioEntityTypeNomenclatureVersion, name="data.@radioEntityTypeNomenclatureVersion", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@radioEntityTypeNomenclatureVersion"] = 0
                if "@radioID" in data_keys:
                    data_keys.remove("@radioID")
                    data__radioID = data["@radioID"]
                    if not isinstance(data__radioID, (int)) and not (isinstance(data__radioID, float) and data__radioID.is_integer()) or isinstance(data__radioID, bool):
                        raise JsonSchemaValueException("data.@radioID must be integer", value=data__radioID, name="data.@radioID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@radioID"] = 0
                if "@readInterval" in data_keys:
                    data_keys.remove("@readInterval")
                    data__readInterval = data["@readInterval"]
                    if not isinstance(data__readInterval, (int, float)) or isinstance(data__readInterval, bool):
                        raise JsonSchemaValueException("data.@readInterval must be number", value=data__readInterval, name="data.@readInterval", definition={'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@readInterval"] = 0.1
                if "@relativeAntennaLocation" in data_keys:
                    data_keys.remove("@relativeAntennaLocation")
                    data__relativeAntennaLocation = data["@relativeAntennaLocation"]
                    if not isinstance(data__relativeAntennaLocation, (list, tuple)):
                        raise JsonSchemaValueException("data.@relativeAntennaLocation must be array", value=data__relativeAntennaLocation, name="data.@relativeAntennaLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__relativeAntennaLocation_is_list = isinstance(data__relativeAntennaLocation, (list, tuple))
                    if data__relativeAntennaLocation_is_list:
                        data__relativeAntennaLocation_len = len(data__relativeAntennaLocation)
                        if data__relativeAntennaLocation_len < 3:
                            raise JsonSchemaValueException("data.@relativeAntennaLocation must contain at least 3 items", value=data__relativeAntennaLocation, name="data.@relativeAntennaLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__relativeAntennaLocation_len > 3:
                            raise JsonSchemaValueException("data.@relativeAntennaLocation must contain less than or equal to 3 items", value=data__relativeAntennaLocation, name="data.@relativeAntennaLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__relativeAntennaLocation_x, data__relativeAntennaLocation_item in enumerate(data__relativeAntennaLocation):
                            if not isinstance(data__relativeAntennaLocation_item, (int, float)) or isinstance(data__relativeAntennaLocation_item, bool):
                                raise JsonSchemaValueException(""+"data.@relativeAntennaLocation[{data__relativeAntennaLocation_x}]".format(**locals())+" must be number", value=data__relativeAntennaLocation_item, name=""+"data.@relativeAntennaLocation[{data__relativeAntennaLocation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@rtpHeaderExpected" in data_keys:
                    data_keys.remove("@rtpHeaderExpected")
                    data__rtpHeaderExpected = data["@rtpHeaderExpected"]
                    if not isinstance(data__rtpHeaderExpected, (bool)):
                        raise JsonSchemaValueException("data.@rtpHeaderExpected must be boolean", value=data__rtpHeaderExpected, name="data.@rtpHeaderExpected", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@rtpHeaderExpected"] = False
                if "@siteID" in data_keys:
                    data_keys.remove("@siteID")
                    data__siteID = data["@siteID"]
                    if not isinstance(data__siteID, (int)) and not (isinstance(data__siteID, float) and data__siteID.is_integer()) or isinstance(data__siteID, bool):
                        raise JsonSchemaValueException("data.@siteID must be integer", value=data__siteID, name="data.@siteID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@siteID"] = 0
                if "@transmitFrequencyBandwidth" in data_keys:
                    data_keys.remove("@transmitFrequencyBandwidth")
                    data__transmitFrequencyBandwidth = data["@transmitFrequencyBandwidth"]
                    if not isinstance(data__transmitFrequencyBandwidth, (int, float)) or isinstance(data__transmitFrequencyBandwidth, bool):
                        raise JsonSchemaValueException("data.@transmitFrequencyBandwidth must be number", value=data__transmitFrequencyBandwidth, name="data.@transmitFrequencyBandwidth", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@transmitFrequencyBandwidth"] = 0
                if "@transmitState" in data_keys:
                    data_keys.remove("@transmitState")
                    data__transmitState = data["@transmitState"]
                    if not isinstance(data__transmitState, (int)) and not (isinstance(data__transmitState, float) and data__transmitState.is_integer()) or isinstance(data__transmitState, bool):
                        raise JsonSchemaValueException("data.@transmitState must be integer", value=data__transmitState, name="data.@transmitState", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@transmitState"] = 0
                if "@whichGeometry" in data_keys:
                    data_keys.remove("@whichGeometry")
                    data__whichGeometry = data["@whichGeometry"]
                    if not isinstance(data__whichGeometry, (int)) and not (isinstance(data__whichGeometry, float) and data__whichGeometry.is_integer()) or isinstance(data__whichGeometry, bool):
                        raise JsonSchemaValueException("data.@whichGeometry must be integer", value=data__whichGeometry, name="data.@whichGeometry", definition={'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@whichGeometry"] = 1
                if "@writeInterval" in data_keys:
                    data_keys.remove("@writeInterval")
                    data__writeInterval = data["@writeInterval"]
                    if not isinstance(data__writeInterval, (int, float)) or isinstance(data__writeInterval, bool):
                        raise JsonSchemaValueException("data.@writeInterval must be number", value=data__writeInterval, name="data.@writeInterval", definition={'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@writeInterval"] = 1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@antennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@antennaPatternLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@antennaPatternType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@cryptoKeyID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@cryptoSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@frequency': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@inputSource': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@lengthOfModulationParameters': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@modulationTypeDetail': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeMajor': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSpreadSpectrum': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@power': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@radioEntityTypeCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclature': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclatureVersion': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@relativeAntennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitFrequencyBandwidth': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transmitState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@antennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@antennaPatternLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@antennaPatternType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@cryptoKeyID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@cryptoSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@frequency': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@inputSource': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@lengthOfModulationParameters': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@modulationTypeDetail': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeMajor': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSpreadSpectrum': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@modulationTypeSystem': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@power': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@radioEntityTypeCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclature': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioEntityTypeNomenclatureVersion': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@relativeAntennaLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitFrequencyBandwidth': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transmitState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_signalpdu(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@data': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@dataLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@encodingScheme': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@sampleRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@samples': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@tdlType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@data': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@dataLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@encodingScheme': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@sampleRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@samples': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@tdlType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@address" in data_keys:
                    data_keys.remove("@address")
                    data__address = data["@address"]
                    if not isinstance(data__address, (str)):
                        raise JsonSchemaValueException("data.@address must be string", value=data__address, name="data.@address", definition={'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                else: data["@address"] = 'localhost'
                if "@applicationID" in data_keys:
                    data_keys.remove("@applicationID")
                    data__applicationID = data["@applicationID"]
                    if not isinstance(data__applicationID, (int)) and not (isinstance(data__applicationID, float) and data__applicationID.is_integer()) or isinstance(data__applicationID, bool):
                        raise JsonSchemaValueException("data.@applicationID must be integer", value=data__applicationID, name="data.@applicationID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@applicationID"] = 0
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@data" in data_keys:
                    data_keys.remove("@data")
                    data__data = data["@data"]
                    if not isinstance(data__data, (list, tuple)):
                        raise JsonSchemaValueException("data.@data must be array", value=data__data, name="data.@data", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, rule='type')
                    data__data_is_list = isinstance(data__data, (list, tuple))
                    if data__data_is_list:
                        data__data_len = len(data__data)
                        for data__data_x, data__data_item in enumerate(data__data):
                            if not isinstance(data__data_item, (int)) and not (isinstance(data__data_item, float) and data__data_item.is_integer()) or isinstance(data__data_item, bool):
                                raise JsonSchemaValueException(""+"data.@data[{data__data_x}]".format(**locals())+" must be integer", value=data__data_item, name=""+"data.@data[{data__data_x}]".format(**locals())+"", definition={'type': 'integer'}, rule='type')
                if "@dataLength" in data_keys:
                    data_keys.remove("@dataLength")
                    data__dataLength = data["@dataLength"]
                    if not isinstance(data__dataLength, (int)) and not (isinstance(data__dataLength, float) and data__dataLength.is_integer()) or isinstance(data__dataLength, bool):
                        raise JsonSchemaValueException("data.@dataLength must be integer", value=data__dataLength, name="data.@dataLength", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@dataLength"] = 0
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "@encodingScheme" in data_keys:
                    data_keys.remove("@encodingScheme")
                    data__encodingScheme = data["@encodingScheme"]
                    if not isinstance(data__encodingScheme, (int)) and not (isinstance(data__encodingScheme, float) and data__encodingScheme.is_integer()) or isinstance(data__encodingScheme, bool):
                        raise JsonSchemaValueException("data.@encodingScheme must be integer", value=data__encodingScheme, name="data.@encodingScheme", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@encodingScheme"] = 0
                if "@entityID" in data_keys:
                    data_keys.remove("@entityID")
                    data__entityID = data["@entityID"]
                    if not isinstance(data__entityID, (int)) and not (isinstance(data__entityID, float) and data__entityID.is_integer()) or isinstance(data__entityID, bool):
                        raise JsonSchemaValueException("data.@entityID must be integer", value=data__entityID, name="data.@entityID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entityID"] = 0
                if "@geoCoords" in data_keys:
                    data_keys.remove("@geoCoords")
                    data__geoCoords = data["@geoCoords"]
                    if not isinstance(data__geoCoords, (list, tuple)):
                        raise JsonSchemaValueException("data.@geoCoords must be array", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__geoCoords_is_list = isinstance(data__geoCoords, (list, tuple))
                    if data__geoCoords_is_list:
                        data__geoCoords_len = len(data__geoCoords)
                        if data__geoCoords_len < 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain at least 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__geoCoords_len > 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain less than or equal to 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__geoCoords_x, data__geoCoords_item in enumerate(data__geoCoords):
                            if not isinstance(data__geoCoords_item, (int, float)) or isinstance(data__geoCoords_item, bool):
                                raise JsonSchemaValueException(""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+" must be number", value=data__geoCoords_item, name=""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@multicastRelayHost" in data_keys:
                    data_keys.remove("@multicastRelayHost")
                    data__multicastRelayHost = data["@multicastRelayHost"]
                    if not isinstance(data__multicastRelayHost, (str)):
                        raise JsonSchemaValueException("data.@multicastRelayHost must be string", value=data__multicastRelayHost, name="data.@multicastRelayHost", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@multicastRelayPort" in data_keys:
                    data_keys.remove("@multicastRelayPort")
                    data__multicastRelayPort = data["@multicastRelayPort"]
                    if not isinstance(data__multicastRelayPort, (int)) and not (isinstance(data__multicastRelayPort, float) and data__multicastRelayPort.is_integer()) or isinstance(data__multicastRelayPort, bool):
                        raise JsonSchemaValueException("data.@multicastRelayPort must be integer", value=data__multicastRelayPort, name="data.@multicastRelayPort", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@multicastRelayPort"] = 0
                if "@networkMode" in data_keys:
                    data_keys.remove("@networkMode")
                    data__networkMode = data["@networkMode"]
                    if not isinstance(data__networkMode, (str)):
                        raise JsonSchemaValueException("data.@networkMode must be string", value=data__networkMode, name="data.@networkMode", definition={'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data__networkMode not in ['standAlone', 'networkReader', 'networkWriter']:
                        raise JsonSchemaValueException("data.@networkMode must be one of ['standAlone', 'networkReader', 'networkWriter']", value=data__networkMode, name="data.@networkMode", definition={'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                else: data["@networkMode"] = 'standAlone'
                if "@port" in data_keys:
                    data_keys.remove("@port")
                    data__port = data["@port"]
                    if not isinstance(data__port, (int)) and not (isinstance(data__port, float) and data__port.is_integer()) or isinstance(data__port, bool):
                        raise JsonSchemaValueException("data.@port must be integer", value=data__port, name="data.@port", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@port"] = 0
                if "@radioID" in data_keys:
                    data_keys.remove("@radioID")
                    data__radioID = data["@radioID"]
                    if not isinstance(data__radioID, (int)) and not (isinstance(data__radioID, float) and data__radioID.is_integer()) or isinstance(data__radioID, bool):
                        raise JsonSchemaValueException("data.@radioID must be integer", value=data__radioID, name="data.@radioID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@radioID"] = 0
                if "@readInterval" in data_keys:
                    data_keys.remove("@readInterval")
                    data__readInterval = data["@readInterval"]
                    if not isinstance(data__readInterval, (int, float)) or isinstance(data__readInterval, bool):
                        raise JsonSchemaValueException("data.@readInterval must be number", value=data__readInterval, name="data.@readInterval", definition={'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@readInterval"] = 0.1
                if "@rtpHeaderExpected" in data_keys:
                    data_keys.remove("@rtpHeaderExpected")
                    data__rtpHeaderExpected = data["@rtpHeaderExpected"]
                    if not isinstance(data__rtpHeaderExpected, (bool)):
                        raise JsonSchemaValueException("data.@rtpHeaderExpected must be boolean", value=data__rtpHeaderExpected, name="data.@rtpHeaderExpected", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@rtpHeaderExpected"] = False
                if "@sampleRate" in data_keys:
                    data_keys.remove("@sampleRate")
                    data__sampleRate = data["@sampleRate"]
                    if not isinstance(data__sampleRate, (int)) and not (isinstance(data__sampleRate, float) and data__sampleRate.is_integer()) or isinstance(data__sampleRate, bool):
                        raise JsonSchemaValueException("data.@sampleRate must be integer", value=data__sampleRate, name="data.@sampleRate", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@sampleRate"] = 0
                if "@samples" in data_keys:
                    data_keys.remove("@samples")
                    data__samples = data["@samples"]
                    if not isinstance(data__samples, (int)) and not (isinstance(data__samples, float) and data__samples.is_integer()) or isinstance(data__samples, bool):
                        raise JsonSchemaValueException("data.@samples must be integer", value=data__samples, name="data.@samples", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@samples"] = 0
                if "@siteID" in data_keys:
                    data_keys.remove("@siteID")
                    data__siteID = data["@siteID"]
                    if not isinstance(data__siteID, (int)) and not (isinstance(data__siteID, float) and data__siteID.is_integer()) or isinstance(data__siteID, bool):
                        raise JsonSchemaValueException("data.@siteID must be integer", value=data__siteID, name="data.@siteID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@siteID"] = 0
                if "@tdlType" in data_keys:
                    data_keys.remove("@tdlType")
                    data__tdlType = data["@tdlType"]
                    if not isinstance(data__tdlType, (int)) and not (isinstance(data__tdlType, float) and data__tdlType.is_integer()) or isinstance(data__tdlType, bool):
                        raise JsonSchemaValueException("data.@tdlType must be integer", value=data__tdlType, name="data.@tdlType", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@tdlType"] = 0
                if "@whichGeometry" in data_keys:
                    data_keys.remove("@whichGeometry")
                    data__whichGeometry = data["@whichGeometry"]
                    if not isinstance(data__whichGeometry, (int)) and not (isinstance(data__whichGeometry, float) and data__whichGeometry.is_integer()) or isinstance(data__whichGeometry, bool):
                        raise JsonSchemaValueException("data.@whichGeometry must be integer", value=data__whichGeometry, name="data.@whichGeometry", definition={'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@whichGeometry"] = 1
                if "@writeInterval" in data_keys:
                    data_keys.remove("@writeInterval")
                    data__writeInterval = data["@writeInterval"]
                    if not isinstance(data__writeInterval, (int, float)) or isinstance(data__writeInterval, bool):
                        raise JsonSchemaValueException("data.@writeInterval must be number", value=data__writeInterval, name="data.@writeInterval", definition={'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@writeInterval"] = 1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@data': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@dataLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@encodingScheme': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@sampleRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@samples': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@tdlType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@data': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@dataLength': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@encodingScheme': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@sampleRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@samples': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@tdlType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_receiverpdu(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@receivedPower': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@receiverState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterRadioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@receivedPower': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@receiverState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterRadioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@address" in data_keys:
                    data_keys.remove("@address")
                    data__address = data["@address"]
                    if not isinstance(data__address, (str)):
                        raise JsonSchemaValueException("data.@address must be string", value=data__address, name="data.@address", definition={'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                else: data["@address"] = 'localhost'
                if "@applicationID" in data_keys:
                    data_keys.remove("@applicationID")
                    data__applicationID = data["@applicationID"]
                    if not isinstance(data__applicationID, (int)) and not (isinstance(data__applicationID, float) and data__applicationID.is_integer()) or isinstance(data__applicationID, bool):
                        raise JsonSchemaValueException("data.@applicationID must be integer", value=data__applicationID, name="data.@applicationID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@applicationID"] = 0
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "@entityID" in data_keys:
                    data_keys.remove("@entityID")
                    data__entityID = data["@entityID"]
                    if not isinstance(data__entityID, (int)) and not (isinstance(data__entityID, float) and data__entityID.is_integer()) or isinstance(data__entityID, bool):
                        raise JsonSchemaValueException("data.@entityID must be integer", value=data__entityID, name="data.@entityID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entityID"] = 0
                if "@geoCoords" in data_keys:
                    data_keys.remove("@geoCoords")
                    data__geoCoords = data["@geoCoords"]
                    if not isinstance(data__geoCoords, (list, tuple)):
                        raise JsonSchemaValueException("data.@geoCoords must be array", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__geoCoords_is_list = isinstance(data__geoCoords, (list, tuple))
                    if data__geoCoords_is_list:
                        data__geoCoords_len = len(data__geoCoords)
                        if data__geoCoords_len < 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain at least 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__geoCoords_len > 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain less than or equal to 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__geoCoords_x, data__geoCoords_item in enumerate(data__geoCoords):
                            if not isinstance(data__geoCoords_item, (int, float)) or isinstance(data__geoCoords_item, bool):
                                raise JsonSchemaValueException(""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+" must be number", value=data__geoCoords_item, name=""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@multicastRelayHost" in data_keys:
                    data_keys.remove("@multicastRelayHost")
                    data__multicastRelayHost = data["@multicastRelayHost"]
                    if not isinstance(data__multicastRelayHost, (str)):
                        raise JsonSchemaValueException("data.@multicastRelayHost must be string", value=data__multicastRelayHost, name="data.@multicastRelayHost", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@multicastRelayPort" in data_keys:
                    data_keys.remove("@multicastRelayPort")
                    data__multicastRelayPort = data["@multicastRelayPort"]
                    if not isinstance(data__multicastRelayPort, (int)) and not (isinstance(data__multicastRelayPort, float) and data__multicastRelayPort.is_integer()) or isinstance(data__multicastRelayPort, bool):
                        raise JsonSchemaValueException("data.@multicastRelayPort must be integer", value=data__multicastRelayPort, name="data.@multicastRelayPort", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@multicastRelayPort"] = 0
                if "@networkMode" in data_keys:
                    data_keys.remove("@networkMode")
                    data__networkMode = data["@networkMode"]
                    if not isinstance(data__networkMode, (str)):
                        raise JsonSchemaValueException("data.@networkMode must be string", value=data__networkMode, name="data.@networkMode", definition={'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data__networkMode not in ['standAlone', 'networkReader', 'networkWriter']:
                        raise JsonSchemaValueException("data.@networkMode must be one of ['standAlone', 'networkReader', 'networkWriter']", value=data__networkMode, name="data.@networkMode", definition={'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                else: data["@networkMode"] = 'standAlone'
                if "@port" in data_keys:
                    data_keys.remove("@port")
                    data__port = data["@port"]
                    if not isinstance(data__port, (int)) and not (isinstance(data__port, float) and data__port.is_integer()) or isinstance(data__port, bool):
                        raise JsonSchemaValueException("data.@port must be integer", value=data__port, name="data.@port", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@port"] = 0
                if "@radioID" in data_keys:
                    data_keys.remove("@radioID")
                    data__radioID = data["@radioID"]
                    if not isinstance(data__radioID, (int)) and not (isinstance(data__radioID, float) and data__radioID.is_integer()) or isinstance(data__radioID, bool):
                        raise JsonSchemaValueException("data.@radioID must be integer", value=data__radioID, name="data.@radioID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@radioID"] = 0
                if "@readInterval" in data_keys:
                    data_keys.remove("@readInterval")
                    data__readInterval = data["@readInterval"]
                    if not isinstance(data__readInterval, (int, float)) or isinstance(data__readInterval, bool):
                        raise JsonSchemaValueException("data.@readInterval must be number", value=data__readInterval, name="data.@readInterval", definition={'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@readInterval"] = 0.1
                if "@receivedPower" in data_keys:
                    data_keys.remove("@receivedPower")
                    data__receivedPower = data["@receivedPower"]
                    if not isinstance(data__receivedPower, (int, float)) or isinstance(data__receivedPower, bool):
                        raise JsonSchemaValueException("data.@receivedPower must be number", value=data__receivedPower, name="data.@receivedPower", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@receivedPower"] = 0
                if "@receiverState" in data_keys:
                    data_keys.remove("@receiverState")
                    data__receiverState = data["@receiverState"]
                    if not isinstance(data__receiverState, (int)) and not (isinstance(data__receiverState, float) and data__receiverState.is_integer()) or isinstance(data__receiverState, bool):
                        raise JsonSchemaValueException("data.@receiverState must be integer", value=data__receiverState, name="data.@receiverState", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@receiverState"] = 0
                if "@rtpHeaderExpected" in data_keys:
                    data_keys.remove("@rtpHeaderExpected")
                    data__rtpHeaderExpected = data["@rtpHeaderExpected"]
                    if not isinstance(data__rtpHeaderExpected, (bool)):
                        raise JsonSchemaValueException("data.@rtpHeaderExpected must be boolean", value=data__rtpHeaderExpected, name="data.@rtpHeaderExpected", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@rtpHeaderExpected"] = False
                if "@siteID" in data_keys:
                    data_keys.remove("@siteID")
                    data__siteID = data["@siteID"]
                    if not isinstance(data__siteID, (int)) and not (isinstance(data__siteID, float) and data__siteID.is_integer()) or isinstance(data__siteID, bool):
                        raise JsonSchemaValueException("data.@siteID must be integer", value=data__siteID, name="data.@siteID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@siteID"] = 0
                if "@transmitterApplicationID" in data_keys:
                    data_keys.remove("@transmitterApplicationID")
                    data__transmitterApplicationID = data["@transmitterApplicationID"]
                    if not isinstance(data__transmitterApplicationID, (int)) and not (isinstance(data__transmitterApplicationID, float) and data__transmitterApplicationID.is_integer()) or isinstance(data__transmitterApplicationID, bool):
                        raise JsonSchemaValueException("data.@transmitterApplicationID must be integer", value=data__transmitterApplicationID, name="data.@transmitterApplicationID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@transmitterApplicationID"] = 0
                if "@transmitterEntityID" in data_keys:
                    data_keys.remove("@transmitterEntityID")
                    data__transmitterEntityID = data["@transmitterEntityID"]
                    if not isinstance(data__transmitterEntityID, (int)) and not (isinstance(data__transmitterEntityID, float) and data__transmitterEntityID.is_integer()) or isinstance(data__transmitterEntityID, bool):
                        raise JsonSchemaValueException("data.@transmitterEntityID must be integer", value=data__transmitterEntityID, name="data.@transmitterEntityID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@transmitterEntityID"] = 0
                if "@transmitterRadioID" in data_keys:
                    data_keys.remove("@transmitterRadioID")
                    data__transmitterRadioID = data["@transmitterRadioID"]
                    if not isinstance(data__transmitterRadioID, (int)) and not (isinstance(data__transmitterRadioID, float) and data__transmitterRadioID.is_integer()) or isinstance(data__transmitterRadioID, bool):
                        raise JsonSchemaValueException("data.@transmitterRadioID must be integer", value=data__transmitterRadioID, name="data.@transmitterRadioID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@transmitterRadioID"] = 0
                if "@transmitterSiteID" in data_keys:
                    data_keys.remove("@transmitterSiteID")
                    data__transmitterSiteID = data["@transmitterSiteID"]
                    if not isinstance(data__transmitterSiteID, (int)) and not (isinstance(data__transmitterSiteID, float) and data__transmitterSiteID.is_integer()) or isinstance(data__transmitterSiteID, bool):
                        raise JsonSchemaValueException("data.@transmitterSiteID must be integer", value=data__transmitterSiteID, name="data.@transmitterSiteID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@transmitterSiteID"] = 0
                if "@whichGeometry" in data_keys:
                    data_keys.remove("@whichGeometry")
                    data__whichGeometry = data["@whichGeometry"]
                    if not isinstance(data__whichGeometry, (int)) and not (isinstance(data__whichGeometry, float) and data__whichGeometry.is_integer()) or isinstance(data__whichGeometry, bool):
                        raise JsonSchemaValueException("data.@whichGeometry must be integer", value=data__whichGeometry, name="data.@whichGeometry", definition={'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@whichGeometry"] = 1
                if "@writeInterval" in data_keys:
                    data_keys.remove("@writeInterval")
                    data__writeInterval = data["@writeInterval"]
                    if not isinstance(data__writeInterval, (int, float)) or isinstance(data__writeInterval, bool):
                        raise JsonSchemaValueException("data.@writeInterval must be number", value=data__writeInterval, name="data.@writeInterval", definition={'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@writeInterval"] = 1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@receivedPower': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@receiverState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterRadioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@radioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@receivedPower': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@receiverState': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterRadioID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@transmitterSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@whichGeometry': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_loadsensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@timeOut': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '-watchList': {'$ref': '#/$defs/-X3DUrlObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@timeOut': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '-watchList': {'$ref': '#/$defs/-X3DUrlObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@timeOut" in data_keys:
                    data_keys.remove("@timeOut")
                    data__timeOut = data["@timeOut"]
                    if not isinstance(data__timeOut, (int, float)) or isinstance(data__timeOut, bool):
                        raise JsonSchemaValueException("data.@timeOut must be number", value=data__timeOut, name="data.@timeOut", definition={'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@timeOut"] = 0
                if "-watchList" in data_keys:
                    data_keys.remove("-watchList")
                    data__watchList = data["-watchList"]
                    validate_x3d_3_0_jsonschema_json___defs__x3durlobjectmfnode(data__watchList)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@timeOut': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '-watchList': {'$ref': '#/$defs/-X3DUrlObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@timeOut': {'default': 0, '$comment': 'SFTime inputOutput', 'type': 'number'}, '-watchList': {'$ref': '#/$defs/-X3DUrlObjectMFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3durlobjectmfnode(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'$comment': 'MFNode inputOutput', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "Script" in data_item_keys:
                    data_item_keys.remove("Script")
                    data_item__Script = data_item["Script"]
                    validate_x3d_3_0_jsonschema_json___defs_script(data_item__Script)
                if "Anchor" in data_item_keys:
                    data_item_keys.remove("Anchor")
                    data_item__Anchor = data_item["Anchor"]
                    validate_x3d_3_0_jsonschema_json___defs_anchor(data_item__Anchor)
                if "AudioClip" in data_item_keys:
                    data_item_keys.remove("AudioClip")
                    data_item__AudioClip = data_item["AudioClip"]
                    validate_x3d_3_0_jsonschema_json___defs_audioclip(data_item__AudioClip)
                if "GeoMetadata" in data_item_keys:
                    data_item_keys.remove("GeoMetadata")
                    data_item__GeoMetadata = data_item["GeoMetadata"]
                    validate_x3d_3_0_jsonschema_json___defs_geometadata(data_item__GeoMetadata)
                if "ImageTexture" in data_item_keys:
                    data_item_keys.remove("ImageTexture")
                    data_item__ImageTexture = data_item["ImageTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_imagetexture(data_item__ImageTexture)
                if "Inline" in data_item_keys:
                    data_item_keys.remove("Inline")
                    data_item__Inline = data_item["Inline"]
                    validate_x3d_3_0_jsonschema_json___defs_inline(data_item__Inline)
                if "MovieTexture" in data_item_keys:
                    data_item_keys.remove("MovieTexture")
                    data_item__MovieTexture = data_item["MovieTexture"]
                    validate_x3d_3_0_jsonschema_json___defs_movietexture(data_item__MovieTexture)
                if "ProtoInstance" in data_item_keys:
                    data_item_keys.remove("ProtoInstance")
                    data_item__ProtoInstance = data_item["ProtoInstance"]
                    validate_x3d_3_0_jsonschema_json___defs_protoinstance(data_item__ProtoInstance)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_stringsensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@deletionAllowed': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@deletionAllowed': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@deletionAllowed" in data_keys:
                    data_keys.remove("@deletionAllowed")
                    data__deletionAllowed = data["@deletionAllowed"]
                    if not isinstance(data__deletionAllowed, (bool)):
                        raise JsonSchemaValueException("data.@deletionAllowed must be boolean", value=data__deletionAllowed, name="data.@deletionAllowed", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@deletionAllowed"] = True
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@deletionAllowed': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@deletionAllowed': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_keysensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_visibilitysensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 3:
                            raise JsonSchemaValueException("data.@center must contain at least 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 3:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@size" in data_keys:
                    data_keys.remove("@size")
                    data__size = data["@size"]
                    if not isinstance(data__size, (list, tuple)):
                        raise JsonSchemaValueException("data.@size must be array", value=data__size, name="data.@size", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__size_is_list = isinstance(data__size, (list, tuple))
                    if data__size_is_list:
                        data__size_len = len(data__size)
                        if data__size_len < 3:
                            raise JsonSchemaValueException("data.@size must contain at least 3 items", value=data__size, name="data.@size", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__size_len > 3:
                            raise JsonSchemaValueException("data.@size must contain less than or equal to 3 items", value=data__size, name="data.@size", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__size_x, data__size_item in enumerate(data__size):
                            if not isinstance(data__size_item, (int, float)) or isinstance(data__size_item, bool):
                                raise JsonSchemaValueException(""+"data.@size[{data__size_x}]".format(**locals())+" must be number", value=data__size_item, name=""+"data.@size[{data__size_x}]".format(**locals())+"", definition={'default': 0, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__size_item, (int, float)):
                                if data__size_item < 0:
                                    raise JsonSchemaValueException(""+"data.@size[{data__size_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__size_item, name=""+"data.@size[{data__size_x}]".format(**locals())+"", definition={'default': 0, 'minimum': 0, 'type': 'number'}, rule='minimum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_proximitysensor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 3:
                            raise JsonSchemaValueException("data.@center must contain at least 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 3:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@size" in data_keys:
                    data_keys.remove("@size")
                    data__size = data["@size"]
                    if not isinstance(data__size, (list, tuple)):
                        raise JsonSchemaValueException("data.@size must be array", value=data__size, name="data.@size", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__size_is_list = isinstance(data__size, (list, tuple))
                    if data__size_is_list:
                        data__size_len = len(data__size)
                        if data__size_len < 3:
                            raise JsonSchemaValueException("data.@size must contain at least 3 items", value=data__size, name="data.@size", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__size_len > 3:
                            raise JsonSchemaValueException("data.@size must contain less than or equal to 3 items", value=data__size, name="data.@size", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__size_x, data__size_item in enumerate(data__size):
                            if not isinstance(data__size_item, (int, float)) or isinstance(data__size_item, bool):
                                raise JsonSchemaValueException(""+"data.@size[{data__size_x}]".format(**locals())+" must be number", value=data__size_item, name=""+"data.@size[{data__size_x}]".format(**locals())+"", definition={'default': 0, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__size_item, (int, float)):
                                if data__size_item < 0:
                                    raise JsonSchemaValueException(""+"data.@size[{data__size_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__size_item, name=""+"data.@size[{data__size_x}]".format(**locals())+"", definition={'default': 0, 'minimum': 0, 'type': 'number'}, rule='minimum')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@size': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_script(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'#sourceText': {'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}, 'field': {'$ref': '#/$defs/field'}, '-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@directOutput': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mustEvaluate': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'#sourceText': {'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}, 'field': {'$ref': '#/$defs/field'}, '-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@directOutput': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mustEvaluate': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "#sourceText" in data_keys:
                    data_keys.remove("#sourceText")
                    data__sourceText = data["#sourceText"]
                    if not isinstance(data__sourceText, (list, tuple)):
                        raise JsonSchemaValueException("data.#sourceText must be array", value=data__sourceText, name="data.#sourceText", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}, rule='type')
                    data__sourceText_is_list = isinstance(data__sourceText, (list, tuple))
                    if data__sourceText_is_list:
                        data__sourceText_len = len(data__sourceText)
                        if data__sourceText_len < 1:
                            raise JsonSchemaValueException("data.#sourceText must contain at least 1 items", value=data__sourceText, name="data.#sourceText", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}, rule='minItems')
                        for data__sourceText_x, data__sourceText_item in enumerate(data__sourceText):
                            if not isinstance(data__sourceText_item, (str)):
                                raise JsonSchemaValueException(""+"data.#sourceText[{data__sourceText_x}]".format(**locals())+" must be string", value=data__sourceText_item, name=""+"data.#sourceText[{data__sourceText_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "field" in data_keys:
                    data_keys.remove("field")
                    data__field = data["field"]
                    validate_x3d_3_0_jsonschema_json___defs_field(data__field)
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@directOutput" in data_keys:
                    data_keys.remove("@directOutput")
                    data__directOutput = data["@directOutput"]
                    if not isinstance(data__directOutput, (bool)):
                        raise JsonSchemaValueException("data.@directOutput must be boolean", value=data__directOutput, name="data.@directOutput", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@directOutput"] = False
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@mustEvaluate" in data_keys:
                    data_keys.remove("@mustEvaluate")
                    data__mustEvaluate = data["@mustEvaluate"]
                    if not isinstance(data__mustEvaluate, (bool)):
                        raise JsonSchemaValueException("data.@mustEvaluate must be boolean", value=data__mustEvaluate, name="data.@mustEvaluate", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@mustEvaluate"] = False
                if "@url" in data_keys:
                    data_keys.remove("@url")
                    data__url = data["@url"]
                    if not isinstance(data__url, (list, tuple)):
                        raise JsonSchemaValueException("data.@url must be array", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__url_is_list = isinstance(data__url, (list, tuple))
                    if data__url_is_list:
                        data__url_len = len(data__url)
                        if data__url_len < 1:
                            raise JsonSchemaValueException("data.@url must contain at least 1 items", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__url_x, data__url_item in enumerate(data__url):
                            if not isinstance(data__url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be string", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__url_item):
                                    raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be uri-reference", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'#sourceText': {'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}, 'field': {'$ref': '#/$defs/field'}, '-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@directOutput': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mustEvaluate': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'#sourceText': {'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}, 'field': {'$ref': '#/$defs/field'}, '-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@directOutput': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@mustEvaluate': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_spotlight(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@beamWidth': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@cutOffAngle': {'default': 1.570796, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@beamWidth': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@cutOffAngle': {'default': 1.570796, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ambientIntensity" in data_keys:
                    data_keys.remove("@ambientIntensity")
                    data__ambientIntensity = data["@ambientIntensity"]
                    if not isinstance(data__ambientIntensity, (int, float)) or isinstance(data__ambientIntensity, bool):
                        raise JsonSchemaValueException("data.@ambientIntensity must be number", value=data__ambientIntensity, name="data.@ambientIntensity", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@ambientIntensity"] = 0
                if "@attenuation" in data_keys:
                    data_keys.remove("@attenuation")
                    data__attenuation = data["@attenuation"]
                    if not isinstance(data__attenuation, (list, tuple)):
                        raise JsonSchemaValueException("data.@attenuation must be array", value=data__attenuation, name="data.@attenuation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__attenuation_is_list = isinstance(data__attenuation, (list, tuple))
                    if data__attenuation_is_list:
                        data__attenuation_len = len(data__attenuation)
                        if data__attenuation_len < 3:
                            raise JsonSchemaValueException("data.@attenuation must contain at least 3 items", value=data__attenuation, name="data.@attenuation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__attenuation_len > 3:
                            raise JsonSchemaValueException("data.@attenuation must contain less than or equal to 3 items", value=data__attenuation, name="data.@attenuation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__attenuation:
                            raise JsonSchemaValueException("data.@attenuation must not be there", value=data__attenuation, name="data.@attenuation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@beamWidth" in data_keys:
                    data_keys.remove("@beamWidth")
                    data__beamWidth = data["@beamWidth"]
                    if not isinstance(data__beamWidth, (int, float)) or isinstance(data__beamWidth, bool):
                        raise JsonSchemaValueException("data.@beamWidth must be number", value=data__beamWidth, name="data.@beamWidth", definition={'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@beamWidth"] = 0.7854
                if "@color" in data_keys:
                    data_keys.remove("@color")
                    data__color = data["@color"]
                    if not isinstance(data__color, (list, tuple)):
                        raise JsonSchemaValueException("data.@color must be array", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__color_is_list = isinstance(data__color, (list, tuple))
                    if data__color_is_list:
                        data__color_len = len(data__color)
                        if data__color_len < 3:
                            raise JsonSchemaValueException("data.@color must contain at least 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__color_len > 3:
                            raise JsonSchemaValueException("data.@color must contain less than or equal to 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__color_x, data__color_item in enumerate(data__color):
                            if not isinstance(data__color_item, (int, float)) or isinstance(data__color_item, bool):
                                raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be number", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__color_item, (int, float)):
                                if data__color_item < 0:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__color_item > 1:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@cutOffAngle" in data_keys:
                    data_keys.remove("@cutOffAngle")
                    data__cutOffAngle = data["@cutOffAngle"]
                    if not isinstance(data__cutOffAngle, (int, float)) or isinstance(data__cutOffAngle, bool):
                        raise JsonSchemaValueException("data.@cutOffAngle must be number", value=data__cutOffAngle, name="data.@cutOffAngle", definition={'default': 1.570796, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@cutOffAngle"] = 1.570796
                if "@direction" in data_keys:
                    data_keys.remove("@direction")
                    data__direction = data["@direction"]
                    if not isinstance(data__direction, (list, tuple)):
                        raise JsonSchemaValueException("data.@direction must be array", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, rule='type')
                    data__direction_is_list = isinstance(data__direction, (list, tuple))
                    if data__direction_is_list:
                        data__direction_len = len(data__direction)
                        if data__direction_len < 3:
                            raise JsonSchemaValueException("data.@direction must contain at least 3 items", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__direction_len > 3:
                            raise JsonSchemaValueException("data.@direction must contain less than or equal to 3 items", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__direction:
                            raise JsonSchemaValueException("data.@direction must not be there", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, rule='items')
                if "@intensity" in data_keys:
                    data_keys.remove("@intensity")
                    data__intensity = data["@intensity"]
                    if not isinstance(data__intensity, (int, float)) or isinstance(data__intensity, bool):
                        raise JsonSchemaValueException("data.@intensity must be number", value=data__intensity, name="data.@intensity", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@intensity"] = 1
                if "@location" in data_keys:
                    data_keys.remove("@location")
                    data__location = data["@location"]
                    if not isinstance(data__location, (list, tuple)):
                        raise JsonSchemaValueException("data.@location must be array", value=data__location, name="data.@location", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__location_is_list = isinstance(data__location, (list, tuple))
                    if data__location_is_list:
                        data__location_len = len(data__location)
                        if data__location_len < 3:
                            raise JsonSchemaValueException("data.@location must contain at least 3 items", value=data__location, name="data.@location", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__location_len > 3:
                            raise JsonSchemaValueException("data.@location must contain less than or equal to 3 items", value=data__location, name="data.@location", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__location_x, data__location_item in enumerate(data__location):
                            if not isinstance(data__location_item, (int, float)) or isinstance(data__location_item, bool):
                                raise JsonSchemaValueException(""+"data.@location[{data__location_x}]".format(**locals())+" must be number", value=data__location_item, name=""+"data.@location[{data__location_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@on" in data_keys:
                    data_keys.remove("@on")
                    data__on = data["@on"]
                    if not isinstance(data__on, (bool)):
                        raise JsonSchemaValueException("data.@on must be boolean", value=data__on, name="data.@on", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@on"] = True
                if "@radius" in data_keys:
                    data_keys.remove("@radius")
                    data__radius = data["@radius"]
                    if not isinstance(data__radius, (int, float)) or isinstance(data__radius, bool):
                        raise JsonSchemaValueException("data.@radius must be number", value=data__radius, name="data.@radius", definition={'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@radius"] = 100
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@beamWidth': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@cutOffAngle': {'default': 1.570796, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@beamWidth': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@cutOffAngle': {'default': 1.570796, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_pointlight(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ambientIntensity" in data_keys:
                    data_keys.remove("@ambientIntensity")
                    data__ambientIntensity = data["@ambientIntensity"]
                    if not isinstance(data__ambientIntensity, (int, float)) or isinstance(data__ambientIntensity, bool):
                        raise JsonSchemaValueException("data.@ambientIntensity must be number", value=data__ambientIntensity, name="data.@ambientIntensity", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@ambientIntensity"] = 0
                if "@attenuation" in data_keys:
                    data_keys.remove("@attenuation")
                    data__attenuation = data["@attenuation"]
                    if not isinstance(data__attenuation, (list, tuple)):
                        raise JsonSchemaValueException("data.@attenuation must be array", value=data__attenuation, name="data.@attenuation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__attenuation_is_list = isinstance(data__attenuation, (list, tuple))
                    if data__attenuation_is_list:
                        data__attenuation_len = len(data__attenuation)
                        if data__attenuation_len < 3:
                            raise JsonSchemaValueException("data.@attenuation must contain at least 3 items", value=data__attenuation, name="data.@attenuation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__attenuation_len > 3:
                            raise JsonSchemaValueException("data.@attenuation must contain less than or equal to 3 items", value=data__attenuation, name="data.@attenuation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__attenuation:
                            raise JsonSchemaValueException("data.@attenuation must not be there", value=data__attenuation, name="data.@attenuation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@color" in data_keys:
                    data_keys.remove("@color")
                    data__color = data["@color"]
                    if not isinstance(data__color, (list, tuple)):
                        raise JsonSchemaValueException("data.@color must be array", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__color_is_list = isinstance(data__color, (list, tuple))
                    if data__color_is_list:
                        data__color_len = len(data__color)
                        if data__color_len < 3:
                            raise JsonSchemaValueException("data.@color must contain at least 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__color_len > 3:
                            raise JsonSchemaValueException("data.@color must contain less than or equal to 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__color_x, data__color_item in enumerate(data__color):
                            if not isinstance(data__color_item, (int, float)) or isinstance(data__color_item, bool):
                                raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be number", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__color_item, (int, float)):
                                if data__color_item < 0:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__color_item > 1:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@intensity" in data_keys:
                    data_keys.remove("@intensity")
                    data__intensity = data["@intensity"]
                    if not isinstance(data__intensity, (int, float)) or isinstance(data__intensity, bool):
                        raise JsonSchemaValueException("data.@intensity must be number", value=data__intensity, name="data.@intensity", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@intensity"] = 1
                if "@location" in data_keys:
                    data_keys.remove("@location")
                    data__location = data["@location"]
                    if not isinstance(data__location, (list, tuple)):
                        raise JsonSchemaValueException("data.@location must be array", value=data__location, name="data.@location", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__location_is_list = isinstance(data__location, (list, tuple))
                    if data__location_is_list:
                        data__location_len = len(data__location)
                        if data__location_len < 3:
                            raise JsonSchemaValueException("data.@location must contain at least 3 items", value=data__location, name="data.@location", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__location_len > 3:
                            raise JsonSchemaValueException("data.@location must contain less than or equal to 3 items", value=data__location, name="data.@location", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__location_x, data__location_item in enumerate(data__location):
                            if not isinstance(data__location_item, (int, float)) or isinstance(data__location_item, bool):
                                raise JsonSchemaValueException(""+"data.@location[{data__location_x}]".format(**locals())+" must be number", value=data__location_item, name=""+"data.@location[{data__location_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@on" in data_keys:
                    data_keys.remove("@on")
                    data__on = data["@on"]
                    if not isinstance(data__on, (bool)):
                        raise JsonSchemaValueException("data.@on must be boolean", value=data__on, name="data.@on", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@on"] = True
                if "@radius" in data_keys:
                    data_keys.remove("@radius")
                    data__radius = data["@radius"]
                    if not isinstance(data__radius, (int, float)) or isinstance(data__radius, bool):
                        raise JsonSchemaValueException("data.@radius must be number", value=data__radius, name="data.@radius", definition={'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@radius"] = 100
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@attenuation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 1, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}, {'default': 0, 'minimum': 0, 'type': 'number'}], 'items': False}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@location': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@radius': {'default': 100, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_directionallight(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@ambientIntensity" in data_keys:
                    data_keys.remove("@ambientIntensity")
                    data__ambientIntensity = data["@ambientIntensity"]
                    if not isinstance(data__ambientIntensity, (int, float)) or isinstance(data__ambientIntensity, bool):
                        raise JsonSchemaValueException("data.@ambientIntensity must be number", value=data__ambientIntensity, name="data.@ambientIntensity", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@ambientIntensity"] = 0
                if "@color" in data_keys:
                    data_keys.remove("@color")
                    data__color = data["@color"]
                    if not isinstance(data__color, (list, tuple)):
                        raise JsonSchemaValueException("data.@color must be array", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__color_is_list = isinstance(data__color, (list, tuple))
                    if data__color_is_list:
                        data__color_len = len(data__color)
                        if data__color_len < 3:
                            raise JsonSchemaValueException("data.@color must contain at least 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__color_len > 3:
                            raise JsonSchemaValueException("data.@color must contain less than or equal to 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__color_x, data__color_item in enumerate(data__color):
                            if not isinstance(data__color_item, (int, float)) or isinstance(data__color_item, bool):
                                raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be number", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__color_item, (int, float)):
                                if data__color_item < 0:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__color_item > 1:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@direction" in data_keys:
                    data_keys.remove("@direction")
                    data__direction = data["@direction"]
                    if not isinstance(data__direction, (list, tuple)):
                        raise JsonSchemaValueException("data.@direction must be array", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, rule='type')
                    data__direction_is_list = isinstance(data__direction, (list, tuple))
                    if data__direction_is_list:
                        data__direction_len = len(data__direction)
                        if data__direction_len < 3:
                            raise JsonSchemaValueException("data.@direction must contain at least 3 items", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__direction_len > 3:
                            raise JsonSchemaValueException("data.@direction must contain less than or equal to 3 items", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__direction:
                            raise JsonSchemaValueException("data.@direction must not be there", value=data__direction, name="data.@direction", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, rule='items')
                if "@intensity" in data_keys:
                    data_keys.remove("@intensity")
                    data__intensity = data["@intensity"]
                    if not isinstance(data__intensity, (int, float)) or isinstance(data__intensity, bool):
                        raise JsonSchemaValueException("data.@intensity must be number", value=data__intensity, name="data.@intensity", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@intensity"] = 1
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@on" in data_keys:
                    data_keys.remove("@on")
                    data__on = data["@on"]
                    if not isinstance(data__on, (bool)):
                        raise JsonSchemaValueException("data.@on must be boolean", value=data__on, name="data.@on", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@on"] = True
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@ambientIntensity': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@direction': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': -1, 'type': 'number'}], 'items': False}, '@intensity': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@on': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_scalarinterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int, float)) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be number", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_positioninterpolator2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        if data__keyValue_len < 2:
                            raise JsonSchemaValueException("data.@keyValue must contain at least 2 items", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='minItems')
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int, float)) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be number", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_positioninterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        if data__keyValue_len < 3:
                            raise JsonSchemaValueException("data.@keyValue must contain at least 3 items", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='minItems')
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int, float)) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be number", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_orientationinterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFRotation inputOutput', 'type': 'array', 'minItems': 4, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFRotation inputOutput', 'type': 'array', 'minItems': 4, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFRotation inputOutput', 'type': 'array', 'minItems': 4, 'items': {'type': 'number'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        if data__keyValue_len < 4:
                            raise JsonSchemaValueException("data.@keyValue must contain at least 4 items", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFRotation inputOutput', 'type': 'array', 'minItems': 4, 'items': {'type': 'number'}}, rule='minItems')
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int, float)) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be number", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFRotation inputOutput', 'type': 'array', 'minItems': 4, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFRotation inputOutput', 'type': 'array', 'minItems': 4, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_normalinterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        if data__keyValue_len < 3:
                            raise JsonSchemaValueException("data.@keyValue must contain at least 3 items", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='minItems')
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int, float)) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be number", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_geopositioninterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-geoOrigin" in data_keys:
                    data_keys.remove("-geoOrigin")
                    data__geoOrigin = data["-geoOrigin"]
                    validate_x3d_3_0_jsonschema_json___defs__geooriginsfnode(data__geoOrigin)
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        if data__keyValue_len < 3:
                            raise JsonSchemaValueException("data.@keyValue must contain at least 3 items", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='minItems')
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int, float)) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be number", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator2d(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        if data__keyValue_len < 2:
                            raise JsonSchemaValueException("data.@keyValue must contain at least 2 items", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, rule='minItems')
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int, float)) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be number", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec2f inputOutput', 'type': 'array', 'minItems': 2, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        if data__keyValue_len < 3:
                            raise JsonSchemaValueException("data.@keyValue must contain at least 3 items", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, rule='minItems')
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int, float)) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be number", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'items': {'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_colorinterpolator(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@key" in data_keys:
                    data_keys.remove("@key")
                    data__key = data["@key"]
                    if not isinstance(data__key, (list, tuple)):
                        raise JsonSchemaValueException("data.@key must be array", value=data__key, name="data.@key", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__key_is_list = isinstance(data__key, (list, tuple))
                    if data__key_is_list:
                        data__key_len = len(data__key)
                        for data__key_x, data__key_item in enumerate(data__key):
                            if not isinstance(data__key_item, (int, float)) or isinstance(data__key_item, bool):
                                raise JsonSchemaValueException(""+"data.@key[{data__key_x}]".format(**locals())+" must be number", value=data__key_item, name=""+"data.@key[{data__key_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@keyValue" in data_keys:
                    data_keys.remove("@keyValue")
                    data__keyValue = data["@keyValue"]
                    if not isinstance(data__keyValue, (list, tuple)):
                        raise JsonSchemaValueException("data.@keyValue must be array", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__keyValue_is_list = isinstance(data__keyValue, (list, tuple))
                    if data__keyValue_is_list:
                        data__keyValue_len = len(data__keyValue)
                        if data__keyValue_len < 3:
                            raise JsonSchemaValueException("data.@keyValue must contain at least 3 items", value=data__keyValue, name="data.@keyValue", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        for data__keyValue_x, data__keyValue_item in enumerate(data__keyValue):
                            if not isinstance(data__keyValue_item, (int, float)) or isinstance(data__keyValue_item, bool):
                                raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be number", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__keyValue_item, (int, float)):
                                if data__keyValue_item < 0:
                                    raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__keyValue_item > 1:
                                    raise JsonSchemaValueException(""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__keyValue_item, name=""+"data.@keyValue[{data__keyValue_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@key': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@keyValue': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_worldinfo(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@title': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@title': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@info" in data_keys:
                    data_keys.remove("@info")
                    data__info = data["@info"]
                    if not isinstance(data__info, (list, tuple)):
                        raise JsonSchemaValueException("data.@info must be array", value=data__info, name="data.@info", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, rule='type')
                    data__info_is_list = isinstance(data__info, (list, tuple))
                    if data__info_is_list:
                        data__info_len = len(data__info)
                        for data__info_x, data__info_item in enumerate(data__info):
                            if not isinstance(data__info_item, (str)):
                                raise JsonSchemaValueException(""+"data.@info[{data__info_x}]".format(**locals())+" must be string", value=data__info_item, name=""+"data.@info[{data__info_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@title" in data_keys:
                    data_keys.remove("@title")
                    data__title = data["@title"]
                    if not isinstance(data__title, (str)):
                        raise JsonSchemaValueException("data.@title must be string", value=data__title, name="data.@title", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@title': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@info': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@title': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_geometadata(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-data': {'$ref': '#/$defs/-X3DNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@summary': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-data': {'$ref': '#/$defs/-X3DNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@summary': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-data" in data_keys:
                    data_keys.remove("-data")
                    data__data = data["-data"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dnodemfnode(data__data)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@summary" in data_keys:
                    data_keys.remove("@summary")
                    data__summary = data["@summary"]
                    if not isinstance(data__summary, (list, tuple)):
                        raise JsonSchemaValueException("data.@summary must be array", value=data__summary, name="data.@summary", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, rule='type')
                    data__summary_is_list = isinstance(data__summary, (list, tuple))
                    if data__summary_is_list:
                        data__summary_len = len(data__summary)
                        for data__summary_x, data__summary_item in enumerate(data__summary):
                            if not isinstance(data__summary_item, (str)):
                                raise JsonSchemaValueException(""+"data.@summary[{data__summary_x}]".format(**locals())+" must be string", value=data__summary_item, name=""+"data.@summary[{data__summary_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "@url" in data_keys:
                    data_keys.remove("@url")
                    data__url = data["@url"]
                    if not isinstance(data__url, (list, tuple)):
                        raise JsonSchemaValueException("data.@url must be array", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__url_is_list = isinstance(data__url, (list, tuple))
                    if data__url_is_list:
                        data__url_len = len(data__url)
                        if data__url_len < 1:
                            raise JsonSchemaValueException("data.@url must contain at least 1 items", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__url_x, data__url_item in enumerate(data__url):
                            if not isinstance(data__url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be string", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__url_item):
                                    raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be uri-reference", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-data': {'$ref': '#/$defs/-X3DNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@summary': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-data': {'$ref': '#/$defs/-X3DNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@summary': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_transform(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 3:
                            raise JsonSchemaValueException("data.@center must contain at least 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 3:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@rotation" in data_keys:
                    data_keys.remove("@rotation")
                    data__rotation = data["@rotation"]
                    if not isinstance(data__rotation, (list, tuple)):
                        raise JsonSchemaValueException("data.@rotation must be array", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__rotation_is_list = isinstance(data__rotation, (list, tuple))
                    if data__rotation_is_list:
                        data__rotation_len = len(data__rotation)
                        if data__rotation_len < 4:
                            raise JsonSchemaValueException("data.@rotation must contain at least 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__rotation_len > 4:
                            raise JsonSchemaValueException("data.@rotation must contain less than or equal to 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__rotation:
                            raise JsonSchemaValueException("data.@rotation must not be there", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@scale" in data_keys:
                    data_keys.remove("@scale")
                    data__scale = data["@scale"]
                    if not isinstance(data__scale, (list, tuple)):
                        raise JsonSchemaValueException("data.@scale must be array", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, rule='type')
                    data__scale_is_list = isinstance(data__scale, (list, tuple))
                    if data__scale_is_list:
                        data__scale_len = len(data__scale)
                        if data__scale_len < 3:
                            raise JsonSchemaValueException("data.@scale must contain at least 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, rule='minItems')
                        if data__scale_len > 3:
                            raise JsonSchemaValueException("data.@scale must contain less than or equal to 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, rule='maxItems')
                        for data__scale_x, data__scale_item in enumerate(data__scale):
                            if not isinstance(data__scale_item, (int, float)) or isinstance(data__scale_item, bool):
                                raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be number", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'type': 'number'}, rule='type')
                if "@scaleOrientation" in data_keys:
                    data_keys.remove("@scaleOrientation")
                    data__scaleOrientation = data["@scaleOrientation"]
                    if not isinstance(data__scaleOrientation, (list, tuple)):
                        raise JsonSchemaValueException("data.@scaleOrientation must be array", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__scaleOrientation_is_list = isinstance(data__scaleOrientation, (list, tuple))
                    if data__scaleOrientation_is_list:
                        data__scaleOrientation_len = len(data__scaleOrientation)
                        if data__scaleOrientation_len < 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain at least 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__scaleOrientation_len > 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain less than or equal to 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__scaleOrientation:
                            raise JsonSchemaValueException("data.@scaleOrientation must not be there", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@translation" in data_keys:
                    data_keys.remove("@translation")
                    data__translation = data["@translation"]
                    if not isinstance(data__translation, (list, tuple)):
                        raise JsonSchemaValueException("data.@translation must be array", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__translation_is_list = isinstance(data__translation, (list, tuple))
                    if data__translation_is_list:
                        data__translation_len = len(data__translation)
                        if data__translation_len < 3:
                            raise JsonSchemaValueException("data.@translation must contain at least 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__translation_len > 3:
                            raise JsonSchemaValueException("data.@translation must contain less than or equal to 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__translation_x, data__translation_item in enumerate(data__translation):
                            if not isinstance(data__translation_item, (int, float)) or isinstance(data__translation_item, bool):
                                raise JsonSchemaValueException(""+"data.@translation[{data__translation_x}]".format(**locals())+" must be number", value=data__translation_item, name=""+"data.@translation[{data__translation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_switch(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@whichChoice': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@whichChoice': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@whichChoice" in data_keys:
                    data_keys.remove("@whichChoice")
                    data__whichChoice = data["@whichChoice"]
                    if not isinstance(data__whichChoice, (int)) and not (isinstance(data__whichChoice, float) and data__whichChoice.is_integer()) or isinstance(data__whichChoice, bool):
                        raise JsonSchemaValueException("data.@whichChoice must be integer", value=data__whichChoice, name="data.@whichChoice", definition={'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@whichChoice"] = -1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@whichChoice': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@whichChoice': {'default': -1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_lod(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 3:
                            raise JsonSchemaValueException("data.@center must contain at least 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 3:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@range" in data_keys:
                    data_keys.remove("@range")
                    data__range = data["@range"]
                    if not isinstance(data__range, (list, tuple)):
                        raise JsonSchemaValueException("data.@range must be array", value=data__range, name="data.@range", definition={'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__range_is_list = isinstance(data__range, (list, tuple))
                    if data__range_is_list:
                        data__range_len = len(data__range)
                        for data__range_x, data__range_item in enumerate(data__range):
                            if not isinstance(data__range_item, (int, float)) or isinstance(data__range_item, bool):
                                raise JsonSchemaValueException(""+"data.@range[{data__range_x}]".format(**locals())+" must be number", value=data__range_item, name=""+"data.@range[{data__range_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@range': {'$comment': 'MFFloat initializeOnly', 'type': 'array', 'items': {'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_hanimsite(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 3:
                            raise JsonSchemaValueException("data.@center must contain at least 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 3:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    data__name_any_of_count = 0
                    if not data__name_any_of_count:
                        try:
                            if data__name not in ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']:
                                raise JsonSchemaValueException("data.@name must be one of ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']", value=data__name, name="data.@name", definition={'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, rule='enum')
                            data__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data__name_any_of_count:
                        try:
                            if not isinstance(data__name, (str)):
                                raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'type': 'string'}, rule='type')
                            data__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data__name_any_of_count:
                        raise JsonSchemaValueException("data.@name must be valid by one of anyOf definition", value=data__name, name="data.@name", definition={'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='anyOf')
                if "@rotation" in data_keys:
                    data_keys.remove("@rotation")
                    data__rotation = data["@rotation"]
                    if not isinstance(data__rotation, (list, tuple)):
                        raise JsonSchemaValueException("data.@rotation must be array", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__rotation_is_list = isinstance(data__rotation, (list, tuple))
                    if data__rotation_is_list:
                        data__rotation_len = len(data__rotation)
                        if data__rotation_len < 4:
                            raise JsonSchemaValueException("data.@rotation must contain at least 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__rotation_len > 4:
                            raise JsonSchemaValueException("data.@rotation must contain less than or equal to 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__rotation:
                            raise JsonSchemaValueException("data.@rotation must not be there", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@scale" in data_keys:
                    data_keys.remove("@scale")
                    data__scale = data["@scale"]
                    if not isinstance(data__scale, (list, tuple)):
                        raise JsonSchemaValueException("data.@scale must be array", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='type')
                    data__scale_is_list = isinstance(data__scale, (list, tuple))
                    if data__scale_is_list:
                        data__scale_len = len(data__scale)
                        if data__scale_len < 3:
                            raise JsonSchemaValueException("data.@scale must contain at least 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__scale_len > 3:
                            raise JsonSchemaValueException("data.@scale must contain less than or equal to 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__scale_x, data__scale_item in enumerate(data__scale):
                            if not isinstance(data__scale_item, (int, float)) or isinstance(data__scale_item, bool):
                                raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be number", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__scale_item, (int, float)):
                                if data__scale_item <= 0:
                                    raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be bigger than 0", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}, rule='exclusiveMinimum')
                if "@scaleOrientation" in data_keys:
                    data_keys.remove("@scaleOrientation")
                    data__scaleOrientation = data["@scaleOrientation"]
                    if not isinstance(data__scaleOrientation, (list, tuple)):
                        raise JsonSchemaValueException("data.@scaleOrientation must be array", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__scaleOrientation_is_list = isinstance(data__scaleOrientation, (list, tuple))
                    if data__scaleOrientation_is_list:
                        data__scaleOrientation_len = len(data__scaleOrientation)
                        if data__scaleOrientation_len < 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain at least 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__scaleOrientation_len > 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain less than or equal to 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__scaleOrientation:
                            raise JsonSchemaValueException("data.@scaleOrientation must not be there", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@translation" in data_keys:
                    data_keys.remove("@translation")
                    data__translation = data["@translation"]
                    if not isinstance(data__translation, (list, tuple)):
                        raise JsonSchemaValueException("data.@translation must be array", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__translation_is_list = isinstance(data__translation, (list, tuple))
                    if data__translation_is_list:
                        data__translation_len = len(data__translation)
                        if data__translation_len < 3:
                            raise JsonSchemaValueException("data.@translation must contain at least 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__translation_len > 3:
                            raise JsonSchemaValueException("data.@translation must contain less than or equal to 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__translation_x, data__translation_item in enumerate(data__translation):
                            if not isinstance(data__translation_item, (int, float)) or isinstance(data__translation_item, bool):
                                raise JsonSchemaValueException(""+"data.@translation[{data__translation_x}]".format(**locals())+" must be number", value=data__translation_item, name=""+"data.@translation[{data__translation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@name': {'anyOf': [{'enum': ['sellion', 'r_infraorbitale', 'l_infraorbitale', 'supramenton', 'r_tragion', 'r_gonion', 'l_tragion', 'l_gonion', 'nuchale', 'r_clavicale', 'suprasternale', 'l_clavicale', 'r_thelion', 'l_thelion', 'substernale', 'r_rib10', 'r_asis', 'l_rib10', 'l_asis', 'r_iliocristale', 'r_trochanterion', 'l_iliocristale', 'l_trochanterion', 'cervicale', 'rib10_midspine', 'r_psis', 'l_psis', 'waist_preferred_post', 'r_acromion', 'r_axilla_ant', 'r_radial_styloid', 'r_axilla_post', 'r_olecranon', 'r_humeral_lateral_epicn', 'r_humeral_medial_epicn', 'r_radiale', 'r_metacarpal_pha2', 'r_dactylion', 'r_ulnar_styloid', 'r_metacarpal_pha5', 'l_acromion', 'l_axilla_ant', 'l_radial_styloid', 'l_axilla_post', 'l_olecranon', 'l_humeral_lateral_epicn', 'l_humeral_medial_epicn', 'l_radiale', 'l_metacarpal_pha2', 'l_dactylion', 'l_ulnar_styloid', 'l_metacarpal_pha5', 'r_knee_crease', 'r_femoral_lateral_epicn', 'r_femoral_medial_epicn', 'r_metatarsal_pha5', 'r_lateral_malleolus', 'r_medial_malleolus', 'r_sphyrion', 'r_metatarsal_pha1', 'r_calcaneous_post', 'r_digit2', 'l_knee_crease', 'l_femoral_lateral_epicn', 'l_femoral_medial_epicn', 'l_metatarsal_pha5', 'l_lateral_malleolus', 'l_medial_malleolus', 'l_sphyrion', 'l_metatarsal_pha1', 'l_calcaneous_post', 'l_digit2', 'crotch', 'r_neck_base', 'l_neck_base', 'navel']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'exclusiveMinimum': 0, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_hanimsegment(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@centerOfMass': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@mass': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@momentsOfInertia': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@name': {'anyOf': [{'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@centerOfMass': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@mass': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@momentsOfInertia': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@name': {'anyOf': [{'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@centerOfMass" in data_keys:
                    data_keys.remove("@centerOfMass")
                    data__centerOfMass = data["@centerOfMass"]
                    if not isinstance(data__centerOfMass, (list, tuple)):
                        raise JsonSchemaValueException("data.@centerOfMass must be array", value=data__centerOfMass, name="data.@centerOfMass", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__centerOfMass_is_list = isinstance(data__centerOfMass, (list, tuple))
                    if data__centerOfMass_is_list:
                        data__centerOfMass_len = len(data__centerOfMass)
                        if data__centerOfMass_len < 3:
                            raise JsonSchemaValueException("data.@centerOfMass must contain at least 3 items", value=data__centerOfMass, name="data.@centerOfMass", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__centerOfMass_len > 3:
                            raise JsonSchemaValueException("data.@centerOfMass must contain less than or equal to 3 items", value=data__centerOfMass, name="data.@centerOfMass", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__centerOfMass_x, data__centerOfMass_item in enumerate(data__centerOfMass):
                            if not isinstance(data__centerOfMass_item, (int, float)) or isinstance(data__centerOfMass_item, bool):
                                raise JsonSchemaValueException(""+"data.@centerOfMass[{data__centerOfMass_x}]".format(**locals())+" must be number", value=data__centerOfMass_item, name=""+"data.@centerOfMass[{data__centerOfMass_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "-coord" in data_keys:
                    data_keys.remove("-coord")
                    data__coord = data["-coord"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dcoordinatenodesfnode(data__coord)
                if "-displacers" in data_keys:
                    data_keys.remove("-displacers")
                    data__displacers = data["-displacers"]
                    validate_x3d_3_0_jsonschema_json___defs__hanimdisplacermfnode(data__displacers)
                if "@mass" in data_keys:
                    data_keys.remove("@mass")
                    data__mass = data["@mass"]
                    if not isinstance(data__mass, (int, float)) or isinstance(data__mass, bool):
                        raise JsonSchemaValueException("data.@mass must be number", value=data__mass, name="data.@mass", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@mass"] = 0
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@momentsOfInertia" in data_keys:
                    data_keys.remove("@momentsOfInertia")
                    data__momentsOfInertia = data["@momentsOfInertia"]
                    if not isinstance(data__momentsOfInertia, (list, tuple)):
                        raise JsonSchemaValueException("data.@momentsOfInertia must be array", value=data__momentsOfInertia, name="data.@momentsOfInertia", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__momentsOfInertia_is_list = isinstance(data__momentsOfInertia, (list, tuple))
                    if data__momentsOfInertia_is_list:
                        data__momentsOfInertia_len = len(data__momentsOfInertia)
                        for data__momentsOfInertia_x, data__momentsOfInertia_item in enumerate(data__momentsOfInertia):
                            if not isinstance(data__momentsOfInertia_item, (int, float)) or isinstance(data__momentsOfInertia_item, bool):
                                raise JsonSchemaValueException(""+"data.@momentsOfInertia[{data__momentsOfInertia_x}]".format(**locals())+" must be number", value=data__momentsOfInertia_item, name=""+"data.@momentsOfInertia[{data__momentsOfInertia_x}]".format(**locals())+"", definition={'default': 0, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__momentsOfInertia_item, (int, float)):
                                if data__momentsOfInertia_item < 0:
                                    raise JsonSchemaValueException(""+"data.@momentsOfInertia[{data__momentsOfInertia_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__momentsOfInertia_item, name=""+"data.@momentsOfInertia[{data__momentsOfInertia_x}]".format(**locals())+"", definition={'default': 0, 'minimum': 0, 'type': 'number'}, rule='minimum')
                if "@name" in data_keys:
                    data_keys.remove("@name")
                    data__name = data["@name"]
                    if not isinstance(data__name, (str)):
                        raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'anyOf': [{'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    data__name_any_of_count = 0
                    if not data__name_any_of_count:
                        try:
                            if data__name not in ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']:
                                raise JsonSchemaValueException("data.@name must be one of ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']", value=data__name, name="data.@name", definition={'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, rule='enum')
                            data__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data__name_any_of_count:
                        try:
                            if not isinstance(data__name, (str)):
                                raise JsonSchemaValueException("data.@name must be string", value=data__name, name="data.@name", definition={'type': 'string'}, rule='type')
                            data__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data__name_any_of_count:
                        raise JsonSchemaValueException("data.@name must be valid by one of anyOf definition", value=data__name, name="data.@name", definition={'anyOf': [{'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='anyOf')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@centerOfMass': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@mass': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@momentsOfInertia': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@name': {'anyOf': [{'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@centerOfMass': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-coord': {'$ref': '#/$defs/-X3DCoordinateNodeSFNode'}, '-displacers': {'$ref': '#/$defs/-HAnimDisplacerMFNode'}, '@mass': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@momentsOfInertia': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'default': 0, 'minimum': 0, 'type': 'number'}}, '@name': {'anyOf': [{'enum': ['sacrum', 'pelvis', 'l_thigh', 'l_calf', 'l_hindfoot', 'l_midproximal', 'l_middistal', 'l_forefoot', 'r_thigh', 'r_calf', 'r_hindfoot', 'r_midproximal', 'r_middistal', 'r_forefoot', 'l5', 'l4', 'l3', 'l2', 'l1', 't12', 't11', 't10', 't9', 't8', 't7', 't6', 't5', 't4', 't3', 't2', 't1', 'c7', 'c6', 'c5', 'c4', 'c3', 'c2', 'c1', 'skull', 'l_eyelid', 'r_eyelid', 'l_eyeball', 'r_eyeball', 'l_eyebrow', 'r_eyebrow', 'jaw', 'l_clavicle', 'l_scapula', 'l_upperarm', 'l_forearm', 'l_hand', 'l_thumb_metacarpal', 'l_thumb_proximal', 'l_thumb_distal', 'l_index_metacarpal', 'l_index_proximal', 'l_index_middle', 'l_index_distal', 'l_middle_metacarpal', 'l_middle_proximal', 'l_middle_middle', 'l_middle_distal', 'l_ring_metacarpal', 'l_ring_proximal', 'l_ring_middle', 'l_ring_distal', 'l_pinky_metacarpal', 'l_pinky_proximal', 'l_pinky_middle', 'l_pinky_distal', 'r_clavicle', 'r_scapula', 'r_upperarm', 'r_forearm', 'r_hand', 'r_thumb_metacarpal', 'r_thumb_proximal', 'r_thumb_distal', 'r_index_metacarpal', 'r_index_proximal', 'r_index_middle', 'r_index_distal', 'r_middle_metacarpal', 'r_middle_proximal', 'r_middle_middle', 'r_middle_distal', 'r_ring_metacarpal', 'r_ring_proximal', 'r_ring_middle', 'r_ring_distal', 'r_pinky_metacarpal', 'r_pinky_proximal', 'r_pinky_middle', 'r_pinky_distal']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_group(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_geolocation(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "@geoCoords" in data_keys:
                    data_keys.remove("@geoCoords")
                    data__geoCoords = data["@geoCoords"]
                    if not isinstance(data__geoCoords, (list, tuple)):
                        raise JsonSchemaValueException("data.@geoCoords must be array", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__geoCoords_is_list = isinstance(data__geoCoords, (list, tuple))
                    if data__geoCoords_is_list:
                        data__geoCoords_len = len(data__geoCoords)
                        if data__geoCoords_len < 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain at least 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__geoCoords_len > 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain less than or equal to 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__geoCoords_x, data__geoCoords_item in enumerate(data__geoCoords):
                            if not isinstance(data__geoCoords_item, (int, float)) or isinstance(data__geoCoords_item, bool):
                                raise JsonSchemaValueException(""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+" must be number", value=data__geoCoords_item, name=""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-geoOrigin" in data_keys:
                    data_keys.remove("-geoOrigin")
                    data__geoOrigin = data["-geoOrigin"]
                    validate_x3d_3_0_jsonschema_json___defs__geooriginsfnode(data__geoOrigin)
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_espdutransform(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterArray': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@articulationParameterChangeIndicatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterCount': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterDesignatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterIdPartAttachedToArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterTypeArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@collisionType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@deadReckoning': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@detonationLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationRelativeLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationResult': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityExtra': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySpecific': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySubcategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventNumber': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fired1': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fired2': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fireMissionIndex': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@firingRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@firingRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@forceID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fuse': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@linearAcceleration': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@linearVelocity': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@marking': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionEndPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@munitionEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionQuantity': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionStartPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@warhead': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterArray': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@articulationParameterChangeIndicatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterCount': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterDesignatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterIdPartAttachedToArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterTypeArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@collisionType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@deadReckoning': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@detonationLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationRelativeLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationResult': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityExtra': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySpecific': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySubcategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventNumber': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fired1': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fired2': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fireMissionIndex': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@firingRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@firingRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@forceID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fuse': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@linearAcceleration': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@linearVelocity': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@marking': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionEndPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@munitionEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionQuantity': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionStartPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@warhead': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@address" in data_keys:
                    data_keys.remove("@address")
                    data__address = data["@address"]
                    if not isinstance(data__address, (str)):
                        raise JsonSchemaValueException("data.@address must be string", value=data__address, name="data.@address", definition={'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                else: data["@address"] = 'localhost'
                if "@applicationID" in data_keys:
                    data_keys.remove("@applicationID")
                    data__applicationID = data["@applicationID"]
                    if not isinstance(data__applicationID, (int)) and not (isinstance(data__applicationID, float) and data__applicationID.is_integer()) or isinstance(data__applicationID, bool):
                        raise JsonSchemaValueException("data.@applicationID must be integer", value=data__applicationID, name="data.@applicationID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@applicationID"] = 0
                if "@articulationParameterArray" in data_keys:
                    data_keys.remove("@articulationParameterArray")
                    data__articulationParameterArray = data["@articulationParameterArray"]
                    if not isinstance(data__articulationParameterArray, (list, tuple)):
                        raise JsonSchemaValueException("data.@articulationParameterArray must be array", value=data__articulationParameterArray, name="data.@articulationParameterArray", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, rule='type')
                    data__articulationParameterArray_is_list = isinstance(data__articulationParameterArray, (list, tuple))
                    if data__articulationParameterArray_is_list:
                        data__articulationParameterArray_len = len(data__articulationParameterArray)
                        for data__articulationParameterArray_x, data__articulationParameterArray_item in enumerate(data__articulationParameterArray):
                            if not isinstance(data__articulationParameterArray_item, (int, float)) or isinstance(data__articulationParameterArray_item, bool):
                                raise JsonSchemaValueException(""+"data.@articulationParameterArray[{data__articulationParameterArray_x}]".format(**locals())+" must be number", value=data__articulationParameterArray_item, name=""+"data.@articulationParameterArray[{data__articulationParameterArray_x}]".format(**locals())+"", definition={'type': 'number'}, rule='type')
                if "@articulationParameterChangeIndicatorArray" in data_keys:
                    data_keys.remove("@articulationParameterChangeIndicatorArray")
                    data__articulationParameterChangeIndicatorArray = data["@articulationParameterChangeIndicatorArray"]
                    if not isinstance(data__articulationParameterChangeIndicatorArray, (list, tuple)):
                        raise JsonSchemaValueException("data.@articulationParameterChangeIndicatorArray must be array", value=data__articulationParameterChangeIndicatorArray, name="data.@articulationParameterChangeIndicatorArray", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, rule='type')
                    data__articulationParameterChangeIndicatorArray_is_list = isinstance(data__articulationParameterChangeIndicatorArray, (list, tuple))
                    if data__articulationParameterChangeIndicatorArray_is_list:
                        data__articulationParameterChangeIndicatorArray_len = len(data__articulationParameterChangeIndicatorArray)
                        for data__articulationParameterChangeIndicatorArray_x, data__articulationParameterChangeIndicatorArray_item in enumerate(data__articulationParameterChangeIndicatorArray):
                            if not isinstance(data__articulationParameterChangeIndicatorArray_item, (int)) and not (isinstance(data__articulationParameterChangeIndicatorArray_item, float) and data__articulationParameterChangeIndicatorArray_item.is_integer()) or isinstance(data__articulationParameterChangeIndicatorArray_item, bool):
                                raise JsonSchemaValueException(""+"data.@articulationParameterChangeIndicatorArray[{data__articulationParameterChangeIndicatorArray_x}]".format(**locals())+" must be integer", value=data__articulationParameterChangeIndicatorArray_item, name=""+"data.@articulationParameterChangeIndicatorArray[{data__articulationParameterChangeIndicatorArray_x}]".format(**locals())+"", definition={'type': 'integer'}, rule='type')
                if "@articulationParameterCount" in data_keys:
                    data_keys.remove("@articulationParameterCount")
                    data__articulationParameterCount = data["@articulationParameterCount"]
                    if not isinstance(data__articulationParameterCount, (int)) and not (isinstance(data__articulationParameterCount, float) and data__articulationParameterCount.is_integer()) or isinstance(data__articulationParameterCount, bool):
                        raise JsonSchemaValueException("data.@articulationParameterCount must be integer", value=data__articulationParameterCount, name="data.@articulationParameterCount", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@articulationParameterCount"] = 0
                if "@articulationParameterDesignatorArray" in data_keys:
                    data_keys.remove("@articulationParameterDesignatorArray")
                    data__articulationParameterDesignatorArray = data["@articulationParameterDesignatorArray"]
                    if not isinstance(data__articulationParameterDesignatorArray, (list, tuple)):
                        raise JsonSchemaValueException("data.@articulationParameterDesignatorArray must be array", value=data__articulationParameterDesignatorArray, name="data.@articulationParameterDesignatorArray", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, rule='type')
                    data__articulationParameterDesignatorArray_is_list = isinstance(data__articulationParameterDesignatorArray, (list, tuple))
                    if data__articulationParameterDesignatorArray_is_list:
                        data__articulationParameterDesignatorArray_len = len(data__articulationParameterDesignatorArray)
                        for data__articulationParameterDesignatorArray_x, data__articulationParameterDesignatorArray_item in enumerate(data__articulationParameterDesignatorArray):
                            if not isinstance(data__articulationParameterDesignatorArray_item, (int)) and not (isinstance(data__articulationParameterDesignatorArray_item, float) and data__articulationParameterDesignatorArray_item.is_integer()) or isinstance(data__articulationParameterDesignatorArray_item, bool):
                                raise JsonSchemaValueException(""+"data.@articulationParameterDesignatorArray[{data__articulationParameterDesignatorArray_x}]".format(**locals())+" must be integer", value=data__articulationParameterDesignatorArray_item, name=""+"data.@articulationParameterDesignatorArray[{data__articulationParameterDesignatorArray_x}]".format(**locals())+"", definition={'type': 'integer'}, rule='type')
                if "@articulationParameterIdPartAttachedToArray" in data_keys:
                    data_keys.remove("@articulationParameterIdPartAttachedToArray")
                    data__articulationParameterIdPartAttachedToArray = data["@articulationParameterIdPartAttachedToArray"]
                    if not isinstance(data__articulationParameterIdPartAttachedToArray, (list, tuple)):
                        raise JsonSchemaValueException("data.@articulationParameterIdPartAttachedToArray must be array", value=data__articulationParameterIdPartAttachedToArray, name="data.@articulationParameterIdPartAttachedToArray", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, rule='type')
                    data__articulationParameterIdPartAttachedToArray_is_list = isinstance(data__articulationParameterIdPartAttachedToArray, (list, tuple))
                    if data__articulationParameterIdPartAttachedToArray_is_list:
                        data__articulationParameterIdPartAttachedToArray_len = len(data__articulationParameterIdPartAttachedToArray)
                        for data__articulationParameterIdPartAttachedToArray_x, data__articulationParameterIdPartAttachedToArray_item in enumerate(data__articulationParameterIdPartAttachedToArray):
                            if not isinstance(data__articulationParameterIdPartAttachedToArray_item, (int)) and not (isinstance(data__articulationParameterIdPartAttachedToArray_item, float) and data__articulationParameterIdPartAttachedToArray_item.is_integer()) or isinstance(data__articulationParameterIdPartAttachedToArray_item, bool):
                                raise JsonSchemaValueException(""+"data.@articulationParameterIdPartAttachedToArray[{data__articulationParameterIdPartAttachedToArray_x}]".format(**locals())+" must be integer", value=data__articulationParameterIdPartAttachedToArray_item, name=""+"data.@articulationParameterIdPartAttachedToArray[{data__articulationParameterIdPartAttachedToArray_x}]".format(**locals())+"", definition={'type': 'integer'}, rule='type')
                if "@articulationParameterTypeArray" in data_keys:
                    data_keys.remove("@articulationParameterTypeArray")
                    data__articulationParameterTypeArray = data["@articulationParameterTypeArray"]
                    if not isinstance(data__articulationParameterTypeArray, (list, tuple)):
                        raise JsonSchemaValueException("data.@articulationParameterTypeArray must be array", value=data__articulationParameterTypeArray, name="data.@articulationParameterTypeArray", definition={'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, rule='type')
                    data__articulationParameterTypeArray_is_list = isinstance(data__articulationParameterTypeArray, (list, tuple))
                    if data__articulationParameterTypeArray_is_list:
                        data__articulationParameterTypeArray_len = len(data__articulationParameterTypeArray)
                        for data__articulationParameterTypeArray_x, data__articulationParameterTypeArray_item in enumerate(data__articulationParameterTypeArray):
                            if not isinstance(data__articulationParameterTypeArray_item, (int)) and not (isinstance(data__articulationParameterTypeArray_item, float) and data__articulationParameterTypeArray_item.is_integer()) or isinstance(data__articulationParameterTypeArray_item, bool):
                                raise JsonSchemaValueException(""+"data.@articulationParameterTypeArray[{data__articulationParameterTypeArray_x}]".format(**locals())+" must be integer", value=data__articulationParameterTypeArray_item, name=""+"data.@articulationParameterTypeArray[{data__articulationParameterTypeArray_x}]".format(**locals())+"", definition={'type': 'integer'}, rule='type')
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "@center" in data_keys:
                    data_keys.remove("@center")
                    data__center = data["@center"]
                    if not isinstance(data__center, (list, tuple)):
                        raise JsonSchemaValueException("data.@center must be array", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__center_is_list = isinstance(data__center, (list, tuple))
                    if data__center_is_list:
                        data__center_len = len(data__center)
                        if data__center_len < 3:
                            raise JsonSchemaValueException("data.@center must contain at least 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__center_len > 3:
                            raise JsonSchemaValueException("data.@center must contain less than or equal to 3 items", value=data__center, name="data.@center", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__center_x, data__center_item in enumerate(data__center):
                            if not isinstance(data__center_item, (int, float)) or isinstance(data__center_item, bool):
                                raise JsonSchemaValueException(""+"data.@center[{data__center_x}]".format(**locals())+" must be number", value=data__center_item, name=""+"data.@center[{data__center_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "@collisionType" in data_keys:
                    data_keys.remove("@collisionType")
                    data__collisionType = data["@collisionType"]
                    if not isinstance(data__collisionType, (int)) and not (isinstance(data__collisionType, float) and data__collisionType.is_integer()) or isinstance(data__collisionType, bool):
                        raise JsonSchemaValueException("data.@collisionType must be integer", value=data__collisionType, name="data.@collisionType", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@collisionType"] = 0
                if "@deadReckoning" in data_keys:
                    data_keys.remove("@deadReckoning")
                    data__deadReckoning = data["@deadReckoning"]
                    if not isinstance(data__deadReckoning, (int)) and not (isinstance(data__deadReckoning, float) and data__deadReckoning.is_integer()) or isinstance(data__deadReckoning, bool):
                        raise JsonSchemaValueException("data.@deadReckoning must be integer", value=data__deadReckoning, name="data.@deadReckoning", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@deadReckoning"] = 0
                if "@detonationLocation" in data_keys:
                    data_keys.remove("@detonationLocation")
                    data__detonationLocation = data["@detonationLocation"]
                    if not isinstance(data__detonationLocation, (list, tuple)):
                        raise JsonSchemaValueException("data.@detonationLocation must be array", value=data__detonationLocation, name="data.@detonationLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__detonationLocation_is_list = isinstance(data__detonationLocation, (list, tuple))
                    if data__detonationLocation_is_list:
                        data__detonationLocation_len = len(data__detonationLocation)
                        if data__detonationLocation_len < 3:
                            raise JsonSchemaValueException("data.@detonationLocation must contain at least 3 items", value=data__detonationLocation, name="data.@detonationLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__detonationLocation_len > 3:
                            raise JsonSchemaValueException("data.@detonationLocation must contain less than or equal to 3 items", value=data__detonationLocation, name="data.@detonationLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__detonationLocation_x, data__detonationLocation_item in enumerate(data__detonationLocation):
                            if not isinstance(data__detonationLocation_item, (int, float)) or isinstance(data__detonationLocation_item, bool):
                                raise JsonSchemaValueException(""+"data.@detonationLocation[{data__detonationLocation_x}]".format(**locals())+" must be number", value=data__detonationLocation_item, name=""+"data.@detonationLocation[{data__detonationLocation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@detonationRelativeLocation" in data_keys:
                    data_keys.remove("@detonationRelativeLocation")
                    data__detonationRelativeLocation = data["@detonationRelativeLocation"]
                    if not isinstance(data__detonationRelativeLocation, (list, tuple)):
                        raise JsonSchemaValueException("data.@detonationRelativeLocation must be array", value=data__detonationRelativeLocation, name="data.@detonationRelativeLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__detonationRelativeLocation_is_list = isinstance(data__detonationRelativeLocation, (list, tuple))
                    if data__detonationRelativeLocation_is_list:
                        data__detonationRelativeLocation_len = len(data__detonationRelativeLocation)
                        if data__detonationRelativeLocation_len < 3:
                            raise JsonSchemaValueException("data.@detonationRelativeLocation must contain at least 3 items", value=data__detonationRelativeLocation, name="data.@detonationRelativeLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__detonationRelativeLocation_len > 3:
                            raise JsonSchemaValueException("data.@detonationRelativeLocation must contain less than or equal to 3 items", value=data__detonationRelativeLocation, name="data.@detonationRelativeLocation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__detonationRelativeLocation_x, data__detonationRelativeLocation_item in enumerate(data__detonationRelativeLocation):
                            if not isinstance(data__detonationRelativeLocation_item, (int, float)) or isinstance(data__detonationRelativeLocation_item, bool):
                                raise JsonSchemaValueException(""+"data.@detonationRelativeLocation[{data__detonationRelativeLocation_x}]".format(**locals())+" must be number", value=data__detonationRelativeLocation_item, name=""+"data.@detonationRelativeLocation[{data__detonationRelativeLocation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@detonationResult" in data_keys:
                    data_keys.remove("@detonationResult")
                    data__detonationResult = data["@detonationResult"]
                    if not isinstance(data__detonationResult, (int)) and not (isinstance(data__detonationResult, float) and data__detonationResult.is_integer()) or isinstance(data__detonationResult, bool):
                        raise JsonSchemaValueException("data.@detonationResult must be integer", value=data__detonationResult, name="data.@detonationResult", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@detonationResult"] = 0
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "@entityCategory" in data_keys:
                    data_keys.remove("@entityCategory")
                    data__entityCategory = data["@entityCategory"]
                    if not isinstance(data__entityCategory, (int)) and not (isinstance(data__entityCategory, float) and data__entityCategory.is_integer()) or isinstance(data__entityCategory, bool):
                        raise JsonSchemaValueException("data.@entityCategory must be integer", value=data__entityCategory, name="data.@entityCategory", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entityCategory"] = 0
                if "@entityCountry" in data_keys:
                    data_keys.remove("@entityCountry")
                    data__entityCountry = data["@entityCountry"]
                    if not isinstance(data__entityCountry, (int)) and not (isinstance(data__entityCountry, float) and data__entityCountry.is_integer()) or isinstance(data__entityCountry, bool):
                        raise JsonSchemaValueException("data.@entityCountry must be integer", value=data__entityCountry, name="data.@entityCountry", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entityCountry"] = 0
                if "@entityDomain" in data_keys:
                    data_keys.remove("@entityDomain")
                    data__entityDomain = data["@entityDomain"]
                    if not isinstance(data__entityDomain, (int)) and not (isinstance(data__entityDomain, float) and data__entityDomain.is_integer()) or isinstance(data__entityDomain, bool):
                        raise JsonSchemaValueException("data.@entityDomain must be integer", value=data__entityDomain, name="data.@entityDomain", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entityDomain"] = 0
                if "@entityExtra" in data_keys:
                    data_keys.remove("@entityExtra")
                    data__entityExtra = data["@entityExtra"]
                    if not isinstance(data__entityExtra, (int)) and not (isinstance(data__entityExtra, float) and data__entityExtra.is_integer()) or isinstance(data__entityExtra, bool):
                        raise JsonSchemaValueException("data.@entityExtra must be integer", value=data__entityExtra, name="data.@entityExtra", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entityExtra"] = 0
                if "@entityID" in data_keys:
                    data_keys.remove("@entityID")
                    data__entityID = data["@entityID"]
                    if not isinstance(data__entityID, (int)) and not (isinstance(data__entityID, float) and data__entityID.is_integer()) or isinstance(data__entityID, bool):
                        raise JsonSchemaValueException("data.@entityID must be integer", value=data__entityID, name="data.@entityID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entityID"] = 0
                if "@entityKind" in data_keys:
                    data_keys.remove("@entityKind")
                    data__entityKind = data["@entityKind"]
                    if not isinstance(data__entityKind, (int)) and not (isinstance(data__entityKind, float) and data__entityKind.is_integer()) or isinstance(data__entityKind, bool):
                        raise JsonSchemaValueException("data.@entityKind must be integer", value=data__entityKind, name="data.@entityKind", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entityKind"] = 0
                if "@entitySpecific" in data_keys:
                    data_keys.remove("@entitySpecific")
                    data__entitySpecific = data["@entitySpecific"]
                    if not isinstance(data__entitySpecific, (int)) and not (isinstance(data__entitySpecific, float) and data__entitySpecific.is_integer()) or isinstance(data__entitySpecific, bool):
                        raise JsonSchemaValueException("data.@entitySpecific must be integer", value=data__entitySpecific, name="data.@entitySpecific", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entitySpecific"] = 0
                if "@entitySubcategory" in data_keys:
                    data_keys.remove("@entitySubcategory")
                    data__entitySubcategory = data["@entitySubcategory"]
                    if not isinstance(data__entitySubcategory, (int)) and not (isinstance(data__entitySubcategory, float) and data__entitySubcategory.is_integer()) or isinstance(data__entitySubcategory, bool):
                        raise JsonSchemaValueException("data.@entitySubcategory must be integer", value=data__entitySubcategory, name="data.@entitySubcategory", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@entitySubcategory"] = 0
                if "@eventApplicationID" in data_keys:
                    data_keys.remove("@eventApplicationID")
                    data__eventApplicationID = data["@eventApplicationID"]
                    if not isinstance(data__eventApplicationID, (int)) and not (isinstance(data__eventApplicationID, float) and data__eventApplicationID.is_integer()) or isinstance(data__eventApplicationID, bool):
                        raise JsonSchemaValueException("data.@eventApplicationID must be integer", value=data__eventApplicationID, name="data.@eventApplicationID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@eventApplicationID"] = 0
                if "@eventEntityID" in data_keys:
                    data_keys.remove("@eventEntityID")
                    data__eventEntityID = data["@eventEntityID"]
                    if not isinstance(data__eventEntityID, (int)) and not (isinstance(data__eventEntityID, float) and data__eventEntityID.is_integer()) or isinstance(data__eventEntityID, bool):
                        raise JsonSchemaValueException("data.@eventEntityID must be integer", value=data__eventEntityID, name="data.@eventEntityID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@eventEntityID"] = 0
                if "@eventNumber" in data_keys:
                    data_keys.remove("@eventNumber")
                    data__eventNumber = data["@eventNumber"]
                    if not isinstance(data__eventNumber, (int)) and not (isinstance(data__eventNumber, float) and data__eventNumber.is_integer()) or isinstance(data__eventNumber, bool):
                        raise JsonSchemaValueException("data.@eventNumber must be integer", value=data__eventNumber, name="data.@eventNumber", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@eventNumber"] = 0
                if "@eventSiteID" in data_keys:
                    data_keys.remove("@eventSiteID")
                    data__eventSiteID = data["@eventSiteID"]
                    if not isinstance(data__eventSiteID, (int)) and not (isinstance(data__eventSiteID, float) and data__eventSiteID.is_integer()) or isinstance(data__eventSiteID, bool):
                        raise JsonSchemaValueException("data.@eventSiteID must be integer", value=data__eventSiteID, name="data.@eventSiteID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@eventSiteID"] = 0
                if "@fired1" in data_keys:
                    data_keys.remove("@fired1")
                    data__fired1 = data["@fired1"]
                    if not isinstance(data__fired1, (bool)):
                        raise JsonSchemaValueException("data.@fired1 must be boolean", value=data__fired1, name="data.@fired1", definition={'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@fired1"] = False
                if "@fired2" in data_keys:
                    data_keys.remove("@fired2")
                    data__fired2 = data["@fired2"]
                    if not isinstance(data__fired2, (bool)):
                        raise JsonSchemaValueException("data.@fired2 must be boolean", value=data__fired2, name="data.@fired2", definition={'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@fired2"] = False
                if "@fireMissionIndex" in data_keys:
                    data_keys.remove("@fireMissionIndex")
                    data__fireMissionIndex = data["@fireMissionIndex"]
                    if not isinstance(data__fireMissionIndex, (int)) and not (isinstance(data__fireMissionIndex, float) and data__fireMissionIndex.is_integer()) or isinstance(data__fireMissionIndex, bool):
                        raise JsonSchemaValueException("data.@fireMissionIndex must be integer", value=data__fireMissionIndex, name="data.@fireMissionIndex", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@fireMissionIndex"] = 0
                if "@firingRange" in data_keys:
                    data_keys.remove("@firingRange")
                    data__firingRange = data["@firingRange"]
                    if not isinstance(data__firingRange, (int, float)) or isinstance(data__firingRange, bool):
                        raise JsonSchemaValueException("data.@firingRange must be number", value=data__firingRange, name="data.@firingRange", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@firingRange"] = 0
                if "@firingRate" in data_keys:
                    data_keys.remove("@firingRate")
                    data__firingRate = data["@firingRate"]
                    if not isinstance(data__firingRate, (int)) and not (isinstance(data__firingRate, float) and data__firingRate.is_integer()) or isinstance(data__firingRate, bool):
                        raise JsonSchemaValueException("data.@firingRate must be integer", value=data__firingRate, name="data.@firingRate", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@firingRate"] = 0
                if "@forceID" in data_keys:
                    data_keys.remove("@forceID")
                    data__forceID = data["@forceID"]
                    if not isinstance(data__forceID, (int)) and not (isinstance(data__forceID, float) and data__forceID.is_integer()) or isinstance(data__forceID, bool):
                        raise JsonSchemaValueException("data.@forceID must be integer", value=data__forceID, name="data.@forceID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@forceID"] = 0
                if "@fuse" in data_keys:
                    data_keys.remove("@fuse")
                    data__fuse = data["@fuse"]
                    if not isinstance(data__fuse, (int)) and not (isinstance(data__fuse, float) and data__fuse.is_integer()) or isinstance(data__fuse, bool):
                        raise JsonSchemaValueException("data.@fuse must be integer", value=data__fuse, name="data.@fuse", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@fuse"] = 0
                if "@geoCoords" in data_keys:
                    data_keys.remove("@geoCoords")
                    data__geoCoords = data["@geoCoords"]
                    if not isinstance(data__geoCoords, (list, tuple)):
                        raise JsonSchemaValueException("data.@geoCoords must be array", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__geoCoords_is_list = isinstance(data__geoCoords, (list, tuple))
                    if data__geoCoords_is_list:
                        data__geoCoords_len = len(data__geoCoords)
                        if data__geoCoords_len < 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain at least 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__geoCoords_len > 3:
                            raise JsonSchemaValueException("data.@geoCoords must contain less than or equal to 3 items", value=data__geoCoords, name="data.@geoCoords", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__geoCoords_x, data__geoCoords_item in enumerate(data__geoCoords):
                            if not isinstance(data__geoCoords_item, (int, float)) or isinstance(data__geoCoords_item, bool):
                                raise JsonSchemaValueException(""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+" must be number", value=data__geoCoords_item, name=""+"data.@geoCoords[{data__geoCoords_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "@linearAcceleration" in data_keys:
                    data_keys.remove("@linearAcceleration")
                    data__linearAcceleration = data["@linearAcceleration"]
                    if not isinstance(data__linearAcceleration, (list, tuple)):
                        raise JsonSchemaValueException("data.@linearAcceleration must be array", value=data__linearAcceleration, name="data.@linearAcceleration", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__linearAcceleration_is_list = isinstance(data__linearAcceleration, (list, tuple))
                    if data__linearAcceleration_is_list:
                        data__linearAcceleration_len = len(data__linearAcceleration)
                        if data__linearAcceleration_len < 3:
                            raise JsonSchemaValueException("data.@linearAcceleration must contain at least 3 items", value=data__linearAcceleration, name="data.@linearAcceleration", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__linearAcceleration_len > 3:
                            raise JsonSchemaValueException("data.@linearAcceleration must contain less than or equal to 3 items", value=data__linearAcceleration, name="data.@linearAcceleration", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__linearAcceleration_x, data__linearAcceleration_item in enumerate(data__linearAcceleration):
                            if not isinstance(data__linearAcceleration_item, (int, float)) or isinstance(data__linearAcceleration_item, bool):
                                raise JsonSchemaValueException(""+"data.@linearAcceleration[{data__linearAcceleration_x}]".format(**locals())+" must be number", value=data__linearAcceleration_item, name=""+"data.@linearAcceleration[{data__linearAcceleration_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@linearVelocity" in data_keys:
                    data_keys.remove("@linearVelocity")
                    data__linearVelocity = data["@linearVelocity"]
                    if not isinstance(data__linearVelocity, (list, tuple)):
                        raise JsonSchemaValueException("data.@linearVelocity must be array", value=data__linearVelocity, name="data.@linearVelocity", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__linearVelocity_is_list = isinstance(data__linearVelocity, (list, tuple))
                    if data__linearVelocity_is_list:
                        data__linearVelocity_len = len(data__linearVelocity)
                        if data__linearVelocity_len < 3:
                            raise JsonSchemaValueException("data.@linearVelocity must contain at least 3 items", value=data__linearVelocity, name="data.@linearVelocity", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__linearVelocity_len > 3:
                            raise JsonSchemaValueException("data.@linearVelocity must contain less than or equal to 3 items", value=data__linearVelocity, name="data.@linearVelocity", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__linearVelocity_x, data__linearVelocity_item in enumerate(data__linearVelocity):
                            if not isinstance(data__linearVelocity_item, (int, float)) or isinstance(data__linearVelocity_item, bool):
                                raise JsonSchemaValueException(""+"data.@linearVelocity[{data__linearVelocity_x}]".format(**locals())+" must be number", value=data__linearVelocity_item, name=""+"data.@linearVelocity[{data__linearVelocity_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@marking" in data_keys:
                    data_keys.remove("@marking")
                    data__marking = data["@marking"]
                    if not isinstance(data__marking, (str)):
                        raise JsonSchemaValueException("data.@marking must be string", value=data__marking, name="data.@marking", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@multicastRelayHost" in data_keys:
                    data_keys.remove("@multicastRelayHost")
                    data__multicastRelayHost = data["@multicastRelayHost"]
                    if not isinstance(data__multicastRelayHost, (str)):
                        raise JsonSchemaValueException("data.@multicastRelayHost must be string", value=data__multicastRelayHost, name="data.@multicastRelayHost", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@multicastRelayPort" in data_keys:
                    data_keys.remove("@multicastRelayPort")
                    data__multicastRelayPort = data["@multicastRelayPort"]
                    if not isinstance(data__multicastRelayPort, (int)) and not (isinstance(data__multicastRelayPort, float) and data__multicastRelayPort.is_integer()) or isinstance(data__multicastRelayPort, bool):
                        raise JsonSchemaValueException("data.@multicastRelayPort must be integer", value=data__multicastRelayPort, name="data.@multicastRelayPort", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@multicastRelayPort"] = 0
                if "@munitionApplicationID" in data_keys:
                    data_keys.remove("@munitionApplicationID")
                    data__munitionApplicationID = data["@munitionApplicationID"]
                    if not isinstance(data__munitionApplicationID, (int)) and not (isinstance(data__munitionApplicationID, float) and data__munitionApplicationID.is_integer()) or isinstance(data__munitionApplicationID, bool):
                        raise JsonSchemaValueException("data.@munitionApplicationID must be integer", value=data__munitionApplicationID, name="data.@munitionApplicationID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@munitionApplicationID"] = 0
                if "@munitionEndPoint" in data_keys:
                    data_keys.remove("@munitionEndPoint")
                    data__munitionEndPoint = data["@munitionEndPoint"]
                    if not isinstance(data__munitionEndPoint, (list, tuple)):
                        raise JsonSchemaValueException("data.@munitionEndPoint must be array", value=data__munitionEndPoint, name="data.@munitionEndPoint", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__munitionEndPoint_is_list = isinstance(data__munitionEndPoint, (list, tuple))
                    if data__munitionEndPoint_is_list:
                        data__munitionEndPoint_len = len(data__munitionEndPoint)
                        if data__munitionEndPoint_len < 3:
                            raise JsonSchemaValueException("data.@munitionEndPoint must contain at least 3 items", value=data__munitionEndPoint, name="data.@munitionEndPoint", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__munitionEndPoint_len > 3:
                            raise JsonSchemaValueException("data.@munitionEndPoint must contain less than or equal to 3 items", value=data__munitionEndPoint, name="data.@munitionEndPoint", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__munitionEndPoint_x, data__munitionEndPoint_item in enumerate(data__munitionEndPoint):
                            if not isinstance(data__munitionEndPoint_item, (int, float)) or isinstance(data__munitionEndPoint_item, bool):
                                raise JsonSchemaValueException(""+"data.@munitionEndPoint[{data__munitionEndPoint_x}]".format(**locals())+" must be number", value=data__munitionEndPoint_item, name=""+"data.@munitionEndPoint[{data__munitionEndPoint_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@munitionEntityID" in data_keys:
                    data_keys.remove("@munitionEntityID")
                    data__munitionEntityID = data["@munitionEntityID"]
                    if not isinstance(data__munitionEntityID, (int)) and not (isinstance(data__munitionEntityID, float) and data__munitionEntityID.is_integer()) or isinstance(data__munitionEntityID, bool):
                        raise JsonSchemaValueException("data.@munitionEntityID must be integer", value=data__munitionEntityID, name="data.@munitionEntityID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@munitionEntityID"] = 0
                if "@munitionQuantity" in data_keys:
                    data_keys.remove("@munitionQuantity")
                    data__munitionQuantity = data["@munitionQuantity"]
                    if not isinstance(data__munitionQuantity, (int)) and not (isinstance(data__munitionQuantity, float) and data__munitionQuantity.is_integer()) or isinstance(data__munitionQuantity, bool):
                        raise JsonSchemaValueException("data.@munitionQuantity must be integer", value=data__munitionQuantity, name="data.@munitionQuantity", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@munitionQuantity"] = 0
                if "@munitionSiteID" in data_keys:
                    data_keys.remove("@munitionSiteID")
                    data__munitionSiteID = data["@munitionSiteID"]
                    if not isinstance(data__munitionSiteID, (int)) and not (isinstance(data__munitionSiteID, float) and data__munitionSiteID.is_integer()) or isinstance(data__munitionSiteID, bool):
                        raise JsonSchemaValueException("data.@munitionSiteID must be integer", value=data__munitionSiteID, name="data.@munitionSiteID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@munitionSiteID"] = 0
                if "@munitionStartPoint" in data_keys:
                    data_keys.remove("@munitionStartPoint")
                    data__munitionStartPoint = data["@munitionStartPoint"]
                    if not isinstance(data__munitionStartPoint, (list, tuple)):
                        raise JsonSchemaValueException("data.@munitionStartPoint must be array", value=data__munitionStartPoint, name="data.@munitionStartPoint", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__munitionStartPoint_is_list = isinstance(data__munitionStartPoint, (list, tuple))
                    if data__munitionStartPoint_is_list:
                        data__munitionStartPoint_len = len(data__munitionStartPoint)
                        if data__munitionStartPoint_len < 3:
                            raise JsonSchemaValueException("data.@munitionStartPoint must contain at least 3 items", value=data__munitionStartPoint, name="data.@munitionStartPoint", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__munitionStartPoint_len > 3:
                            raise JsonSchemaValueException("data.@munitionStartPoint must contain less than or equal to 3 items", value=data__munitionStartPoint, name="data.@munitionStartPoint", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__munitionStartPoint_x, data__munitionStartPoint_item in enumerate(data__munitionStartPoint):
                            if not isinstance(data__munitionStartPoint_item, (int, float)) or isinstance(data__munitionStartPoint_item, bool):
                                raise JsonSchemaValueException(""+"data.@munitionStartPoint[{data__munitionStartPoint_x}]".format(**locals())+" must be number", value=data__munitionStartPoint_item, name=""+"data.@munitionStartPoint[{data__munitionStartPoint_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@networkMode" in data_keys:
                    data_keys.remove("@networkMode")
                    data__networkMode = data["@networkMode"]
                    if not isinstance(data__networkMode, (str)):
                        raise JsonSchemaValueException("data.@networkMode must be string", value=data__networkMode, name="data.@networkMode", definition={'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data__networkMode not in ['standAlone', 'networkReader', 'networkWriter']:
                        raise JsonSchemaValueException("data.@networkMode must be one of ['standAlone', 'networkReader', 'networkWriter']", value=data__networkMode, name="data.@networkMode", definition={'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                else: data["@networkMode"] = 'standAlone'
                if "@port" in data_keys:
                    data_keys.remove("@port")
                    data__port = data["@port"]
                    if not isinstance(data__port, (int)) and not (isinstance(data__port, float) and data__port.is_integer()) or isinstance(data__port, bool):
                        raise JsonSchemaValueException("data.@port must be integer", value=data__port, name="data.@port", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@port"] = 0
                if "@readInterval" in data_keys:
                    data_keys.remove("@readInterval")
                    data__readInterval = data["@readInterval"]
                    if not isinstance(data__readInterval, (int, float)) or isinstance(data__readInterval, bool):
                        raise JsonSchemaValueException("data.@readInterval must be number", value=data__readInterval, name="data.@readInterval", definition={'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@readInterval"] = 0.1
                if "@rotation" in data_keys:
                    data_keys.remove("@rotation")
                    data__rotation = data["@rotation"]
                    if not isinstance(data__rotation, (list, tuple)):
                        raise JsonSchemaValueException("data.@rotation must be array", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__rotation_is_list = isinstance(data__rotation, (list, tuple))
                    if data__rotation_is_list:
                        data__rotation_len = len(data__rotation)
                        if data__rotation_len < 4:
                            raise JsonSchemaValueException("data.@rotation must contain at least 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__rotation_len > 4:
                            raise JsonSchemaValueException("data.@rotation must contain less than or equal to 4 items", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__rotation:
                            raise JsonSchemaValueException("data.@rotation must not be there", value=data__rotation, name="data.@rotation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@rtpHeaderExpected" in data_keys:
                    data_keys.remove("@rtpHeaderExpected")
                    data__rtpHeaderExpected = data["@rtpHeaderExpected"]
                    if not isinstance(data__rtpHeaderExpected, (bool)):
                        raise JsonSchemaValueException("data.@rtpHeaderExpected must be boolean", value=data__rtpHeaderExpected, name="data.@rtpHeaderExpected", definition={'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, rule='type')
                else: data["@rtpHeaderExpected"] = False
                if "@scale" in data_keys:
                    data_keys.remove("@scale")
                    data__scale = data["@scale"]
                    if not isinstance(data__scale, (list, tuple)):
                        raise JsonSchemaValueException("data.@scale must be array", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, rule='type')
                    data__scale_is_list = isinstance(data__scale, (list, tuple))
                    if data__scale_is_list:
                        data__scale_len = len(data__scale)
                        if data__scale_len < 3:
                            raise JsonSchemaValueException("data.@scale must contain at least 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, rule='minItems')
                        if data__scale_len > 3:
                            raise JsonSchemaValueException("data.@scale must contain less than or equal to 3 items", value=data__scale, name="data.@scale", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, rule='maxItems')
                        for data__scale_x, data__scale_item in enumerate(data__scale):
                            if not isinstance(data__scale_item, (int, float)) or isinstance(data__scale_item, bool):
                                raise JsonSchemaValueException(""+"data.@scale[{data__scale_x}]".format(**locals())+" must be number", value=data__scale_item, name=""+"data.@scale[{data__scale_x}]".format(**locals())+"", definition={'default': 1, 'type': 'number'}, rule='type')
                if "@scaleOrientation" in data_keys:
                    data_keys.remove("@scaleOrientation")
                    data__scaleOrientation = data["@scaleOrientation"]
                    if not isinstance(data__scaleOrientation, (list, tuple)):
                        raise JsonSchemaValueException("data.@scaleOrientation must be array", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__scaleOrientation_is_list = isinstance(data__scaleOrientation, (list, tuple))
                    if data__scaleOrientation_is_list:
                        data__scaleOrientation_len = len(data__scaleOrientation)
                        if data__scaleOrientation_len < 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain at least 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__scaleOrientation_len > 4:
                            raise JsonSchemaValueException("data.@scaleOrientation must contain less than or equal to 4 items", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__scaleOrientation:
                            raise JsonSchemaValueException("data.@scaleOrientation must not be there", value=data__scaleOrientation, name="data.@scaleOrientation", definition={'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@siteID" in data_keys:
                    data_keys.remove("@siteID")
                    data__siteID = data["@siteID"]
                    if not isinstance(data__siteID, (int)) and not (isinstance(data__siteID, float) and data__siteID.is_integer()) or isinstance(data__siteID, bool):
                        raise JsonSchemaValueException("data.@siteID must be integer", value=data__siteID, name="data.@siteID", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@siteID"] = 0
                if "@translation" in data_keys:
                    data_keys.remove("@translation")
                    data__translation = data["@translation"]
                    if not isinstance(data__translation, (list, tuple)):
                        raise JsonSchemaValueException("data.@translation must be array", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__translation_is_list = isinstance(data__translation, (list, tuple))
                    if data__translation_is_list:
                        data__translation_len = len(data__translation)
                        if data__translation_len < 3:
                            raise JsonSchemaValueException("data.@translation must contain at least 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__translation_len > 3:
                            raise JsonSchemaValueException("data.@translation must contain less than or equal to 3 items", value=data__translation, name="data.@translation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__translation_x, data__translation_item in enumerate(data__translation):
                            if not isinstance(data__translation_item, (int, float)) or isinstance(data__translation_item, bool):
                                raise JsonSchemaValueException(""+"data.@translation[{data__translation_x}]".format(**locals())+" must be number", value=data__translation_item, name=""+"data.@translation[{data__translation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@warhead" in data_keys:
                    data_keys.remove("@warhead")
                    data__warhead = data["@warhead"]
                    if not isinstance(data__warhead, (int)) and not (isinstance(data__warhead, float) and data__warhead.is_integer()) or isinstance(data__warhead, bool):
                        raise JsonSchemaValueException("data.@warhead must be integer", value=data__warhead, name="data.@warhead", definition={'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data["@warhead"] = 0
                if "@writeInterval" in data_keys:
                    data_keys.remove("@writeInterval")
                    data__writeInterval = data["@writeInterval"]
                    if not isinstance(data__writeInterval, (int, float)) or isinstance(data__writeInterval, bool):
                        raise JsonSchemaValueException("data.@writeInterval must be number", value=data__writeInterval, name="data.@writeInterval", definition={'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@writeInterval"] = 1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterArray': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@articulationParameterChangeIndicatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterCount': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterDesignatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterIdPartAttachedToArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterTypeArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@collisionType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@deadReckoning': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@detonationLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationRelativeLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationResult': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityExtra': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySpecific': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySubcategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventNumber': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fired1': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fired2': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fireMissionIndex': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@firingRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@firingRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@forceID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fuse': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@linearAcceleration': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@linearVelocity': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@marking': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionEndPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@munitionEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionQuantity': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionStartPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@warhead': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@address': {'default': 'localhost', '$comment': 'SFString inputOutput', 'type': 'string'}, '@applicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterArray': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'type': 'number'}}, '@articulationParameterChangeIndicatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterCount': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@articulationParameterDesignatorArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterIdPartAttachedToArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@articulationParameterTypeArray': {'$comment': 'MFInt32 inputOutput', 'type': 'array', 'items': {'type': 'integer'}}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '@center': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@collisionType': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@deadReckoning': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@detonationLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationRelativeLocation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@detonationResult': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@entityCategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityCountry': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityDomain': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityExtra': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entityKind': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySpecific': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@entitySubcategory': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventNumber': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@eventSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fired1': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fired2': {'default': False, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@fireMissionIndex': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@firingRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@firingRate': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@forceID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@fuse': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@geoCoords': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@linearAcceleration': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@linearVelocity': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@marking': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@multicastRelayHost': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@multicastRelayPort': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionApplicationID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionEndPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@munitionEntityID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionQuantity': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionSiteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@munitionStartPoint': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@networkMode': {'enum': ['standAlone', 'networkReader', 'networkWriter'], 'default': 'standAlone', '$comment': 'SFString inputOutput', 'type': 'string'}, '@port': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@readInterval': {'default': 0.1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@rotation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@rtpHeaderExpected': {'default': False, '$comment': 'SFBool initializeOnly', 'type': 'boolean'}, '@scale': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'type': 'number'}}, '@scaleOrientation': {'$comment': 'SFRotation inputOutput', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@siteID': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@translation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@warhead': {'default': 0, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@writeInterval': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_collision(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-proxy': {'$ref': '#/$defs/-X3DChildNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-proxy': {'$ref': '#/$defs/-X3DChildNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "@enabled" in data_keys:
                    data_keys.remove("@enabled")
                    data__enabled = data["@enabled"]
                    if not isinstance(data__enabled, (bool)):
                        raise JsonSchemaValueException("data.@enabled must be boolean", value=data__enabled, name="data.@enabled", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@enabled"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-proxy" in data_keys:
                    data_keys.remove("-proxy")
                    data__proxy = data["-proxy"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodesfnode(data__proxy)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-proxy': {'$ref': '#/$defs/-X3DChildNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@enabled': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-proxy': {'$ref': '#/$defs/-X3DChildNodeSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dchildnodesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "Background" in data_keys:
            data_keys.remove("Background")
            data__Background = data["Background"]
            validate_x3d_3_0_jsonschema_json___defs_background(data__Background)
        if "TextureBackground" in data_keys:
            data_keys.remove("TextureBackground")
            data__TextureBackground = data["TextureBackground"]
            validate_x3d_3_0_jsonschema_json___defs_texturebackground(data__TextureBackground)
        if "Fog" in data_keys:
            data_keys.remove("Fog")
            data__Fog = data["Fog"]
            validate_x3d_3_0_jsonschema_json___defs_fog(data__Fog)
        if "GeoViewpoint" in data_keys:
            data_keys.remove("GeoViewpoint")
            data__GeoViewpoint = data["GeoViewpoint"]
            validate_x3d_3_0_jsonschema_json___defs_geoviewpoint(data__GeoViewpoint)
        if "NavigationInfo" in data_keys:
            data_keys.remove("NavigationInfo")
            data__NavigationInfo = data["NavigationInfo"]
            validate_x3d_3_0_jsonschema_json___defs_navigationinfo(data__NavigationInfo)
        if "Viewpoint" in data_keys:
            data_keys.remove("Viewpoint")
            data__Viewpoint = data["Viewpoint"]
            validate_x3d_3_0_jsonschema_json___defs_viewpoint(data__Viewpoint)
        if "Anchor" in data_keys:
            data_keys.remove("Anchor")
            data__Anchor = data["Anchor"]
            validate_x3d_3_0_jsonschema_json___defs_anchor(data__Anchor)
        if "Billboard" in data_keys:
            data_keys.remove("Billboard")
            data__Billboard = data["Billboard"]
            validate_x3d_3_0_jsonschema_json___defs_billboard(data__Billboard)
        if "Collision" in data_keys:
            data_keys.remove("Collision")
            data__Collision = data["Collision"]
            validate_x3d_3_0_jsonschema_json___defs_collision(data__Collision)
        if "EspduTransform" in data_keys:
            data_keys.remove("EspduTransform")
            data__EspduTransform = data["EspduTransform"]
            validate_x3d_3_0_jsonschema_json___defs_espdutransform(data__EspduTransform)
        if "GeoLocation" in data_keys:
            data_keys.remove("GeoLocation")
            data__GeoLocation = data["GeoLocation"]
            validate_x3d_3_0_jsonschema_json___defs_geolocation(data__GeoLocation)
        if "Group" in data_keys:
            data_keys.remove("Group")
            data__Group = data["Group"]
            validate_x3d_3_0_jsonschema_json___defs_group(data__Group)
        if "HAnimSegment" in data_keys:
            data_keys.remove("HAnimSegment")
            data__HAnimSegment = data["HAnimSegment"]
            validate_x3d_3_0_jsonschema_json___defs_hanimsegment(data__HAnimSegment)
        if "HAnimSite" in data_keys:
            data_keys.remove("HAnimSite")
            data__HAnimSite = data["HAnimSite"]
            validate_x3d_3_0_jsonschema_json___defs_hanimsite(data__HAnimSite)
        if "LOD" in data_keys:
            data_keys.remove("LOD")
            data__LOD = data["LOD"]
            validate_x3d_3_0_jsonschema_json___defs_lod(data__LOD)
        if "Switch" in data_keys:
            data_keys.remove("Switch")
            data__Switch = data["Switch"]
            validate_x3d_3_0_jsonschema_json___defs_switch(data__Switch)
        if "Transform" in data_keys:
            data_keys.remove("Transform")
            data__Transform = data["Transform"]
            validate_x3d_3_0_jsonschema_json___defs_transform(data__Transform)
        if "GeoMetadata" in data_keys:
            data_keys.remove("GeoMetadata")
            data__GeoMetadata = data["GeoMetadata"]
            validate_x3d_3_0_jsonschema_json___defs_geometadata(data__GeoMetadata)
        if "WorldInfo" in data_keys:
            data_keys.remove("WorldInfo")
            data__WorldInfo = data["WorldInfo"]
            validate_x3d_3_0_jsonschema_json___defs_worldinfo(data__WorldInfo)
        if "ColorInterpolator" in data_keys:
            data_keys.remove("ColorInterpolator")
            data__ColorInterpolator = data["ColorInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_colorinterpolator(data__ColorInterpolator)
        if "CoordinateInterpolator" in data_keys:
            data_keys.remove("CoordinateInterpolator")
            data__CoordinateInterpolator = data["CoordinateInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator(data__CoordinateInterpolator)
        if "CoordinateInterpolator2D" in data_keys:
            data_keys.remove("CoordinateInterpolator2D")
            data__CoordinateInterpolator2D = data["CoordinateInterpolator2D"]
            validate_x3d_3_0_jsonschema_json___defs_coordinateinterpolator2d(data__CoordinateInterpolator2D)
        if "GeoPositionInterpolator" in data_keys:
            data_keys.remove("GeoPositionInterpolator")
            data__GeoPositionInterpolator = data["GeoPositionInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_geopositioninterpolator(data__GeoPositionInterpolator)
        if "NormalInterpolator" in data_keys:
            data_keys.remove("NormalInterpolator")
            data__NormalInterpolator = data["NormalInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_normalinterpolator(data__NormalInterpolator)
        if "OrientationInterpolator" in data_keys:
            data_keys.remove("OrientationInterpolator")
            data__OrientationInterpolator = data["OrientationInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_orientationinterpolator(data__OrientationInterpolator)
        if "PositionInterpolator" in data_keys:
            data_keys.remove("PositionInterpolator")
            data__PositionInterpolator = data["PositionInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_positioninterpolator(data__PositionInterpolator)
        if "PositionInterpolator2D" in data_keys:
            data_keys.remove("PositionInterpolator2D")
            data__PositionInterpolator2D = data["PositionInterpolator2D"]
            validate_x3d_3_0_jsonschema_json___defs_positioninterpolator2d(data__PositionInterpolator2D)
        if "ScalarInterpolator" in data_keys:
            data_keys.remove("ScalarInterpolator")
            data__ScalarInterpolator = data["ScalarInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_scalarinterpolator(data__ScalarInterpolator)
        if "DirectionalLight" in data_keys:
            data_keys.remove("DirectionalLight")
            data__DirectionalLight = data["DirectionalLight"]
            validate_x3d_3_0_jsonschema_json___defs_directionallight(data__DirectionalLight)
        if "PointLight" in data_keys:
            data_keys.remove("PointLight")
            data__PointLight = data["PointLight"]
            validate_x3d_3_0_jsonschema_json___defs_pointlight(data__PointLight)
        if "SpotLight" in data_keys:
            data_keys.remove("SpotLight")
            data__SpotLight = data["SpotLight"]
            validate_x3d_3_0_jsonschema_json___defs_spotlight(data__SpotLight)
        if "Script" in data_keys:
            data_keys.remove("Script")
            data__Script = data["Script"]
            validate_x3d_3_0_jsonschema_json___defs_script(data__Script)
        if "ProximitySensor" in data_keys:
            data_keys.remove("ProximitySensor")
            data__ProximitySensor = data["ProximitySensor"]
            validate_x3d_3_0_jsonschema_json___defs_proximitysensor(data__ProximitySensor)
        if "VisibilitySensor" in data_keys:
            data_keys.remove("VisibilitySensor")
            data__VisibilitySensor = data["VisibilitySensor"]
            validate_x3d_3_0_jsonschema_json___defs_visibilitysensor(data__VisibilitySensor)
        if "KeySensor" in data_keys:
            data_keys.remove("KeySensor")
            data__KeySensor = data["KeySensor"]
            validate_x3d_3_0_jsonschema_json___defs_keysensor(data__KeySensor)
        if "StringSensor" in data_keys:
            data_keys.remove("StringSensor")
            data__StringSensor = data["StringSensor"]
            validate_x3d_3_0_jsonschema_json___defs_stringsensor(data__StringSensor)
        if "LoadSensor" in data_keys:
            data_keys.remove("LoadSensor")
            data__LoadSensor = data["LoadSensor"]
            validate_x3d_3_0_jsonschema_json___defs_loadsensor(data__LoadSensor)
        if "ReceiverPdu" in data_keys:
            data_keys.remove("ReceiverPdu")
            data__ReceiverPdu = data["ReceiverPdu"]
            validate_x3d_3_0_jsonschema_json___defs_receiverpdu(data__ReceiverPdu)
        if "SignalPdu" in data_keys:
            data_keys.remove("SignalPdu")
            data__SignalPdu = data["SignalPdu"]
            validate_x3d_3_0_jsonschema_json___defs_signalpdu(data__SignalPdu)
        if "TransmitterPdu" in data_keys:
            data_keys.remove("TransmitterPdu")
            data__TransmitterPdu = data["TransmitterPdu"]
            validate_x3d_3_0_jsonschema_json___defs_transmitterpdu(data__TransmitterPdu)
        if "CylinderSensor" in data_keys:
            data_keys.remove("CylinderSensor")
            data__CylinderSensor = data["CylinderSensor"]
            validate_x3d_3_0_jsonschema_json___defs_cylindersensor(data__CylinderSensor)
        if "PlaneSensor" in data_keys:
            data_keys.remove("PlaneSensor")
            data__PlaneSensor = data["PlaneSensor"]
            validate_x3d_3_0_jsonschema_json___defs_planesensor(data__PlaneSensor)
        if "SphereSensor" in data_keys:
            data_keys.remove("SphereSensor")
            data__SphereSensor = data["SphereSensor"]
            validate_x3d_3_0_jsonschema_json___defs_spheresensor(data__SphereSensor)
        if "GeoTouchSensor" in data_keys:
            data_keys.remove("GeoTouchSensor")
            data__GeoTouchSensor = data["GeoTouchSensor"]
            validate_x3d_3_0_jsonschema_json___defs_geotouchsensor(data__GeoTouchSensor)
        if "TouchSensor" in data_keys:
            data_keys.remove("TouchSensor")
            data__TouchSensor = data["TouchSensor"]
            validate_x3d_3_0_jsonschema_json___defs_touchsensor(data__TouchSensor)
        if "TimeSensor" in data_keys:
            data_keys.remove("TimeSensor")
            data__TimeSensor = data["TimeSensor"]
            validate_x3d_3_0_jsonschema_json___defs_timesensor(data__TimeSensor)
        if "BooleanSequencer" in data_keys:
            data_keys.remove("BooleanSequencer")
            data__BooleanSequencer = data["BooleanSequencer"]
            validate_x3d_3_0_jsonschema_json___defs_booleansequencer(data__BooleanSequencer)
        if "IntegerSequencer" in data_keys:
            data_keys.remove("IntegerSequencer")
            data__IntegerSequencer = data["IntegerSequencer"]
            validate_x3d_3_0_jsonschema_json___defs_integersequencer(data__IntegerSequencer)
        if "Shape" in data_keys:
            data_keys.remove("Shape")
            data__Shape = data["Shape"]
            validate_x3d_3_0_jsonschema_json___defs_shape(data__Shape)
        if "Sound" in data_keys:
            data_keys.remove("Sound")
            data__Sound = data["Sound"]
            validate_x3d_3_0_jsonschema_json___defs_sound(data__Sound)
        if "AudioClip" in data_keys:
            data_keys.remove("AudioClip")
            data__AudioClip = data["AudioClip"]
            validate_x3d_3_0_jsonschema_json___defs_audioclip(data__AudioClip)
        if "MovieTexture" in data_keys:
            data_keys.remove("MovieTexture")
            data__MovieTexture = data["MovieTexture"]
            validate_x3d_3_0_jsonschema_json___defs_movietexture(data__MovieTexture)
        if "BooleanTrigger" in data_keys:
            data_keys.remove("BooleanTrigger")
            data__BooleanTrigger = data["BooleanTrigger"]
            validate_x3d_3_0_jsonschema_json___defs_booleantrigger(data__BooleanTrigger)
        if "IntegerTrigger" in data_keys:
            data_keys.remove("IntegerTrigger")
            data__IntegerTrigger = data["IntegerTrigger"]
            validate_x3d_3_0_jsonschema_json___defs_integertrigger(data__IntegerTrigger)
        if "TimeTrigger" in data_keys:
            data_keys.remove("TimeTrigger")
            data__TimeTrigger = data["TimeTrigger"]
            validate_x3d_3_0_jsonschema_json___defs_timetrigger(data__TimeTrigger)
        if "BooleanFilter" in data_keys:
            data_keys.remove("BooleanFilter")
            data__BooleanFilter = data["BooleanFilter"]
            validate_x3d_3_0_jsonschema_json___defs_booleanfilter(data__BooleanFilter)
        if "BooleanToggle" in data_keys:
            data_keys.remove("BooleanToggle")
            data__BooleanToggle = data["BooleanToggle"]
            validate_x3d_3_0_jsonschema_json___defs_booleantoggle(data__BooleanToggle)
        if "ExternProtoDeclare" in data_keys:
            data_keys.remove("ExternProtoDeclare")
            data__ExternProtoDeclare = data["ExternProtoDeclare"]
            validate_x3d_3_0_jsonschema_json___defs_externprotodeclare(data__ExternProtoDeclare)
        if "GeoLOD" in data_keys:
            data_keys.remove("GeoLOD")
            data__GeoLOD = data["GeoLOD"]
            validate_x3d_3_0_jsonschema_json___defs_geolod(data__GeoLOD)
        if "HAnimHumanoid" in data_keys:
            data_keys.remove("HAnimHumanoid")
            data__HAnimHumanoid = data["HAnimHumanoid"]
            validate_x3d_3_0_jsonschema_json___defs_hanimhumanoid(data__HAnimHumanoid)
        if "HAnimJoint" in data_keys:
            data_keys.remove("HAnimJoint")
            data__HAnimJoint = data["HAnimJoint"]
            validate_x3d_3_0_jsonschema_json___defs_hanimjoint(data__HAnimJoint)
        if "Inline" in data_keys:
            data_keys.remove("Inline")
            data__Inline = data["Inline"]
            validate_x3d_3_0_jsonschema_json___defs_inline(data__Inline)
        if "NurbsOrientationInterpolator" in data_keys:
            data_keys.remove("NurbsOrientationInterpolator")
            data__NurbsOrientationInterpolator = data["NurbsOrientationInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_nurbsorientationinterpolator(data__NurbsOrientationInterpolator)
        if "NurbsPositionInterpolator" in data_keys:
            data_keys.remove("NurbsPositionInterpolator")
            data__NurbsPositionInterpolator = data["NurbsPositionInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_nurbspositioninterpolator(data__NurbsPositionInterpolator)
        if "NurbsSet" in data_keys:
            data_keys.remove("NurbsSet")
            data__NurbsSet = data["NurbsSet"]
            validate_x3d_3_0_jsonschema_json___defs_nurbsset(data__NurbsSet)
        if "NurbsSurfaceInterpolator" in data_keys:
            data_keys.remove("NurbsSurfaceInterpolator")
            data__NurbsSurfaceInterpolator = data["NurbsSurfaceInterpolator"]
            validate_x3d_3_0_jsonschema_json___defs_nurbssurfaceinterpolator(data__NurbsSurfaceInterpolator)
        if "ProtoDeclare" in data_keys:
            data_keys.remove("ProtoDeclare")
            data__ProtoDeclare = data["ProtoDeclare"]
            validate_x3d_3_0_jsonschema_json___defs_protodeclare(data__ProtoDeclare)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if "ROUTE" in data_keys:
            data_keys.remove("ROUTE")
            data__ROUTE = data["ROUTE"]
            validate_x3d_3_0_jsonschema_json___defs_route(data__ROUTE)
        if "StaticGroup" in data_keys:
            data_keys.remove("StaticGroup")
            data__StaticGroup = data["StaticGroup"]
            validate_x3d_3_0_jsonschema_json___defs_staticgroup(data__StaticGroup)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'Background': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Background'}, 'TextureBackground': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TextureBackground'}, 'Fog': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Fog'}, 'GeoViewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoViewpoint'}, 'NavigationInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NavigationInfo'}, 'Viewpoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Viewpoint'}, 'Anchor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Anchor'}, 'Billboard': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Billboard'}, 'Collision': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Collision'}, 'EspduTransform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EspduTransform'}, 'GeoLocation': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLocation'}, 'Group': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Group'}, 'HAnimSegment': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSegment'}, 'HAnimSite': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimSite'}, 'LOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LOD'}, 'Switch': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Switch'}, 'Transform': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Transform'}, 'GeoMetadata': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoMetadata'}, 'WorldInfo': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/WorldInfo'}, 'ColorInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ColorInterpolator'}, 'CoordinateInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator'}, 'CoordinateInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CoordinateInterpolator2D'}, 'GeoPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoPositionInterpolator'}, 'NormalInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NormalInterpolator'}, 'OrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/OrientationInterpolator'}, 'PositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator'}, 'PositionInterpolator2D': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PositionInterpolator2D'}, 'ScalarInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ScalarInterpolator'}, 'DirectionalLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/DirectionalLight'}, 'PointLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PointLight'}, 'SpotLight': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SpotLight'}, 'Script': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Script'}, 'ProximitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProximitySensor'}, 'VisibilitySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/VisibilitySensor'}, 'KeySensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/KeySensor'}, 'StringSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StringSensor'}, 'LoadSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/LoadSensor'}, 'ReceiverPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ReceiverPdu'}, 'SignalPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SignalPdu'}, 'TransmitterPdu': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TransmitterPdu'}, 'CylinderSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/CylinderSensor'}, 'PlaneSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PlaneSensor'}, 'SphereSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/SphereSensor'}, 'GeoTouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoTouchSensor'}, 'TouchSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TouchSensor'}, 'TimeSensor': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeSensor'}, 'BooleanSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanSequencer'}, 'IntegerSequencer': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerSequencer'}, 'Shape': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Shape'}, 'Sound': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Sound'}, 'AudioClip': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/AudioClip'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'BooleanTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanTrigger'}, 'IntegerTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IntegerTrigger'}, 'TimeTrigger': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/TimeTrigger'}, 'BooleanFilter': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanFilter'}, 'BooleanToggle': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/BooleanToggle'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'GeoLOD': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/GeoLOD'}, 'HAnimHumanoid': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimHumanoid'}, 'HAnimJoint': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/HAnimJoint'}, 'Inline': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/Inline'}, 'NurbsOrientationInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsOrientationInterpolator'}, 'NurbsPositionInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsPositionInterpolator'}, 'NurbsSet': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSet'}, 'NurbsSurfaceInterpolator': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/NurbsSurfaceInterpolator'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'StaticGroup': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/StaticGroup'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_billboard(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@axisOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@axisOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@axisOfRotation" in data_keys:
                    data_keys.remove("@axisOfRotation")
                    data__axisOfRotation = data["@axisOfRotation"]
                    if not isinstance(data__axisOfRotation, (list, tuple)):
                        raise JsonSchemaValueException("data.@axisOfRotation must be array", value=data__axisOfRotation, name="data.@axisOfRotation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__axisOfRotation_is_list = isinstance(data__axisOfRotation, (list, tuple))
                    if data__axisOfRotation_is_list:
                        data__axisOfRotation_len = len(data__axisOfRotation)
                        if data__axisOfRotation_len < 3:
                            raise JsonSchemaValueException("data.@axisOfRotation must contain at least 3 items", value=data__axisOfRotation, name="data.@axisOfRotation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__axisOfRotation_len > 3:
                            raise JsonSchemaValueException("data.@axisOfRotation must contain less than or equal to 3 items", value=data__axisOfRotation, name="data.@axisOfRotation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__axisOfRotation:
                            raise JsonSchemaValueException("data.@axisOfRotation must not be there", value=data__axisOfRotation, name="data.@axisOfRotation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@axisOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@axisOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_anchor(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@parameter': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@parameter': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@bboxCenter" in data_keys:
                    data_keys.remove("@bboxCenter")
                    data__bboxCenter = data["@bboxCenter"]
                    if not isinstance(data__bboxCenter, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxCenter must be array", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__bboxCenter_is_list = isinstance(data__bboxCenter, (list, tuple))
                    if data__bboxCenter_is_list:
                        data__bboxCenter_len = len(data__bboxCenter)
                        if data__bboxCenter_len < 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain at least 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__bboxCenter_len > 3:
                            raise JsonSchemaValueException("data.@bboxCenter must contain less than or equal to 3 items", value=data__bboxCenter, name="data.@bboxCenter", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__bboxCenter_x, data__bboxCenter_item in enumerate(data__bboxCenter):
                            if not isinstance(data__bboxCenter_item, (int, float)) or isinstance(data__bboxCenter_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+" must be number", value=data__bboxCenter_item, name=""+"data.@bboxCenter[{data__bboxCenter_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@bboxSize" in data_keys:
                    data_keys.remove("@bboxSize")
                    data__bboxSize = data["@bboxSize"]
                    if not isinstance(data__bboxSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@bboxSize must be array", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='type')
                    data__bboxSize_is_list = isinstance(data__bboxSize, (list, tuple))
                    if data__bboxSize_is_list:
                        data__bboxSize_len = len(data__bboxSize)
                        if data__bboxSize_len < 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain at least 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='minItems')
                        if data__bboxSize_len > 3:
                            raise JsonSchemaValueException("data.@bboxSize must contain less than or equal to 3 items", value=data__bboxSize, name="data.@bboxSize", definition={'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, rule='maxItems')
                        for data__bboxSize_x, data__bboxSize_item in enumerate(data__bboxSize):
                            if not isinstance(data__bboxSize_item, (int, float)) or isinstance(data__bboxSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+" must be number", value=data__bboxSize_item, name=""+"data.@bboxSize[{data__bboxSize_x}]".format(**locals())+"", definition={'default': -1, 'type': 'number'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dchildnodemfnode(data__children)
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@parameter" in data_keys:
                    data_keys.remove("@parameter")
                    data__parameter = data["@parameter"]
                    if not isinstance(data__parameter, (list, tuple)):
                        raise JsonSchemaValueException("data.@parameter must be array", value=data__parameter, name="data.@parameter", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, rule='type')
                    data__parameter_is_list = isinstance(data__parameter, (list, tuple))
                    if data__parameter_is_list:
                        data__parameter_len = len(data__parameter)
                        for data__parameter_x, data__parameter_item in enumerate(data__parameter):
                            if not isinstance(data__parameter_item, (str)):
                                raise JsonSchemaValueException(""+"data.@parameter[{data__parameter_x}]".format(**locals())+" must be string", value=data__parameter_item, name=""+"data.@parameter[{data__parameter_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "@url" in data_keys:
                    data_keys.remove("@url")
                    data__url = data["@url"]
                    if not isinstance(data__url, (list, tuple)):
                        raise JsonSchemaValueException("data.@url must be array", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__url_is_list = isinstance(data__url, (list, tuple))
                    if data__url_is_list:
                        data__url_len = len(data__url)
                        if data__url_len < 1:
                            raise JsonSchemaValueException("data.@url must contain at least 1 items", value=data__url, name="data.@url", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__url_x, data__url_item in enumerate(data__url):
                            if not isinstance(data__url_item, (str)):
                                raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be string", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__url_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__url_item):
                                    raise JsonSchemaValueException(""+"data.@url[{data__url_x}]".format(**locals())+" must be uri-reference", value=data__url_item, name=""+"data.@url[{data__url_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@parameter': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'IS': {'$ref': '#/$defs/IS'}, '@bboxCenter': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@bboxSize': {'$comment': 'SFVec3f initializeOnly', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': -1, 'type': 'number'}}, '-children': {'$ref': '#/$defs/-X3DChildNodeMFNode'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@parameter': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'type': 'string'}}, '@url': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_viewpoint(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@centerOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@centerOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@centerOfRotation" in data_keys:
                    data_keys.remove("@centerOfRotation")
                    data__centerOfRotation = data["@centerOfRotation"]
                    if not isinstance(data__centerOfRotation, (list, tuple)):
                        raise JsonSchemaValueException("data.@centerOfRotation must be array", value=data__centerOfRotation, name="data.@centerOfRotation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='type')
                    data__centerOfRotation_is_list = isinstance(data__centerOfRotation, (list, tuple))
                    if data__centerOfRotation_is_list:
                        data__centerOfRotation_len = len(data__centerOfRotation)
                        if data__centerOfRotation_len < 3:
                            raise JsonSchemaValueException("data.@centerOfRotation must contain at least 3 items", value=data__centerOfRotation, name="data.@centerOfRotation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='minItems')
                        if data__centerOfRotation_len > 3:
                            raise JsonSchemaValueException("data.@centerOfRotation must contain less than or equal to 3 items", value=data__centerOfRotation, name="data.@centerOfRotation", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, rule='maxItems')
                        for data__centerOfRotation_x, data__centerOfRotation_item in enumerate(data__centerOfRotation):
                            if not isinstance(data__centerOfRotation_item, (int, float)) or isinstance(data__centerOfRotation_item, bool):
                                raise JsonSchemaValueException(""+"data.@centerOfRotation[{data__centerOfRotation_x}]".format(**locals())+" must be number", value=data__centerOfRotation_item, name=""+"data.@centerOfRotation[{data__centerOfRotation_x}]".format(**locals())+"", definition={'default': 0, 'type': 'number'}, rule='type')
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@fieldOfView" in data_keys:
                    data_keys.remove("@fieldOfView")
                    data__fieldOfView = data["@fieldOfView"]
                    if not isinstance(data__fieldOfView, (int, float)) or isinstance(data__fieldOfView, bool):
                        raise JsonSchemaValueException("data.@fieldOfView must be number", value=data__fieldOfView, name="data.@fieldOfView", definition={'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@fieldOfView"] = 0.7854
                if "@jump" in data_keys:
                    data_keys.remove("@jump")
                    data__jump = data["@jump"]
                    if not isinstance(data__jump, (bool)):
                        raise JsonSchemaValueException("data.@jump must be boolean", value=data__jump, name="data.@jump", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@jump"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@orientation" in data_keys:
                    data_keys.remove("@orientation")
                    data__orientation = data["@orientation"]
                    if not isinstance(data__orientation, (list, tuple)):
                        raise JsonSchemaValueException("data.@orientation must be array", value=data__orientation, name="data.@orientation", definition={'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__orientation_is_list = isinstance(data__orientation, (list, tuple))
                    if data__orientation_is_list:
                        data__orientation_len = len(data__orientation)
                        if data__orientation_len < 4:
                            raise JsonSchemaValueException("data.@orientation must contain at least 4 items", value=data__orientation, name="data.@orientation", definition={'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__orientation_len > 4:
                            raise JsonSchemaValueException("data.@orientation must contain less than or equal to 4 items", value=data__orientation, name="data.@orientation", definition={'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__orientation:
                            raise JsonSchemaValueException("data.@orientation must not be there", value=data__orientation, name="data.@orientation", definition={'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@position" in data_keys:
                    data_keys.remove("@position")
                    data__position = data["@position"]
                    if not isinstance(data__position, (list, tuple)):
                        raise JsonSchemaValueException("data.@position must be array", value=data__position, name="data.@position", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, rule='type')
                    data__position_is_list = isinstance(data__position, (list, tuple))
                    if data__position_is_list:
                        data__position_len = len(data__position)
                        if data__position_len < 3:
                            raise JsonSchemaValueException("data.@position must contain at least 3 items", value=data__position, name="data.@position", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__position_len > 3:
                            raise JsonSchemaValueException("data.@position must contain less than or equal to 3 items", value=data__position, name="data.@position", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__position:
                            raise JsonSchemaValueException("data.@position must not be there", value=data__position, name="data.@position", definition={'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, rule='items')
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@centerOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@centerOfRotation': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 0, 'type': 'number'}}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3f inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 10, 'type': 'number'}], 'items': False}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_navigationinfo(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@avatarSize': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'prefixItems': [{'default': 0.25, 'minimum': 0, 'type': 'number'}, {'default': 1.6, 'minimum': 0, 'type': 'number'}, {'default': 0.75, 'minimum': 0, 'type': 'number'}], 'items': {'minimum': 0, 'type': 'number'}}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transitionTime': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@transitionType': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}}, '@type': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'EXAMINE', 'type': 'string'}, {'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@visibilityLimit': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@avatarSize': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'prefixItems': [{'default': 0.25, 'minimum': 0, 'type': 'number'}, {'default': 1.6, 'minimum': 0, 'type': 'number'}, {'default': 0.75, 'minimum': 0, 'type': 'number'}], 'items': {'minimum': 0, 'type': 'number'}}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transitionTime': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@transitionType': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}}, '@type': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'EXAMINE', 'type': 'string'}, {'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@visibilityLimit': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@avatarSize" in data_keys:
                    data_keys.remove("@avatarSize")
                    data__avatarSize = data["@avatarSize"]
                    if not isinstance(data__avatarSize, (list, tuple)):
                        raise JsonSchemaValueException("data.@avatarSize must be array", value=data__avatarSize, name="data.@avatarSize", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'prefixItems': [{'default': 0.25, 'minimum': 0, 'type': 'number'}, {'default': 1.6, 'minimum': 0, 'type': 'number'}, {'default': 0.75, 'minimum': 0, 'type': 'number'}], 'items': {'minimum': 0, 'type': 'number'}}, rule='type')
                    data__avatarSize_is_list = isinstance(data__avatarSize, (list, tuple))
                    if data__avatarSize_is_list:
                        data__avatarSize_len = len(data__avatarSize)
                        for data__avatarSize_x, data__avatarSize_item in enumerate(data__avatarSize):
                            if not isinstance(data__avatarSize_item, (int, float)) or isinstance(data__avatarSize_item, bool):
                                raise JsonSchemaValueException(""+"data.@avatarSize[{data__avatarSize_x}]".format(**locals())+" must be number", value=data__avatarSize_item, name=""+"data.@avatarSize[{data__avatarSize_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__avatarSize_item, (int, float)):
                                if data__avatarSize_item < 0:
                                    raise JsonSchemaValueException(""+"data.@avatarSize[{data__avatarSize_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__avatarSize_item, name=""+"data.@avatarSize[{data__avatarSize_x}]".format(**locals())+"", definition={'minimum': 0, 'type': 'number'}, rule='minimum')
                if "@headlight" in data_keys:
                    data_keys.remove("@headlight")
                    data__headlight = data["@headlight"]
                    if not isinstance(data__headlight, (bool)):
                        raise JsonSchemaValueException("data.@headlight must be boolean", value=data__headlight, name="data.@headlight", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@headlight"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@speed" in data_keys:
                    data_keys.remove("@speed")
                    data__speed = data["@speed"]
                    if not isinstance(data__speed, (int, float)) or isinstance(data__speed, bool):
                        raise JsonSchemaValueException("data.@speed must be number", value=data__speed, name="data.@speed", definition={'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@speed"] = 1
                if "@transitionTime" in data_keys:
                    data_keys.remove("@transitionTime")
                    data__transitionTime = data["@transitionTime"]
                    if not isinstance(data__transitionTime, (int, float)) or isinstance(data__transitionTime, bool):
                        raise JsonSchemaValueException("data.@transitionTime must be number", value=data__transitionTime, name="data.@transitionTime", definition={'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, rule='type')
                else: data["@transitionTime"] = 1
                if "@transitionType" in data_keys:
                    data_keys.remove("@transitionType")
                    data__transitionType = data["@transitionType"]
                    if not isinstance(data__transitionType, (list, tuple)):
                        raise JsonSchemaValueException("data.@transitionType must be array", value=data__transitionType, name="data.@transitionType", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}}, rule='type')
                    data__transitionType_is_list = isinstance(data__transitionType, (list, tuple))
                    if data__transitionType_is_list:
                        data__transitionType_len = len(data__transitionType)
                        for data__transitionType_x, data__transitionType_item in enumerate(data__transitionType):
                            if not isinstance(data__transitionType_item, (str)):
                                raise JsonSchemaValueException(""+"data.@transitionType[{data__transitionType_x}]".format(**locals())+" must be string", value=data__transitionType_item, name=""+"data.@transitionType[{data__transitionType_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}, rule='type')
                            data__transitionType_item_any_of_count = 0
                            if not data__transitionType_item_any_of_count:
                                try:
                                    if data__transitionType_item not in ['TELEPORT', 'LINEAR', 'ANIMATE']:
                                        raise JsonSchemaValueException(""+"data.@transitionType[{data__transitionType_x}]".format(**locals())+" must be one of ['TELEPORT', 'LINEAR', 'ANIMATE']", value=data__transitionType_item, name=""+"data.@transitionType[{data__transitionType_x}]".format(**locals())+"", definition={'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, rule='enum')
                                    data__transitionType_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__transitionType_item_any_of_count:
                                try:
                                    if not isinstance(data__transitionType_item, (str)):
                                        raise JsonSchemaValueException(""+"data.@transitionType[{data__transitionType_x}]".format(**locals())+" must be string", value=data__transitionType_item, name=""+"data.@transitionType[{data__transitionType_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                                    data__transitionType_item_any_of_count += 1
                                except JsonSchemaValueException: pass
                            if not data__transitionType_item_any_of_count:
                                raise JsonSchemaValueException(""+"data.@transitionType[{data__transitionType_x}]".format(**locals())+" must be valid by one of anyOf definition", value=data__transitionType_item, name=""+"data.@transitionType[{data__transitionType_x}]".format(**locals())+"", definition={'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}, rule='anyOf')
                if "@type" in data_keys:
                    data_keys.remove("@type")
                    data__type = data["@type"]
                    if not isinstance(data__type, (list, tuple)):
                        raise JsonSchemaValueException("data.@type must be array", value=data__type, name="data.@type", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'EXAMINE', 'type': 'string'}, {'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, rule='type')
                    data__type_is_list = isinstance(data__type, (list, tuple))
                    if data__type_is_list:
                        data__type_len = len(data__type)
                        for data__type_x, data__type_item in enumerate(data__type):
                            if not isinstance(data__type_item, (str)):
                                raise JsonSchemaValueException(""+"data.@type[{data__type_x}]".format(**locals())+" must be string", value=data__type_item, name=""+"data.@type[{data__type_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "@visibilityLimit" in data_keys:
                    data_keys.remove("@visibilityLimit")
                    data__visibilityLimit = data["@visibilityLimit"]
                    if not isinstance(data__visibilityLimit, (int, float)) or isinstance(data__visibilityLimit, bool):
                        raise JsonSchemaValueException("data.@visibilityLimit must be number", value=data__visibilityLimit, name="data.@visibilityLimit", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@visibilityLimit"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@avatarSize': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'prefixItems': [{'default': 0.25, 'minimum': 0, 'type': 'number'}, {'default': 1.6, 'minimum': 0, 'type': 'number'}, {'default': 0.75, 'minimum': 0, 'type': 'number'}], 'items': {'minimum': 0, 'type': 'number'}}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transitionTime': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@transitionType': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}}, '@type': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'EXAMINE', 'type': 'string'}, {'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@visibilityLimit': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@avatarSize': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'prefixItems': [{'default': 0.25, 'minimum': 0, 'type': 'number'}, {'default': 1.6, 'minimum': 0, 'type': 'number'}, {'default': 0.75, 'minimum': 0, 'type': 'number'}], 'items': {'minimum': 0, 'type': 'number'}}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@speed': {'default': 1, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@transitionTime': {'default': 1, '$comment': 'SFTime inputOutput', 'type': 'number'}, '@transitionType': {'$comment': 'MFString inputOutput', 'type': 'array', 'items': {'anyOf': [{'enum': ['TELEPORT', 'LINEAR', 'ANIMATE']}, {'type': 'string'}], 'default': 'LINEAR', 'type': 'string'}}, '@type': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'EXAMINE', 'type': 'string'}, {'enum': ['ANY', 'WALK', 'EXAMINE', 'FLY', 'LOOKAT', 'NONE', 'EXPLORE'], 'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@visibilityLimit': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_geoviewpoint(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@navType': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'default': 'EXAMINE', 'type': 'string'}, {'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, '@speedFactor': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@navType': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'default': 'EXAMINE', 'type': 'string'}, {'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, '@speedFactor': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@description" in data_keys:
                    data_keys.remove("@description")
                    data__description = data["@description"]
                    if not isinstance(data__description, (str)):
                        raise JsonSchemaValueException("data.@description must be string", value=data__description, name="data.@description", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@fieldOfView" in data_keys:
                    data_keys.remove("@fieldOfView")
                    data__fieldOfView = data["@fieldOfView"]
                    if not isinstance(data__fieldOfView, (int, float)) or isinstance(data__fieldOfView, bool):
                        raise JsonSchemaValueException("data.@fieldOfView must be number", value=data__fieldOfView, name="data.@fieldOfView", definition={'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@fieldOfView"] = 0.7854
                if "-geoOrigin" in data_keys:
                    data_keys.remove("-geoOrigin")
                    data__geoOrigin = data["-geoOrigin"]
                    validate_x3d_3_0_jsonschema_json___defs__geooriginsfnode(data__geoOrigin)
                if "@geoSystem" in data_keys:
                    data_keys.remove("@geoSystem")
                    data__geoSystem = data["@geoSystem"]
                    validate_x3d_3_0_jsonschema_json___defs__geosystem(data__geoSystem)
                if "@headlight" in data_keys:
                    data_keys.remove("@headlight")
                    data__headlight = data["@headlight"]
                    if not isinstance(data__headlight, (bool)):
                        raise JsonSchemaValueException("data.@headlight must be boolean", value=data__headlight, name="data.@headlight", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@headlight"] = True
                if "@jump" in data_keys:
                    data_keys.remove("@jump")
                    data__jump = data["@jump"]
                    if not isinstance(data__jump, (bool)):
                        raise JsonSchemaValueException("data.@jump must be boolean", value=data__jump, name="data.@jump", definition={'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, rule='type')
                else: data["@jump"] = True
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@navType" in data_keys:
                    data_keys.remove("@navType")
                    data__navType = data["@navType"]
                    if not isinstance(data__navType, (list, tuple)):
                        raise JsonSchemaValueException("data.@navType must be array", value=data__navType, name="data.@navType", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'default': 'EXAMINE', 'type': 'string'}, {'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, rule='type')
                    data__navType_is_list = isinstance(data__navType, (list, tuple))
                    if data__navType_is_list:
                        data__navType_len = len(data__navType)
                        for data__navType_x, data__navType_item in enumerate(data__navType):
                            if not isinstance(data__navType_item, (str)):
                                raise JsonSchemaValueException(""+"data.@navType[{data__navType_x}]".format(**locals())+" must be string", value=data__navType_item, name=""+"data.@navType[{data__navType_x}]".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "@orientation" in data_keys:
                    data_keys.remove("@orientation")
                    data__orientation = data["@orientation"]
                    if not isinstance(data__orientation, (list, tuple)):
                        raise JsonSchemaValueException("data.@orientation must be array", value=data__orientation, name="data.@orientation", definition={'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='type')
                    data__orientation_is_list = isinstance(data__orientation, (list, tuple))
                    if data__orientation_is_list:
                        data__orientation_len = len(data__orientation)
                        if data__orientation_len < 4:
                            raise JsonSchemaValueException("data.@orientation must contain at least 4 items", value=data__orientation, name="data.@orientation", definition={'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__orientation_len > 4:
                            raise JsonSchemaValueException("data.@orientation must contain less than or equal to 4 items", value=data__orientation, name="data.@orientation", definition={'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__orientation:
                            raise JsonSchemaValueException("data.@orientation must not be there", value=data__orientation, name="data.@orientation", definition={'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, rule='items')
                if "@position" in data_keys:
                    data_keys.remove("@position")
                    data__position = data["@position"]
                    if not isinstance(data__position, (list, tuple)):
                        raise JsonSchemaValueException("data.@position must be array", value=data__position, name="data.@position", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, rule='type')
                    data__position_is_list = isinstance(data__position, (list, tuple))
                    if data__position_is_list:
                        data__position_len = len(data__position)
                        if data__position_len < 3:
                            raise JsonSchemaValueException("data.@position must contain at least 3 items", value=data__position, name="data.@position", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, rule='minItems')
                        if data__position_len > 3:
                            raise JsonSchemaValueException("data.@position must contain less than or equal to 3 items", value=data__position, name="data.@position", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, rule='maxItems')
                        if data__position:
                            raise JsonSchemaValueException("data.@position must not be there", value=data__position, name="data.@position", definition={'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, rule='items')
                if "@speedFactor" in data_keys:
                    data_keys.remove("@speedFactor")
                    data__speedFactor = data["@speedFactor"]
                    if not isinstance(data__speedFactor, (int, float)) or isinstance(data__speedFactor, bool):
                        raise JsonSchemaValueException("data.@speedFactor must be number", value=data__speedFactor, name="data.@speedFactor", definition={'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, rule='type')
                else: data["@speedFactor"] = 1
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@navType': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'default': 'EXAMINE', 'type': 'string'}, {'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, '@speedFactor': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@description': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@fieldOfView': {'default': 0.7854, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '-geoOrigin': {'$ref': '#/$defs/-GeoOriginSFNode'}, '@geoSystem': {'$ref': '#/$defs/@geoSystem'}, '@headlight': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '@jump': {'default': True, '$comment': 'SFBool inputOutput', 'type': 'boolean'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@navType': {'$comment': 'MFString inputOutput', 'type': 'array', 'prefixItems': [{'default': 'EXAMINE', 'type': 'string'}, {'default': 'ANY', 'type': 'string'}], 'items': {'type': 'string'}}, '@orientation': {'$comment': 'SFRotation initializeOnly', 'type': 'array', 'minItems': 4, 'maxItems': 4, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 1, 'type': 'number'}, {'default': 0, 'type': 'number'}], 'items': False}, '@position': {'$comment': 'SFVec3d inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'prefixItems': [{'default': 0, 'type': 'number'}, {'default': 0, 'type': 'number'}, {'default': 100000, 'type': 'number'}], 'items': False}, '@speedFactor': {'default': 1, '$comment': 'SFFloat initializeOnly', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_fog(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@fogType': {'enum': ['LINEAR', 'EXPONENTIAL'], 'default': 'LINEAR', '$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@visibilityRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@fogType': {'enum': ['LINEAR', 'EXPONENTIAL'], 'default': 'LINEAR', '$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@visibilityRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@color" in data_keys:
                    data_keys.remove("@color")
                    data__color = data["@color"]
                    if not isinstance(data__color, (list, tuple)):
                        raise JsonSchemaValueException("data.@color must be array", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__color_is_list = isinstance(data__color, (list, tuple))
                    if data__color_is_list:
                        data__color_len = len(data__color)
                        if data__color_len < 3:
                            raise JsonSchemaValueException("data.@color must contain at least 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        if data__color_len > 3:
                            raise JsonSchemaValueException("data.@color must contain less than or equal to 3 items", value=data__color, name="data.@color", definition={'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='maxItems')
                        for data__color_x, data__color_item in enumerate(data__color):
                            if not isinstance(data__color_item, (int, float)) or isinstance(data__color_item, bool):
                                raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be number", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__color_item, (int, float)):
                                if data__color_item < 0:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__color_item > 1:
                                    raise JsonSchemaValueException(""+"data.@color[{data__color_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__color_item, name=""+"data.@color[{data__color_x}]".format(**locals())+"", definition={'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@fogType" in data_keys:
                    data_keys.remove("@fogType")
                    data__fogType = data["@fogType"]
                    if not isinstance(data__fogType, (str)):
                        raise JsonSchemaValueException("data.@fogType must be string", value=data__fogType, name="data.@fogType", definition={'enum': ['LINEAR', 'EXPONENTIAL'], 'default': 'LINEAR', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data__fogType not in ['LINEAR', 'EXPONENTIAL']:
                        raise JsonSchemaValueException("data.@fogType must be one of ['LINEAR', 'EXPONENTIAL']", value=data__fogType, name="data.@fogType", definition={'enum': ['LINEAR', 'EXPONENTIAL'], 'default': 'LINEAR', '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                else: data["@fogType"] = 'LINEAR'
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@visibilityRange" in data_keys:
                    data_keys.remove("@visibilityRange")
                    data__visibilityRange = data["@visibilityRange"]
                    if not isinstance(data__visibilityRange, (int, float)) or isinstance(data__visibilityRange, bool):
                        raise JsonSchemaValueException("data.@visibilityRange must be number", value=data__visibilityRange, name="data.@visibilityRange", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@visibilityRange"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@fogType': {'enum': ['LINEAR', 'EXPONENTIAL'], 'default': 'LINEAR', '$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@visibilityRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@color': {'$comment': 'SFColor inputOutput', 'type': 'array', 'minItems': 3, 'maxItems': 3, 'items': {'default': 1, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@fogType': {'enum': ['LINEAR', 'EXPONENTIAL'], 'default': 'LINEAR', '$comment': 'SFString inputOutput', 'type': 'string'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@visibilityRange': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_texturebackground(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-backTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-bottomTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-frontTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-leftTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-rightTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-topTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-backTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-bottomTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-frontTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-leftTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-rightTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-topTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "-backTexture" in data_keys:
                    data_keys.remove("-backTexture")
                    data__backTexture = data["-backTexture"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexture2dnode_multitexturesfnode(data__backTexture)
                if "-bottomTexture" in data_keys:
                    data_keys.remove("-bottomTexture")
                    data__bottomTexture = data["-bottomTexture"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexture2dnode_multitexturesfnode(data__bottomTexture)
                if "-frontTexture" in data_keys:
                    data_keys.remove("-frontTexture")
                    data__frontTexture = data["-frontTexture"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexture2dnode_multitexturesfnode(data__frontTexture)
                if "@groundAngle" in data_keys:
                    data_keys.remove("@groundAngle")
                    data__groundAngle = data["@groundAngle"]
                    if not isinstance(data__groundAngle, (list, tuple)):
                        raise JsonSchemaValueException("data.@groundAngle must be array", value=data__groundAngle, name="data.@groundAngle", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__groundAngle_is_list = isinstance(data__groundAngle, (list, tuple))
                    if data__groundAngle_is_list:
                        data__groundAngle_len = len(data__groundAngle)
                        for data__groundAngle_x, data__groundAngle_item in enumerate(data__groundAngle):
                            if not isinstance(data__groundAngle_item, (int, float)) or isinstance(data__groundAngle_item, bool):
                                raise JsonSchemaValueException(""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+" must be number", value=data__groundAngle_item, name=""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+"", definition={'maximum': 1.5708, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__groundAngle_item, (int, float)):
                                if data__groundAngle_item < 0:
                                    raise JsonSchemaValueException(""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__groundAngle_item, name=""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+"", definition={'maximum': 1.5708, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__groundAngle_item > 1.5708:
                                    raise JsonSchemaValueException(""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+" must be smaller than or equal to 1.5708", value=data__groundAngle_item, name=""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+"", definition={'maximum': 1.5708, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@groundColor" in data_keys:
                    data_keys.remove("@groundColor")
                    data__groundColor = data["@groundColor"]
                    if not isinstance(data__groundColor, (list, tuple)):
                        raise JsonSchemaValueException("data.@groundColor must be array", value=data__groundColor, name="data.@groundColor", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__groundColor_is_list = isinstance(data__groundColor, (list, tuple))
                    if data__groundColor_is_list:
                        data__groundColor_len = len(data__groundColor)
                        if data__groundColor_len < 3:
                            raise JsonSchemaValueException("data.@groundColor must contain at least 3 items", value=data__groundColor, name="data.@groundColor", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        for data__groundColor_x, data__groundColor_item in enumerate(data__groundColor):
                            if not isinstance(data__groundColor_item, (int, float)) or isinstance(data__groundColor_item, bool):
                                raise JsonSchemaValueException(""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+" must be number", value=data__groundColor_item, name=""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__groundColor_item, (int, float)):
                                if data__groundColor_item < 0:
                                    raise JsonSchemaValueException(""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__groundColor_item, name=""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__groundColor_item > 1:
                                    raise JsonSchemaValueException(""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__groundColor_item, name=""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "-leftTexture" in data_keys:
                    data_keys.remove("-leftTexture")
                    data__leftTexture = data["-leftTexture"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexture2dnode_multitexturesfnode(data__leftTexture)
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "-rightTexture" in data_keys:
                    data_keys.remove("-rightTexture")
                    data__rightTexture = data["-rightTexture"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexture2dnode_multitexturesfnode(data__rightTexture)
                if "@skyAngle" in data_keys:
                    data_keys.remove("@skyAngle")
                    data__skyAngle = data["@skyAngle"]
                    if not isinstance(data__skyAngle, (list, tuple)):
                        raise JsonSchemaValueException("data.@skyAngle must be array", value=data__skyAngle, name="data.@skyAngle", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__skyAngle_is_list = isinstance(data__skyAngle, (list, tuple))
                    if data__skyAngle_is_list:
                        data__skyAngle_len = len(data__skyAngle)
                        for data__skyAngle_x, data__skyAngle_item in enumerate(data__skyAngle):
                            if not isinstance(data__skyAngle_item, (int, float)) or isinstance(data__skyAngle_item, bool):
                                raise JsonSchemaValueException(""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+" must be number", value=data__skyAngle_item, name=""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+"", definition={'maximum': 3.1416, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__skyAngle_item, (int, float)):
                                if data__skyAngle_item < 0:
                                    raise JsonSchemaValueException(""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__skyAngle_item, name=""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+"", definition={'maximum': 3.1416, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__skyAngle_item > 3.1416:
                                    raise JsonSchemaValueException(""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+" must be smaller than or equal to 3.1416", value=data__skyAngle_item, name=""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+"", definition={'maximum': 3.1416, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@skyColor" in data_keys:
                    data_keys.remove("@skyColor")
                    data__skyColor = data["@skyColor"]
                    if not isinstance(data__skyColor, (list, tuple)):
                        raise JsonSchemaValueException("data.@skyColor must be array", value=data__skyColor, name="data.@skyColor", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__skyColor_is_list = isinstance(data__skyColor, (list, tuple))
                    if data__skyColor_is_list:
                        data__skyColor_len = len(data__skyColor)
                        if data__skyColor_len < 3:
                            raise JsonSchemaValueException("data.@skyColor must contain at least 3 items", value=data__skyColor, name="data.@skyColor", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        for data__skyColor_x, data__skyColor_item in enumerate(data__skyColor):
                            if not isinstance(data__skyColor_item, (int, float)) or isinstance(data__skyColor_item, bool):
                                raise JsonSchemaValueException(""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+" must be number", value=data__skyColor_item, name=""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__skyColor_item, (int, float)):
                                if data__skyColor_item < 0:
                                    raise JsonSchemaValueException(""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__skyColor_item, name=""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__skyColor_item > 1:
                                    raise JsonSchemaValueException(""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__skyColor_item, name=""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "-topTexture" in data_keys:
                    data_keys.remove("-topTexture")
                    data__topTexture = data["-topTexture"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dtexture2dnode_multitexturesfnode(data__topTexture)
                if "@transparency" in data_keys:
                    data_keys.remove("@transparency")
                    data__transparency = data["@transparency"]
                    if not isinstance(data__transparency, (int, float)) or isinstance(data__transparency, bool):
                        raise JsonSchemaValueException("data.@transparency must be number", value=data__transparency, name="data.@transparency", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@transparency"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-backTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-bottomTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-frontTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-leftTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-rightTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-topTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '-backTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-bottomTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-frontTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-leftTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '-rightTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '-topTexture': {'$ref': '#/$defs/-X3DTexture2DNode-MultiTextureSFNode'}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs__x3dtexture2dnode_multitexturesfnode(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "ImageTexture" in data_keys:
            data_keys.remove("ImageTexture")
            data__ImageTexture = data["ImageTexture"]
            validate_x3d_3_0_jsonschema_json___defs_imagetexture(data__ImageTexture)
        if "MovieTexture" in data_keys:
            data_keys.remove("MovieTexture")
            data__MovieTexture = data["MovieTexture"]
            validate_x3d_3_0_jsonschema_json___defs_movietexture(data__MovieTexture)
        if "PixelTexture" in data_keys:
            data_keys.remove("PixelTexture")
            data__PixelTexture = data["PixelTexture"]
            validate_x3d_3_0_jsonschema_json___defs_pixeltexture(data__PixelTexture)
        if "MultiTexture" in data_keys:
            data_keys.remove("MultiTexture")
            data__MultiTexture = data["MultiTexture"]
            validate_x3d_3_0_jsonschema_json___defs_multitexture(data__MultiTexture)
        if "ProtoInstance" in data_keys:
            data_keys.remove("ProtoInstance")
            data__ProtoInstance = data["ProtoInstance"]
            validate_x3d_3_0_jsonschema_json___defs_protoinstance(data__ProtoInstance)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'ImageTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ImageTexture'}, 'MovieTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MovieTexture'}, 'PixelTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/PixelTexture'}, 'MultiTexture': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/MultiTexture'}, 'ProtoInstance': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoInstance'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_background(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@backUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@bottomUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@frontUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@leftUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rightUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@topUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='type')
    data_one_of_count = 0
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_len = len(data)
                if not all(prop in data for prop in ['@USE']):
                    raise JsonSchemaValueException("data must contain ['@USE'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='required')
                data_keys = set(data.keys())
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'type': 'string'}, rule='type')
                if "@USE" in data_keys:
                    data_keys.remove("@USE")
                    data__USE = data["@USE"]
                    if not isinstance(data__USE, (str)):
                        raise JsonSchemaValueException("data.@USE must be string", value=data__USE, name="data.@USE", definition={'type': 'string'}, rule='type')
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    if not isinstance(data__children, (list, tuple)):
                        raise JsonSchemaValueException("data.-children must be array", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='type')
                    data__children_is_list = isinstance(data__children, (list, tuple))
                    if data__children_is_list:
                        data__children_len = len(data__children)
                        if data__children_len < 1:
                            raise JsonSchemaValueException("data.-children must contain at least 1 items", value=data__children, name="data.-children", definition={'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}, rule='minItems')
                        for data__children_x, data__children_item in enumerate(data__children):
                            if not isinstance(data__children_item, (dict)):
                                raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must be object", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='type')
                            data__children_item_is_dict = isinstance(data__children_item, dict)
                            if data__children_item_is_dict:
                                data__children_item_keys = set(data__children_item.keys())
                                if "#comment" in data__children_item_keys:
                                    data__children_item_keys.remove("#comment")
                                    data__children_item__comment = data__children_item["#comment"]
                                    if not isinstance(data__children_item__comment, (str)):
                                        raise JsonSchemaValueException(""+"data.-children[{data__children_x}].#comment".format(**locals())+" must be string", value=data__children_item__comment, name=""+"data.-children[{data__children_x}].#comment".format(**locals())+"", definition={'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}, rule='type')
                                if data__children_item_keys:
                                    raise JsonSchemaValueException(""+"data.-children[{data__children_x}]".format(**locals())+" must not contain "+str(data__children_item_keys)+" properties", value=data__children_item, name=""+"data.-children[{data__children_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}, rule='additionalProperties')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count < 2:
        try:
            if not isinstance(data, (dict)):
                raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@backUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@bottomUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@frontUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@leftUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rightUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@topUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='type')
            data_is_dict = isinstance(data, dict)
            if data_is_dict:
                data_keys = set(data.keys())
                if "-children" in data_keys:
                    data_keys.remove("-children")
                    data__children = data["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
                if "IS" in data_keys:
                    data_keys.remove("IS")
                    data__IS = data["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
                if "@backUrl" in data_keys:
                    data_keys.remove("@backUrl")
                    data__backUrl = data["@backUrl"]
                    if not isinstance(data__backUrl, (list, tuple)):
                        raise JsonSchemaValueException("data.@backUrl must be array", value=data__backUrl, name="data.@backUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__backUrl_is_list = isinstance(data__backUrl, (list, tuple))
                    if data__backUrl_is_list:
                        data__backUrl_len = len(data__backUrl)
                        if data__backUrl_len < 1:
                            raise JsonSchemaValueException("data.@backUrl must contain at least 1 items", value=data__backUrl, name="data.@backUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__backUrl_x, data__backUrl_item in enumerate(data__backUrl):
                            if not isinstance(data__backUrl_item, (str)):
                                raise JsonSchemaValueException(""+"data.@backUrl[{data__backUrl_x}]".format(**locals())+" must be string", value=data__backUrl_item, name=""+"data.@backUrl[{data__backUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__backUrl_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__backUrl_item):
                                    raise JsonSchemaValueException(""+"data.@backUrl[{data__backUrl_x}]".format(**locals())+" must be uri-reference", value=data__backUrl_item, name=""+"data.@backUrl[{data__backUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@bottomUrl" in data_keys:
                    data_keys.remove("@bottomUrl")
                    data__bottomUrl = data["@bottomUrl"]
                    if not isinstance(data__bottomUrl, (list, tuple)):
                        raise JsonSchemaValueException("data.@bottomUrl must be array", value=data__bottomUrl, name="data.@bottomUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__bottomUrl_is_list = isinstance(data__bottomUrl, (list, tuple))
                    if data__bottomUrl_is_list:
                        data__bottomUrl_len = len(data__bottomUrl)
                        if data__bottomUrl_len < 1:
                            raise JsonSchemaValueException("data.@bottomUrl must contain at least 1 items", value=data__bottomUrl, name="data.@bottomUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__bottomUrl_x, data__bottomUrl_item in enumerate(data__bottomUrl):
                            if not isinstance(data__bottomUrl_item, (str)):
                                raise JsonSchemaValueException(""+"data.@bottomUrl[{data__bottomUrl_x}]".format(**locals())+" must be string", value=data__bottomUrl_item, name=""+"data.@bottomUrl[{data__bottomUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__bottomUrl_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__bottomUrl_item):
                                    raise JsonSchemaValueException(""+"data.@bottomUrl[{data__bottomUrl_x}]".format(**locals())+" must be uri-reference", value=data__bottomUrl_item, name=""+"data.@bottomUrl[{data__bottomUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@frontUrl" in data_keys:
                    data_keys.remove("@frontUrl")
                    data__frontUrl = data["@frontUrl"]
                    if not isinstance(data__frontUrl, (list, tuple)):
                        raise JsonSchemaValueException("data.@frontUrl must be array", value=data__frontUrl, name="data.@frontUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__frontUrl_is_list = isinstance(data__frontUrl, (list, tuple))
                    if data__frontUrl_is_list:
                        data__frontUrl_len = len(data__frontUrl)
                        if data__frontUrl_len < 1:
                            raise JsonSchemaValueException("data.@frontUrl must contain at least 1 items", value=data__frontUrl, name="data.@frontUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__frontUrl_x, data__frontUrl_item in enumerate(data__frontUrl):
                            if not isinstance(data__frontUrl_item, (str)):
                                raise JsonSchemaValueException(""+"data.@frontUrl[{data__frontUrl_x}]".format(**locals())+" must be string", value=data__frontUrl_item, name=""+"data.@frontUrl[{data__frontUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__frontUrl_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__frontUrl_item):
                                    raise JsonSchemaValueException(""+"data.@frontUrl[{data__frontUrl_x}]".format(**locals())+" must be uri-reference", value=data__frontUrl_item, name=""+"data.@frontUrl[{data__frontUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@groundAngle" in data_keys:
                    data_keys.remove("@groundAngle")
                    data__groundAngle = data["@groundAngle"]
                    if not isinstance(data__groundAngle, (list, tuple)):
                        raise JsonSchemaValueException("data.@groundAngle must be array", value=data__groundAngle, name="data.@groundAngle", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__groundAngle_is_list = isinstance(data__groundAngle, (list, tuple))
                    if data__groundAngle_is_list:
                        data__groundAngle_len = len(data__groundAngle)
                        for data__groundAngle_x, data__groundAngle_item in enumerate(data__groundAngle):
                            if not isinstance(data__groundAngle_item, (int, float)) or isinstance(data__groundAngle_item, bool):
                                raise JsonSchemaValueException(""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+" must be number", value=data__groundAngle_item, name=""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+"", definition={'maximum': 1.5708, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__groundAngle_item, (int, float)):
                                if data__groundAngle_item < 0:
                                    raise JsonSchemaValueException(""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__groundAngle_item, name=""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+"", definition={'maximum': 1.5708, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__groundAngle_item > 1.5708:
                                    raise JsonSchemaValueException(""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+" must be smaller than or equal to 1.5708", value=data__groundAngle_item, name=""+"data.@groundAngle[{data__groundAngle_x}]".format(**locals())+"", definition={'maximum': 1.5708, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@groundColor" in data_keys:
                    data_keys.remove("@groundColor")
                    data__groundColor = data["@groundColor"]
                    if not isinstance(data__groundColor, (list, tuple)):
                        raise JsonSchemaValueException("data.@groundColor must be array", value=data__groundColor, name="data.@groundColor", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__groundColor_is_list = isinstance(data__groundColor, (list, tuple))
                    if data__groundColor_is_list:
                        data__groundColor_len = len(data__groundColor)
                        if data__groundColor_len < 3:
                            raise JsonSchemaValueException("data.@groundColor must contain at least 3 items", value=data__groundColor, name="data.@groundColor", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        for data__groundColor_x, data__groundColor_item in enumerate(data__groundColor):
                            if not isinstance(data__groundColor_item, (int, float)) or isinstance(data__groundColor_item, bool):
                                raise JsonSchemaValueException(""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+" must be number", value=data__groundColor_item, name=""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__groundColor_item, (int, float)):
                                if data__groundColor_item < 0:
                                    raise JsonSchemaValueException(""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__groundColor_item, name=""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__groundColor_item > 1:
                                    raise JsonSchemaValueException(""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__groundColor_item, name=""+"data.@groundColor[{data__groundColor_x}]".format(**locals())+"", definition={'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@leftUrl" in data_keys:
                    data_keys.remove("@leftUrl")
                    data__leftUrl = data["@leftUrl"]
                    if not isinstance(data__leftUrl, (list, tuple)):
                        raise JsonSchemaValueException("data.@leftUrl must be array", value=data__leftUrl, name="data.@leftUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__leftUrl_is_list = isinstance(data__leftUrl, (list, tuple))
                    if data__leftUrl_is_list:
                        data__leftUrl_len = len(data__leftUrl)
                        if data__leftUrl_len < 1:
                            raise JsonSchemaValueException("data.@leftUrl must contain at least 1 items", value=data__leftUrl, name="data.@leftUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__leftUrl_x, data__leftUrl_item in enumerate(data__leftUrl):
                            if not isinstance(data__leftUrl_item, (str)):
                                raise JsonSchemaValueException(""+"data.@leftUrl[{data__leftUrl_x}]".format(**locals())+" must be string", value=data__leftUrl_item, name=""+"data.@leftUrl[{data__leftUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__leftUrl_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__leftUrl_item):
                                    raise JsonSchemaValueException(""+"data.@leftUrl[{data__leftUrl_x}]".format(**locals())+" must be uri-reference", value=data__leftUrl_item, name=""+"data.@leftUrl[{data__leftUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "-metadata" in data_keys:
                    data_keys.remove("-metadata")
                    data__metadata = data["-metadata"]
                    validate_x3d_3_0_jsonschema_json___defs__x3dmetadataobjectsfnode(data__metadata)
                if "@rightUrl" in data_keys:
                    data_keys.remove("@rightUrl")
                    data__rightUrl = data["@rightUrl"]
                    if not isinstance(data__rightUrl, (list, tuple)):
                        raise JsonSchemaValueException("data.@rightUrl must be array", value=data__rightUrl, name="data.@rightUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__rightUrl_is_list = isinstance(data__rightUrl, (list, tuple))
                    if data__rightUrl_is_list:
                        data__rightUrl_len = len(data__rightUrl)
                        if data__rightUrl_len < 1:
                            raise JsonSchemaValueException("data.@rightUrl must contain at least 1 items", value=data__rightUrl, name="data.@rightUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__rightUrl_x, data__rightUrl_item in enumerate(data__rightUrl):
                            if not isinstance(data__rightUrl_item, (str)):
                                raise JsonSchemaValueException(""+"data.@rightUrl[{data__rightUrl_x}]".format(**locals())+" must be string", value=data__rightUrl_item, name=""+"data.@rightUrl[{data__rightUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__rightUrl_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__rightUrl_item):
                                    raise JsonSchemaValueException(""+"data.@rightUrl[{data__rightUrl_x}]".format(**locals())+" must be uri-reference", value=data__rightUrl_item, name=""+"data.@rightUrl[{data__rightUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@skyAngle" in data_keys:
                    data_keys.remove("@skyAngle")
                    data__skyAngle = data["@skyAngle"]
                    if not isinstance(data__skyAngle, (list, tuple)):
                        raise JsonSchemaValueException("data.@skyAngle must be array", value=data__skyAngle, name="data.@skyAngle", definition={'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__skyAngle_is_list = isinstance(data__skyAngle, (list, tuple))
                    if data__skyAngle_is_list:
                        data__skyAngle_len = len(data__skyAngle)
                        for data__skyAngle_x, data__skyAngle_item in enumerate(data__skyAngle):
                            if not isinstance(data__skyAngle_item, (int, float)) or isinstance(data__skyAngle_item, bool):
                                raise JsonSchemaValueException(""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+" must be number", value=data__skyAngle_item, name=""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+"", definition={'maximum': 3.1416, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__skyAngle_item, (int, float)):
                                if data__skyAngle_item < 0:
                                    raise JsonSchemaValueException(""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__skyAngle_item, name=""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+"", definition={'maximum': 3.1416, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__skyAngle_item > 3.1416:
                                    raise JsonSchemaValueException(""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+" must be smaller than or equal to 3.1416", value=data__skyAngle_item, name=""+"data.@skyAngle[{data__skyAngle_x}]".format(**locals())+"", definition={'maximum': 3.1416, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@skyColor" in data_keys:
                    data_keys.remove("@skyColor")
                    data__skyColor = data["@skyColor"]
                    if not isinstance(data__skyColor, (list, tuple)):
                        raise JsonSchemaValueException("data.@skyColor must be array", value=data__skyColor, name="data.@skyColor", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='type')
                    data__skyColor_is_list = isinstance(data__skyColor, (list, tuple))
                    if data__skyColor_is_list:
                        data__skyColor_len = len(data__skyColor)
                        if data__skyColor_len < 3:
                            raise JsonSchemaValueException("data.@skyColor must contain at least 3 items", value=data__skyColor, name="data.@skyColor", definition={'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, rule='minItems')
                        for data__skyColor_x, data__skyColor_item in enumerate(data__skyColor):
                            if not isinstance(data__skyColor_item, (int, float)) or isinstance(data__skyColor_item, bool):
                                raise JsonSchemaValueException(""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+" must be number", value=data__skyColor_item, name=""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='type')
                            if isinstance(data__skyColor_item, (int, float)):
                                if data__skyColor_item < 0:
                                    raise JsonSchemaValueException(""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+" must be bigger than or equal to 0", value=data__skyColor_item, name=""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='minimum')
                                if data__skyColor_item > 1:
                                    raise JsonSchemaValueException(""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+" must be smaller than or equal to 1", value=data__skyColor_item, name=""+"data.@skyColor[{data__skyColor_x}]".format(**locals())+"", definition={'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}, rule='maximum')
                if "@topUrl" in data_keys:
                    data_keys.remove("@topUrl")
                    data__topUrl = data["@topUrl"]
                    if not isinstance(data__topUrl, (list, tuple)):
                        raise JsonSchemaValueException("data.@topUrl must be array", value=data__topUrl, name="data.@topUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='type')
                    data__topUrl_is_list = isinstance(data__topUrl, (list, tuple))
                    if data__topUrl_is_list:
                        data__topUrl_len = len(data__topUrl)
                        if data__topUrl_len < 1:
                            raise JsonSchemaValueException("data.@topUrl must contain at least 1 items", value=data__topUrl, name="data.@topUrl", definition={'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, rule='minItems')
                        for data__topUrl_x, data__topUrl_item in enumerate(data__topUrl):
                            if not isinstance(data__topUrl_item, (str)):
                                raise JsonSchemaValueException(""+"data.@topUrl[{data__topUrl_x}]".format(**locals())+" must be string", value=data__topUrl_item, name=""+"data.@topUrl[{data__topUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='type')
                            if isinstance(data__topUrl_item, str):
                                if not REGEX_PATTERNS["uri-reference_re_pattern"].match(data__topUrl_item):
                                    raise JsonSchemaValueException(""+"data.@topUrl[{data__topUrl_x}]".format(**locals())+" must be uri-reference", value=data__topUrl_item, name=""+"data.@topUrl[{data__topUrl_x}]".format(**locals())+"", definition={'format': 'uri-reference', 'type': 'string'}, rule='format')
                if "@transparency" in data_keys:
                    data_keys.remove("@transparency")
                    data__transparency = data["@transparency"]
                    if not isinstance(data__transparency, (int, float)) or isinstance(data__transparency, bool):
                        raise JsonSchemaValueException("data.@transparency must be number", value=data__transparency, name="data.@transparency", definition={'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, rule='type')
                else: data["@transparency"] = 0
                if "@DEF" in data_keys:
                    data_keys.remove("@DEF")
                    data__DEF = data["@DEF"]
                    if not isinstance(data__DEF, (str)):
                        raise JsonSchemaValueException("data.@DEF must be string", value=data__DEF, name="data.@DEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@class" in data_keys:
                    data_keys.remove("@class")
                    data__class = data["@class"]
                    if not isinstance(data__class, (str)):
                        raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_keys:
                    raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@backUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@bottomUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@frontUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@leftUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rightUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@topUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}, rule='additionalProperties')
            data_one_of_count += 1
        except JsonSchemaValueException: pass
    if data_one_of_count != 1:
        raise JsonSchemaValueException("data must be valid exactly by one of oneOf definition", value=data, name="data", definition={'type': 'object', 'oneOf': [{'type': 'object', 'properties': {'@class': {'type': 'string'}, '@USE': {'type': 'string'}, '-children': {'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string', '$comment': '#comment statements are the only allowed in -children node when using a USE field'}}, 'additionalProperties': False}}}, 'required': ['@USE'], 'additionalProperties': False}, {'type': 'object', 'properties': {'-children': {'$ref': '#/$defs/-childStatements'}, 'IS': {'$ref': '#/$defs/IS'}, '@backUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@bottomUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@frontUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@groundAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 1.5708, 'minimum': 0, 'type': 'number'}}, '@groundColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@leftUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '-metadata': {'$ref': '#/$defs/-X3DMetadataObjectSFNode'}, '@rightUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@skyAngle': {'$comment': 'MFFloat inputOutput', 'type': 'array', 'items': {'maximum': 3.1416, 'minimum': 0, 'type': 'number'}}, '@skyColor': {'$comment': 'MFColor inputOutput', 'type': 'array', 'minItems': 3, 'items': {'default': 0, 'maximum': 1, 'minimum': 0, 'type': 'number'}}, '@topUrl': {'$comment': 'MFString inputOutput', 'type': 'array', 'minItems': 1, 'items': {'format': 'uri-reference', 'type': 'string'}}, '@transparency': {'default': 0, '$comment': 'SFFloat inputOutput', 'type': 'number'}, '@DEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'additionalProperties': False}]}, rule='oneOf')
    return data

def validate_x3d_3_0_jsonschema_json___defs_head(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'component': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/component'}, 'meta': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/meta'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "component" in data_keys:
            data_keys.remove("component")
            data__component = data["component"]
            validate_x3d_3_0_jsonschema_json___defs_component(data__component)
        if "meta" in data_keys:
            data_keys.remove("meta")
            data__meta = data["meta"]
            validate_x3d_3_0_jsonschema_json___defs_meta(data__meta)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'component': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/component'}, 'meta': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/meta'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_meta(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@content': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@dir': {'enum': ['rtl', 'ltr'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@http-equiv': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@lang': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'anyOf': [{'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@scheme': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@content', '@name'], 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@content': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@dir': {'enum': ['rtl', 'ltr'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@http-equiv': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@lang': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'anyOf': [{'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@scheme': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@content', '@name'], 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_len = len(data_item)
                if not all(prop in data_item for prop in ['@content', '@name']):
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must contain ['@content', '@name'] properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@content': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@dir': {'enum': ['rtl', 'ltr'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@http-equiv': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@lang': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'anyOf': [{'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@scheme': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@content', '@name'], 'additionalProperties': False}, rule='required')
                data_item_keys = set(data_item.keys())
                if "-children" in data_item_keys:
                    data_item_keys.remove("-children")
                    data_item__children = data_item["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data_item__children)
                if "IS" in data_item_keys:
                    data_item_keys.remove("IS")
                    data_item__IS = data_item["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data_item__IS)
                if "@class" in data_item_keys:
                    data_item_keys.remove("@class")
                    data_item__class = data_item["@class"]
                    if not isinstance(data_item__class, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@class".format(**locals())+" must be string", value=data_item__class, name=""+"data[{data_x}].@class".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@content" in data_item_keys:
                    data_item_keys.remove("@content")
                    data_item__content = data_item["@content"]
                    if not isinstance(data_item__content, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@content".format(**locals())+" must be string", value=data_item__content, name=""+"data[{data_x}].@content".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@dir" in data_item_keys:
                    data_item_keys.remove("@dir")
                    data_item__dir = data_item["@dir"]
                    if not isinstance(data_item__dir, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@dir".format(**locals())+" must be string", value=data_item__dir, name=""+"data[{data_x}].@dir".format(**locals())+"", definition={'enum': ['rtl', 'ltr'], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data_item__dir not in ['rtl', 'ltr']:
                        raise JsonSchemaValueException(""+"data[{data_x}].@dir".format(**locals())+" must be one of ['rtl', 'ltr']", value=data_item__dir, name=""+"data[{data_x}].@dir".format(**locals())+"", definition={'enum': ['rtl', 'ltr'], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                if "@http-equiv" in data_item_keys:
                    data_item_keys.remove("@http-equiv")
                    data_item__httpequiv = data_item["@http-equiv"]
                    if not isinstance(data_item__httpequiv, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@http-equiv".format(**locals())+" must be string", value=data_item__httpequiv, name=""+"data[{data_x}].@http-equiv".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@lang" in data_item_keys:
                    data_item_keys.remove("@lang")
                    data_item__lang = data_item["@lang"]
                    if not isinstance(data_item__lang, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@lang".format(**locals())+" must be string", value=data_item__lang, name=""+"data[{data_x}].@lang".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@name" in data_item_keys:
                    data_item_keys.remove("@name")
                    data_item__name = data_item["@name"]
                    if not isinstance(data_item__name, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@name".format(**locals())+" must be string", value=data_item__name, name=""+"data[{data_x}].@name".format(**locals())+"", definition={'anyOf': [{'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    data_item__name_any_of_count = 0
                    if not data_item__name_any_of_count:
                        try:
                            if data_item__name not in ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']:
                                raise JsonSchemaValueException(""+"data[{data_x}].@name".format(**locals())+" must be one of ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']", value=data_item__name, name=""+"data[{data_x}].@name".format(**locals())+"", definition={'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, rule='enum')
                            data_item__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data_item__name_any_of_count:
                        try:
                            if not isinstance(data_item__name, (str)):
                                raise JsonSchemaValueException(""+"data[{data_x}].@name".format(**locals())+" must be string", value=data_item__name, name=""+"data[{data_x}].@name".format(**locals())+"", definition={'type': 'string'}, rule='type')
                            data_item__name_any_of_count += 1
                        except JsonSchemaValueException: pass
                    if not data_item__name_any_of_count:
                        raise JsonSchemaValueException(""+"data[{data_x}].@name".format(**locals())+" must be valid by one of anyOf definition", value=data_item__name, name=""+"data[{data_x}].@name".format(**locals())+"", definition={'anyOf': [{'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='anyOf')
                if "@scheme" in data_item_keys:
                    data_item_keys.remove("@scheme")
                    data_item__scheme = data_item["@scheme"]
                    if not isinstance(data_item__scheme, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@scheme".format(**locals())+" must be string", value=data_item__scheme, name=""+"data[{data_x}].@scheme".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@content': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@dir': {'enum': ['rtl', 'ltr'], '$comment': 'SFString inputOutput', 'type': 'string'}, '@http-equiv': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@lang': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@name': {'anyOf': [{'enum': ['accessRights', 'author', 'contributor', 'created', 'creator', 'description', 'disclaimer', 'drawing', 'error', 'generator', 'hint', 'identifier', 'Image', 'info', 'information', 'isVersionOf', 'keywords', 'license', 'mediator', 'modified', 'movie', 'MovingImage', 'original', 'photo', 'photograph', 'publisher', 'reference', 'requires', 'rights', 'robots', 'Sound', 'source', 'specificationSection', 'specificationUrl', 'subject', 'Text', 'title', 'TODO', 'translator', 'translated', 'version', 'warning']}, {'type': 'string'}], '$comment': 'SFString inputOutput', 'type': 'string'}, '@scheme': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@content', '@name'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_component(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@level': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@name': {'enum': ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time'], '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@level', '@name'], 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@level': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@name': {'enum': ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time'], '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@level', '@name'], 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_len = len(data_item)
                if not all(prop in data_item for prop in ['@level', '@name']):
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must contain ['@level', '@name'] properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@level': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@name': {'enum': ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time'], '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@level', '@name'], 'additionalProperties': False}, rule='required')
                data_item_keys = set(data_item.keys())
                if "-children" in data_item_keys:
                    data_item_keys.remove("-children")
                    data_item__children = data_item["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data_item__children)
                if "IS" in data_item_keys:
                    data_item_keys.remove("IS")
                    data_item__IS = data_item["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data_item__IS)
                if "@class" in data_item_keys:
                    data_item_keys.remove("@class")
                    data_item__class = data_item["@class"]
                    if not isinstance(data_item__class, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@class".format(**locals())+" must be string", value=data_item__class, name=""+"data[{data_x}].@class".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@level" in data_item_keys:
                    data_item_keys.remove("@level")
                    data_item__level = data_item["@level"]
                    if not isinstance(data_item__level, (int)) and not (isinstance(data_item__level, float) and data_item__level.is_integer()) or isinstance(data_item__level, bool):
                        raise JsonSchemaValueException(""+"data[{data_x}].@level".format(**locals())+" must be integer", value=data_item__level, name=""+"data[{data_x}].@level".format(**locals())+"", definition={'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, rule='type')
                else: data_item["@level"] = 1
                if "@name" in data_item_keys:
                    data_item_keys.remove("@name")
                    data_item__name = data_item["@name"]
                    if not isinstance(data_item__name, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@name".format(**locals())+" must be string", value=data_item__name, name=""+"data[{data_x}].@name".format(**locals())+"", definition={'enum': ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time'], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                    if data_item__name not in ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time']:
                        raise JsonSchemaValueException(""+"data[{data_x}].@name".format(**locals())+" must be one of ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time']", value=data_item__name, name=""+"data[{data_x}].@name".format(**locals())+"", definition={'enum': ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time'], '$comment': 'SFString inputOutput', 'type': 'string'}, rule='enum')
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@level': {'default': 1, '$comment': 'SFInt32 inputOutput', 'type': 'integer'}, '@name': {'enum': ['Core', 'DIS', 'EnvironmentalEffects', 'EnvironmentalSensor', 'EventUtilities', 'Geometry2D', 'Geometry3D', 'Geospatial', 'Grouping', 'H-Anim', 'Interpolation', 'KeyDeviceSensor', 'Lighting', 'Navigation', 'Networking', 'NURBS', 'PointingDeviceSensor', 'Rendering', 'Scripting', 'Shape', 'Sound', 'Text', 'Texturing', 'Time'], '$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@level', '@name'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_is(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'connect': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/connect'}}, 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_keys = set(data.keys())
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "connect" in data_keys:
            data_keys.remove("connect")
            data__connect = data["connect"]
            validate_x3d_3_0_jsonschema_json___defs_connect(data__connect)
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, 'connect': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/connect'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_connect(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'type': 'array', 'items': {'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@nodeField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@protoField': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@nodeField', '@protoField'], 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@nodeField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@protoField': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@nodeField', '@protoField'], 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_len = len(data_item)
                if not all(prop in data_item for prop in ['@nodeField', '@protoField']):
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must contain ['@nodeField', '@protoField'] properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@nodeField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@protoField': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@nodeField', '@protoField'], 'additionalProperties': False}, rule='required')
                data_item_keys = set(data_item.keys())
                if "-children" in data_item_keys:
                    data_item_keys.remove("-children")
                    data_item__children = data_item["-children"]
                    validate_x3d_3_0_jsonschema_json___defs__childstatements(data_item__children)
                if "IS" in data_item_keys:
                    data_item_keys.remove("IS")
                    data_item__IS = data_item["IS"]
                    validate_x3d_3_0_jsonschema_json___defs_is(data_item__IS)
                if "@class" in data_item_keys:
                    data_item_keys.remove("@class")
                    data_item__class = data_item["@class"]
                    if not isinstance(data_item__class, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@class".format(**locals())+" must be string", value=data_item__class, name=""+"data[{data_x}].@class".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@nodeField" in data_item_keys:
                    data_item_keys.remove("@nodeField")
                    data_item__nodeField = data_item["@nodeField"]
                    if not isinstance(data_item__nodeField, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@nodeField".format(**locals())+" must be string", value=data_item__nodeField, name=""+"data[{data_x}].@nodeField".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if "@protoField" in data_item_keys:
                    data_item_keys.remove("@protoField")
                    data_item__protoField = data_item["@protoField"]
                    if not isinstance(data_item__protoField, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].@protoField".format(**locals())+" must be string", value=data_item__protoField, name=""+"data[{data_x}].@protoField".format(**locals())+"", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@nodeField': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@protoField': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@nodeField', '@protoField'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs__childstatements(data):
    if not isinstance(data, (list, tuple)):
        raise JsonSchemaValueException("data must be array", value=data, name="data", definition={'description': 'Comments and ROUTEs', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'IMPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IMPORT'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'EXPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EXPORT'}}, 'additionalProperties': False}}, rule='type')
    data_is_list = isinstance(data, (list, tuple))
    if data_is_list:
        data_len = len(data)
        if data_len < 1:
            raise JsonSchemaValueException("data must contain at least 1 items", value=data, name="data", definition={'description': 'Comments and ROUTEs', 'type': 'array', 'minItems': 1, 'items': {'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'IMPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IMPORT'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'EXPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EXPORT'}}, 'additionalProperties': False}}, rule='minItems')
        for data_x, data_item in enumerate(data):
            if not isinstance(data_item, (dict)):
                raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must be object", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'IMPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IMPORT'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'EXPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EXPORT'}}, 'additionalProperties': False}, rule='type')
            data_item_is_dict = isinstance(data_item, dict)
            if data_item_is_dict:
                data_item_keys = set(data_item.keys())
                if "#comment" in data_item_keys:
                    data_item_keys.remove("#comment")
                    data_item__comment = data_item["#comment"]
                    if not isinstance(data_item__comment, (str)):
                        raise JsonSchemaValueException(""+"data[{data_x}].#comment".format(**locals())+" must be string", value=data_item__comment, name=""+"data[{data_x}].#comment".format(**locals())+"", definition={'type': 'string'}, rule='type')
                if "ROUTE" in data_item_keys:
                    data_item_keys.remove("ROUTE")
                    data_item__ROUTE = data_item["ROUTE"]
                    validate_x3d_3_0_jsonschema_json___defs_route(data_item__ROUTE)
                if "IMPORT" in data_item_keys:
                    data_item_keys.remove("IMPORT")
                    data_item__IMPORT = data_item["IMPORT"]
                    validate_x3d_3_0_jsonschema_json___defs_import(data_item__IMPORT)
                if "ProtoDeclare" in data_item_keys:
                    data_item_keys.remove("ProtoDeclare")
                    data_item__ProtoDeclare = data_item["ProtoDeclare"]
                    validate_x3d_3_0_jsonschema_json___defs_protodeclare(data_item__ProtoDeclare)
                if "ExternProtoDeclare" in data_item_keys:
                    data_item_keys.remove("ExternProtoDeclare")
                    data_item__ExternProtoDeclare = data_item["ExternProtoDeclare"]
                    validate_x3d_3_0_jsonschema_json___defs_externprotodeclare(data_item__ExternProtoDeclare)
                if "EXPORT" in data_item_keys:
                    data_item_keys.remove("EXPORT")
                    data_item__EXPORT = data_item["EXPORT"]
                    validate_x3d_3_0_jsonschema_json___defs_export(data_item__EXPORT)
                if data_item_keys:
                    raise JsonSchemaValueException(""+"data[{data_x}]".format(**locals())+" must not contain "+str(data_item_keys)+" properties", value=data_item, name=""+"data[{data_x}]".format(**locals())+"", definition={'type': 'object', 'properties': {'#comment': {'type': 'string'}, 'ROUTE': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ROUTE'}, 'IMPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IMPORT'}, 'ProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ProtoDeclare'}, 'ExternProtoDeclare': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/ExternProtoDeclare'}, 'EXPORT': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/EXPORT'}}, 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_export(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@localDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@localDEF'], 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_len = len(data)
        if not all(prop in data for prop in ['@localDEF']):
            raise JsonSchemaValueException("data must contain ['@localDEF'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@localDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@localDEF'], 'additionalProperties': False}, rule='required')
        data_keys = set(data.keys())
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "@AS" in data_keys:
            data_keys.remove("@AS")
            data__AS = data["@AS"]
            if not isinstance(data__AS, (str)):
                raise JsonSchemaValueException("data.@AS must be string", value=data__AS, name="data.@AS", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@localDEF" in data_keys:
            data_keys.remove("@localDEF")
            data__localDEF = data["@localDEF"]
            if not isinstance(data__localDEF, (str)):
                raise JsonSchemaValueException("data.@localDEF must be string", value=data__localDEF, name="data.@localDEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@localDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@localDEF'], 'additionalProperties': False}, rule='additionalProperties')
    return data

def validate_x3d_3_0_jsonschema_json___defs_import(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@importedDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@inlineDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@importedDEF', '@inlineDEF'], 'additionalProperties': False}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_len = len(data)
        if not all(prop in data for prop in ['@importedDEF', '@inlineDEF']):
            raise JsonSchemaValueException("data must contain ['@importedDEF', '@inlineDEF'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@importedDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@inlineDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@importedDEF', '@inlineDEF'], 'additionalProperties': False}, rule='required')
        data_keys = set(data.keys())
        if "-children" in data_keys:
            data_keys.remove("-children")
            data__children = data["-children"]
            validate_x3d_3_0_jsonschema_json___defs__childstatements(data__children)
        if "IS" in data_keys:
            data_keys.remove("IS")
            data__IS = data["IS"]
            validate_x3d_3_0_jsonschema_json___defs_is(data__IS)
        if "@AS" in data_keys:
            data_keys.remove("@AS")
            data__AS = data["@AS"]
            if not isinstance(data__AS, (str)):
                raise JsonSchemaValueException("data.@AS must be string", value=data__AS, name="data.@AS", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@class" in data_keys:
            data_keys.remove("@class")
            data__class = data["@class"]
            if not isinstance(data__class, (str)):
                raise JsonSchemaValueException("data.@class must be string", value=data__class, name="data.@class", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@importedDEF" in data_keys:
            data_keys.remove("@importedDEF")
            data__importedDEF = data["@importedDEF"]
            if not isinstance(data__importedDEF, (str)):
                raise JsonSchemaValueException("data.@importedDEF must be string", value=data__importedDEF, name="data.@importedDEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if "@inlineDEF" in data_keys:
            data_keys.remove("@inlineDEF")
            data__inlineDEF = data["@inlineDEF"]
            if not isinstance(data__inlineDEF, (str)):
                raise JsonSchemaValueException("data.@inlineDEF must be string", value=data__inlineDEF, name="data.@inlineDEF", definition={'$comment': 'SFString inputOutput', 'type': 'string'}, rule='type')
        if data_keys:
            raise JsonSchemaValueException("data must not contain "+str(data_keys)+" properties", value=data, name="data", definition={'type': 'object', 'properties': {'-children': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/-childStatements'}, 'IS': {'$ref': 'x3d-3.0-JSONSchema.json#/$defs/IS'}, '@AS': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@class': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@importedDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}, '@inlineDEF': {'$comment': 'SFString inputOutput', 'type': 'string'}}, 'required': ['@importedDEF', '@inlineDEF'], 'additionalProperties': False}, rule='additionalProperties')
    return data
