###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_11',geoSystem=['GDC'],position=(-56.291665660871615,-112.54166465504323,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-56.291665660871615,-112.54166465504323,0.0),range=4495500.0,child1Url=['../../tiles/4/world2-2.x3d'],child2Url=['../../tiles/4/world2-3.x3d'],child3Url=['../../tiles/4/world3-2.x3d'],child4Url=['../../tiles/4/world3-3.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world1-1.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4407,-4289,-4105,-4003,-4111,-4157,-4316,-4156,-4145,-4414,-4176,-4050,-4232,-4443,-4398,-4515,-4562,-4432,-4354,-4298,-4243,-4588,-4574,-4329,-4390,-4390,-4131,-4452,-4473,-4528,-4623,-4506,-4202,-4489,-4671,-4711,-4669,-4639,-3862,-4393,-4556,-4350,-4644,-4747,-4710,-4635,-4600,-4668,-4718,-4851,-4886,-4799,-4822,-4757,-4724,-4814,-4877,-4824,-4752,-4863,-4683,-4710,-4427,-4380,-4777,-4845,-4866,-4851,-4850,-4919,-4965,-4939,-4950,-4952,-5023,-4936,-4960,-4947,-4887,-4888,-4901,-4743,-4975,-4508,-5157,-4858,-5032,-5031,-4939,-5037,-5004,-5009,-5009,-5079,-5120,-5141,-5068,-5073,-5001,-4978,-4946,-4934,-4905,-4789,-4697,-5127,-4972,-4817,-4970,-4889,-5125,-4970,-5103,-5014,-5156,-5120,-5143,-5164,-5182,-5102,-4946,-4939,-5032,-4970,-4778,-4748,-4432,-4540,-4684,-4701,-4802,-5086,-5173,-5022,-5011,-4925,-5146,-5230,-5131,-5059,-5071,-4966,-5173,-5134,-4919,-4892,-4860,-4371,-4406,-4454,-3938,-4625,-4568,-4948,-4918,-5038,-5108,-5114,-5197,-4954,-5292,-5077,-5144,-5339,-5052,-5044,-4802,-4929,-4017,-4110,-4062,-4656,-4531,-4458,-4563,-4706,-5008,-5045,-5108,-5128,-4682,-4898,-5417,-4812,-4937,-5224,-4680,-4869,-4772,-4106,-3217,-3675,-4199,-4091,-4490,-4698,-4480,-4672,-5089,-5419,-4755,-5002,-4658,-4582,-4689,-4869,-4930,-4236,-4921,-4926,-3254,-3500,-3466,-3646,-3852,-4252,-3899,-4436,-5012,-4641,-4647,-4287,-4519,-4670,-4447,-3570,-4595,-4968,-4753,-4932,-4682,-3258,-3518,-3626,-3858,-3933,-4540,-4255,-3101,-3580,-3801,-4118,-4038,-4201,-4420,-4525,-4360,-4570,-4598,-5347,-5231,-5304,-3008,-3166,-3241,-3968,-1388,-3876,-2578,-2909,-3351,-3670,-3125,-3925,-4097,-4257,-4341,-4520,-3992,-4581,-5100,-5352,-4572,-2549,-3450,-3767,-3754,-3477,-3110,-2952,-2617,-3124,-3329,-3505,-3574,-3966,-3975,-4234,-4461,-4524,-4534,-5465,-4899,-4828,-4646,-4261,-3794,-4040,-3489,-3444,-2999,-3101,-2987,-3319,-3503,-3397,-3719,-4152,-4183,-4547,-4507,-4574,-4983,-4924,-4974,-4468,-4221,-4329,-4158,-3783,-3717,-3163,-2655,-2939,-3363,-3440,-3718,-3959,-3920,-4064,-4402,-4526,-4702,-4726,-4743,-4828,-4351,-4542,-4282,-4033,-3871,-3693,-3388,-2859,-2829,-3237,-3430,-3607,-3789,-4294,-4018,-4441,-4373,-4596,-4943,-4880,-4815,-4598,-4623,-4347,-3901,-3957,-3781,-3168,-3069,-2496,-2986,-3119,-3446,-3667,-3884,-4068,-4253,-4334,-4511,-4786,-4795,-4399,-4270,-4696,-4401,-3980,-3835,-3713,-3618,-3605,-3042,-3051,-2851,-3220,-3739,-4084,-4126,-4229,-4472,-4539,-4928,-4650,-4427,-4804,-4549,-4452,-4443,-3713,-4006,-3839,-3683,-3358,-2999,-2804,-3108,-3578,-3827,-4101,-4225,-4377,-4571,-4602,-4617,-4121,-5043,-4742,-4566,-4535,-4258,-4229,-3982,-3817,-3343,-2998,-2789,-3129,-3380,-3010,-3968,-3998,-3867,-4116,-4458,-4139,-3811,-4825,-4677,-4606,-4515,-4463,-4161,-3995,-3772,-3373,-2986,-2848,-3157,-3309,-3626,-3943,-4006,-3665,-4305,-4349,-4145,-3812],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
