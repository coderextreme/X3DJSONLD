###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[2197,-4,-317,-419,-722,-4273,-3304,-3705,-4178,-343,-680,-2249,-1930,-1751,-1515,-2725,-4950,-5587,-4130,-3560,-2224,-1881,66,-578,109,-2393,-4342,-3978,-3372,-3337,-3443,-3670,-2465,-2232,-2289,-2130,-3144,-5566,-4816,-3998,-4278,-3314,-2100,-2008,-2618,-1497,-3492,-4806,-4444,-3557,-3199,-3356,-3305,-3336,-3966,-4240,-4730,-5834,-5778,-5214,-4920,-4734,-4051,-2746,-1981,-1991,-3533,-3120,-4854,-4535,-4244,-3327,-3218,-3207,-3019,-3502,-4047,-3426,-4347,-4487,-6171,-4877,-5665,-4396,-3980,-2336,-2091,-2030,-3903,-4654,-4539,-4222,-3959,-3422,-3348,-3121,-2987,-3754,-3963,-4129,-4501,-4522,-7007,-4998,-5161,-4624,-3726,-3212,-2517,-2082,-3886,-4354,-4612,-4068,-4129,-4105,-3519,-3152,-2881,-3864,-4290,-4417,-4638,-4363,-5089,-4804,-4783,-4256,-3703,-2872,-2534,-2310,-3659,-4082,-3993,-4234,-4356,-4357,-3804,-2809,-2912,-3957,-4425,-4525,-4496,-4293,-2855,-4604,-4934,-4313,-3479,-3027,-2496,-2397,-3677,-4311,-4325,-4304,-4435,-4259,-3970,-2876,-3278,-4318,-4435,-4583,-4465,-4558,-2429,-5550,-4896,-4489,-3695,-2866,-2580,-2450,-4566,-4339,-4284,-4720,-4336,-4314,-4085,-2813,-3340,-4336,-4545,-4571,-4435,-4435,-3669,-5236,-4983,-4282,-4013,-2926,-2630,-2697,-3770,-4212,-4294,-4471,-4478,-4413,-4101,-2652,-3071,-4367,-4160,-4479,-4588,-4228,-5033,-5114,-4561,-4279,-4001,-3186,-2642,-2825,-3875,-4892,-4870,-4697,-4519,-4569,-4138,-2348,-3088,-4116,-4336,-4664,-4326,-4070,-4858,-4981,-4161,-4624,-3975,-2929,-3032,-3339,-3401,-4695,-4728,-4414,-4383,-4448,-4074,-2603,-2969,-3773,-4195,-4469,-3765,-3464,-4302,-3961,-4462,-4639,-3949,-3452,-3368,-3515,-2744,-4634,-4628,-4626,-4376,-4381,-3966,-3378,-2648,-3289,-3926,-4279,-4069,-3708,-4105,-3598,-4657,-4717,-4134,-3471,-3444,-3576,-3499,-4590,-4484,-4044,-4405,-4054,-4400,-3618,-2407,-3261,-4058,-4554,-4190,-3508,-4189,-3763,-4736,-4565,-3399,-3832,-3325,-3578,-2837,-4836,-4572,-4488,-4589,-4568,-3825,-3656,-2147,-3102,-4269,-4207,-4319,-3685,-2892,-3789,-4653,-4448,-2346,-3933,-3550,-3755,-4723,-5135,-4517,-4454,-4057,-4441,-4182,-2860,-2065,-3202,-1955,-4323,-4088,-2432,-3199,-2672,-4552,-4418,-3439,-4158,-4246,-4051,-2427,-4824,-4373,-4468,-4018,-3610,-3965,-5385,-1392,-3343,-3060,-3709,-3642,-3648,-2468,-4416,-4260,-3720,-3125,-4342,-4261,-4624,-2875,-6149,-4859,-4833,-3687,-2863,-2886,-2966,-2738,-2869,-2607,-3126,-2406,-3028,-1128,-4171,-3846,-2697,-4480,-4790,-3700,-4384,-3933,-7175,-2950,-2623,-3184,-2840,-2975,-2842,-3418,-2191,-2529,-2228,-1810,-648,-1896,-4272,-3903,-4071,-4877,-4646,-2742,-4736,-3916,-2822,-3989,-3860,-3231,-2533,-182,-4163,-2394,-2492,-3348,8,-1933,-3,-420,-3151,-3855,-3620,-4975,-2544,-4779,-5146,-4044,-3129,-3199,-2082,-6300,-2250,-3865,-2506,-2298,-3312,-3447,-3782,-2681,-2464,-1895,-26,-4584,-1,-5154,-5321,-4925,-5148,-4840,-3286,-4734,-3736,-4034,-3103,-3303,-3453,-2643,-4736,-4387,-3184,-3989,-2043,-4605,-2968,-5147,-4411,-5248,-5423,-5239,-5177,-4934,-2504,-4096,-4647,-372,-3009,-1523,-2282,-3979,-4737,-4423,-3616,-3658,-3388,-5312,-5487,-5405,-5233,-5518,-5573,-5375,-5338,-4972,-2225,-4132,-4545,-1510,-3433,-1478,-2621,-4475,-4687,-4009,-3644,-2719,-3836,-5364,-5494,-5459,-5405,-5515,-5558,-5479,-5358],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
