###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-453,630,606,-73,-130,-109,-157,-301,-493,-513,-399,-759,-1907,-2680,-3068,-3259,-3342,-3490,-3663,-3634,-3724,-3812,-346,172,509,-81,-305,-128,-120,-232,-398,-478,-542,-787,-1940,-2711,-3133,-3371,-3544,-3725,-3729,-3925,-3977,-4072,-2,-157,1853,-4,-68,-47,-132,-293,-418,-608,-644,-781,-1771,-2631,-3043,-3196,-3424,-3702,-3899,-3957,-4195,-4222,-506,-107,-97,1801,5,-12,-39,-228,-419,-395,-356,-505,-1177,-2165,-3026,-3090,-3233,-3579,-3912,-4024,-4220,-4279,-467,-190,0,200,1792,334,-36,-16,-367,-339,-378,-383,-471,-1560,-2300,-2936,-3251,-3641,-3938,-4142,-4255,-4299,-309,-511,-316,-245,741,292,-106,-118,-365,-473,-464,-516,-405,-1456,-2361,-2984,-3318,-3632,-3969,-4074,-4260,-4303,-321,-302,-320,-185,-220,495,1081,-17,-433,-470,-396,-429,-351,-1607,-2583,-2974,-3272,-3634,-3916,-4067,-4304,-4359,-2687,-416,-443,-283,287,1258,-174,1926,724,255,-211,-287,-305,-1534,-2397,-2811,-3077,-3494,-3794,-4076,-4335,-4426,-3178,-2985,-435,-312,-420,-224,-709,-590,740,-538,21,-411,-132,-587,-1125,-1792,-2611,-3173,-3342,-3312,-4106,-4297,-3595,-3470,-3035,-1794,-285,-151,-1058,-413,-281,-51,164,19,-47,-412,-540,-1360,-1526,-2836,-3287,-3334,-3612,-3577,-3752,-3519,-3277,-3254,-2207,-403,-7,-747,-1089,-597,-260,-117,-120,-132,-1457,-2624,-3355,-3405,-3431,-3372,-3717,-2731,-3797,-3553,-3408,-3161,-4607,-1802,-368,-91,-431,-1853,-1346,-347,-425,-766,-2538,-3099,-3342,-3356,-3327,-3075,-2975,-2533,-3889,-3981,-3597,-3866,-3430,-3870,-3300,-2038,-276,-76,-338,-1476,-1453,-508,-1283,-2784,-3241,-3314,-3247,-1956,-333,-137,-3939,-4120,-3329,-3288,-3562,-3405,-3693,-5028,-3467,-1889,-1255,-357,-801,-924,-1055,-214,-2837,-3036,-2919,-1468,-14,-310,-4069,-3332,-3175,-3395,-3671,-3685,-3658,-3792,-4320,-4760,-3822,-2004,-1264,-785,-1584,-2424,-1080,-2601,-2420,-1866,-217,-351,-3336,-3134,-2745,-3822,-3519,-3918,-3908,-4053,-3512,-3818,-3866,-3716,-3396,-2678,-2864,-1311,-4893,-4004,-4115,-2658,-2965,-3181,-3539,-3493,-3422,-3514,-3416,-4062,-4104,-3780,-3265,-4121,-3448,-3529,-3384,-2943,-3310,-3077,-3593,-4033,-4062,-4402,-4186,-3312,-2892,-3466,-3593,-3444,-3944,-3854,-3519,-3448,-3810,-3537,-3513,-3673,-3622,-3641,-3469,-3230,-3380,-3814,-3698,-3688,-2784,-1702,-3819,-3725,-3307,-3805,-3860,-3828,-3381,-3922,-3944,-3801,-3722,-3832,-3924,-4106,-4064,-3553,-2865,-3928,-3973,-3229,-2992,-2634,-3686,-3455,-3191,-3409,-3919,-3213,-4002,-3444,-3632,-3898,-3717,-3872,-4052,-4107,-3948,-3813,-3442,-3323,-3890,-3347,-3089,-2720,-3908,-3032,-4277,-3640,-4080,-3633,-2954,-3578,-4343,-3746,-3866,-3981,-4200,-4134,-4132,-4150,-4020,-3869,-3397,-3192,-3309,-3082,-4385,-954,-3835,-4338,-3880,-3903,-3651,-3908,-3655,-4356,-3351,-3877,-3491,-4324,-3433,-3867,-3815,-3997,-3728,-3334,-3399,-3490,-40,-2289,-3889,-3995,-3965,-4156,-4057,-3700,-3558,-3938,-3138,-3430,-4300,-4679,-3563,-4305,-4644,-4543,-4401,-3786,-4064,-3486,-211,-2137,-3823,-4042,-3996,-4155,-4158,-3859,-3518,-3948,-3526,-4158,-3859,-5393,-3504,-4298,-4382,-5616,-4482,-3711,-4146,-3750],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
