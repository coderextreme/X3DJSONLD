###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world0-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-90.0416666667,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2915,2917,2920,2923,2925,2927,2929,2932,2933,2935,2937,2938,2939,2940,2942,2942,2942,2942,2942,2942,2942,2941,2982,2981,2981,2980,2980,2980,2981,2981,2982,2983,2986,2988,2990,2993,2995,2997,2999,3001,3003,3007,3010,3013,3055,3059,3062,3066,3070,3075,3081,3087,3093,3098,3100,3103,3107,3110,3113,3115,3117,3119,3120,3121,3121,3121,3093,3094,3095,3096,3097,3098,3098,3098,3098,3096,3095,3094,3092,3091,3090,3089,3088,3088,3087,3087,3087,3087,3047,3044,3042,3039,3037,3034,3032,3030,3028,3027,3025,3024,3024,3025,3026,3026,3028,3030,3033,3036,3039,3040,3000,2997,2994,2990,2987,2984,2980,2976,2972,2970,2966,2963,2960,2957,2955,2953,2953,2954,2955,2957,2960,2962,2966,2958,2951,2942,2935,2927,2920,2914,2909,2905,2902,2900,2899,2897,2896,2894,2893,2893,2892,2892,2892,2892,2933,2920,2909,2901,2895,2889,2881,2874,2867,2860,2855,2850,2847,2844,2841,2839,2835,2830,2823,2813,2802,2796,2889,2880,2870,2860,2849,2838,2827,2815,2805,2798,2795,2793,2789,2784,2775,2763,2746,2725,2703,2688,2666,2645,2810,2806,2803,2802,2800,2794,2783,2769,2753,2735,2720,2711,2705,2702,2700,2698,2693,2684,2667,2639,2600,2561,2776,2758,2742,2727,2712,2700,2691,2676,2665,2655,2645,2635,2623,2612,2599,2575,2529,2493,2464,2443,2431,2431,2748,2711,2694,2682,2671,2660,2648,2634,2617,2600,2591,2578,2565,2549,2529,2506,2479,2438,2402,2352,2304,2297,2737,2714,2685,2646,2613,2594,2575,2544,2511,2498,2495,2490,2485,2471,2446,2415,2392,2376,2342,2241,2192,2198,2681,2648,2616,2594,2562,2527,2502,2481,2454,2433,2418,2407,2398,2392,2387,2378,2347,2280,2170,2018,1979,2016,2613,2589,2558,2524,2501,2481,2455,2431,2412,2400,2386,2361,2331,2309,2294,2275,2250,2219,2207,2212,1988,1574,2619,2587,2552,2502,2444,2399,2382,2362,2341,2318,2299,2275,2236,2192,2133,2081,2004,1983,2036,2048,2072,2036,2600,2569,2513,2470,2419,2393,2359,2331,2304,2257,2202,2173,2146,2106,1988,1868,1791,1700,1641,1615,1730,1819,2584,2550,2514,2486,2444,2404,2360,2308,2285,2245,2205,2176,2118,2050,1981,1831,1647,1429,1257,1152,1132,1061,2604,2562,2504,2473,2430,2380,2302,2277,2265,2258,2245,2206,2108,2005,1953,1866,1757,1564,1367,1051,882,626,2593,2553,2526,2501,2433,2369,2300,2281,2278,2275,2261,2237,2199,2145,2033,1963,1914,1807,1612,1642,1770,1201,2599,2557,2534,2508,2474,2410,2370,2338,2319,2306,2293,2275,2254,2222,2194,2137,2070,2088,2174,2126,1726,1847,2637,2597,2573,2545,2509,2470,2417,2394,2386,2380,2371,2366,2360,2342,2312,2295,2266,2098,2094,2053,1898,1558,2644,2600,2578,2552,2517,2482,2433,2402,2397,2391,2383,2377,2372,2357,2324,2296,2272,2132,2071,2007,1808,1568],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
