###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1094,1103,1318,1126,1385,1332,1303,1162,1254,795,775,1515,730,832,526,341,337,142,-2423,-3306,-2332,-2968,1089,1092,1386,1465,1477,1295,1156,1170,1176,1429,657,1451,476,758,540,328,395,69,-2393,-3019,-53,-3148,1090,1132,1255,1405,1426,1328,1103,1164,1173,1656,691,1298,476,550,691,318,213,99,-2712,-2769,-22,-3317,1106,1155,1271,1206,1477,1167,1094,1235,1227,1408,952,1224,1169,761,667,329,296,128,-2789,-2701,-3151,-3416,1083,975,1203,1096,1602,927,1005,1310,1270,1228,1153,1452,758,1140,796,453,223,120,-2870,-2761,-3445,-3489,1053,935,1070,977,1464,889,993,1211,1564,1342,1230,979,1485,888,510,446,357,-918,-2505,-2950,-3531,-3688,967,942,1059,852,784,927,946,1085,1493,1598,1363,714,1996,618,339,393,163,-2137,-3012,-3147,-3664,-3835,1051,1090,1035,1097,571,1831,1087,1038,1344,1761,1045,1887,1638,298,410,452,153,-2263,-3124,-3515,-3775,-3987,1018,997,926,1102,720,1502,1079,1359,1006,1701,813,1452,1297,1705,324,505,168,-1603,-2953,-3589,-4024,-4016,794,918,906,1088,775,586,877,1380,767,1798,1155,1560,1099,1811,276,178,25,-1259,-2901,-3592,-3973,-4064,820,844,977,956,741,683,720,1369,767,827,1425,1466,1107,1216,643,105,95,-1114,-2732,-3578,-4022,-4101,827,859,755,945,912,590,706,1071,767,926,1151,1263,1078,716,520,262,218,-1083,-2662,-3543,-3995,-4160,703,815,577,858,842,582,840,1314,1188,1262,1106,1364,1105,1070,1666,470,-4,-1477,-2763,-3539,-4081,-4323,614,678,554,666,644,583,780,767,1607,1096,1108,1397,1284,1095,1249,530,-56,-1526,-2813,-3610,-4040,-4283,545,634,607,607,603,596,759,767,1445,1077,1127,1226,1452,1128,1240,654,-35,-1472,-2727,-3531,-4055,-4304,531,590,594,528,545,687,911,767,1080,1091,1158,1200,1542,1454,1118,614,35,-1379,-2337,-3502,-4160,-4334,506,548,557,497,552,643,678,767,1241,1070,1187,1180,1511,1425,1254,1273,109,-739,-2210,-3442,-4145,-4366,450,557,538,526,533,618,1441,767,1137,1105,1202,1126,1088,982,1212,828,304,-744,-2010,-3424,-3894,-4339,388,417,547,480,551,599,1325,769,1397,1229,1210,1184,1594,954,1066,1037,325,-178,-2097,-3398,-3698,-4061,490,619,523,495,528,602,1159,1550,1411,1278,1176,1233,1598,2222,1175,764,250,-2,-1923,-3245,-3587,-3911,522,450,554,467,526,623,1409,2446,1455,1323,1134,1360,1553,889,1276,865,252,11,-873,-3015,-3560,-3845,445,396,468,478,529,646,1113,1786,1522,1402,1134,1197,1514,2091,1745,864,261,35,2,-2687,-3446,-3752,410,427,477,454,516,853,1304,1777,1418,1170,1134,1134,1854,1823,1522,1087,296,89,38,-1932,-3160,-3496,410,420,469,434,509,787,873,1508,1341,1150,1134,1134,1754,1828,1618,1151,305,94,36,-1700,-3183,-3462],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
