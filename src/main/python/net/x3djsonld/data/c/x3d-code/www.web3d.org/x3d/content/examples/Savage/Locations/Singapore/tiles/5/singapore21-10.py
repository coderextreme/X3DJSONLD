###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore21-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3956292231378735,103.7334663412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[6,6,6,7,9,9,10,13,15,17,19,19,19,19,19,22,26,29,32,34,32,31,30,30,31,31,32,33,34,33,31,29,29,29,29,29,7,6,6,7,9,11,12,14,17,18,19,19,19,19,20,22,26,30,33,35,33,32,32,32,32,32,33,34,34,34,31,28,28,28,29,30,6,7,8,9,10,11,12,14,16,18,19,20,20,20,20,22,25,28,31,33,34,33,31,31,32,32,33,34,35,34,30,27,27,27,28,30,6,7,9,11,12,12,11,13,15,17,19,19,19,19,20,21,23,26,29,31,33,33,31,30,31,32,33,34,35,34,30,27,27,27,28,30,7,8,10,12,13,13,12,14,16,18,18,18,18,19,20,21,22,24,27,29,31,31,30,28,29,31,34,37,38,38,34,30,29,29,29,30,8,9,11,13,13,14,14,16,18,18,18,18,18,18,20,21,22,23,25,27,28,29,28,26,27,29,35,39,40,40,36,32,31,30,30,30,9,11,12,12,13,14,15,17,18,19,19,19,18,19,20,22,22,22,23,24,25,25,25,25,25,27,33,37,39,39,34,30,29,28,29,30,11,12,13,12,12,14,16,18,19,19,20,20,20,20,21,22,22,21,21,21,22,22,23,23,24,26,30,33,36,36,31,27,27,27,29,30,13,14,15,16,16,18,18,19,19,20,21,22,22,21,21,21,22,21,20,20,20,21,22,23,25,26,29,32,34,34,30,26,27,27,29,30,15,16,18,19,21,21,21,20,20,21,22,23,23,22,21,21,22,21,20,19,20,21,22,23,25,28,30,31,33,33,29,26,27,27,29,30,15,17,19,21,23,23,23,21,20,21,23,25,25,23,21,21,21,21,19,18,19,21,22,23,26,28,30,31,33,32,29,27,26,27,29,31,15,17,19,21,24,24,24,22,20,22,25,26,25,24,21,21,21,20,19,18,19,20,22,23,26,28,30,31,32,32,29,28,27,27,30,32,12,14,17,20,22,23,22,21,20,22,25,26,25,24,21,21,21,21,20,19,19,20,22,24,26,28,29,30,31,32,31,30,30,31,34,36,9,12,14,18,20,20,20,20,21,23,25,25,24,22,21,21,22,21,21,20,20,21,24,25,25,26,28,30,31,31,31,32,34,35,38,40,9,11,14,16,17,17,17,19,21,23,24,24,23,22,21,21,22,22,21,20,19,20,22,24,24,24,26,29,31,31,30,30,32,35,37,39,11,13,14,15,14,14,15,17,21,23,23,23,23,22,22,22,22,22,21,21,18,17,19,21,21,22,25,27,30,31,29,28,30,33,35,37,15,16,17,16,15,14,14,18,21,23,24,24,24,23,22,22,22,21,21,19,17,15,17,18,19,20,23,25,28,30,28,27,29,32,34,37,18,20,21,19,17,16,16,19,22,25,26,27,25,24,23,22,21,21,20,18,15,14,15,16,18,20,21,23,27,29,30,30,30,31,35,39,20,22,23,21,19,18,17,20,23,26,29,29,26,24,23,22,21,20,18,17,15,14,15,15,17,19,20,22,25,27,30,32,32,33,36,39,20,23,25,23,21,20,19,21,24,28,32,31,28,25,23,21,21,19,17,16,16,16,17,17,19,20,20,21,22,25,29,32,33,35,36,39,21,25,28,27,24,22,21,22,24,27,31,30,27,24,22,20,20,18,16,15,16,17,18,19,20,21,20,19,20,22,27,30,31,32,33,34,23,27,31,30,28,26,24,24,24,26,28,28,26,23,21,19,18,17,14,13,15,16,19,21,22,22,20,19,19,20,22,25,25,25,25,26,24,28,32,32,31,28,27,26,25,26,27,26,25,22,20,18,17,16,13,12,14,15,19,22,23,23,20,19,19,19,20,21,20,20,20,20],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
