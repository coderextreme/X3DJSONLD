###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_41',geoSystem=['GDC'],position=(11.208336350785146,-112.54166465504323,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(11.208336350785146,-112.54166465504323,0.0),range=4495500.0,child1Url=['../../tiles/4/world8-2.x3d'],child2Url=['../../tiles/4/world8-3.x3d'],child3Url=['../../tiles/4/world9-2.x3d'],child4Url=['../../tiles/4/world9-3.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world4-1.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4511,-4494,-4630,-4381,-4679,-4487,-4329,-4383,-4192,-4194,-3995,-3911,-3889,-3713,-3524,-3292,-3511,-3579,-3174,-3454,-3133,-4392,-4493,-4508,-4438,-4619,-4549,-4383,-4232,-4309,-4257,-4046,-3931,-3819,-3652,-2967,-3265,-3399,-3358,-3353,-3252,-3272,-4337,-4348,-4405,-4562,-4660,-4627,-4379,-4132,-4189,-4197,-4080,-3897,-3634,-3734,-3387,-3246,-3334,-3282,-3391,-3164,-101,-1928,-4384,-4455,-4516,-4555,-4536,-4291,-4019,-4031,-3969,-3973,-3776,-3671,-3698,-3495,-3204,-3388,-3162,-3254,-2879,-1452,-4483,-4255,-4410,-4487,-4565,-4691,-4355,-4321,-3905,-3851,-3914,-3776,-3670,-3490,-3413,-2978,-3497,-3147,-3144,-2438,-1883,-4397,-4352,-4359,-4400,-4509,-4513,-4443,-4239,-4034,-3890,-3837,-3745,-3751,-3457,-3396,-2492,-3537,-2938,-2503,-2513,-1722,-4286,-4339,-4464,-4468,-4498,-4559,-4308,-4181,-4163,-3933,-3909,-3843,-3811,-3690,-3391,-3292,-3231,-3347,-2936,-2613,-2419,-4525,-4325,-4445,-4395,-4440,-4397,-4363,-4231,-4372,-4095,-3941,-3966,-3981,-3782,-3423,-3324,-3560,-3376,-3489,-3479,-3160,-4594,-4392,-4236,-4418,-4298,-4305,-4151,-4106,-4237,-4131,-4040,-3893,-3841,-3761,-3276,-3243,-3471,-3570,-3600,-3656,-3547,-4601,-4455,-4460,-4584,-4438,-4505,-4246,-3982,-4185,-4066,-4230,-3848,-3813,-3746,-3288,-3291,-3524,-3635,-3625,-3569,-3619,-4687,-4922,-4947,-4493,-4648,-4441,-4343,-3784,-4061,-4022,-3687,-4090,-3706,-3508,-3104,-3263,-3479,-3557,-3675,-3589,-3426,-4693,-4916,-4869,-4630,-4573,-4460,-4312,-4178,-4005,-3937,-3885,-3734,-3452,-3121,-3213,-3560,-3694,-3869,-3282,-3599,-3444,-4854,-4838,-4819,-4649,-4652,-4540,-4384,-4409,-4253,-4166,-3663,-3503,-3406,-3384,-3096,-3529,-3916,-3999,-3802,-3773,-3710,-4970,-4965,-4712,-4803,-4666,-4522,-4428,-4482,-4113,-4064,-3199,-3738,-3500,-3395,-3001,-3255,-3807,-4422,-4044,-3660,-3688,-4988,-4867,-4982,-4858,-4769,-4579,-4451,-4395,-4160,-4112,-4049,-3660,-3864,-3268,-3074,-3315,-3590,-4107,-4041,-3789,-4185,-4699,-4895,-5047,-4789,-4578,-4595,-4343,-4373,-4110,-4053,-4024,-2298,-3757,-3303,-2999,-3465,-3466,-4064,-4035,-5885,-155,-4864,-5000,-5000,-4711,-4502,-4345,-4269,-4237,-4109,-3976,-3924,-3122,-3868,-3305,-3077,-3557,-3484,-3368,-4752,-45,1554,-4840,-5094,-5057,-4941,-4485,-4379,-4323,-4101,-3928,-3813,-3862,-3505,-4080,-3185,-3269,-3574,-3180,-3671,-234,2513,1775,-4790,-5051,-4927,-4795,-4436,-4309,-4055,-4033,-3538,-3848,-3444,-3471,-3653,-3196,-3131,-3377,-449,1786,43,2415,139,-5071,-5210,-5439,-4550,-3867,-4196,-3796,-4150,-3959,-3682,-3401,-3321,-3610,-3207,-4457,38,1801,1257,25,11,205,-5137,-5246,-5226,-4776,-4434,-4314,-4016,-4031,-4043,-3545,-3452,-3291,-3423,-3318,537,674,1082,1252,-113,2,63,-5163,-5352,-5208,-4775,-4447,-4484,-4034,-4041,-4003,-3393,-3390,-3287,-3214,-3710,190,1036,1141,788,-309,-26,61],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
