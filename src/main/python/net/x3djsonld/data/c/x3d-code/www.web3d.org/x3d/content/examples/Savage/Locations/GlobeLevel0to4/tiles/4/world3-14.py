###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4210,-3891,-3850,-4279,-4148,-4071,-3810,-3643,-3505,-3448,-3058,-2973,-3301,-3028,-3901,-3415,-3207,-3487,-3525,-3637,-3762,-3728,-4237,-4176,-3814,-3702,-4055,-3730,-3471,-3581,-3342,-3400,-3128,-2916,-2152,-3274,-3704,-3659,-3436,-3563,-3638,-3700,-3817,-3810,-4018,-3946,-3775,-4140,-4136,-3782,-3207,-3308,-3218,-3099,-2782,-2709,-2219,-3216,-3714,-3659,-3630,-3633,-3732,-3751,-4054,-3913,-3987,-4024,-4094,-3915,-3808,-3545,-3401,-3206,-3150,-3089,-2753,-2735,-2618,-3863,-3672,-3547,-3694,-3798,-3940,-3945,-4180,-4148,-3729,-4014,-3968,-3861,-3704,-3632,-3460,-3136,-2830,-2804,-2439,-2554,-2716,-3952,-3875,-3659,-3445,-4124,-4092,-4133,-4052,-4066,-3991,-3985,-3822,-3747,-3698,-3595,-3557,-2853,-2758,-2587,-2771,-2730,-3517,-3981,-3893,-4039,-4024,-3927,-4066,-4140,-4222,-3991,-3808,-3781,-3663,-3517,-3687,-3651,-3404,-2958,-2963,-3113,-2855,-3036,-3762,-4058,-3975,-3962,-4390,-4033,-4107,-4064,-4194,-4032,-3665,-3655,-3699,-3552,-3145,-3867,-3313,-3019,-3024,-2428,-2962,-3034,-3906,-4275,-3992,-3988,-3742,-4060,-4320,-4057,-4183,-4154,-3626,-3635,-2902,-3024,-3406,-3455,-2999,-2852,-3270,-3249,-3222,-3185,-3897,-3965,-4095,-4251,-3745,-4134,-4155,-4240,-4207,-4521,-3471,-3056,-3348,-3114,-2626,-3119,-2641,-3441,-3450,-3373,-3390,-3079,-3697,-3997,-4347,-4217,-3919,-4080,-4313,-4424,-4362,-4396,-3403,-3405,-3195,-3003,-2574,-3109,-3397,-3407,-3750,-3679,-3392,-3591,-3915,-3979,-4277,-4349,-3961,-4246,-4430,-4488,-4482,-4375,-3278,-3024,-3471,-2899,-2928,-3406,-3415,-3647,-3710,-3768,-3536,-4129,-3550,-4122,-4190,-3846,-4186,-4302,-4480,-4363,-4329,-4426,-3030,-3099,-3112,-2839,-2560,-3185,-3759,-3561,-3705,-4171,-3672,-4659,-3801,-4335,-4042,-3231,-4123,-4295,-4282,-4276,-4459,-4462,-3021,-3186,-3053,-2727,-2502,-2781,-3893,-4054,-3589,-3532,-4028,-4588,-4277,-4338,-3993,-3187,-4070,-4361,-4532,-4511,-4662,-4548,-3304,-3312,-3382,-3171,-2981,-3054,-3977,-3741,-3580,-3867,-3892,-4562,-4268,-4314,-3808,-3743,-3883,-4222,-4649,-4795,-4476,-4498,-3482,-3398,-3542,-3366,-3174,-3172,-3814,-3854,-3922,-3865,-3959,-4759,-4213,-4269,-3784,-1721,-3076,-4268,-4139,-4752,-4676,-4829,-3585,-3571,-3615,-3572,-3201,-3367,-4170,-4057,-3981,-3990,-3975,-4342,-3842,-3976,-2971,-1506,-3995,-4580,-4599,-4563,-4862,-4709,-3785,-3696,-3674,-3691,-3577,-3317,-4076,-4166,-4234,-4285,-4166,-3892,-2601,-2374,-1940,-1716,-3769,-4873,-4700,-4637,-4685,-4751,-3942,-3880,-3810,-3832,-3777,-3449,-3955,-4047,-4231,-4300,-4083,-3016,-2186,-1305,-1498,-2950,-4192,-4811,-4701,-4882,-4839,-4772,-4096,-3995,-4021,-3951,-3770,-3581,-3888,-4404,-4374,-4694,-4287,-3046,-1656,-872,-1312,-3676,-2224,-4954,-4691,-4867,-4761,-4742,-4206,-4177,-4098,-3977,-3944,-4002,-4357,-4715,-4483,-4894,-4525,-2694,-1692,-1207,-3110,-4225,-4827,-4680,-4681,-4714,-4634,-4697,-4279,-4214,-4189,-4215,-4085,-4337,-4445,-4879,-4764,-4814,-4085,-2398,-2322,-2784,-4005,-4331,-4646,-4719,-3886,-4692,-4535,-4788,-4473,-4305,-4254,-4280,-4069,-4583,-4511,-4561,-4574,-4780,-2750,-2846,-2826,-3781,-3283,-4578,-5132,-4872,-4399,-4649,-4656,-4596,-4465,-4321,-4227,-4138,-4028,-4671,-4593,-4398,-4680,-4770,-2609,-2021,-2871,-3869,-3488,-4618,-4870,-4522,-4380,-4585,-4656,-4606],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
