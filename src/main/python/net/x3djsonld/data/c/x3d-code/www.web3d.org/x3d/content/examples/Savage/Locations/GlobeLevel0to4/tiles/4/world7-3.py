###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,-112.54166465504323,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3209,-2996,-3040,-3255,-3553,-3594,-3692,-3974,-4288,-4065,-4263,-4292,-4193,-3997,-3911,-4058,-3211,-3573,-3756,-3999,-4050,-4006,-3209,-2829,-3113,-2774,-3457,-3635,-3712,-3830,-4648,-4127,-4312,-4126,-4158,-4061,-3984,-3750,-3649,-3498,-3811,-3852,-3756,-4104,-3215,-3223,-2875,-3221,-3516,-3522,-3691,-4104,-4481,-4122,-4299,-4186,-4138,-4051,-3850,-3882,-3746,-3560,-3820,-3806,-3974,-4174,-3356,-3197,-2967,-3212,-3461,-3533,-3692,-4018,-4419,-4422,-4261,-4297,-4199,-4036,-3967,-3886,-3546,-3612,-3780,-4068,-4081,-4176,-3403,-3177,-2998,-3216,-3373,-3601,-3617,-3861,-4045,-4407,-4416,-4023,-4305,-4168,-4001,-3889,-3625,-3681,-3929,-4105,-4098,-4210,-3378,-3326,-2854,-3089,-2942,-3421,-3788,-3831,-3592,-4540,-4536,-4410,-4321,-4092,-3864,-3888,-3722,-3672,-3917,-4171,-3762,-4113,-3503,-3271,-3076,-2936,-3270,-3144,-3485,-3720,-3893,-4692,-4699,-4154,-4217,-3972,-3983,-3988,-3630,-3971,-4082,-4021,-4041,-4051,-3394,-3238,-3180,-3250,-3113,-3352,-3470,-3767,-3868,-4226,-4075,-4551,-4470,-4128,-4089,-3613,-3680,-3914,-3995,-4104,-4061,-4166,-3361,-3478,-3388,-3329,-3293,-3343,-3546,-3571,-3790,-4173,-4046,-4039,-4131,-3909,-4315,-3959,-3987,-4046,-4010,-4090,-4160,-4145,-3538,-3461,-3495,-3347,-3221,-3198,-3169,-3599,-3815,-4245,-3919,-4140,-4092,-3938,-3972,-4106,-4079,-3992,-3975,-4124,-4119,-4147,-4120,-3635,-3445,-3388,-3204,-3074,-3362,-3612,-3807,-4330,-3713,-3768,-3980,-3792,-3650,-3841,-4032,-3956,-3967,-4121,-4111,-4067,-3918,-3526,-3628,-3341,-3196,-3006,-3261,-3596,-3814,-3741,-3132,-3557,-3926,-4009,-3799,-3820,-3940,-3895,-3998,-4109,-4157,-4136,-4110,-3667,-3540,-3324,-3191,-3124,-3251,-3480,-3526,-3971,-3967,-3954,-3982,-3575,-3738,-3748,-3860,-3809,-3993,-4073,-4129,-4070,-4138,-3606,-3486,-3411,-3213,-3207,-3184,-3449,-3508,-3765,-3760,-3933,-3875,-3858,-3779,-3845,-3843,-3899,-4007,-3952,-4120,-4057,-4060,-3973,-3362,-3525,-3555,-3128,-3061,-3472,-3689,-3484,-3676,-3770,-3939,-3537,-3741,-3818,-3822,-3891,-4014,-3988,-4058,-3923,-4046,-3938,-3550,-3483,-3187,-3238,-3122,-3361,-3272,-3362,-3595,-3530,-3650,-3768,-3662,-3778,-3783,-3703,-3799,-3955,-3977,-3819,-4053,-4015,-4155,-3609,-3190,-3489,-3160,-3028,-3126,-3346,-3418,-3951,-3816,-3651,-3744,-3731,-3732,-3758,-3676,-3847,-3972,-3714,-4060,-3915,-4051,-3420,-4055,-3291,-3426,-3449,-2907,-2747,-3614,-3607,-3683,-3717,-3669,-3709,-3591,-3557,-3668,-3747,-3794,-3579,-3998,-4030,-3951,-3977,-3835,-3666,-3510,-3745,-3315,-3210,-3276,-3419,-3489,-3533,-3621,-3653,-3592,-3625,-3615,-3628,-3531,-3326,-4040,-3980,-3893,-3875,-3847,-3777,-3553,-3784,-3565,-3140,-3334,-3383,-3500,-3564,-3574,-3569,-3582,-3514,-3451,-3507,-3305,-3101,-4106,-4024,-3952,-3890,-3914,-3899,-3735,-3587,-3506,-3243,-3403,-3328,-3460,-3444,-3415,-3413,-3411,-3426,-3506,-3495,-3077,-3272,-4113,-4083,-3989,-3931,-3801,-3825,-3708,-3587,-3452,-3212,-3297,-3362,-3361,-3393,-3358,-3386,-3330,-3405,-3452,-3273,-3150,-2980,-4104,-4057,-3847,-3870,-3883,-3768,-3780,-3657,-3515,-3285,-3243,-3344,-3284,-3358,-3326,-3352,-3249,-3333,-3404,-3262,-3630,-359,-4109,-4036,-3850,-3889,-3890,-3747,-3773,-3659,-3508,-3272,-3310,-3314,-3309,-3361,-3303,-3335,-3265,-3409,-3408,-3347,-3644,6],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
