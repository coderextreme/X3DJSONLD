###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore21-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3956292231378735,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[41,38,45,53,59,64,62,60,56,52,48,45,47,53,56,57,55,49,45,40,40,43,48,53,57,60,60,58,56,54,53,50,48,45,42,40,47,42,48,55,60,66,65,64,60,55,50,45,47,53,56,57,55,50,46,41,40,43,48,52,56,60,61,60,59,56,54,50,46,44,42,41,57,54,56,59,61,64,66,65,63,59,54,50,51,54,56,57,55,50,46,43,42,45,50,55,59,62,64,64,63,59,56,52,48,46,45,44,65,64,62,61,61,62,64,65,63,61,58,55,54,55,56,56,55,50,48,45,45,48,52,57,61,64,66,67,67,62,58,54,50,49,48,46,69,67,62,58,56,55,57,60,59,59,59,59,58,57,56,55,53,50,49,48,47,49,52,56,60,63,66,68,67,63,59,56,52,51,49,46,70,67,61,54,51,49,50,53,55,56,59,61,59,56,54,52,50,49,49,49,49,49,51,55,59,63,66,68,67,64,60,57,54,52,50,47,63,60,55,50,46,43,45,48,51,53,53,52,48,43,41,41,41,43,45,48,50,50,52,56,60,64,66,68,68,65,63,60,58,55,53,49,55,52,49,46,42,39,41,44,46,49,47,42,35,27,25,28,30,32,37,43,48,50,54,58,61,65,67,68,69,67,66,64,61,58,55,53,48,45,44,42,39,36,37,40,44,47,43,35,24,12,9,10,11,13,18,29,38,45,52,56,61,66,68,69,70,68,66,64,62,59,57,55,41,40,39,38,35,32,35,38,42,46,41,31,17,1,-4,-5,-6,-5,0,14,27,38,49,55,61,66,69,70,70,68,66,64,61,59,58,57,36,36,35,34,33,32,35,39,43,46,40,29,14,0,-8,-11,-13,-14,-8,4,18,32,46,54,61,66,68,69,69,66,62,59,56,56,56,57,32,33,32,31,31,31,35,41,44,46,40,30,17,1,-6,-13,-17,-18,-13,-2,10,26,43,53,61,65,67,67,66,63,59,55,51,52,53,54,29,31,30,30,29,29,34,39,43,45,41,35,23,9,-1,-12,-18,-19,-16,-7,5,21,40,52,62,65,66,65,64,60,57,52,48,49,48,50,28,29,29,30,29,28,32,38,42,44,44,41,32,17,3,-10,-18,-20,-17,-10,0,16,36,50,61,64,65,64,62,58,55,51,48,46,45,46,27,27,29,31,31,31,34,38,42,45,47,47,37,23,7,-10,-19,-20,-18,-13,-3,10,30,46,59,62,64,62,60,57,56,53,50,47,45,45,27,27,29,33,34,36,38,40,43,47,50,51,41,26,8,-9,-18,-20,-19,-15,-7,5,24,42,56,61,63,59,57,58,58,56,54,51,48,46,29,28,32,35,38,40,42,44,47,49,51,50,40,25,9,-8,-16,-16,-15,-13,-6,5,24,42,56,61,62,58,56,59,62,61,60,57,54,50,32,30,34,38,41,44,46,48,50,50,50,48,37,22,8,-4,-10,-11,-11,-10,-3,8,27,46,59,61,61,56,55,61,66,66,65,63,60,55,32,31,35,39,42,45,47,50,50,50,47,44,35,24,14,4,-1,-4,-6,-6,0,11,31,50,62,61,59,54,53,60,66,67,67,67,65,60,31,32,34,37,40,43,46,49,48,47,44,40,35,30,24,18,11,3,0,-1,3,15,34,53,64,61,57,51,50,57,63,66,67,68,67,62,30,30,32,34,37,40,42,44,44,43,41,39,38,37,36,33,28,18,11,6,9,18,36,54,66,62,58,52,49,53,57,60,63,65,65,60,30,28,28,29,32,36,37,38,39,39,39,40,42,45,47,48,45,37,29,19,17,22,36,54,66,65,61,53,48,49,51,53,55,57,59,56,29,26,24,23,27,31,33,34,36,37,39,40,44,49,53,56,56,53,46,34,29,30,39,54,64,64,62,55,50,48,48,48,50,52,54,53],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
