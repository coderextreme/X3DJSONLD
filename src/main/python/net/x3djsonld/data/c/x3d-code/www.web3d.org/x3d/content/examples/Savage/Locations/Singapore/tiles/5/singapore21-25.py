###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore21-25.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3956292231378735,103.94891185322548,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[4,5,4,3,3,3,2,2,1,0,0,0,2,6,12,17,13,3,0,0,0,0,-2,-7,-13,-22,-29,-33,-36,-36,-36,-36,-36,-36,-36,-36,-35,4,5,4,4,3,3,3,2,2,1,0,0,0,1,4,7,6,1,0,0,0,-1,-5,-13,-22,-29,-34,-35,-36,-36,-36,-36,-36,-36,-35,-34,-32,2,3,4,5,4,3,3,3,2,2,1,0,0,0,1,3,2,0,0,0,-2,-7,-13,-22,-29,-33,-36,-36,-36,-36,-36,-36,-36,-35,-35,-30,-23,1,2,4,5,4,4,3,3,3,2,2,1,0,0,0,0,0,0,0,-1,-6,-14,-22,-29,-34,-35,-36,-36,-36,-36,-36,-36,-35,-34,-31,-23,-13,1,1,2,3,4,4,4,3,3,3,2,2,1,0,0,0,0,0,-2,-7,-13,-22,-29,-33,-36,-36,-36,-36,-36,-36,-36,-35,-35,-30,-23,-11,0,1,1,1,2,3,4,4,4,3,3,3,2,2,1,0,0,0,-1,-6,-14,-22,-29,-34,-35,-36,-36,-36,-36,-36,-36,-35,-34,-31,-23,-13,0,9,1,1,1,1,2,3,4,4,4,3,3,3,2,2,1,0,-1,-6,-14,-22,-29,-33,-36,-36,-36,-36,-36,-36,-36,-35,-35,-30,-23,-11,-1,5,12,1,1,1,1,1,2,3,4,4,4,3,3,3,2,2,0,-4,-13,-22,-29,-33,-35,-36,-36,-36,-36,-36,-35,-35,-34,-32,-23,-13,0,9,10,12,1,1,1,1,1,1,2,3,4,4,4,3,3,3,2,1,-6,-20,-29,-33,-36,-36,-36,-36,-36,-36,-36,-35,-34,-29,-23,-11,-1,5,12,12,12,1,1,1,1,1,1,1,2,3,4,4,4,3,3,2,0,-9,-25,-33,-35,-36,-36,-36,-36,-36,-35,-35,-34,-31,-22,-13,0,9,10,12,12,12,1,1,1,1,1,1,1,1,2,3,4,4,4,3,0,-4,-15,-29,-36,-36,-36,-36,-36,-36,-36,-35,-34,-29,-23,-11,-2,5,12,12,12,11,9,1,1,1,1,1,1,1,1,1,2,3,4,4,3,-2,-11,-21,-31,-36,-36,-36,-36,-36,-35,-35,-34,-31,-22,-13,0,8,10,12,12,12,9,7,1,1,1,1,1,1,1,1,1,1,2,3,4,3,-5,-19,-27,-33,-36,-36,-36,-36,-36,-35,-34,-29,-23,-11,-2,6,12,12,12,11,10,8,5,0,1,1,1,1,1,1,1,1,1,1,2,3,2,-7,-24,-33,-35,-36,-36,-36,-35,-35,-34,-31,-22,-12,0,7,10,12,12,12,9,7,5,4,0,0,1,1,1,1,1,1,1,1,1,1,1,0,-9,-24,-32,-34,-36,-36,-36,-35,-33,-29,-23,-11,-2,6,12,12,11,11,10,8,5,4,3,-1,0,0,1,1,1,1,1,1,1,1,0,0,-1,-9,-20,-28,-33,-35,-35,-35,-34,-30,-22,-12,0,7,9,12,11,11,9,7,5,4,3,3,-1,-1,0,0,1,1,1,1,1,1,1,0,0,-1,-7,-16,-24,-31,-34,-35,-34,-30,-23,-12,-2,6,12,12,11,11,10,8,5,4,3,2,2,-1,-2,-1,0,0,1,1,1,1,1,1,1,0,0,-3,-11,-19,-27,-33,-33,-30,-22,-12,0,7,9,12,11,11,9,7,5,4,3,3,1,0,0,-2,-1,-1,0,0,1,1,1,1,1,1,1,0,-1,-6,-13,-22,-27,-27,-23,-12,-2,6,12,12,11,11,9,7,5,4,3,2,2,0,-1,1,0,-1,-2,-1,0,0,1,1,1,1,1,1,0,0,-1,-6,-14,-18,-17,-11,0,6,9,12,11,11,9,7,5,4,3,3,1,0,-1,-4,2,1,0,-2,-1,-1,0,0,1,1,1,1,1,1,1,0,-1,-7,-8,-6,-1,6,12,12,11,11,9,7,5,4,3,2,2,0,-1,-4,-5,3,2,1,0,-1,-2,-1,0,0,1,1,1,1,1,1,0,0,-1,0,3,6,9,12,11,11,9,7,5,4,3,3,1,0,-2,-4,-4,-4,5,3,2,1,0,-2,-1,-1,0,0,1,1,1,1,1,1,1,1,4,8,10,11,11,11,9,7,5,4,3,2,2,0,-1,-4,-5,-4,-3],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
