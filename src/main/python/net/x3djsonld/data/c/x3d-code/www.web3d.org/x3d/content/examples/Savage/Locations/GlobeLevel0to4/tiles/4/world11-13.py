###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[612,156,197,80,72,39,15,13,4,4,-18,-37,-39,-63,-101,-141,-604,-50,927,-1107,-2074,-4034,457,82,133,54,35,22,38,79,5,4,-23,-37,-45,-73,-109,-145,-239,-66,991,-719,-832,-1520,257,117,231,45,30,24,57,13,1,-19,-27,-40,-61,-93,-111,-152,-34,1,322,126,-108,-1065,572,214,79,44,32,25,19,8,1,-25,-24,-50,-72,-93,765,-118,-124,37,555,-86,451,-51,1426,690,80,52,39,30,21,9,-1,-29,-28,-65,-82,-88,-9,-54,-107,-79,4,9,9,948,665,274,158,61,49,45,24,1,-4,-30,-44,-75,-89,-2,34,-3,-78,-116,-14,844,148,-1,753,126,94,72,47,33,66,18,-214,-34,-54,-75,-90,-32,5,4,-14,-125,-135,-79,416,355,716,540,85,58,47,37,121,139,-43,-37,-54,-71,-80,-48,39,685,92,-164,-147,-152,66,192,424,1188,983,57,45,76,275,150,34,-31,-50,-73,-86,-49,-37,442,411,-950,-1431,-604,-47,-280,1089,1169,1137,60,36,147,420,100,6,-26,-45,-91,-80,-21,55,140,190,-312,-1983,-1646,-173,-356,1027,1547,903,46,34,22,20,4,92,329,3,-70,-56,-3,62,267,259,-460,-2145,-1800,-294,-1505,1576,778,1410,49,27,16,9,-7,14,71,6,-46,-43,-7,-10,279,781,-922,-2158,-2118,-508,-1516,1892,791,788,55,20,12,2,3,-73,-9,-68,-17,-7,28,125,144,269,-1854,-1502,-2426,-2290,-633,1692,1115,434,81,15,8,-25,-33,-94,-7,-41,-58,-47,6,93,390,-1091,-1665,-1700,-2408,-2699,-773,1605,1456,1863,240,10,5,-42,-68,-182,81,-14,-20,-63,22,304,574,-1423,-1361,-3037,-3023,-2175,-1119,1149,1125,1578,926,44,9,2,5,-200,-15,33,-23,-13,13,437,-52,-1538,-2303,-2763,-3021,-2221,-1307,1133,1357,961,897,1250,23,35,115,-38,-136,244,22,35,39,797,288,-468,-1810,-3019,-3119,-3185,-453,1016,1441,1736,1417,493,81,317,231,161,-111,1,256,245,646,795,1736,323,-2008,-3269,-3428,-3212,-3179,1922,1463,1475,1035,974,617,421,639,281,-13,2,243,433,305,391,1705,1261,-526,-3265,-3448,-3422,-3535,1507,1853,1360,1357,1608,1004,729,898,232,172,7,33,484,332,523,582,1441,-137,-3083,-3399,-3461,-3546,1422,1470,1471,1486,1394,1644,1016,888,680,290,37,42,425,812,674,911,1067,164,-2117,-3066,-3455,-3422,1244,1236,1241,1210,1410,1442,1107,848,556,433,118,76,342,348,616,856,1445,448,-29,-991,-2725,-2931,950,1100,1100,1156,1280,1333,1236,639,422,330,264,102,232,390,319,896,794,135,410,-217,10,113,943,1090,1012,1149,1262,1321,1063,632,402,311,250,125,302,388,309,632,584,315,301,-47,58,715],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
