###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,157.4583433915838,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4172,-3486,-2862,-4179,-5457,-5815,-5967,-6038,-6027,-5954,-5976,-6125,-5702,-5575,-5849,-4571,-5335,-5296,-5373,-5612,-5091,-5138,-4713,-3344,-2508,-4120,-5306,-5794,-6094,-6152,-6211,-6038,-5991,-5998,-5671,-5097,-5665,-3919,-5258,-5442,-5422,-5479,-5298,-5275,-5093,-4137,-2759,-4008,-4895,-5817,-6083,-6169,-6257,-6160,-6085,-5851,-5752,-5651,-5350,-4520,-4929,-4775,-5098,-5219,-5056,-4869,-5498,-4524,-3507,-3751,-4275,-5718,-6114,-6212,-6173,-6080,-6018,-5772,-5727,-5324,-4911,-5171,-5109,-2993,-2871,-2597,-3827,-2856,-5635,-4915,-3892,-3185,-4144,-5363,-5907,-6011,-6135,-5981,-6018,-5749,-5577,-5713,-4824,-5322,-4212,-3035,-3279,-2871,-3207,-2595,-5458,-5030,-4173,-3644,-3897,-4971,-5767,-5521,-5976,-5915,-5755,-5689,-5523,-5555,-3590,-5215,-3252,-3822,-4333,-3990,-3286,-3042,-5406,-5137,-4996,-4762,-4437,-4505,-5688,-6011,-5953,-5831,-5662,-5633,-5492,-5162,-1835,-4562,-3874,-3837,-4790,-3906,-3598,-3193,-5258,-4882,-4350,-4693,-4090,-4318,-5361,-5717,-5976,-5793,-5675,-5617,-5464,-5098,-341,-4975,-4331,-5022,-4911,-4465,-3704,-4292,-5469,-4738,-3377,-4350,-4754,-4302,-4962,-5528,-5716,-5765,-5444,-5418,-5428,-5378,-3852,-4655,-5097,-5086,-4949,-4706,-3788,-4089,-5616,-4695,-3386,-4468,-5122,-4751,-4648,-5557,-5568,-5420,-5404,-4998,-5015,-5091,-4599,-5431,-5246,-5069,-3561,-2961,-4026,-3985,-5380,-5264,-3921,-4677,-4865,-4457,-3649,-4614,-5180,-4812,-4921,-5030,-4806,-5231,-3027,-5556,-5260,-5185,-4184,-3549,-4363,-4609,-5751,-5545,-4933,-4622,-4745,-4712,-3968,-4918,-5137,-4177,-5251,-5157,-5252,-5268,-5524,-5741,-5402,-5562,-3807,-3912,-4847,-5112,-5819,-5646,-5500,-5329,-4727,-4139,-3167,-4997,-5178,-5435,-5308,-5293,-5360,-1284,-5938,-5744,-5406,-5173,-3967,-4393,-5046,-5395,-5831,-5668,-5573,-5538,-5278,-4457,-4076,-4888,-4981,-5508,-5322,-5613,-5608,-5970,-5909,-5865,-5562,-5139,-4310,-4919,-5349,-5529,-5732,-5613,-5501,-5585,-5416,-5126,-4595,-5023,-4313,-5639,-5239,-5577,-5646,-6328,-6018,-5772,-5507,-5241,-4854,-5311,-5457,-5505,-5656,-5621,-5522,-5558,-5553,-5279,-4817,-5008,-5126,-3891,-5682,-5334,-5951,-6162,-5771,-5739,-5107,-4656,-5072,-5435,-5576,-5537,-5511,-5614,-5404,-5534,-5536,-5412,-5195,-4723,-4299,-5181,-5264,-5546,-5637,-6220,-6212,-5721,-4571,-4496,-5400,-5547,-5589,-5653,-5550,-5523,-5560,-5513,-5536,-5505,-5550,-4802,-5461,-5614,-5415,-5584,-5987,-1849,-6183,-5057,-4384,-5049,-5620,-5594,-5668,-5132,-5539,-5613,-5552,-5668,-5588,-5650,-5470,-5023,-5255,-5571,-5595,-5673,-5700,-2617,-5985,-4968,-4856,-5428,-5662,-5760,-5372,-4780,-5669,-5552,-5507,-5801,-5641,-5629,-5433,-5000,-4695,-5373,-5560,-5569,-5397,-1829,-5522,-5354,-5349,-5597,-5631,-5535,-4911,-5564,-5502,-5468,-5692,-5674,-5688,-5699,-5568,-5115,-4404,-5350,-5424,-5412,-5577,-3469,-5878,-4335,-4817,-5325,-5600,-5809,-5471,-5542,-5379,-5572,-5379,-5596,-5578,-5601,-5491,-5120,-4955,-5119,-4956,-5020,-5455,-1072,-5759,-5736,-4752,-5513,-5811,-5770,-5634,-6276,-5439,-5558,-5401,-5375,-5424,-5655,-5674,-5577,-5404,-4671,-4826,-4951,-5042,-1694,-5812,-5212,-5142,-5702,-6032,-5464,-5683,-5754,-5442,-5550,-5399,-5380,-5352,-5528,-5369,-5567,-5429,-4679,-4836,-4902,-5180,-1489,-5763,-5016,-5271,-5696,-5651,-5589,-5672,-5925],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
