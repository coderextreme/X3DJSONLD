###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5397,-5203,-5340,-5249,-4947,-5117,-4498,-5001,-5324,-5239,-5314,-5128,-5151,-5061,-5019,-5164,-5063,-4860,-4822,-4804,-4828,-4916,-5211,-5202,-5267,-5163,-5261,-5184,-4792,-5415,-5276,-5261,-5195,-5032,-5266,-5207,-5099,-5010,-4823,-4937,-4851,-4867,-4960,-4824,-5260,-5289,-5260,-5136,-5194,-5310,-5188,-5129,-5408,-5324,-5135,-5268,-5335,-5307,-5116,-5175,-4610,-4840,-4915,-4935,-4946,-4796,-5315,-4783,-5189,-5345,-4990,-5227,-5366,-5359,-5273,-5357,-5264,-5298,-5279,-5415,-5002,-5010,-4672,-4858,-4963,-4999,-5020,-5081,-5505,-5453,-5156,-5125,-5189,-5239,-5321,-5360,-5480,-5478,-5372,-5096,-5469,-5195,-4914,-4946,-4933,-4964,-4984,-4946,-4953,-4964,-5543,-5425,-4985,-5176,-5210,-5279,-5410,-5366,-5379,-5278,-5409,-5334,-5107,-4922,-4977,-4737,-4908,-4768,-4966,-4972,-4950,-4928,-5613,-5378,-5301,-5337,-5363,-5503,-5544,-5020,-5358,-5272,-5279,-5242,-5197,-5565,-5198,-4790,-4880,-5001,-4908,-4974,-4924,-4649,-5506,-4847,-5335,-5485,-5467,-5669,-5445,-5354,-5219,-5302,-5405,-5282,-5181,-5032,-4856,-4868,-4861,-4856,-4722,-4726,-4769,-4730,-5530,-5755,-5712,-5686,-5582,-5891,-5784,-5206,-5067,-5359,-5297,-5293,-5159,-5063,-4987,-4987,-4831,-4814,-4684,-4705,-5013,-4838,-5648,-5674,-5602,-5738,-5507,-5644,-5589,-5330,-5505,-5725,-5313,-4979,-5063,-4918,-4998,-4931,-4878,-4773,-4661,-4688,-4838,-4751,-5609,-5617,-5528,-5576,-5821,-5788,-5506,-5311,-5226,-5275,-5228,-5407,-5753,-4990,-4976,-4971,-4860,-4726,-4739,-4866,-4935,-4594,-5529,-5483,-5558,-5524,-5789,-5671,-5568,-5360,-5350,-5415,-5346,-5372,-5339,-5390,-5803,-4824,-4633,-4841,-4794,-4939,-4917,-4858,-5452,-5332,-5279,-5335,-5569,-5560,-5500,-5277,-5285,-5301,-5513,-5487,-5517,-5434,-5453,-5306,-5547,-5027,-4861,-4854,-5043,-4860,-5217,-5026,-5034,-5241,-5291,-5510,-5480,-5343,-5178,-5530,-5367,-5440,-5487,-5465,-5428,-5389,-5401,-5298,-5526,-5240,-4841,-4849,-5288,-4989,-4981,-5011,-5208,-5292,-5408,-5293,-5312,-5286,-5120,-5152,-5578,-5432,-5516,-5509,-5507,-5373,-5216,-5308,-5560,-5576,-4492,-4831,-4831,-5032,-5121,-5255,-5260,-5391,-5473,-5345,-5376,-5277,-5387,-5213,-5497,-5546,-5540,-5527,-5309,-5147,-5140,-4808,-4650,-4931,-5102,-5035,-4934,-5217,-5264,-5363,-5491,-5416,-5368,-5279,-5445,-5241,-5489,-5492,-5548,-5661,-5328,-5274,-5252,-5116,-4270,-4637,-4980,-5127,-5048,-5234,-5304,-5319,-5302,-5718,-5438,-5336,-5359,-5480,-5538,-5471,-5413,-5477,-5225,-5322,-5339,-5336,-4445,-4619,-4569,-5332,-5107,-5265,-5357,-5437,-5482,-5459,-5273,-5358,-5415,-5421,-5467,-5460,-5488,-5419,-5309,-5262,-5381,-5157,-3076,-4667,477,-5531,-5167,-5121,-5322,-5445,-5422,-5513,-5302,-5407,-5389,-5398,-5482,-5513,-5474,-5368,-5274,-5232,-5177,-5408,-4030,-4778,2488,-4387,-5109,-5313,-5286,-5402,-5384,-5471,-5466,-5542,-5565,-5493,-5492,-5485,-5489,-5199,-5197,-5291,-4980,-5203,-4326,-3161,-1746,-5517,-5142,-5218,-5233,-5376,-5398,-5422,-5448,-5342,-5525,-5594,-5574,-5501,-5382,-5133,-5109,-5198,-5153,-5180,-2445,-51,-2969,-5444,-4778,-5103,-5138,-5272,-5380,-5382,-5456,-5424,-5577,-5583,-5417,-5411,-5349,-5143,-5218,-5231,-5304,-5422,-1896,57,-3601,-5431,-4811,-5013,-5169,-5360,-5313,-5331,-5497,-5403,-5539,-5602,-5458,-5399,-5337,-5163,-5194,-5210,-5254,-5400],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
