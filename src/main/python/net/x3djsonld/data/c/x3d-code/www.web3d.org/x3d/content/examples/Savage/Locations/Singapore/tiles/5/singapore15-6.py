###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.67601420477412,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[46,48,51,53,55,57,57,56,53,49,46,46,49,50,47,44,40,38,37,36,33,31,29,28,29,29,31,31,29,27,25,24,24,24,24,24,45,46,49,51,54,56,58,57,56,53,50,51,53,52,48,44,40,39,41,40,37,34,32,32,34,35,36,37,34,31,27,25,24,24,24,24,44,46,48,49,51,53,56,57,57,55,52,53,55,55,51,47,43,44,48,48,42,38,36,37,39,41,43,42,39,35,30,26,25,25,25,24,44,46,48,48,48,50,53,55,55,53,52,53,56,56,53,51,49,52,58,56,47,41,40,41,45,48,48,47,42,37,32,28,27,27,26,25,43,46,48,46,45,46,49,50,50,50,49,52,56,57,55,53,53,55,61,59,50,44,43,44,48,51,51,48,43,36,31,27,26,26,25,24,42,45,47,46,43,43,43,44,44,45,46,50,56,57,55,54,54,56,60,58,51,46,44,45,48,50,50,47,40,33,28,25,24,24,23,23,41,44,46,44,40,39,39,40,41,42,44,49,55,57,54,53,53,55,59,58,53,48,47,46,47,47,46,43,36,30,26,24,23,22,22,22,42,43,44,41,37,35,36,38,40,42,44,49,55,56,52,50,50,53,58,59,55,52,49,47,45,43,41,37,32,28,25,24,22,21,21,21,41,40,39,37,34,34,35,37,40,42,45,50,57,57,51,49,48,50,56,58,56,53,50,47,43,40,38,35,31,28,26,25,23,22,22,21,40,36,33,32,33,34,36,38,40,43,48,53,58,57,51,48,46,48,55,57,55,52,49,46,43,40,37,35,33,31,29,28,26,25,24,24,38,33,29,30,33,37,40,41,42,44,48,53,57,55,50,47,45,47,53,55,53,51,48,45,42,39,37,35,34,33,32,31,29,28,27,27,36,31,29,32,36,41,45,45,45,45,46,49,52,52,49,46,44,45,50,52,51,50,46,43,41,39,37,35,35,35,34,33,32,31,30,30,34,30,29,33,39,44,47,47,46,46,46,47,50,50,48,45,43,43,47,49,49,48,44,42,41,39,38,37,37,37,35,34,34,33,33,32,34,30,30,34,40,44,46,47,47,47,47,48,49,48,46,44,41,41,43,45,45,44,42,40,40,40,41,41,40,38,36,34,34,34,34,33,35,31,30,33,38,41,42,44,45,46,47,47,47,47,47,46,44,43,44,44,44,42,40,39,40,41,44,44,43,40,36,34,34,34,34,33,38,32,29,30,33,34,36,38,40,42,44,44,44,46,49,51,52,52,50,48,44,41,39,39,39,42,46,47,46,42,38,34,33,33,33,33,39,33,28,28,29,30,30,32,35,37,39,40,40,43,49,54,57,58,56,52,46,42,40,39,40,43,47,49,47,43,38,34,32,32,32,32,37,32,28,27,27,27,27,26,27,29,33,35,36,40,45,51,58,62,61,57,51,46,42,41,42,44,47,48,47,43,38,34,33,33,32,31,37,33,30,29,28,27,26,24,23,24,28,31,33,37,41,48,57,61,62,60,54,50,45,42,42,43,46,47,46,43,38,34,33,33,32,31,37,35,33,33,33,31,29,26,24,24,25,28,31,35,38,44,52,56,57,58,57,54,49,44,39,39,42,45,46,44,39,35,33,31,31,31,36,35,34,35,36,35,33,29,26,24,24,26,29,32,34,39,45,49,53,56,58,58,52,45,38,36,39,43,45,45,41,37,33,31,31,30,33,31,31,34,36,37,36,34,30,27,24,24,25,27,30,33,37,42,49,54,58,58,53,46,38,34,37,42,47,48,45,40,35,31,31,30,31,28,28,30,33,35,36,35,32,28,25,24,25,25,27,29,31,37,45,52,58,59,54,47,38,34,36,41,47,49,47,41,35,31,30,30],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
