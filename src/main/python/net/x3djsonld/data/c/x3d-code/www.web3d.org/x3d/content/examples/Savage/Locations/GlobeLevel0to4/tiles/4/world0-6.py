###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world0-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-90.0416666667,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2716,2716,2717,2717,2717,2717,2717,2718,2718,2719,2720,2720,2721,2722,2723,2723,2725,2725,2726,2727,2728,2729,2659,2658,2658,2657,2656,2656,2656,2655,2655,2655,2655,2656,2655,2656,2656,2656,2657,2658,2659,2660,2661,2662,2622,2620,2616,2613,2610,2607,2603,2600,2599,2597,2594,2592,2590,2589,2588,2588,2587,2587,2586,2587,2587,2589,2509,2504,2500,2497,2494,2490,2488,2485,2485,2484,2485,2487,2491,2495,2498,2501,2504,2509,2515,2521,2526,2531,2357,2356,2354,2352,2351,2349,2348,2348,2349,2350,2353,2359,2366,2376,2387,2398,2409,2422,2435,2448,2460,2468,2232,2235,2238,2240,2242,2243,2243,2243,2243,2243,2244,2247,2251,2259,2269,2283,2293,2302,2311,2320,2330,2337,2077,2093,2101,2112,2122,2131,2140,2148,2155,2162,2168,2174,2179,2186,2194,2201,2212,2228,2245,2264,2282,2293,1922,1939,1953,1968,1985,2000,2017,2040,2063,2085,2100,2111,2123,2134,2143,2151,2163,2180,2199,2228,2271,2294,1768,1779,1789,1800,1817,1844,1881,1906,1936,1974,2002,2037,2074,2100,2116,2129,2137,2145,2159,2180,2204,2235,1630,1665,1700,1720,1744,1767,1790,1814,1866,1907,1942,1970,1995,2017,2045,2069,2086,2100,2118,2141,2169,2190,1445,1498,1549,1599,1665,1714,1737,1743,1753,1781,1809,1860,1901,1932,1962,1988,2005,2028,2054,2088,2111,2131,1234,1298,1406,1460,1499,1539,1584,1621,1657,1684,1699,1715,1739,1768,1794,1815,1842,1865,1889,1903,1923,1945,1027,1053,1091,1175,1372,1466,1493,1500,1528,1569,1602,1632,1656,1671,1686,1695,1701,1715,1732,1748,1768,1786,668,646,639,662,805,1247,1416,1475,1489,1496,1511,1536,1569,1597,1613,1632,1645,1655,1663,1672,1681,1685,-7,104,290,558,732,1021,1216,1323,1376,1398,1410,1425,1443,1466,1490,1501,1531,1574,1602,1624,1640,1650,1,1,0,175,600,862,991,1085,1098,1151,1236,1315,1349,1384,1438,1493,1491,1463,1421,1412,1459,1514,0,1,0,1,233,341,513,627,757,793,805,807,814,841,912,979,1032,1081,1127,1172,1208,1242,1,1,0,1,0,0,29,55,111,288,306,301,323,476,542,695,998,1004,1058,1099,1115,1136,4,1,0,1,0,1,1,1,1,0,1,1,23,197,363,940,1241,1473,1287,1396,1250,1312,597,449,0,1,0,1,1,0,0,1,1,1,1,0,0,71,327,325,400,505,540,608,744,634,286,1,0,1,0,0,0,0,1,1,0,0,172,379,561,587,593,592,609,610,527,470,1,1,0,0,0,1,0,0,81,259,240,222,254,326,506,664,804,967,1091,1108,449,473,0,1,1,0,1,0,0,17,271,301,280,236,267,317,436,586,758,932,1098,1156],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
