###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[753,-62,-117,-141,-464,-2850,-3144,-3730,-4058,-4147,-4276,-4550,-4930,-5224,-5285,-5442,-5468,-5563,-5608,-5070,-5592,-5012,558,-2,15,-75,-99,-2626,-3128,-3746,-4006,-4194,-4283,-4431,-4987,-4919,-5203,-5223,-5354,-5555,-5635,-5511,-4942,-5215,862,500,1105,34,-51,-937,-2766,-3534,-4015,-4243,-4398,-4662,-4535,-4771,-5184,-5472,-5429,-5593,-5565,-5347,-5323,-5115,1052,1181,365,445,3,-154,-2630,-3560,-3739,-4344,-4489,-4559,-4429,-4650,-5207,-5311,-5294,-5527,-5536,-5342,-5969,-4715,847,992,460,131,12,-1006,-2605,-3637,-4140,-4270,-4476,-4350,-4481,-4674,-5031,-5260,-5196,-5445,-5451,-4952,-4337,-4983,789,1032,875,477,95,-1170,-2393,-2939,-3956,-3656,-2762,-3445,-4293,-4672,-4905,-5117,-5221,-5278,-5448,-5054,-5042,-4976,803,868,795,1169,523,-12,-2249,-1452,-2404,-800,-815,-4339,-4200,-4290,-4873,-1917,-5146,-5432,-5736,-5315,-5211,-5062,674,851,742,697,435,-105,-1857,-2054,-3581,-3941,-4152,-4073,-4105,-4214,-4551,-5053,-5185,-5381,-5609,-5552,-5057,-5086,703,762,608,581,192,15,-63,-1804,-3790,-4039,-4189,-4155,-4068,-4321,-4731,-4932,-5112,-5313,-5492,-4952,-5293,-5358,597,758,709,221,257,75,-44,0,-3708,-4147,-4160,-4253,-4162,-4349,-4680,-5030,-4957,-5213,-5586,-4978,-5656,-5266,599,671,809,724,947,81,-32,-234,-3754,-3830,-4223,-4353,-4365,-4440,-4707,-5013,-5117,-5390,-5658,-5565,-5446,-4962,758,1121,927,368,340,128,-105,-57,-3775,-3257,-4275,-4404,-4499,-4623,-4738,-4987,-5233,-5482,-5556,-5662,-5627,-5552,725,676,622,1123,416,195,-4,-2144,-3811,-3648,-4416,-4459,-4514,-4802,-4857,-4998,-5180,-5228,-5214,-5306,-5375,-5088,516,834,1278,358,801,619,-27,-2063,-1947,-3944,-4315,-4494,-4602,-4854,-4910,-5029,-5272,-5384,-5532,-5327,-5410,-4345,638,756,976,404,734,614,-20,-3115,-4155,-4229,-4310,-4525,-4573,-4780,-4960,-5042,-5308,-5504,-5612,-4942,-5434,-4938,603,615,659,528,718,152,40,-580,-4074,-4269,-4402,-4555,-4683,-4691,-4957,-5136,-5425,-5563,-5989,-5592,-5445,-5405,687,481,510,1043,726,276,4,-3582,-4018,-4407,-4472,-4524,-4622,-4686,-4896,-5241,-5324,-5321,-6054,-5207,-5031,-4759,754,741,480,839,845,515,3,-3595,-4205,-4426,-4477,-4525,-4673,-4649,-5109,-5274,-5221,-5534,-5278,-5228,-5449,-5467,837,599,489,620,513,792,-23,-3527,-4229,-4492,-4566,-4589,-4627,-4705,-5098,-5272,-5235,-5117,-5338,-5358,-5430,-5256,805,710,456,717,437,340,2,-3360,-4167,-4444,-4637,-4559,-4581,-4761,-5144,-5321,-5055,-5428,-5224,-5386,-5282,-5318,726,671,449,606,602,708,7,-3094,-4085,-4374,-4458,-4455,-4717,-4972,-5441,-5387,-5590,-5486,-5449,-5133,-5285,-5134,758,729,431,604,458,657,55,-2582,-3844,-4349,-4559,-4735,-4517,-5303,-5131,-5557,-5669,-5383,-5024,-4598,-5508,-5456,731,786,558,883,462,238,216,-25,-3496,-4188,-4481,-4528,-4582,-5184,-5362,-5605,-5543,-5439,-5645,-5905,-5539,-5079,729,777,453,1176,417,247,155,7,-3382,-4148,-4500,-4482,-4608,-5278,-5144,-5586,-5534,-5435,-5605,-5728,-5587,-5130],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
