###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore31-22.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4829463469178132,103.90582275083842,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[49,52,55,55,54,51,48,44,39,35,33,34,37,40,42,45,46,46,45,46,48,49,47,44,39,35,35,36,39,42,44,45,42,39,35,31,47,51,54,55,54,51,47,43,39,35,33,35,38,41,44,47,50,50,49,48,50,50,47,44,40,37,36,37,40,43,45,45,43,40,35,31,44,48,52,53,52,50,46,42,39,37,36,38,40,42,45,48,51,51,51,51,52,51,49,46,42,39,38,39,42,45,46,46,44,41,37,33,42,46,49,50,50,48,44,41,39,39,39,40,42,43,46,49,51,52,53,53,54,53,50,47,44,41,40,40,43,46,48,48,46,44,39,35,40,43,45,46,45,42,40,39,38,38,40,42,44,45,46,48,50,52,54,54,54,53,50,47,43,41,40,41,44,46,49,50,49,46,41,36,40,41,41,40,40,38,36,36,37,39,41,43,45,46,47,48,49,51,54,56,55,53,50,46,43,41,40,41,44,47,50,52,51,48,43,37,40,39,38,38,37,35,35,36,38,40,43,45,47,48,49,50,51,52,55,56,54,52,49,46,44,42,41,42,45,47,49,51,51,49,43,37,39,38,36,35,34,34,34,37,39,41,44,47,49,50,51,52,52,54,55,55,54,51,48,46,45,44,43,43,45,47,48,49,51,49,43,36,38,38,37,36,35,34,34,37,39,42,44,47,49,50,51,52,53,54,56,55,53,52,50,48,47,46,45,44,45,45,46,47,48,47,42,37,36,37,37,36,35,34,34,37,39,42,44,46,48,50,51,52,53,54,55,55,53,52,51,50,49,48,46,45,44,44,44,45,45,44,41,37,36,37,37,36,35,34,35,37,40,42,43,46,48,50,51,52,54,54,55,54,52,51,51,50,48,47,45,45,44,44,44,43,43,42,39,36,36,37,37,36,35,35,36,38,40,42,43,46,48,50,51,53,55,55,55,54,52,51,51,49,47,45,44,44,44,43,42,42,41,40,37,33,37,38,38,37,36,36,37,39,41,43,44,46,48,50,52,53,55,54,53,52,50,50,49,48,45,44,43,43,43,42,41,40,40,38,36,33,38,39,39,38,37,38,39,40,42,43,44,46,48,50,52,54,55,54,52,51,49,48,48,46,43,41,41,41,42,41,40,39,38,36,34,33,38,39,39,39,38,38,39,40,42,44,45,46,47,49,50,51,51,51,50,49,48,47,45,43,40,38,39,40,41,41,40,39,37,35,33,31,38,39,40,40,40,39,39,40,42,44,45,45,45,46,48,48,48,47,47,47,47,46,43,40,37,36,37,39,40,40,39,38,36,33,31,29,39,39,39,39,39,39,39,41,44,45,45,45,44,44,45,45,44,44,44,43,43,42,39,36,34,34,35,37,39,39,38,37,35,32,30,27,41,40,38,37,37,38,40,43,46,47,46,44,42,42,42,41,40,40,40,39,38,36,35,33,32,32,33,35,37,38,37,35,33,31,28,25,41,40,39,37,36,38,41,44,47,48,47,44,41,39,39,38,37,37,36,35,34,33,33,31,28,28,29,31,33,35,35,34,32,30,27,25,41,41,40,37,36,38,42,46,49,49,47,44,41,38,36,35,35,33,32,31,31,31,31,29,25,23,24,25,30,32,33,33,31,29,28,26,40,39,38,35,34,36,40,43,45,45,44,42,40,37,35,34,33,32,31,31,31,30,29,28,24,22,21,22,26,28,30,31,30,28,27,26,36,35,35,32,31,33,36,38,39,39,40,40,39,38,36,34,32,32,31,31,31,30,28,27,25,23,21,20,22,24,26,28,28,27,26,25],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
