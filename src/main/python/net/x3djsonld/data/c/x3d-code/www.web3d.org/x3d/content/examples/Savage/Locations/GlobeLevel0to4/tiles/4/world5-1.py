###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5318,-5432,-5339,-5350,-5344,-5291,-5316,-5081,-5238,-5183,-4988,-5047,-5129,-5058,-5185,-5255,-4848,-4764,-5093,-4721,-4509,-4643,-5295,-5332,-5297,-5257,-5242,-5261,-5297,-5236,-5058,-5083,-5098,-5208,-5298,-5264,-4611,-4873,-4735,-4781,-4770,-4684,-4682,-4592,-5360,-5350,-5273,-5203,-5230,-5156,-5236,-5313,-5234,-4906,-4978,-4928,-5216,-5539,-4996,-4481,-4728,-4826,-4734,-4619,-4558,-4622,-4336,-5366,-5302,-5304,-5175,-5106,-5151,-5130,-5038,-4716,-4922,-4828,-4668,-5181,-4889,-4954,-4907,-4786,-4639,-4511,-4699,-4495,-5409,-5523,-5250,-5241,-5186,-5204,-5117,-5148,-5107,-4693,-5156,-4820,-4735,-5010,-5051,-4963,-4838,-4666,-4761,-4529,-4514,-4226,-5381,-5476,-5304,-5249,-5259,-5185,-5137,-4599,-4303,-4540,-5164,-5125,-4784,-4716,-4850,-4968,-4724,-4423,-4140,-4490,-4368,-4232,-5163,-5397,-5256,-5292,-5131,-5215,-5203,-4559,-4613,-3928,-5071,-4747,-5094,-4973,-4816,-4944,-4505,-4646,-3638,-4374,-4209,-4099,-4915,-5456,-5310,-5328,-5162,-5065,-4884,-4967,-4664,-4924,-5243,-4896,-4815,-4883,-4735,-4304,-4408,-3134,-3818,-4236,-4186,-4350,-5127,-5136,-5225,-5112,-5160,-5005,-5149,-4696,-4684,-4646,-4764,-4741,-4743,-4884,-4770,-4461,-4447,-4091,-4042,-4108,-4200,-4277,-5341,-5370,-5169,-5034,-5085,-5157,-5065,-4326,-4476,-4626,-4711,-4966,-4755,-4873,-4537,-4302,-4333,-4345,-4231,-4066,-3954,-4217,-4883,-4844,-5107,-5054,-5169,-4996,-5072,-3921,-4186,-4557,-4751,-4939,-4516,-4753,-4439,-3989,-4152,-4412,-4287,-4250,-4350,-4221,-4750,-5114,-5116,-5163,-5230,-5148,-4838,-4380,-4642,-4641,-4419,-4814,-4321,-4341,-4303,-4074,-2765,-3900,-4095,-4206,-4239,-4215,-5200,-5097,-5228,-5211,-5100,-5005,-4244,-4110,-4542,-4655,-4379,-4218,-4362,-3797,-3641,-3533,-3660,-4395,-4293,-4301,-4206,-4233,-5186,-5105,-5180,-5255,-5066,-5287,-4047,-3244,-4870,-4659,-3370,-4335,-4620,-1423,-3047,-3429,-3830,-4291,-4320,-4245,-4140,-4150,-5285,-5001,-5086,-5284,-5095,-4561,-3175,-3992,-4624,-4405,-3736,-3339,-1267,-1185,-3487,-3805,-4026,-4492,-4238,-4236,-4276,-4180,-5134,-5038,-5229,-5151,-5075,-4657,-4319,-4505,-4441,-4147,-2243,-3310,-3539,-2831,-3807,-4055,-4239,-4274,-4332,-4451,-4140,-4272,-5274,-5202,-5196,-4888,-4946,-4636,-4622,-4534,-4272,-4117,-2920,-2830,-2648,-4075,-3728,-4197,-4487,-4313,-4348,-4330,-4238,-4303,-5132,-5084,-5118,-4656,-5016,-4758,-4682,-4700,-4532,-3843,-2041,-3975,-3928,-3788,-4115,-4342,-4402,-4416,-4243,-4286,-4245,-4272,-5000,-4925,-4947,-4585,-4928,-4537,-4279,-4444,-4706,-4578,-2938,-4001,-4307,-4522,-4337,-4408,-4444,-4328,-4128,-4346,-4201,-4089,-4910,-4699,-4694,-4734,-4964,-4644,-4646,-4643,-4802,-4339,-3917,-4161,-4581,-4599,-4560,-4562,-4355,-4308,-4166,-4158,-4115,-4093,-4803,-4681,-4572,-4859,-4691,-4942,-4629,-4022,-4312,-4547,-3835,-3803,-4475,-4773,-4576,-4585,-4502,-4286,-4035,-4189,-4043,-4014,-4885,-2475,-4846,-4854,-5006,-4779,-4700,-4937,-4183,-3625,-3194,-4488,-4665,-4771,-4511,-4720,-4494,-4375,-4239,-4207,-4122,-4089,-4582,-4785,-5018,-4470,-4843,-4779,-4683,-4573,-4570,-4311,-4019,-4539,-4529,-4943,-4751,-4577,-4354,-4336,-4069,-4006,-3390,-3965,-4554,-4852,-4876,-4564,-4751,-4584,-4677,-4572,-4584,-4357,-4367,-4419,-4446,-4802,-4768,-4690,-4268,-4346,-4051,-4111,-3173,-3817],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
