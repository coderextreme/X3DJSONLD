###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world0-8.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-90.0416666667,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2751,2753,2754,2756,2758,2759,2761,2763,2765,2767,2770,2772,2775,2777,2780,2783,2786,2789,2792,2794,2797,2798,2695,2697,2699,2700,2702,2703,2705,2709,2711,2714,2717,2720,2724,2727,2731,2736,2740,2745,2749,2754,2759,2763,2664,2669,2675,2680,2684,2689,2693,2697,2699,2700,2702,2705,2708,2711,2714,2718,2722,2725,2729,2733,2737,2740,2619,2627,2635,2645,2653,2662,2671,2679,2686,2692,2698,2702,2705,2709,2712,2716,2719,2722,2724,2726,2728,2729,2592,2598,2603,2614,2628,2644,2661,2677,2691,2700,2706,2711,2716,2719,2722,2724,2726,2728,2730,2732,2735,2737,2589,2596,2602,2612,2624,2637,2650,2663,2675,2686,2695,2700,2703,2707,2711,2717,2722,2729,2736,2744,2752,2759,2603,2610,2618,2626,2635,2643,2652,2661,2669,2677,2685,2691,2696,2700,2704,2710,2717,2725,2734,2743,2753,2760,2612,2620,2627,2634,2642,2650,2659,2668,2677,2685,2692,2698,2701,2705,2708,2712,2717,2722,2728,2734,2741,2747,2599,2603,2609,2616,2624,2632,2640,2648,2657,2665,2674,2682,2689,2694,2699,2700,2703,2705,2708,2712,2718,2724,2567,2577,2584,2591,2597,2602,2607,2612,2617,2623,2630,2637,2643,2649,2656,2662,2667,2673,2679,2684,2691,2695,2523,2534,2544,2553,2561,2569,2576,2582,2588,2592,2596,2599,2601,2605,2610,2616,2621,2628,2635,2643,2651,2657,2454,2471,2488,2502,2513,2522,2532,2541,2551,2559,2568,2575,2582,2587,2592,2596,2599,2604,2613,2626,2643,2657,2400,2420,2442,2460,2477,2492,2501,2510,2520,2530,2538,2547,2555,2562,2570,2579,2589,2598,2606,2623,2646,2664,2303,2333,2367,2400,2422,2444,2464,2481,2497,2506,2515,2523,2532,2542,2553,2566,2581,2596,2607,2623,2645,2663,2198,2230,2269,2305,2349,2397,2418,2441,2459,2474,2489,2500,2510,2520,2530,2541,2552,2563,2573,2581,2593,2605,2105,2164,2214,2253,2288,2323,2381,2411,2438,2460,2478,2492,2502,2513,2527,2542,2558,2573,2586,2600,2629,2659,2111,2185,2224,2261,2296,2350,2401,2435,2464,2483,2496,2507,2525,2544,2568,2593,2618,2666,2701,2735,2776,2799,2212,2246,2280,2324,2399,2448,2483,2501,2518,2537,2556,2575,2594,2620,2661,2700,2747,2795,2829,2873,2905,2930,2285,2314,2382,2430,2479,2502,2526,2544,2565,2594,2630,2685,2725,2777,2817,2863,2892,2911,2937,2964,2991,3004,2325,2370,2417,2475,2512,2543,2565,2599,2686,2737,2767,2796,2843,2901,2935,2959,2977,2993,3016,3054,3082,3098,2346,2384,2430,2490,2548,2600,2659,2710,2753,2781,2799,2855,2915,2969,3000,3017,3042,3073,3105,3143,3171,3187,2386,2416,2465,2507,2579,2636,2694,2740,2779,2809,2844,2898,2972,3021,3061,3089,3106,3143,3197,3217,3234,3247,2393,2427,2475,2514,2581,2640,2696,2743,2782,2814,2852,2903,2981,3031,3071,3098,3117,3156,3202,3226,3244,3257],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
