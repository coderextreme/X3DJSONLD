###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-23.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.92018578496744,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[23,21,17,13,9,6,5,6,8,9,9,11,14,16,18,19,20,19,19,17,14,12,12,12,13,13,14,15,14,14,15,16,17,18,17,16,15,26,21,15,9,6,6,7,8,9,9,8,8,10,13,16,18,20,20,20,19,16,14,12,12,12,12,12,12,13,14,16,17,19,20,18,17,15,22,17,11,7,6,7,9,10,10,10,8,7,6,9,13,17,19,21,21,21,18,15,13,12,12,12,12,13,14,15,17,19,21,22,21,19,17,15,10,6,7,8,9,11,11,11,10,9,7,4,5,9,14,17,21,23,22,19,16,14,13,12,12,13,15,17,18,18,19,22,24,23,22,19,13,10,7,8,10,11,12,11,11,11,11,8,4,4,6,10,15,19,22,22,18,15,14,13,13,13,15,17,19,20,20,20,23,25,24,23,20,15,13,12,12,12,12,12,12,11,12,12,11,8,5,4,7,13,18,20,20,17,15,13,13,14,15,16,18,20,21,21,21,23,24,24,23,22,17,16,16,15,15,14,14,13,13,13,14,13,11,8,5,8,14,18,20,20,18,16,15,15,16,18,19,20,21,21,21,21,21,22,23,23,23,18,18,18,18,18,17,16,15,15,15,15,14,13,11,10,12,17,20,21,21,20,19,18,18,20,21,22,23,22,21,20,19,19,19,20,21,23,20,20,20,20,20,19,18,17,17,17,16,15,14,13,14,16,19,22,23,23,23,22,20,19,20,22,23,24,22,22,20,19,19,18,19,21,23,22,21,21,21,20,19,19,18,18,18,17,15,14,14,16,19,22,24,25,26,25,24,21,20,20,21,22,23,23,22,23,23,21,19,20,20,23,26,24,22,21,20,20,20,20,20,19,18,16,15,15,17,20,24,26,28,28,26,24,22,21,21,22,23,24,23,23,24,23,21,19,19,19,20,31,27,23,21,21,21,21,22,22,21,20,19,17,16,17,20,25,28,29,29,26,24,22,23,24,26,27,26,24,23,23,23,21,19,18,17,17,33,28,24,22,21,22,22,23,23,22,21,19,17,17,17,19,24,27,28,27,24,22,22,23,26,27,27,26,24,22,22,23,21,19,17,16,16,30,27,24,23,22,22,22,22,22,21,20,19,17,16,16,18,21,23,23,23,21,20,21,22,25,26,25,24,22,21,21,22,21,19,18,17,17,28,26,24,24,23,22,22,21,21,20,19,17,16,16,16,17,18,19,19,18,18,18,19,20,23,24,24,24,22,22,23,23,22,20,18,17,17,27,26,25,24,24,23,22,21,20,19,17,16,15,15,16,17,17,16,15,15,15,16,16,18,20,22,24,26,26,26,26,25,22,20,18,18,18,26,25,25,25,24,23,22,20,19,17,15,14,14,15,16,16,16,15,14,14,14,15,15,16,17,20,23,26,27,28,27,26,23,20,19,18,18,24,24,24,24,24,23,22,19,17,15,14,13,14,14,15,16,16,16,15,15,14,14,15,16,16,17,21,24,26,27,26,24,23,21,20,19,19,24,24,23,23,23,22,21,18,15,13,13,13,13,14,15,16,16,16,16,16,14,14,15,16,16,16,19,22,25,27,25,24,23,22,20,19,20,24,23,23,22,21,21,20,17,13,12,12,12,12,14,16,15,15,15,16,16,15,15,15,15,16,16,18,20,24,26,24,23,24,23,20,18,19,24,23,22,21,21,21,20,17,13,12,12,12,12,14,16,16,14,14,15,16,15,15,15,15,16,16,18,20,24,25,24,23,23,23,20,18,20,25,23,21,21,21,21,20,17,15,13,13,13,13,15,17,16,15,14,15,15,14,14,15,15,15,16,18,21,23,24,23,22,22,21,19,19,21,26,23,21,21,21,21,20,18,16,15,13,13,14,16,17,16,15,14,15,15,14,14,15,15,15,16,18,20,22,23,23,22,21,20,19,19,22],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
