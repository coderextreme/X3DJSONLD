###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore18-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3694340860038916,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[45,44,46,48,50,51,52,53,53,53,51,50,48,47,49,52,54,55,55,55,56,58,58,56,55,54,54,57,58,58,57,55,53,53,53,50,47,48,46,47,47,49,50,51,52,52,51,50,49,48,47,48,51,53,52,52,52,53,54,54,52,52,51,53,55,56,56,55,54,53,53,52,49,46,51,49,48,47,47,48,50,52,52,51,51,49,47,46,47,49,50,49,49,48,48,48,48,47,47,48,50,52,54,54,54,54,53,53,50,48,46,55,53,49,46,46,46,50,53,54,54,53,50,48,45,44,46,45,44,43,42,42,42,41,41,42,44,47,50,52,53,53,55,56,53,49,47,45,58,56,51,45,45,45,50,55,56,56,55,52,48,43,42,41,40,39,38,37,36,35,35,36,37,40,44,48,50,51,53,56,58,53,49,47,46,57,57,51,45,45,45,50,55,57,57,55,52,47,42,40,38,36,35,34,33,33,32,31,32,34,38,42,48,52,53,54,56,58,55,52,51,50,54,55,50,44,45,45,50,54,56,56,54,51,46,41,38,36,34,32,32,31,31,30,30,30,32,36,42,49,54,55,56,57,57,56,56,56,55,51,52,47,42,44,45,49,53,53,53,51,48,43,39,36,34,32,31,31,31,31,30,30,32,34,38,43,50,55,56,57,57,58,58,59,58,57,49,47,44,40,43,45,48,51,50,48,46,44,41,37,34,33,32,31,31,31,31,32,33,34,37,42,47,52,56,56,56,58,59,60,60,58,56,47,45,42,40,41,44,47,49,48,46,44,41,39,36,35,34,34,34,34,34,34,34,35,36,40,46,51,54,56,56,56,58,60,60,59,57,55,45,43,41,39,40,41,45,47,46,45,42,39,38,37,37,39,39,39,39,38,37,36,37,38,42,50,55,56,56,56,56,59,61,60,57,56,54,41,39,37,37,37,38,41,44,43,42,40,38,37,37,38,41,42,44,43,40,39,39,40,41,45,53,58,58,57,56,57,60,62,60,58,57,56,35,32,32,33,34,35,38,40,40,39,38,37,37,37,38,41,44,47,46,42,41,42,43,44,47,55,59,58,57,58,59,62,65,63,61,61,61,33,29,31,32,33,34,37,39,38,38,38,39,38,37,39,41,45,49,48,45,45,47,48,48,51,57,60,58,58,60,62,65,67,66,65,65,66,35,32,32,33,34,35,37,39,39,39,40,41,40,39,40,42,45,49,49,49,50,54,55,54,55,60,62,60,60,62,65,68,70,70,70,70,69,36,35,35,35,36,36,39,41,40,39,41,43,42,41,42,42,45,49,51,52,55,58,60,59,59,62,63,62,62,64,66,69,71,72,72,71,70,37,37,37,37,38,38,41,43,42,40,41,44,43,42,42,43,46,50,53,56,59,61,62,62,62,63,64,64,63,64,65,68,71,72,72,70,68,39,39,39,39,40,40,42,43,42,40,42,45,44,44,44,46,48,51,54,58,61,63,65,65,65,65,65,65,65,66,66,70,72,72,72,68,65,39,40,40,41,42,42,43,42,41,40,43,46,46,47,48,50,52,54,56,59,63,66,67,68,68,66,65,67,67,68,69,73,75,74,71,66,62,41,41,43,43,44,44,44,44,43,42,44,47,49,51,53,56,56,57,59,62,66,69,70,70,70,67,66,67,67,69,70,75,78,75,71,66,61,43,44,45,47,47,47,47,47,47,46,48,49,53,57,60,62,62,62,64,68,70,71,71,71,70,68,66,65,65,67,70,75,78,75,72,66,61,46,47,48,50,50,50,50,50,50,50,51,52,56,61,65,67,68,67,68,72,73,71,71,71,70,67,65,63,63,66,69,74,76,75,72,68,64,50,51,52,53,51,49,50,50,52,54,55,57,60,63,67,70,71,71,71,74,74,70,69,69,68,66,64,61,60,63,66,69,71,72,72,71,69],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
