###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore16-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3519706612479037,103.67601420477412,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[31,28,28,30,33,35,36,35,32,28,25,24,25,25,27,29,31,37,45,52,58,59,54,47,38,34,36,41,47,49,47,41,35,31,30,30,30,27,25,25,26,28,31,31,30,28,27,28,29,29,27,27,29,33,41,49,56,58,55,50,41,36,36,40,45,47,44,39,33,28,29,30,30,26,22,20,20,23,27,29,29,29,30,33,35,34,30,28,28,31,37,44,51,55,55,51,42,37,35,37,41,42,40,35,30,27,28,30,30,25,20,17,18,22,27,30,32,34,37,41,44,41,35,31,28,29,31,36,43,47,49,46,40,35,32,32,34,35,34,31,27,25,28,31,29,23,18,17,18,23,28,32,35,39,44,48,52,49,42,36,32,29,28,30,35,39,41,40,35,32,29,28,28,28,29,28,25,25,29,33,26,21,17,17,18,22,27,32,36,42,48,54,59,57,50,45,41,36,31,29,30,32,33,33,30,28,27,26,25,25,25,25,25,26,30,34,22,20,17,17,19,21,25,30,35,43,51,58,64,62,55,51,48,43,35,30,28,27,27,26,25,24,25,25,24,23,23,23,24,26,30,34,18,18,18,18,19,20,22,26,32,41,51,59,64,62,56,51,48,43,38,32,28,25,23,22,23,23,24,24,22,20,20,21,23,25,29,33,15,17,18,19,20,19,20,22,28,37,48,56,61,60,54,49,45,41,37,33,28,24,21,21,22,23,23,22,20,19,19,20,22,25,28,31,14,16,18,19,19,19,18,20,24,32,42,50,55,56,52,47,41,37,34,30,26,22,20,20,21,22,21,21,19,19,20,22,25,27,29,30,16,17,19,19,19,18,18,19,21,27,36,43,49,51,49,44,37,32,30,27,24,21,19,19,20,20,20,20,19,20,22,25,28,30,30,29,18,20,22,22,21,20,19,20,23,27,32,38,42,44,44,41,35,31,28,25,23,20,18,17,18,19,20,20,20,21,24,26,29,30,29,27,20,23,25,25,24,23,22,24,27,30,33,35,37,38,39,38,34,31,27,25,22,20,17,16,17,19,20,21,22,22,24,26,28,28,27,26,22,26,28,28,27,26,25,28,32,36,39,39,36,35,35,34,33,31,28,25,23,21,18,17,18,19,20,20,21,22,24,25,26,26,25,25,23,27,30,31,30,29,29,32,38,42,46,44,38,34,32,31,32,31,29,27,25,23,21,20,19,19,19,19,19,20,22,24,24,24,24,25,25,29,32,34,34,33,33,35,40,44,48,46,41,36,32,31,32,32,30,29,26,24,23,22,21,19,19,19,18,19,21,23,23,24,24,25,27,30,33,35,37,37,36,37,40,43,45,45,42,39,36,34,34,33,32,30,28,26,25,24,22,20,19,18,18,19,20,22,23,24,25,26,27,29,31,34,37,37,38,39,41,43,43,43,43,42,40,39,38,36,33,31,29,28,28,27,24,21,19,18,18,19,20,21,23,24,25,26,25,26,28,31,33,36,39,41,43,43,42,42,43,44,45,45,43,40,36,33,31,31,31,30,26,23,20,18,18,18,19,21,23,25,25,25,20,21,24,27,30,33,38,42,44,43,41,41,41,44,47,48,46,44,39,36,35,34,33,32,28,24,20,18,18,18,19,20,22,23,24,25,15,16,19,23,27,31,36,41,45,45,42,40,39,42,46,48,48,47,43,40,38,37,35,33,29,25,21,18,18,18,19,20,20,21,22,23,11,12,15,20,26,31,36,42,48,48,45,41,39,40,45,47,49,48,45,42,40,38,35,32,30,27,23,20,19,18,19,20,20,21,21,23,9,10,12,18,25,31,37,44,51,52,50,45,39,38,43,46,48,47,44,41,39,37,33,31,30,29,25,22,20,19,19,20,21,22,22,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
