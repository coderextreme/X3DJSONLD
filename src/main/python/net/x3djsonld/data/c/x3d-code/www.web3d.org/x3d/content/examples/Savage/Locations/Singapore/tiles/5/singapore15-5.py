###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.6616511706451,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[32,29,27,25,24,25,28,32,36,41,42,41,39,37,37,39,41,42,43,43,42,41,42,44,45,44,41,36,34,37,41,45,47,46,46,45,46,25,25,25,26,26,28,30,33,38,43,46,46,44,41,39,39,39,39,39,39,38,37,38,40,42,44,42,36,34,37,41,45,48,47,46,45,45,21,22,23,25,27,29,31,34,39,44,47,49,48,44,41,38,37,36,36,37,37,36,37,37,38,40,39,35,33,36,40,44,47,47,46,44,44,17,19,21,23,26,30,33,37,40,43,47,50,50,47,43,38,35,35,35,36,37,38,37,35,35,35,34,32,32,35,39,43,45,45,44,44,44,15,18,20,23,26,30,35,39,41,42,46,50,50,48,43,38,35,36,36,36,37,39,38,36,34,32,31,31,32,35,38,40,41,42,42,43,43,16,19,21,23,27,32,36,40,42,42,45,49,49,46,42,37,36,39,39,37,38,40,40,38,35,31,30,31,33,35,37,37,37,39,41,41,42,18,21,23,24,28,33,38,41,42,41,43,47,47,44,41,37,38,42,42,38,38,39,38,37,34,30,28,30,32,34,35,34,35,39,42,42,41,21,25,26,27,30,35,39,41,41,39,41,44,43,41,39,37,40,45,44,40,37,35,34,34,31,28,27,29,31,33,34,34,36,42,45,44,42,23,27,28,29,32,37,40,40,39,37,38,40,39,37,36,37,41,47,46,43,38,34,32,32,31,30,30,31,33,33,34,34,37,43,47,45,41,22,26,29,30,34,38,39,39,38,36,36,37,35,32,33,36,41,47,48,45,41,35,32,32,33,35,36,36,36,35,35,36,39,44,46,44,40,21,24,28,31,36,39,39,38,38,38,38,37,35,31,31,33,38,44,46,44,40,33,31,32,35,40,42,41,39,37,36,39,43,46,46,43,38,19,21,26,31,36,39,39,38,40,42,43,42,39,34,31,30,33,39,41,39,35,30,29,33,38,45,48,46,43,39,39,45,49,49,47,42,36,19,20,26,33,38,41,42,41,43,45,46,45,41,36,31,29,30,35,36,35,32,27,27,32,38,46,50,47,43,39,40,47,52,51,47,40,34,21,23,29,36,42,45,46,46,47,47,46,45,42,36,32,29,29,33,34,32,29,25,25,28,34,42,46,43,40,37,39,47,53,51,46,40,34,24,25,30,37,41,45,47,47,47,46,44,42,38,34,31,28,28,31,31,29,26,23,23,25,30,38,41,39,36,34,37,46,52,51,47,41,35,27,28,31,35,37,39,41,42,42,41,38,34,32,30,28,26,26,28,29,28,25,22,22,24,27,32,33,33,31,30,34,43,50,51,49,44,38,29,32,33,35,35,35,37,38,38,36,33,29,27,27,26,25,25,27,27,26,24,21,20,21,23,27,28,27,27,27,31,40,47,50,48,44,39,32,36,37,36,35,34,33,34,35,34,32,28,27,26,26,26,26,27,26,25,23,20,19,18,20,23,24,22,22,24,29,38,44,45,44,41,37,35,40,41,39,36,33,32,32,33,33,30,27,26,25,26,27,27,26,25,24,23,21,19,17,18,20,21,19,19,23,29,37,43,43,42,40,37,38,43,45,43,39,35,33,33,32,31,29,26,24,24,24,26,26,25,25,24,23,23,22,19,17,17,17,17,19,24,31,39,44,45,43,40,37,40,45,46,44,39,35,34,33,33,31,28,25,24,23,24,26,26,25,25,24,24,25,23,20,18,15,14,15,19,24,30,38,44,45,43,39,36,41,42,42,39,35,32,33,34,34,33,30,26,24,24,25,26,26,25,25,24,24,25,24,22,19,15,13,13,16,21,27,35,41,42,41,37,33,44,42,39,36,32,30,31,34,35,34,31,27,25,24,24,26,26,26,25,24,24,24,24,23,20,17,15,14,15,18,24,31,36,39,39,35,31],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
