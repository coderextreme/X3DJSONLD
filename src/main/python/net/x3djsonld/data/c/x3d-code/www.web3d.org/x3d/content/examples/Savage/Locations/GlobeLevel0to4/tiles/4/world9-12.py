###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3414,-3345,-3377,-928,-2243,-2504,-2684,-389,-41,127,-6,-78,-71,-34,-11,1,0,-26,-8,-1344,-3059,-3223,-3338,-3356,-3387,-579,-2381,-3148,-2639,-413,-48,36,-31,-76,-70,0,-60,3,3,-16,-65,-281,-829,-3816,-3289,-3237,-3394,0,-1618,-3346,-2778,-519,-58,87,-84,-60,-53,-24,21,2,2,90,-9,-357,-2150,-3755,-3225,-3163,-3439,-498,-302,-3042,-2646,-819,-3,7,-86,-43,-53,14,125,5,34,146,11,-167,-2053,-3140,-3189,-3136,-3283,-136,-1018,-961,-2473,-670,-26,13,-1,-41,-42,253,170,12,76,346,1002,-131,-2692,-3167,-3121,-3066,-3048,-24,-1195,-1382,-2667,-946,-9,39,26,-25,-34,276,86,89,60,939,1060,-57,-2599,-2894,-3050,-3009,-3029,-454,-960,-1364,-2698,-459,-27,295,197,97,44,56,4,38,71,334,465,-82,-2400,-2087,-3011,-2945,-2957,-1507,-1363,-1281,-2144,-158,-91,214,2,-1,156,12,18,31,100,143,455,-270,-2725,-2826,-2936,-2887,-2934,-2208,-701,-1147,-1175,-125,-32,353,13,2,63,21,100,66,101,222,427,-589,-2566,-2801,-2936,-2782,-2798,-2918,0,-163,-112,-102,-18,593,10,4,807,96,79,130,76,659,605,-389,-1638,-2207,-2836,-2714,-2706,-2690,-347,-65,-105,-71,-48,504,38,198,206,162,148,167,191,360,1026,-173,-927,-1554,-2793,-2667,-2641,-2638,-1951,-40,-41,-120,-18,988,47,90,185,192,133,121,1285,1097,139,-271,-795,-1302,-2686,-2580,-2541,-2580,-2511,-16,-3,-154,-7,1007,53,111,183,183,126,211,181,764,-22,-437,-672,-742,-2603,-2479,-2452,-2464,-2327,39,4,-74,6,331,52,198,291,149,192,145,548,318,-62,-711,-1130,-280,-2497,-2399,-2340,-2402,-2541,57,4,5,6,356,54,584,304,217,312,169,295,-2,-165,-410,-1509,-758,-2358,-2336,-2269,-2360,-2563,-139,8,7,19,628,60,762,308,170,155,187,521,-103,-86,-73,-1395,-630,-2218,-2191,-2210,-2323,-2117,-250,13,15,230,902,363,455,413,179,157,587,4,-165,-41,-160,-741,-1498,-2004,-2067,-2034,-2208,-1625,13,19,26,592,628,605,655,385,337,168,1683,-20,-122,-44,153,-63,-1368,-1840,-1899,-1930,-2113,-669,190,129,180,515,657,636,472,464,1515,917,41,-141,-206,-18,388,-4,-282,-1645,-1661,-1749,-1843,-3,835,95,1049,842,857,393,333,1463,1236,1070,158,-121,-254,-61,418,-4,-186,-1488,-1538,-1330,-160,-4,1262,182,552,550,1200,748,850,580,722,1174,421,-79,-226,-166,124,30,-83,-638,-157,-131,-182,41,196,172,1193,762,660,422,578,759,664,1051,142,3,-91,-236,-49,-23,-30,-439,-100,-109,-9,515,156,339,1287,1044,898,662,704,1251,659,520,247,2,-1,-150,-28,-2,-40,-305,-101,-121,-2,269,188,412,1347,987,716,612,801,1151,1051,628,118,2,-3,-129,-17,-2,-34],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
