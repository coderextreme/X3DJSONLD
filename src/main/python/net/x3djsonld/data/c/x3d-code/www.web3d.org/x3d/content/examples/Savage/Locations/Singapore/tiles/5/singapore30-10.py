###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.7334663412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[31,29,27,26,24,21,18,16,15,16,17,20,24,25,25,26,26,28,31,34,36,39,43,46,49,50,48,46,41,38,36,34,31,27,24,21,36,34,32,30,28,24,20,18,16,17,18,20,24,26,27,27,27,28,32,34,37,39,42,44,46,47,46,44,40,37,36,34,31,27,24,22,42,40,37,35,33,28,22,19,18,18,19,20,24,26,29,29,28,28,32,35,38,40,41,42,43,45,43,41,39,36,35,34,31,27,25,23,45,41,37,33,30,25,20,18,17,18,19,21,23,25,29,29,28,28,32,35,39,41,41,42,43,43,41,40,38,36,36,35,32,28,26,25,46,40,33,28,24,20,17,16,16,17,20,21,22,25,29,30,28,28,32,36,39,42,43,43,43,42,40,38,37,37,37,37,33,29,28,28,42,35,28,23,20,17,15,15,16,18,21,22,21,24,28,29,29,30,33,36,40,43,43,43,41,40,38,37,37,37,38,38,35,31,30,30,35,29,22,18,16,15,14,15,17,20,22,22,21,23,27,30,30,32,34,37,40,43,44,43,39,37,36,35,36,36,38,39,37,34,33,32,29,25,20,18,17,15,15,16,18,21,23,23,22,23,27,30,32,34,36,39,42,44,44,43,39,36,36,36,37,38,39,40,38,36,34,32,25,23,22,22,20,17,15,16,19,22,24,24,23,25,27,30,32,36,39,41,44,45,45,44,40,38,38,39,40,41,41,41,40,37,33,30,26,26,27,27,25,21,17,17,19,22,25,26,26,26,28,29,32,35,39,42,45,46,45,45,42,40,40,41,42,43,43,42,39,37,32,29,30,31,32,31,30,25,20,18,19,21,24,27,28,29,28,29,31,34,38,42,44,45,46,45,44,43,42,43,44,44,43,41,38,34,30,28,33,35,36,35,33,28,23,20,19,21,24,27,30,30,30,30,32,35,39,42,44,45,46,45,44,44,43,43,43,43,42,40,37,33,30,28,35,36,36,35,34,30,25,22,19,20,23,26,29,31,32,33,35,38,40,43,45,46,46,46,45,43,42,42,42,41,40,39,35,32,30,29,37,37,36,35,34,31,27,24,21,21,23,26,30,32,34,36,38,40,42,44,46,47,46,45,44,42,41,41,40,39,38,37,34,32,31,31,39,38,36,34,33,31,28,25,23,23,25,27,31,33,34,36,38,41,44,46,47,47,45,44,43,41,40,39,38,37,36,35,33,32,33,34,40,38,35,34,32,30,28,26,24,24,26,28,32,33,34,35,38,41,45,47,48,47,44,42,42,41,39,38,37,36,35,34,33,34,35,37,39,37,35,33,32,30,27,26,25,26,27,29,31,32,33,35,38,41,44,47,48,48,45,42,42,42,41,40,39,38,37,37,35,35,36,37,38,36,34,32,30,29,27,26,26,27,28,29,31,32,33,35,37,40,44,47,49,48,45,43,44,44,44,43,42,41,40,39,37,35,36,37,36,35,33,30,28,27,26,26,26,26,27,28,31,32,34,36,37,40,43,46,48,48,46,46,47,48,48,48,47,46,44,42,38,35,36,37,34,33,32,29,27,25,25,24,24,25,26,28,31,34,36,37,38,40,43,46,48,49,49,48,49,50,51,53,52,51,47,44,40,36,36,37,34,33,31,28,25,24,23,23,22,23,26,29,32,36,40,42,43,44,45,47,49,51,52,53,52,52,53,54,54,54,48,44,40,37,37,38,35,33,31,28,25,23,22,21,20,23,26,30,33,38,44,46,47,47,47,48,49,51,56,57,54,52,53,55,55,54,48,43,41,38,39,40,37,34,31,28,26,23,21,20,20,22,25,29,33,38,43,47,48,48,48,48,49,51,54,55,52,51,51,51,50,50,47,44,42,40,42,45],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
