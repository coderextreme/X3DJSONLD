###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world12-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(44.95833735661353,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-191,-144,-133,-95,-154,-160,-1324,-2477,-3195,-3958,-4167,-3769,-4378,-4253,-3562,-1512,-105,-1264,-2955,-3691,-4547,-4754,-243,-163,-1,-83,-179,-79,-71,-116,-1687,-3294,-3712,-3241,-3834,-3742,-2660,-120,-44,-118,-2976,-4070,-4563,-4518,-129,-117,68,4,-204,-124,-111,-35,-4,-1849,-2558,-2960,-3367,-2867,-962,-76,-65,-55,-3198,-4080,-4098,-4437,8,-69,147,88,30,-145,-151,-53,-62,-57,-512,-2178,-2035,-1079,-110,-71,-71,-45,-3097,-3835,-3850,-4173,141,-14,-88,235,44,68,-89,-164,-92,-109,-438,-110,-671,-95,-83,-72,-81,-66,-2302,-3641,-3552,-3728,167,178,116,118,237,191,99,-175,-88,-103,-424,-44,-89,-121,-87,-81,-76,-67,-622,-2274,-3537,-3853,149,7,51,28,-18,19,76,103,-49,-404,-303,-66,-107,-138,-108,-71,-86,-68,-94,-1606,-1118,-3269,188,347,89,0,61,-10,-71,-64,-256,-451,-57,-149,-230,-76,-184,-101,-81,-72,-94,-288,-492,-307,240,503,70,-21,-43,-67,-50,-74,-445,-396,-272,-25,-145,95,-184,-108,-198,-81,-114,-305,-302,-249,368,492,95,-15,-49,-69,-11,-378,-270,-229,-176,1,159,111,171,-171,-199,-103,-171,-301,-974,-269,403,3,-78,-35,-76,-72,-66,-484,299,457,347,182,181,74,-142,-165,-135,-194,-319,-456,-1172,-361,305,453,472,228,-169,-390,-409,-376,21,117,344,284,223,7,-301,-200,-184,-505,-1767,-2274,-1713,-874,-266,280,582,213,-314,-162,-73,-269,-112,206,324,121,59,64,-282,-302,-272,-1428,-2195,-2613,-2911,-2102,382,-254,-327,-341,69,92,-226,-271,-219,-41,71,23,-1,-4,-382,-284,-330,-1288,-2228,-2679,-3122,-3119,377,-14,-175,-170,-80,-143,-69,-127,-235,-114,431,22,-217,-161,-481,-304,-330,-1385,-2323,-2799,-3057,-2799,426,507,315,217,141,124,145,174,-165,-224,85,-196,-227,-312,-270,-269,-777,-1540,-2440,-2843,-1769,-3940,765,458,450,360,568,426,244,342,64,-226,-1,37,-159,-222,-418,-234,-517,-1428,-2594,-3075,-2894,-4110,917,676,607,637,558,580,545,447,274,51,173,26,-170,-382,-354,-400,-281,-2531,-3343,-3702,-3829,-4112,579,514,663,583,504,527,528,364,394,355,367,243,-225,-372,-252,-352,-1322,-2927,-3607,-3886,-3899,-4053,705,591,547,519,646,430,513,440,492,368,292,117,-204,-224,-247,-297,-2286,-3356,-3741,-3935,-4043,-4050,623,559,604,510,644,470,344,406,462,353,394,14,-188,-504,-367,-1537,-3111,-3499,-3784,-4001,-4026,-4005,594,708,498,473,438,552,418,114,615,387,107,-1,-277,-180,-344,-2164,-3261,-3674,-3875,-3931,-3904,-3896,744,551,504,467,466,521,422,325,290,105,-16,-157,-166,-202,-811,-2814,-3402,-3664,-3794,-3705,-3527,-3497,578,578,471,472,500,454,334,376,5,74,-63,-203,-167,-218,-1019,-2859,-3401,-3620,-3797,-3379,-3504,-3449],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
