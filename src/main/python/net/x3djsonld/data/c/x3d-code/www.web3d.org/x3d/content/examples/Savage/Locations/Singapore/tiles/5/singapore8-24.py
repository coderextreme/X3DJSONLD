###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore8-24.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2821169622239519,103.93454881909646,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[17,18,16,11,1,-6,-7,-5,-2,0,3,7,10,12,13,13,8,1,0,1,2,1,0,-1,0,5,11,16,18,12,10,13,15,14,14,15,13,11,10,8,0,-7,-9,-8,-5,-1,1,5,8,10,12,12,9,5,3,4,2,0,-1,-1,0,5,10,12,12,4,1,7,12,12,12,11,8,3,4,5,-1,-8,-11,-11,-8,-3,0,4,7,9,11,11,10,10,9,8,4,0,-1,0,1,5,8,7,4,-2,-6,1,8,9,9,5,5,1,0,0,-4,-9,-11,-10,-7,-2,1,4,7,9,11,12,13,14,14,12,9,4,2,2,3,5,6,4,1,-3,-5,1,6,8,8,4,2,0,-1,-4,-7,-10,-10,-9,-5,-1,1,4,6,8,10,12,15,18,19,16,13,10,7,5,4,5,5,2,0,-1,-2,1,6,7,8,4,0,1,-2,-6,-10,-13,-11,-8,-6,-4,-3,-1,2,7,10,11,15,18,19,17,14,9,6,5,5,5,4,1,0,0,1,5,8,9,9,5,-1,1,-1,-7,-12,-15,-12,-6,-6,-8,-9,-8,-2,5,9,10,14,16,18,18,15,8,5,5,5,5,4,2,1,2,4,8,11,12,11,7,1,2,-3,-10,-14,-15,-9,-4,-4,-8,-10,-10,-5,1,7,11,13,13,15,19,17,11,7,6,6,6,6,6,5,6,7,10,12,13,14,12,5,5,-4,-13,-15,-13,-7,-1,-2,-6,-9,-10,-7,-1,4,11,13,10,13,20,20,14,9,8,7,8,8,10,10,10,10,11,12,14,15,18,1,0,-11,-19,-18,-14,-7,-2,-3,-5,-6,-6,-4,0,6,12,16,17,19,24,22,15,10,8,8,9,10,11,11,11,11,10,10,11,12,15,-4,-9,-19,-27,-23,-15,-9,-4,-4,-4,-3,-1,0,4,9,13,19,25,28,29,25,16,9,8,8,10,11,11,12,11,11,10,9,8,7,9,-6,-12,-20,-26,-26,-21,-13,-5,0,2,4,4,5,7,10,14,19,25,26,24,20,12,8,8,8,9,11,11,11,11,10,9,8,7,7,8,-8,-13,-18,-24,-27,-28,-18,-5,4,12,13,11,9,8,10,14,18,22,22,18,14,8,6,7,8,9,9,11,11,10,9,8,8,7,7,8,-8,-13,-18,-23,-27,-27,-16,-2,6,14,16,15,13,12,13,14,15,16,15,12,10,6,6,8,10,8,8,8,9,10,10,10,9,7,6,5,-9,-13,-18,-22,-26,-25,-13,1,9,14,17,17,17,17,15,13,10,10,8,7,6,5,7,11,12,9,6,5,5,9,12,12,12,7,4,2,-9,-13,-18,-21,-20,-17,-6,4,10,14,16,16,17,16,14,10,8,6,5,6,5,6,8,12,13,9,7,8,10,13,14,13,11,7,3,2,-9,-13,-17,-19,-14,-8,0,8,12,14,14,14,14,14,11,8,5,3,3,5,6,7,9,12,13,9,8,14,18,17,16,13,9,6,3,3,-9,-12,-13,-13,-7,0,5,10,12,13,13,12,12,11,8,6,4,4,4,5,5,6,8,10,11,7,7,14,19,18,16,13,10,9,8,5,-8,-11,-9,-6,0,6,8,10,11,11,11,10,9,8,6,6,5,6,6,4,4,5,6,8,8,5,5,12,16,15,15,13,12,13,13,8,-5,-8,-4,0,4,8,9,10,10,10,10,9,8,6,4,4,4,5,5,5,5,6,7,9,10,9,9,11,12,11,11,13,14,13,11,3,-1,-2,0,3,6,8,8,8,9,9,10,10,8,4,2,1,1,2,3,5,7,8,9,11,14,17,18,13,8,5,5,13,17,12,6,-4,0,0,1,4,6,7,7,7,7,8,8,9,6,3,1,1,2,2,3,5,6,7,8,11,14,18,18,11,4,2,2,13,19,12,5,-4,0,0,0,2,4,5,5,5,6,6,7,7,5,2,2,4,5,6,5,3,3,3,5,8,11,13,13,7,2,1,3,14,21,13,6,0],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
