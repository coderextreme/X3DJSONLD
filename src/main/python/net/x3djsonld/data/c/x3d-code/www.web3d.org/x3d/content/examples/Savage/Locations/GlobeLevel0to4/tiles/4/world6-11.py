###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4021,-3531,-3050,-2838,-3435,-3798,-3735,-3778,-3720,-4557,-4402,-4277,-4400,-4654,-4484,-4240,-4309,-4557,-4516,-3202,-4053,-4745,-4001,-3553,-3260,-2902,-3647,-4188,-4248,-4034,-4988,-4212,-4364,-4374,-4548,-4574,-4352,-4646,-4396,-4417,-4410,-3817,-3611,-4746,-3442,-3422,-2940,-3214,-3857,-4476,-4109,-4143,-4350,-4281,-4342,-4620,-4660,-4651,-4527,-4603,-4527,-4635,-4731,-3968,-3404,-4586,-3448,-3273,-2673,-2986,-3406,-4071,-4138,-4238,-4244,-4421,-4334,-4726,-4643,-4499,-4688,-4537,-4676,-4680,-4540,-3495,-3450,-5043,-3309,-2947,-2978,-2714,-3582,-4016,-4055,-4069,-4108,-5019,-4612,-4727,-4413,-4870,-4785,-4505,-4690,-4746,-4527,-3457,-3619,-4358,-3216,-3051,-3095,-3094,-3191,-3734,-4652,-4612,-4271,-4330,-4810,-4716,-4762,-4810,-4922,-4789,-4650,-3699,-4376,-2861,-3065,-4231,-2841,-2761,-2593,-3167,-3551,-4148,-4122,-4286,-4443,-4273,-4655,-4751,-4803,-4741,-4764,-5224,-4897,-4058,-4333,-2711,-3073,-4620,-2516,-2937,-2401,-3612,-3827,-4225,-4606,-4780,-4484,-4652,-4638,-4665,-4782,-4940,-4896,-4821,-4900,-4966,-4659,-2426,-2619,-4883,-2805,-3063,-2896,-3232,-3756,-3967,-4510,-3777,-4495,-4733,-4601,-5031,-4945,-4912,-5162,-5332,-4693,-4894,-4577,-2418,-2646,-4397,-2681,-2979,-3159,-3478,-4030,-4212,-4541,-4524,-4240,-4680,-4845,-5070,-4995,-5048,-5160,-5289,-4956,-4816,-4759,-2935,-2804,-4730,-2945,-3145,-3240,-3938,-4134,-4241,-4472,-4898,-4884,-4805,-4654,-5138,-4950,-5099,-4999,-5389,-5222,-4927,-4986,-3508,-2236,-4901,-3069,-3040,-3416,-4143,-3683,-4221,-4545,-4989,-4215,-4643,-4676,-5077,-4941,-5165,-5104,-5306,-5314,-4895,-4980,-3534,-1913,-5229,-3200,-2942,-3312,-4250,-4855,-4595,-4465,-4541,-4539,-4346,-4369,-4749,-4861,-5141,-4992,-5046,-5214,-4932,-4652,-3773,-2012,-5085,-2202,-2979,-3493,-4201,-4062,-5088,-4575,-4795,-4541,-4891,-4973,-4759,-5018,-5135,-5270,-5254,-5198,-5238,-4928,-3561,-1791,-4903,-3354,-3492,-3349,-4138,-3904,-4779,-4918,-4910,-5143,-5266,-4777,-4747,-5018,-5086,-5359,-5329,-5115,-5423,-5067,-3815,-2194,-4953,-3218,-2904,-3306,-3976,-3996,-4646,-4917,-5005,-4571,-5088,-4926,-4993,-4990,-4989,-4806,-5070,-5396,-5081,-4878,-3889,-2096,-5117,-2824,-3808,-3928,-3786,-4354,-4676,-5630,-4985,-4953,-5076,-5051,-5047,-5005,-4959,-4909,-5069,-4929,-4701,-3587,-2103,-2336,-4938,-2126,-3272,-3578,-4216,-3936,-4610,-4778,-5372,-5142,-4610,-5055,-4891,-4930,-5035,-4903,-5044,-4618,-4717,-3024,-1919,-2368,-4478,-2157,-3103,-3308,-3681,-4305,-5071,-4747,-5107,-5106,-5169,-5215,-5023,-4979,-4787,-4743,-4626,-4014,-4316,-2445,-2089,-1924,-4430,-2756,-3467,-3927,-3706,-4459,-4749,-4784,-5148,-5219,-5287,-5324,-5115,-5090,-4964,-5009,-4453,-4578,-4844,-3811,-3348,-2134,-4198,-3044,-3780,-4030,-3889,-4370,-4095,-4986,-5135,-5166,-5396,-5408,-5069,-4960,-5008,-5026,-4192,-4225,-5195,-4444,-4309,-2591,-2992,-3112,-2830,-4003,-3572,-4155,-4269,-4854,-5085,-5279,-5397,-5362,-5226,-5042,-4749,-5014,-4313,-5113,-5017,-4530,-4746,-2769,-3078,-2763,-3178,-3835,-3889,-3530,-4156,-4738,-5031,-5176,-4752,-5446,-5187,-5223,-4996,-4311,-4724,-4523,-5156,-4804,-5042,-3077,-2782,-2481,-3168,-3735,-3970,-3538,-4330,-4730,-5024,-5083,-5344,-5511,-5173,-5199,-5067,-4672,-4943,-4318,-5337,-4845,-5140,-3258,-2957],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
