###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2481,-3168,-3735,-3970,-3538,-4330,-4730,-5024,-5083,-5344,-5511,-5173,-5199,-5067,-4672,-4943,-4318,-5337,-4845,-5140,-3258,-2957,-3080,-4016,-3815,-3706,-3398,-4407,-4849,-4982,-5311,-5441,-5335,-5325,-5241,-4918,-5073,-5003,-4304,-5364,-5133,-5093,-3754,-2570,-3132,-3184,-3703,-3622,-3331,-4236,-4823,-4963,-5313,-5314,-5320,-5249,-5255,-5007,-5180,-5080,-4427,-5161,-5472,-4883,-3845,-2395,-3451,-3122,-3629,-3691,-3261,-3838,-5327,-5109,-5283,-5350,-5405,-5299,-5232,-5099,-4952,-5002,-4818,-4586,-4884,-4325,-3810,-2528,-1911,-3408,-3516,-3749,-2985,-3957,-4901,-5105,-5346,-5308,-5381,-5348,-5303,-5218,-5228,-5017,-5138,-5187,-5120,-5217,-4193,-4050,-2653,-3616,-4175,-3949,-2889,-3369,-4729,-5063,-5304,-5321,-5401,-5307,-5402,-5259,-4962,-5112,-5054,-4853,-4784,-4889,-4611,-3738,-3975,-2809,-3195,-3217,-2556,-3267,-4606,-5005,-5229,-5401,-5406,-5390,-5320,-5221,-4743,-5118,-4833,-4754,-4970,-4893,-4604,-3237,-3856,-3833,-3989,-2660,-2404,-2908,-4543,-5000,-5087,-5367,-5379,-5258,-5234,-5165,-4698,-4998,-4677,-4959,-5107,-4877,-4703,-3063,-4069,-2883,-3783,-3475,-1406,-2280,-3895,-4915,-5012,-5292,-5405,-5330,-5162,-5133,-5028,-5103,-4888,-5342,-5367,-5023,-4728,-2711,-3955,-3408,-3498,-3845,-1488,-1682,-3851,-5101,-5073,-5302,-5350,-5407,-5463,-5219,-5238,-5018,-5157,-4840,-5258,-5114,-5003,-2554,-4175,-3569,-3414,-3751,-1512,-1364,-3515,-4880,-5257,-5286,-5046,-5139,-5273,-5081,-4877,-4877,-4971,-4394,-5208,-5132,-5132,-3005,-3698,-3004,-3535,-3641,-1558,-792,-2380,-4819,-5225,-5351,-5234,-4902,-5162,-5018,-4726,-5023,-5047,-4746,-5256,-5159,-5043,-2999,-3658,-3614,-3205,-3478,-2619,-5,-3240,-4790,-5232,-5203,-5111,-4974,-5198,-5181,-4870,-5192,-5257,-4811,-5165,-5133,-4828,-2869,-4421,-3086,-2809,-3674,-3652,-3,-2850,-4504,-5232,-5195,-5078,-5157,-5185,-5198,-5140,-5154,-5145,-5012,-5040,-5120,-4993,-2952,-4254,-2663,-2890,-3601,-3662,-579,-2384,-4747,-5273,-5188,-5135,-5270,-5189,-5141,-5162,-4737,-5109,-5016,-5009,-5086,-4401,-3310,-3767,-3788,-2785,-3362,-3997,-896,-2020,-4965,-5113,-5085,-5022,-5047,-5185,-5088,-4999,-4042,-5092,-4999,-4930,-5027,-5071,-3223,-3749,-2924,-3120,-3854,-4294,-3614,-2008,-5308,-5015,-5108,-4914,-4937,-4816,-5042,-4751,-3745,-5125,-4955,-4957,-5017,-4948,-3122,-3316,-3054,-2975,-4116,-4109,-4125,-2871,-4839,-5008,-5125,-5055,-5025,-4907,-5044,-5098,-3475,-4890,-4862,-4916,-4726,-4888,-2661,-3651,-2603,-2954,-3901,-4295,-3509,-3629,-4969,-4982,-4983,-5026,-4751,-5072,-5061,-4982,-3387,-4856,-4814,-4822,-4891,-4911,-3020,-3690,-3379,-3178,-3827,-3989,-4207,-3066,-3821,-4922,-4970,-4976,-4815,-5034,-4929,-5149,-3610,-4822,-4778,-4800,-4790,-4808,-3561,-3442,-3068,-3529,-3754,-3503,-4227,-2229,-4095,-4793,-4950,-4921,-4937,-4937,-4898,-4778,-3890,-4432,-4736,-4765,-4714,-4771,-3740,-3711,-2657,-2974,-4063,-3850,-4325,-2677,-2997,-4443,-4408,-4908,-4965,-4962,-4863,-4694,-4795,-4730,-4699,-4728,-4705,-4760,-3021,-3485,-2568,-3625,-3825,-3909,-4229,-2567,-2700,-4742,-4718,-4848,-4856,-4939,-4811,-4745,-4684,-4673,-4680,-4663,-4721,-4615,-2922,-2960,-2700,-3252,-3644,-3682,-4526,-2482,-2811,-4569,-4818,-4841,-4831,-4952,-4815,-4751,-4690,-4693,-4691,-4652,-4729,-4638,-2865],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
