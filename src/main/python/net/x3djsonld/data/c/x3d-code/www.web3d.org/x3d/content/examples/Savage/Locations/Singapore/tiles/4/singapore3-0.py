###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_30',geoSystem=['GDC'],position=(1.273385249845958,103.60419903412902,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.273385249845958,103.60419903412902,0.0),range=4101.627,child1Url=['../../tiles/5/singapore6-0.x3d'],child2Url=['../../tiles/5/singapore6-1.x3d'],child3Url=['../../tiles/5/singapore7-0.x3d'],child4Url=['../../tiles/5/singapore7-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore3-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.264653537467964,103.589836,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[4,4,1,0,1,3,5,9,6,5,3,4,4,2,0,7,4,4,2,7,3,0,2,6,8,4,2,9,8,1,0,5,10,16,11,4,2,6,5,2,1,2,3,4,8,6,6,3,3,3,4,4,9,6,7,2,8,5,1,6,5,9,4,2,8,9,4,4,5,7,14,12,1,-1,7,6,3,2,3,3,4,6,4,7,4,3,3,5,7,12,8,8,2,10,4,3,8,2,10,5,3,6,10,6,5,5,3,11,12,0,-6,6,5,5,3,3,2,4,4,3,8,5,3,6,6,7,13,7,7,2,11,1,3,5,-1,13,8,4,5,7,6,4,2,0,8,8,-3,-8,4,5,5,4,2,1,4,4,3,7,6,4,7,7,6,12,6,5,3,10,-1,2,1,-4,13,9,3,3,4,4,2,0,-1,5,4,-4,-8,3,3,5,4,2,1,4,4,4,7,5,2,3,6,5,10,7,5,5,6,-3,-1,-2,-5,7,6,3,2,3,3,2,0,-2,0,2,0,-2,2,2,3,4,2,2,4,6,5,6,4,1,0,6,4,6,8,5,7,4,-4,-5,-5,-4,2,4,1,1,2,2,1,0,-2,-4,0,5,4,2,2,3,4,2,3,5,5,6,6,4,1,0,5,4,6,6,4,7,7,0,-3,0,-2,1,4,0,3,2,2,2,1,1,-2,0,8,9,2,3,4,4,2,4,7,5,7,6,4,1,-1,4,4,6,4,3,7,11,4,0,3,0,1,5,-1,5,3,3,4,4,5,0,1,12,14,1,2,4,5,3,5,8,7,6,4,2,1,4,7,4,5,2,3,7,11,5,2,7,5,6,5,-1,8,7,5,7,7,8,4,4,12,14,0,1,4,7,6,7,10,9,5,2,0,1,10,10,4,3,1,3,6,10,6,3,9,10,10,5,0,11,11,7,10,9,10,8,6,10,12,1,3,6,8,6,8,9,10,7,4,0,0,8,9,5,2,1,1,5,9,4,2,13,12,11,3,0,14,11,8,9,8,9,11,9,8,8,2,4,7,8,7,9,7,11,10,7,0,-3,4,7,5,2,2,0,3,8,3,0,16,12,10,1,0,16,10,9,7,6,8,12,12,7,4,2,5,6,7,7,7,5,8,10,10,0,-3,0,5,8,5,3,0,4,6,4,1,13,6,8,7,5,13,7,6,5,6,7,9,12,4,1,3,4,5,6,7,6,3,4,11,13,1,-3,-3,2,10,10,4,0,6,3,5,3,10,1,8,13,9,8,4,2,3,6,7,5,11,3,-3,3,3,2,4,6,3,0,2,10,12,1,-2,-2,5,10,11,5,0,4,3,5,6,8,0,8,12,7,5,4,0,0,3,5,5,8,3,0,2,2,0,2,4,0,-1,1,9,10,2,0,-1,8,10,12,5,0,3,4,4,9,5,0,8,10,4,3,4,-2,-3,1,3,5,5,4,2,2,3,0,0,1,0,-1,0,6,5,2,1,1,7,5,8,6,1,3,11,3,6,6,4,10,11,5,5,5,-1,-4,-3,0,1,2,2,1,4,4,1,-1,0,0,-1,-1,2,0,1,4,5,8,0,2,7,4,4,20,3,1,8,9,14,14,8,8,6,0,-3,-10,-4,-1,0,0,0,4,3,0,-2,-1,0,-1,-1,1,1,1,4,8,8,1,4,9,5,3,13,1,1,6,10,14,12,8,7,7,3,0,-6,-2,0,-1,0,0,3,0,0,-2,-1,0,0,-1,1,4,2,4,10,9,6,7,11,5,0,1,0,0,4,10,13,9,7,6,7,8,5,0,0,0,-2,-1,-1,3,0,0,-1,-1,0,0,0,2,5,3,4,8,8,5,5,6,4,2,1,0,2,3,8,10,7,6,5,6,7,6,2,0,0,-1,-1,-1,3,2,0,0,-1,0,2,1,3,6,4,2,5,6,2,1,0,2,5,5,3,5,2,5,7,7,5,3,4,5,5,3,0,0,0,0,-1,2,1,0,0,0,2,4,3,5,7,4,2,3,5,3,2,-1,3,2,4,7,6,3,4,6,7,5,3,4,4,4,4,1,0,0,0,0,0,0,1,1,1,4,6,4,5,6,5,2,2,4,6,4,0,5,0,1,11,7,4,2,5,8,5,4,4,4,4,4,3,1,1,0,0,0,0,2,3,4,5,7,5,6,4,4,2,3,4,6,4,1,6,0,4,13,8,5,3,4,6,4,4,4,4,4,5,4,2,1,0,0,0,2,4,6,8,6,6,6,4,1,2,1,4,4,5,3,0,6,2,11,14,9,7,5,2,2,3,2,3,3,4,4,4,3,1,0,0,1,2,5,6,9,6,5,7,4,0,1,1,6,3,4,3,0,7,6,11,10,8,5,5,2,3,6,3,2,3,4,4,5,4,2,0,0,0,2,4,6,8,5,5,8,4,0,0,1,9,2,3,3,1,8,10,6,3,4,1,4,2,6,11,7,3,3,4,5,6,5,3,0,0,0,2,4,6,6,4,5,8,5,1,2,2,9,2,2,4,2,6,9,4,0,4,0,3,3,8,13,8,4,3,4,6,6,6,4,0,-1,0,3,5,4,5,3,3,7,5,4,5,4,7,2,4,5,2,1,6,5,1,6,2,2,5,9,12,7,4,4,5,6,7,6,5,0,-2,-1,4,5,3,4,3,2,5,6,5,6,6,7,4,4,6,3,0,5,5,3,6,4,1,6,8,8,4,4,5,6,7,7,6,6,0,-2,0,4,4,2,4,4,3,4,6,6,4,7,7,6,2,6,3,0,6,7,6,6,4,0,6,5,1,0,4,6,6,7,7,7,5,0,-2,0,4,4,1,4,5,3,4,6,4,2,7,6,5,1,8,4,0,5,6,7,5,4,1,5,3,-1,0,4,6,7,7,7,7,5,0,-2,0,4,4,0,1,4,3,3,5,1,0,5,2,1,1,10,7,1,4,3,6,5,4,6,5,4,-2,0,4,7,7,7,7,7,5,0,-1,1,5,4,0,1,3,3,4,5,1,0,4,2,0,2,9,7,2,3,0,5,5,4,7,3,4,-1,0,4,7,8,8,7,7,5,0,-2,3,6,6,5,4,6,5,4,6,3,2,6,3,0,3,5,4,4,1,-3,3,2,4,1,1,1,0,0,4,7,8,8,7,7,4,-1,-3,4,6,7,8,6,7,6,4,7,4,4,6,5,2,4,1,2,5,1,-4,0,1,5,-1,0,0,0,0,4,6,8,8,8,7,3,-2,-5,3,2,6,9,6,7,7,2,3,4,4,5,6,3,5,0,1,5,2,0,0,3,7,0,0,-1,-2,0,5,7,7,8,8,7,3,-5,-9,1,0,5,8,5,6,7,1,2,3,5,3,5,4,6,0,0,5,2,2,-1,4,7,0,0,-1,-2,0,6,7,7,8,8,8,3,-7,-11,0,0,3,5,3,4,6,3,2,3,7,2,3,6,7,1,1,3,0,2,-4,1,6,3,0,2,0,2,7,7,7,8,8,8,2,-7,-12,0,0,2,3,2,2,5,4,3,3,8,2,2,6,6,1,2,2,0,1,-5,0,4,6,2,5,1,5,7,8,8,8,8,7,1,-7,-12,0,0,2,2,1,1,4,4,3,4,9,4,3,5,3,0,2,1,0,2,-1,4,4,8,3,5,2,4,7,8,8,6,5,5,0,-8,-11,1,2,3,2,0,1,2,2,2,4,8,5,5,4,0,0,2,1,0,2,3,7,3,7,4,3,4,4,6,8,7,4,2,2,0,-8,-11],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
