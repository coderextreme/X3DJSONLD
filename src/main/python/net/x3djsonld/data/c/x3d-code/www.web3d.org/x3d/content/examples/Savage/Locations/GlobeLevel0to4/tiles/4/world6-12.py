###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4745,-5039,-4979,-5140,-5223,-5317,-5109,-5361,-5641,-5731,-5641,-5326,-4983,-5469,-4168,-5157,-5350,-3636,-2202,-3615,-4829,-3722,-4746,-4557,-4756,-4854,-5221,-5272,-5083,-5383,-5650,-5458,-5775,-5074,-4694,-5979,-5036,-4544,-5309,-3968,-3682,-4927,-5068,-4933,-4586,-4629,-4765,-4742,-5128,-5277,-5000,-5236,-5708,-5608,-5684,-5285,-5235,-5686,-3470,-3405,-5064,-3249,-4084,-4897,-5031,-5021,-5043,-4745,-4956,-4781,-5091,-5378,-4920,-5257,-5922,-5713,-5811,-5719,-5800,-4774,-2391,-3525,-5306,-3279,-3505,-5095,-5021,-5058,-4358,-4416,-4886,-4981,-4944,-5138,-4979,-5228,-5760,-6045,-5968,-5764,-5632,-4870,-2940,-4217,-4634,-4355,-4813,-5006,-4955,-5050,-4231,-3832,-4656,-5151,-5084,-5167,-5115,-5297,-5739,-5855,-6148,-5871,-5739,-5299,-4722,-5045,-5381,-5049,-4848,-5098,-5041,-3948,-4620,-3805,-4882,-5141,-5053,-5109,-5205,-5553,-5758,-5385,-5784,-6142,-5535,-5588,-5335,-5526,-5648,-5229,-5094,-5136,-3817,-1535,-4883,-3132,-4924,-5112,-5279,-5238,-5398,-5465,-5601,-6148,-5812,-5419,-5694,-5666,-5239,-5139,-5520,-5386,-4988,-5216,-2882,-2004,-4397,-5031,-4965,-4903,-5168,-5352,-5264,-5579,-5680,-5980,-6270,-5941,-6066,-5767,-5256,-5706,-5552,-5417,-5212,-4341,-3846,-2852,-4730,-5391,-5389,-4598,-5213,-5323,-5387,-5647,-5660,-5987,-5969,-5868,-5888,-5904,-5538,-5594,-5705,-5512,-5482,-5090,-4376,-3880,-4901,-5191,-5491,-5173,-4654,-5379,-5702,-5688,-5398,-6053,-5862,-6222,-6083,-5793,-5799,-5687,-5651,-5620,-5613,-5207,-4378,-4620,-5229,-5244,-5286,-5378,-4497,-5569,-5776,-5534,-5361,-6095,-5674,-6070,-6427,-5849,-5742,-5762,-5780,-5610,-5588,-5522,-4889,-5046,-5085,-5628,-5533,-5438,-5439,-5349,-5673,-5515,-5095,-5804,-5131,-5689,-5944,-5999,-5778,-5790,-5822,-5639,-5484,-5476,-5307,-5120,-4903,-4858,-5546,-5220,-5330,-4243,-5793,-5418,-5310,-5580,-5311,-6076,-5899,-5898,-5776,-5837,-5790,-5612,-5460,-5674,-5622,-5057,-4953,-3644,-5264,-4933,-5246,-4839,-5773,-5270,-5516,-5570,-5632,-6550,-5827,-5876,-5771,-5850,-5668,-5698,-5200,-5553,-5651,-5301,-5117,-4240,-5223,-4752,-4908,-5058,-5860,-5064,-5325,-4146,-5475,-6300,-5810,-6011,-5783,-6045,-5975,-5843,-5465,-5585,-5709,-5027,-4938,-3923,-5315,-5137,-5624,-5831,-5728,-4850,-5247,-6014,-5561,-5813,-5802,-5736,-6036,-5970,-6054,-5820,-5655,-5799,-5648,-5390,-4478,-3651,-4991,-5194,-5167,-5707,-4739,-4747,-5276,-5756,-5253,-5824,-5623,-5668,-6067,-5958,-6061,-5609,-5673,-5680,-5674,-5622,-4430,-4733,-5395,-5266,-4877,-5625,-5023,-4908,-4680,-5827,-5808,-5676,-4668,-5024,-5704,-5840,-4377,-5681,-3991,-5675,-5717,-5700,-4198,-4414,-5569,-5269,-5161,-5747,-4923,-5016,-4416,-5883,-6271,-5550,-4794,-4707,-5842,-5938,-5513,-5437,-4542,-5168,-5686,-5731,-2992,-5047,-5489,-5132,-5433,-6004,-4750,-4317,-5028,-5511,-5925,-5519,-4501,-4627,-5579,-2548,-5371,-5421,-3765,-4739,-5551,-5536,-3078,-5242,-5570,-5172,-5237,-5678,-3509,-4528,-5188,-5554,-5871,-5316,-2979,-4811,-5490,-6126,-5368,-2911,-4938,-3324,-4886,-4999,-2782,-5507,-5574,-5787,-5473,-5226,-3293,-4432,-4640,-5226,-5815,-4793,-3461,-5187,-5335,-5098,-5433,-5244,-4955,-4690,-3946,-2899,-2957,-5263,-5467,-5764,-5482,-5014,-3528,-4477,-4501,-5171,-5829,-4810,-3282,-5026,-5144,-5745,-5393,-5271,-5005,-4502,-3513,-2677],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
