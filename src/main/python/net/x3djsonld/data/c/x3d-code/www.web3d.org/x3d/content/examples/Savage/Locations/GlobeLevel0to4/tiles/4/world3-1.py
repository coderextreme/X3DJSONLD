###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4021,-4009,-3767,-3480,-3384,-3467,-3319,-3398,-3058,-2659,-2685,-2816,-2972,-3247,-4144,-3431,-2839,-2854,-3008,-3283,-3268,-3306,-4034,-3540,-3656,-3630,-3300,-3440,-3458,-3339,-3201,-2999,-2773,-2670,-2019,-2205,-1386,-2922,-2858,-2974,-2412,-2927,-3081,-3165,-3860,-3825,-3781,-3670,-3422,-3410,-3506,-3496,-3351,-3147,-2942,-2842,-3561,-3901,-3247,-3543,-3087,-2818,-2562,-2781,-3104,-3232,-4008,-4010,-3620,-3551,-3291,-3367,-3682,-3377,-3428,-3239,-3631,-3679,-2994,-3512,-3450,-3250,-3097,-2775,-2257,-2704,-2714,-2991,-3910,-3961,-3931,-3653,-3307,-3492,-3711,-3756,-3792,-3715,-3393,-3559,-4068,-3450,-3436,-3514,-3019,-2403,-2352,-2542,-2775,-2785,-4175,-4094,-3955,-3784,-3751,-3651,-3305,-4265,-3794,-3724,-3873,-3575,-3754,-3385,-3138,-2902,-3012,-2705,-2474,-2565,-2548,-2533,-4383,-4062,-4228,-4319,-3823,-4765,-3715,-3963,-4212,-4058,-4125,-4061,-3791,-3647,-3242,-3130,-1230,-2559,-3041,-3020,-3326,-2784,-4284,-4157,-4094,-3397,-4506,-3789,-4420,-4191,-4190,-4177,-3937,-3860,-3780,-3545,-3312,-2826,-3232,-2957,-2526,-2679,-4344,-3662,-3861,-4212,-2746,-4671,-4224,-4343,-4410,-4220,-4449,-4611,-3912,-3971,-3801,-3662,-3579,-3258,-3559,-4343,-3144,-4318,-4822,-4403,-4247,-4173,-4553,-4159,-3989,-4306,-4499,-4477,-4246,-4109,-4205,-4175,-3974,-3591,-3470,-3885,-3349,-3770,-4678,-4181,-4196,-4307,-4693,-4602,-4357,-4135,-4632,-4219,-4699,-4429,-4369,-4099,-4226,-4057,-3445,-4342,-4247,-3727,-3419,-4187,-4093,-4125,-4532,-4414,-4745,-4181,-4344,-4192,-4772,-4776,-4674,-4260,-4322,-4066,-4283,-3954,-4249,-3871,-3969,-3452,-4355,-4326,-4246,-4403,-4425,-4378,-4888,-4902,-4345,-4585,-4715,-4751,-4662,-4341,-4356,-4250,-4186,-4256,-4400,-4158,-3690,-4298,-3902,-4148,-4483,-4425,-4381,-4605,-4878,-5039,-5018,-4666,-4929,-4849,-4646,-4671,-4333,-4029,-4628,-4080,-3687,-4217,-4556,-4534,-3975,-4293,-4399,-4521,-4236,-4744,-5057,-5046,-4937,-4831,-4893,-4689,-4274,-4514,-4008,-4477,-4322,-4309,-4375,-4673,-4451,-4604,-4320,-4361,-4458,-4392,-4626,-4667,-5001,-5008,-5093,-4708,-4495,-4479,-4372,-4169,-4800,-4453,-4334,-4243,-4672,-4455,-4690,-4540,-4596,-4972,-4640,-4826,-4567,-5049,-5004,-4941,-4863,-4798,-4725,-4827,-4278,-4777,-4523,-4622,-3607,-4584,-4436,-4462,-4788,-4608,-4802,-4561,-4625,-5030,-4994,-4368,-4943,-4861,-4790,-4766,-4613,-4610,-4742,-4759,-3404,-4622,-4507,-4741,-5215,-4226,-4667,-4793,-4749,-4789,-4823,-4783,-3983,-4693,-4999,-4954,-4833,-4839,-4319,-4783,-5029,-4708,-4542,-4551,-4662,-4789,-4978,-4807,-4567,-4904,-4812,-4897,-5049,-4987,-4679,-4857,-4856,-4983,-4811,-4719,-4743,-4029,-4804,-4691,-4923,-4776,-4664,-3345,-4777,-5025,-4839,-5049,-5036,-5089,-5324,-5068,-4654,-4622,-4737,-4747,-4735,-4083,-4562,-4744,-4851,-4978,-4691,-5038,-5105,-5026,-5019,-4975,-5109,-5056,-5162,-5161,-4522,-5466,-4844,-4825,-4813,-4844,-4355,-3625,-5075,-4884,-5051,-5050,-5036,-4994,-5140,-5182,-5032,-4957,-5027,-5029,-5069,-5270,-4606,-5172,-4630,-4893,-4586,-4724,-4987,-4730,-5089,-4916,-4906,-4948,-5082,-4985,-5060,-5054,-5082,-5118,-5048,-5049,-5229,-5108,-5252,-5344,-5222,-4273,-4404,-4534,-5008,-4773,-5137,-4961,-5075,-5148,-5059,-4963,-5106,-5101,-5081,-5228,-5105,-5056,-5111,-4950,-5061,-5208,-5174,-4710],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
