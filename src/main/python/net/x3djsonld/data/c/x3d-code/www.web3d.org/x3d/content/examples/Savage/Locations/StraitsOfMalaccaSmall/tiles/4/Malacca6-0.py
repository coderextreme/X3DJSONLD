###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca6-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(2.434860909842949,98.7885625,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[1235,904,902,895,908,900,903,905,914,914,912,900,909,908,1094,939,933,902,904,908,908,924,907,903,902,903,919,919,909,917,898,918,916,900,915,924,1168,1014,939,907,908,914,928,942,904,906,905,971,963,981,1064,1004,942,909,914,906,916,913,1194,1019,921,908,909,908,955,958,904,910,915,985,1050,1113,1108,1087,1037,1019,937,921,908,1009,1088,1003,925,925,913,933,948,938,907,928,959,1102,1148,1148,1106,1075,1050,1062,903,918,918,922,1084,1007,951,944,933,989,1135,1108,905,933,1040,1246,1292,1369,1236,1158,1130,1084,909,918,920,1153,1061,1035,969,944,948,1529,1395,1167,1033,1041,1213,1386,1481,1379,1303,1270,1207,912,907,919,921,983,995,1074,994,940,1114,1515,1344,1267,1156,1205,1414,1450,1449,1450,1319,1320,912,986,914,910,1116,1138,1000,1053,1002,968,1517,1623,1581,1419,1152,1426,1503,1492,1500,1457,1425,908,919,909,960,1165,1177,1140,1081,1083,1243,1106,1525,1696,1523,1067,1357,1547,1558,1546,1522,1502,994,908,910,934,1165,1218,1169,1184,1132,1202,1783,1346,1477,1767,1665,903,1467,1510,1575,1555,1519,1481,906,902,1233,1129,1128,1240,1234,1198,1251,1791,1845,1449,1382,1482,1301,1010,1522,1529,1578,1573,1577,1052,903,1123,1336,1226,1205,1204,1221,1315,1609,2130,1656,1423,1278,1417,1203,846,1515,1521,1605,1613,1504,927,903,1026,1287,1281,1290,1251,1271,1471,2067,1922,1447,1322,1225,1556,1175,834,1513,1557,1618,1631,1305,907,903,1303,1279,1233,1241,1320,1444,1535,1675,1881,1219,1244,1160,1237,1053,839,1510,1593,1659,1550,1054,907,903,1248,1104,1155,1243,1394,1588,1689,1517,1536,1270,1150,1083,1068,1075,937,1536,1625,1678,995,907,900,902,1092,1019,1084,1441,1626,1580,1455,1319,1351,1243,1061,1022,1035,1094,978,1504,1607,1273,926,924,901,903,901,979,1127,1408,1418,1792,1475,1297,1186,1122,1023,963,992,1083,649,1547,1597,927,907,903,900,896,931,1168,1533,1426,1314,1473,1317,1205,1105,988,899,808,954,867,470,1492,1084,940,915,924,909,893,1113,1586,1331,1332,1229,1339,1145,1129,992,963,822,839,788,596,506,1208,925,891,933,914,907,1192,1251,1255,1246,1274,1172,1194,1078,1018,900,804,770,717,576,507,451,1051,904,908,912,912,1037,1291,1187,1209,1168,1099,1084,1056,972,918,786,726,719,595,539,479,437,911,903,912,904,1059,1309,1232,1195,1159,1064,1099,1001,970,877,813,748,701,652,570,514,469,407,910,904,906,905,1090,1302,1226,1204,1162,1066,1094,1001,958,864,799,747,696,649,571,511,464,413],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
