###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4710,-4789,-4640,-4837,-4795,-4682,-4760,-4618,-4479,-4538,-3891,-4119,-4044,-3900,-3708,-3637,-3175,-3301,-3261,-3054,-2685,-2595,-4897,-6287,-4938,-4591,-4971,-4918,-4794,-4739,-4532,-4406,-4176,-4107,-4268,-4163,-3789,-3606,-3321,-3443,-3313,-3123,-2773,-2713,-5295,-4992,-5319,-4759,-4924,-4978,-4716,-4737,-4649,-4561,-4387,-4372,-4167,-4048,-3768,-3625,-3658,-3531,-3371,-3180,-2847,-2833,-5088,-5086,-4917,-5135,-5020,-4824,-4954,-4716,-4782,-4476,-4383,-4249,-4146,-3946,-3866,-3676,-3890,-3703,-3411,-3200,-3032,-2816,-4735,-5081,-5025,-5018,-5056,-4956,-4682,-4846,-4778,-4480,-4353,-4299,-4109,-3786,-3695,-3904,-3969,-3818,-3559,-3375,-3124,-2972,-5105,-5095,-5323,-4985,-5043,-4827,-4903,-4567,-4610,-4506,-4389,-4267,-4168,-4001,-3699,-3985,-3962,-3923,-3551,-3361,-3127,-2944,-5111,-5020,-5089,-5063,-5015,-4794,-4737,-4556,-4626,-4585,-4402,-4280,-4199,-3868,-4027,-4004,-3949,-3707,-3576,-3323,-3057,-2836,-5098,-5092,-5283,-5038,-4950,-4950,-4791,-4746,-4540,-4545,-4380,-4168,-4052,-4175,-4071,-3948,-3818,-3428,-3489,-3331,-3164,-2631,-5031,-4911,-5050,-5101,-4943,-4864,-4814,-4670,-4558,-4553,-4403,-4131,-4092,-4000,-3987,-3990,-3849,-3648,-3398,-3157,-2699,-2983,-5003,-4920,-5148,-5046,-5024,-4942,-4770,-4605,-4544,-4562,-4361,-3993,-4009,-3977,-3979,-4031,-3816,-3808,-3445,-3191,-3059,-3114,-4996,-4992,-5138,-5044,-4971,-4813,-4648,-4514,-4402,-4394,-4242,-3963,-4061,-4127,-3978,-3984,-3972,-3778,-3583,-3184,-3027,-3024,-5044,-4986,-5076,-4974,-4931,-4789,-4603,-4532,-4513,-4429,-4198,-4081,-4079,-4149,-4086,-4212,-3967,-3669,-3574,-3299,-3122,-3152,-4969,-4891,-5178,-5032,-5061,-4742,-4523,-4526,-4516,-4539,-4236,-4155,-4077,-4562,-4253,-4224,-3720,-3797,-3538,-3284,-3176,-3301,-4875,-4947,-5008,-4981,-4822,-4732,-4579,-4494,-4338,-4550,-4361,-4361,-4288,-4161,-4342,-4171,-3954,-3669,-3570,-3352,-3142,-3090,-4815,-5076,-5046,-4854,-4987,-4719,-4599,-4242,-3859,-4386,-4350,-4489,-4488,-4353,-4073,-3947,-4117,-3682,-3528,-3315,-3224,-2657,-4902,-4976,-4747,-4830,-4572,-4667,-4727,-4115,-3623,-4704,-4190,-4422,-4521,-4426,-4131,-4123,-4123,-3835,-3624,-3237,-3249,-2995,-4817,-4911,-4725,-4707,-4799,-4457,-4325,-4104,-3974,-4349,-4091,-3703,-3697,-4590,-4186,-4125,-3889,-3713,-3391,-3570,-2814,-3224,-4768,-4898,-4906,-4529,-4309,-4212,-4603,-4135,-3820,-4236,-4227,-6129,-5407,-4068,-4206,-4119,-3986,-3958,-3486,-3619,-3315,-3338,-4818,-4711,-4549,-4479,-4434,-4362,-4316,-4293,-3672,-3862,-3666,-3874,-4269,-4131,-4093,-3945,-3999,-3702,-3399,-3349,-2920,-3457,-4717,-4614,-4437,-4364,-4181,-4346,-4188,-4237,-4323,-3085,-4621,-4245,-3885,-4227,-3950,-3899,-4138,-3738,-2959,-3154,-2964,-2834,-4697,-4344,-4272,-4115,-3793,-3830,-4470,-3862,-3777,-4516,-4183,-4138,-4017,-4112,-3842,-3908,-3844,-4141,-2985,-3373,-3194,-3201,-4571,-4713,-4001,-3715,-4055,-3824,-3724,-4039,-3854,-2545,-3859,-4168,-4291,-3740,-4109,-3814,-3791,-3760,-3746,-3552,-3505,-4733,-4494,-4401,-3525,-2067,-3993,-3579,-3740,-4010,-3874,-3165,-4162,-3997,-4118,-4151,-3551,-3736,-3885,-3239,-3692,-3531,-3254,-3193,-4643,-4323,-3668,-2778,-4030,-3680,-3887,-3889,-3916,-2200,-4212,-4061,-4171,-3854,-3886,-3674,-3840,-3295,-3805,-3360,-3331,-3033],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
