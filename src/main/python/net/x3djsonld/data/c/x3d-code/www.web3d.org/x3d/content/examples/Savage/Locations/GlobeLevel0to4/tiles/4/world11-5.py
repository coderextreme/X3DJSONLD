###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5162,-4994,-4800,-4111,-4664,-4653,-4540,-5147,-5359,-5561,-5553,-5571,-5646,-5493,-5649,-5366,-5765,-5231,-5152,-5029,-4511,-4365,-5135,-4948,-4868,-3,-4464,-4683,-4396,-4930,-5167,-5578,-5519,-5501,-5594,-5674,-5459,-5378,-3985,-5297,-5323,-4835,-4379,-4043,-5247,-4953,-4796,-4230,-4405,-4709,-4687,-4636,-4773,-5025,-5285,-5542,-2858,-5545,-5539,-5242,-5113,-5244,-5210,-4827,-4909,-4252,-5188,-5045,-4933,-4598,-4670,-3880,-4578,-4772,-4863,-4579,-4652,-5552,-5488,-5514,-5579,-4691,-5166,-5515,-4849,-4840,-4454,-4690,-5220,-5210,-4976,-4983,-4887,-4232,-4585,-4797,-5150,-4497,-5236,-5614,-5550,-5551,-5386,-5384,-4896,-5092,-4670,-4901,-4797,-4507,-5236,-5236,-5189,-5099,-5033,-4807,-4566,-4846,-4781,-5144,-5199,-5675,-5565,-5485,-5448,-2270,-3452,-4949,-4768,-4345,-4754,-4500,-5213,-5212,-5020,-4939,-5048,-5111,-4614,-4630,-4757,-5157,-3400,-5393,-5642,-5444,-5532,-5271,-2738,-4738,-4223,-4715,-4707,-4236,-5112,-5035,-4868,-4931,-4992,-4890,-4693,-4688,-5052,-5045,-5480,-5401,-5330,-5539,-5816,-3423,-5284,-4917,-4781,-3020,-4842,-4936,-4863,-5098,-4774,-5044,-5108,-5007,-4923,-4861,-5028,-4823,-5480,-5415,-5116,-5461,-5487,-3632,-4541,-5201,-5298,-4817,-4929,-5284,-4898,-5036,-4909,-4940,-5007,-5029,-4837,-5004,-3692,-5057,-4933,-5372,-5317,-5430,-5317,-5476,-5392,-5051,-5147,-5123,-5056,-4843,-4921,-5010,-4983,-5053,-4892,-5044,-5103,-4750,-5291,-5171,-5276,-5389,-5261,-5417,-5443,-5460,-5416,-5348,-5122,-5267,-4990,-5242,-4777,-4966,-4979,-5070,-5058,-5096,-5099,-5131,-5323,-5169,-5278,-5348,-5368,-5398,-5458,-5409,-5468,-5358,-5293,-5238,-4986,-5198,-4502,-4781,-4876,-5020,-5046,-5182,-5114,-5215,-5081,-5185,-5230,-5309,-5367,-5366,-5395,-5388,-5421,-5408,-5334,-5268,-5270,-5302,-4239,-4656,-4708,-5004,-4978,-5000,-5112,-4717,-5150,-5196,-5199,-5313,-5344,-5344,-5372,-5372,-5403,-5411,-5390,-5336,-5261,-5225,-3844,-4366,-4739,-4963,-4926,-5043,-5111,-4191,-5149,-5216,-5262,-5303,-5310,-5304,-5333,-5366,-5363,-5410,-5382,-5328,-4904,-4547,-3176,-4226,-4445,-4884,-5021,-5009,-5092,-5142,-5146,-5307,-5359,-5321,-5288,-5267,-5281,-5330,-5333,-5384,-5370,-5162,-4274,-4268,-2570,-3281,-4069,-4577,-4886,-4974,-5031,-5094,-5112,-5183,-5221,-5238,-5240,-5186,-5258,-5385,-5396,-5048,-4481,-4286,-4174,-4412,-173,-2086,-3753,-4464,-4587,-4791,-4877,-4999,-5089,-5136,-5213,-5187,-5162,-5129,-5120,-4208,-4071,-4062,-3727,-3730,-4231,-4481,-56,-90,-3076,-3950,-4231,-4514,-4689,-4893,-4986,-5070,-5118,-5127,-5092,-5057,-5187,-4986,-4269,-3715,-3825,-3655,-4594,-4694,-40,-71,-2001,-3228,-3633,-3986,-4501,-4722,-4892,-4973,-5058,-4927,-4794,-4969,-5110,-4609,-4128,-3306,-3513,-4261,-4598,-4797,-75,-59,-282,-2342,-2783,-3284,-4198,-4426,-4764,-4809,-4816,-4590,-4732,-4861,-4853,-3807,-3631,-3196,-3485,-4195,-4629,-4771,-184,-352,-97,-1202,-1729,-2049,-3067,-3825,-4488,-4609,-4546,-4052,-4484,-4786,-4142,-3109,-2395,-3037,-3297,-3999,-4689,-4748,-162,-175,-139,-34,-168,-588,-1475,-2509,-3547,-4057,-4252,-3885,-4386,-4332,-3556,-1487,-147,-1693,-2993,-3727,-4651,-4916,-191,-144,-133,-95,-154,-160,-1324,-2477,-3195,-3958,-4167,-3769,-4378,-4253,-3562,-1512,-105,-1264,-2955,-3691,-4547,-4754],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
