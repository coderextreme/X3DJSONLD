###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_28',geoSystem=['GDC'],position=(1.25592182508997,103.83400758019333,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.25592182508997,103.83400758019333,0.0),range=4101.627,child1Url=['../../tiles/5/singapore4-16.x3d'],child2Url=['../../tiles/5/singapore4-17.x3d'],child3Url=['../../tiles/5/singapore5-16.x3d'],child4Url=['../../tiles/5/singapore5-17.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore2-8.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.247190112711976,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[5,3,3,5,8,12,16,23,27,27,23,26,27,12,18,24,25,33,43,40,25,26,31,21,11,5,0,3,3,5,8,8,-1,-9,-1,4,3,5,4,2,3,11,18,21,26,27,26,22,25,31,14,23,30,33,41,51,45,26,32,36,23,12,6,1,6,6,5,12,10,3,0,2,4,4,5,4,2,4,16,26,30,31,28,25,21,23,29,15,28,36,43,48,57,49,32,39,38,23,11,7,3,7,7,7,15,11,5,4,4,4,4,5,4,3,8,23,34,39,38,30,24,19,18,19,17,32,46,53,54,60,52,45,47,38,19,10,6,5,6,7,11,17,11,5,4,4,4,4,5,5,6,12,26,39,45,41,31,21,17,15,14,17,35,52,60,62,65,58,55,50,35,15,5,5,7,6,7,12,16,10,5,4,4,4,4,6,5,10,16,27,39,46,41,30,19,15,14,15,19,34,52,65,71,73,68,62,45,28,12,-1,1,8,7,7,8,11,8,5,4,4,3,3,7,8,14,21,28,39,44,39,28,17,14,14,16,21,33,50,66,77,78,73,62,39,23,9,-4,0,8,8,6,6,6,7,5,4,4,3,3,9,11,18,24,30,36,39,34,25,20,17,15,16,20,31,43,63,77,80,69,52,30,18,9,-1,2,9,7,6,5,5,7,6,5,4,3,3,11,15,22,28,32,36,34,29,23,21,18,15,14,18,28,39,59,74,77,60,41,22,15,10,1,4,10,6,6,4,5,7,7,6,4,3,3,14,18,26,33,36,37,32,25,20,18,14,9,7,13,28,39,57,68,65,47,30,18,15,13,5,6,8,4,7,4,7,10,9,7,6,6,7,17,21,29,35,38,36,29,23,18,15,11,6,3,10,27,37,55,62,54,35,22,15,15,15,9,8,7,3,7,4,8,12,11,8,6,8,10,23,26,30,32,31,29,25,22,17,13,12,8,6,12,25,33,47,53,44,30,22,12,16,16,11,8,6,4,5,4,1,11,12,6,5,8,9,28,29,30,28,25,23,21,20,17,12,12,11,9,15,24,29,40,44,36,25,19,9,15,17,13,7,5,4,5,2,-2,9,12,5,5,7,8,33,31,30,27,20,18,16,16,16,14,12,12,10,17,22,27,32,34,29,24,15,4,11,17,12,7,5,5,3,0,0,8,10,5,5,6,7,35,31,30,24,15,13,11,13,13,14,13,12,11,17,21,24,25,25,22,23,11,1,6,16,11,6,5,5,1,-3,0,6,8,6,5,5,6,30,27,25,20,13,12,11,11,9,9,10,11,9,14,18,20,24,24,20,16,6,0,3,9,9,4,6,5,0,-3,0,5,8,6,5,5,6,25,23,20,15,11,10,11,10,6,4,8,10,8,11,14,15,22,22,17,10,3,0,0,3,5,3,7,7,-2,-1,0,5,7,6,5,5,6,19,17,16,13,12,13,11,10,7,6,11,14,13,13,14,14,18,16,12,8,3,0,1,3,4,5,10,10,6,7,8,8,7,6,5,5,6,14,12,13,11,13,15,12,11,8,9,15,19,18,16,15,14,12,10,7,7,4,0,2,3,3,7,12,15,16,15,15,10,7,6,5,5,6,14,10,12,11,11,13,10,7,9,13,21,26,25,19,16,13,9,8,7,8,9,6,5,4,5,9,13,15,16,16,15,12,8,6,5,5,5,15,10,10,10,9,10,7,4,11,17,28,34,32,21,17,12,6,6,7,9,15,14,10,3,7,11,13,16,17,16,13,12,9,6,5,5,5,12,9,9,12,12,11,4,4,12,17,29,31,27,23,18,10,5,5,5,10,15,17,13,7,11,10,13,18,17,14,12,11,13,16,17,16,17,10,8,10,14,16,11,1,5,15,17,30,29,21,23,20,7,5,4,3,10,15,21,17,10,15,9,13,19,17,12,10,9,16,27,30,29,30,9,10,10,13,15,10,4,5,13,17,27,23,18,21,16,5,5,5,9,12,16,18,16,9,12,8,12,14,11,9,8,11,23,30,32,31,32,9,12,10,12,13,9,7,5,9,16,23,18,15,17,12,3,6,8,15,14,17,16,14,8,7,7,12,7,4,6,6,15,29,33,32,32,32,10,11,10,13,14,12,11,8,10,14,18,14,13,14,10,6,10,16,20,16,15,12,12,8,7,7,13,13,5,4,8,22,32,33,32,32,33,10,9,10,14,15,15,15,11,12,11,12,12,12,12,9,10,15,26,25,17,12,9,10,9,10,8,16,21,8,2,12,30,35,33,32,33,34,14,12,11,13,15,12,7,9,11,10,10,11,12,12,10,13,21,29,29,18,11,9,9,8,9,8,17,18,5,1,19,35,36,33,30,34,36,18,16,12,13,16,8,-4,5,10,9,10,11,12,13,13,15,26,31,34,18,11,9,9,7,8,8,18,12,1,0,28,38,36,32,29,35,39,19,16,12,12,16,9,-1,6,10,9,11,11,12,12,12,12,23,31,34,17,10,9,9,7,10,11,14,9,1,0,29,41,35,30,25,36,43,19,16,11,12,16,11,5,7,10,9,11,11,10,9,9,8,17,32,33,16,9,8,8,7,12,16,8,8,4,0,28,42,35,25,18,37,48,17,14,12,11,12,10,7,8,10,10,11,11,10,8,9,8,15,27,27,14,9,8,8,9,15,11,6,7,6,4,29,41,32,21,15,35,48,14,12,12,11,7,7,8,8,10,12,12,11,11,8,8,11,15,19,17,11,9,8,8,12,19,3,5,7,7,12,32,39,27,17,12,33,46,13,11,11,10,7,7,7,5,9,12,13,12,10,8,11,13,15,15,13,10,9,8,11,15,17,2,5,7,10,17,31,37,23,13,12,30,42,13,10,9,8,7,8,6,2,8,11,12,12,10,10,15,15,16,12,11,10,8,9,14,19,12,5,4,7,11,19,28,34,17,9,12,27,36,13,9,7,7,7,8,4,0,7,10,10,11,10,11,14,16,15,11,11,10,8,12,16,18,10,7,6,10,15,19,24,29,13,8,12,24,30,13,9,5,5,6,7,2,-1,6,7,6,7,8,10,12,16,13,11,11,10,9,14,18,15,10,8,9,16,19,19,22,22,10,9,12,22,27,12,8,5,5,7,6,0,0,6,5,3,6,8,10,11,16,13,11,14,12,12,16,16,11,10,8,12,19,20,19,18,15,9,10,9,20,25,10,7,6,6,9,6,0,3,6,2,1,7,9,11,11,19,15,15,19,15,16,17,12,7,8,9,16,19,21,20,14,9,8,9,4,17,23,8,6,6,6,8,5,1,5,5,1,2,8,10,11,11,18,16,16,20,16,17,18,12,6,6,11,17,19,20,19,12,8,8,8,2,13,20,6,6,6,6,7,3,1,5,4,3,5,10,11,12,12,15,16,16,17,14,16,20,16,9,6,12,17,19,20,17,11,10,9,7,3,9,13,4,6,6,6,6,3,2,5,5,5,7,10,11,11,12,13,14,17,14,13,16,21,18,12,8,14,17,18,18,14,10,11,8,7,4,7,9,6,8,6,5,6,4,4,6,8,7,8,8,7,8,11,12,13,15,12,12,16,20,18,15,16,19,18,16,16,11,8,9,7,8,6,6,7,7,9,7,6,6,6,6,7,10,9,9,7,5,6,11,12,12,15,13,11,15,19,17,18,20,21,19,15,13,8,6,8,7,8,7,6,6],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
