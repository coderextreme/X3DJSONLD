###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Interchange',version='3.3',
  head=head(
    children=[
    meta(content='CircleLinesExample60.x3d',name='title'),
    meta(content='Example circle and cross-hairs made out of line segments, autogenerated by a simple Java program.',name='description'),
    meta(content='Don Brutzman',name='creator'),
    meta(content='14 November 2009',name='created'),
    meta(content='20 October 2019',name='modified'),
    meta(content='20 October 2019',name='modified'),
    meta(content='CircleLinesExample.x3d',name='reference'),
    meta(content='http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter09EventUtilitiesScripting/CircleLinesExample60.x3d',name='identifier'),
    meta(content='CircleLines.java',name='generator'),
    meta(content='http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter09EventUtilitiesScripting/CircleLines.java',name='generator'),
    meta(content='X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit',name='generator'),
    meta(content='../license.html',name='license')]),
  Scene=Scene(
    #  CircleLines is an IndexedLineSet made out of 60 line segments 
    children=[
    WorldInfo(title='CircleLinesExample60.x3d'),
    Viewpoint(description='Circle Lines Example',position=(0,0,4)),
    Shape(
      geometry=IndexedLineSet(coordIndex=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,-1,60,61,-1,62,63,-1],
        coord=Coordinate(point=[(0.000,1.000,0.0),(0.105,0.995,0.0),(0.208,0.978,0.0),(0.309,0.951,0.0),(0.407,0.914,0.0),(0.500,0.866,0.0),(0.588,0.809,0.0),(0.669,0.743,0.0),(0.743,0.669,0.0),(0.809,0.588,0.0),(0.866,0.500,0.0),(0.914,0.407,0.0),(0.951,0.309,0.0),(0.978,0.208,0.0),(0.995,0.105,0.0),(1.000,0.000,0.0),(0.995,-0.105,0.0),(0.978,-0.208,0.0),(0.951,-0.309,0.0),(0.914,-0.407,0.0),(0.866,-0.500,0.0),(0.809,-0.588,0.0),(0.743,-0.669,0.0),(0.669,-0.743,0.0),(0.588,-0.809,0.0),(0.500,-0.866,0.0),(0.407,-0.914,0.0),(0.309,-0.951,0.0),(0.208,-0.978,0.0),(0.105,-0.995,0.0),(0.000,-1.000,0.0),(-0.105,-0.995,0.0),(-0.208,-0.978,0.0),(-0.309,-0.951,0.0),(-0.407,-0.914,0.0),(-0.500,-0.866,0.0),(-0.588,-0.809,0.0),(-0.669,-0.743,0.0),(-0.743,-0.669,0.0),(-0.809,-0.588,0.0),(-0.866,-0.500,0.0),(-0.914,-0.407,0.0),(-0.951,-0.309,0.0),(-0.978,-0.208,0.0),(-0.995,-0.105,0.0),(-1.000,-0.000,0.0),(-0.995,0.105,0.0),(-0.978,0.208,0.0),(-0.951,0.309,0.0),(-0.914,0.407,0.0),(-0.866,0.500,0.0),(-0.809,0.588,0.0),(-0.743,0.669,0.0),(-0.669,0.743,0.0),(-0.588,0.809,0.0),(-0.500,0.866,0.0),(-0.407,0.914,0.0),(-0.309,0.951,0.0),(-0.208,0.978,0.0),(-0.105,0.995,0.0),(0,1,0),(0,-1,0),(1,0,0),(-1,0,0)])),
      appearance=Appearance(
        material=Material(emissiveColor=(1,.5,.2))))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful for CircleLinesExample60.py")
