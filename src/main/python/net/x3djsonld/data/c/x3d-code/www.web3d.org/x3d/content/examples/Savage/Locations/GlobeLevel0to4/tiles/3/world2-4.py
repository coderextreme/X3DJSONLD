###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_24',geoSystem=['GDC'],position=(-33.79166499031936,22.458339368270288,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-33.79166499031936,22.458339368270288,0.0),range=4495500.0,child1Url=['../../tiles/4/world4-8.x3d'],child2Url=['../../tiles/4/world4-9.x3d'],child3Url=['../../tiles/4/world5-8.x3d'],child4Url=['../../tiles/4/world5-9.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world2-4.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-3893,-4317,-4837,-3969,-4250,-4847,-4032,-4384,-4791,-4632,-4772,-5041,-5699,-5314,-3724,-2147,-3184,-1734,-2490,-2581,-2737,-4088,-4065,-4236,-4291,-4438,-5030,-4547,-4440,-4622,-4308,-4853,-5248,-5627,-5383,-4910,-3823,-2329,-2992,-1954,-1556,-1700,-3798,-4612,-4493,-4283,-4568,-4688,-5049,-4944,-4743,-4290,-4840,-5150,-5410,-5566,-5385,-4378,-4011,-2281,-2596,-2448,-1598,-4200,-4324,-4610,-4506,-3942,-4477,-4565,-5152,-4807,-4886,-4861,-5114,-5151,-5384,-5240,-4942,-4291,-3437,-2089,-3057,-2664,-420,-3616,-4648,-5022,-4446,-2292,-4910,-5335,-5178,-5084,-4925,-3228,-4023,-4838,-4916,-5217,-4451,-3785,-2405,-3206,-2767,-3746,-4758,-4852,-5061,-4921,-4768,-4343,-5190,-4982,-4886,-5131,-3576,-2719,-4327,-4858,-5445,-4755,-3723,-3370,-2255,-2467,-4933,-4856,-4903,-5210,-5140,-4801,-5201,-4769,-4948,-4965,-5145,-3123,-2534,-4320,-4285,-3816,-5341,-4615,-3920,-2053,-3169,-4910,-5175,-5092,-5257,-5122,-4922,-4824,-4761,-4878,-5105,-5099,-4346,-3016,-3947,-4016,-4531,-5146,-4976,-4279,-3563,-3180,-4998,-5119,-5000,-4984,-4863,-5211,-5032,-4871,-4517,-4649,-5146,-4759,-2906,-4222,-4081,-3777,-5715,-5142,-4643,-3829,-3406,-5165,-5066,-5115,-4961,-4941,-4966,-4957,-4962,-4296,-1784,-2735,-4723,-3397,-4818,-4371,-3829,-5078,-5402,-4657,-4426,-2021,-4588,-4873,-5407,-5259,-4999,-5167,-4849,-4703,-3439,-175,-302,-2599,-4647,-4617,-4576,-3865,-4149,-5427,-5250,-4286,-2973,-4484,-4870,-5178,-5290,-5209,-4989,-4680,-4365,-1624,84,-96,-118,-2968,-4186,-4249,-2442,-2855,-5214,-4979,-4404,-1423,-3654,-4431,-5039,-5185,-5104,-4924,-4354,-3816,-214,1167,580,457,262,-3596,-3880,-2436,-1820,-5098,-5041,-4308,-898,-2539,-2287,-4853,-5118,-4937,-4837,-3545,-2739,-176,390,738,660,1449,-107,-3683,-3570,-1975,-5062,-5089,-4064,-1210,-3251,-4248,-5040,-5091,-4867,-4759,-3378,-1112,-85,1301,1361,1437,1804,822,-3145,-3284,-2421,-4985,-4951,-3796,-2263,-4423,-4121,-4924,-5269,-4987,-4430,-3120,-256,315,911,1005,1319,1351,1935,-701,-2839,-1852,-5005,-4995,-3973,-2631,-4676,-3214,-4950,-5264,-4986,-4495,-2995,-176,925,1000,917,1261,1390,2496,459,-2321,-2017,-4923,-4881,-4409,-2375,-4661,-4196,-4885,-4802,-5045,-4639,-2836,-84,428,854,1051,1109,1319,1632,1073,-1637,-2017,-4812,-4683,-4522,-2259,-4937,-4784,-2781,-4792,-4869,-4756,-2370,287,705,865,979,1299,1304,1526,865,-908,-1587,-4652,-4517,-4319,-1835,-5404,-5056,-3964,-2110,-4789,-4418,-1449,673,1020,972,994,1118,1607,1504,1211,-525,-1384,-3842,-4324,-4131,-773,-5467,-5111,-4741,-885,-4713,-4234,-1251,684,1068,1073,1065,1128,1055,986,547,17,-1096,-3250,-3695,-3773,200,-5366,-5148,-4886,-891,-4710,-4173,-1204,657,1117,1082,1072,1159,1007,1042,519,15,-1044,-3193,-3614,-3716,248],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
