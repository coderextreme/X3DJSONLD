###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore27-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4480194974058374,103.64728813651608,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[13,14,18,22,26,30,32,32,30,25,22,19,19,19,18,16,14,13,15,20,24,28,27,22,20,22,25,30,35,38,37,34,30,27,26,26,13,14,18,23,29,35,37,38,35,29,26,23,22,24,22,18,15,13,13,17,21,26,26,21,20,21,26,31,35,38,37,34,30,27,25,25,15,15,18,23,30,37,41,43,40,34,29,26,26,28,27,23,19,14,13,14,17,21,22,19,18,20,24,29,33,36,36,34,30,27,24,24,19,19,19,21,28,35,40,43,41,37,33,30,30,32,29,25,20,16,14,13,14,18,19,17,17,18,21,26,30,33,33,31,29,25,22,21,26,26,23,22,24,29,34,38,39,38,36,34,33,33,30,25,21,17,15,14,15,17,18,17,17,17,19,23,26,28,29,27,25,22,18,17,34,34,29,24,23,24,28,32,34,36,36,35,34,33,29,24,21,17,15,14,15,15,16,17,17,17,18,20,22,24,25,24,22,19,16,14,41,42,37,30,26,23,22,24,27,29,30,31,31,30,27,23,20,17,15,15,15,15,16,16,16,16,17,19,20,21,22,21,19,17,14,13,44,45,41,34,28,22,19,19,20,23,24,25,25,24,22,20,19,17,16,16,16,15,15,15,15,15,17,18,19,20,19,18,17,15,14,13,39,40,37,32,28,23,20,17,17,17,17,17,17,17,17,18,19,18,17,17,17,15,15,14,15,16,17,18,19,19,18,18,17,16,15,16,36,34,32,30,28,24,20,17,15,15,13,10,10,11,13,17,19,19,19,19,18,16,14,14,14,16,17,18,18,18,18,18,17,16,17,19,34,31,29,27,25,23,21,19,18,18,16,12,11,12,15,19,21,22,22,22,20,17,14,12,12,13,14,16,17,17,17,17,17,17,19,21,34,31,28,26,25,24,23,22,21,21,18,14,12,13,16,21,23,25,24,23,21,18,15,12,11,11,12,14,15,16,16,16,16,18,20,22,39,36,33,30,29,29,28,27,26,25,21,17,16,15,18,22,23,24,23,23,21,19,17,15,14,13,12,13,14,15,15,15,15,17,19,21,44,42,39,36,35,35,34,31,29,27,24,20,19,18,19,22,24,23,23,22,21,20,20,19,17,15,13,13,13,14,15,15,15,16,18,20,47,47,45,44,43,43,39,35,31,29,26,23,21,20,21,23,24,23,23,22,22,23,23,22,20,18,15,13,13,13,14,14,14,14,16,18,50,51,51,50,49,48,43,38,33,29,26,24,23,22,23,24,25,25,24,23,24,26,27,26,24,20,17,15,13,13,14,13,13,13,14,16,46,48,49,48,47,45,41,36,32,28,26,25,26,27,29,32,33,31,29,27,28,31,31,29,25,22,19,16,15,15,15,14,14,13,14,16,41,44,45,45,44,42,39,34,30,27,26,25,28,32,36,40,39,36,34,31,32,35,35,30,26,23,20,18,17,16,16,16,15,14,14,15,36,37,38,38,37,36,33,30,27,24,24,24,26,30,35,41,42,40,37,35,35,37,35,30,26,23,20,18,17,17,16,15,15,15,15,17,31,32,31,31,30,29,27,26,24,22,22,22,24,28,35,42,44,43,41,38,37,37,35,30,26,22,19,17,17,16,15,14,14,15,17,19,31,31,31,31,29,28,28,28,27,25,23,20,20,21,26,33,36,36,36,35,33,32,30,27,24,21,19,17,17,16,15,13,13,15,17,19,30,30,30,31,29,28,29,31,30,28,24,18,15,14,17,22,26,29,30,31,29,27,25,23,21,20,19,17,16,15,14,13,13,14,16,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
