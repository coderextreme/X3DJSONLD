###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[3352,3334,3308,3252,3194,3169,3145,3117,3080,3006,2976,2957,2942,2929,2917,2900,2874,2837,2801,2742,2687,2644,3369,3345,3317,3289,3233,3198,3168,3137,3107,3067,3013,2994,2982,2966,2946,2925,2902,2853,2800,2744,2700,2681,3353,3332,3307,3285,3248,3212,3192,3166,3138,3111,3095,3065,3037,3015,2998,2957,2913,2873,2825,2789,2737,2709,3342,3315,3290,3264,3233,3204,3190,3172,3152,3129,3104,3089,3069,3044,3017,2994,2949,2905,2867,2810,2773,2739,3316,3295,3272,3251,3229,3207,3193,3180,3163,3143,3123,3106,3090,3078,3068,3047,3008,2960,2908,2862,2803,2783,3279,3264,3251,3239,3226,3212,3201,3194,3185,3171,3157,3138,3122,3117,3119,3108,3055,2989,2939,2904,2866,2832,3224,3217,3216,3219,3218,3214,3209,3204,3201,3200,3200,3200,3195,3183,3158,3121,3080,3031,2996,2950,2904,2889,3175,3164,3161,3173,3195,3207,3211,3208,3207,3210,3216,3223,3228,3226,3207,3163,3097,3054,3017,2972,2930,2909,3106,3091,3087,3100,3128,3172,3194,3199,3200,3205,3216,3229,3240,3243,3230,3196,3134,3079,3003,2971,2939,2912,3041,3035,3042,3058,3085,3121,3158,3182,3194,3197,3203,3218,3230,3234,3225,3199,3159,3105,3061,3007,2978,2951,2998,3000,3013,3037,3071,3104,3129,3149,3160,3169,3184,3200,3216,3223,3220,3204,3184,3138,3096,3043,2999,2952,2970,2983,2996,3013,3045,3088,3104,3104,3105,3109,3124,3151,3177,3197,3211,3217,3204,3139,3091,3041,2994,2935,2901,2921,2942,2960,2983,3000,3012,3025,3036,3057,3081,3101,3124,3156,3179,3196,3190,3127,3075,3021,2984,2943,2829,2845,2868,2888,2897,2900,2906,2925,2945,2973,3011,3044,3071,3099,3130,3138,3118,3087,3044,3004,2948,2903,2770,2788,2800,2809,2799,2792,2795,2808,2837,2869,2907,2964,3011,3040,3075,3087,3070,3033,2999,2961,2919,2888,2724,2730,2726,2710,2706,2721,2732,2715,2727,2767,2798,2839,2903,2948,2982,2995,2995,2971,2923,2898,2848,2795,2672,2667,2623,2568,2542,2550,2569,2598,2623,2663,2700,2726,2783,2808,2829,2854,2838,2806,2800,2789,2763,2721,2582,2563,2496,2461,2446,2455,2459,2455,2485,2530,2583,2634,2665,2686,2684,2666,2654,2653,2644,2658,2661,2619,2452,2423,2296,2213,2219,2254,2271,2296,2340,2387,2406,2429,2498,2577,2570,2551,2523,2504,2504,2562,2581,2559,2216,2157,2094,2052,2082,2093,2088,2090,2149,2201,2285,2365,2389,2412,2419,2417,2351,2321,2393,2451,2508,2521,1957,1909,1831,1859,1899,1883,1824,1810,1848,1938,2072,2127,2177,2193,2197,2164,2070,2061,2120,2271,2391,2430,1718,1603,1525,1495,1454,1431,1428,1443,1549,1705,1811,1919,1998,1998,1957,1868,1863,1846,1904,1996,2114,2234,1377,1235,1151,1106,1131,1148,1103,1118,1192,1347,1475,1604,1763,1751,1619,1548,1475,1510,1671,1733,1929,1977,1305,1161,1040,1009,1091,1098,1048,1066,1136,1305,1386,1530,1678,1677,1578,1486,1396,1446,1602,1538,1891,1940],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
