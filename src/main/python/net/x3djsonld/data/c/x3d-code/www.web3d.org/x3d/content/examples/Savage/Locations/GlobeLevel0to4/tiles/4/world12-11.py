###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world12-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(44.95833735661353,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[191,183,205,815,465,605,642,621,1120,2068,2895,2592,1876,1733,1679,3648,2570,2509,3453,3675,506,179,170,190,647,680,404,495,600,824,725,696,630,1198,869,1367,1301,802,1912,4199,3329,1913,1438,2944,151,520,427,304,356,395,404,612,1058,503,557,811,506,591,1206,2209,3281,1988,1139,642,1724,797,141,233,210,311,340,308,342,560,385,428,821,1433,1948,1933,2240,433,461,409,379,423,503,538,130,125,179,206,299,303,497,341,366,388,451,663,3149,1762,751,194,250,295,341,466,671,632,152,213,258,278,344,423,466,341,357,372,387,406,551,1327,1958,1999,1405,271,306,456,759,947,110,171,265,330,360,494,448,338,347,359,369,378,472,567,347,1723,1315,682,314,493,730,831,215,239,243,380,451,526,430,359,338,341,338,338,488,375,355,406,805,1040,803,621,667,807,316,288,295,380,538,547,581,457,381,508,593,628,366,438,481,954,2113,1925,2435,669,680,964,445,361,327,345,507,721,734,536,565,519,631,614,502,672,1650,877,871,521,864,594,701,1136,549,385,367,369,503,711,792,731,775,655,725,619,794,756,814,444,388,409,464,780,1851,2242,447,483,461,392,443,528,740,894,973,809,801,818,899,758,702,439,445,882,1540,1819,2947,2321,382,572,457,479,564,530,941,845,899,1102,881,888,569,699,707,753,420,2423,2162,2021,3101,1914,356,580,453,410,443,451,658,697,712,888,695,478,433,399,640,676,560,993,1810,1884,2705,2602,314,399,356,374,382,523,563,691,693,564,660,353,294,279,433,530,1047,1782,2212,2320,2003,2335,272,314,303,316,369,467,671,504,470,471,397,211,190,295,404,514,1038,1186,1848,2201,1800,2501,273,272,368,333,343,397,504,421,344,249,165,173,237,301,326,692,1348,1345,1953,1802,2604,2331,284,262,287,302,425,303,430,312,252,163,133,171,171,234,261,400,552,1172,956,998,2118,2176,241,339,317,334,389,324,326,208,159,126,151,153,144,264,218,206,282,265,377,416,901,1421,240,340,368,412,306,284,173,91,124,114,127,135,131,224,231,153,152,175,285,786,625,972,189,297,352,332,287,195,70,87,109,95,101,121,94,150,233,216,152,304,300,417,847,964,186,219,287,219,172,116,114,102,83,109,106,111,170,179,126,125,168,228,249,283,555,578,162,118,149,136,119,52,123,96,113,100,102,114,137,193,259,206,195,211,504,192,401,1450,157,115,143,131,122,79,129,107,109,101,100,111,170,229,198,216,282,247,442,331,745,1396],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
