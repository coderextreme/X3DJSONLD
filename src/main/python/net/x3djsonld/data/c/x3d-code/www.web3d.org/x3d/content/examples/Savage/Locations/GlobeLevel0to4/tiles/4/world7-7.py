###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5130,-5188,-4959,-4733,-4327,-4423,-3680,-3657,-2864,-3480,-3528,-3826,-4194,-4496,-4235,-3937,-3934,-4061,-4843,-4792,-5294,-5358,-5485,-5024,-4933,-5038,-4412,-4111,-4150,-3692,-3333,-3380,-3499,-3995,-3967,-4356,-4493,-4041,-4268,-4479,-5089,-5434,-5202,-5007,-5328,-5019,-5069,-4777,-4309,-4082,-3717,-3475,-3237,-2528,-3499,-3649,-4018,-4469,-4456,-3417,-4907,-4681,-5195,-5082,-3809,-4928,-5196,-5033,-4695,-4730,-4081,-4053,-3724,-3425,-3027,-2566,-2556,-3176,-4240,-4213,-4213,-4025,-4154,-4545,-4970,-4938,-5354,-5196,-5143,-5382,-4806,-4437,-4670,-3546,-3973,-3612,-2860,-2394,-2864,-3433,-3535,-2804,-4422,-3437,-4256,-4775,-4589,-5142,-4953,-5410,-5459,-4681,-4845,-4535,-4253,-3911,-3826,-3338,-3186,-3180,-2905,-3236,-3536,-3741,-4245,-3766,-4428,-4532,-4630,-4919,-5163,-4479,-5146,-4976,-4284,-4666,-4070,-3952,-3863,-3438,-2633,-2630,-3065,-3536,-3389,-3602,-3785,-4127,-4315,-4663,-4555,-5144,-5281,-5210,-5543,-5126,-4623,-4511,-4342,-3831,-3583,-3261,-2939,-2396,-2814,-3795,-3487,-4042,-4133,-4111,-4404,-4717,-4507,-3947,-4972,-5174,-5095,-5318,-4318,-4283,-4519,-3933,-3752,-3444,-3204,-2825,-2941,-3423,-3332,-3786,-3979,-4369,-4786,-4486,-4511,-4532,-4938,-4239,-5424,-4829,-5056,-4770,-4234,-4148,-3305,-3564,1,-2992,-2941,-2294,-3446,-3945,-4384,-4468,-4544,-4238,-4583,-4464,-4813,-4909,-5312,-4596,-4817,-4774,-4243,-4298,-4104,-3870,-4143,-2727,-3354,-3362,-3413,-4042,-4390,-4396,-4784,-4405,-4333,-4550,-3560,-4451,-5407,-4991,-5089,-4776,-4377,-4066,-4036,-3544,-3701,-3387,-4115,-4041,-3394,-3863,-4156,-4599,-4535,-4559,-4573,-4311,-4855,-4207,-4832,-5181,-4862,-4930,-4490,-4339,-4157,-3899,-3734,-3320,-3015,-2764,-3375,-4166,-4279,-4527,-4679,-4716,-4822,-4356,-4374,-4145,-4892,-5139,-4742,-4405,-4373,-4183,-3898,-3815,-3854,-3626,-3331,-2474,-3129,-3731,-4277,-4534,-4357,-4781,-4742,-4555,-4345,-3893,-5231,-4903,-4993,-4475,-4497,-4202,-4153,-3588,-3497,-3569,-3566,-2734,-3529,-3474,-4008,-4437,-4767,-5383,-5082,-4202,-4206,-3878,-5272,-4943,-5091,-4980,-4610,-4440,-4122,-3477,-3577,-3146,-2472,-3347,-3458,-3789,-3852,-4221,-4344,-4677,-4297,-4867,-4564,-4276,-4855,-4682,-5178,-5207,-4837,-4712,-4086,-4237,-3771,-3393,-3339,-3540,-3644,-4046,-4056,-4090,-4331,-4618,-4770,-3492,-4489,-4846,-5865,-5215,-5328,-5362,-5025,-4694,-4008,-4148,-3679,-3246,-3548,-3292,-3417,-3935,-4386,-3995,-4352,-4567,-4531,-4274,-4274,-4610,-5006,-5701,-4611,-5130,-4721,-4564,-4240,-4438,-3837,-3174,-3183,-3245,-3787,-3982,-3859,-4371,-4717,-4712,-4550,-4595,-4055,-4412,-5010,-5344,-5176,-4905,-5079,-4579,-4684,-4233,-3856,-3416,-2355,-3149,-4040,-3894,-4160,-4497,-4677,-4685,-4534,-4935,-4803,-4543,-4567,-5226,-5684,-5379,-4978,-4127,-4280,-4006,-3720,-3318,-3791,-3599,-4267,-4158,-4360,-4478,-4996,-4829,-4903,-4748,-4786,-4749,-4633,-4756,-4905,-4215,-3917,-5062,-4347,-3829,-3645,-3262,-3607,-3854,-4125,-3915,-4414,-4703,-4850,-5127,-4878,-5002,-4866,-4820,-5017,-4513,-3728,-4302,-4171,-3840,-3694,-4507,-3567,-3124,-3715,-4141,-3880,-4366,-4708,-4821,-4678,-5031,-5103,-4971,-4841,-4641,-4796,-5642,-3878,-4677,-4129,-3748,-3529,-3339,-3507,-3263,-3581,-4181,-3621,-4346,-4631,-4813,-5151,-5001,-5117,-4958,-4751,-4655],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
