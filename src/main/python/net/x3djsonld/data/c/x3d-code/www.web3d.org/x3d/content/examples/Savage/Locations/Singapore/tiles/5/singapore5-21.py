###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore5-21.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.25592182508997,103.8914597167094,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[23,26,29,29,27,23,16,10,6,4,4,5,5,6,6,7,6,5,3,1,0,0,1,0,3,9,14,18,22,27,28,27,22,11,4,4,6,20,22,26,29,30,28,22,15,10,6,5,5,6,6,7,7,6,4,3,1,0,0,0,1,7,17,24,26,29,33,36,35,29,13,3,5,8,14,15,18,23,27,28,25,18,12,7,5,6,6,7,7,7,6,6,6,5,4,4,5,6,11,20,25,26,28,33,36,35,28,14,4,3,4,7,6,9,15,22,27,26,21,15,8,6,6,7,7,7,7,7,9,9,9,9,9,10,12,16,22,26,24,25,30,34,33,27,15,5,2,0,-1,0,1,5,12,19,23,23,17,9,6,7,7,7,7,8,8,9,10,10,10,10,11,15,18,24,27,27,28,30,32,33,29,17,7,2,0,-12,-7,-6,-3,1,9,19,24,19,10,7,7,7,7,8,9,9,9,10,10,10,10,12,17,21,26,30,32,32,29,29,34,32,19,9,4,1,-15,-13,-12,-10,-6,0,8,15,15,10,8,7,7,8,9,9,10,10,10,10,10,10,12,18,23,28,32,32,32,30,29,32,29,19,11,6,3,-17,-19,-17,-15,-13,-9,-3,4,9,11,10,8,8,9,9,10,10,10,10,10,10,10,12,18,23,30,33,32,31,30,30,29,25,18,12,9,6,-14,-18,-18,-18,-17,-15,-10,-4,1,6,9,9,9,9,10,10,10,10,10,10,10,10,12,18,24,30,33,32,31,31,29,26,21,16,11,9,8,-9,-13,-18,-20,-20,-19,-17,-13,-6,0,5,8,9,10,10,10,10,10,10,10,10,10,12,18,24,30,33,32,31,30,28,23,18,13,9,9,10,-5,-9,-14,-18,-20,-20,-20,-17,-10,-2,2,7,10,10,10,10,10,10,10,10,10,10,13,19,24,29,32,32,30,28,24,19,15,11,9,10,12,-1,-5,-9,-13,-18,-21,-21,-19,-13,-5,1,7,10,10,10,10,10,10,10,10,10,11,14,18,22,27,30,30,29,25,20,14,11,10,11,12,14,0,-1,-5,-9,-14,-18,-20,-19,-14,-6,1,7,10,10,10,10,10,10,10,10,10,12,15,18,22,26,28,28,26,20,15,12,10,11,13,14,15,0,0,-2,-5,-9,-14,-18,-19,-14,-6,1,7,10,10,10,10,10,10,10,10,10,12,15,19,22,25,26,24,21,15,11,11,11,13,14,15,15,0,0,0,-2,-5,-9,-14,-17,-13,-5,1,7,10,10,10,10,10,10,10,10,11,12,15,19,21,23,23,19,16,12,10,11,13,14,15,15,16,0,0,0,-1,-2,-5,-9,-12,-10,-5,0,7,10,10,10,10,10,10,10,10,11,13,15,18,20,20,18,14,11,11,11,13,14,15,15,16,16,-1,-1,-1,-1,-2,-3,-5,-7,-7,-4,0,6,9,10,10,10,10,10,10,10,11,13,14,17,17,16,14,11,9,11,13,14,15,15,16,16,16,-3,-3,-3,-2,-2,-2,-3,-4,-3,-2,0,5,8,9,10,10,10,10,10,11,11,13,14,15,14,12,10,10,11,12,14,15,15,16,16,16,16,-5,-5,-4,-4,-3,-3,-3,-2,-2,-1,0,3,6,8,10,10,10,10,10,11,11,12,13,12,11,10,9,11,13,14,15,15,16,16,16,16,15,-6,-6,-5,-5,-5,-4,-4,-3,-2,-1,0,2,5,8,9,9,10,10,10,11,11,11,11,10,10,10,11,12,14,15,15,16,16,16,16,15,15,-7,-6,-6,-6,-6,-6,-5,-4,-3,-2,0,1,3,6,8,9,10,10,10,10,10,10,10,9,9,11,13,14,15,15,16,16,16,16,15,15,14,-5,-7,-7,-7,-7,-6,-6,-5,-5,-3,-2,0,1,3,6,8,9,10,10,10,9,9,9,10,11,13,14,15,15,16,16,16,16,15,15,14,14,-2,-6,-7,-8,-7,-7,-7,-6,-6,-5,-3,-2,0,1,4,7,8,9,9,9,9,9,9,11,13,14,15,15,16,16,16,16,15,15,14,14,14],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
