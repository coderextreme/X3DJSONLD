###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Interactive',version='3.0',
  head=head(
    children=[
    meta(content='orientation_changed.x3d',name='title'),
    meta(content='orientation_changed-movie.mpg',name='MovingImage'),
    meta(content='http://www.nist.gov/vrml.html',name='reference'),
    meta(content='http://www.itl.nist.gov/div897/ctg/vrml/vrml.html',name='reference'),
    meta(content='http://www.itl.nist.gov/div897/ctg/vrml/members.html',name='creator'),
    meta(content='This file was provided by the National Institute of Standards and Technology, and is part of the X3D Conformance Test Suite, available at http://www.nist.gov/vrml.html The information contained within this file is provided for use in establishing conformance to the ISO VRML97 Specification. Conformance to this test does not imply recommendation or endorsement by the National Institute of Standards and Technology. This software can be redistributed and/or modified freely provided that any derivative works bear some notice that they are derived from it, and any modified versions bear some notice that they have been modified.',name='disclaimer'),
    meta(content='Correct definition and compliance of this conformance scene is maintained by the X3D Working Group, https://www.web3d.org/working-groups/x3d',name='info'),
    meta(content='Michael Kass NIST, Don Brutzman NPS',name='translator'),
    meta(content='21 January 2001',name='translated'),
    meta(content='20 October 2019',name='modified'),
    meta(content='A ProximitySensor bounding box of size 10 by 10 by 10 surrounds a Sphere geometry. An avatar shaped like a pointing device receives both the position_changed and orientation_changed events generated by the ProximitySensor when the users pointing device enters its bounding box. The result is: when the user sequentially moves through the Viewpoint stack, the avatar will follow the cursor in both position (X, Y and Z) as well as orientation. When the viewer enters the bounding box, the avatar should always appear as a symmetric diamond with both a horizontal and vertical axis. Regardless of the avatar position inside the ProximitySensor bounding box, the avatar should always appear the same size and have the same orientation, stay positioned at the center of the viewing screen. When viewed from outside the bounding box, the avatar should appear at the perimeter of the bounding box, at its last exit point. The small end portion of the avatar should always intersect the perimeter of the bounding box when viewed from outside the bounding box.',name='description'),
    meta(content='https://www.web3d.org/x3d/content/examples/ConformanceNist/Sensors/ProximitySensor/orientation_changed.x3d',name='identifier'),
    meta(content='Vrml97ToX3dNist, http://ovrt.nist.gov/v2_x3d.html',name='generator'),
    meta(content='X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit',name='generator'),
    meta(content='../../license.html',name='license')]),
  Scene=Scene(
    children=[
    WorldInfo(title='orientation_changed.x3d'),
    NavigationInfo(type=["EXAMINE","WALK","FLY","ANY"]),
    Viewpoint(description='Outside (Front)',position=(0,0,12)),
    Viewpoint(description='Inside Front',position=(0,0,3)),
    Viewpoint(description='Outside (Front)',position=(0,0,12)),
    Viewpoint(description='Outside (Right)',orientation=(0,1,0,1.57),position=(12,0,0)),
    Viewpoint(description='Inside Right',orientation=(0,1,0,1.57),position=(3,0,0)),
    Viewpoint(description='Outside (Right)',orientation=(0,1,0,1.57),position=(12,0,0)),
    Viewpoint(description='Outside (Bottom)',orientation=(1,0,0,1.57),position=(0,-12,0)),
    Viewpoint(description='Inside Bottom',orientation=(1,0,0,1.57),position=(0,-3,0)),
    Viewpoint(description='Outside (Bottom)',orientation=(1,0,0,1.57),position=(0,-12,0)),
    Viewpoint(description='Outside (Rear)',orientation=(0,1,0,3.14),position=(0,0,-12)),
    Viewpoint(description='Inside Rear',orientation=(0,1,0,3.14),position=(0,0,-3)),
    Viewpoint(description='Outside (Rear)',orientation=(0,1,0,3.14),position=(0,0,-12)),
    Viewpoint(description='Outside (Left)',orientation=(0,1,0,-1.57),position=(-12,0,0)),
    Viewpoint(description='Inside Left',orientation=(0,1,0,-1.57),position=(-3,0,0)),
    Viewpoint(description='Outside (Left)',orientation=(0,1,0,-1.57),position=(-12,0,0)),
    Viewpoint(description='Outside (Top)',orientation=(1,0,0,-1.57),position=(0,10,0)),
    Viewpoint(description='Inside Top',orientation=(1,0,0,-1.57),position=(0,3,0)),
    Viewpoint(description='Outside (Top)',orientation=(1,0,0,-1.57),position=(0,12,0)),
    Transform(
      children=[
      Transform(
        children=[
        PointLight(),
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(1,1,1))),
          geometry=Sphere(),)]),
      Transform(translation=(-1,-1,0),
        children=[
        PointLight(),]),
      Transform(translation=(-1,1,0)),
      Transform(translation=(1,1,0),
        children=[
        PointLight(),]),
      Transform(translation=(1,-1,0),
        children=[
        PointLight(),]),
      Transform(
        children=[
        ProximitySensor(DEF='PROX_SENSOR',size=(10,10,10)),
        Shape(
          appearance=Appearance(
            material=Material(emissiveColor=(1,1,1))),
          geometry=IndexedLineSet(coordIndex=[0,1,-1,1,2,-1,2,3,-1,3,0,-1,4,5,-1,5,6,-1,6,7,-1,7,4,-1,1,5,-1,2,6,-1,0,4,-1,7,3,-1],
            coord=Coordinate(point=[(-5,-5,-5),(5,-5,-5),(5,5,-5),(-5,5,-5),(-5,-5,5),(5,-5,5),(5,5,5),(-5,5,5)]))),
        Transform(
          children=[
          Transform(DEF='MYCONE',
            children=[
            Shape(
              appearance=Appearance(
                material=Material(emissiveColor=(0,0,1))),
              geometry=IndexedLineSet(colorPerVertex=False,coordIndex=[0,3,-1,3,4,-1,3,2,-1,2,4,-1,2,1,-1,1,4,-1,1,0,-1,0,4,-1,3,0,-1,0,5,-1,2,3,-1,3,5,-1,1,2,-1,2,5,-1,0,1,-1,1,5,-1],
                coord=Coordinate(point=[(-0.1,0,-1),(0,-0.1,-1),(0.1,0,-1),(0,0.1,-1),(0,0,-1),(0,0,-0.2)]),
                color=Color(color=[(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1)])))])])])]),
    ROUTE(fromField='orientation_changed',fromNode='PROX_SENSOR',toField='set_rotation',toNode='MYCONE'),
    ROUTE(fromField='position_changed',fromNode='PROX_SENSOR',toField='set_translation',toNode='MYCONE')])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful for orientation_changed.py")
