###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[16,13,10,12,15,16,18,18,18,19,22,24,25,24,22,21,20,20,22,24,26,28,31,33,33,33,34,34,33,31,29,27,27,28,34,40,44,18,15,12,15,18,19,20,19,18,19,20,21,21,20,18,17,16,16,18,21,24,26,30,32,33,33,34,35,35,35,33,32,31,30,32,35,41,19,16,14,18,21,23,24,22,20,20,20,20,20,19,18,16,16,16,18,20,23,26,27,29,31,32,35,37,38,38,36,34,33,31,32,34,39,18,16,16,20,24,26,28,26,24,22,21,21,21,20,19,18,19,19,20,22,24,25,25,25,28,31,35,39,40,41,38,35,34,33,34,35,39,18,17,18,22,26,29,30,28,25,23,22,22,21,20,20,20,20,22,23,24,25,25,23,24,28,32,36,40,43,45,41,38,36,35,36,38,40,19,19,19,24,29,30,30,28,24,23,23,22,21,20,20,21,22,24,26,26,25,24,23,24,30,35,38,41,45,48,45,42,39,37,38,39,42,20,20,21,25,30,30,29,28,26,25,25,24,23,22,23,23,25,26,28,28,25,23,22,24,30,35,37,40,43,46,43,40,37,35,36,37,40,22,22,23,27,31,30,28,29,29,29,28,27,26,26,26,27,28,30,30,29,26,23,22,23,28,31,33,36,39,41,38,35,32,30,32,33,35,23,23,24,28,30,30,28,29,31,31,30,29,27,27,28,29,30,32,31,30,27,24,22,22,25,28,30,32,35,38,36,34,31,28,30,32,33,23,24,24,26,29,29,28,29,31,31,30,29,27,27,28,29,31,32,31,30,27,25,23,22,23,24,25,27,33,36,36,35,31,28,30,33,34,23,23,23,25,27,29,30,31,32,31,30,29,27,27,29,30,32,32,31,30,28,26,23,21,21,22,22,25,30,35,35,36,31,28,32,35,37,25,22,21,23,26,29,33,33,33,31,30,28,28,28,30,32,33,33,31,30,30,28,24,20,20,20,21,24,28,32,34,35,31,29,34,39,42,26,23,21,23,27,30,34,34,34,32,30,29,29,30,31,33,34,34,31,30,30,29,25,22,20,20,20,22,25,28,31,33,31,30,35,39,42,27,25,24,26,29,32,34,35,34,33,32,31,31,31,32,34,35,34,31,29,28,27,26,24,22,21,21,21,21,23,27,30,30,29,33,36,40,27,26,26,29,32,34,34,33,33,33,33,33,33,33,34,35,37,36,32,30,28,27,27,26,24,22,21,20,19,19,23,26,26,27,29,31,36,26,26,27,31,35,35,33,31,30,31,32,34,36,36,36,37,38,38,36,33,31,29,29,28,24,21,21,21,19,19,19,20,21,22,23,24,30,26,26,27,31,35,35,34,31,30,31,34,38,40,40,38,38,38,37,36,34,31,30,30,29,25,22,22,22,21,20,18,18,19,20,20,21,28,27,27,27,31,34,35,35,33,32,35,40,44,48,46,40,37,36,35,32,31,30,29,31,30,27,24,25,25,24,23,21,20,21,22,22,24,31,29,28,27,31,34,35,36,36,35,40,45,50,54,50,42,37,35,33,31,30,30,30,31,32,29,27,27,27,25,24,23,22,23,24,26,28,35,31,29,28,31,34,36,37,39,41,45,50,54,55,51,43,37,34,32,32,33,34,34,33,32,31,30,29,27,24,22,22,21,24,27,31,35,41,32,30,29,31,34,37,40,43,47,51,55,55,54,49,42,37,33,33,34,37,41,41,35,32,33,33,30,27,24,21,21,21,25,29,34,39,45,32,31,30,32,36,39,43,49,53,56,58,55,49,44,39,35,33,33,34,40,51,51,38,31,34,34,31,27,25,22,21,21,25,29,35,40,46,34,33,32,35,38,42,47,51,55,57,55,51,44,38,35,33,32,32,35,43,57,58,40,30,33,34,31,27,25,23,21,20,24,27,33,38,44],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
