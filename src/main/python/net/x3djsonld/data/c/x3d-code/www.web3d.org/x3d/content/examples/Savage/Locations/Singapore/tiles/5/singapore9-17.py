###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore9-17.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2908486746019459,103.83400758019333,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[27,27,21,16,19,23,25,25,22,18,18,19,17,14,12,10,10,11,12,14,18,22,31,41,50,57,52,37,25,17,15,19,24,27,29,27,26,24,25,18,13,14,18,22,24,21,17,17,18,16,13,11,10,11,12,13,16,21,29,36,43,46,46,41,31,24,20,21,27,32,34,33,29,25,14,16,13,10,11,12,15,17,16,14,15,16,14,12,12,12,13,15,16,18,24,35,39,39,36,30,26,24,24,26,30,37,41,41,37,29,22,10,12,11,10,8,8,10,12,13,13,15,16,15,13,13,14,15,17,20,22,28,37,37,32,26,19,17,19,24,30,36,44,47,47,42,31,21,10,12,12,10,7,5,7,10,11,13,16,19,18,16,16,16,17,20,24,31,34,36,32,24,18,15,15,16,22,30,39,47,53,55,49,35,23,15,19,18,14,9,5,7,10,13,16,20,24,22,19,20,22,25,29,32,36,35,32,25,17,13,13,14,16,22,32,42,50,56,58,52,37,25,24,31,28,21,13,7,8,12,16,20,25,30,28,25,28,33,38,43,42,37,32,27,20,14,12,12,14,18,25,36,45,52,56,56,49,36,25,29,37,33,26,19,13,13,16,19,24,29,34,33,30,34,40,45,50,46,36,31,27,21,15,14,14,18,23,30,41,49,53,55,53,47,37,27,27,32,31,28,26,24,23,22,23,26,31,36,36,35,37,41,43,45,41,34,33,35,30,22,19,20,23,29,37,46,52,54,53,51,46,38,29,25,27,28,30,32,32,31,28,27,27,32,39,39,36,37,38,38,36,34,31,34,41,38,29,24,24,27,34,41,47,51,52,51,48,44,38,31,25,25,28,32,34,35,35,33,31,30,35,42,39,34,32,32,31,30,29,28,33,41,40,32,28,26,28,34,39,43,46,48,47,43,38,33,28,26,23,28,33,35,36,37,37,34,32,37,42,38,31,29,28,28,26,27,27,32,39,39,34,29,26,27,31,35,38,40,42,42,37,32,30,27,28,23,26,31,34,36,38,38,35,32,34,36,34,29,28,28,28,28,28,29,32,36,35,32,29,26,26,29,32,35,36,36,34,32,30,29,28,31,25,27,31,34,37,38,39,36,32,30,30,28,27,27,28,28,30,30,31,32,32,32,30,28,26,26,28,30,32,33,30,28,27,27,28,27,34,32,33,35,37,38,38,38,34,30,26,24,24,24,24,24,26,28,30,31,30,30,29,29,29,29,29,29,30,31,30,26,23,22,22,23,23,39,40,42,42,42,40,38,37,32,27,23,21,21,21,21,20,22,27,29,30,29,28,28,28,29,31,30,29,28,28,26,23,19,17,17,18,18,46,53,54,52,47,42,38,34,29,24,22,21,20,19,18,17,20,25,27,29,29,29,28,27,26,28,28,26,24,22,20,17,15,13,13,13,16,52,61,62,59,52,43,36,30,26,22,22,23,21,18,18,17,20,25,27,28,30,31,29,25,23,23,22,21,19,16,14,13,12,12,12,12,15,47,53,55,54,47,40,33,28,24,22,24,26,24,19,19,20,24,29,31,31,31,31,27,21,18,17,15,14,13,11,11,12,15,21,23,19,17,39,40,42,43,40,35,30,25,23,23,26,30,27,20,21,26,30,34,34,33,31,30,24,17,13,11,10,8,7,7,10,14,20,31,35,27,20,30,30,31,31,29,26,24,22,22,24,27,31,29,25,28,34,33,30,29,29,28,25,20,14,11,12,11,10,9,7,9,15,23,35,39,31,24,23,22,21,21,19,18,19,20,23,25,28,30,30,30,35,42,35,23,21,24,23,20,16,11,11,14,15,15,13,9,10,17,26,35,39,33,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
