###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1659,-3226,-2899,-3577,-4093,-4031,-3738,-3802,-3791,-3264,-3668,-3622,-3603,-3730,-3604,-3637,-3472,-3634,-3876,-4001,-3775,-3929,-1389,-3804,-3859,-3129,-3255,-3459,-3256,-3495,-3139,-3891,-3505,-3493,-3637,-3407,-3940,-3517,-3449,-3867,-3733,-3867,-3901,-3856,-3846,-3654,-3860,-2022,-2753,-3155,-3457,-3522,-3185,-3208,-3320,-3468,-3546,-3501,-3707,-3624,-3949,-3483,-3749,-4058,-3709,-3882,-3954,-3575,-2520,-2487,-2764,-3005,-3244,-3082,-3079,-3490,-3271,-3324,-3649,-3717,-3669,-3427,-3454,-3319,-3948,-4217,-3898,-4015,-3118,-2998,-3098,-2793,-2362,-2670,-3056,-2955,-3047,-2901,-2937,-3360,-3312,-3211,-3169,-3807,-3433,-3060,-4142,-4136,-3861,-3883,-3798,-3260,-2782,-2787,-2941,-2516,-2440,-2688,-2833,-2921,-2956,-2865,-2338,-2871,-3235,-3305,-3822,-3193,-3989,-3829,-3997,-3567,-2999,-3339,-2830,-3141,-2967,-2768,-2494,-2917,-2773,-2484,-2393,-2725,-2871,-2815,-3020,-3136,-3806,-3539,-3376,-2968,-4002,-3701,-3202,-2866,-3052,-3129,-2931,-2982,-2772,-2614,-2511,-2651,-2304,-2195,-2847,-2854,-2849,-2818,-2797,-2737,-3360,-3440,-3333,-3288,-3490,-3235,-3310,-3367,-3084,-3325,-3012,-3158,-2796,-2813,-2580,-2361,-2599,-2777,-2780,-2643,-3113,-2977,-3174,-2950,-2820,-2906,-3708,-3516,-3457,-3509,-3363,-3135,-3550,-3161,-3109,-2928,-2776,-2462,-2772,-2519,-2683,-2187,-2178,-2832,-2699,-2668,-2919,-2547,-3742,-3869,-3629,-3228,-3621,-3396,-3186,-3355,-3421,-3075,-2929,-2748,-2667,-2635,-2163,-2444,-2500,-2458,-2347,-2689,-3236,-2478,-4034,-3896,-3883,-3801,-3897,-3680,-3160,-3477,-3371,-2940,-2963,-2931,-2723,-2572,-2681,-2736,-2678,-2950,-2858,-2900,-2840,-2873,-4531,-3984,-3710,-3731,-3453,-3478,-3693,-3442,-3580,-3094,-3061,-3235,-3236,-3300,-3286,-3017,-3541,-2963,-3388,-3102,-2990,-2943,-4261,-3974,-3853,-3873,-3989,-3874,-3821,-3494,-3390,-4017,-4078,-3362,-3656,-3050,-3753,-2898,-3775,-3560,-3520,-3262,-3345,-2966,-4086,-4030,-4049,-3999,-3647,-4058,-3848,-3766,-3224,-3032,-3855,-3606,-4160,-3642,-4356,-3781,-3720,-3579,-3446,-3269,-3299,-3325,-4383,-4399,-4155,-4171,-3904,-4127,-3671,-4383,-3598,-3899,-4072,-4350,-4405,-4179,-4236,-3960,-3733,-3784,-3768,-3524,-3519,-3542,-4659,-4104,-3755,-4218,-4370,-4502,-4406,-4243,-4412,-4236,-3938,-4081,-4093,-4183,-4180,-3947,-4366,-3990,-3642,-3602,-3630,-3599,-4499,-4436,-4578,-4874,-5041,-4304,-4505,-4734,-5038,-4648,-4522,-4503,-4448,-4304,-4647,-4390,-4935,-4565,-4033,-3929,-3614,-3861,-5204,-4718,-4667,-4441,-4880,-5169,-4964,-4260,-4363,-4811,-4445,-3945,-4583,-4474,-4404,-4441,-4384,-4386,-4036,-3883,-3611,-3827,-4707,-4629,-4523,-4742,-4840,-4798,-5073,-4561,-4749,-4364,-4057,-4289,-4588,-4883,-4728,-4341,-4440,-4333,-4023,-4106,-3819,-3975,-5042,-5000,-4832,-4716,-4631,-4693,-4392,-4419,-4531,-4834,-4673,-4225,-4487,-4364,-4372,-4265,-4354,-4538,-3938,-3822,-3526,-4254,-5067,-5199,-4871,-4882,-4763,-4992,-4892,-4508,-4788,-5243,-4328,-3940,-4098,-4649,-4470,-4140,-4199,-4226,-3753,-3882,-3944,-3924,-5124,-5057,-4959,-4971,-5185,-5096,-5190,-4974,-4880,-5245,-4478,-4719,-4764,-4532,-4407,-4171,-4370,-4176,-4131,-4200,-4139,-3934,-5049,-5102,-5022,-4955,-5299,-5389,-4936,-4888,-5006,-4716,-4826,-4572,-4672,-5026,-4801,-4235,-4278,-4251,-4153,-4281,-4156,-4021],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
