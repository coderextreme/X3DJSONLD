###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore8-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2821169622239519,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[21,22,22,22,21,19,17,15,14,14,15,17,21,26,25,19,13,9,6,6,6,5,8,14,16,13,12,11,10,8,7,8,9,9,8,6,19,21,21,21,20,18,16,15,15,15,16,16,20,25,26,24,20,14,9,6,5,5,9,14,16,13,12,10,8,8,9,10,11,10,9,7,17,20,21,21,19,17,16,15,15,15,15,15,17,22,25,28,26,20,14,8,5,6,9,14,15,13,11,9,8,9,11,11,11,11,10,9,15,17,21,23,22,20,18,16,15,15,15,15,16,18,21,25,26,24,21,14,10,8,9,13,15,14,13,11,10,10,11,11,10,10,10,10,12,15,19,24,24,24,21,17,16,15,14,14,14,15,17,21,24,28,27,22,16,10,9,12,14,14,14,13,12,11,10,9,8,9,10,11,9,11,15,20,24,27,24,20,18,16,14,14,14,14,15,17,21,24,24,21,16,11,9,11,12,13,13,13,12,10,8,9,9,9,10,11,6,7,11,15,23,29,27,24,21,17,15,14,13,13,13,14,17,19,20,18,15,12,9,10,10,11,11,12,12,8,6,8,10,10,10,11,5,5,7,11,18,24,26,27,23,20,17,15,13,12,12,13,15,17,17,15,13,10,9,9,10,11,11,12,11,7,5,8,10,10,10,10,5,5,5,7,11,18,24,29,27,23,20,17,14,12,11,12,13,16,16,13,10,8,8,8,10,11,12,11,11,7,5,7,8,10,11,9,5,5,5,5,8,13,19,25,26,26,22,17,14,12,11,12,13,15,15,12,10,9,9,9,10,11,11,11,11,8,6,7,8,10,11,9,6,6,5,5,7,10,13,19,24,29,24,17,13,12,12,12,13,14,14,12,11,11,11,10,10,10,11,12,12,10,8,9,9,10,10,10,7,6,5,5,6,7,11,16,20,23,20,14,12,12,12,11,11,12,12,11,11,12,12,10,9,9,10,12,12,10,9,10,10,10,10,10,7,6,6,6,5,5,9,15,15,15,13,11,10,11,10,9,9,10,10,9,11,13,13,10,8,8,9,12,12,10,9,10,9,9,9,10,9,7,7,6,6,6,10,14,14,12,11,10,9,9,9,9,9,9,9,8,9,12,13,10,8,8,9,12,12,11,10,10,10,10,10,11,11,8,7,6,7,8,10,13,12,11,10,9,8,8,9,9,10,9,8,7,8,11,12,9,8,8,9,12,13,13,13,11,11,11,12,12,14,11,10,8,8,9,11,11,11,10,9,8,8,8,8,9,10,9,9,8,9,11,11,11,11,10,10,11,13,14,14,13,12,12,13,13,18,15,13,11,10,10,10,9,9,10,9,7,7,7,8,9,9,10,10,10,11,11,12,14,14,12,11,11,12,14,16,15,14,13,13,14,18,16,14,12,11,10,9,9,9,9,8,7,6,6,7,8,9,10,11,12,12,12,13,15,15,13,11,11,11,14,16,15,15,13,13,14,15,14,14,12,11,10,9,9,8,8,8,8,7,6,6,7,9,10,12,13,14,13,14,15,15,13,11,10,10,13,15,16,15,13,13,15,11,11,11,11,11,10,9,9,8,8,8,8,7,6,6,7,9,11,13,13,13,13,13,14,14,13,11,10,10,12,14,15,15,13,13,15,7,7,8,8,10,10,9,9,8,8,7,7,6,6,6,8,9,11,11,12,12,10,11,13,14,13,12,10,10,11,12,13,14,13,13,17,4,5,6,7,9,10,9,8,8,6,6,6,6,6,7,8,9,10,11,12,11,10,11,13,14,13,12,10,10,11,12,13,15,17,18,21,4,5,6,6,8,9,9,8,6,4,4,6,6,6,7,7,7,9,10,12,12,12,12,13,14,13,12,11,10,11,12,14,17,21,26,26],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
