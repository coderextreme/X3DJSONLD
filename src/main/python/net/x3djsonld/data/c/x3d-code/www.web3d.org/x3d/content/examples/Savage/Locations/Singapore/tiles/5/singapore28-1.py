###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore28-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4567512097838313,103.60419903412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[24,27,34,41,36,30,23,17,19,22,22,20,19,18,18,20,21,23,24,26,28,31,34,38,41,44,44,42,40,37,35,31,29,32,37,46,55,25,28,35,42,37,31,25,20,20,21,22,21,21,21,23,24,25,27,28,29,30,33,37,41,45,47,48,47,44,40,36,31,29,29,33,39,46,26,29,36,42,37,31,27,23,22,21,22,22,24,25,27,28,30,31,32,32,33,35,39,43,48,51,52,51,47,42,37,32,29,28,29,32,37,30,33,38,42,40,35,32,30,27,24,24,25,27,29,29,30,31,32,32,32,32,35,40,45,50,54,54,53,49,44,38,33,28,26,26,28,31,34,37,40,43,42,40,38,36,31,25,26,28,30,32,32,32,32,33,33,31,32,35,40,47,52,57,57,55,51,45,39,33,28,25,24,25,26,39,42,43,43,44,44,43,40,35,29,31,34,35,35,35,34,33,33,32,31,32,36,41,47,52,56,57,55,52,47,41,35,30,26,24,25,27,44,47,46,45,47,50,46,42,38,33,36,40,40,39,38,35,34,33,32,30,32,37,42,47,51,55,56,55,52,48,44,39,34,29,25,27,29,42,44,45,45,49,53,50,46,43,40,43,47,46,43,40,37,35,33,32,30,33,38,43,46,49,53,54,55,53,49,45,40,35,28,24,27,30,40,41,42,45,51,56,54,52,49,47,50,54,51,47,43,39,36,33,31,30,33,39,43,45,47,49,52,53,53,50,46,41,35,27,22,26,30,38,38,40,43,49,55,53,51,51,53,56,60,57,51,46,40,37,35,33,31,32,37,40,42,43,45,47,49,50,47,43,38,32,26,22,24,27,35,35,37,41,47,53,51,48,52,56,62,67,63,55,48,42,39,37,34,31,31,33,36,38,39,41,42,44,45,44,40,35,30,25,22,22,23,32,32,34,37,42,47,46,44,49,56,62,68,63,56,49,43,40,38,35,31,30,31,32,34,36,37,38,39,39,38,35,31,27,24,21,21,21,29,29,31,33,37,41,41,40,45,52,59,66,61,53,48,44,41,39,35,31,28,27,28,30,32,34,35,34,33,31,29,27,24,22,21,20,19,28,28,29,30,33,35,36,37,42,48,54,59,56,49,45,43,42,40,36,32,29,26,26,27,29,30,31,30,28,27,26,23,22,21,21,20,19,28,27,27,29,30,30,32,33,38,44,48,52,48,42,41,42,42,40,37,33,30,27,25,25,25,26,27,27,26,25,23,20,19,19,20,20,21,31,29,28,28,28,27,28,30,35,40,43,46,43,38,38,40,41,40,37,34,32,29,27,25,24,24,25,24,24,23,21,19,18,18,20,22,24,36,33,32,29,27,26,27,28,31,35,38,41,38,34,35,37,39,39,37,35,33,31,29,27,25,24,24,23,22,22,21,19,18,19,21,24,26,42,40,36,31,28,25,25,27,28,31,33,35,34,32,33,35,37,37,36,35,34,33,32,29,27,25,24,22,21,21,21,20,19,20,22,25,27,51,48,42,35,30,26,25,24,25,27,28,29,30,30,31,33,35,35,36,35,35,35,34,33,30,27,24,22,21,21,21,21,21,22,24,26,27,54,52,45,37,32,26,24,22,23,24,24,25,26,28,30,32,33,33,34,34,35,36,35,33,30,27,23,21,21,21,21,22,22,24,25,26,27,53,52,45,38,33,27,24,21,21,21,22,23,24,26,27,30,31,30,31,32,33,33,32,30,28,25,23,22,21,21,22,23,24,25,26,27,28,49,50,44,38,33,27,24,20,20,19,20,21,23,24,26,27,28,27,27,28,29,29,29,27,25,23,22,21,21,21,22,24,25,26,26,27,28,43,44,41,38,32,26,23,20,20,19,20,22,22,23,24,24,24,23,23,23,24,24,24,23,22,21,21,21,21,21,22,24,26,26,27,27,28],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
