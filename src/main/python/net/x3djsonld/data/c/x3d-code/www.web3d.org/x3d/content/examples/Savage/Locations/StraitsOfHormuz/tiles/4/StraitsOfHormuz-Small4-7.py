###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/StraitsOfHormuz-Small4-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(25.8972799768378,56.180963250426785,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.0071733817,zDimension=23,zSpacing=0.0050952244,height=[1251,1220,1280,835,539,825,815,573,409,679,858,938,768,1203,1058,675,920,852,940,1173,835,537,1282,1178,1161,808,586,847,798,465,450,561,842,744,1099,965,1160,1114,998,1162,1129,805,787,455,1321,1145,919,667,538,981,833,501,430,432,552,767,1252,839,788,883,872,1099,1167,542,444,346,1457,1288,1275,1107,613,933,873,693,440,424,743,934,1158,801,676,674,576,877,1144,461,399,369,1504,1337,1138,1152,607,856,988,837,621,476,436,794,868,936,514,528,509,702,816,810,548,593,1465,1345,1042,889,862,804,1018,923,701,628,465,451,527,633,490,569,552,521,568,904,738,1103,1469,1277,1106,817,1083,725,1004,1038,812,582,651,585,541,480,504,660,513,608,745,1023,809,1136,1438,1255,1216,1076,1113,886,1052,1122,931,735,702,856,707,564,495,928,568,610,807,1136,1060,1101,1316,1265,1208,1058,1144,935,884,1170,1038,854,798,1055,590,884,534,912,1008,735,1040,1194,1061,1102,1344,1273,1220,1096,1311,1101,793,1147,1116,924,996,1131,693,520,693,911,1108,1129,1258,1240,1060,1107,1434,1338,1281,1334,1512,1349,962,1060,1165,1085,1052,1084,723,521,701,662,1086,1196,1287,1188,1098,1145,1826,1619,1641,1461,1479,1507,1464,1277,1306,1256,1324,1177,791,544,939,1108,1016,1085,1116,1226,1218,1155,1785,1800,1679,1498,1453,1526,1475,1211,1398,1545,1454,1125,711,639,1316,1267,1215,1267,1167,1180,1338,1214,1670,1728,1638,1488,1448,1484,1592,1282,1456,1536,1357,1072,762,851,1530,1384,1484,1265,1231,1115,1330,1222,1548,1666,1559,1459,1452,1437,1603,1543,1730,1569,1320,1106,995,830,1525,1471,1508,1381,1154,1135,1290,1237,1163,1597,1716,1523,1265,1274,1535,1901,1934,1734,1265,1103,980,831,1528,1449,1467,1453,1292,1097,1131,1247,856,1400,1571,1508,1238,1274,1471,1901,1972,1763,1492,1286,1029,840,1426,1441,1407,1442,1289,1058,1110,1153,440,902,1411,1535,1233,1200,1355,1721,1565,1504,1680,1352,1112,923,965,1478,1355,1349,1289,1335,983,1158,544,1197,1244,1293,1167,1135,1284,1284,1308,1312,1391,1519,1264,1203,1102,1525,1408,1367,1322,1296,1217,941,1442,1398,1290,1253,1332,1135,1178,1201,1242,1301,1264,1570,1614,1497,1270,1552,1455,1316,1284,1209,1159,1100,1461,1481,1363,1377,1405,1155,1256,1180,1195,1216,1253,1576,1692,1566,1554,1521,1479,1422,1271,1294,1006,871,1594,1531,1401,1389,1380,1102,1245,1392,1207,1214,1271,1708,1599,1561,1534,1555,1488,1487,1283,1281,1208,1084,1594,1525,1397,1389,1382,1099,1251,1380,1214,1214,1272,1724,1602,1558,1541,1553,1488,1495,1254,1284,1209,1083],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(26.3456597347756,56.33160427093061,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
