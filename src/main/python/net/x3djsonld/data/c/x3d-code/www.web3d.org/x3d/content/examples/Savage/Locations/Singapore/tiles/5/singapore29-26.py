###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore29-26.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4654829221618253,103.9632748873545,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[32,33,34,32,29,27,26,27,29,31,34,38,43,47,50,50,50,51,52,52,51,49,45,41,37,34,32,32,34,37,40,42,45,47,49,51,36,37,38,35,31,29,27,28,29,31,34,38,42,46,49,51,52,53,53,53,51,49,45,41,37,35,34,35,38,41,43,45,47,50,52,53,40,40,40,37,34,31,29,28,29,32,35,38,42,45,47,48,50,52,54,53,51,48,45,42,39,38,38,39,42,44,46,48,50,52,54,55,42,42,42,39,37,33,30,29,30,32,35,38,41,43,44,46,48,50,53,53,51,49,46,44,42,41,43,44,46,47,48,50,52,53,55,55,41,43,43,42,40,36,32,31,31,33,36,38,39,40,41,42,45,47,50,52,52,52,49,47,45,45,46,48,49,50,50,51,52,53,54,54,39,41,43,42,41,38,34,33,33,34,36,37,37,38,38,39,41,44,48,51,53,54,52,50,49,48,50,51,52,52,51,51,51,50,51,52,37,39,41,40,39,36,33,33,33,34,35,35,35,35,35,37,39,42,46,50,54,55,54,53,52,52,52,53,53,53,50,49,48,47,47,48,35,36,37,37,37,34,32,32,32,33,33,33,33,33,33,35,37,40,44,49,54,55,55,55,54,54,54,54,54,53,50,47,45,44,44,44,33,33,34,33,33,32,31,30,30,30,30,30,31,32,33,35,38,41,44,49,54,56,55,55,55,55,55,56,55,53,51,48,45,43,43,42,31,31,30,29,28,28,28,28,27,27,27,28,29,31,33,36,38,41,44,49,53,55,55,55,55,55,56,56,55,54,52,49,46,43,41,39,28,28,27,26,25,25,25,25,25,26,26,27,29,31,34,36,38,42,46,49,52,53,52,52,52,53,54,55,55,54,52,49,46,42,40,39,26,25,25,23,21,22,23,23,24,25,26,27,29,31,34,37,39,43,47,50,51,51,50,49,49,50,51,52,54,54,52,49,45,42,39,38,22,22,22,20,19,20,22,23,23,25,26,28,30,33,35,38,40,43,46,48,48,48,47,46,47,48,49,50,52,53,51,49,45,42,39,37,19,19,20,18,17,19,22,22,23,25,27,29,32,34,37,39,42,44,45,46,45,45,44,44,44,45,47,49,51,52,50,48,45,42,38,36,18,19,19,18,18,20,22,22,23,26,29,31,33,36,38,40,41,42,43,42,41,41,40,40,40,42,44,46,48,50,48,46,44,41,38,36,18,19,19,19,20,21,22,23,24,28,32,34,36,37,38,40,41,41,40,39,38,37,36,35,36,38,41,44,45,47,45,44,43,41,37,35,18,19,19,20,21,22,23,24,26,29,34,36,38,39,40,40,40,39,38,37,35,34,33,33,34,36,39,42,43,44,43,42,41,39,36,33,17,19,20,22,24,25,26,26,28,31,35,38,40,42,43,41,39,38,36,34,32,31,30,30,31,33,37,40,41,42,41,40,39,37,34,31,18,20,22,24,25,27,28,28,30,33,36,39,41,43,43,41,38,37,35,33,31,29,28,27,29,31,34,37,38,39,40,39,37,35,32,30,20,22,23,25,27,28,30,31,32,34,37,40,42,43,42,40,37,36,34,33,31,29,26,25,26,28,32,35,36,37,39,39,37,35,31,29,19,21,23,25,27,30,31,33,34,36,38,40,42,43,42,40,39,37,35,33,32,29,25,24,25,27,30,33,34,36,38,39,37,35,32,30,17,20,22,25,28,31,33,35,36,38,40,41,42,42,42,41,40,38,36,34,33,30,25,24,24,25,29,32,33,35,38,39,37,36,34,32],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
