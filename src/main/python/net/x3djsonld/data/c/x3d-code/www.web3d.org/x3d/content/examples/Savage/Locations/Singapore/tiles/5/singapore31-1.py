###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore31-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4829463469178132,103.60419903412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[43,38,36,34,36,39,43,48,58,71,74,75,66,55,48,43,47,55,58,56,52,45,41,39,37,36,35,35,35,34,35,36,36,35,34,33,32,50,44,42,40,42,45,47,47,58,70,75,78,70,59,52,46,50,60,60,56,49,41,37,35,34,34,33,33,33,34,36,38,39,38,37,36,35,57,50,47,46,48,52,55,59,66,75,79,83,77,68,59,50,52,61,62,58,51,41,36,33,32,31,31,31,32,33,35,37,38,39,38,36,34,65,56,53,52,55,59,66,72,76,80,83,86,81,74,64,54,55,62,62,60,53,43,36,33,30,29,29,29,30,31,33,35,37,38,38,35,32,74,65,64,65,67,70,76,83,84,85,82,79,74,69,61,52,53,60,62,61,55,46,38,34,31,28,27,26,27,29,31,33,34,34,34,31,28,84,76,77,79,80,81,86,92,90,87,80,71,65,61,55,50,51,57,60,63,58,49,41,36,31,28,26,25,25,26,27,29,30,30,29,27,24,96,90,92,95,95,95,93,90,84,78,71,63,57,52,48,44,45,50,55,59,58,51,44,38,33,30,27,25,24,25,25,26,26,26,25,23,23,109,105,107,109,110,109,99,86,76,67,61,55,49,44,40,38,39,42,48,55,56,53,47,40,35,32,29,26,24,23,23,23,22,21,20,21,22,125,122,119,115,111,107,96,84,74,64,56,49,43,38,36,35,36,38,43,49,52,52,50,47,42,37,32,28,25,24,24,24,24,22,22,22,23,141,139,129,119,110,100,92,84,73,63,52,42,37,33,31,32,33,34,38,44,48,51,53,54,50,42,35,30,27,26,25,26,27,25,24,23,24,145,139,128,115,103,90,83,77,69,62,52,42,36,31,31,31,31,32,34,37,41,45,48,51,49,41,35,30,26,25,25,26,27,27,26,26,26,146,136,123,110,95,78,73,69,65,61,53,43,36,31,30,29,30,31,31,31,34,38,42,45,45,40,34,29,25,23,23,25,27,28,29,28,28,133,121,111,100,87,73,65,58,55,53,46,39,33,29,27,28,28,28,27,26,28,31,35,38,37,35,32,27,23,22,22,23,26,27,29,29,31,116,104,96,90,80,70,59,47,44,42,38,34,29,25,25,26,26,25,24,23,23,25,28,29,30,30,28,25,22,20,20,22,24,26,29,31,33,108,96,87,77,69,61,51,40,38,36,33,30,27,24,24,26,26,25,24,23,23,23,25,26,27,28,26,24,22,21,20,21,22,24,27,29,33,104,91,78,65,57,50,43,35,33,32,29,27,25,24,24,26,26,26,25,23,23,22,23,24,26,26,25,23,22,21,21,22,22,23,24,27,31,100,89,75,61,52,45,39,33,31,29,27,26,25,24,25,27,27,26,25,24,23,23,23,24,25,26,25,24,25,25,25,25,24,24,26,28,32,96,89,75,60,51,42,37,31,29,27,27,26,26,26,27,28,27,27,26,25,24,24,24,24,25,25,25,26,28,30,30,28,26,27,28,31,34,89,84,71,57,49,41,35,30,29,27,27,28,28,28,28,29,28,28,27,25,25,25,25,25,25,25,27,29,31,33,34,31,28,28,29,32,34,80,76,65,54,47,40,34,29,28,27,28,30,31,30,30,30,29,28,26,25,25,26,26,25,25,26,29,31,34,36,36,32,30,29,29,31,33,69,65,57,49,44,39,33,29,28,27,29,32,32,31,31,29,28,27,26,27,28,29,29,28,28,28,30,33,36,37,36,32,29,29,29,32,33,57,54,48,43,40,37,33,28,28,27,30,33,33,31,29,27,26,26,27,30,32,34,34,33,33,31,32,35,36,37,35,32,28,28,29,32,34],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
