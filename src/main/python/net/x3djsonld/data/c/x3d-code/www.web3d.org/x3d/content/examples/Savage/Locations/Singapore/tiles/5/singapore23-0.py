###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore23-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4130926478938615,103.589836,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[46,42,40,38,35,33,31,29,28,27,27,28,27,26,26,25,25,24,25,26,29,33,35,36,35,32,28,25,22,20,17,17,17,17,18,19,43,40,38,36,34,32,30,29,29,29,29,29,29,27,26,26,26,26,26,27,29,34,37,37,35,31,28,26,23,19,17,18,19,19,20,21,40,37,35,34,32,30,30,29,29,28,29,30,30,29,28,26,26,26,27,28,30,36,39,39,37,32,28,25,22,20,18,19,20,22,24,24,39,35,33,32,30,30,30,29,29,28,29,31,31,31,29,27,27,27,28,29,32,38,40,41,38,33,28,25,22,21,20,20,21,24,27,29,38,34,31,30,30,30,30,29,29,29,30,31,32,32,30,28,28,28,29,30,33,39,41,41,38,34,29,25,22,21,20,20,21,25,28,30,37,33,31,29,29,31,30,30,30,30,30,31,32,33,32,31,29,28,29,32,35,39,41,41,38,34,30,26,23,21,20,21,22,25,29,31,37,33,31,29,30,32,31,31,31,30,31,32,33,35,35,34,32,30,31,33,36,40,43,42,40,36,32,28,25,23,22,22,23,25,28,32,37,33,32,30,32,33,33,32,32,31,32,33,34,37,37,37,35,32,32,34,38,42,44,44,42,38,34,30,27,25,23,23,23,25,27,33,35,32,31,32,33,34,33,33,32,32,33,35,37,39,40,39,36,33,33,35,38,42,44,43,42,39,35,32,28,26,25,24,24,24,26,31,34,31,32,33,34,35,34,33,33,33,35,37,40,43,42,40,37,34,34,35,37,41,43,42,41,40,37,33,30,27,25,25,24,24,25,29,33,31,32,33,35,36,35,34,34,34,37,41,43,46,45,43,40,36,35,35,36,38,40,40,39,38,37,35,32,30,27,26,25,25,24,26,32,31,32,34,35,37,36,35,35,36,39,43,46,48,49,48,44,39,37,35,34,35,35,35,36,37,37,36,34,32,30,28,27,25,24,23,33,32,34,35,37,39,38,37,37,38,40,45,47,48,48,47,44,40,36,33,32,32,32,32,33,35,36,37,36,34,32,31,29,26,23,24,35,34,36,37,40,42,41,40,40,39,41,45,45,45,44,43,40,37,34,31,29,29,30,30,32,34,36,37,37,35,33,32,31,27,24,25,36,36,37,39,42,45,44,44,42,41,42,44,43,41,40,39,37,35,32,29,27,27,27,29,31,33,35,36,36,33,31,32,31,27,24,26,37,37,39,41,44,47,48,47,45,42,42,42,40,37,35,35,33,32,30,27,25,24,25,27,29,31,33,33,32,29,28,29,29,27,25,27,37,38,40,42,45,48,47,47,44,41,40,39,37,35,33,32,31,31,29,27,25,24,24,26,28,29,30,30,29,27,25,26,27,25,23,28,38,40,41,42,43,45,44,44,41,39,36,35,34,34,33,32,31,31,30,29,27,25,25,26,27,26,25,25,25,24,23,24,24,23,21,26,38,42,43,44,43,42,42,41,39,37,35,34,34,34,33,32,32,32,31,31,29,27,26,28,28,26,24,24,23,23,23,23,23,21,21,24,38,43,44,45,43,41,39,37,36,35,35,37,38,38,37,34,33,33,33,33,32,28,28,31,31,29,26,24,23,23,23,23,24,22,21,21,38,44,46,47,44,41,38,35,34,33,35,38,39,39,37,34,33,32,32,33,32,30,31,34,35,33,30,26,24,23,23,24,25,23,21,19,37,44,47,50,47,44,39,34,32,30,33,36,37,37,35,32,29,28,28,29,30,32,34,38,40,38,36,31,26,25,24,24,24,22,20,18,35,42,47,52,49,46,40,33,30,27,30,33,35,35,32,29,27,26,27,29,31,35,38,41,44,44,41,36,30,27,25,24,23,22,20,18],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
