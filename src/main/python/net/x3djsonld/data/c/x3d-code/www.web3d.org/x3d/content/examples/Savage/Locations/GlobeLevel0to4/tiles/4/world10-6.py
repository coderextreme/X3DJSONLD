###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world10-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2687,-3931,-3764,-4856,-4590,-4744,-5460,-5824,-5349,-5178,-5473,-5074,-4798,-4588,-4435,-4854,-5161,-5111,-4915,-4791,-4708,-4558,-3543,-3634,-4171,-4239,-5005,-5196,-5112,-5151,-5539,-5261,-5322,-4585,-4819,-4497,-4718,-4822,-5237,-5169,-5098,-4967,-4822,-4686,-2953,-3122,-3874,-4654,-4827,-5031,-5714,-5527,-5152,-5338,-4444,-5410,-4886,-4896,-4761,-5216,-5369,-5262,-5174,-5077,-4940,-4775,-2271,-3520,-3972,-4093,-4837,-5114,-5308,-5038,-5552,-5371,-5345,-4822,-5353,-5124,-5016,-5132,-5530,-5383,-5259,-5160,-4995,-4847,-3028,-3946,-4245,-4175,-5158,-5283,-5294,-5539,-5748,-5482,-5634,-5799,-5675,-5306,-5502,-5619,-5599,-5438,-5229,-5291,-5018,-4878,-4053,-3872,-4814,-4171,-4986,-4619,-5163,-5629,-5442,-5634,-5738,-5948,-5576,-5844,-5665,-5735,-5648,-5495,-5387,-5230,-5048,-4878,-3854,-4180,-3867,-4343,-4583,-5182,-5448,-5345,-4837,-5381,-5633,-5602,-6173,-5823,-5468,-5741,-5682,-5509,-5372,-5224,-5033,-4910,-3299,-3989,-3984,-4998,-4316,-4553,-5208,-5435,-5466,-5516,-5793,-6045,-5645,-5073,-5780,-5687,-5661,-5632,-5564,-5235,-5067,-4939,-3497,-3840,-4493,-4918,-4427,-4790,-4985,-5480,-5116,-5784,-5938,-5571,-5733,-5937,-5528,-5677,-5531,-5311,-5332,-5218,-5071,-4970,-3335,-4269,-3682,-3847,-4490,-5038,-4949,-4917,-5375,-5383,-5658,-5975,-5846,-5942,-5814,-5765,-5363,-5416,-5266,-5235,-5096,-4980,-2810,-3591,-3938,-3651,-4620,-4784,-4649,-4993,-5419,-5176,-6051,-6010,-5824,-5765,-5632,-5243,-5368,-5303,-5317,-5159,-5100,-5003,-3920,-3304,-4155,-3777,-3544,-4364,-4600,-4724,-5174,-5320,-5634,-5842,-5737,-5579,-5643,-5278,-5587,-5204,-5212,-5197,-5072,-4983,-3563,-3078,-3715,-3634,-4631,-3918,-4427,-5278,-5398,-5185,-5304,-5716,-5514,-5451,-5219,-5397,-4977,-5125,-5312,-5273,-5082,-4971,-4124,-3100,-3403,-4237,-4464,-4256,-4719,-4913,-5305,-5485,-4738,-5131,-5744,-5251,-5202,-5283,-5040,-5185,-5105,-5241,-5084,-4991,-3844,-2690,-3222,-3783,-4002,-4087,-4882,-5012,-4978,-5156,-4629,-5217,-5057,-4909,-4994,-5126,-5072,-5215,-5280,-5239,-4991,-4900,-3884,-3031,-3021,-3837,-4000,-3866,-4117,-4568,-4708,-4683,-5098,-4849,-4831,-4901,-4908,-4759,-5091,-5163,-5151,-5262,-5113,-5016,-3304,-3706,-3445,-3621,-3395,-3681,-4244,-4636,-4533,-5552,-4854,-4517,-4950,-4668,-4469,-4782,-4597,-5212,-5272,-5314,-5140,-5028,-3522,-3859,-2667,-3669,-3281,-3288,-4082,-4328,-3794,-4280,-4442,-4844,-5102,-4875,-4708,-3560,-4704,-4997,-5256,-5346,-5241,-5131,-4022,-2754,-2402,-2195,-3558,-3650,-3821,-4287,-3862,-4724,-4916,-4814,-4953,-4534,-4212,-4060,-3047,-5041,-5146,-5409,-5302,-5172,-3876,-3922,-3549,-2196,-3871,-3924,-3230,-3900,-3828,-4424,-4586,-4179,-4835,-4719,-4400,-4114,-3795,-4816,-5277,-5424,-5367,-5241,-3525,-3741,-3522,-2715,-2733,-3612,-3396,-3580,-3892,-3828,-4164,-4547,-4622,-4362,-4425,-4252,-4548,-4755,-5220,-5442,-5412,-5261,-4310,-3875,-3388,-3658,-3547,-2886,-3836,-3225,-3754,-3935,-4184,-4169,-4570,-4285,-4194,-4023,-1492,-4564,-5441,-5442,-5419,-5304,-4498,-3714,-3785,-4020,-3019,-2518,-3200,-3074,-3798,-3390,-3731,-4024,-4382,-4319,-4296,-3920,-1948,-5097,-5444,-5364,-5428,-5400,-4365,-3941,-4090,-3674,-2668,-2121,-3245,-2832,-3705,-3628,-3787,-3891,-3830,-4308,-4203,-3947,-936,-5187,-5443,-5435,-5414,-5358],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
