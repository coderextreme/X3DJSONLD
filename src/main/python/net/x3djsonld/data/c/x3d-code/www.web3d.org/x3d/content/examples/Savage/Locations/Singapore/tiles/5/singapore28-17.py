###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore28-17.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4567512097838313,103.83400758019333,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[30,29,30,30,27,22,18,14,13,14,14,13,11,10,10,9,10,13,15,18,18,17,15,13,10,8,7,8,10,11,12,10,8,6,5,7,9,30,29,31,31,26,21,17,16,16,17,15,13,11,10,10,9,10,11,12,14,15,15,14,12,11,10,9,8,8,9,10,9,8,6,5,5,6,29,30,32,31,25,18,17,17,18,19,16,13,11,9,9,9,10,10,10,10,10,11,12,12,11,11,10,7,6,6,7,7,8,6,5,5,5,25,28,30,31,26,21,20,20,20,20,17,14,12,11,10,10,10,10,10,10,10,11,12,12,10,8,6,6,6,6,6,7,7,6,5,5,5,21,26,29,30,27,24,23,23,22,21,18,15,14,13,12,11,11,9,9,9,10,11,12,12,10,4,3,4,5,6,6,6,7,6,6,5,4,18,22,27,30,29,27,26,25,23,21,18,15,14,13,12,11,11,10,9,9,10,8,8,8,5,0,-1,0,2,4,5,6,6,6,6,5,4,15,19,25,30,30,29,28,27,24,21,18,14,14,13,12,10,10,10,10,10,8,5,4,4,0,-7,-8,-4,0,2,5,6,6,6,6,5,4,13,14,19,24,26,27,28,28,25,20,16,13,12,12,10,9,9,9,10,10,8,5,3,1,-1,-7,-9,-8,-4,0,2,4,5,6,6,5,5,10,10,12,16,21,25,28,28,25,19,15,11,11,10,8,7,7,7,8,9,8,6,3,0,-2,-5,-8,-10,-9,-5,0,2,5,6,6,6,6,11,10,10,13,18,23,26,27,24,19,15,12,11,10,7,5,6,8,8,9,8,7,4,1,-1,-4,-7,-10,-10,-8,-4,0,2,4,5,6,6,12,11,10,12,16,21,24,25,22,19,16,13,11,9,7,4,6,9,9,9,8,8,6,2,0,-3,-7,-9,-10,-11,-9,-5,0,2,5,6,6,14,13,11,11,15,20,23,25,24,22,18,14,11,9,6,3,4,7,8,9,9,9,7,4,1,-2,-5,-8,-10,-12,-11,-8,-4,0,2,4,5,16,15,12,11,14,18,23,26,26,24,20,15,12,10,6,1,1,4,6,9,9,9,8,7,4,0,-3,-6,-10,-11,-11,-11,-9,-5,0,2,5,14,13,10,10,12,16,20,24,24,22,18,13,9,6,3,0,0,1,4,7,8,9,8,8,6,3,0,-3,-7,-10,-11,-12,-12,-8,-4,0,2,9,7,7,8,10,12,16,19,19,18,14,10,4,0,0,0,0,0,1,4,6,8,9,9,8,7,3,0,-4,-8,-11,-12,-12,-12,-9,-5,0,6,5,5,5,8,10,12,14,14,13,11,7,2,-1,-2,-1,0,0,0,1,4,7,8,9,8,8,6,2,-1,-5,-9,-11,-12,-13,-12,-8,-4,5,3,3,3,7,10,10,9,8,7,6,5,2,0,-1,-3,-2,-1,0,0,1,4,6,8,9,9,8,6,3,-1,-6,-9,-12,-13,-12,-12,-9,4,3,2,2,6,8,8,7,5,4,4,5,2,0,-1,-3,-3,-2,-1,0,0,1,4,7,8,9,8,8,6,2,-2,-6,-10,-11,-12,-13,-12,4,3,2,2,4,6,7,7,6,5,4,4,2,0,0,-2,-3,-3,-3,-2,0,0,1,4,6,8,9,9,8,6,2,-1,-6,-10,-12,-13,-12,3,3,3,4,4,5,6,7,6,5,4,4,2,1,0,0,-2,-3,-3,-3,-2,-1,0,1,4,7,8,9,8,8,6,2,-2,-6,-8,-9,-9,1,3,4,6,6,6,6,6,6,5,4,4,3,2,1,0,-1,-2,-3,-3,-3,-2,0,0,1,4,6,8,9,9,8,6,3,0,-2,-2,-1,4,6,7,8,8,8,7,6,6,5,4,4,3,3,2,1,0,-1,-2,-4,-4,-3,-2,-1,0,1,4,7,8,9,8,8,6,3,1,1,2,9,13,12,11,10,10,9,8,6,5,4,4,4,4,3,2,1,0,-1,-3,-4,-3,-3,-2,0,0,1,4,6,8,9,7,5,4,3,2,2],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
