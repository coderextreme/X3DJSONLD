###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore16-22.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3519706612479037,103.90582275083842,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[15,14,14,15,17,17,18,18,19,21,24,28,33,38,41,42,40,37,32,30,29,30,32,35,36,36,33,30,27,26,26,26,27,28,27,26,16,14,13,14,15,16,16,16,18,20,23,27,32,37,42,44,44,42,39,36,35,34,36,37,38,38,34,31,27,25,25,25,27,28,27,26,16,14,13,13,14,15,15,16,18,21,24,28,31,36,41,44,45,45,44,42,39,38,38,38,38,37,34,30,27,25,25,24,26,28,28,27,14,14,13,14,15,15,15,17,19,22,26,29,32,35,39,42,44,46,46,44,41,39,38,36,34,33,31,29,28,27,26,26,26,27,28,28,12,13,15,15,15,16,16,18,20,24,28,31,32,34,35,38,42,45,46,45,42,40,38,36,32,30,29,29,28,28,28,27,27,27,28,28,10,12,14,14,15,16,17,19,21,24,28,30,31,31,32,35,39,43,45,44,43,41,40,37,34,31,30,29,29,29,28,27,26,26,28,28,9,12,13,14,14,16,17,19,21,24,27,29,30,30,29,31,36,40,42,43,42,42,41,40,36,33,31,30,29,28,28,27,26,26,27,28,10,12,13,14,14,14,15,17,20,22,25,27,29,28,28,30,33,35,36,38,40,41,42,41,38,36,33,31,30,28,27,25,25,26,27,28,11,13,14,14,14,14,14,16,19,21,24,26,28,29,29,29,30,31,31,33,37,40,42,42,41,38,35,32,31,29,26,25,26,27,27,28,12,13,14,14,14,15,15,17,18,20,23,26,29,31,31,31,30,30,30,32,37,40,41,42,43,42,38,34,32,30,28,28,30,31,31,30,13,13,14,14,15,16,17,17,17,19,23,27,31,34,34,33,31,30,31,33,36,39,40,42,44,44,41,38,35,32,32,32,34,36,34,33,14,14,14,14,14,16,17,16,15,18,22,27,33,36,36,35,33,32,32,33,34,36,38,40,44,45,44,42,38,36,36,36,38,39,37,35,15,14,13,13,14,14,15,14,13,16,20,27,33,37,37,37,37,35,33,32,32,34,36,39,43,46,46,45,42,40,39,39,40,40,38,36,15,13,12,12,13,14,15,14,13,15,19,25,32,36,37,38,39,38,35,33,32,33,37,40,44,46,47,47,45,42,40,38,38,37,37,36,14,13,12,12,13,13,14,14,14,15,17,23,30,34,36,39,41,40,36,34,33,35,39,43,44,46,48,49,47,43,38,35,33,33,34,34,14,13,12,12,13,13,13,13,13,14,17,21,26,31,35,38,40,39,36,33,33,34,38,41,42,44,47,47,45,42,36,31,29,29,30,31,13,13,13,13,13,13,12,12,11,13,17,20,23,28,33,37,38,37,34,32,32,33,36,38,39,42,44,45,42,38,32,28,26,25,25,26,14,14,14,13,13,13,13,12,11,13,16,19,21,26,32,35,37,36,34,33,33,33,34,36,38,40,43,43,40,36,31,27,25,23,23,23,14,15,15,14,13,13,14,13,13,14,16,18,20,24,30,34,36,36,36,35,35,34,34,35,38,40,42,42,39,35,31,28,25,23,22,21,13,14,15,14,14,15,15,15,14,15,16,18,20,24,29,33,35,37,37,36,35,34,34,36,38,40,42,42,38,34,31,28,25,23,21,20,12,13,15,15,14,15,16,16,17,17,17,18,20,23,28,32,35,37,37,36,34,33,35,36,39,41,42,40,36,33,30,27,24,22,21,20,12,14,16,16,15,16,16,17,18,19,19,18,19,22,27,31,35,37,37,36,34,34,35,37,40,41,40,38,35,31,28,26,24,22,21,20,13,16,18,18,17,16,16,17,18,19,20,20,19,22,25,30,35,38,38,38,36,36,36,37,40,41,39,37,34,31,27,25,24,24,22,21],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
