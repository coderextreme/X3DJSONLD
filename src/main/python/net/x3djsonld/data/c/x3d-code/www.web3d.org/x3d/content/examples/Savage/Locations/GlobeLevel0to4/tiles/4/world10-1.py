###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world10-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1896,57,-3601,-5431,-4811,-5013,-5169,-5360,-5313,-5331,-5497,-5403,-5539,-5602,-5458,-5399,-5337,-5163,-5194,-5210,-5254,-5400,-382,-1467,-5517,-5130,-5158,-5255,-5404,-5457,-5293,-5423,-5586,-5663,-5450,-5545,-5168,-5367,-5262,-5127,-5368,-5126,-5270,-5189,-3274,-5286,-5011,-5007,-4772,-5193,-5118,-5267,-5219,-5269,-5462,-5516,-5480,-5433,-5216,-5369,-5280,-5211,-5174,-5111,-5220,-5132,-4838,-4707,-4459,-4572,-4970,-5025,-5534,-5425,-5692,-5521,-6011,-5349,-5369,-5392,-5434,-5315,-5290,-5054,-5085,-4940,-5133,-5124,-4580,-4378,-4257,-4544,-4957,-5297,-5288,-5245,-5325,-5349,-5680,-5688,-5322,-5630,-5430,-5123,-5337,-5393,-4604,-5074,-5266,-5022,-4390,-4263,-4182,-4563,-5127,-5456,-5495,-5338,-5329,-5229,-4956,-5484,-5379,-5234,-5183,-5402,-5309,-5139,-5000,-5042,-5049,-4869,-4338,-4330,-4390,-4569,-5088,-5397,-5487,-5342,-5361,-5213,-5289,-5124,-5358,-5331,-4916,-5214,-4988,-4998,-4828,-5059,-4888,-4648,-4444,-4344,-4526,-4843,-5135,-5316,-5416,-5297,-5365,-5373,-5258,-5197,-5016,-4907,-4786,-4961,-4776,-4846,-4788,-4715,-4063,-4340,-4359,-4462,-4627,-5058,-5296,-5403,-5353,-5215,-5382,-5286,-5308,-5209,-5166,-4943,-4899,-3897,-4423,-4741,-4637,-4790,-4636,-4487,-4533,-4858,-5016,-5094,-5330,-5453,-5460,-4994,-5390,-5321,-5110,-5137,-5034,-4980,-4791,-4729,-4812,-4729,-4587,-4948,-4931,-4728,-5117,-4986,-5197,-5252,-5396,-5466,-5390,-5426,-5458,-5309,-5203,-5163,-5009,-4735,-4611,-4647,-4688,-4629,-4801,-4729,-4675,-4622,-5179,-5325,-5214,-5384,-5301,-5393,-5699,-5378,-5383,-5263,-5087,-5141,-5076,-5006,-4646,-4801,-4612,-4918,-4802,-4720,-4501,-4619,-5237,-5237,-5358,-5522,-5548,-5432,-5463,-5281,-5405,-5191,-5246,-4990,-4860,-4838,-4877,-4764,-4870,-4679,-4688,-4805,-4623,-4586,-5296,-5496,-5511,-5616,-5481,-5363,-5429,-5369,-5398,-5208,-4571,-4988,-4882,-4846,-4852,-4856,-4767,-4899,-4491,-4800,-4691,-4543,-5659,-5484,-5586,-5687,-5471,-5458,-5432,-5434,-5443,-5199,-5145,-4788,-5065,-4876,-4967,-4742,-4951,-4821,-4705,-4649,-4557,-4420,-5659,-5888,-5596,-5747,-5543,-5539,-5418,-5417,-5328,-5338,-4817,-4905,-5409,-4921,-4828,-4850,-4849,-4557,-4721,-4544,-4485,-4395,-5986,-5638,-5772,-5834,-5508,-5504,-5470,-5398,-5342,-5186,-5003,-4688,-4464,-4987,-4960,-5025,-4739,-4781,-4736,-4455,-3258,-4465,-5663,-5773,-5863,-5852,-6226,-5245,-5397,-5367,-5291,-5102,-4901,-4563,-4928,-5139,-5093,-4970,-4926,-4743,-4449,-4396,-4286,-4087,-5924,-5466,-5548,-5439,-5372,-5564,-5583,-5093,-4724,-5109,-4799,-4924,-5104,-5095,-4936,-4868,-4777,-4409,-4781,-4671,-4438,-4251,-5876,-5829,-5719,-5626,-5498,-5322,-5462,-5300,-5624,-5066,-4733,-5048,-5005,-4981,-5005,-4805,-4513,-4661,-4380,-4636,-4660,-4824,-5786,-5759,-5733,-5565,-5470,-5331,-5253,-5069,-5064,-5355,-5948,-5800,-5120,-4930,-4645,-5058,-4486,-4687,-4708,-4838,-4572,-4713,-5925,-5621,-5728,-5464,-5457,-5344,-5319,-5287,-5590,-5543,-5318,-5472,-5875,-5192,-5275,-4968,-4629,-4620,-5016,-4532,-4676,-4712,-5771,-5679,-5669,-5515,-5397,-5265,-5342,-5379,-5573,-5560,-5660,-5511,-5457,-5249,-5603,-5504,-4985,-4684,-4535,-4555,-4562,-4839,-5777,-5678,-5677,-5481,-5396,-5274,-5328,-5368,-5547,-5575,-5653,-5514,-5457,-5197,-5563,-5603,-4860,-4959,-4571,-4723,-4536,-4915],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
