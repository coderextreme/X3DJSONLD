###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_115',geoSystem=['GDC'],position=(1.4130926478938615,103.74782937541922,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.4130926478938615,103.74782937541922,0.0),range=4101.627,child1Url=['../../tiles/5/singapore22-10.x3d'],child2Url=['../../tiles/5/singapore22-11.x3d'],child3Url=['../../tiles/5/singapore23-10.x3d'],child4Url=['../../tiles/5/singapore23-11.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore11-5.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.7334663412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[24,32,31,27,25,27,25,20,17,13,14,19,23,20,19,20,20,20,22,24,19,14,12,12,12,10,9,10,13,16,19,25,32,38,38,33,29,26,31,31,29,29,28,24,19,17,13,13,18,23,21,20,18,16,15,17,16,14,12,11,12,12,11,9,10,13,17,20,28,35,36,35,31,27,27,30,30,29,29,28,24,19,16,13,12,18,21,20,19,17,13,13,14,13,12,11,11,11,13,11,9,10,14,18,21,29,35,34,32,29,25,29,29,26,27,26,26,24,20,16,14,14,18,19,18,18,16,13,14,16,15,13,13,12,11,12,11,9,11,17,19,21,27,33,33,31,28,24,30,26,22,25,24,24,24,18,15,14,13,17,18,17,18,15,13,13,15,15,13,13,12,11,12,12,9,11,17,18,21,26,32,34,31,27,24,27,22,19,21,23,23,22,16,13,12,11,14,17,19,21,17,13,13,13,13,12,12,11,11,12,13,10,12,16,17,21,26,32,37,33,27,26,23,19,17,20,23,22,20,14,11,9,9,12,15,19,22,17,13,13,12,11,12,12,11,12,13,13,10,11,14,18,22,27,31,38,34,27,26,15,16,17,20,23,20,19,13,10,8,8,12,13,16,19,16,13,13,12,12,12,11,12,13,12,11,10,10,14,21,25,27,29,36,33,27,27,10,13,17,21,23,19,17,13,8,8,8,12,13,15,17,15,14,13,11,11,12,11,11,13,12,11,9,9,13,24,28,28,27,33,30,26,26,9,13,17,20,22,20,17,14,9,9,9,12,14,15,16,14,14,13,11,11,12,11,11,11,12,11,9,9,13,24,31,32,24,25,23,24,25,9,13,17,19,22,20,17,14,10,9,10,12,14,15,15,14,14,13,11,11,12,11,11,11,12,11,9,9,13,23,32,33,23,20,19,23,25,11,15,16,19,22,20,15,12,10,9,10,12,13,14,14,14,13,13,13,13,12,12,12,12,12,10,9,8,14,24,30,31,23,19,19,23,26,11,14,16,19,21,19,14,12,11,9,10,12,12,14,13,13,13,12,13,13,12,12,12,12,12,11,9,8,15,24,28,28,23,19,19,23,25,10,12,15,18,18,18,14,14,13,9,10,12,12,13,13,12,12,11,13,12,11,11,12,12,12,12,9,8,16,24,27,26,20,18,18,20,23,9,11,14,17,16,17,16,17,14,9,10,11,11,13,12,11,11,11,12,12,11,10,11,11,11,12,10,9,17,23,25,23,18,18,18,19,21,9,11,14,14,13,15,16,18,16,10,9,9,11,12,12,11,11,12,12,12,10,9,10,10,10,10,9,9,16,20,21,20,16,19,18,17,20,10,11,13,12,12,14,17,19,18,11,8,9,10,11,12,11,11,11,12,12,9,9,10,10,9,9,9,10,14,17,16,16,15,20,18,16,20,11,12,13,10,11,15,17,19,19,13,8,9,10,10,12,11,10,11,11,11,10,10,10,9,8,8,8,9,12,14,14,14,14,20,17,17,23,13,14,13,9,10,15,17,19,19,14,7,9,10,10,12,11,10,10,10,11,10,10,10,9,8,8,8,9,11,11,12,13,12,21,16,18,25,13,13,12,10,12,17,19,18,17,13,9,9,9,10,12,11,10,10,9,9,9,9,10,8,7,8,8,10,10,11,13,14,14,22,19,18,24,13,13,11,11,13,18,19,17,15,12,10,10,9,10,12,11,10,10,9,9,9,9,10,8,7,9,9,10,11,11,13,15,17,23,23,19,23,11,12,12,12,15,19,19,17,15,12,10,10,10,10,12,11,10,9,10,10,9,8,9,10,9,9,8,10,12,13,15,17,22,27,27,21,23,10,11,12,14,17,18,18,17,16,13,10,10,10,11,12,11,10,9,10,10,9,8,9,11,12,10,8,10,12,16,18,20,27,33,30,23,23,9,12,11,12,15,16,16,14,16,12,9,9,10,11,11,11,10,9,10,9,9,9,9,10,11,10,8,11,15,18,21,22,28,36,34,26,25,9,12,10,10,13,13,12,13,16,12,8,9,10,11,11,11,10,10,10,8,8,9,10,10,10,8,8,13,18,21,24,23,27,38,36,29,27,10,12,9,9,11,11,11,12,16,12,7,9,11,11,12,11,10,10,9,8,8,10,10,10,9,9,10,14,18,21,24,24,26,35,37,32,29,12,11,9,8,10,10,11,12,16,11,7,9,11,12,12,11,10,10,9,8,8,10,11,10,9,9,11,15,17,20,24,24,24,30,37,34,30,12,10,8,8,9,10,11,13,15,10,8,10,12,11,11,10,10,11,9,8,9,10,11,10,10,9,10,14,17,22,25,24,24,28,35,33,29,12,9,7,8,8,10,11,14,15,9,8,10,12,11,10,10,10,11,10,9,9,11,11,10,10,9,9,12,18,26,26,25,26,27,33,31,26,10,8,7,8,8,10,11,14,15,10,9,11,11,10,9,10,10,10,10,10,10,10,10,10,9,8,9,11,16,27,29,27,28,27,30,28,24,8,7,7,8,8,10,11,13,14,11,11,12,11,9,9,10,10,9,10,10,11,10,9,8,7,8,10,11,15,27,34,31,31,27,26,25,23,7,7,8,8,9,10,11,13,13,10,11,12,11,10,9,10,9,9,10,10,10,10,9,8,6,7,11,12,16,27,35,34,33,26,24,26,25,7,8,8,9,10,10,12,14,12,8,10,12,12,10,9,10,9,9,10,10,10,11,9,8,6,7,13,14,18,28,35,36,34,25,24,28,26,7,8,9,11,12,12,13,13,7,6,10,12,12,11,9,10,8,8,10,10,10,10,10,8,7,8,14,17,20,27,33,36,34,26,24,29,27,8,9,10,14,15,14,14,9,2,5,9,11,11,10,9,9,7,8,10,10,10,9,9,9,9,10,14,19,21,25,30,33,31,27,25,29,28,8,9,12,16,18,16,13,7,1,5,9,10,10,10,8,9,7,8,10,10,10,9,9,9,9,11,15,20,22,23,27,30,27,27,27,29,27,9,8,14,17,20,17,11,5,5,7,9,9,9,10,8,9,8,9,9,9,10,9,9,9,9,10,15,20,21,22,25,27,24,27,28,27,26,10,9,15,18,20,18,9,5,6,7,9,9,9,10,8,9,10,10,9,9,9,9,8,8,9,10,15,20,21,20,23,24,22,25,28,25,24,12,9,15,19,19,17,7,5,5,7,9,9,9,10,9,9,11,12,10,8,8,9,8,8,9,10,15,19,20,20,22,21,21,24,26,23,22,12,10,14,18,17,16,6,4,4,6,9,9,8,10,9,10,11,11,10,8,8,9,8,8,9,10,15,18,19,19,20,20,20,22,23,21,21,10,9,12,15,15,14,6,4,4,4,8,10,8,10,10,10,10,10,10,9,9,9,8,8,8,10,14,18,18,18,18,21,23,21,21,22,22,9,9,12,12,12,11,5,3,3,3,7,10,8,10,9,10,9,9,9,8,9,9,8,8,8,10,14,17,17,17,17,22,24,21,20,22,23,9,11,12,9,9,8,4,3,3,4,6,10,10,10,9,10,9,8,8,8,8,9,9,8,8,10,13,16,17,16,16,22,24,19,18,21,23,9,11,12,6,6,6,4,3,3,4,6,12,11,10,9,10,8,7,7,8,8,9,9,8,8,11,12,15,17,15,15,21,24,17,17,18,22],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
