###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3306,-3373,-3282,-3102,-3501,-3663,-3851,-3972,-3969,-3932,-4116,-3779,-4648,-4792,-3964,-4225,-3898,-3866,-3912,-3825,-3724,-3984,-3165,-3443,-3432,-3577,-3556,-3669,-3818,-3911,-3897,-4250,-4480,-4432,-3925,-3802,-2904,-3465,-3485,-3677,-3747,-3882,-3896,-4102,-3232,-3351,-3229,-3558,-3539,-3746,-3726,-3897,-4290,-3179,-3766,-3223,-2570,-2843,-2997,-3172,-3212,-3444,-3613,-3675,-3865,-3668,-2991,-3133,-3146,-3306,-3467,-4256,-4659,-2714,-2754,-5761,-3255,-2468,-2901,-2442,-2773,-2943,-3122,-3351,-3400,-3691,-3555,-3630,-2785,-3078,-3076,-3677,-4202,-2430,-3236,-3491,-2656,-3373,-3048,-3041,-2840,-2558,-2710,-2924,-3016,-3173,-3383,-3483,-3428,-3586,-2533,-2687,-2699,-2829,-3263,-4385,-4276,-3472,-3440,-3314,-3229,-3180,-2722,-2673,-3084,-2858,-2766,-3036,-3319,-3428,-3593,-3557,-2784,-3791,-3856,-4452,-4135,-4011,-3940,-3765,-3615,-3669,-3410,-3341,-3557,-2984,-2948,-2950,-2784,-3065,-3300,-3462,-3566,-3618,-3662,-4539,-4147,-3875,-3877,-3978,-3904,-3797,-3721,-3680,-3678,-3206,-3065,-2939,-3190,-3002,-2806,-3062,-3242,-3479,-3567,-3623,-4403,-4199,-4277,-4043,-3925,-3577,-3988,-3730,-3844,-3593,-3567,-3283,-3083,-2819,-3245,-2860,-2548,-3037,-3249,-3400,-3526,-3534,-4307,-4486,-4261,-4269,-4074,-4298,-4125,-4018,-3823,-3745,-3601,-3409,-3259,-2902,-3042,-2571,-2688,-2967,-3282,-3356,-3554,-3477,-4414,-4241,-4334,-4439,-4343,-4122,-4162,-3952,-3895,-3816,-3550,-3587,-3402,-3198,-3102,-2866,-2542,-2966,-3244,-3399,-3565,-3436,-4378,-4506,-4707,-4296,-4228,-4203,-4067,-4036,-3861,-3694,-3633,-3547,-3441,-3256,-3185,-2973,-2918,-2995,-3205,-3332,-3455,-3476,-4605,-4536,-4585,-4533,-4379,-4163,-4067,-4093,-3979,-3719,-3658,-3462,-3488,-3306,-3329,-2966,-2859,-2851,-3026,-3174,-3304,-3514,-4744,-4903,-4582,-4495,-4550,-4144,-3995,-4003,-3834,-3755,-3747,-3557,-3419,-3549,-3266,-2978,-2704,-2687,-2795,-2366,-3439,-3619,-4667,-4807,-4582,-4354,-4334,-4115,-3942,-3964,-4117,-3937,-3731,-3699,-3525,-3295,-3280,-2857,-2573,-2591,-2765,-3817,-2786,-3113,-5049,-4799,-4581,-4602,-4474,-4186,-3893,-3803,-4011,-3804,-3751,-3656,-3339,-3231,-3208,-2971,-2737,-3594,-3080,-2810,-2471,-2856,-4368,-4721,-4704,-4583,-4439,-4346,-4140,-4006,-3983,-3765,-3685,-3683,-3658,-3791,-3068,-3358,-3097,-3100,-3139,-2905,-2583,-2902,-4693,-4780,-4700,-4517,-4414,-4528,-4274,-4096,-3923,-4011,-3803,-3686,-3876,-3725,-3632,-3331,-3078,-3017,-2998,-2830,-2406,-2800,-4857,-4801,-4626,-4536,-4444,-4532,-4483,-4284,-4139,-3824,-4092,-3963,-3837,-3787,-3769,-3625,-3335,-3060,-3158,-2754,-2655,-2769,-4622,-4889,-4661,-4652,-4546,-4538,-4460,-4478,-4148,-4044,-4040,-3998,-3917,-3892,-3794,-3672,-3561,-3283,-3166,-2997,-2692,-2723,-4825,-4846,-4780,-4623,-4518,-4519,-4553,-4375,-4303,-4437,-4104,-4082,-4065,-3971,-3804,-3715,-3421,-3277,-3074,-2994,-2700,-2799,-4893,-4844,-4601,-4760,-4618,-4705,-4608,-4571,-4519,-4186,-4433,-4113,-3987,-3868,-3792,-3590,-3381,-3240,-3179,-3022,-2788,-2470,-4273,-4822,-4730,-4674,-4817,-4677,-4769,-4532,-4336,-4404,-3936,-4221,-4093,-3835,-3715,-3299,-3183,-3293,-3248,-3083,-2632,-2654,-4710,-4789,-4640,-4837,-4795,-4682,-4760,-4618,-4479,-4538,-3891,-4119,-4044,-3900,-3708,-3637,-3175,-3301,-3261,-3054,-2685,-2595],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
