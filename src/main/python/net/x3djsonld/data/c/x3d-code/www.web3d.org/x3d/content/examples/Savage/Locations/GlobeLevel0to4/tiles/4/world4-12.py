###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3326,-3409,-3182,-2598,-3348,-3123,-3150,-2842,-3151,-3358,-3382,-3323,-3468,-3470,-3591,-3680,-3747,-3772,-3792,-3973,-3992,-4056,-3314,-3251,-3168,-3089,-3068,-2907,-3146,-3033,-3377,-3508,-3531,-3492,-3560,-3571,-3748,-3686,-3771,-3983,-3770,-3985,-3996,-4142,-3304,-3298,-3042,-3189,-3048,-2872,-3389,-3190,-3452,-3618,-3635,-3646,-3747,-3700,-3735,-3670,-3902,-4059,-3882,-4250,-4091,-4075,-3087,-3097,-3038,-3106,-2905,-2817,-3138,-3318,-3497,-3620,-3654,-3687,-3707,-3793,-3781,-3729,-3916,-3963,-4105,-4117,-4039,-4292,-3047,-3033,-2992,-2667,-2850,-3035,-3197,-3358,-3545,-3593,-3713,-3808,-3832,-3872,-3864,-3856,-3873,-4040,-4203,-4189,-4227,-4383,-2920,-2913,-2599,-2791,-2982,-3093,-3204,-3303,-3488,-3630,-3628,-3883,-3901,-3686,-3860,-3895,-3959,-4099,-3942,-4180,-4298,-4416,-2770,-2696,-2791,-2900,-3008,-3183,-3315,-3488,-3649,-3701,-3762,-4010,-3950,-4170,-4048,-3962,-4105,-4211,-4190,-4079,-4300,-4323,-2740,-2786,-2991,-3135,-3249,-3304,-3394,-3451,-3643,-3842,-3712,-3953,-4060,-4270,-3939,-3970,-4162,-4065,-4344,-4367,-3963,-4320,-2580,-2712,-3027,-3118,-3286,-3356,-3472,-3482,-3630,-3823,-4006,-4010,-4154,-4058,-4076,-4044,-4093,-4094,-4342,-4334,-4284,-4310,-2818,-2954,-3105,-3204,-3357,-3448,-3573,-3616,-3719,-3873,-3948,-4131,-4294,-4192,-4222,-4069,-4309,-4359,-4330,-4423,-4494,-4302,-2981,-2753,-3194,-3352,-3111,-3488,-3648,-3773,-3859,-3962,-4123,-4044,-4348,-4300,-4086,-4145,-4500,-4375,-4433,-4514,-4193,-4384,-3079,-3297,-3310,-3383,-3487,-3632,-3682,-3811,-3988,-4037,-4177,-4018,-4378,-4109,-4291,-4444,-4524,-4388,-4454,-4573,-4652,-4393,-3239,-3485,-3401,-3489,-3531,-3667,-3727,-3801,-4035,-4097,-4203,-4203,-4442,-4464,-4375,-4569,-4470,-4435,-4452,-4416,-4931,-4586,-3526,-3516,-3432,-3560,-3581,-3735,-3808,-3902,-4041,-4155,-4285,-4198,-4441,-4518,-4511,-4595,-4731,-4485,-4456,-4772,-4533,-4881,-3623,-3642,-3568,-3618,-3752,-3789,-3946,-4028,-4079,-4230,-4246,-4395,-4592,-4433,-4721,-4742,-4594,-4603,-4488,-4545,-4562,-4542,-3723,-3705,-3756,-3717,-3835,-3861,-4016,-4173,-4162,-4330,-4335,-4454,-4599,-4536,-4740,-4839,-4679,-4889,-4332,-3820,-4151,-4271,-3631,-3895,-4011,-3809,-3901,-3966,-4036,-4180,-4290,-4469,-4489,-4495,-4413,-4726,-4691,-4843,-4714,-4676,-4637,-4683,-4356,-4718,-3650,-3826,-3973,-3663,-4037,-4116,-4143,-4282,-4172,-4518,-4439,-4739,-4680,-4739,-4731,-4742,-4765,-4761,-5070,-5001,-5416,-4445,-3568,-3864,-3962,-3626,-4019,-4263,-3781,-4272,-4500,-4492,-4336,-4586,-4510,-4835,-5051,-5011,-4794,-3931,-5429,-4579,-5030,-5699,-3864,-3926,-4002,-3898,-4118,-4294,-4163,-4370,-4543,-4567,-4376,-4591,-4707,-4877,-5048,-4592,-6112,-5242,-5488,-5110,-5433,-4783,-4010,-4108,-3793,-3908,-4092,-4357,-4453,-4603,-4687,-4531,-4240,-4590,-4748,-4529,-6184,-4576,-4633,-5430,-5508,-5509,-4776,-5140,-4041,-4232,-3586,-4296,-4175,-4293,-4499,-4574,-4512,-4513,-4326,-4772,-4524,-6185,-4487,-5634,-5695,-5449,-5173,-5366,-4663,-4756,-4077,-4309,-4213,-4211,-4364,-4393,-4487,-4557,-4556,-4572,-4406,-4172,-3943,-5329,-5608,-5618,-5304,-5224,-5217,-4499,-2162,-2334,-4015,-4094,-4193,-4167,-4390,-4411,-4413,-4546,-4641,-4560,-4352,-4035,-5265,-5423,-5478,-5606,-5239,-5222,-5213,-4406,-2099,-2281],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
