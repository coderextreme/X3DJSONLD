###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1350,1539,1656,1718,1786,1766,1812,1848,1874,1747,1612,1677,1800,1917,1990,1981,1903,1768,1669,1553,1417,1305,883,1219,1329,1375,1433,1328,1354,1465,1506,1491,1077,1479,1598,1694,1715,1717,1597,1362,1175,926,842,706,211,367,726,658,648,732,564,703,794,459,550,1089,1410,1584,1470,1563,1188,682,369,8,250,535,-249,-146,-345,-424,-285,-311,-1,-21,-49,-38,6,169,943,1107,728,852,-65,-556,-866,-444,167,773,-1000,-850,-639,-145,-509,-912,9,237,10,-57,0,-1,-19,-32,-49,-696,-760,-869,-502,-665,-352,-335,-2130,-1994,-1401,-786,-658,-620,17,102,-9,-10,-91,-17,-368,0,-78,-313,-781,-747,-627,-662,-1353,-1173,-3090,-3136,-2571,-2040,-1295,-751,-230,-55,-436,-390,-299,-6,-21,-978,-933,-1492,-2178,-2594,-2970,-3095,-2491,-2553,-3568,-3570,-3210,-2933,-2748,-2354,-1321,-516,-249,-420,-375,-7,-1565,-1840,-2150,-2482,-2503,-3116,-3313,-3289,-3145,-2827,-3687,-3657,-3652,-3374,-3388,-2781,-2431,-2543,-2315,-1584,-1758,-1603,-2428,-2730,-3187,-3721,-2894,-3043,-3501,-3514,-3627,-3132,-3838,-3785,-3759,-3608,-3366,-3200,-2991,-2454,-2223,-2776,-1471,-1269,-1769,-2919,-3530,-3947,-3667,-3157,-3438,-3700,-3846,-3660,-3838,-3865,-3820,-3920,-3587,-3608,-3335,-3021,-3064,-3323,-3196,-3280,-2874,-3793,-3830,-4007,-3858,-3874,-3669,-3829,-3854,-3991,-3892,-4054,-3961,-3902,-3875,-3824,-3805,-3870,-3976,-4203,-4363,-4469,-4436,-4419,-4370,-4222,-4403,-4147,-3914,-3897,-4023,-4072,-4004,-4151,-4210,-4356,-4186,-4086,-4062,-4229,-4362,-4457,-4505,-4531,-4524,-4373,-4400,-4417,-4425,-4376,-4214,-4105,-4103,-4138,-4186,-4063,-4236,-4161,-4194,-4235,-4209,-4268,-4386,-4398,-4521,-4549,-4569,-4569,-4414,-4544,-4450,-4394,-4252,-4205,-4178,-4188,-4279,-4228,-4239,-4228,-4331,-4344,-4315,-4402,-4383,-4409,-4565,-4486,-4442,-4425,-4430,-4350,-4291,-4395,-4298,-4311,-4261,-4237,-4441,-4401,-4294,-4323,-4409,-4362,-4452,-4484,-4457,-4468,-4531,-4611,-4545,-4448,-4465,-4212,-4341,-4332,-4321,-4340,-4300,-4291,-4682,-4610,-4389,-4437,-4510,-4418,-4474,-4508,-4496,-4489,-4444,-4306,-4289,-4620,-4533,-4299,-4317,-4393,-4411,-4352,-4353,-4383,-4567,-4539,-4422,-4473,-4609,-4474,-4427,-4517,-4485,-4544,-4350,-4181,-4250,-4415,-4432,-4495,-4298,-4457,-4497,-4445,-4473,-4545,-4766,-4576,-4480,-4499,-4518,-4391,-4342,-4390,-4163,-4372,-4246,-4245,-4195,-4581,-4501,-4425,-4412,-4312,-4602,-4528,-4562,-4568,-4809,-4572,-4702,-4561,-4319,-4479,-4145,-4121,-4246,-4340,-4209,-4288,-4312,-4539,-4397,-4487,-4283,-4385,-4414,-4402,-4505,-4569,-4772,-4683,-4676,-4274,-4209,-4124,-4246,-4280,-3990,-4312,-4245,-4238,-4385,-4337,-4391,-4315,-4409,-4334,-4355,-4404,-4420,-4599,-4611,-4446,-4369,-4185,-4124,-4171,-4158,-4284,-4348,-4216,-4226,-4011,-4278,-4321,-4458,-4359,-4360,-4247,-4302,-4322,-4344,-4466,-4369,-4111,-4101,-4073,-4188,-4280,-4260,-4436,-4251,-4188,-4344,-4079,-4085,-4194,-4227,-4274,-4057,-4198,-4114,-4344,-4482,-4484,-4275,-4088,-4082,-4068,-4188,-4359,-4289,-4331,-4298,-4284,-4227,-4293,-4048,-4246,-4220,-4307,-4255,-4214,-4208,-4371,-4394,-4467],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
