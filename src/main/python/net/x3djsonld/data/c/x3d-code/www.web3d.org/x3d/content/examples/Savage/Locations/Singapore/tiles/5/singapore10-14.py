###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore10-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2995803869799398,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[27,27,26,26,26,28,29,27,24,23,22,20,19,19,21,21,20,18,16,14,13,13,15,15,16,17,17,18,19,19,18,17,16,16,17,19,26,26,26,27,27,27,27,27,26,26,25,22,19,19,18,18,17,16,15,14,14,14,15,15,16,17,18,18,19,20,19,19,18,17,20,22,24,25,26,27,28,26,24,26,28,29,28,24,20,17,16,15,14,14,14,15,16,16,16,16,17,18,18,18,19,19,21,21,19,19,22,25,24,24,24,24,24,23,21,23,27,27,26,22,18,17,16,15,13,13,14,15,17,17,17,17,18,18,19,20,19,20,23,24,22,20,23,23,25,23,21,20,19,19,18,21,24,23,21,19,16,16,18,15,12,12,14,16,17,18,18,18,18,19,21,21,20,21,26,28,25,22,22,21,27,24,21,19,18,18,19,18,19,19,18,17,16,17,18,16,12,12,14,16,17,18,19,19,19,19,21,23,23,25,30,32,27,22,20,19,30,26,22,20,19,19,20,16,13,14,16,16,17,17,18,16,12,12,13,15,16,18,20,20,19,19,21,24,27,31,36,36,29,22,19,18,35,29,25,23,21,21,21,16,12,13,15,17,19,20,21,20,18,15,14,14,17,20,23,23,21,20,21,23,27,31,35,35,29,23,19,17,41,34,28,26,25,23,21,17,13,14,16,18,20,22,25,26,25,20,14,14,17,22,27,28,25,22,21,21,25,29,32,32,29,24,20,17,44,37,30,30,29,25,21,17,13,14,14,17,20,22,24,25,26,21,15,14,18,23,30,32,30,27,24,22,24,26,28,29,29,27,23,20,44,37,32,32,32,26,21,17,12,12,11,15,18,20,21,22,24,20,15,15,18,25,33,36,35,32,28,24,22,22,24,27,30,31,27,24,43,36,30,30,29,25,19,16,12,12,13,15,17,19,21,22,23,20,15,15,18,24,32,35,35,32,28,25,24,23,25,27,30,31,28,25,41,33,25,24,23,20,17,15,13,14,16,17,17,19,22,23,23,21,16,15,18,22,28,31,30,29,26,26,26,27,28,29,31,31,28,25,36,28,22,21,19,18,16,17,17,18,20,20,19,20,21,22,23,21,16,16,18,21,25,27,28,28,27,28,31,33,32,32,32,30,28,27,28,24,19,18,16,17,18,20,22,24,25,24,22,21,19,20,22,20,17,17,19,21,22,24,27,28,29,32,38,41,37,34,32,30,30,30,23,21,19,17,15,17,20,24,29,30,31,27,24,22,20,20,21,19,17,17,19,20,20,22,26,29,32,36,42,45,42,38,35,32,34,35,19,18,18,17,16,19,21,28,36,37,37,32,27,24,23,21,20,18,17,17,19,20,18,20,24,29,33,39,44,47,44,41,39,38,39,41,17,17,18,18,18,21,23,30,39,40,40,37,34,30,28,24,20,18,17,18,20,20,18,20,24,29,34,40,44,47,46,45,44,43,44,44,17,18,19,20,21,23,25,32,41,41,39,42,44,40,35,28,22,20,19,19,21,21,20,21,25,29,33,39,43,46,48,48,48,48,47,45,18,19,20,21,22,25,27,33,40,40,39,43,48,44,38,31,24,21,20,20,23,23,23,25,28,31,34,38,40,43,46,47,47,47,45,42,20,20,21,21,22,26,29,33,37,39,39,41,43,40,37,31,24,21,20,21,25,26,28,30,33,36,36,37,38,39,40,41,41,41,39,37,21,21,22,23,24,28,32,35,37,40,42,41,38,36,34,29,25,21,20,21,25,29,32,36,39,41,40,38,36,35,35,35,35,35,33,31,22,22,23,25,27,31,36,38,40,43,46,41,36,32,29,27,26,24,20,21,25,29,34,39,43,46,44,41,36,32,30,29,29,29,28,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
