###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.6616511706451,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[13,18,22,26,33,39,41,41,37,33,30,30,32,34,34,33,30,25,19,14,13,14,17,19,21,23,23,22,21,21,22,26,28,26,24,23,23,17,24,30,36,41,46,47,45,41,35,32,31,30,29,28,28,26,22,18,14,12,14,16,18,20,22,23,23,24,24,25,27,28,27,25,25,25,20,29,36,41,45,47,46,44,40,35,33,33,30,27,25,24,23,20,17,15,14,15,16,18,20,22,23,24,26,27,28,28,28,28,28,27,27,24,33,39,42,43,42,40,37,34,32,32,34,31,26,23,21,20,18,18,19,19,17,17,18,20,22,23,25,27,28,28,29,29,30,31,31,30,23,32,37,39,37,34,32,31,29,29,30,33,31,26,22,18,17,17,19,22,22,19,18,19,21,23,25,27,29,30,30,31,33,36,37,36,34,18,25,29,31,28,25,24,25,25,26,26,27,27,25,21,16,15,16,18,23,24,22,22,22,23,25,27,30,32,33,34,36,40,43,45,43,40,14,18,21,22,19,17,18,20,22,23,23,23,24,24,21,15,14,17,20,25,27,26,25,25,25,27,29,32,34,35,37,40,43,48,50,49,45,13,13,13,13,12,11,13,16,18,20,20,20,22,24,22,17,17,21,25,31,32,29,28,29,29,29,30,33,36,37,38,40,44,49,53,51,47,16,14,12,10,10,11,12,14,17,18,19,19,21,24,24,20,21,25,30,35,35,32,31,32,33,32,33,35,38,39,39,40,42,48,51,51,47,24,22,19,17,16,16,16,16,17,18,19,19,21,24,25,25,26,29,32,36,36,33,33,35,37,38,39,40,41,42,42,40,40,44,47,47,45,31,31,29,27,25,22,20,18,18,18,18,19,21,24,26,28,30,33,35,36,36,34,35,38,41,43,45,45,45,47,47,43,40,41,42,43,42,35,39,40,39,34,29,24,20,18,17,17,18,19,22,25,29,32,35,37,36,36,36,37,39,42,46,49,50,51,53,52,48,43,40,39,38,39,35,43,47,47,42,34,27,21,18,17,17,17,18,19,23,29,34,38,39,37,37,39,40,42,44,49,53,55,57,58,56,52,47,41,37,36,37,31,39,45,48,44,36,28,21,18,17,17,16,16,17,21,28,34,40,41,39,39,42,44,45,48,53,57,59,59,59,57,54,49,42,36,35,36,27,33,40,44,42,36,28,21,19,19,18,16,16,16,20,26,34,41,43,41,42,45,47,48,50,55,58,59,59,56,54,53,49,42,37,35,36,28,30,34,38,37,33,27,21,19,20,19,17,16,15,18,24,32,41,44,42,43,46,47,47,48,52,54,54,53,50,48,47,45,41,37,35,34,31,28,29,31,31,29,25,21,21,22,21,19,17,15,18,23,30,39,44,44,45,46,46,44,45,47,49,48,46,43,42,41,40,39,36,34,34,36,29,27,27,27,27,24,22,23,26,25,22,19,17,19,24,31,38,44,46,48,49,47,43,41,43,43,43,41,38,37,37,37,37,36,35,35,40,32,27,25,24,25,24,24,27,30,29,25,22,20,22,28,33,39,44,48,50,51,48,43,40,39,39,39,38,35,34,35,36,37,38,38,38,40,32,27,24,23,24,25,27,31,34,33,30,27,26,28,33,37,41,45,48,50,50,48,45,43,40,38,36,35,35,36,38,39,40,41,41,42,37,32,27,25,23,24,26,30,34,38,38,35,33,32,34,38,41,43,45,46,47,46,46,47,46,43,40,35,34,37,40,43,44,44,44,44,45,32,29,27,25,24,25,28,32,36,41,42,41,39,37,37,39,41,42,43,43,42,41,42,44,45,44,41,36,34,37,41,45,47,46,46,45,46],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
