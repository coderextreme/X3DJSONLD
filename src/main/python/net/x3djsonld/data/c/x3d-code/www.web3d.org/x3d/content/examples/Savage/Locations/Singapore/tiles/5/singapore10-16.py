###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore10-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2995803869799398,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[29,25,23,22,22,23,26,28,29,29,29,28,27,27,23,20,21,24,24,23,25,29,29,26,23,21,21,22,24,25,25,24,24,24,24,23,29,26,25,24,24,24,25,27,28,28,26,25,24,24,23,22,23,23,22,21,23,27,28,25,23,22,22,22,23,24,25,24,23,21,20,20,28,26,26,26,25,25,25,26,27,27,25,23,23,23,25,26,25,22,21,20,22,25,26,25,24,22,22,22,23,24,26,27,25,20,18,19,25,24,24,25,24,22,23,25,26,27,26,25,26,28,28,28,25,21,20,20,22,24,25,26,25,22,21,23,25,27,28,28,27,24,22,25,21,20,22,23,21,19,22,24,26,27,28,29,32,35,32,29,24,20,20,22,23,24,25,27,26,21,21,25,29,30,31,30,30,30,30,33,21,21,21,22,21,19,21,24,27,30,33,36,38,40,36,32,29,27,27,28,28,27,27,28,27,24,25,29,31,32,32,32,32,33,34,38,22,22,22,22,21,20,21,23,28,34,39,45,45,44,40,35,35,38,38,37,34,30,29,29,28,28,30,33,34,32,32,33,35,35,36,40,25,25,25,24,23,21,20,21,28,36,41,44,43,41,37,34,36,40,42,43,41,39,36,31,29,29,31,34,35,32,31,31,33,36,38,38,29,29,28,26,23,21,19,18,27,38,40,40,38,35,34,33,35,37,41,47,49,51,45,34,29,29,31,34,35,32,29,27,29,35,39,35,32,32,31,29,26,24,19,16,23,34,34,33,31,29,29,30,32,33,37,43,47,47,42,33,30,31,32,32,31,28,25,23,24,31,34,31,34,35,35,35,32,28,21,14,19,26,26,25,24,23,24,26,27,27,31,37,38,37,34,31,31,34,34,30,26,23,20,18,19,24,28,29,35,36,36,35,32,29,23,16,19,24,23,21,21,22,22,22,22,22,26,33,35,36,35,33,33,36,36,33,29,24,20,20,21,24,27,29,36,36,34,33,31,29,25,21,22,25,24,22,22,24,21,19,17,16,21,30,36,40,40,37,37,39,40,39,35,28,25,26,28,30,31,31,34,33,32,30,29,28,25,22,23,25,25,24,24,24,21,19,17,16,21,29,34,38,39,38,38,38,39,41,40,35,31,32,32,33,33,33,30,30,28,26,26,27,24,21,22,24,26,28,26,23,22,20,20,22,25,28,31,33,35,37,37,33,35,41,44,41,38,37,35,34,34,36,27,28,27,25,25,26,25,23,23,24,27,30,28,25,23,21,21,23,25,27,29,30,32,36,35,29,30,37,41,42,41,41,38,34,32,35,24,26,27,27,26,26,27,28,27,25,27,29,29,27,24,21,21,21,23,26,27,29,31,34,32,26,24,29,34,37,40,42,41,33,29,32,24,27,30,31,29,28,30,32,30,27,27,29,28,27,24,21,20,20,22,25,28,29,32,34,31,25,25,33,39,42,43,43,39,30,25,28,28,32,34,35,33,31,32,34,32,29,28,28,26,24,22,20,20,20,23,26,29,31,33,35,33,27,32,47,56,55,51,43,35,26,21,24,30,35,37,38,36,34,34,35,32,27,26,25,24,21,21,20,21,22,25,28,29,31,32,35,34,28,34,50,59,57,50,40,30,22,19,20,31,36,39,41,38,36,35,33,29,23,21,20,20,19,20,22,25,26,28,29,28,27,30,35,34,28,30,40,46,45,40,33,26,20,17,18,31,36,40,41,39,37,34,32,26,20,19,18,18,18,21,25,28,31,31,30,29,26,31,41,40,31,29,33,35,34,31,27,22,19,18,19,32,37,40,41,39,36,33,30,26,21,20,19,20,20,23,27,30,33,33,32,30,27,36,53,53,40,32,30,30,29,25,20,17,17,20,24],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
