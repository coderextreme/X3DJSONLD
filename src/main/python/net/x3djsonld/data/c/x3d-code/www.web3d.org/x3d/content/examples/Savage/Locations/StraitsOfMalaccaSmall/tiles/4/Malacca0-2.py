###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca0-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(0.5264858192000004,99.62356253966037,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[1278,1338,1473,1188,1494,1582,1425,1090,970,1365,1648,1643,1396,986,1012,1206,1217,1022,503,342,258,232,1307,1435,1104,1395,1691,1224,1123,870,1155,1525,1732,1339,1109,891,868,1225,1188,1010,654,346,267,235,874,1087,975,1330,1303,1029,804,1075,1268,1407,1549,1404,1078,937,820,1086,933,775,490,314,268,257,765,882,1299,1528,1150,1142,876,985,1458,1527,1416,1284,1094,901,940,774,620,798,481,265,245,261,1044,1427,1449,1209,1281,1295,745,963,1061,1252,1135,1348,835,979,872,677,512,481,372,302,275,317,1422,1505,1232,1247,1151,1186,697,897,803,1252,946,1017,711,812,830,472,459,454,353,383,281,268,1466,1264,1193,1056,902,804,761,583,1041,1137,763,825,743,820,716,553,502,468,454,351,340,293,884,924,888,737,745,581,597,614,667,734,731,665,880,928,876,698,639,515,541,394,321,390,906,674,801,638,698,528,481,577,630,558,592,851,1045,904,1005,957,878,894,628,374,288,542,962,687,613,634,473,472,859,654,836,836,877,1166,1108,1351,1309,1230,1106,948,702,524,291,716,822,677,554,534,430,521,725,980,981,990,1178,1480,1474,1636,1707,1667,1201,812,851,474,469,602,649,519,628,625,596,878,681,829,1280,1448,1439,1677,1486,1572,1520,1462,1267,1091,757,351,584,829,626,384,523,480,603,853,848,1253,1368,1673,1675,1667,1610,1213,1123,1218,1338,889,404,534,892,992,533,373,396,440,562,843,1094,762,982,1306,1563,1516,1524,1506,1242,750,961,713,633,676,1172,940,508,386,513,594,935,656,794,1021,980,1105,1554,1504,1323,1298,1110,931,624,441,719,1210,1137,1234,431,453,882,1161,591,822,1203,1096,1319,1609,1541,1455,1372,1218,1310,1038,449,685,907,1177,897,1015,488,1385,1098,589,755,1062,1285,1362,1294,1320,1366,1619,1383,1227,897,658,767,924,847,1249,920,647,935,812,494,566,695,1083,1332,1370,1336,1235,1189,1535,1525,970,729,647,1179,714,752,1052,861,562,622,385,555,849,813,1259,1355,1350,1351,1471,1208,1072,1075,658,566,969,977,561,1035,1280,826,458,360,442,579,818,1110,1375,1533,1524,1455,1131,1020,1193,975,604,666,586,946,369,785,1120,588,486,440,589,664,1210,1303,1601,1484,1370,1470,1340,1418,1404,793,901,891,405,703,316,571,669,641,581,514,644,797,1175,1598,1664,1465,1718,1708,1536,1557,1095,1020,1227,860,640,308,302,426,386,626,296,495,667,839,1122,1594,1668,1469,1754,1742,1588,1546,1093,1041,1200,870,664,354,284,389,395,594,269],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
