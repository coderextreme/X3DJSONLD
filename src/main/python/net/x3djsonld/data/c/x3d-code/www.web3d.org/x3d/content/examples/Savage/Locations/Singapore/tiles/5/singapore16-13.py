###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore16-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3519706612479037,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[139,157,159,162,153,144,125,107,96,86,80,74,68,62,57,52,50,51,53,54,57,60,62,64,65,66,67,68,66,64,60,57,53,54,53,51,50,142,155,157,159,151,145,130,116,107,98,90,80,73,65,60,55,53,51,53,55,58,61,63,65,67,68,68,65,62,60,58,58,58,59,60,57,56,147,157,157,156,149,141,130,120,112,106,96,84,76,68,63,58,56,54,54,56,59,61,64,66,67,67,66,62,58,56,56,59,62,65,67,65,63,158,165,161,156,144,133,123,113,108,105,95,84,77,70,65,62,59,56,57,59,60,61,63,63,63,61,59,57,55,54,55,59,64,69,73,71,69,167,173,164,155,139,125,114,104,101,98,90,83,77,70,67,64,61,58,59,61,62,62,61,60,58,55,53,52,52,52,54,59,65,72,77,75,73,172,174,163,151,134,119,108,97,92,87,82,78,74,70,67,64,63,60,61,63,63,61,60,58,56,53,50,49,49,50,53,57,64,72,78,77,75,172,171,158,145,129,115,103,92,85,78,75,73,70,68,66,65,64,62,62,63,62,60,58,57,55,52,49,47,47,48,51,56,63,70,76,75,74,165,162,150,137,124,112,101,90,82,75,72,70,67,65,64,64,63,63,61,59,58,57,57,57,55,51,48,47,47,49,51,56,62,68,74,72,71,153,148,138,127,118,109,99,89,82,74,71,68,65,63,62,62,62,62,60,56,55,56,56,56,55,51,48,48,48,49,51,56,61,66,70,68,66,139,131,124,116,109,102,94,85,80,75,71,67,64,61,60,60,60,60,59,56,55,56,56,55,54,52,50,49,49,49,51,56,60,64,67,64,62,125,114,109,104,99,94,87,81,78,76,72,68,63,59,57,57,58,58,59,58,58,58,57,55,55,55,54,51,50,50,51,55,59,61,62,60,58,116,102,97,91,88,85,81,78,78,77,74,69,63,56,54,55,56,58,59,61,61,61,60,59,59,60,58,53,51,49,49,51,54,56,57,56,55,108,93,86,79,78,76,75,75,77,78,75,70,63,53,52,53,56,58,61,63,63,64,64,64,63,63,61,56,52,49,48,48,49,51,52,52,52,103,86,79,71,70,70,70,71,74,77,74,69,60,51,51,53,56,59,62,63,64,65,66,66,66,64,61,58,55,53,51,48,47,48,49,49,49,99,82,75,67,66,66,66,67,70,75,70,65,58,50,51,54,57,60,61,62,63,64,66,67,66,63,61,59,58,58,56,51,48,48,49,47,47,97,82,73,64,63,62,62,63,68,73,68,62,56,49,51,55,58,59,60,62,63,65,66,68,67,63,61,60,60,60,59,56,53,52,51,48,46,95,82,72,62,60,59,60,61,65,70,66,60,54,49,51,55,57,58,59,61,63,65,67,69,68,64,61,60,59,60,60,61,60,58,55,51,48,92,79,69,59,57,57,58,59,62,66,63,58,53,49,50,53,54,56,58,60,63,66,68,70,69,67,64,60,58,59,59,61,61,59,57,53,51,87,74,65,55,55,55,56,57,59,62,59,56,53,50,50,49,50,52,56,59,64,68,70,71,71,69,66,60,56,57,57,57,58,58,57,55,53,85,71,62,53,53,53,54,55,57,59,57,56,55,53,52,49,49,51,55,60,65,68,70,70,69,68,66,61,57,56,55,55,54,55,55,55,55,83,71,62,52,52,52,53,54,55,57,58,58,58,57,55,52,52,53,57,61,65,68,69,67,65,63,62,62,61,57,54,53,52,51,52,54,54,81,71,62,53,51,51,52,53,54,56,58,60,60,60,59,56,55,54,57,60,64,67,67,64,61,60,60,63,63,59,54,52,51,50,50,52,54,77,71,62,54,52,51,51,52,53,55,58,60,61,64,64,62,59,56,56,57,60,64,64,60,58,57,59,64,65,61,56,53,51,51,51,51,52],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
