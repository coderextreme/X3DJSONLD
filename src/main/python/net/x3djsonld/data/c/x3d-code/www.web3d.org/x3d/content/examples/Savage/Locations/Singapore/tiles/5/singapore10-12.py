###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore10-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2995803869799398,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[14,13,10,7,7,9,11,12,12,13,13,14,18,22,26,28,30,30,31,33,37,40,44,43,41,35,32,29,27,24,23,23,23,20,16,11,14,14,10,7,7,9,11,13,13,13,14,16,21,26,29,30,30,28,28,29,32,35,37,36,34,29,27,26,24,21,19,19,18,17,16,11,15,14,11,8,8,9,10,12,13,13,15,19,24,29,31,32,30,27,25,25,26,29,29,28,26,23,22,22,21,19,16,14,13,14,16,14,15,16,12,8,7,7,8,10,11,12,16,21,26,30,31,31,28,24,22,22,23,25,25,24,23,21,20,18,18,16,14,12,12,14,16,14,16,18,13,9,7,6,7,8,9,11,16,22,27,31,31,29,26,21,19,20,20,21,22,22,22,20,19,15,14,12,12,11,12,14,15,15,15,18,14,10,7,5,6,8,9,11,16,22,27,29,29,27,24,20,17,17,17,18,19,19,19,17,16,13,11,11,10,12,14,16,17,17,14,18,15,11,8,5,6,8,9,11,16,22,26,27,26,25,22,18,16,15,14,15,16,17,17,14,12,10,10,9,9,14,17,19,20,19,16,20,17,13,9,5,6,8,9,12,16,20,23,23,23,22,20,17,15,14,14,14,14,14,14,12,11,11,11,11,11,15,19,21,23,21,19,23,20,16,11,6,6,8,10,13,16,18,19,19,19,20,19,16,15,14,13,13,12,12,11,12,12,12,13,13,14,17,20,23,25,23,17,21,18,14,10,7,7,8,11,12,15,17,17,17,17,17,16,15,14,14,14,13,12,12,12,13,13,14,15,16,17,20,22,25,27,25,13,15,12,8,8,8,8,9,10,11,14,17,17,16,15,14,13,13,14,15,14,13,12,12,13,15,16,16,17,20,22,23,24,28,30,27,12,13,12,9,10,10,10,10,10,10,13,16,17,16,15,14,13,12,12,12,12,11,12,13,14,16,17,14,14,19,24,25,27,29,31,27,14,15,14,13,13,13,12,12,10,10,11,14,16,17,17,16,15,12,10,9,9,9,11,13,15,18,17,11,9,17,23,26,30,30,31,28,14,15,15,15,15,15,13,12,11,10,11,13,14,16,17,17,15,11,9,9,9,10,12,13,16,18,17,10,8,16,22,27,31,30,30,27,13,14,14,13,15,15,14,12,12,12,11,11,12,14,15,15,14,11,10,12,12,13,13,14,15,18,17,11,9,16,22,26,30,30,29,25,13,13,12,11,13,13,12,11,11,12,11,11,12,14,15,15,15,13,12,13,14,14,15,14,15,17,17,15,14,18,22,26,29,29,28,25,13,12,11,9,9,9,9,9,10,10,11,11,12,14,15,17,16,14,13,13,14,15,16,14,14,16,18,20,22,23,24,27,28,28,27,26,13,11,10,8,8,8,8,10,10,10,11,12,13,14,16,18,18,16,15,14,14,16,17,16,15,16,18,23,26,26,26,27,29,29,29,29,12,10,10,10,9,8,10,12,12,11,11,13,14,16,18,20,20,18,16,14,15,17,18,18,18,18,19,24,27,27,28,30,31,32,32,33,12,10,10,11,10,9,11,13,12,12,13,14,16,18,20,22,22,20,18,17,17,19,20,21,21,21,22,25,28,28,29,30,31,32,33,35,12,10,11,11,11,10,10,11,11,13,15,17,19,21,23,24,24,22,22,22,23,23,23,24,24,24,25,26,28,29,28,28,29,29,31,33,11,10,10,11,11,10,10,10,11,13,16,20,23,25,26,26,26,25,25,26,26,26,26,25,25,25,25,26,27,27,26,26,26,26,28,31,10,9,9,9,10,10,10,10,11,14,18,22,25,28,28,28,28,26,26,27,28,29,28,26,25,23,23,24,25,24,24,24,25,24,25,28],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
