###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1940,1983,1918,1867,1855,1818,1500,1316,1209,588,229,675,-18,0,-127,-447,-456,-458,-503,-314,-422,-563,1559,1519,1532,1507,1491,1417,1227,1156,827,747,-49,54,-242,-475,-645,-681,-725,-662,-794,-814,-677,-556,1064,1198,1070,1056,849,841,522,141,-52,-63,-153,-64,-578,-548,-542,-552,-738,-887,-964,-930,-816,-1576,589,107,108,5,-446,-853,-381,-439,-490,-599,-539,-292,-374,-572,-665,-722,-817,-1697,-2464,-2188,-2635,-2611,-164,-117,-4,-768,-728,-397,-163,-180,-459,-567,-2306,-2093,-1354,-2010,-1938,-1507,-1875,-2134,-2891,-2888,-2832,-2917,-581,-426,-666,-556,-1318,-1919,-1898,-2252,-2561,-2505,-2867,-3215,-2942,-2925,-2953,-2881,-2774,-2753,-2872,-3157,-3184,-3105,-347,-1071,-1836,-2508,-2808,-2836,-3136,-3119,-3202,-3296,-3230,-3458,-3346,-3330,-3364,-3290,-3251,-3381,-3241,-3341,-3366,-3261,-2528,-3453,-2622,-2972,-3439,-3513,-3342,-3613,-3671,-3533,-3541,-3820,-3677,-3693,-3586,-3515,-3400,-3436,-3554,-3408,-3271,-3139,-3665,-3904,-3680,-3406,-3497,-3615,-3709,-3803,-3829,-3793,-3790,-3773,-3752,-3793,-3710,-3627,-3594,-3487,-3504,-3147,-3036,-3074,-4145,-4233,-4038,-3933,-3778,-3836,-3633,-3745,-3852,-3877,-3911,-3861,-3911,-3773,-3799,-3761,-3428,-3590,-3373,-3265,-3186,-3251,-4476,-4282,-4122,-3882,-3591,-3331,-3393,-3800,-3948,-3956,-3982,-3994,-3968,-3937,-3606,-3838,-3589,-3511,-3197,-2768,-3149,-1966,-4396,-4327,-4170,-4049,-3781,-3871,-4111,-4176,-4125,-4040,-4067,-4124,-4042,-4064,-3917,-3616,-3713,-3454,-3050,-3143,-3065,-2368,-4377,-4368,-4331,-4245,-4177,-4155,-4304,-4247,-4221,-4104,-4229,-4117,-3989,-4038,-3873,-3652,-3593,-2856,-2936,-2856,-2479,-2664,-4503,-4524,-4374,-4402,-4371,-4305,-4296,-4299,-4269,-4314,-4178,-4041,-3909,-3325,-3823,-3679,-3119,-2953,-2842,-2812,-2834,-2827,-4582,-4616,-4451,-4419,-4383,-4291,-4409,-4248,-4295,-4122,-4185,-4113,-3823,-3073,-3502,-3269,-3215,-2999,-2583,-2931,-3074,-2983,-4642,-4623,-4550,-4501,-4417,-4354,-4311,-4172,-4371,-4136,-4128,-3944,-3730,-2707,-3504,-3080,-2802,-2922,-2472,-3189,-3126,-2981,-4655,-4614,-4625,-4542,-4426,-4310,-4393,-4185,-4090,-4030,-3847,-3998,-3532,-3474,-3468,-2873,-2645,-2889,-2735,-2992,-3037,-2974,-4668,-4651,-4644,-4570,-4466,-4131,-3843,-4413,-4006,-3805,-3802,-3584,-3193,-3655,-3169,-2517,-2774,-2856,-3614,-2982,-3200,-2939,-4683,-4604,-4664,-4538,-4355,-4100,-3927,-4121,-4074,-3749,-3092,-3440,-3344,-3373,-2888,-3025,-3068,-2716,-3157,-3153,-3263,-2934,-4724,-4636,-4596,-4586,-4439,-4106,-4225,-4062,-3939,-3651,-3741,-3390,-3285,-3088,-2817,-3122,-3173,-2690,-3135,-3377,-3423,-3249,-4463,-3844,-4317,-4471,-4219,-4001,-4280,-3890,-3719,-3575,-3393,-3218,-3285,-2736,-3200,-3068,-3289,-3831,-3347,-3485,-3353,-3312,-3925,-4394,-4075,-4401,-4245,-4056,-4254,-3900,-3690,-3481,-3602,-3046,-3344,-2698,-3262,-2729,-3373,-3760,-3526,-3713,-3390,-3359,-4363,-4211,-3943,-4289,-4008,-3994,-3985,-3646,-3509,-3442,-2906,-2953,-3275,-2888,-3918,-3413,-3302,-3635,-3362,-3736,-3708,-3732,-4210,-3891,-3850,-4279,-4148,-4071,-3810,-3643,-3505,-3448,-3058,-2973,-3301,-3028,-3901,-3415,-3207,-3487,-3525,-3637,-3762,-3728],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
