###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world0-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-90.0416666667,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2810,2808,2806,2804,2803,2802,2801,2800,2799,2799,2799,2798,2797,2796,2794,2793,2792,2791,2790,2788,2787,2786,2877,2873,2869,2865,2861,2857,2852,2847,2842,2837,2833,2829,2825,2822,2818,2815,2813,2811,2810,2808,2807,2806,2918,2915,2911,2908,2906,2903,2901,2899,2898,2896,2894,2890,2887,2883,2878,2873,2868,2862,2855,2849,2843,2838,2867,2871,2875,2879,2881,2884,2887,2888,2888,2889,2887,2885,2879,2871,2862,2852,2841,2831,2822,2813,2806,2802,2703,2710,2722,2737,2752,2768,2779,2788,2796,2793,2792,2785,2771,2753,2739,2730,2721,2713,2707,2703,2698,2693,2519,2499,2495,2496,2501,2511,2523,2531,2535,2535,2534,2536,2540,2544,2551,2560,2568,2574,2577,2580,2582,2583,2238,2170,2103,2062,2037,2019,2001,2009,2035,2104,2197,2233,2297,2370,2408,2439,2460,2474,2487,2498,2511,2528,3056,2593,1681,1578,1410,1434,2155,1655,1714,2228,2153,2478,2530,2507,2473,2396,2367,2384,2399,2405,2413,2422,964,966,1037,1334,1277,1270,1310,1227,1328,2380,2404,2253,2057,1963,1984,2144,2297,2398,2411,2410,2398,2396,596,649,717,782,826,917,1001,1060,1127,1197,1187,1293,1516,1716,1795,1795,1847,1918,1966,2025,2163,2258,650,705,772,800,823,861,902,943,976,995,1005,1024,1073,1134,1193,1213,1283,1369,1480,1541,1598,1688,454,487,618,665,708,799,810,847,873,898,928,973,996,1032,1100,1152,1204,1263,1324,1429,1520,1568,406,424,453,492,539,594,635,673,697,781,846,878,931,1003,1067,1136,1223,1299,1345,1392,1447,1495,508,502,503,518,541,575,616,652,694,761,826,867,897,950,1021,1117,1205,1268,1307,1359,1405,1451,580,588,591,606,735,778,800,804,807,822,858,889,907,927,955,1004,1116,1205,1284,1324,1378,1409,597,600,616,667,702,734,754,768,793,853,899,911,916,921,937,988,1126,1199,1289,1364,1434,1499,603,648,676,699,745,793,833,886,921,959,993,1041,1091,1131,1176,1235,1307,1398,1447,1503,1561,1618,603,703,758,800,847,897,931,976,1038,1110,1172,1214,1264,1300,1334,1377,1428,1469,1501,1541,1605,1667,668,763,830,889,954,1013,1065,1112,1172,1219,1261,1301,1347,1381,1414,1481,1517,1533,1548,1583,1656,1692,672,777,877,993,1083,1153,1217,1282,1316,1347,1377,1401,1442,1492,1509,1534,1567,1593,1644,1702,1729,1745,731,861,964,1067,1145,1204,1300,1353,1382,1409,1453,1486,1506,1528,1556,1594,1632,1683,1717,1744,1762,1772,935,1054,1152,1220,1284,1328,1401,1475,1505,1527,1532,1538,1544,1558,1584,1617,1658,1697,1720,1747,1767,1786,1000,1095,1186,1250,1301,1343,1413,1489,1517,1536,1540,1543,1549,1561,1588,1622,1662,1697,1719,1743,1753,1757],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
