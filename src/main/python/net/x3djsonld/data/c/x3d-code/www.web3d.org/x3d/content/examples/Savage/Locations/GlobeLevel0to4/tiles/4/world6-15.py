###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,157.4583433915838,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1946,-2134,-2571,-2474,-1965,-1272,-2178,-2457,-3615,-2933,-888,-1322,-1741,-3685,-4389,-4282,-3735,-4099,-4417,-4399,-3931,-3718,-1957,-2091,-2422,-1659,-2172,-1461,-2111,-2305,-3564,-2537,-123,-1360,-1806,-4322,-4736,-3801,-5268,-4068,-4312,-4199,-4006,-3783,-1825,-2216,-2438,-1139,-1980,-1555,-2027,-2752,-3536,-2606,-3,-2097,-1969,-5419,-2050,-2225,-3730,-4519,-4650,-4189,-3246,-3590,-1615,-1604,-2299,-1792,-1914,-1750,-1243,-3515,-3501,6,-376,-1418,-2939,-3223,-2922,-3330,-2328,-2368,-3568,-4041,-4180,-4055,-1131,-1365,-1309,-259,-1892,-1118,-1672,-3652,-1708,326,-2229,-606,-4323,-2304,-2878,-3140,-2743,-2341,-2002,-3803,-3875,-3946,-2148,-2013,-261,-1955,-1102,-203,-3271,-3540,159,-2360,58,-4079,-3280,-1296,-3002,-3059,-2891,-3148,-2958,-2621,-3396,-3622,-3028,-1755,-1068,-2173,-1178,-1463,-3581,-2385,-999,-2104,-1530,-4547,-1577,-2469,-3150,-3355,-3190,-2805,-3040,-2413,-3969,-3528,-2975,-2678,-43,-2531,-1836,-3461,-3561,-5,-2774,-1622,-3550,-6017,-1202,-2726,-3268,-2964,-2962,-3319,-3116,-3008,-3134,-3364,-2064,-2774,-4,-2309,-3073,-3568,-3562,0,-3310,-3178,-4424,-4933,72,-1586,-3293,-2757,-3017,-2742,-2995,-3130,-1749,-3337,-2264,-2782,-315,-2653,-3134,-3469,-3621,-3376,-2603,-4051,-4408,-3476,-31,-2105,-3158,-3108,-2947,-2994,-2702,-1989,-1694,-2280,-1833,-3112,-2919,-3932,-3028,-2967,-435,-3671,-3570,-4458,-3440,-2725,-994,-2507,-2873,-2858,-2998,-2809,-2422,-2343,-811,-2028,-2417,-3286,-3631,-4014,-3074,-3356,-1420,-3447,-4595,-4299,-4094,-1455,-1978,-2478,-2888,-2827,-2650,-2831,-2538,-2611,783,-1,-2120,-2921,-3759,-4135,-3992,-4174,-3904,-1530,-3691,-4337,-4842,-543,-1967,-2954,-3042,-3125,-2689,-2810,-2368,-2135,148,-249,-2657,-2609,-3212,-3956,-4102,-4828,-3894,-4947,-4605,-4788,-4630,-705,-2609,-3194,-3151,-2874,-2687,-2671,-2720,-2926,-775,-4,-3152,-2415,-3324,-3102,-4289,-5021,-3919,-2865,-4383,-4790,-4092,-131,-2909,-3231,-3323,-3126,-3595,-3249,-2366,-2824,-577,-3,-3464,-2558,-3302,-3497,-4268,-4876,-4398,-4563,-3522,-2752,-1157,-197,-3050,-3331,-3365,-3739,-2418,-2968,-2570,-2575,-2678,-2434,-3597,-2880,-3155,-2801,-3561,-4575,-4560,-3752,-3401,-3098,170,6,-3200,-3419,-3422,-2785,-2870,-3150,-3161,-3097,-2597,-2241,-3268,-3964,-2611,-2940,-2945,-4443,-4860,-3586,-3841,-5480,3,-718,-3214,-3330,-3470,-3366,-3048,-3150,-2873,-2908,-2349,-2220,-3427,-4172,-2419,-1459,-2978,-4355,-4122,-3696,-4551,-2303,-1490,-2413,-3395,-2991,-2928,-3416,-3063,-2898,-3034,-2867,-2511,-2287,-2232,-4387,-3218,-3332,-4590,-3211,-3484,-3120,-2157,-3154,-1776,-2146,-2817,-3113,-3312,-3210,-2992,-2887,-2917,-2768,-2074,-1975,-1893,-3189,-4378,-3326,-3684,-3146,-3711,-2741,-1023,-4194,-1670,-2440,-3344,-3224,-3155,-3565,-1999,-3743,-1982,-2983,-2242,-2440,-1891,-2112,-3502,-3318,10,-3827,-4250,-4122,-2723,-6196,-1899,-2798,-3281,-3416,-3030,-3204,-1543,-2582,-3072,-2705,-3404,-3247,-1950,-1983,-2780,-4309,-2531,-3540,-4764,-4279,-4569,-8023,-1887,-1962,-2920,-3398,-3068,-2277,-3313,-3095,-2699,-1393,-3178,-2960,-2043,-2035,-2232,-4406,-2636,-3634,-4982,-4479,-4518,-7287,-1778,-2278,-2984,-2972,-1971,-2492,-2976,-3231,-2526,-2785,-3234,-2649],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
