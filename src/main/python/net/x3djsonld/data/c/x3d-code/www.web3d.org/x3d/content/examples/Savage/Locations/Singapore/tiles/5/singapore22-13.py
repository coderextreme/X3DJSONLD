###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore22-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[53,53,49,46,40,34,29,26,28,30,33,38,41,46,48,50,51,52,52,52,52,53,53,52,49,44,42,43,44,43,42,42,42,41,41,40,39,52,53,50,47,41,35,30,26,29,33,37,42,45,49,50,50,50,51,51,51,51,51,51,50,47,42,39,40,41,41,41,41,41,40,40,39,38,49,52,50,47,41,36,31,26,29,34,39,44,46,49,49,47,47,47,47,48,48,48,47,46,44,39,36,38,39,39,40,39,39,39,40,39,37,44,48,47,45,41,37,32,27,30,33,38,43,45,46,44,42,41,41,42,43,43,43,42,41,39,35,33,36,37,38,39,38,38,39,40,39,37,39,43,43,44,41,38,33,28,29,32,36,41,42,42,40,37,36,36,38,39,39,39,39,39,37,34,33,34,36,37,38,37,37,39,40,39,37,36,38,40,43,41,40,34,29,29,29,32,36,37,37,36,34,35,36,38,39,39,39,39,39,38,36,35,35,35,36,37,37,37,38,39,38,37,32,34,38,42,41,40,35,29,28,27,29,32,33,34,34,34,35,36,38,40,41,41,41,42,42,40,39,37,35,37,37,37,37,37,38,38,37,30,32,37,42,40,38,33,28,27,26,27,30,32,35,36,38,39,41,43,45,47,48,48,49,49,47,45,42,40,40,39,39,38,38,37,37,36,29,31,36,42,39,37,32,27,26,25,27,29,32,36,39,42,44,45,48,50,52,53,54,54,54,52,50,46,44,42,41,40,38,37,36,36,35,28,32,35,40,37,34,30,25,25,25,27,30,35,41,44,46,48,50,51,53,54,56,57,57,56,54,51,47,45,44,42,40,37,35,33,33,32,27,31,34,38,35,32,28,23,24,25,28,31,37,44,47,49,51,53,54,54,55,58,58,58,57,54,51,47,44,44,42,39,36,34,32,31,30,25,29,32,34,31,29,26,22,24,26,29,33,38,42,45,47,49,51,52,53,54,56,56,54,52,49,46,43,41,42,41,37,34,33,32,31,30,23,27,29,31,28,26,24,22,24,26,30,34,37,40,42,44,46,48,50,52,53,54,54,52,49,46,43,41,40,42,41,37,33,33,33,31,30,21,23,25,26,25,24,23,23,24,24,27,30,32,35,36,38,40,42,45,49,51,53,53,52,50,47,45,44,44,44,43,39,36,36,36,36,36,20,20,22,23,23,23,23,24,23,23,25,27,29,31,32,34,36,38,41,45,49,52,52,51,49,47,46,47,47,46,44,41,39,40,40,40,41,20,20,22,23,24,24,24,24,23,23,25,28,30,32,35,38,39,39,40,42,45,48,49,48,47,48,48,48,48,45,44,44,44,45,46,44,44,20,20,22,23,25,27,26,26,24,23,25,28,31,34,38,41,42,41,41,41,43,45,46,46,47,49,50,48,47,45,44,45,47,49,50,48,46,20,21,23,26,30,34,34,34,31,28,28,29,33,37,41,45,46,46,46,46,47,50,50,49,50,51,51,48,45,44,44,45,47,49,50,47,45,21,22,25,29,35,41,41,42,37,32,31,30,34,39,43,47,50,51,51,51,53,55,56,54,53,54,53,47,44,44,45,46,48,49,50,47,44,23,24,28,32,39,45,47,49,43,37,34,31,34,38,42,46,50,52,54,55,58,62,63,61,59,56,53,47,45,47,49,51,53,52,51,47,42,25,27,31,35,43,50,52,54,49,41,37,33,34,37,41,45,49,52,55,58,62,68,69,68,64,58,52,47,46,49,53,56,58,55,53,47,42,25,27,32,38,45,51,54,54,50,44,39,34,34,35,38,42,46,50,53,56,62,68,69,67,63,56,51,48,47,50,54,57,59,57,55,50,47],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
