###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2703,-1370,-2514,-1599,-2813,-7453,-5785,-5790,-5714,-5775,-5602,-5615,-5780,-5485,-5495,-5186,-4905,-5206,-4825,-4665,-4460,-4554,-2704,-767,-2833,-2679,-210,-9928,-5922,-5554,-5679,-5728,-5568,-5631,-5762,-5434,-5044,-5177,-4812,-5031,-4611,-4597,-4621,-5002,-3130,-1014,-3001,-2476,-1035,-5351,-5897,-5750,-5709,-5769,-5511,-5623,-5638,-5462,-5020,-5034,-4514,-4973,-4632,-4681,-4775,-4924,-3070,-1127,-2302,-2125,-564,-3797,-6208,-5586,-5559,-5570,-5440,-5503,-5549,-5361,-5301,-5125,-5085,-4812,-4670,-4631,-4753,-4835,-3470,-819,-2349,-1956,-1057,-2665,-7112,-5831,-5665,-5413,-5454,-5533,-5445,-5208,-5378,-5028,-4116,-4681,-4697,-4482,-4680,-4914,-3212,-1084,-2381,-1869,-1855,-1333,-9160,-5760,-5707,-5479,-5443,-5582,-5444,-5108,-5325,-5064,-4890,-4760,-4771,-4620,-4840,-4748,-3268,-1963,-2209,-2751,-1937,-16,-6056,-5900,-5628,-5415,-5449,-5465,-5340,-5161,-5253,-5336,-5033,-4845,-4746,-4696,-4553,-3770,-3097,-1364,-2803,-2399,-2162,-14,-3780,-6037,-5516,-5235,-5646,-5144,-5106,-5036,-5158,-5117,-4850,-4306,-4707,-4778,-3706,-2885,-2514,-1944,-2649,-2496,-1893,-596,-4816,-6012,-5526,-5066,-5253,-5033,-4998,-5165,-4932,-4991,-4928,-4989,-4917,-5018,-3899,-4729,-3620,-66,-2516,-2409,-2562,-1567,-4828,-6590,-5272,-4356,-4607,-4877,-5468,-5022,-5302,-4959,-4448,-4914,-4627,-4647,-4798,-4029,6,-1316,-2706,-2385,-2950,-1366,-3658,-5593,-4904,-4913,-3042,-5298,-5529,-5185,-5173,-5092,-4875,-4803,-4935,-4952,-5057,-4632,-1822,-731,-2431,-2446,-2599,-1370,-1130,-8306,-5021,-4600,-4549,-5194,-5462,-5376,-5234,-4288,-4590,-4738,-4918,-5031,-4594,-4655,-2538,-910,-2362,-2213,-2187,-2152,-1303,-8221,-4596,-5129,-5311,-5235,-5539,-5391,-5493,-5363,-4913,-4623,-4948,-5169,-4767,-4895,-202,-465,-2153,-1954,-2511,-2329,-1354,-5662,-4843,-4851,-5262,-5165,-5519,-5684,-5400,-5585,-5333,-5327,-5038,-5176,-5121,-4949,323,-445,-2441,-2304,-2222,-2166,-1410,-5601,-4698,-4885,-5340,-4980,-5670,-5313,-5630,-5087,-5197,-4561,-4979,-5147,-4735,-4679,-1632,-2665,-1631,-1861,-1999,-1747,-1496,-4460,-4895,-4928,-5333,-5304,-5655,-5163,-5595,-5146,-5539,-4567,-4892,-5092,-5013,-4971,-2709,-2627,-2062,-2552,-1038,-1819,-1468,-7025,-4195,-5030,-5307,-5202,-5443,-5271,-5595,-5689,-5197,-4475,-4942,-5163,-4736,-5430,-2739,-2262,-1172,-1359,-1267,-2453,-2067,-5293,-4468,-4755,-5004,-5002,-4862,-5497,-5763,-3773,-5057,-3792,-5109,-5061,-5114,-4279,-2286,-2315,-2537,-2015,-244,-2568,-5814,-4850,-3545,-3236,-4397,-2413,-5445,-5521,-5459,-5673,-4388,-5079,-5158,-4926,-4857,-4822,-2150,-2011,-1997,-2008,-5202,-4399,-4669,-3051,-925,-3284,-4469,-5158,-5512,-5489,-5172,-5539,-4128,-5192,-4787,-4977,-5340,-5203,-1468,-1677,-3228,-3763,-3515,-4426,-4746,284,-4716,-4907,-5047,-5071,-5462,-5393,-5466,-4330,-3410,-2891,-5033,-5070,-5147,-5221,-4657,-2879,-2884,-3397,-2191,-2790,-4690,-3793,-4812,-4885,-5136,-5221,-5043,-5410,-5778,-4459,-2662,-2532,-4781,-5135,-5195,-5242,-2313,-3085,-1971,-221,-4014,-3913,-4646,-4815,-4929,-4894,-5184,-5381,-4871,-5567,-5237,-3787,-2436,-2618,-5084,-5204,-5062,-5200,-2286,-2124,-2490,-1378,-3804,-3888,-4570,-4789,-4946,-5021,-5184,-5324,-5174,-5568,-5330,-3799,-2474,-2673,-5023,-5018,-5233,-5186],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
