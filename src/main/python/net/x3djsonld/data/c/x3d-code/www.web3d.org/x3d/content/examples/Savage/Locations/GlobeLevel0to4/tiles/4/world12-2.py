###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world12-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(44.95833735661353,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3920,-3925,-3733,-3663,-3511,-3343,-3280,-3141,-2399,-3077,232,531,2124,1514,1313,1596,1189,2163,926,1147,1374,1324,-3986,-3865,-3830,-3552,-3342,-3273,-3176,-3002,-2976,-3058,-86,224,1752,1391,1469,1254,1332,765,1383,2175,1685,1620,-3960,-3833,-3705,-3575,-3364,-3243,-2418,-2960,-3130,-2992,-102,126,1022,1101,1397,1405,1059,755,1899,2689,2566,1580,-3938,-3912,-3410,-3526,-2810,-2472,-2814,-2882,-2894,-2915,-65,68,698,949,1318,1445,1063,810,2356,2640,2516,2559,-3877,-3936,-3761,-3660,-2845,-2775,-2480,-2891,-2824,-2676,-178,98,1398,628,1275,1140,1095,1434,1512,2077,2018,2100,-4100,-3977,-3706,-3334,-2740,-2572,-2799,-2877,-2732,-1922,-179,160,537,405,428,640,1129,1468,1668,1862,1895,1689,-4018,-3907,-3756,-3463,-2845,-2120,-2511,-2791,-2713,-1107,-125,188,810,922,432,463,1408,942,1482,2347,2351,1730,-4098,-3769,-3704,-3217,-2251,-2527,-2761,-2730,-2699,-2099,-75,536,448,1317,646,298,537,556,1383,1645,1763,1341,-3992,-3889,-3407,-3135,-2909,-2763,-2753,-2663,-2560,-1928,-40,215,333,1048,172,417,570,928,1100,910,1577,1470,-4042,-3814,-3299,-3109,-2847,-2704,-2706,-2658,-2380,-1353,31,303,126,1794,892,525,732,747,1736,912,1855,2024,-3617,-3860,-3445,-2593,-2890,-2781,-2586,-2630,-2170,-350,346,652,9,1422,1059,708,769,732,1287,1325,1406,2282,-3891,-3415,-2505,-3129,-2788,-2817,-2466,-2631,-1351,-125,-16,-64,17,1540,1444,1164,671,1627,935,1008,1540,1240,-3904,-2527,-3176,-3053,-2250,-2490,-2534,-2380,-160,48,949,-142,164,483,2007,945,720,1411,1138,2012,1484,1280,-3735,-3051,-3279,-2991,-2755,-2485,-2370,-1549,244,558,98,134,1262,1536,1636,1372,2236,1419,1113,1860,1180,940,-3499,-3019,-3241,-3152,-2451,-2350,-1731,-70,795,272,639,1772,1330,816,1398,1618,733,2234,915,1877,1017,872,-3609,-3487,-3118,-2934,-2648,-2152,-1327,-4,-12,626,672,1841,1876,1352,1693,1305,679,1757,1048,1952,993,992,-3554,-3282,-3082,-2615,-2647,-809,-65,-7,442,480,880,2220,1777,1445,1575,1563,1483,1670,2593,1325,995,862,-3478,-3205,-2894,-2537,-1911,-163,-133,-1,1852,1122,1511,1584,1155,1212,1524,911,2312,1959,2337,1252,904,785,-3501,-2973,-2681,-2347,-226,-127,-164,446,640,1528,1012,889,929,1050,951,1859,2229,1820,1611,1109,937,856,-3300,-2861,-2857,-1564,-128,-171,33,1026,1295,1112,1130,1167,1016,885,1206,2173,2084,2576,1236,1034,852,783,-2775,-2785,-1457,188,-71,-212,267,1021,1519,1174,1209,1244,969,1084,2309,1799,2424,1379,962,919,774,751,-2915,-2875,5,-31,-103,163,-28,1490,1358,943,1041,739,957,1356,2146,2389,1204,983,926,752,672,730,-2636,-1808,387,56,-34,65,-11,1073,843,719,812,789,678,1565,1706,1575,1117,1096,910,666,683,629,-2668,-1468,127,-12,-19,834,52,1229,1058,768,697,806,702,1516,2041,1040,1169,839,820,641,625,631],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
