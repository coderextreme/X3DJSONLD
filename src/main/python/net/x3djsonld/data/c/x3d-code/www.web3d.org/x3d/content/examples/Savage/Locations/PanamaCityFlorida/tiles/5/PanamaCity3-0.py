###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(translation=(0.0,0.0,108224.56),
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/5/PanamaCity3-0.jpg'],repeatS=False,repeatT=False)),
          geometry=ElevationGrid(xDimension=22,xSpacing=1288.3877,zDimension=22,zSpacing=1717.8502,height=[-81,-79,-77,-81,-97,-123,-138,-155,-170,-178,-183,-186,-187,-186,-185,-184,-183,-182,-181,-180,-179,-178,-84,-85,-88,-98,-119,-143,-151,-166,-179,-186,-191,-194,-193,-191,-189,-188,-186,-185,-184,-183,-182,-180,-106,-112,-122,-137,-156,-166,-176,-187,-196,-200,-200,-200,-198,-195,-193,-191,-190,-189,-188,-187,-185,-183,-137,-146,-160,-168,-179,-189,-200,-212,-221,-217,-209,-205,-202,-199,-197,-195,-194,-193,-192,-191,-189,-186,-154,-165,-176,-186,-196,-209,-220,-228,-233,-221,-213,-208,-205,-203,-201,-200,-198,-197,-195,-193,-192,-190,-171,-180,-190,-200,-210,-221,-232,-232,-226,-219,-215,-211,-209,-207,-205,-204,-202,-200,-199,-196,-196,-194,-186,-196,-206,-214,-222,-229,-238,-234,-226,-220,-217,-215,-213,-211,-209,-208,-206,-205,-203,-201,-199,-198,-201,-210,-219,-227,-231,-233,-233,-232,-227,-222,-220,-219,-217,-215,-213,-212,-210,-209,-208,-206,-204,-202,-213,-222,-229,-235,-237,-235,-232,-230,-228,-226,-225,-223,-222,-220,-219,-217,-216,-215,-213,-212,-210,-207,-225,-232,-236,-240,-240,-237,-234,-233,-233,-231,-230,-228,-226,-225,-224,-223,-221,-219,-217,-217,-216,-215,-236,-240,-241,-242,-242,-240,-239,-239,-238,-238,-236,-234,-233,-231,-229,-229,-227,-225,-224,-222,-222,-220,-246,-247,-247,-245,-245,-244,-243,-244,-244,-244,-242,-241,-240,-239,-237,-236,-234,-232,-230,-228,-228,-227,-252,-253,-255,-252,-251,-251,-250,-250,-251,-250,-249,-248,-248,-247,-246,-244,-243,-240,-237,-235,-235,-234,-258,-258,-261,-261,-260,-259,-260,-259,-259,-258,-257,-256,-256,-255,-254,-253,-251,-248,-245,-244,-243,-242,-266,-266,-267,-268,-269,-271,-269,-268,-268,-268,-267,-266,-266,-265,-264,-262,-260,-257,-254,-253,-252,-250,-275,-276,-278,-279,-279,-279,-278,-279,-279,-279,-278,-278,-277,-276,-275,-274,-271,-267,-265,-263,-262,-260,-285,-286,-288,-289,-289,-290,-290,-291,-292,-292,-292,-291,-290,-289,-288,-286,-284,-281,-277,-275,-272,-271,-297,-299,-301,-302,-302,-303,-303,-304,-305,-306,-306,-305,-305,-304,-303,-301,-298,-295,-293,-290,-287,-287,-310,-312,-315,-317,-317,-317,-317,-318,-319,-322,-322,-321,-321,-320,-319,-318,-315,-312,-310,-309,-305,-305,-324,-327,-329,-331,-332,-333,-333,-334,-335,-337,-338,-339,-339,-339,-338,-336,-334,-331,-331,-329,-326,-326,-339,-342,-345,-348,-349,-350,-350,-351,-354,-355,-358,-358,-357,-358,-358,-357,-355,-353,-353,-351,-348,-347,-340,-343,-346,-349,-350,-350,-351,-352,-355,-356,-359,-359,-358,-359,-359,-359,-356,-354,-354,-352,-349,-349]))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
