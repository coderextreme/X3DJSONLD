###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(translation=(135280.7,0.0,108224.56),
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/5/PanamaCity3-5.jpg'],repeatS=False,repeatT=False)),
          geometry=ElevationGrid(xDimension=22,xSpacing=1288.3877,zDimension=22,zSpacing=1717.8502,height=[-39,-39,-38,-37,-38,-38,-37,-36,-35,-36,-35,-34,-33,-33,-34,-33,-33,-31,-31,-30,-30,-30,-40,-39,-38,-38,-38,-38,-37,-37,-36,-36,-35,-35,-34,-34,-35,-33,-33,-33,-32,-31,-31,-30,-40,-39,-40,-39,-39,-37,-38,-37,-37,-36,-35,-35,-34,-35,-35,-33,-33,-32,-32,-32,-31,-31,-40,-40,-39,-39,-39,-38,-37,-37,-37,-36,-36,-35,-37,-36,-35,-35,-33,-33,-33,-32,-32,-31,-41,-41,-41,-39,-40,-38,-38,-37,-36,-37,-36,-39,-37,-36,-35,-34,-33,-35,-33,-34,-33,-32,-42,-41,-40,-39,-39,-38,-38,-37,-37,-37,-38,-37,-37,-36,-36,-35,-35,-35,-34,-33,-32,-32,-42,-41,-40,-40,-39,-38,-38,-37,-36,-37,-38,-37,-37,-37,-36,-35,-35,-34,-34,-33,-33,-33,-42,-42,-40,-39,-39,-39,-39,-38,-40,-39,-38,-37,-37,-36,-36,-36,-35,-34,-33,-32,-31,-31,-42,-41,-40,-40,-39,-39,-39,-40,-39,-39,-37,-36,-37,-36,-35,-35,-35,-34,-32,-32,-30,-30,-42,-42,-42,-40,-40,-40,-40,-40,-39,-38,-38,-37,-37,-36,-36,-35,-35,-33,-32,-30,-29,-29,-42,-42,-41,-41,-40,-40,-40,-40,-39,-38,-38,-38,-37,-36,-36,-36,-35,-33,-32,-30,-28,-28,-42,-42,-42,-41,-41,-40,-40,-39,-38,-38,-38,-37,-37,-36,-36,-35,-34,-33,-32,-31,-30,-30,-42,-42,-42,-41,-41,-40,-40,-39,-38,-38,-38,-37,-37,-36,-36,-35,-34,-33,-32,-32,-31,-30,-43,-42,-42,-41,-41,-40,-40,-39,-38,-38,-38,-37,-37,-36,-36,-35,-34,-33,-33,-32,-31,-31,-43,-43,-42,-41,-41,-40,-40,-39,-39,-39,-38,-38,-37,-37,-36,-35,-34,-34,-33,-32,-32,-31,-43,-42,-42,-41,-41,-40,-40,-39,-39,-39,-39,-38,-37,-37,-36,-35,-35,-34,-33,-33,-32,-31,-42,-42,-42,-42,-41,-41,-40,-39,-40,-40,-40,-39,-38,-37,-36,-36,-35,-34,-34,-33,-32,-32,-42,-42,-42,-42,-42,-41,-41,-41,-40,-40,-39,-39,-38,-37,-37,-36,-35,-35,-34,-33,-32,-32,-42,-41,-42,-42,-42,-42,-42,-41,-40,-40,-39,-39,-38,-37,-37,-36,-35,-35,-34,-33,-33,-32,-46,-43,-41,-41,-42,-42,-42,-42,-41,-40,-39,-39,-38,-38,-37,-36,-36,-35,-34,-34,-33,-32,-49,-46,-43,-42,-43,-43,-43,-43,-41,-40,-40,-39,-38,-38,-37,-37,-36,-35,-35,-34,-33,-33,-49,-46,-43,-42,-43,-43,-43,-43,-41,-40,-40,-39,-38,-38,-37,-37,-36,-35,-35,-34,-33,-33]))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
