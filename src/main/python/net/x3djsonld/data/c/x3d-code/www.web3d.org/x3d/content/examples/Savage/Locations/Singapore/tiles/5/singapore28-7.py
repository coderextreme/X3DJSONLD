###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore28-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4567512097838313,103.69037723890314,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[9,10,11,12,13,13,12,12,11,10,9,10,12,12,11,11,11,11,11,10,9,8,8,7,6,4,1,-2,-9,-12,-5,0,1,3,9,14,17,10,11,12,13,13,13,12,11,10,10,10,10,12,12,11,11,11,11,11,10,9,8,7,7,6,6,3,0,-4,-6,-2,0,1,5,16,25,22,11,12,12,13,14,13,12,10,9,9,9,10,12,12,11,11,11,11,11,11,10,9,7,6,7,8,5,3,0,0,0,0,1,7,24,35,27,12,12,12,13,14,13,12,10,8,7,7,8,9,9,9,9,9,9,11,11,10,8,7,6,7,7,5,4,2,2,3,4,5,9,20,27,22,11,12,12,13,14,13,12,10,8,6,5,5,6,6,6,6,6,8,10,11,9,8,6,6,6,6,5,4,4,5,6,7,9,10,13,16,16,11,12,12,13,14,13,12,10,8,6,5,5,5,5,4,4,5,7,10,11,10,8,6,6,6,6,5,5,5,5,6,7,8,9,10,11,12,12,13,14,14,14,13,12,10,8,6,5,5,5,4,3,3,3,6,10,11,10,8,6,5,6,6,5,5,5,6,7,8,7,7,7,8,8,12,13,14,13,13,12,11,9,7,6,5,5,4,3,1,2,5,8,10,11,10,8,6,5,6,6,6,6,6,7,7,8,7,7,7,7,7,13,13,13,12,12,11,10,9,7,6,6,5,4,2,0,2,6,9,11,12,10,8,6,5,6,7,6,7,8,8,8,8,7,7,6,6,6,16,15,14,13,11,10,9,9,8,8,8,7,6,4,3,5,9,11,11,11,10,8,6,6,6,7,7,8,9,9,9,9,9,8,7,6,6,19,17,15,13,11,10,9,9,9,10,10,10,9,8,7,9,12,13,12,11,9,8,6,6,7,7,8,9,10,10,11,11,11,10,9,8,7,22,20,18,15,12,10,9,10,10,11,11,11,11,10,10,11,13,13,12,12,10,9,8,7,8,9,9,10,11,11,12,12,12,12,11,10,9,24,23,21,17,12,10,10,11,12,12,12,12,12,12,12,12,13,13,13,13,12,11,10,9,9,10,10,11,12,12,12,13,14,14,13,12,10,26,26,24,19,14,11,11,11,12,12,12,12,13,13,13,13,13,13,14,14,13,13,11,10,11,11,11,12,13,13,13,13,14,14,14,13,11,29,28,26,21,16,12,10,10,11,12,13,13,13,13,14,14,14,14,15,15,14,14,13,12,12,12,12,12,13,14,14,14,14,14,14,14,13,30,30,27,23,18,14,11,10,11,12,13,13,13,14,14,15,16,16,16,16,16,15,14,14,13,12,12,12,13,13,14,15,14,14,14,14,14,31,31,28,24,19,14,11,10,11,12,14,14,14,15,16,17,19,19,19,19,18,17,16,15,13,13,12,12,12,12,13,14,13,13,14,14,14,32,31,28,24,19,15,12,11,12,13,15,16,16,17,18,19,21,21,21,21,20,19,17,16,14,13,12,12,12,13,14,14,14,13,14,14,14,31,30,27,23,18,14,12,12,13,15,16,18,19,19,20,21,23,24,24,23,22,21,19,17,15,14,13,13,14,15,15,15,14,14,14,15,15,30,29,26,22,17,15,13,14,15,17,18,20,21,22,22,23,25,25,25,24,23,21,19,17,16,16,15,15,16,17,17,17,16,15,15,16,17,28,27,25,21,17,15,15,16,17,19,21,22,24,24,24,25,25,25,24,23,22,21,19,17,18,18,17,18,19,19,20,19,18,16,17,18,19,29,27,25,21,18,16,17,18,20,22,23,24,26,26,25,25,25,24,23,23,22,21,19,19,20,20,19,19,20,21,21,21,20,18,19,19,20,31,29,27,22,19,18,19,20,22,24,25,26,27,27,26,25,24,23,22,22,22,21,20,21,22,22,21,21,20,21,22,22,21,20,21,21,21],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
