###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world15-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(78.7083383624419,-90.04166398449098,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[343,131,-199,-229,-165,-49,-229,-695,-601,636,-97,-139,-398,-278,-392,-440,-497,-584,-651,-208,209,672,230,320,648,633,1138,790,533,102,565,938,579,487,-199,-90,-447,-501,-74,-616,-146,27,325,585,3,-286,-188,1,317,139,273,307,-48,23,-19,-507,-534,-494,-588,-626,-301,-738,-600,-174,611,518,-352,-210,0,330,-31,232,302,226,372,1279,832,516,-118,-352,-650,-367,-157,-104,-70,454,349,1106,7,-4,-142,305,3,20,615,436,349,1444,1246,1151,272,260,-341,-653,-218,169,593,810,1031,1190,600,501,1,-266,322,337,169,240,408,1532,1636,168,1359,1181,851,-219,-499,-403,-165,8,117,239,129,654,763,928,293,-60,89,974,414,609,754,654,1,260,9,-114,-213,-210,-186,-184,-295,-319,1399,566,314,69,52,108,312,488,-144,870,649,871,522,959,499,721,543,654,-202,-171,-119,-95,347,1,307,-425,96,91,1,7,588,611,764,1389,1647,1503,1690,1390,1174,565,336,-140,-322,-196,-699,-691,250,504,581,213,69,385,493,57,-197,386,587,350,1254,1727,1872,1325,1295,1244,587,-306,-228,158,118,305,23,53,1219,1284,969,254,370,101,654,865,694,875,502,349,655,915,1,456,185,52,347,427,610,929,600,1106,1226,869,1582,959,1559,782,1282,1263,349,102,177,25,379,610,-200,-111,-368,-237,1,304,448,1252,304,959,1218,914,1219,764,901,1447,1653,1574,1051,1568,914,581,-421,-324,-291,-255,-200,-299,-565,-480,1,293,341,611,151,147,621,236,1,936,624,814,753,655,-1597,-1587,-1212,-765,-385,-297,-239,-265,-260,-186,-657,-257,-107,-72,-143,-96,-102,-112,-117,-265,-282,-171,-1549,-1403,-1409,-1604,-1636,-1590,-1560,-986,-651,-790,-870,-628,-642,-315,-264,-262,-209,-174,-174,-182,-178,-185,-1907,-1804,-1803,-1838,-1816,-1766,-1694,-1583,-1603,-1531,-1411,-1388,-1363,-1331,-1251,-1203,-1203,-1051,-1083,-1095,-1119,-1126,-1903,-1887,-1920,-2011,-2084,-1856,-1927,-1946,-1518,-1402,-1184,-1174,-1148,-1041,-1008,-1004,-977,-786,-638,-696,-725,-670,-1933,-1999,-2056,-2041,-2008,-2047,-2007,-1936,-1905,-1859,-1914,-1833,-1633,-1254,-1076,-993,-981,-946,-869,-785,-598,-574,-1859,-1920,-1917,-1968,-1994,-1994,-1995,-2002,-2019,-2033,-2037,-2019,-2002,-1997,-1983,-1996,-1912,-1790,-1410,-1218,-1151,-1129,-2443,-2462,-2468,-2477,-2456,-2423,-2398,-2409,-2573,-2355,-2218,-2353,-2249,-2238,-2212,-2168,-2116,-2007,-1980,-1929,-1849,-1884,-2600,-2728,-2733,-2699,-2709,-2728,-2729,-2687,-2618,-2550,-2523,-2586,-2603,-2650,-2617,-2493,-2403,-2388,-2382,-2326,-2328,-2389,-2181,-2218,-2254,-2271,-2291,-2324,-2329,-2336,-2384,-2567,-2624,-2644,-2625,-2627,-2634,-2161,-1872,-2217,-2282,-2025,-2193,-2210,-2098,-2114,-2138,-2178,-2212,-2211,-2206,-2216,-2319,-2435,-2433,-2400,-2358,-2373,-2459,-2365,-2349,-2410,-2139,-2176,-2184,-2005],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
