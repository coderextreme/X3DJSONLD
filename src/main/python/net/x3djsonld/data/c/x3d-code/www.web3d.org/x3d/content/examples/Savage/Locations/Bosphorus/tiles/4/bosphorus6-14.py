###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/bosphorus6-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(40.95291395417769,29.47604227744523,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.0035324567,zDimension=24,zSpacing=0.0023768744,height=[135,131,129,135,129,136,134,146,149,154,182,192,203,200,210,214,235,268,281,248,241,255,126,123,130,139,149,151,138,140,165,161,160,168,181,212,218,234,275,248,294,268,250,244,156,147,163,186,194,173,162,141,149,173,187,177,194,216,234,249,300,296,281,300,255,251,188,191,217,242,237,186,194,153,149,149,156,176,200,208,214,235,279,317,319,286,267,279,198,236,260,277,225,194,208,158,153,161,163,171,175,176,195,227,240,280,335,293,297,298,168,201,235,241,221,218,194,181,174,194,192,182,218,204,208,196,216,245,313,330,302,296,164,213,272,232,229,223,226,205,167,214,221,217,212,248,262,255,262,221,259,303,304,295,171,206,221,198,229,221,227,219,169,170,183,199,198,210,213,238,258,258,254,280,308,306,145,173,196,211,233,237,243,206,185,189,226,197,217,246,237,214,224,241,268,262,306,300,146,193,213,213,238,245,240,202,210,205,250,229,220,274,271,229,234,229,240,268,284,272,151,202,198,190,217,224,253,242,247,228,271,258,241,276,254,257,261,238,244,265,252,243,168,176,224,201,196,214,229,261,264,281,279,273,256,293,276,303,266,239,242,261,259,253,176,195,245,234,216,211,223,267,269,292,311,285,314,328,307,327,306,258,254,279,245,244,178,212,220,265,251,248,229,257,276,288,312,322,313,343,342,344,316,262,292,280,267,262,150,170,206,226,240,255,248,287,264,281,289,319,343,364,353,351,312,291,305,262,248,254,177,174,216,220,206,238,263,282,293,299,306,325,358,353,362,359,351,348,289,259,246,238,190,173,168,191,198,217,217,241,296,310,317,332,353,334,383,386,391,316,263,244,248,256,189,206,188,165,201,204,221,246,286,306,323,312,311,303,328,375,365,296,257,242,211,210,165,196,220,198,193,234,243,249,283,323,322,289,325,273,306,302,317,295,283,275,249,239,177,198,221,237,204,215,227,236,288,326,326,270,275,264,286,276,294,300,253,237,211,207,182,203,200,220,239,227,214,241,275,290,308,265,254,270,272,276,272,305,292,270,256,252,189,185,201,221,225,208,211,249,238,275,270,248,228,273,253,260,279,312,281,245,224,209,167,179,206,205,219,211,214,218,252,271,288,270,221,254,242,290,289,291,263,244,239,223,165,181,208,208,214,209,209,215,255,271,294,282,221,252,242,297,291,287,266,236,239,227],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(41.06225017873692,29.030952729968703,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
