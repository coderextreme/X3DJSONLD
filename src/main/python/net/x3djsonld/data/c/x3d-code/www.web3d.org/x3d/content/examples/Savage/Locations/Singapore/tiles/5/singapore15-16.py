###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[27,29,27,24,27,30,32,34,34,34,37,41,43,45,44,43,40,37,37,37,42,48,52,55,51,41,34,30,27,24,22,20,19,18,18,18,26,25,22,19,21,24,27,29,31,33,36,39,40,41,40,39,38,37,37,38,39,42,44,44,43,39,36,32,29,27,26,25,23,21,19,19,25,24,22,19,20,22,24,26,29,31,33,36,36,37,37,35,35,35,36,36,37,37,36,36,35,35,34,32,30,29,28,27,25,23,21,19,25,26,25,24,23,23,24,24,26,28,30,33,33,33,33,32,32,32,33,34,34,32,30,29,29,29,30,30,30,29,28,27,26,24,22,18,31,31,30,28,27,26,24,22,24,26,28,30,31,31,31,29,29,31,32,34,34,33,31,28,27,28,29,29,30,31,31,30,28,26,23,20,40,39,36,33,31,29,25,20,21,24,26,29,30,30,29,27,28,30,32,36,38,38,36,32,30,30,29,30,31,33,34,34,32,28,25,24,49,48,43,38,35,32,27,22,23,25,28,32,33,33,31,28,28,29,33,37,40,42,40,36,33,31,31,32,34,37,38,38,35,31,28,28,58,56,50,44,39,34,31,28,29,30,33,38,39,41,37,32,30,30,33,37,41,44,43,38,35,32,33,35,38,41,42,42,39,33,30,32,63,60,54,48,41,35,34,34,35,35,39,43,44,46,42,36,34,33,35,39,42,45,43,38,35,32,32,35,39,43,45,44,41,35,32,34,65,62,55,48,41,36,37,40,41,41,44,47,48,50,46,40,37,36,38,41,43,44,41,37,33,31,30,33,37,42,45,45,42,37,34,37,66,64,56,48,41,36,40,44,46,46,48,50,50,50,46,42,40,37,39,41,42,42,39,34,31,30,31,34,37,42,45,44,41,37,36,39,67,65,56,48,41,36,41,46,49,50,50,51,49,46,44,42,40,38,38,38,39,40,37,30,28,30,33,37,41,43,44,41,38,37,38,41,67,64,55,47,40,36,41,47,50,51,52,51,48,44,42,41,39,37,36,36,36,37,33,26,25,29,34,40,44,46,44,40,37,37,38,41,65,61,52,43,38,36,40,45,48,51,51,50,47,43,40,38,37,35,33,32,31,30,27,22,23,29,36,43,47,49,47,42,39,38,38,39,63,58,50,42,40,41,44,47,50,51,51,50,47,44,42,40,37,35,33,30,29,27,25,21,23,29,36,42,46,48,46,41,38,36,36,36,60,54,48,44,47,51,53,54,54,52,51,49,47,46,46,46,43,39,35,31,29,28,26,23,25,29,34,39,42,43,42,38,35,34,32,30,55,50,47,46,53,59,61,60,58,55,52,50,49,49,49,49,46,41,36,32,30,28,27,25,27,30,33,36,39,40,39,36,33,32,30,27,50,47,46,48,55,63,66,66,63,60,56,53,52,51,50,49,45,39,36,33,31,29,28,26,27,29,32,35,38,39,38,35,32,30,28,25,48,47,48,51,58,65,68,70,67,63,60,56,53,52,50,48,44,38,36,35,33,31,30,28,28,30,32,35,37,37,35,33,31,29,27,25,51,52,54,57,61,66,68,70,68,65,62,59,55,52,49,47,43,39,38,37,36,34,32,31,31,31,33,35,36,34,32,30,29,29,27,26,53,57,59,62,64,67,67,68,67,65,64,61,57,53,50,48,44,41,40,39,38,36,35,34,34,34,35,35,34,31,29,27,27,27,26,26,56,61,64,66,67,67,66,64,64,64,63,62,59,55,52,50,47,42,41,41,40,38,38,37,37,37,36,36,33,30,26,24,23,23,23,23,59,65,68,69,68,66,64,61,61,62,62,62,60,56,53,51,48,44,43,43,42,40,39,39,39,37,36,35,32,28,24,22,20,20,19,20],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
