###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore8-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2821169622239519,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[53,61,68,64,59,50,39,33,27,21,14,15,17,22,29,34,39,42,44,44,44,43,42,40,38,39,42,44,41,40,41,42,41,39,37,36,59,62,63,57,50,42,34,30,28,23,19,19,21,25,29,32,37,40,45,45,44,42,40,38,36,38,41,43,40,38,38,39,37,35,34,33,63,59,55,48,40,34,29,29,29,26,24,24,26,29,31,33,36,39,45,46,44,41,38,36,34,35,40,42,40,38,35,34,32,31,31,31,61,53,46,38,31,30,29,32,35,32,29,29,29,32,34,37,38,39,41,42,42,41,37,34,31,31,34,38,40,39,34,30,28,27,27,27,57,47,37,30,24,27,32,36,41,38,35,34,32,35,38,40,40,40,38,38,40,39,36,32,28,26,29,34,40,41,33,26,24,22,23,23,56,44,32,27,23,29,35,40,45,44,41,39,37,38,39,40,40,38,34,34,35,34,32,29,27,26,28,32,38,39,32,25,23,22,22,22,55,41,29,27,25,31,38,43,48,48,47,45,42,40,40,39,37,35,31,30,29,29,28,27,27,26,27,30,35,35,30,25,23,22,22,22,56,45,34,31,29,33,38,42,47,48,47,45,43,40,38,36,32,29,26,25,25,26,26,26,27,27,26,26,29,29,26,25,23,22,21,21,56,49,42,38,35,36,37,41,45,46,46,44,43,39,36,32,26,23,21,21,22,24,25,26,28,27,25,23,23,23,24,24,23,22,21,21,57,53,48,44,40,38,37,39,41,42,43,41,38,35,33,30,26,23,21,21,22,24,27,28,29,29,28,26,24,23,24,24,23,23,21,20,59,56,53,49,45,41,37,36,36,37,40,37,32,31,29,28,26,25,23,22,23,26,30,31,30,30,31,30,28,26,25,25,25,24,22,20,52,53,53,50,46,45,44,39,33,33,34,32,29,28,28,28,27,26,24,23,23,26,31,32,31,31,31,30,28,26,26,25,26,26,23,22,43,47,52,50,48,51,54,43,31,29,28,27,26,27,27,28,27,26,24,24,23,25,31,33,32,31,31,29,27,26,26,26,27,28,26,25,42,45,48,47,47,49,51,41,29,26,24,25,26,26,26,25,24,24,23,22,21,24,30,33,32,31,29,27,25,24,25,26,29,31,28,26,44,43,43,43,45,45,44,37,28,24,21,23,27,27,24,22,21,21,21,21,20,23,29,32,31,30,27,24,22,22,24,27,32,34,30,27,43,42,40,39,38,37,35,30,26,23,20,23,27,27,26,24,22,22,23,21,18,19,24,27,28,27,25,23,22,22,25,30,35,37,31,26,42,41,40,34,29,27,24,24,23,23,21,24,27,28,29,27,24,25,26,23,17,16,19,22,25,25,23,21,21,23,28,34,38,39,32,25,41,38,35,30,25,23,21,21,20,20,20,22,25,27,29,28,26,26,27,23,16,14,17,19,21,21,20,20,22,25,30,34,39,40,32,25,40,34,28,26,23,22,20,19,18,17,17,19,21,25,29,29,27,27,27,23,16,14,16,17,17,17,17,19,23,27,30,33,38,40,33,26,36,30,26,25,23,22,20,19,18,17,17,18,20,23,26,26,24,24,24,20,16,14,15,16,16,16,17,19,24,27,29,31,35,37,32,28,30,28,26,25,24,22,19,19,19,17,17,17,18,20,22,20,17,17,18,17,16,14,14,15,15,17,18,20,24,27,28,28,31,33,32,29,24,24,24,24,23,21,18,18,19,19,18,18,18,19,20,19,16,15,14,14,15,15,15,16,17,17,19,21,24,27,27,27,30,32,32,30,19,20,21,21,21,19,17,18,20,20,21,21,20,21,21,19,16,14,12,12,13,15,18,19,18,18,20,22,24,27,27,28,32,34,33,31],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
