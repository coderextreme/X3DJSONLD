###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[3631,3617,3601,3598,3601,3608,3614,3608,3586,3529,3487,3433,3402,3390,3386,3398,3416,3446,3487,3509,3527,3535,3609,3598,3585,3577,3577,3580,3578,3560,3515,3463,3398,3365,3344,3326,3308,3301,3305,3327,3351,3369,3383,3387,3608,3588,3569,3557,3550,3542,3531,3507,3464,3400,3358,3313,3267,3222,3205,3201,3200,3193,3176,3162,3160,3160,3613,3584,3559,3537,3520,3504,3478,3433,3395,3351,3293,3188,3130,3100,3056,3021,2995,2976,2955,2932,2919,2921,3614,3586,3558,3535,3507,3463,3410,3370,3308,3252,3169,3089,3022,2981,2934,2898,2865,2830,2791,2768,2715,2682,3609,3586,3557,3532,3507,3446,3382,3313,3247,3179,3083,3000,2944,2899,2853,2782,2707,2641,2580,2542,2510,2496,3595,3571,3538,3509,3481,3415,3344,3278,3195,3106,3016,2941,2892,2830,2648,2572,2460,2369,2324,2278,2245,2234,3559,3542,3513,3482,3421,3368,3293,3218,3150,3070,2980,2889,2757,2620,2500,2369,2301,2227,2171,2123,2098,2084,3492,3493,3472,3412,3365,3302,3262,3192,3107,3037,2920,2744,2631,2527,2361,2282,2161,2093,2006,1831,1699,1675,3410,3393,3371,3349,3315,3288,3243,3172,3088,2993,2854,2643,2587,2494,2317,2200,2075,1937,1592,1383,1283,1281,3300,3300,3289,3281,3271,3242,3203,3145,3070,2967,2832,2693,2597,2502,2318,2158,2033,1780,1492,1201,946,1003,3089,3095,3151,3181,3186,3183,3158,3119,3078,2979,2856,2772,2640,2548,2360,2109,2010,1665,1334,964,998,666,2964,2969,2990,3039,3093,3113,3120,3106,3086,3020,2893,2818,2700,2598,2461,2189,1911,1748,1409,950,509,370,2791,2799,2853,2914,2988,3037,3082,3091,3082,3062,3007,2865,2778,2625,2543,2306,2014,1860,1625,1282,842,443,2624,2687,2698,2788,2890,2956,3006,3025,3052,3072,3065,2962,2820,2702,2564,2369,2139,1927,1694,1406,913,603,2401,2499,2563,2577,2736,2836,2874,2887,2914,3033,3045,2965,2837,2744,2591,2430,2192,1974,1764,1539,1277,943,2242,2369,2491,2498,2501,2636,2732,2761,2778,2821,2987,2960,2828,2744,2657,2518,2310,2108,2015,1845,1650,1452,2128,2243,2398,2411,2417,2435,2488,2623,2700,2741,2816,2833,2785,2733,2687,2582,2437,2203,2005,1743,1499,1179,2099,2218,2298,2296,2283,2315,2403,2447,2571,2668,2722,2749,2736,2696,2618,2527,2393,2134,2040,1849,1401,1024,1945,2114,2125,2024,1899,1919,2076,2392,2437,2526,2580,2586,2558,2529,2416,2339,2154,1980,1888,1799,1428,1221,1635,1810,1759,1678,1581,1705,1771,2194,2303,2277,2100,2128,2233,2212,2087,1977,1949,1845,1759,1603,1455,1294,1278,1320,1206,1273,1044,1373,1722,1960,2197,2166,1773,1744,1904,1974,1715,1586,1586,1603,1372,1199,1126,1036,-4,647,633,1047,157,953,1415,1705,1783,1906,1517,1265,1528,1430,1150,1184,1147,961,776,674,572,452,-3,505,303,648,129,824,1417,1616,1637,1765,1422,1189,1514,1369,1095,1043,866,763,685,560,416,292],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
