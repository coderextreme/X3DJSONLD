###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(translation=(27056.14,0.0,72149.71),
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/5/PanamaCity2-1.jpg'],repeatS=False,repeatT=False)),
          geometry=ElevationGrid(xDimension=22,xSpacing=1288.3877,zDimension=22,zSpacing=1717.8502,height=[-31,-32,-34,-35,-37,-35,-32,-33,-34,-33,-31,-31,-32,-32,-31,-32,-34,-33,-31,-31,-32,-32,-33,-31,-35,-34,-35,-34,-36,-37,-38,-39,-38,-37,-37,-38,-37,-37,-37,-39,-37,-37,-36,-36,-33,-35,-35,-36,-39,-40,-43,-44,-47,-47,-50,-51,-50,-49,-45,-45,-46,-44,-43,-43,-41,-41,-39,-41,-44,-47,-51,-56,-62,-72,-82,-85,-84,-81,-77,-74,-70,-62,-53,-51,-51,-49,-45,-45,-50,-56,-76,-85,-87,-93,-94,-92,-90,-88,-87,-86,-85,-82,-81,-78,-66,-56,-56,-54,-52,-49,-88,-92,-94,-95,-95,-94,-94,-94,-94,-94,-93,-93,-91,-89,-87,-85,-81,-62,-59,-60,-59,-56,-94,-96,-97,-97,-98,-99,-100,-101,-101,-100,-100,-99,-97,-94,-93,-91,-90,-82,-64,-66,-68,-68,-100,-102,-103,-102,-105,-106,-107,-107,-108,-107,-106,-104,-103,-101,-99,-97,-95,-95,-85,-76,-72,-75,-110,-110,-111,-112,-114,-114,-114,-115,-114,-112,-111,-109,-107,-106,-105,-103,-100,-98,-96,-95,-90,-78,-118,-122,-120,-122,-122,-122,-121,-121,-119,-117,-116,-116,-113,-111,-109,-108,-106,-104,-104,-98,-98,-98,-132,-134,-129,-130,-130,-129,-125,-125,-124,-122,-121,-120,-118,-116,-114,-113,-111,-110,-108,-106,-104,-103,-147,-142,-139,-138,-137,-135,-130,-131,-130,-127,-126,-125,-123,-121,-119,-117,-116,-114,-113,-111,-109,-108,-152,-145,-145,-143,-141,-140,-137,-136,-134,-133,-131,-129,-127,-125,-123,-122,-119,-118,-116,-114,-112,-111,-153,-151,-149,-147,-145,-143,-142,-141,-138,-136,-135,-133,-131,-129,-127,-125,-123,-121,-119,-118,-116,-114,-156,-154,-153,-151,-148,-145,-145,-145,-142,-141,-141,-138,-135,-133,-131,-129,-127,-124,-123,-121,-119,-118,-159,-158,-157,-154,-150,-148,-148,-149,-146,-145,-143,-141,-139,-137,-135,-133,-130,-128,-126,-124,-123,-121,-163,-161,-160,-157,-154,-151,-152,-152,-149,-147,-146,-144,-142,-140,-138,-136,-133,-131,-129,-128,-126,-124,-166,-165,-163,-161,-158,-157,-157,-155,-152,-151,-151,-148,-145,-143,-141,-139,-136,-134,-132,-131,-129,-127,-170,-168,-166,-164,-161,-161,-160,-158,-156,-154,-153,-150,-148,-146,-144,-142,-139,-137,-135,-133,-132,-130,-174,-172,-170,-167,-165,-164,-163,-161,-158,-157,-156,-153,-151,-149,-146,-144,-142,-140,-138,-136,-135,-133,-178,-175,-173,-171,-169,-167,-165,-163,-161,-159,-158,-156,-154,-152,-149,-147,-145,-143,-141,-140,-138,-136,-178,-175,-173,-171,-169,-167,-165,-163,-161,-160,-158,-157,-154,-152,-149,-147,-145,-143,-141,-140,-138,-136]))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
