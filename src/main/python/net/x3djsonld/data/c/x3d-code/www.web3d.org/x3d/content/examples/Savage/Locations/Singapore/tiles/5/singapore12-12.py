###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore12-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3170438117359278,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[18,17,17,17,18,20,21,22,23,22,21,20,20,21,21,21,22,23,24,23,23,24,22,20,17,15,15,19,22,23,24,23,22,23,25,27,17,15,14,13,16,19,22,25,24,23,21,21,21,21,21,22,22,22,22,23,22,21,20,18,17,17,18,24,28,28,27,25,24,25,26,29,16,15,13,12,16,20,23,25,25,25,24,23,22,22,22,22,22,22,22,22,21,18,17,17,17,17,19,23,27,28,29,28,26,28,29,30,16,16,14,13,18,23,24,24,26,28,28,26,25,24,22,22,22,23,22,21,19,16,14,16,16,16,16,19,21,26,30,30,29,32,33,31,18,18,16,15,18,22,23,24,27,30,29,28,26,25,23,21,20,21,21,20,17,15,14,17,18,17,16,18,19,24,27,29,31,33,34,32,20,21,19,17,18,19,22,24,27,30,29,28,27,25,23,20,19,19,18,17,15,14,14,18,20,20,19,20,20,21,23,26,30,32,34,33,21,22,20,19,18,18,22,26,28,29,29,28,27,27,24,20,18,16,15,14,14,14,15,19,22,22,22,22,22,22,22,26,29,32,34,33,21,21,21,21,20,19,23,28,28,28,28,28,28,28,25,20,17,15,14,13,13,14,17,21,24,24,24,25,26,24,24,26,28,32,34,33,21,21,22,22,22,20,25,29,28,27,26,27,27,28,25,20,16,15,14,13,13,15,18,22,25,26,27,28,29,27,25,26,28,32,35,33,21,22,22,23,22,22,26,30,28,26,25,25,25,24,22,19,17,16,15,14,15,17,20,23,26,28,30,32,32,29,26,28,30,34,37,35,21,23,23,23,22,22,25,29,26,24,23,23,21,19,18,17,17,16,16,15,16,18,21,23,26,28,31,32,32,31,30,32,33,36,39,38,21,24,24,24,22,19,22,26,23,20,19,18,16,13,13,15,16,17,16,16,17,19,21,23,24,26,28,30,32,34,37,37,38,41,43,42,22,24,24,24,21,18,19,21,20,17,16,15,13,9,10,14,16,17,17,17,18,21,24,25,25,25,25,27,31,36,40,41,43,45,47,46,22,22,23,23,20,18,17,16,16,15,14,13,12,9,10,14,16,17,17,18,21,25,29,30,29,25,23,26,29,35,40,44,47,48,49,49,20,20,21,21,20,18,16,14,14,14,13,12,11,10,12,15,17,18,19,20,24,30,34,35,33,27,24,26,29,34,39,44,49,49,49,51,17,16,17,18,18,19,17,14,14,13,12,12,11,11,14,17,19,22,23,24,27,33,38,39,37,31,28,28,29,34,39,42,46,46,47,52,16,13,15,16,17,19,17,14,14,13,12,12,12,12,15,19,22,25,27,27,30,35,38,40,39,35,33,31,31,35,38,40,43,43,45,53,18,13,15,16,17,17,16,14,13,13,12,12,12,13,16,20,23,28,30,30,31,32,34,38,40,38,36,35,34,36,37,38,39,42,45,53,21,15,15,17,17,17,16,14,13,13,12,12,13,13,16,20,24,29,32,35,35,32,32,37,40,40,39,38,37,37,36,36,37,41,46,52,21,17,17,17,18,19,17,15,13,12,12,12,13,14,16,19,23,28,36,44,45,39,36,39,42,40,40,39,39,39,38,36,36,41,46,49,21,18,18,18,19,20,18,16,14,13,12,13,13,14,16,18,22,28,36,49,52,45,41,43,44,42,42,42,42,42,41,37,36,40,44,46,20,16,18,20,21,22,20,18,16,15,14,13,14,14,16,18,21,25,32,43,48,46,46,48,49,47,46,47,47,46,43,39,35,38,40,42],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
