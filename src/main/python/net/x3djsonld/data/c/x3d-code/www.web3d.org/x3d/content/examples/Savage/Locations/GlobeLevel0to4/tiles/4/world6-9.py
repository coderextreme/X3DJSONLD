###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1179,1142,1078,1031,975,841,951,1081,542,335,125,55,115,-455,-2670,-3005,-3069,-3144,-3522,-3315,-1938,268,1187,1091,1010,1027,1106,973,903,1182,581,355,140,84,136,-427,-2714,-3211,-3103,-3158,-3350,-3125,-88,400,1107,1028,984,1036,1163,922,785,722,477,274,126,148,134,-429,-2799,-3315,-3142,-3130,-3478,-3025,62,812,1110,1023,977,1037,1123,1011,760,598,607,337,193,183,135,-477,-2906,-3160,-2758,-2373,-3360,-2695,22,173,1158,1022,982,994,1067,987,866,724,568,465,216,142,91,-651,-2690,-3083,-2990,-3165,-3062,-2629,-3,306,1101,1029,945,915,903,1061,1005,881,653,445,340,156,35,-832,-1987,-2853,-2938,-3065,-2911,-2589,-1002,127,967,953,946,912,903,1160,1400,1235,756,780,669,262,-1,-100,-1813,-2566,-2780,-2839,-2699,-2568,-1488,14,958,947,945,941,919,1056,1249,1438,983,1132,1428,146,2,-18,-1376,-2170,-2717,-2876,-2589,-2294,-1634,-230,984,959,942,957,989,1008,1129,1330,1375,1121,737,118,69,-4,-876,-1989,-2516,-2636,-3045,-2257,-1710,-212,1001,968,939,1002,1052,1031,1148,1199,1325,1291,999,547,181,7,-14,-1761,-2383,-2793,-2442,-2036,-1611,-50,1024,974,939,1034,900,928,1163,1046,1240,1424,1590,493,88,4,-4,-1764,-2387,-2520,-2454,-2088,-1378,36,1043,985,944,1031,903,567,944,892,1285,1458,1078,543,120,18,11,-1305,-2247,-2473,-2421,-2133,-548,32,1043,997,1025,935,1109,559,875,845,1342,1234,1011,580,272,191,25,-50,-1682,-2169,-2656,-2106,-154,39,1035,1004,1007,984,1260,1204,562,1068,1104,1152,740,463,117,361,116,88,-2,-1507,-2716,-2163,-161,-3,1042,1017,1052,1108,1063,1157,518,1044,874,1073,517,300,264,383,232,140,55,-1232,-2594,-2555,-942,-108,1040,1028,1084,1174,1020,989,1167,444,393,456,510,307,138,673,491,351,135,-4,-2551,-2895,-2457,-860,1062,1045,1096,1177,1219,980,1268,1093,374,755,407,462,323,624,665,505,231,75,-2725,-3044,-3319,-2489,1078,1019,1111,1180,1098,1244,1157,1015,561,889,484,1202,865,626,649,697,468,84,-2762,-3069,-3355,-3459,1092,1043,1092,1184,1121,1154,1166,1173,592,1029,708,1263,558,676,540,490,391,238,-2864,-3020,-3412,-3581,1103,1053,1084,1132,1180,1207,1233,1264,525,875,1004,1121,476,734,621,479,292,253,-2244,-3094,-3480,-3486,1091,1073,1101,1214,1308,1163,1222,1294,1208,538,941,1157,476,747,899,585,429,136,-1740,-3220,-3515,-3556,1110,1110,1163,1107,1382,1232,1213,1267,1486,631,992,1162,476,1173,531,564,460,185,-2219,-3251,-3520,-3483,1095,1123,1340,1199,1349,1308,1280,1204,1239,697,804,1225,508,1193,475,359,317,70,-2584,-3254,-2253,-3362,1094,1103,1318,1126,1385,1332,1303,1162,1254,795,775,1515,730,832,526,341,337,142,-2423,-3306,-2332,-2968],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
