###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5049,-5102,-5022,-4955,-5299,-5389,-4936,-4888,-5006,-4716,-4826,-4572,-4672,-5026,-4801,-4235,-4278,-4251,-4153,-4281,-4156,-4021,-5093,-5125,-5073,-5020,-5105,-5120,-4967,-4910,-4799,-4649,-4496,-4678,-4805,-4869,-4393,-4488,-4542,-4077,-4166,-4303,-4106,-4034,-5203,-5183,-5181,-5121,-5127,-5071,-5046,-5036,-4879,-4552,-4431,-4915,-5141,-4621,-4435,-4981,-4373,-4269,-4308,-4394,-4034,-3860,-5303,-5271,-5214,-5286,-5294,-5270,-5066,-5066,-4862,-4649,-4689,-4760,-4737,-4935,-5203,-4383,-4988,-4427,-4293,-4232,-4146,-4008,-5289,-5286,-5296,-5317,-5281,-5243,-5115,-5147,-4960,-4846,-4933,-4815,-4692,-5078,-4971,-5069,-4652,-4312,-4476,-4284,-4093,-3910,-5289,-5427,-5370,-5359,-5529,-5274,-5263,-5145,-5177,-5086,-5081,-5025,-4929,-4964,-5145,-4769,-4660,-4768,-4427,-4430,-4190,-4175,-5232,-5434,-5405,-5436,-5420,-5325,-5334,-5348,-5336,-5231,-5203,-4915,-4840,-4896,-5097,-4858,-4627,-4536,-4557,-4398,-4408,-4383,-5178,-5258,-5373,-5479,-5450,-5363,-5363,-5480,-5473,-5368,-5186,-5266,-4779,-5008,-4823,-5151,-4743,-4228,-3988,-4469,-4380,-4284,-5148,-5254,-5354,-5432,-5558,-5455,-5457,-5607,-5599,-5348,-5155,-5167,-5110,-4917,-4892,-4662,-4523,-4860,-4307,-4534,-4335,-3861,-4986,-5174,-5333,-5392,-5507,-5474,-5647,-5538,-5468,-5163,-5200,-5200,-5158,-5050,-4712,-4940,-4856,-4602,-4555,-4355,-4271,-4247,-4944,-4976,-5214,-5185,-5414,-5626,-5490,-5414,-5153,-5018,-5089,-5233,-5192,-5120,-4903,-4521,-5223,-4246,-4468,-4721,-4674,-4693,-4857,-4810,-4810,-4917,-5144,-5079,-5384,-5286,-5188,-5116,-5050,-5155,-5171,-5210,-5056,-4888,-4664,-4472,-4601,-4522,-5267,-4745,-4579,-4768,-4144,-4082,-4867,-5319,-5419,-5159,-5107,-5102,-5045,-5150,-5184,-5287,-5067,-5127,-4863,-4899,-4552,-5143,-4961,-4888,-4291,-4472,-3828,-1289,-4721,-5303,-5295,-5142,-5166,-5119,-5201,-5190,-5165,-5333,-5157,-5138,-5096,-4786,-5375,-5191,-5136,-4878,-3393,-4413,-4077,-1337,-4274,-5309,-5385,-5225,-5263,-5209,-5220,-5215,-5178,-5209,-5190,-5183,-4923,-5057,-5167,-5053,-5036,-5057,-1374,-3639,-4267,-3887,-4981,-5249,-5378,-5422,-5350,-5243,-5242,-5236,-5169,-5223,-5336,-5099,-5003,-4803,-5074,-5033,-5070,-5001,-797,-2276,-4603,-5003,-5181,-5246,-5363,-5422,-5322,-5281,-5253,-5287,-5175,-5204,-5143,-4845,-4936,-4847,-5217,-5025,-4930,-5004,-428,-2328,-4922,-4958,-5100,-5341,-5348,-5347,-5347,-5318,-5363,-5201,-5060,-5017,-4910,-5135,-4643,-5030,-4492,-5093,-5099,-4943,-308,-1304,-4859,-4933,-5072,-5171,-5255,-5291,-5216,-5222,-5013,-5294,-5170,-5110,-5172,-4873,-4803,-4873,-4719,-4971,-4999,-4999,-1059,-2630,-4617,-4942,-5108,-5099,-5217,-5210,-5192,-5284,-5327,-5311,-5224,-5273,-5116,-4941,-4813,-4858,-4639,-4714,-4729,-4856,-2802,-3974,-4632,-4733,-4907,-4820,-5092,-5059,-5183,-5070,-5320,-5461,-5344,-5288,-5078,-5076,-5217,-4886,-4796,-4691,-4755,-4737,-3269,-3993,-4387,-4549,-4688,-4655,-4644,-5003,-5169,-4471,-5404,-5423,-5316,-5218,-5201,-5300,-5216,-5003,-4841,-4746,-4685,-4813,-2955,-3473,-4211,-3957,-4068,-4159,-4301,-4897,-5235,-5295,-5372,-5337,-5409,-5272,-5426,-5407,-5268,-5061,-4855,-4962,-4878,-4586,-2807,-3283,-4278,-3911,-4103,-4340,-4513,-4970,-5176,-5113,-5329,-5309,-5401,-5457,-5317,-5428,-5253,-5076,-4916,-4925,-4901,-4404],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
