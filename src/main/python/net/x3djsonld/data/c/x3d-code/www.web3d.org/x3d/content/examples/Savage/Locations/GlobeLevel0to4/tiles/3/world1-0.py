###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_10',geoSystem=['GDC'],position=(-56.291665660871615,-157.54166599614774,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-56.291665660871615,-157.54166599614774,0.0),range=4495500.0,child1Url=['../../tiles/4/world2-0.x3d'],child2Url=['../../tiles/4/world2-1.x3d'],child3Url=['../../tiles/4/world3-0.x3d'],child4Url=['../../tiles/4/world3-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world1-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-2282,-3384,-3918,-4237,-4015,-3483,-3737,-3737,-3784,-3880,-4220,-4207,-4533,-4324,-4239,-4357,-4328,-4282,-4367,-4496,-4407,-3122,-3952,-1912,-3221,-3649,-3280,-3585,-3413,-3885,-3645,-3884,-3863,-4098,-4314,-4197,-4222,-4064,-4220,-4249,-4357,-4588,-3775,-2684,-2906,-2960,-3086,-3021,-3699,-3607,-3464,-3872,-4087,-4048,-3727,-4086,-4227,-3949,-3949,-4026,-4075,-4424,-4644,-2973,-3190,-2917,-2884,-2880,-2881,-2796,-3200,-3142,-3711,-4106,-3675,-3201,-4194,-4008,-3763,-3943,-4107,-4178,-4101,-4380,-3277,-3320,-3191,-2971,-2795,-2560,-2652,-2759,-2173,-3161,-3141,-3637,-2956,-3764,-3643,-3877,-3833,-4212,-4148,-4374,-5157,-3742,-3580,-3901,-3254,-3157,-2917,-2411,-2491,-2632,-2493,-2575,-2888,-3043,-3410,-3514,-3667,-3713,-4117,-4295,-4486,-5127,-4072,-4143,-4377,-3371,-3381,-2961,-3266,-3179,-3142,-3294,-2990,-2794,-2791,-3039,-3591,-3554,-3372,-3956,-4099,-4120,-4432,-4062,-3904,-4093,-3531,-3946,-3587,-3740,-3949,-3764,-3523,-3704,-3173,-2575,-3034,-3276,-3455,-3589,-3781,-4072,-4195,-4371,-4548,-4718,-4406,-4294,-4601,-4515,-4281,-4309,-3951,-3619,-3620,-3339,-2853,-2838,-2967,-3200,-3324,-3485,-4077,-3949,-4017,-4903,-5191,-4875,-4396,-4617,-5083,-4584,-4426,-4141,-3907,-3851,-3543,-2956,-2858,-2764,-3054,-3414,-3566,-3803,-3848,-4106,-4799,-4832,-4838,-4783,-4909,-4325,-4402,-4509,-4145,-3935,-3857,-3724,-3323,-3068,-2359,-2722,-3238,-3637,-3450,-3516,-3254,-5112,-4946,-5159,-4961,-4846,-4561,-4531,-4571,-3852,-4310,-4086,-3606,-3312,-3303,-3031,-2814,-3206,-3386,-2683,-2819,-3258,-5303,-5217,-5249,-5055,-4747,-4663,-4547,-4146,-4722,-4286,-4001,-3834,-3278,-3652,-3392,-3176,-3546,-3277,-2705,-2611,-3008,-5276,-5391,-5449,-5269,-5148,-4968,-4590,-4969,-5159,-4432,-4191,-4009,-3881,-4718,-3943,-3580,-3718,-3469,-2004,-2195,-2549,-5162,-5384,-5473,-5489,-5526,-5091,-5064,-4858,-4422,-4775,-4222,-3016,-3952,-4133,-4312,-4304,-3594,-3235,-2956,-3841,-4646,-4951,-5291,-5415,-5609,-5129,-5175,-5224,-4775,-4876,-4523,-3857,-4146,-4597,-4648,-4176,-4291,-3545,-4000,-3844,-4194,-4468,-4688,-4379,-5535,-5247,-5159,-5141,-5207,-5005,-4813,-4608,-4735,-4469,-4639,-4662,-4390,-3972,-4301,-5012,-4390,-4113,-4351,-2901,-3840,-4730,-5295,-5142,-5194,-4934,-5176,-4840,-5136,-5094,-5071,-4822,-4194,-4033,-5198,-4572,-4526,-4041,-4880,-4598,-797,-4660,-5337,-5384,-5229,-5312,-5206,-4985,-4845,-5201,-4950,-4772,-4747,-4748,-4481,-4485,-4635,-4586,-4507,-4509,-4270,-356,-4788,-5044,-5260,-5172,-5257,-5190,-4976,-4742,-4980,-4988,-4780,-4630,-4757,-4617,-4990,-4808,-5066,-5016,-5189,-4804,-3109,-4546,-4915,-4600,-5112,-5424,-5528,-5180,-5005,-4860,-4796,-4510,-4878,-4829,-5055,-5017,-5042,-5089,-5195,-4826,-5043,-3333,-4412,-4520,-4753,-5058,-5455,-5459,-5101,-5025,-4847,-4764,-4489,-4862,-4921,-4994,-4868,-5029,-5018,-5197,-5008,-4825],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
