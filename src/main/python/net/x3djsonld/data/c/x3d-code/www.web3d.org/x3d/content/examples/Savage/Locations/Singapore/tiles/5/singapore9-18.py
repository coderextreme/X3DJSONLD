###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore9-18.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2908486746019459,103.84837061432235,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[26,25,26,29,31,30,28,23,18,14,11,12,15,16,15,19,25,26,23,23,25,24,21,21,23,24,24,22,18,18,21,25,28,27,21,16,25,23,23,26,28,29,28,23,17,13,11,13,17,19,20,23,28,28,25,25,25,23,20,21,24,25,25,25,26,26,26,26,27,25,20,16,22,18,18,19,21,24,26,22,17,15,15,18,23,25,26,27,28,26,24,22,21,19,17,20,25,29,30,34,41,41,34,27,25,22,18,15,21,18,17,17,18,20,23,20,16,16,17,23,30,33,34,32,26,22,20,19,18,16,16,20,29,33,31,35,43,43,34,26,22,19,17,16,23,20,20,19,18,19,19,17,15,16,18,26,36,40,43,35,23,17,15,14,14,15,15,23,34,36,30,28,32,33,28,23,19,17,18,17,25,21,21,20,19,18,17,15,14,16,19,28,39,43,43,34,19,12,10,11,12,13,15,22,34,37,32,29,29,27,23,18,15,15,17,18,25,20,18,19,19,18,16,15,14,16,21,29,38,39,34,26,14,9,7,8,10,12,14,20,29,36,41,41,36,29,19,13,11,12,15,18,27,20,17,17,18,18,17,16,15,17,22,29,35,33,27,20,13,9,7,8,10,11,12,17,24,36,51,54,46,33,19,11,9,11,14,17,29,23,18,17,18,18,19,18,16,18,21,25,29,27,22,18,16,13,10,9,10,10,10,15,22,39,62,68,54,38,22,14,12,13,15,17,31,24,19,17,17,18,20,19,18,19,21,23,25,23,20,18,18,15,12,10,10,10,9,13,22,38,62,67,52,35,23,15,13,14,15,17,28,23,18,16,16,17,19,19,20,22,24,24,24,23,21,19,19,17,13,12,11,11,10,14,21,31,45,46,33,22,16,13,11,11,14,17,27,22,17,16,16,17,19,20,22,24,25,24,23,21,21,20,20,18,15,14,14,14,14,17,21,25,28,25,15,10,11,11,9,9,13,17,28,22,17,17,17,18,20,23,25,24,22,20,19,18,18,18,20,19,18,18,19,20,21,22,21,20,18,14,8,7,10,12,11,10,14,18,27,22,18,17,18,20,21,24,25,23,19,17,16,16,16,18,21,21,20,21,22,24,26,25,21,16,11,8,6,7,11,14,13,13,15,17,23,20,18,17,17,18,19,19,20,20,20,17,14,15,17,20,23,23,21,21,21,22,24,22,17,11,5,3,4,8,13,16,16,16,16,17,18,18,17,17,16,16,15,15,15,17,20,17,14,15,19,21,24,23,21,20,18,18,19,18,14,8,2,1,5,10,15,18,19,18,17,16,16,20,22,19,15,13,12,12,13,15,17,16,15,17,20,23,24,23,20,18,17,16,16,14,12,9,7,7,10,13,15,18,20,20,19,17,15,22,25,21,15,12,10,11,12,13,15,16,17,19,21,22,23,22,19,17,15,14,13,12,10,11,13,14,15,16,16,17,21,22,21,20,17,21,23,21,16,13,11,12,14,16,18,20,20,19,18,18,20,19,17,16,15,13,10,10,10,12,14,17,18,19,18,20,23,25,26,24,20,19,20,20,18,14,12,14,17,21,24,24,22,18,13,13,15,16,17,16,14,11,8,7,10,12,15,17,20,21,22,22,25,27,29,28,24,22,22,20,17,15,15,18,22,26,29,25,19,13,7,8,13,16,19,18,15,10,6,6,8,11,14,16,19,21,22,22,24,26,28,29,27,26,24,20,15,16,19,23,27,30,32,25,14,7,2,5,12,17,21,20,16,11,6,4,6,9,12,14,17,19,20,21,21,23,27,30],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
