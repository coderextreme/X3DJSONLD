###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-23.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.92018578496744,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[37,36,36,37,38,40,41,41,42,42,41,40,40,40,41,41,40,38,38,38,37,37,36,36,34,33,34,34,34,34,34,34,34,33,30,27,25,36,36,36,37,39,40,41,42,43,43,42,41,41,41,43,43,41,39,38,38,38,38,37,36,33,32,33,34,34,34,34,34,33,32,29,27,25,37,37,38,39,40,41,42,43,45,45,43,42,41,42,43,43,42,40,38,38,38,38,37,36,33,31,32,32,33,34,33,32,32,30,28,26,24,37,38,38,39,39,40,42,44,46,45,43,41,40,40,41,41,40,38,37,37,37,37,36,35,32,30,30,31,31,32,32,31,30,29,27,25,23,38,39,39,39,39,40,43,45,46,45,42,39,38,37,38,38,38,36,36,36,36,35,34,33,30,28,28,29,29,30,30,30,29,27,25,24,22,39,41,42,41,41,42,44,45,44,43,39,37,36,36,36,36,35,34,34,34,34,33,32,31,29,28,27,27,27,27,28,28,27,26,24,22,21,39,42,44,44,43,44,44,44,42,39,37,35,35,35,35,34,33,32,32,32,31,31,31,30,28,27,26,25,25,24,25,27,26,25,23,21,19,42,45,47,47,46,46,45,43,42,38,35,35,34,34,33,32,31,30,30,30,29,29,30,29,28,27,26,24,23,23,24,26,25,24,21,19,18,44,48,51,51,50,47,45,43,42,38,36,35,34,34,31,30,29,29,29,28,27,27,28,28,28,27,25,23,22,22,24,25,24,23,20,17,16,45,48,50,51,51,48,45,42,41,39,37,36,35,33,31,29,29,29,28,27,26,26,26,27,27,26,24,23,22,22,23,23,23,21,18,16,15,42,44,46,48,49,46,43,41,40,40,40,38,35,32,30,29,29,29,28,27,25,25,25,26,25,24,23,22,21,21,22,22,20,18,15,13,12,41,41,43,46,48,45,41,38,37,38,40,38,35,32,31,31,31,30,29,27,25,24,25,25,24,24,23,22,21,21,20,20,18,16,13,11,10,41,41,42,45,48,43,38,34,33,35,37,36,34,33,32,32,32,32,30,28,26,24,24,24,23,23,23,22,21,20,19,18,16,13,12,10,9,41,40,41,44,45,40,34,32,31,32,34,34,34,33,33,33,33,32,30,28,26,24,24,24,23,23,22,22,21,20,18,16,14,12,11,10,9,43,42,40,40,39,36,31,30,30,30,30,31,32,33,34,33,32,31,29,28,27,25,24,24,24,23,22,21,20,19,16,14,13,12,11,10,9,41,42,41,37,33,31,29,29,29,28,27,28,30,32,33,33,32,31,29,28,27,26,25,25,24,24,22,21,20,19,15,13,12,12,11,11,10,35,40,42,35,29,27,28,29,28,27,26,27,29,31,32,33,32,32,30,28,28,27,24,24,24,23,22,21,20,19,16,13,14,14,13,12,10,31,37,41,32,25,25,27,28,28,27,26,26,28,29,31,32,33,32,30,29,28,27,24,22,23,23,22,21,20,18,16,14,15,16,15,13,11,30,32,33,27,23,24,26,27,27,26,26,26,27,28,30,31,31,31,30,29,27,25,22,20,21,21,21,20,17,15,14,14,17,19,16,14,11,30,29,28,25,22,24,26,26,25,25,25,26,26,26,28,29,29,30,30,29,26,23,20,18,18,18,18,17,14,13,13,14,19,21,17,14,12,31,30,29,26,24,25,26,25,24,24,24,24,23,23,25,26,27,28,28,27,24,21,17,14,14,14,13,13,12,11,13,15,19,21,17,13,11,32,31,30,28,27,26,25,24,23,23,22,22,21,20,21,22,24,24,25,24,21,18,14,11,11,10,10,9,9,10,13,16,19,20,15,12,11,31,30,29,28,27,26,26,25,24,24,23,21,19,19,19,19,19,19,19,18,17,14,11,9,9,9,9,9,10,12,15,18,19,18,14,11,11],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
