###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.71910330716118,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[8,8,8,8,8,8,7,5,5,4,3,3,4,7,9,11,15,21,26,30,34,35,36,38,39,39,40,41,43,47,49,48,46,42,38,34,31,8,8,8,8,8,8,8,7,6,5,5,5,6,7,9,12,16,22,27,32,35,36,37,38,39,40,40,40,41,44,47,47,46,43,41,39,36,8,8,8,8,8,8,8,8,7,7,7,8,9,9,10,13,18,25,30,33,35,36,37,38,39,39,39,40,40,42,44,45,46,45,46,44,42,8,8,8,8,8,8,8,8,8,8,9,10,10,11,12,14,19,26,31,34,36,37,37,38,39,39,39,40,40,41,41,42,42,44,46,46,45,8,8,8,8,8,8,8,8,8,9,10,12,12,12,13,15,20,26,31,35,37,38,38,38,39,39,39,40,40,40,39,38,38,42,46,47,46,8,8,8,8,8,8,8,8,8,9,10,11,12,12,13,15,19,24,28,32,35,36,38,40,40,40,39,40,40,39,38,35,35,38,41,42,42,8,8,8,8,8,8,8,8,8,9,10,10,11,12,13,14,17,20,23,26,30,34,37,40,42,42,41,41,40,39,37,34,33,32,33,35,35,8,8,8,8,8,8,8,8,9,9,10,10,10,11,13,15,18,21,23,26,30,34,38,42,44,44,43,42,41,39,37,33,30,29,28,30,29,9,8,8,8,8,8,8,8,9,9,9,9,10,11,14,17,21,24,26,29,31,35,39,43,46,45,44,43,42,39,36,32,28,26,24,25,25,10,9,8,8,8,9,9,9,9,9,9,9,10,11,15,20,24,28,31,33,36,39,42,44,46,45,43,42,40,37,35,31,27,25,24,25,26,10,10,9,8,8,8,9,10,10,10,9,9,10,12,16,22,27,32,37,39,41,43,44,44,45,43,41,39,37,35,33,30,28,28,29,29,30,11,11,10,9,8,8,9,10,11,10,9,9,10,12,16,21,28,35,40,42,43,44,44,44,43,41,38,36,34,33,32,30,29,31,32,33,33,11,11,11,10,10,9,9,9,9,10,9,9,10,12,16,20,26,35,40,42,42,42,42,43,42,39,36,32,30,31,32,32,32,33,34,35,35,11,12,11,11,10,9,8,8,8,9,9,9,10,12,15,19,25,34,40,43,43,41,41,42,41,38,35,32,30,33,35,34,34,35,36,37,37,12,12,11,10,9,9,8,8,8,9,9,10,11,12,16,20,25,33,40,45,47,43,41,42,41,38,35,34,34,37,39,36,35,37,39,39,39,12,12,11,10,9,9,8,8,8,9,9,10,11,13,15,19,25,32,40,47,49,46,44,44,42,38,36,37,39,41,42,38,36,39,41,41,40,11,12,12,12,11,9,8,8,8,9,10,11,12,13,15,18,24,32,40,47,51,50,49,48,45,40,37,40,42,43,43,40,38,40,42,41,39,10,12,13,12,11,9,8,8,8,9,10,12,13,14,15,18,24,33,40,47,52,53,53,51,48,41,38,42,45,45,45,41,40,41,42,40,38,10,11,11,11,9,9,9,9,9,10,11,13,14,16,18,20,25,32,40,46,51,54,55,52,48,42,38,42,45,46,46,45,44,43,42,39,36,9,9,9,9,9,9,9,10,10,11,13,15,17,19,21,23,27,33,38,44,50,53,54,51,46,42,39,41,44,46,47,47,46,44,41,37,34,7,8,9,9,8,8,9,10,11,13,15,18,20,22,24,26,29,33,37,41,46,50,51,48,45,41,39,41,42,45,46,46,45,42,39,36,34,6,8,9,9,9,9,10,11,13,15,18,20,22,24,27,29,31,33,36,39,42,47,48,46,44,42,40,41,41,43,45,45,44,41,39,37,35,7,8,10,12,13,13,14,15,17,19,21,23,25,27,28,30,32,34,36,38,41,44,46,45,44,43,42,42,43,45,46,45,45,44,43,40,37],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
