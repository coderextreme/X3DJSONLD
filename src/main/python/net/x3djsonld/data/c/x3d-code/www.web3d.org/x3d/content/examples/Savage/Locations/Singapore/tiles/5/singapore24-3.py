###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore24-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4218243602718554,103.63292510238706,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[31,33,37,42,47,45,41,37,34,36,38,40,41,38,33,33,36,36,35,33,30,28,25,24,24,24,23,23,24,27,31,35,37,37,33,30,29,34,33,35,39,43,44,43,39,35,35,37,39,42,40,37,36,37,37,37,35,34,32,29,27,28,27,27,26,26,26,28,31,34,36,34,32,31,38,36,34,36,40,43,44,40,35,34,35,37,41,41,39,39,39,39,39,38,37,36,33,31,31,31,31,30,28,26,25,27,31,34,34,33,31,43,40,37,37,39,42,44,41,36,34,33,36,41,42,41,41,41,41,43,43,42,40,35,34,35,36,37,36,32,28,25,24,27,29,31,31,29,47,42,39,39,39,41,44,41,36,33,31,35,41,42,42,42,41,43,46,47,46,43,37,36,38,40,43,41,36,30,25,23,24,26,27,28,27,40,39,38,40,42,42,41,37,34,33,32,35,41,41,40,39,40,42,45,46,44,41,38,37,39,42,45,45,39,32,27,24,22,23,24,24,24,34,36,38,41,44,42,38,35,32,32,32,35,40,40,37,37,39,41,43,43,42,40,37,38,40,43,47,46,41,34,29,25,22,20,20,21,21,30,32,34,39,43,42,38,35,32,32,32,35,38,38,36,36,37,38,40,39,37,35,34,35,37,40,44,43,38,33,29,26,23,20,19,19,19,26,28,32,37,42,41,38,35,32,31,32,34,36,36,34,34,35,35,36,35,32,31,31,32,36,38,40,39,35,32,28,26,24,21,18,17,17,26,27,29,33,37,37,36,34,32,31,30,31,32,32,30,31,32,32,32,31,30,29,28,29,31,33,34,33,31,29,27,26,24,22,19,17,16,27,26,26,29,32,33,34,33,32,30,28,28,28,28,27,28,30,29,29,28,27,26,26,26,27,27,28,28,27,26,26,25,24,22,19,17,16,27,27,27,28,31,32,32,32,30,28,26,25,25,24,24,25,26,26,26,25,25,24,24,23,24,24,24,24,23,23,23,23,22,21,18,16,15,28,27,26,28,29,30,31,30,29,26,24,23,22,21,21,22,22,22,22,22,22,22,22,21,21,21,21,21,20,19,20,20,20,19,18,16,14,26,25,24,26,28,29,29,29,27,25,23,22,21,20,20,20,20,20,20,19,19,19,19,19,19,18,18,18,18,17,17,17,16,15,14,13,12,23,22,23,25,27,27,27,27,25,24,22,21,19,19,19,19,19,18,17,16,15,16,17,17,17,16,15,15,15,15,15,14,13,11,10,10,10,21,21,20,22,25,25,25,24,23,22,21,20,19,19,19,19,19,18,16,15,15,15,16,16,15,14,14,13,13,13,13,12,11,10,9,10,10,20,18,17,19,22,22,22,22,21,20,19,18,18,18,18,18,18,18,16,15,14,14,14,14,14,13,13,12,12,11,11,10,9,9,9,10,10,19,17,16,18,20,20,20,19,17,17,17,17,18,18,17,17,16,16,15,14,13,12,13,13,13,12,12,12,11,11,10,10,9,9,9,10,10,18,16,15,16,18,18,18,16,14,15,16,17,18,17,16,16,15,15,15,14,12,12,12,12,12,12,12,12,11,11,10,10,10,10,11,11,10,17,15,14,14,16,16,17,15,14,14,15,17,18,18,18,17,16,16,16,14,12,12,12,12,13,13,13,13,13,12,11,11,11,11,11,11,10,17,14,13,13,14,15,16,15,14,14,15,17,19,20,19,19,18,18,18,16,14,13,13,13,13,14,15,15,14,14,13,12,12,12,12,12,11,17,15,13,13,13,14,16,16,16,16,16,18,20,21,22,22,22,21,20,18,16,15,14,14,14,15,16,16,16,16,15,14,13,13,13,13,12],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
