###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world13-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(56.20833769188965,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1396,1000,372,327,432,909,751,1937,1229,1492,552,519,480,554,824,754,797,755,449,1799,720,1657,899,433,326,409,1201,1031,1495,1329,851,1037,616,629,509,652,792,499,1074,737,1245,867,522,1149,719,458,295,759,501,1009,469,591,694,531,518,514,439,534,513,705,736,557,999,449,1403,1201,293,306,283,656,570,425,360,470,467,375,447,459,391,491,653,808,792,652,1342,449,1980,1459,229,227,282,512,157,308,355,354,349,320,341,520,391,531,539,619,921,466,709,1441,1275,472,193,228,309,312,240,510,253,292,259,422,492,621,448,499,549,612,655,649,768,1190,1420,1605,145,201,186,241,227,230,245,349,332,280,390,482,533,311,415,544,592,585,350,1159,1277,1024,175,192,181,171,98,258,156,344,380,360,283,289,426,311,419,510,531,401,526,570,1118,1004,144,166,195,181,181,152,349,351,270,256,316,331,342,430,562,477,528,544,369,378,422,682,144,164,183,84,425,335,349,359,199,157,430,302,264,309,616,619,480,526,337,367,421,387,161,143,130,346,452,522,483,516,352,257,391,265,341,313,349,642,527,503,471,452,474,236,139,117,168,279,502,522,570,483,435,395,280,274,343,315,354,424,620,500,459,437,431,269,100,86,331,516,680,630,350,364,320,341,363,328,324,383,330,464,451,379,463,383,410,364,131,112,406,389,341,177,383,535,370,392,384,381,256,355,419,392,328,337,388,320,473,380,79,200,400,245,385,354,466,435,423,431,427,346,380,396,422,354,324,373,349,342,381,429,193,52,93,385,229,640,445,443,633,325,377,348,404,440,422,370,383,318,375,341,409,377,136,323,297,302,517,494,590,566,381,364,372,414,500,427,428,349,359,343,339,271,313,350,78,258,273,299,465,523,514,496,598,413,381,318,455,366,520,417,367,337,282,324,314,330,144,291,307,394,592,376,251,472,395,561,376,382,659,436,289,315,255,349,401,337,350,235,238,295,319,492,603,394,426,669,282,301,534,469,408,489,253,214,287,415,353,411,411,318,322,315,392,436,337,412,177,597,266,336,283,289,254,226,480,280,610,369,445,291,452,463,407,474,543,538,464,154,558,485,738,470,251,486,474,509,398,526,409,448,556,359,552,495,331,62,320,530,537,369,521,536,720,443,609,512,488,575,607,383,529,517,392,574,474,576,312,422,489,493,543,427,510,695,844,593,665,407,402,435,629,395,578,408,349,528,610,385],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
