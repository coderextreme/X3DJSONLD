###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4275,-4088,-4082,-4068,-4188,-4359,-4289,-4331,-4298,-4284,-4227,-4293,-4048,-4246,-4220,-4307,-4255,-4214,-4208,-4371,-4394,-4467,-4251,-3997,-4040,-4028,-4054,-4239,-4273,-4066,-4148,-4068,-4294,-3916,-3980,-4246,-4231,-4336,-4130,-4320,-4221,-4131,-4287,-4359,-4434,-4134,-4259,-4074,-4126,-4245,-4401,-4093,-3953,-4130,-3802,-3441,-3869,-4036,-4029,-4135,-4102,-4355,-3843,-3949,-4115,-4264,-4470,-4383,-4205,-4326,-4298,-4381,-4259,-4013,-3806,-4014,-3775,-4070,-4049,-3953,-4129,-4080,-3759,-4238,-3824,-3861,-3936,-4075,-4572,-4439,-4301,-4279,-4230,-4202,-4084,-3848,-3624,-3253,-3596,-3723,-3915,-3889,-3972,-3959,-4094,-3877,-3644,-3905,-3766,-4020,-4434,-4497,-4266,-4260,-4221,-4165,-3962,-3729,-3708,-4082,-3522,-3995,-3884,-3956,-3964,-3939,-3861,-3801,-3773,-3849,-3669,-3768,-4348,-4425,-4329,-4286,-4179,-4054,-3853,-3945,-3991,-3810,-3879,-4018,-3958,-3837,-3828,-3881,-3861,-3859,-3758,-3879,-3686,-3578,-4566,-4312,-4273,-4263,-4050,-3975,-3848,-3900,-4010,-3934,-3696,-3729,-3773,-3800,-3496,-3720,-3696,-3795,-3750,-3511,-3638,-3711,-4344,-4163,-3891,-4098,-4095,-3958,-3825,-3904,-3909,-3948,-3774,-3812,-3692,-3515,-3622,-3673,-3776,-3715,-3587,-3629,-3431,-3550,-4109,-4190,-4222,-3950,-4070,-3983,-3842,-3798,-3807,-3830,-3710,-3682,-3682,-3433,-3696,-3640,-3619,-3735,-3652,-3582,-3668,-3554,-4220,-3789,-4108,-3706,-4022,-3992,-3865,-3747,-3713,-3835,-3714,-3715,-3692,-3481,-3417,-3450,-3609,-3702,-3638,-3500,-3489,-3637,-4233,-4125,-4318,-4095,-3861,-4022,-3786,-3763,-3697,-3669,-3690,-3647,-3590,-3870,-3592,-3419,-3842,-3423,-3527,-3379,-3521,-3743,-4019,-4167,-4103,-3742,-3887,-3628,-3720,-3692,-3645,-3613,-3526,-3607,-3560,-3427,-3245,-3422,-3322,-3211,-3257,-3259,-3379,-3351,-4116,-4127,-3942,-3857,-3799,-3685,-3611,-3677,-3572,-3551,-3536,-3403,-3568,-3198,-3339,-3322,-3174,-3112,-3248,-3025,-3151,-3039,-4030,-4024,-3874,-3834,-3641,-3642,-3409,-3591,-3537,-3421,-3399,-3385,-3383,-3291,-2965,-3121,-3186,-3447,-3214,-3409,-3204,-3209,-3942,-4003,-3747,-3686,-3575,-3446,-3501,-3399,-3301,-3210,-3264,-3391,-3221,-3522,-3340,-2988,-3715,-3070,-3314,-3337,-3231,-3385,-3788,-3818,-3844,-3594,-3153,-3255,-3327,-3235,-3102,-2966,-3111,-3265,-3213,-3111,-3104,-3699,-3101,-3117,-3344,-3376,-3435,-3506,-3711,-3790,-3733,-3747,-3572,-3247,-3272,-3038,-2851,-2892,-3050,-3057,-3213,-2989,-3361,-3231,-3278,-3013,-3195,-3864,-3683,-3600,-3683,-3645,-3720,-3873,-3485,-3418,-3027,-2887,-2937,-2832,-3269,-2960,-2873,-2856,-2790,-3209,-3228,-3405,-3111,-3343,-3616,-3721,-3598,-3540,-3426,-3702,-3675,-3573,-2743,-2907,-2759,-2917,-3121,-2998,-2957,-2993,-3171,-3490,-3578,-3337,-3041,-2724,-3674,-3843,-3494,-3522,-3462,-3486,-3462,-3415,-3060,-2797,-2923,-3086,-3025,-2985,-3168,-3446,-3352,-3550,-3443,-3604,-3420,-3558,-3750,-3931,-3316,-3452,-3482,-3309,-3204,-3254,-3362,-2771,-3163,-3251,-3276,-3219,-3178,-3319,-3398,-3526,-3759,-3663,-3569,-3833,-3939,-4008,-3355,-3348,-3378,-3223,-3169,-2915,-3271,-2831,-3153,-3340,-3367,-3314,-3406,-3458,-3536,-3662,-3706,-3772,-3769,-3903,-3939,-4089,-3326,-3409,-3182,-2598,-3348,-3123,-3150,-2842,-3151,-3358,-3382,-3323,-3468,-3470,-3591,-3680,-3747,-3772,-3792,-3973,-3992,-4056],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
