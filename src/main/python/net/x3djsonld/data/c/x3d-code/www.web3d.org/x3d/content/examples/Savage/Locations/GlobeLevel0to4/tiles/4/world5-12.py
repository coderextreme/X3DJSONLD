###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4015,-4094,-4193,-4167,-4390,-4411,-4413,-4546,-4641,-4560,-4352,-4035,-5265,-5423,-5478,-5606,-5239,-5222,-5213,-4406,-2099,-2281,-3858,-4100,-4258,-4151,-4455,-4475,-4336,-4385,-4413,-4489,-4518,-4199,-3938,-6082,-5227,-5528,-5512,-5333,-5270,-4050,-2243,-2157,-3555,-4037,-4033,-4106,-4498,-4407,-4330,-4155,-4358,-4505,-4363,-4308,-3902,-5216,-5544,-5756,-5427,-5136,-5325,-4096,-2485,-2730,-3752,-3980,-4235,-4439,-4295,-4548,-4233,-3856,-3970,-4242,-4073,-3241,-4063,-5063,-5530,-5214,-5521,-3788,-5380,-4625,-2349,-4402,-3649,-3990,-4165,-4263,-4328,-4385,-4348,-4972,-4069,-5073,-4292,-4556,-3679,-5029,-5403,-5155,-4992,-5272,-5415,-5146,-4778,-4838,-3340,-3945,-4104,-4318,-4458,-4247,-3147,-1333,-1465,-1964,-2146,-2349,-3910,-5267,-5536,-5038,-5613,-5274,-5212,-5210,-5091,-5029,-3293,-3820,-4443,-4480,-3971,-3834,-1249,-2506,-2426,-2605,-2599,-2915,-3774,-5121,-5065,-4717,-5149,-5277,-5263,-5244,-5196,-5055,-2438,-3849,-4631,-4471,-3533,-1489,-2048,-2678,-2408,-2383,-2706,-3499,-4486,-4950,-5224,-3968,-5164,-5251,-5206,-5285,-5243,-5133,-1691,-1637,-1574,-2033,-2027,-1664,-1917,-2660,-2972,-2493,-3212,-3834,-4544,-4999,-4877,-3710,-4878,-5072,-5154,-5378,-5302,-5137,-1594,-2428,-2343,-2595,-2385,-2315,-2518,-3064,-3353,-2752,-3411,-4330,-4143,-4745,-3501,-4900,-5220,-5121,-5172,-5449,-5469,-5158,-2440,-3012,-2631,-3597,-2059,-2682,-2828,-3271,-3481,-2561,-3647,-4452,-4568,-5116,-4858,-4404,-5366,-5135,-5212,-5503,-5516,-5424,-3320,-3757,-3584,-4077,-2496,-2769,-2996,-3238,-3660,-1945,-3475,-4563,-4723,-4787,-4934,-5585,-5114,-5190,-5274,-5593,-5573,-5403,-3614,-4001,-4334,-4248,-3539,-2940,-3203,-4086,-3528,-1372,-3724,-4450,-4847,-3719,-4755,-4859,-5020,-5112,-5392,-5604,-5558,-5628,-4262,-4161,-4479,-4337,-3987,-3841,-3818,-4666,-3810,-1652,-4283,-4764,-4700,-4267,-5004,-5039,-5554,-5308,-5292,-5588,-5586,-5455,-4395,-4569,-4771,-4328,-4331,-4323,-4252,-4485,-4392,-2381,-4530,-4804,-4662,-4475,-4671,-4805,-5057,-5451,-5364,-5629,-5484,-4147,-4119,-4777,-4921,-4585,-4242,-4469,-4477,-4767,-4494,-3733,-4549,-4676,-4932,-4772,-4624,-4827,-5567,-5546,-5304,-5720,-4605,-2856,-4185,-4849,-4977,-4510,-4563,-4492,-4572,-4934,-5093,-4520,-4405,-4579,-5108,-4976,-4820,-4959,-5212,-5364,-5436,-5154,-3868,-2190,-4515,-4780,-4992,-4604,-4580,-4656,-4795,-4938,-5260,-5158,-2201,-4063,-4961,-5160,-5163,-4940,-5466,-5295,-5475,-4540,-3324,-1589,-4483,-4696,-4886,-4736,-4532,-4909,-4998,-5198,-5311,-5281,-2923,-4034,-4841,-5158,-5230,-4927,-5542,-4763,-5126,-3873,-3112,-1433,-4430,-4749,-5010,-4880,-5113,-4944,-5002,-5251,-5408,-5646,-5242,-4158,-4886,-5302,-5221,-5115,-4018,-4848,-3327,-3887,-2876,-1146,-4521,-4789,-5001,-4782,-5149,-5099,-5130,-5299,-5414,-5504,-5386,-4375,-4751,-5388,-5289,-6220,-5409,-3062,-2694,-3917,-3014,-1170,-4494,-5052,-5029,-4868,-5153,-5189,-5179,-5279,-5551,-5385,-5742,-4238,-4750,-5496,-5252,-4997,-5120,-2777,-2323,-4605,-3175,-1795,-4566,-5132,-4996,-5033,-5266,-5287,-5127,-5391,-5639,-5513,-5698,-5892,-5020,-5447,-5348,-5368,-5356,-3621,-2201,-3409,-4761,-3498,-4745,-5039,-4979,-5140,-5223,-5317,-5109,-5361,-5641,-5731,-5641,-5326,-4983,-5469,-4168,-5157,-5350,-3636,-2202,-3615,-4829,-3722],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
