###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world12-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(44.95833735661353,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4754,-4844,-4864,-4864,-4870,-4913,-4360,-3817,-3939,-3913,-3829,-3650,-3329,-3059,-2916,-2688,-2631,-3189,-3338,-3333,-3433,-3269,-4518,-4826,-4852,-4760,-4797,-4862,-4455,-3959,-4169,-3141,-3409,-3759,-3623,-3331,-3210,-2112,-2676,-2697,-2775,-3264,-3179,-3143,-4437,-4790,-4815,-4935,-4800,-4729,-3559,-4357,-4272,-3804,-3718,-4016,-3549,-3034,-2833,-2634,-2173,-2583,-2835,-2851,-2864,-4265,-4173,-4756,-4783,-4720,-4996,-4144,-3893,-4218,-4176,-3964,-3748,-3417,-3569,-3097,-2761,-2652,-2667,-2885,-2957,-3060,-3484,-3243,-3728,-4634,-4737,-4700,-2426,-2913,-4253,-4421,-4422,-4009,-4032,-3678,-3343,-3201,-2996,-2942,-1793,-2865,-3100,-2681,-3246,-3478,-3853,-4571,-4722,-4701,-4652,-4520,-4491,-4351,-4702,-4288,-4060,-3824,-3662,-3260,-2974,-3161,-2040,-2813,-2610,-3209,-3499,-3749,-3269,-4104,-4644,-4543,-4676,-4625,-4657,-4509,-4360,-4255,-4152,-4250,-3974,-3570,-3315,-3156,-2688,-2784,-3050,-2988,-3111,-3716,-307,-1266,-3971,-4142,-4517,-4657,-4647,-4551,-4439,-4310,-4342,-4313,-3845,-3276,-3334,-3195,-3062,-2158,-2966,-3272,-3787,-3945,-249,-163,-1478,-4048,-4436,-4459,-4588,-4586,-4392,-4338,-4249,-4259,-4070,-3805,-3429,-3130,-3279,-1961,-3007,-3369,-3078,-3261,-269,-254,-2775,-3958,-4486,-4630,-4592,-4553,-4460,-4472,-4090,-4170,-3922,-3669,-3351,-3326,-2429,-2601,-3199,-3596,-3944,-4137,-361,-511,-2710,-4242,-4468,-4526,-4638,-4541,-4449,-4521,-4558,-4130,-4106,-3864,-3474,-3211,-2463,-2911,-3458,-3435,-3706,-4399,-874,-1283,-3474,-4147,-4384,-4434,-4650,-4411,-4396,-4304,-4547,-4128,-4071,-4061,-3457,-3602,-2309,-2571,-3607,-3644,-3724,-3899,-2102,-2160,-3852,-4236,-4407,-4366,-4403,-4489,-4210,-4001,-4571,-4217,-3973,-3717,-3266,-3213,-3414,-3100,-3809,-3858,-3729,-4155,-3119,-3538,-4140,-4365,-4405,-4502,-4152,-3990,-4235,-4090,-3997,-4081,-3306,-3455,-2856,-3264,-2155,-2948,-3639,-3962,-4053,-4057,-2799,-4129,-4322,-4348,-4366,-4378,-4183,-4235,-4386,-4083,-4251,-3780,-3971,-3415,-3164,-3280,-2754,-3478,-4056,-3532,-3979,-4146,-3940,-4177,-4390,-4482,-4322,-4329,-4123,-3821,-3524,-3647,-3962,-3972,-3740,-3211,-3318,-3061,-3239,-3704,-3859,-4033,-3874,-4078,-4110,-4160,-4189,-4314,-4333,-4123,-3973,-4015,-3996,-4190,-4341,-4334,-3852,-3501,-2624,-2468,-3419,-3932,-4015,-3786,-3660,-3830,-4112,-4238,-4295,-3956,-4096,-3290,-3525,-3831,-3321,-3864,-3234,-2872,-3139,-3673,-1095,-3205,-2806,-3572,-3481,-3558,-3528,-3696,-4053,-4187,-4230,-3863,-3144,-2919,-3706,-3654,-3443,-3196,-3763,-3522,-3233,-2734,-2478,-3789,-3687,-3838,-3713,-2730,-3553,-3242,-4050,-4024,-3925,-3874,-2754,-3403,-3636,-3972,-3629,-3117,-3099,-3335,-3747,-3828,-3658,-3695,-3800,-3670,-3742,-3460,-3509,-3606,-4005,-3916,-3741,-3504,-3565,-3796,-3678,-3626,-3085,-2510,-2060,-2947,-2782,-3196,-3150,-3420,-3437,-3687,-3622,-3630,-3649,-3931,-3896,-3738,-3517,-3524,-3488,-3748,-3100,-3130,-2868,-2006,-1990,-2819,-2705,-2974,-3192,-3356,-3561,-3540,-3646,-3549,-3534,-3923,-3497,-3705,-3680,-3475,-3619,-3213,-2946,-2851,-2713,-1896,-2138,-2619,-2529,-3101,-3090,-3057,-3316,-3698,-3490,-3528,-3629,-3796,-3449,-3727,-3581,-3449,-3621,-3186,-2868,-2828,-2973,-1814,-2278,-2680,-2673,-2974,-3102,-3083,-3220,-3574,-3153,-3482,-3411,-3759],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
