###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore16-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3519706612479037,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[34,33,32,35,38,42,47,51,55,57,55,51,44,38,35,33,32,32,35,43,57,58,40,30,33,34,31,27,25,23,21,20,24,27,33,38,44,39,37,36,39,43,46,49,51,51,49,46,42,37,33,30,29,30,32,36,44,58,58,41,31,32,32,29,26,25,23,21,19,21,23,28,32,38,44,42,40,43,48,50,50,49,46,42,38,35,33,30,28,27,29,32,37,45,57,58,43,34,33,32,29,26,25,24,21,19,19,20,24,28,34,48,45,44,47,51,50,47,45,43,39,36,34,33,32,30,29,29,33,38,47,58,60,49,41,38,35,32,29,27,25,22,19,19,19,24,27,32,49,48,49,51,52,48,44,42,41,39,36,36,36,35,33,30,29,33,39,48,59,62,54,48,43,38,35,32,30,27,23,20,19,20,24,27,32,48,50,52,51,49,45,41,40,40,39,38,39,40,37,33,30,28,32,41,50,59,62,57,52,46,40,37,34,32,29,25,23,22,21,24,26,31,46,50,53,50,45,41,38,38,38,39,40,41,41,38,32,29,28,32,43,52,59,62,59,54,48,42,38,35,35,33,29,26,25,23,24,25,31,45,49,52,47,41,38,37,36,36,37,39,39,38,34,29,28,31,37,46,53,60,63,61,57,50,43,40,38,38,37,34,31,28,26,25,26,31,44,46,48,42,37,35,35,34,34,34,36,35,34,30,26,28,34,41,47,53,61,65,64,60,52,45,42,40,41,41,39,36,32,29,28,27,31,41,41,41,36,32,31,32,32,32,32,32,32,31,29,27,29,36,41,44,50,61,67,68,65,56,49,44,41,42,42,42,40,36,33,31,29,31,38,36,34,30,28,28,29,29,30,29,29,29,30,29,29,31,36,39,40,47,60,69,71,69,60,52,46,41,42,42,44,44,40,37,34,31,32,36,33,30,28,26,27,28,28,28,28,28,29,30,30,30,33,37,39,39,45,59,69,74,74,63,54,48,42,41,41,43,44,41,39,35,32,34,35,32,29,27,26,27,28,27,27,27,28,29,30,31,31,34,37,40,41,47,60,70,78,78,66,56,50,43,41,40,42,43,41,38,35,33,35,34,31,30,28,27,27,28,28,27,27,29,30,31,32,32,35,39,43,48,55,66,75,83,84,72,60,52,45,43,40,42,42,40,38,35,34,36,33,32,31,29,29,29,29,28,28,28,30,32,33,33,34,37,42,48,57,65,75,83,90,90,76,64,55,48,45,43,42,41,39,38,36,35,36,32,31,30,28,28,28,28,28,28,29,31,33,34,35,38,42,47,56,67,76,85,91,96,94,78,65,57,50,47,45,43,42,41,40,39,37,37,31,29,28,27,27,27,27,28,28,30,32,33,34,37,42,48,56,65,77,86,95,100,102,97,79,64,58,52,49,47,46,45,43,42,41,39,37,30,28,27,27,27,28,28,28,29,30,32,33,36,41,49,57,66,76,87,95,103,107,105,98,80,66,61,56,53,50,49,47,45,43,41,39,37,29,27,27,28,30,30,31,30,30,31,32,34,38,46,56,66,76,86,95,102,109,110,107,99,84,71,66,61,57,54,51,49,45,42,39,37,35,29,28,27,28,31,32,32,32,32,32,32,36,41,50,61,71,79,88,96,103,109,112,108,102,89,79,73,67,62,58,54,50,45,40,37,34,32,30,29,28,29,31,32,33,32,32,33,34,38,45,53,62,70,75,82,89,97,106,111,110,106,97,89,81,74,68,62,56,51,44,38,33,30,28,30,29,29,29,30,32,33,33,33,33,35,39,47,54,61,67,70,76,83,92,104,111,113,111,105,97,90,82,75,67,60,53,46,39,33,27,26,30,29,29,29,29,31,34,34,34,34,35,40,47,53,58,61,64,70,79,89,103,112,116,117,111,105,97,90,81,73,65,58,51,45,35,28,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
