###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_33',geoSystem=['GDC'],position=(-11.291664319767108,-22.54166197283422,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-11.291664319767108,-22.54166197283422,0.0),range=4495500.0,child1Url=['../../tiles/4/world6-6.x3d'],child2Url=['../../tiles/4/world6-7.x3d'],child3Url=['../../tiles/4/world7-6.x3d'],child4Url=['../../tiles/4/world7-7.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world3-3.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-94,-1958,-2792,-3773,-4140,-4695,-5233,-5471,-5258,-4623,-4365,-4945,-4100,-3982,-2313,-3523,-4575,-4621,-4622,-5090,-5366,-112,-128,-2328,-3505,-4087,-4420,-5053,-5374,-5497,-5601,-5710,-4627,-4865,-3692,-2976,-3714,-4200,-4524,-5075,-5870,-5651,1471,17,-75,-3286,-4166,-4608,-4724,-5522,-5563,-5569,-4955,-4945,-4679,-3761,-3890,-3271,-4388,-4800,-4732,-5223,-5598,1042,412,-20,-3128,-4339,-4267,-4481,-5169,-5300,-5259,-5108,-4964,-3949,-4258,-3930,-2603,-4029,-5304,-4540,-4935,-5374,907,484,792,-2271,24,-4154,-4191,-4445,-5388,-5267,-5292,-5325,-5018,-4331,-3271,-3147,-4119,-4318,-4910,-5485,-5001,675,536,212,-43,-4002,-4192,-4093,-4871,-5109,-5587,-5158,-4981,-4656,-3879,-3266,-3156,-3628,-4806,-4785,-4722,-4622,566,841,276,-49,-3971,-4335,-4512,-4874,-5257,-5568,-4481,-4694,-4111,-3503,-2492,-2985,-3766,-4180,-4842,-4907,-5538,658,614,316,-1425,-3986,-4431,-4794,-4958,-5401,-4955,-4804,-4694,-3958,-3435,-2609,-3446,-3944,-3769,-4809,-4813,-5062,547,885,314,-33,-4217,-4450,-4653,-5028,-5094,-5298,-5020,-4669,-4962,-3570,-2688,-3593,-3869,-4065,-4604,-4640,-5271,795,849,768,-2208,-4325,-4598,-4567,-5073,-5773,-5248,-4795,-4698,-4151,-3494,-2598,-3232,-3644,-4156,-4189,-4995,-5122,697,483,384,-2366,-4348,-4766,-4227,-4395,-5534,-5486,-5239,-4848,-4384,-3636,-2876,-3294,-3589,-3672,-3765,-5364,-5327,738,722,678,0,-4174,-4484,-3240,-5677,-5438,-4917,-5348,-5034,-3920,-3705,-3067,-3824,-4363,-3866,-3842,-3561,-5461,542,438,686,245,-3482,-4620,-4630,-5481,-5625,-6324,-5135,-4705,-4433,-3570,-3417,-3594,-4281,-4441,-4418,-5250,-5372,543,466,652,285,-258,-4137,-5134,-5399,-5297,-5216,-5195,-4362,-4267,-3914,-3120,-3322,-4312,-4447,-4588,-5095,-5458,412,459,395,607,180,-4459,-5039,-5381,-5585,-5662,-4948,-4729,-3831,-3639,-3033,-3318,-3321,-4276,-4467,-4719,-4064,529,311,486,342,547,-2007,-5190,-5441,-5629,-5680,-5427,-5235,-4246,-3604,-2954,-3281,-3432,-4461,-4370,-4826,-4763,272,283,700,645,442,-4039,-5094,-5490,-5648,-5775,-5189,-4854,-4277,-3970,-3365,-2909,-3745,-4415,-4447,-4550,-4794,301,226,658,609,514,-3648,-4899,-5264,-5669,-5719,-5086,-4570,-4244,-3917,-3519,-2198,-4327,-4463,-4822,-4273,-4164,202,204,308,99,40,-4292,-4602,-5190,-5491,-5204,-5047,-4820,-4302,-3963,-3267,-2949,-3657,-3811,-4737,-5433,-3547,55,57,885,82,-2419,-3662,-4308,-4965,-5368,-5554,-4789,-4855,-4286,-4031,-3725,-3148,-3935,-4169,-4621,-3929,-5058,43,59,65,-1191,-3430,-4056,-4253,-4927,-5239,-5333,-5022,-4865,-4616,-4259,-3619,-3184,-3632,-4302,-4981,-4680,-4384,27,33,34,-1441,-3543,-4169,-4242,-4871,-5268,-5364,-5186,-4919,-4899,-4197,-3954,-3160,-3821,-4361,-4921,-4831,-4342],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
