###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore10-24.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2995803869799398,103.93454881909646,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[0,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,5,7,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,8,8,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,4,5,7,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,8,8,9,9,9,10,10,10,7,4,3,3,3,3,4,4,5,6,7,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,13,15,16,17,17,18,19,18,13,7,4,2,2,3,4,4,5,6,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15,17,19,20,20,21,20,17,11,6,3,2,5,9,13,15,16,15,15,15,14,14,13,13,12,12,12,12,12,11,10,10,10,10,10,10,15,18,19,20,21,21,17,11,7,3,2,3,9,18,25,30,31,29,26,23,21,19,18,17,16,16,16,16,16,13,12,10,10,10,10,10,15,18,19,20,19,17,12,7,4,3,4,9,17,27,33,36,36,33,30,26,23,21,19,18,18,18,18,18,17,16,15,15,16,16,15,13,16,18,20,20,16,11,7,3,2,3,9,17,27,35,39,38,37,33,30,26,23,21,19,18,18,18,17,17,17,19,20,23,24,24,23,19,16,19,19,17,12,7,4,3,3,6,14,24,33,39,42,40,38,34,30,26,23,21,19,18,18,18,18,18,19,21,24,26,27,26,24,21,17,20,17,12,8,3,2,3,6,11,20,30,37,42,44,42,39,34,31,27,23,21,19,18,17,17,17,20,21,24,27,27,27,25,23,20,18,18,13,8,5,2,3,4,8,14,23,33,41,45,46,43,39,34,30,26,23,20,19,18,17,17,19,21,24,26,27,27,25,23,21,20,17,14,9,6,3,2,4,7,10,15,24,35,43,48,49,45,40,34,30,26,23,20,18,17,17,19,21,24,27,27,27,25,22,21,19,19,15,11,7,4,3,4,6,9,12,16,24,33,43,50,51,46,40,34,29,25,21,19,17,17,18,21,24,26,27,27,25,23,21,20,18,18,13,9,5,3,4,6,9,11,14,17,22,30,42,52,53,46,40,35,30,23,18,17,16,19,21,24,26,27,27,25,23,21,19,19,18,16,11,8,6,4,5,8,11,13,15,16,19,25,35,47,51,47,41,33,26,20,16,17,18,20,23,26,27,27,25,23,21,20,18,18,17,14,8,8,7,6,7,9,12,15,15,15,16,19,26,36,45,50,44,29,20,16,15,18,20,23,26,27,27,25,23,21,19,19,18,16,14,13,8,9,8,8,8,10,13,15,15,14,14,15,21,28,37,44,39,23,15,14,16,20,23,25,27,27,25,23,21,20,18,18,17,14,12,12,10,10,9,9,9,11,13,14,14,13,13,14,18,23,28,31,26,14,11,15,19,23,26,27,26,25,23,21,19,19,18,16,14,13,11,11,11,10,10,10,10,12,13,14,13,13,13,15,17,20,21,22,18,11,11,18,23,26,27,26,25,23,21,20,18,18,17,14,12,12,11,11,11,10,9,9,10,12,12,13,14,15,16,17,17,18,18,17,15,13,15,23,27,27,26,25,22,21,20,19,18,16,15,13,11,11,11,11,11,10,9,8,9,11,12,12,13,16,18,19,19,17,17,16,15,15,18,24,27,26,24,22,20,20,19,18,17,15,13,12,11,11,11,11,12,11,9,7,8,10,11,12,13,16,18,20,20,18,17,17,16,16,18,22,23,21,20,20,19,19,18,18,16,14,13,11,10,11,11,12],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
