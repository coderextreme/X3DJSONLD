###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore5-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.25592182508997,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[19,22,25,27,28,27,24,20,16,13,11,10,9,8,7,10,14,16,18,22,27,33,40,46,51,52,48,45,41,38,36,33,27,22,19,16,12,13,19,24,26,27,28,28,25,21,16,11,10,9,9,9,11,14,19,23,27,32,40,48,54,58,56,51,45,40,35,32,27,21,17,14,12,10,7,13,19,23,26,28,29,27,25,21,17,16,16,15,14,17,20,24,30,34,39,44,50,53,55,52,46,40,33,29,25,21,16,12,10,9,9,1,7,14,19,25,27,30,29,29,26,24,23,22,21,20,23,26,31,37,41,45,48,50,50,49,46,39,33,26,21,18,15,10,6,6,6,9,0,3,8,14,21,24,28,31,34,34,34,32,29,26,22,22,23,28,35,40,44,45,43,41,39,35,29,25,21,17,15,13,10,8,7,8,10,0,0,2,8,16,20,25,32,39,42,43,40,36,30,23,19,17,22,31,37,42,40,35,31,27,23,19,17,16,15,14,13,12,11,10,10,10,0,0,0,4,10,18,26,34,40,41,42,39,36,29,21,17,14,18,27,33,38,37,33,28,24,21,17,16,16,16,14,13,13,13,13,13,14,0,0,0,0,3,14,28,34,39,38,36,35,33,27,19,15,11,15,23,29,34,35,33,29,24,21,18,17,18,17,15,14,15,16,15,15,18,0,0,0,3,7,18,30,33,35,32,29,28,29,24,18,15,11,13,17,23,29,32,31,28,24,21,19,18,18,18,16,15,15,16,16,17,19,0,0,0,7,16,24,32,30,28,24,20,21,24,22,19,16,12,12,12,16,23,27,29,28,24,21,20,19,18,17,16,15,15,16,17,18,19,0,2,5,14,24,28,31,29,26,22,18,19,21,20,18,16,13,11,10,13,18,22,25,25,22,21,20,19,18,17,16,16,16,16,17,17,17,0,6,14,22,30,30,30,28,25,22,20,18,17,17,17,15,13,12,10,11,12,15,19,21,20,20,19,18,18,17,17,17,17,17,16,15,14,5,10,17,22,28,28,27,25,23,22,20,18,16,16,16,15,14,12,11,10,11,12,15,17,16,16,15,15,16,16,18,18,18,18,16,15,13,11,13,16,19,21,21,22,21,21,20,20,19,17,16,16,15,14,13,12,12,12,13,14,13,11,10,10,11,13,15,19,20,20,19,17,16,13,13,14,15,15,15,16,16,16,16,17,18,17,16,16,15,14,13,13,13,14,15,15,15,13,11,9,8,9,10,13,18,20,20,19,18,16,13,14,14,13,12,11,10,10,9,9,12,14,15,15,14,13,12,12,12,13,15,18,18,17,15,13,11,9,8,9,11,14,17,20,20,18,16,13,15,14,12,10,8,7,6,7,7,9,12,13,13,12,11,11,10,11,13,16,18,19,18,17,15,12,10,9,9,10,12,16,19,21,18,15,12,15,14,12,10,7,6,6,6,8,10,13,13,12,11,10,9,8,9,12,14,16,17,19,18,16,14,11,9,9,9,11,14,19,21,18,14,10,14,12,10,8,6,6,6,8,10,12,13,13,11,10,9,8,7,8,11,13,15,16,18,19,17,15,12,9,8,8,9,11,16,19,16,12,8,9,8,7,6,5,5,6,10,13,13,14,13,12,10,8,7,7,8,10,12,13,15,16,17,18,17,12,9,7,6,6,8,12,14,10,6,6,7,6,6,5,4,6,8,11,14,15,15,14,11,9,7,7,7,8,10,11,12,13,14,16,17,16,13,9,7,5,4,5,8,9,6,3,4,7,6,6,5,4,7,10,12,14,16,18,14,9,7,6,6,7,8,10,11,11,12,13,14,13,13,13,11,8,5,2,2,3,3,3,3,6,7,7,7,6,4,7,11,13,16,19,22,17,9,7,5,5,7,9,11,11,10,11,12,13,11,11,12,11,8,5,2,1,1,1,1,3,7],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
