###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore19-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3781657983818856,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[44,43,43,43,45,47,48,48,50,52,51,50,52,55,58,60,59,56,52,48,44,40,38,38,39,42,44,47,48,46,45,44,44,44,43,43,46,47,46,45,45,47,47,48,49,51,49,46,48,52,55,57,56,52,48,45,41,38,36,34,34,36,39,43,46,45,44,43,43,44,44,43,49,51,50,48,46,45,46,48,49,50,45,39,41,46,49,52,51,47,44,41,38,37,35,33,32,32,35,38,41,42,42,42,43,43,43,42,51,52,51,49,46,43,45,48,49,49,43,36,37,42,45,47,45,43,40,38,36,35,34,31,30,30,32,34,37,40,41,42,42,42,42,41,48,49,49,48,45,43,45,49,50,50,46,40,40,42,42,42,41,40,38,37,36,34,32,30,28,29,31,32,35,38,41,41,40,40,40,38,45,46,46,46,43,42,44,48,50,51,48,45,43,42,40,38,37,37,37,36,35,33,31,28,27,28,30,32,34,37,39,39,39,38,37,36,43,42,41,41,40,40,42,46,49,52,52,51,47,43,40,37,35,34,35,35,34,32,29,27,27,28,30,32,34,36,37,37,36,36,35,34,42,39,38,37,37,38,40,43,47,51,53,54,50,45,41,37,35,33,33,35,33,30,28,26,26,28,31,33,34,35,35,35,35,35,35,34,44,40,39,37,37,36,38,40,43,45,49,53,51,47,42,37,35,33,33,33,32,29,27,25,26,29,31,32,33,34,35,36,36,37,37,36,46,42,40,39,38,37,37,38,38,40,44,50,50,48,43,37,35,34,34,33,31,28,26,24,26,29,31,31,31,33,35,36,38,40,40,38,49,47,44,42,41,40,38,36,36,36,39,44,46,47,43,38,35,35,34,32,31,29,28,26,27,30,31,30,30,32,34,36,38,41,42,40,53,50,48,46,44,43,40,36,34,34,37,39,42,45,42,37,36,35,34,32,32,31,30,27,27,29,30,29,29,30,33,35,38,42,44,42,54,51,49,48,46,45,42,38,36,35,36,38,39,41,39,36,35,36,35,34,33,32,30,28,27,28,27,26,26,29,32,35,38,42,45,42,55,51,49,48,47,46,43,41,38,36,37,37,36,36,35,34,34,35,36,35,34,32,30,28,27,27,25,23,24,28,32,35,39,43,45,42,56,50,48,47,46,45,44,42,40,38,38,37,35,32,31,31,31,32,32,33,33,33,31,29,28,28,27,25,26,29,33,37,41,44,44,41,56,50,47,46,45,44,44,43,42,40,39,38,35,30,28,28,28,28,29,31,32,34,33,31,30,30,29,27,28,31,35,39,42,44,43,39,55,49,47,45,44,44,45,45,45,44,42,40,36,31,28,26,26,26,28,30,32,34,34,32,31,31,29,28,28,30,34,38,41,41,40,36,54,48,46,44,43,43,45,48,48,48,46,42,38,33,29,25,25,27,29,31,32,34,34,33,32,31,29,27,27,29,32,35,37,37,36,32,52,47,44,42,42,43,46,51,52,52,48,44,40,36,32,28,27,28,29,31,33,34,33,32,32,31,29,27,26,27,29,32,34,34,32,28,49,44,42,40,41,43,48,53,55,55,51,45,42,39,36,32,30,29,30,32,33,33,32,31,31,30,29,26,26,25,26,28,30,30,28,25,44,41,39,38,40,43,48,54,55,55,51,46,44,44,41,36,33,29,29,31,31,31,31,30,30,30,29,27,26,25,24,25,26,26,24,22,39,38,36,35,38,42,48,54,55,54,51,47,47,48,44,40,35,29,28,29,29,29,29,29,29,30,30,29,27,25,24,23,23,22,20,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
