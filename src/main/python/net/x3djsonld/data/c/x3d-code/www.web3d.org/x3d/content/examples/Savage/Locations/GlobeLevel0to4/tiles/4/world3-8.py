###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-8.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3295,-4528,-4255,-3862,-4196,-4681,-4069,-4501,-4885,-5147,-5072,-5234,-5291,-5158,-5634,-5147,-5100,-5409,-4757,-4640,-4836,-4788,-3442,-3613,-4410,-3924,-3682,-3936,-4674,-4811,-3988,-5020,-4301,-5294,-5345,-5159,-5198,-5232,-4906,-5081,-4235,-4126,-4068,-4104,-3452,-4183,-3928,-3441,-3296,-3251,-3614,-4511,-4451,-4240,-4468,-5136,-5067,-5332,-4992,-5068,-5002,-4569,-4706,-4306,-4255,-3500,-2603,-3399,-3440,-3357,-3107,-2649,-2782,-2844,-2636,-3907,-4367,-4679,-4815,-4872,-4983,-5170,-4882,-4141,-4446,-3956,-3978,-4066,-2332,-1541,-2810,-2697,-2344,-2422,-2809,-2212,-2925,-3624,-4149,-4010,-4237,-4478,-5071,-4627,-4500,-4376,-3849,-3516,-3817,-3849,-2364,-2790,-2794,-2173,-1511,-3788,-3251,-2242,-4765,-3746,-3779,-3811,-4159,-4630,-4585,-4567,-4036,-3878,-3674,-3325,-3578,-3357,-2513,-2659,-2560,-2225,-2108,-1860,-2305,-4077,-2934,-4105,-3710,-3554,-3416,-3845,-4101,-4085,-4065,-3680,-3569,-3500,-2666,-2946,-2426,-2522,-2699,-2847,-3306,-2942,-2597,-2260,-2408,-3322,-2628,-2726,-3227,-3388,-4283,-3765,-3665,-3091,-3203,-3478,-3405,-3305,-2475,-2721,-2477,-2541,-3027,-3721,-3215,-3223,-3192,-2954,-3777,-2318,-2778,-2212,-2181,-3314,-2754,-2565,-3580,-1903,-2862,-2748,-2733,-2680,-2654,-2468,-3286,-3534,-3514,-3627,-3607,-3498,-2980,-3188,-2726,-3214,-1812,-3911,-3569,-3094,-2982,-3292,-3153,-3331,-2545,-3032,-2918,-2927,-2716,-3709,-4025,-3811,-4007,-4064,-3831,-3689,-3289,-2756,-2207,-2757,-3286,-3082,-3367,-3717,-3306,-3752,-2634,-1626,-2804,-3371,-3392,-3106,-3788,-3748,-3809,-3972,-3979,-3393,-3409,-3322,-4171,-3520,-3129,-3857,-3448,-3907,-3779,-3822,-2666,-1955,-3319,-3296,-1542,-2542,-3898,-3416,-4046,-4247,-4127,-3626,-3722,-1963,-3722,-3734,-3585,-3771,-3916,-3714,-4246,-3939,-2659,-3397,-3570,-3478,-3038,-3077,-3838,-4100,-4073,-4535,-4107,-3376,-4238,-4337,-4059,-3892,-4066,-4144,-3849,-4068,-4257,-4280,-3359,-3835,-3763,-3615,-3590,-2977,-3501,-1375,-4448,-4222,-3779,-3714,-4270,-3827,-3638,-4802,-4275,-4465,-4227,-4225,-4272,-4304,-3601,-4008,-3957,-3839,-3786,-3751,-3722,-3319,-3073,-4221,-3670,-3819,-4142,-3737,-4604,-4622,-3963,-3667,-4238,-4405,-4383,-4432,-3461,-3809,-3934,-3961,-4006,-3826,-3805,-3853,-2455,-4325,-3728,-3211,-3779,-3921,-4279,-4300,-4692,-5304,-4788,-4268,-4535,-4211,-3858,-3944,-3857,-4111,-4210,-3856,-4001,-3873,-2262,-3945,-3986,-4246,-4406,-4461,-4816,-4798,-4249,-4963,-4597,-4438,-4546,-4535,-3785,-4030,-3963,-4206,-4529,-4608,-4005,-4337,-2969,-3936,-3220,-4030,-4738,-4551,-4606,-4295,-4362,-4378,-5138,-4893,-4761,-5019,-3586,-4118,-4035,-4416,-4584,-4553,-4292,-2364,-1773,-3882,-4544,-4456,-4708,-4609,-5155,-4650,-4716,-5128,-5625,-5251,-4872,-4948,-3706,-3834,-4069,-4895,-4687,-4251,-4367,-1831,-2224,-3970,-5694,-4550,-4587,-5064,-4516,-4716,-4457,-4976,-5965,-4704,-4519,-4836,-4000,-4176,-4305,-4451,-4938,-4640,-4804,-2146,-3757,-4658,-4918,-4659,-4379,-4342,-4272,-4753,-4608,-4348,-5378,-4617,-4661,-4989,-3595,-4593,-4527,-4703,-4836,-3492,-3845,-4191,-4537,-4547,-4750,-4661,-4668,-4559,-5064,-4767,-4602,-4269,-4553,-4125,-4859,-4846,-3542,-4185,-4590,-4630,-4384,-3921,-4295,-4244,-4333,-4540,-4750,-4744,-4651,-4830,-5698,-4775,-4703,-4354,-4602,-4221,-4689,-4769],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
