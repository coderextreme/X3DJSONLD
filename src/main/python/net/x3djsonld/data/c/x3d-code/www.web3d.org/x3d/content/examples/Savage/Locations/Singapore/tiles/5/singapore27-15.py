###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore27-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4480194974058374,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[14,14,13,13,14,15,16,18,20,21,21,21,21,20,17,16,15,15,15,15,17,20,22,23,24,24,23,23,23,24,26,26,25,25,28,30,28,14,13,12,12,13,14,14,16,18,19,19,19,20,20,18,18,19,18,16,16,17,19,22,23,22,22,22,23,24,25,26,26,25,25,28,29,27,14,13,12,12,12,12,13,14,15,16,16,16,17,18,20,22,26,25,22,19,17,17,18,19,19,19,19,19,23,24,24,24,25,27,29,30,28,14,13,12,12,12,12,13,13,14,14,14,15,16,19,22,26,29,28,24,20,15,14,14,15,16,16,16,18,22,24,24,24,25,27,30,32,30,15,14,13,12,12,13,13,13,13,13,13,14,17,21,25,27,29,27,24,18,12,11,12,13,13,13,16,19,22,25,26,26,26,27,32,36,32,16,15,14,13,13,13,14,13,12,12,12,14,16,20,24,26,28,26,22,16,10,9,10,11,12,14,18,20,23,25,28,28,28,29,34,38,33,16,15,13,13,14,14,14,13,12,12,12,12,13,15,17,21,25,24,20,15,9,8,8,12,17,20,21,22,23,25,27,30,31,32,35,35,30,16,16,15,14,14,14,14,13,12,12,12,12,12,12,13,17,23,22,18,13,8,7,8,14,21,26,26,26,26,26,28,30,33,34,33,30,25,17,18,19,19,19,18,15,14,13,12,12,12,12,12,13,15,19,19,17,13,9,9,11,17,27,33,32,32,32,32,30,30,33,34,29,24,20,17,21,25,24,23,21,18,15,14,13,13,12,12,12,12,14,18,18,17,14,10,10,13,20,29,35,35,35,36,36,32,31,33,33,26,19,18,19,25,31,30,29,27,23,19,16,14,13,13,12,12,12,16,21,21,20,16,11,11,13,18,23,27,30,32,35,36,34,32,32,31,26,20,18,20,28,35,35,34,32,28,23,19,17,15,13,12,12,12,16,22,23,23,18,12,11,13,15,17,20,25,29,33,34,33,32,31,29,25,22,20,19,25,32,34,36,35,33,29,25,23,21,16,11,11,11,15,21,22,20,16,11,11,12,14,16,19,23,26,28,28,27,27,28,29,27,25,24,18,22,28,32,36,36,35,33,30,28,27,20,12,11,11,14,18,19,18,14,10,10,12,13,14,17,20,22,22,22,21,22,25,27,27,26,27,18,21,24,27,29,30,31,31,32,32,32,25,16,14,12,13,16,16,14,12,9,9,11,12,13,13,16,18,18,18,17,17,18,19,21,22,24,19,20,22,22,23,24,25,29,33,34,36,29,20,16,13,13,13,13,11,10,9,9,10,11,11,11,12,14,14,14,14,13,12,13,15,19,21,17,18,19,19,20,21,22,24,27,28,29,23,17,15,13,11,10,10,10,10,11,11,10,11,11,12,13,13,12,12,13,14,14,15,16,17,18,15,15,16,17,17,18,18,19,21,21,21,17,14,13,12,10,8,8,9,11,12,12,11,11,12,13,14,14,11,11,13,16,17,17,17,17,17,13,14,14,15,17,18,18,17,17,17,17,15,13,12,12,11,8,8,8,8,10,10,11,12,14,15,16,15,12,11,13,16,17,18,18,19,19,12,12,12,14,16,17,17,15,13,13,13,12,11,11,12,11,9,8,6,6,7,8,10,13,16,17,18,17,13,12,14,16,17,19,21,21,20,11,11,11,12,14,15,16,16,14,13,13,12,12,11,12,11,11,10,8,8,9,10,12,14,15,16,16,15,13,12,15,17,18,19,20,20,18,11,10,9,10,12,14,16,16,15,14,13,13,12,12,12,12,13,12,10,10,11,12,14,14,14,13,12,12,12,13,16,18,19,19,19,17,16],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
