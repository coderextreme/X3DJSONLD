###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-17.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.83400758019333,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[18,20,22,24,29,33,34,34,30,24,21,19,20,23,28,34,38,41,38,32,25,17,13,13,14,15,16,17,17,16,14,13,11,12,12,13,14,19,21,25,28,33,37,39,39,33,25,21,19,20,22,24,27,29,32,30,25,20,15,13,13,15,17,19,21,20,18,16,13,12,13,15,16,17,19,19,24,30,34,38,39,39,32,24,21,19,20,23,24,25,26,27,25,21,17,14,13,14,15,18,20,22,21,19,16,14,13,16,18,20,21,18,17,22,29,33,36,36,35,29,23,20,18,21,24,26,27,26,23,21,18,16,16,16,14,15,17,18,20,20,18,16,14,15,18,22,24,24,20,18,23,29,32,34,34,32,28,22,19,18,20,24,25,25,23,20,18,17,18,19,18,16,15,16,17,18,19,19,17,15,16,19,22,24,24,24,23,26,29,30,31,31,30,27,22,19,17,19,22,22,22,19,17,17,18,20,22,20,18,16,14,15,16,18,19,20,17,16,18,20,20,20,28,29,31,32,31,30,29,27,25,22,20,18,18,20,19,17,15,14,15,18,20,21,20,17,16,15,15,16,18,20,20,18,16,17,18,19,19,32,34,36,36,34,31,27,24,23,22,20,18,18,18,15,12,11,11,13,16,17,19,18,16,15,16,17,18,19,21,20,17,16,17,18,20,20,34,38,39,39,36,32,27,22,21,22,20,18,17,16,13,10,10,11,13,16,17,18,17,16,16,17,19,19,20,21,20,17,16,16,17,19,20,37,39,40,40,37,33,27,21,21,21,18,15,15,14,13,12,12,13,15,18,20,20,19,17,17,18,19,19,19,21,20,17,16,15,16,17,20,39,41,42,41,37,31,26,21,20,20,17,13,13,14,14,13,13,14,16,20,22,23,21,19,18,20,20,19,19,20,19,18,16,15,15,17,19,41,44,44,43,36,28,24,20,19,18,15,11,12,14,14,14,14,14,17,22,24,25,24,22,21,21,21,20,20,19,19,19,18,16,16,17,18,41,43,43,39,32,25,22,20,18,16,13,11,12,14,15,15,15,15,18,23,25,25,24,22,21,21,21,20,19,18,18,19,19,18,17,17,17,39,40,36,31,26,22,20,19,17,14,12,11,12,15,16,15,17,19,21,24,24,23,22,20,20,20,19,18,17,16,17,18,18,19,19,18,18,36,35,30,25,22,20,19,18,16,14,13,13,15,17,17,16,18,23,24,25,24,22,21,19,19,19,18,17,15,15,15,16,17,18,19,18,17,30,28,24,21,19,17,17,17,16,16,16,17,18,20,19,18,20,25,26,26,24,23,21,19,18,18,17,15,15,14,14,14,15,16,16,16,16,27,23,20,18,16,16,16,16,16,17,18,20,21,23,22,20,22,26,27,26,25,24,22,20,18,18,17,16,15,15,15,14,14,14,15,15,15,25,22,19,16,15,15,16,16,17,18,19,21,23,24,23,22,23,25,25,25,25,25,24,21,19,19,18,18,17,17,17,17,16,15,15,15,15,25,22,19,16,15,15,16,16,17,19,20,22,24,25,25,24,24,24,25,25,26,26,24,22,20,20,19,19,19,19,19,18,17,16,15,15,15,26,24,20,17,16,16,16,16,18,19,21,24,25,25,26,27,26,25,26,27,28,26,24,22,20,20,20,20,20,21,20,19,17,16,15,15,14,26,24,21,19,18,18,18,17,19,20,22,25,26,26,28,29,28,26,26,28,28,26,24,22,21,20,20,21,21,21,21,19,17,16,15,15,14,23,23,21,20,20,21,20,20,20,21,23,25,26,27,30,32,30,27,26,26,26,25,24,23,22,22,21,22,22,22,20,18,16,16,16,15,14,20,20,20,20,21,22,21,21,22,23,24,25,26,28,30,32,30,27,25,24,24,24,24,24,24,23,23,23,23,22,21,18,16,16,16,15,14],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
