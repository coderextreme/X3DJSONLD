###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.6616511706451,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[15,17,23,29,31,30,24,16,11,9,12,19,27,35,37,35,29,20,19,22,26,30,30,26,24,25,24,19,18,23,28,32,33,32,31,29,26,14,16,20,25,27,25,20,13,10,10,13,19,26,34,37,37,32,23,22,25,29,35,36,33,31,32,30,23,20,23,28,34,37,36,34,32,28,14,16,18,21,21,20,15,11,10,11,15,20,25,30,33,35,33,26,24,26,31,39,42,41,40,40,37,28,23,23,27,34,38,38,36,32,27,13,15,16,17,17,15,12,9,10,13,17,22,27,30,33,36,34,29,26,26,31,41,47,48,48,47,43,34,28,25,27,33,38,38,35,31,26,12,14,14,14,13,11,10,10,12,15,20,26,30,33,35,37,36,31,28,26,31,42,49,54,55,54,49,41,34,29,28,33,35,35,32,28,24,12,13,13,11,10,9,9,10,13,17,22,28,33,36,39,41,40,35,31,27,31,41,49,54,57,58,55,48,41,34,31,32,33,32,31,27,24,12,12,12,10,9,9,9,11,15,19,24,30,34,38,42,45,44,40,35,29,31,37,44,50,54,57,58,55,50,41,35,31,30,30,30,28,26,10,11,10,10,9,8,10,13,17,22,27,31,35,39,43,48,47,44,38,32,32,37,41,44,48,52,55,56,53,45,37,32,28,28,28,28,28,8,8,9,9,9,8,11,15,20,25,29,31,34,36,41,47,48,44,40,36,36,38,39,38,39,42,47,51,51,45,38,32,28,26,26,27,29,5,6,8,9,9,9,12,17,23,28,30,32,33,33,37,44,45,42,40,37,37,38,37,34,33,35,40,46,47,43,37,32,28,26,26,27,29,4,5,7,9,9,9,13,19,24,29,32,34,33,30,32,36,38,37,36,35,36,36,35,32,32,33,36,41,42,39,35,31,29,28,28,28,27,2,3,5,7,8,9,13,19,23,27,31,33,31,26,27,30,31,31,31,32,33,33,33,31,31,31,32,35,37,35,33,32,31,31,30,29,27,2,2,3,5,6,7,10,14,17,21,25,28,27,23,23,24,24,23,24,26,28,30,31,31,31,30,29,31,31,31,31,32,34,34,34,31,29,2,1,2,3,4,6,8,10,13,16,19,23,23,20,19,19,19,18,19,22,25,28,30,32,31,29,28,28,28,28,29,32,35,36,35,32,29,1,1,0,1,3,6,8,9,9,10,13,16,17,18,17,17,17,16,18,20,24,29,32,33,33,30,29,29,29,28,28,31,33,33,32,30,28,1,1,0,0,3,6,7,8,7,7,9,12,15,18,19,18,18,17,19,20,24,29,33,35,35,33,30,30,29,28,28,29,30,31,30,28,27,2,2,1,2,5,8,9,9,8,8,10,14,20,25,27,27,25,23,23,24,26,29,33,37,38,35,32,31,30,29,28,28,28,27,27,26,27,3,3,3,4,7,9,10,11,9,8,11,16,23,30,33,33,31,28,26,26,27,28,33,39,40,36,33,31,30,29,28,27,26,25,25,25,26,5,5,5,6,9,12,14,15,13,12,13,17,22,27,31,33,33,30,29,28,28,28,32,38,39,36,32,31,30,29,28,27,26,25,25,25,26,7,6,6,8,11,15,17,19,17,15,16,19,22,26,29,33,34,32,31,30,29,29,31,37,38,35,32,30,29,29,28,27,26,25,25,26,27,10,8,8,9,12,16,20,23,22,20,22,25,26,27,28,31,32,32,32,33,33,32,33,35,35,33,31,29,28,28,29,28,27,26,26,26,27,11,10,9,10,13,17,23,27,27,26,27,30,30,29,29,29,30,32,34,36,37,36,35,35,34,33,32,29,28,28,29,29,28,27,27,27,27,12,11,10,9,12,16,23,29,31,31,32,34,34,32,32,32,33,34,36,39,40,40,40,40,40,40,38,33,31,30,30,30,29,28,27,27,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
