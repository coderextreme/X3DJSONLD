###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_30',geoSystem=['GDC'],position=(-11.291664319767108,-157.54166599614774,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-11.291664319767108,-157.54166599614774,0.0),range=4495500.0,child1Url=['../../tiles/4/world6-0.x3d'],child2Url=['../../tiles/4/world6-1.x3d'],child3Url=['../../tiles/4/world7-0.x3d'],child4Url=['../../tiles/4/world7-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world3-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-2385,-1282,-5329,-5397,-5875,-5814,-5750,-5390,-5070,-4913,-4895,-4424,-4339,-4708,-4506,-3556,-4586,-4626,-4433,-4179,-4021,-2578,-1687,-4404,-5692,-5764,-5652,-5790,-5527,-4869,-4513,-4502,-4730,-4775,-4732,-4674,-4423,-4863,-4636,-4326,-3994,-4317,-2819,-2835,-2153,-5960,-5702,-5552,-5570,-4842,-4113,-4392,-4892,-4811,-3618,-4246,-4766,-4790,-4599,-4353,-4470,-4056,-3857,-3470,-2402,-780,-6153,-5598,-5497,-5520,-5248,-4761,-3725,-4908,-4066,-4757,-4106,-4525,-4106,-4181,-3888,-4404,-2631,-3581,-3073,-2836,-1692,-9385,-5598,-5449,-5212,-5279,-4892,-4808,-3750,-4724,-4587,-4112,-4622,-4656,-4377,-4568,-2399,-3817,-3870,-714,-2616,-2319,-4846,-5538,-5167,-5195,-5142,-4906,-4719,-4697,-4606,-4487,-2961,-3603,-4502,-4510,-4300,-3101,-3970,-3252,-2250,-2510,-2496,-3577,-4889,-5051,-5446,-4507,-4821,-4925,-4567,-4841,-3724,-3971,-2440,-4121,-4271,-2785,-3821,-2662,-4081,-1972,-2087,-2263,-1481,-4951,-5270,-5493,-5664,-4471,-5157,-5249,-5025,-4449,-3785,-4002,-3816,-3032,-2553,-2841,-3523,-4368,-567,-1851,-2052,-1682,-4708,-5356,-5520,-5379,-4910,-5120,-4880,-4259,-4429,-4103,-4251,-1311,-2422,-2533,-2441,-4013,-4348,-2739,-1715,-1486,-3115,-4338,-5220,-5256,-5394,-5222,-5117,-4530,-4680,-4638,-4608,-1416,-2776,-2370,-2441,-3698,-4031,-4400,-2292,-2313,-4584,-4748,-4157,-5168,-5589,-5371,-3453,-5123,-5108,-5042,-4961,-3846,-4505,-4503,-4343,-4445,-3970,-4257,-4148,-3420,-3069,-1826,-4564,-4940,-5143,-5253,-5475,-2497,-5084,-5208,-5029,-5131,-4032,-4694,-4206,-4740,-4347,-3905,-4332,-4348,-1584,-1725,-4622,-4664,-4915,-5446,-5212,-3719,-2556,-5240,-5286,-5436,-5277,-5011,-5023,-4720,-4588,-4621,-3122,-4124,-4319,-2563,-4340,-3689,-4371,-5106,-4174,-4443,-3588,-2720,-5163,-5403,-5458,-4957,-4804,-4638,-4643,-4894,-4522,-4043,-3181,-3447,-4532,-4789,-4519,-3622,-3687,-4726,-3360,-4270,-1890,-5387,-5414,-5313,-4596,-4905,-4052,-5094,-4861,-4378,-3383,-4210,-4455,-5009,-5434,-5385,-5244,-4413,-5149,-4403,-3890,-3943,-5363,-5495,-5326,-4941,-5269,-4841,-5198,-4488,-4236,-3582,-4233,-4474,-4659,-6015,-5553,-5490,-5065,-5384,-4131,-4249,-4323,-5357,-5443,-5233,-4993,-5259,-5245,-4608,-4181,-4180,-4031,-4413,-4431,-4893,-5249,-5793,-5558,-5455,-5694,-4303,-4849,-4873,-5080,-5313,-5078,-5000,-5266,-5078,-4918,-4624,-4337,-4107,-4425,-4502,-5438,-5485,-5085,-5553,-5737,-5656,-5157,-3122,-4729,-4641,-4799,-5377,-4467,-5129,-5100,-4273,-4746,-4463,-4233,-4510,-4620,-5886,-5834,-5821,-5145,-5315,-5128,-5374,-3867,-5303,-5235,-5207,-5268,-5181,-4732,-4805,-4674,-4558,-4517,-4525,-4662,-4613,-5294,-5844,-5716,-5342,-2548,-5307,-5114,-5055,-4945,-5340,-5199,-4810,-4996,-4720,-4644,-4749,-4577,-4565,-4325,-4461,-4537,-5102,-5916,-5797,-5411,-3932,-5307,-5464,-5241,-5180,-5349,-5161,-4700,-5005,-4722,-4658,-4712,-4570,-4471,-4471,-4400,-4511],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
