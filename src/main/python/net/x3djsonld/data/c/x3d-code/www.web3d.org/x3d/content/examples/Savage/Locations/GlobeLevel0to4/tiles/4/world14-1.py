###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world14-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(67.45833802716578,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[38,75,245,666,52,60,274,453,104,339,855,855,1220,873,391,730,1199,906,1284,983,1141,602,161,45,67,245,365,490,851,90,461,640,855,490,390,507,610,524,1205,1191,583,1162,536,316,121,175,94,245,185,160,337,253,100,105,156,175,150,245,243,335,978,849,481,618,904,604,151,1157,543,275,266,271,259,788,498,360,150,123,135,200,462,484,867,810,741,377,892,319,37,462,903,775,220,605,508,606,1014,342,550,248,217,252,316,488,579,799,563,336,609,30,465,1145,598,610,1230,803,533,558,1157,730,780,700,617,487,316,730,556,301,504,824,446,1,607,629,1201,1312,1600,975,1754,1768,1524,896,1220,774,840,718,727,384,270,305,548,816,613,1,550,499,455,464,424,562,686,718,821,977,1337,1260,1465,1395,869,662,807,312,305,299,1,0,335,393,305,185,131,257,173,271,358,659,918,793,950,2103,1646,709,588,408,-46,-46,1,1,120,159,35,75,120,99,44,92,118,150,259,377,760,222,116,-61,-73,-22,-119,-27,-34,-14,38,20,32,59,49,30,25,56,23,11,2,-3,-117,-7,-40,-78,-84,-265,-203,-44,-45,-41,25,12,3,1,1,-3,-26,-44,-67,-282,-419,-221,-3,-248,-657,-1081,-1219,-1509,-1316,-1245,-378,-85,-35,4,-2,-41,-108,-246,-352,-367,-225,-1593,-2015,-1852,-2028,-2076,-2602,-2624,-2299,-2013,-1647,-1410,-1162,-851,-66,-107,-198,-264,-465,-959,-1613,-2327,-2579,-2916,-3026,-3362,-3455,-3217,-2993,-2729,-2434,-2214,-2058,-2078,-1800,-1681,-74,-208,-520,-1570,-1779,-2212,-3313,-3379,-3588,-3607,-3540,-3509,-3296,-3238,-3121,-2954,-2905,-2730,-2460,-2339,-2226,-2240,-362,-2025,-2016,-3096,-3349,-3710,-3675,-3640,-3602,-3586,-3494,-3488,-3437,-3416,-3280,-3199,-3129,-2938,-2764,-2620,-2626,-2530,-2529,-2794,-3607,-3592,-3741,-3731,-3697,-3679,-3625,-3613,-3615,-3582,-3542,-3527,-3405,-3346,-3248,-3184,-3020,-2987,-2903,-2809,-3180,-3627,-3713,-3749,-3750,-3743,-3730,-3787,-3695,-3675,-3632,-3602,-3578,-3599,-3562,-3519,-3439,-3367,-3323,-3201,-3116,-3038,-3744,-3742,-3750,-3763,-3751,-3746,-3666,-3726,-3704,-3685,-3663,-3640,-3612,-3596,-3565,-3572,-3452,-3423,-3393,-3303,-3174,-3124,-1649,-3755,-3804,-3749,-3749,-3745,-3737,-3725,-3712,-3701,-3680,-3665,-3648,-3641,-3615,-3542,-3612,-3526,-3422,-3394,-3382,-3399,-1823,-2954,-3762,-3729,-3746,-3754,-3838,-3828,-3781,-3755,-3701,-3674,-3666,-3648,-3627,-3643,-3618,-3559,-3448,-3380,-3381,-3356,-965,-1636,-3743,-3810,-3747,-3837,-3832,-3796,-3733,-3777,-3708,-3697,-3686,-3692,-3745,-3684,-3702,-3663,-3616,-3550,-3481,-3451,-588,-759,-2178,-3740,-3775,-3734,-3825,-3820,-3760,-3801,-3711,-3727,-3689,-3669,-3694,-3649,-3696,-3665,-3628,-3604,-3527,-3473,-573,-699,-1979,-3734,-3759,-3719,-3811,-3747,-3751,-3810,-3706,-3777,-3686,-3669,-3656,-3669,-3696,-3662,-3620,-3603,-3530,-3467],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
