###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(translation=(81168.42,0.0,72149.71),
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/5/PanamaCity2-3.jpg'],repeatS=False,repeatT=False)),
          geometry=ElevationGrid(xDimension=22,xSpacing=1288.3877,zDimension=22,zSpacing=1717.8502,height=[-30,-32,-31,-31,-34,-32,-34,-34,-34,-35,-34,-35,-33,-31,-32,-33,-33,-31,-31,-31,-32,-31,-32,-32,-32,-32,-33,-33,-33,-34,-33,-32,-32,-32,-33,-34,-35,-34,-35,-35,-32,-33,-33,-33,-37,-35,-37,-36,-36,-35,-35,-34,-35,-34,-34,-35,-33,-34,-36,-36,-35,-36,-33,-33,-33,-34,-41,-39,-38,-39,-39,-38,-38,-39,-37,-37,-35,-36,-35,-35,-36,-34,-34,-34,-33,-32,-33,-34,-42,-42,-41,-41,-41,-41,-41,-40,-40,-39,-38,-37,-37,-36,-37,-36,-35,-35,-35,-35,-35,-34,-44,-46,-46,-45,-44,-44,-44,-44,-42,-41,-41,-39,-38,-38,-37,-37,-37,-37,-37,-36,-35,-35,-50,-50,-49,-48,-47,-47,-47,-46,-45,-44,-43,-41,-40,-41,-39,-39,-38,-38,-37,-37,-37,-37,-47,-47,-49,-48,-49,-48,-48,-48,-48,-46,-46,-44,-42,-42,-41,-40,-40,-39,-38,-37,-38,-38,-47,-48,-48,-47,-47,-48,-48,-48,-48,-49,-47,-46,-44,-45,-43,-42,-41,-41,-39,-38,-38,-38,-48,-48,-48,-49,-50,-49,-49,-50,-50,-49,-47,-46,-45,-45,-45,-43,-41,-40,-41,-40,-40,-40,-50,-51,-50,-49,-50,-50,-49,-49,-49,-49,-48,-48,-45,-44,-44,-44,-43,-43,-43,-42,-42,-43,-55,-56,-55,-54,-52,-52,-51,-52,-50,-51,-51,-50,-50,-49,-49,-49,-48,-47,-47,-46,-45,-45,-66,-61,-60,-60,-59,-58,-57,-57,-56,-56,-55,-54,-53,-52,-53,-53,-51,-51,-49,-48,-47,-46,-70,-65,-66,-66,-65,-63,-64,-64,-65,-63,-63,-60,-57,-57,-56,-55,-55,-54,-53,-52,-50,-49,-75,-72,-71,-69,-68,-66,-67,-67,-68,-67,-67,-66,-65,-64,-60,-58,-57,-56,-56,-54,-53,-51,-77,-75,-74,-72,-73,-71,-70,-69,-69,-69,-68,-67,-66,-65,-64,-62,-60,-58,-56,-55,-54,-53,-77,-74,-73,-72,-72,-72,-74,-72,-73,-71,-71,-69,-67,-66,-65,-64,-63,-61,-58,-56,-55,-54,-76,-75,-73,-73,-71,-73,-73,-72,-71,-71,-71,-70,-69,-68,-67,-65,-64,-62,-60,-58,-55,-54,-77,-76,-76,-74,-73,-72,-73,-72,-71,-72,-71,-72,-71,-70,-68,-67,-65,-63,-61,-59,-57,-55,-77,-76,-75,-75,-73,-72,-71,-73,-70,-73,-75,-74,-73,-71,-70,-68,-67,-64,-62,-60,-57,-54,-88,-82,-78,-80,-78,-79,-80,-78,-77,-77,-77,-76,-75,-73,-72,-70,-68,-65,-63,-60,-57,-55,-88,-83,-79,-81,-79,-80,-80,-78,-78,-77,-78,-76,-75,-73,-72,-70,-68,-65,-63,-60,-57,-55]))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
