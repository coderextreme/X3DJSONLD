###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3868,-4092,-3315,-3568,-3549,-3802,-3761,-2178,-3315,-3434,-3520,-3775,-4353,-3732,-3962,-4139,-3978,-3069,-2274,-4279,-4431,-4621,-3964,-3740,-3195,-3676,-3688,-3873,-3301,-3234,-3852,-3439,-3670,-3910,-3930,-4105,-4307,-4101,-4084,-3971,-2609,-3981,-3138,-4331,-4088,-3838,-3942,-3677,-3653,-3396,-3385,-2787,-3801,-3284,-3673,-3861,-3998,-4008,-4079,-3530,-4223,-3760,-2105,-3535,-3600,-1962,-4131,-4291,-4304,-4096,-3679,-3444,-3534,-3134,-2746,-2603,-3747,-3658,-3841,-4213,-3868,-4047,-3913,-3355,-4011,-1080,-3785,-3140,-4126,-4041,-4048,-3810,-3630,-3598,-3552,-3523,-3083,-3239,-3421,-3582,-3924,-4158,-3826,-3988,-3821,-4132,-4146,-4214,-4071,-2483,-4249,-4237,-4096,-4298,-3958,-3813,-3559,-3092,-3088,-4054,-2543,-3524,-3584,-3869,-3792,-4258,-4426,-4304,-1229,-4561,-3529,-4453,-4349,-4288,-4206,-4018,-3961,-3843,-3674,-3376,-3288,-2670,-3029,-3622,-3955,-3826,-3955,-4138,-4399,-4411,-4312,-4430,-3208,-3083,-4451,-4517,-4447,-3935,-4157,-3817,-3664,-3388,-2929,-2773,-3460,-3573,-4051,-3977,-4071,-4098,-4181,-4445,-4240,-4503,-4391,-3527,-4496,-4654,-4480,-4151,-4078,-3816,-3702,-3223,-2981,-2952,-3306,-3512,-3841,-3821,-4001,-4482,-4452,-4402,-4724,-4523,-4778,-4743,-4779,-4893,-4512,-4421,-4240,-3940,-3518,-3700,-3275,-2754,-3260,-3612,-3826,-3980,-4099,-4161,-4284,-4279,-4347,-4662,-4149,-4712,-4557,-4796,-4317,-4469,-4239,-4066,-3974,-3808,-3191,-2885,-3558,-3662,-3808,-3778,-4199,-4101,-4336,-4398,-4367,-4469,-4792,-4576,-4581,-4572,-4389,-4188,-4321,-4080,-3659,-3223,-3538,-2831,-3339,-3537,-3850,-4474,-4209,-4010,-4233,-4362,-4401,-4725,-4454,-4338,-4533,-4554,-4620,-4254,-4358,-4091,-4016,-3550,-3567,-3043,-2828,-3465,-3662,-3934,-4050,-4249,-4276,-4427,-4566,-4655,-4497,-4507,-4785,-4750,-4666,-4158,-4235,-4036,-3941,-3607,-3264,-2959,-3674,-3259,-3622,-3898,-4497,-4208,-4327,-4506,-4610,-4715,-4556,-4625,-4638,-4317,-4387,-4590,-4242,-4045,-3866,-3627,-3328,-2795,-3386,-3571,-3915,-3935,-4175,-4472,-4330,-4433,-4561,-4736,-4565,-4784,-4794,-4236,-4463,-4409,-4040,-4071,-3695,-3047,-3209,-3019,-3456,-3632,-3771,-4062,-4358,-4472,-4437,-4236,-4804,-4589,-4881,-5196,-4695,-4248,-4280,-4237,-4433,-4394,-3652,-3564,-3317,-3189,-3399,-3854,-3853,-4053,-4095,-4407,-4141,-4450,-4574,-4558,-4630,-5248,-4242,-4614,-4182,-4294,-4090,-3941,-3619,-4044,-2946,-2934,-3634,-4095,-4095,-4454,-4362,-4073,-4506,-4681,-4586,-4704,-4887,-5101,-4447,-4486,-4805,-4219,-3983,-4238,-3975,-3648,-2820,-4511,-3092,-3979,-4154,-4058,-4652,-4544,-4750,-4668,-4782,-5096,-5164,-5349,-4645,-4369,-4998,-4237,-4092,-4254,-3876,-3523,-3875,-2623,-3671,-4142,-3922,-4462,-4589,-4375,-5032,-4826,-4914,-4999,-5015,-4744,-5055,-4827,-4711,-4080,-4328,-4389,-4204,-3775,-3505,-2957,-4037,-3730,-3952,-4292,-4531,-4469,-4798,-4852,-4670,-4894,-5034,-5156,-5064,-4871,-4619,-4349,-4300,-4347,-4062,-3908,-3534,-3166,-3538,-3666,-4012,-4340,-4455,-4470,-5084,-4464,-4959,-5340,-5243,-5049,-5196,-4657,-4827,-4441,-4109,-4912,-3956,-3491,-3605,-3069,-3910,-3759,-4073,-4124,-4471,-4632,-5522,-5046,-4674,-5504,-5144,-5448,-5012,-5082,-4823,-4441,-4238,-4959,-4386,-3778,-3527,-3008,-3924,-3886,-4193,-4688,-4532,-4716,-4943,-5285,-4839,-5345,-5162,-5181],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
