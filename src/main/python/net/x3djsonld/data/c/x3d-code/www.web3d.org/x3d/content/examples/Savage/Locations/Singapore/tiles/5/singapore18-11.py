###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore18-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3694340860038916,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[23,23,23,23,23,23,24,25,27,28,29,31,35,40,47,57,70,82,93,100,105,109,112,112,106,99,92,85,83,81,77,72,67,63,57,50,41,20,20,21,21,22,22,24,25,27,28,29,31,35,40,47,57,69,79,88,94,101,106,111,111,106,98,89,81,78,75,72,67,62,56,50,45,38,18,18,19,20,20,22,24,25,26,28,30,32,35,40,47,57,68,75,80,86,94,101,108,110,105,98,87,79,75,72,68,64,56,50,44,39,35,18,18,19,20,20,22,24,25,26,28,31,33,36,41,49,58,68,73,74,78,87,95,104,108,104,97,87,79,76,72,66,60,52,45,39,34,31,19,19,19,20,21,22,23,25,26,28,31,34,37,43,51,60,69,72,70,73,82,91,101,105,101,95,87,80,77,73,65,57,49,42,36,31,27,19,19,19,20,20,21,23,24,26,28,32,34,38,45,54,63,73,77,75,77,84,91,98,102,97,93,86,80,76,72,65,57,49,41,35,30,26,20,20,20,20,20,21,23,24,26,28,31,35,40,47,56,66,76,81,81,84,88,92,96,97,94,90,84,79,74,70,64,58,50,41,35,30,25,20,19,19,20,21,22,23,24,25,27,29,34,41,49,56,65,73,79,82,85,89,92,92,91,89,87,82,78,72,67,62,57,49,41,34,28,23,19,19,18,20,22,23,23,24,25,26,28,33,41,48,55,61,67,72,77,81,86,88,86,84,84,82,80,76,70,63,59,54,48,42,33,26,20,19,18,16,18,21,22,22,23,25,25,27,32,39,46,53,58,61,65,71,76,80,80,77,74,75,75,75,73,67,62,57,53,47,41,33,26,20,19,17,15,16,18,19,21,23,25,25,25,29,36,43,50,53,54,58,65,69,70,69,65,62,65,67,68,68,65,61,57,53,46,40,33,27,21,20,17,15,17,18,20,22,24,26,26,25,28,34,40,46,49,49,53,58,61,62,61,57,55,57,58,60,62,60,59,56,53,45,38,32,26,20,21,19,18,19,20,22,24,25,27,27,27,28,32,36,41,44,45,48,52,55,55,55,54,53,51,50,52,54,54,54,53,52,44,37,29,22,17,22,21,20,21,22,24,25,27,28,28,27,27,29,33,36,40,42,46,49,51,51,51,51,50,47,45,46,48,48,48,48,47,41,35,28,21,17,24,23,22,23,24,25,27,28,28,27,25,25,27,30,32,36,40,45,48,50,48,47,47,45,43,41,42,42,42,42,41,40,36,33,28,22,20,24,24,24,25,25,25,26,27,27,26,24,25,26,28,30,33,38,42,45,47,45,43,42,40,38,37,37,37,37,37,35,34,32,31,26,22,21,24,25,26,25,24,24,24,24,25,24,24,25,26,28,30,32,35,38,41,42,40,37,34,32,32,32,32,32,32,32,30,29,30,29,25,21,21,24,26,27,25,24,23,22,23,24,25,26,27,28,30,31,32,34,36,37,37,36,34,30,27,28,29,29,29,29,28,27,26,27,27,23,20,20,26,27,28,25,22,21,22,23,26,28,30,31,33,34,34,35,35,35,35,34,34,33,29,26,26,26,28,29,27,26,25,25,23,23,19,17,18,26,28,27,24,21,21,23,25,28,31,33,34,36,37,37,37,37,36,34,33,34,33,30,28,27,28,29,29,26,24,23,22,21,20,17,15,17,25,25,25,23,22,24,26,29,31,33,35,36,37,38,40,40,40,39,36,35,36,36,34,33,33,33,31,28,25,22,20,19,18,18,16,16,18,23,24,24,23,23,26,29,31,32,34,36,37,37,38,41,42,42,40,38,36,37,36,35,35,34,34,29,26,23,20,18,17,17,17,18,20,23,21,23,25,25,26,27,29,31,32,33,35,35,34,35,38,40,40,38,36,34,34,33,32,31,31,29,24,20,19,18,18,18,18,18,22,26,33],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
