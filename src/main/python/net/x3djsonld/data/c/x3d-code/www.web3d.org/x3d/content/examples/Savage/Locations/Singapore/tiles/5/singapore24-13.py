###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore24-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4218243602718554,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[75,73,73,73,75,76,72,66,58,50,47,45,50,57,66,77,81,82,74,63,54,49,48,52,58,66,71,73,70,62,55,53,51,51,52,52,52,71,69,70,70,73,76,74,71,65,59,55,50,53,55,64,75,79,80,73,62,54,48,47,51,57,66,71,73,71,63,56,54,53,53,53,53,51,67,66,67,69,71,74,74,74,71,68,63,57,55,55,62,73,77,77,71,61,53,47,46,49,55,64,70,73,71,62,56,54,52,53,53,52,50,61,63,66,69,68,68,69,71,72,73,69,64,60,56,60,67,69,69,63,54,48,43,43,45,51,59,65,68,67,60,55,51,48,49,49,47,45,55,60,64,68,65,61,64,68,71,75,72,69,64,58,59,62,62,62,56,50,44,41,40,41,46,54,60,63,63,58,53,48,44,44,44,42,40,49,52,56,60,57,53,57,60,65,70,69,68,67,63,63,61,60,58,54,50,46,42,38,37,40,48,54,57,57,53,48,43,40,40,40,40,39,42,45,48,52,49,46,49,53,59,63,66,67,67,67,64,61,57,54,51,49,45,41,37,32,34,42,48,51,51,47,43,39,36,37,38,38,39,38,39,41,44,43,42,44,46,49,52,57,62,64,65,63,60,55,50,47,45,42,38,34,30,31,37,42,44,44,41,38,37,37,37,38,39,39,33,33,34,35,37,39,39,40,41,43,48,56,60,62,61,59,53,47,43,41,39,36,33,29,29,33,35,37,37,34,33,34,37,37,38,39,39,31,31,32,33,37,40,40,40,41,43,45,49,51,53,53,51,48,44,41,40,38,36,33,29,28,31,33,34,33,32,32,34,37,38,38,37,36,29,29,31,32,37,40,40,40,41,43,43,42,43,44,44,44,43,42,40,39,37,35,32,29,28,30,31,31,31,31,32,35,37,38,38,35,34,27,28,30,32,36,39,40,40,42,43,42,41,41,41,42,42,41,41,40,37,35,33,31,29,29,29,30,30,31,32,33,35,37,38,37,35,32,26,27,29,32,35,38,39,40,41,43,41,40,40,40,40,39,39,40,39,36,34,32,31,29,29,29,29,30,32,33,35,35,37,37,36,34,32,25,26,28,31,34,37,38,39,40,41,41,40,40,40,39,38,38,39,37,35,33,31,31,31,30,29,29,31,33,34,36,36,35,35,34,32,30,25,26,28,30,33,36,38,38,39,40,40,40,40,39,39,38,38,37,36,33,32,31,31,31,30,28,28,31,33,35,36,35,34,33,31,31,30,27,29,29,29,32,36,38,39,39,38,38,39,40,40,39,39,37,35,34,32,31,30,30,30,29,27,27,30,33,34,34,33,32,31,30,31,31,30,31,29,28,31,35,37,39,38,36,37,38,39,40,39,38,36,34,33,31,30,29,29,29,29,26,26,29,31,32,32,31,29,29,30,30,31,29,31,29,26,29,32,35,38,36,34,35,37,37,38,38,38,36,34,33,31,29,28,28,29,28,25,25,27,28,29,29,28,28,28,29,30,31,29,30,27,25,27,29,32,36,35,33,34,35,36,36,37,37,36,34,32,30,28,27,27,28,27,25,24,24,25,26,27,26,26,28,29,30,30,29,29,27,25,27,28,31,34,33,33,34,34,35,35,34,33,32,31,30,28,27,25,25,26,26,25,24,24,24,26,27,26,25,27,29,29,29,29,30,28,26,27,27,29,31,32,32,33,34,34,33,31,28,27,27,27,26,26,25,25,26,26,25,24,24,24,27,28,26,25,27,29,29,29,30,32,30,28,27,26,28,30,30,30,31,35,33,31,29,25,25,25,25,26,26,27,27,27,26,26,25,25,25,28,29,27,26,28,30,32,33],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
