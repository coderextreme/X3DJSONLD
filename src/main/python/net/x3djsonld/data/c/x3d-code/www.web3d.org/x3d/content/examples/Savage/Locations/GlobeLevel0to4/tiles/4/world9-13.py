###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3223,-1895,-2482,-1902,-2143,-2158,-312,-46,-1356,-851,-1803,1,127,53,-5631,-5863,-5735,-5675,-6019,-6150,-5158,-4972,-3816,-2065,-1943,-888,-1282,-1550,-1256,179,-835,-1365,-1182,-41,18,-46,-7976,-5704,-5672,-5769,-5906,-6092,-5542,-5069,-3755,-4133,-3853,-1663,-1104,-785,-1732,-37,-351,-61,141,209,-11,-225,-9266,-5571,-5472,-5886,-5854,-6057,-5854,-5461,-3140,-4215,-4300,-1393,-2655,-12,-1774,-313,-3,-60,808,-2,47,172,-7245,-5565,-5806,-5882,-5904,-6058,-5903,-5621,-3167,-4259,-4259,-2837,-3983,-436,-2530,-853,-3,-464,30,-2,-5,-101,-6541,-5624,-5628,-5779,-6113,-6022,-6032,-5855,-2894,-4088,-4332,-4369,-4424,-3887,-3294,-1042,-3,1,-1318,17,370,-367,-5822,-5337,-5583,-5637,-5983,-6213,-5875,-5273,-2087,-4172,-3998,-4348,-4377,-4109,-3620,-2849,-491,744,-271,82,-42,-5028,-5343,-5371,-5510,-5728,-5880,-6019,-5764,-5303,-2826,-2332,-4366,-4458,-4335,-4204,-3707,-3451,-2826,25,-704,183,-1205,-7251,-4850,-4937,-5763,-5855,-6105,-6147,-5775,-5278,-2801,-3053,-4355,-4347,-3980,-4252,-4076,-4049,-763,159,115,242,0,-5662,-5174,-4908,-5498,-5816,-5842,-6090,-5792,-4831,-2207,-1636,-3456,-4358,-3884,-4321,-4073,-4437,-1872,4,-2,-4,-863,-6294,-4911,-5215,-5487,-5644,-6033,-5986,-5655,-5171,-1554,-3005,-3256,-4269,-4152,-3902,-4234,-4637,-12,75,12,-870,-3459,-5332,-5265,-5442,-5938,-5544,-5722,-5856,-4951,-4386,-1302,-2766,-3830,-4258,-4115,-3690,-3207,-4210,287,293,-2123,-1777,-4884,-4930,-5254,-5511,-5508,-6142,-5462,-4335,-4817,-3976,-742,-849,-2123,-711,-4226,-4026,-4078,-2774,708,342,-3243,-4908,-2953,-3768,-4892,-5140,-5561,-5654,-5021,-5694,-6135,-4220,-280,-758,-2647,-977,-4151,-4132,-3835,-4103,-31,865,-597,-4417,-3011,-3422,-5552,-5612,-5485,-5042,-5349,-5817,-5791,-5375,-758,-753,-2608,-2156,-3926,-3746,-3793,-3723,-820,401,883,-4030,-1929,-3262,-3515,-5285,-5239,-6421,-5776,-5779,-5675,-5345,-630,-1053,-2811,-3347,-3431,-3994,-3957,-4242,-712,1691,561,-5044,-3614,-3332,-4969,-5476,-4532,-5320,-5744,-6149,-5831,-5184,-1498,-2193,-1902,-3633,-3856,-4110,-3929,-4155,-2429,912,-801,-2874,-3970,-4732,-5340,-5172,-5281,-5593,-5692,-5893,-5919,-5895,-1368,-1977,-2986,-3619,-3797,-3918,-3876,-4131,-3145,540,322,-4005,-5525,-5034,-4650,-5584,-5350,-5830,-5956,-6215,-6088,-5876,-282,-446,-1249,-3309,-3351,-3792,-3831,-3930,-2077,-208,-1106,-4793,-5604,-5188,-5287,-5071,-5130,-5832,-6086,-6468,-6070,-6069,-186,-190,-526,-1265,-2637,-3166,-3620,-3664,-3360,-856,-2535,-4928,-5390,-5227,-5389,-5155,-5338,-5527,-5838,-6183,-6159,-5637,-83,-62,-154,-1042,-1629,-1894,-3136,-2829,-4031,-3079,-2625,-5095,-5678,-5368,-4808,-5508,-5781,-5618,-5908,-6114,-5968,-5928,-30,-88,-113,-176,-705,-761,-2648,-2952,-3673,-3520,-2974,-5002,-5630,-5651,-5694,-5710,-5747,-5706,-5909,-5854,-6044,-5918,-40,-71,-84,-128,-358,-3,-1579,-2700,-3797,-3383,-3337,-5581,-5547,-5788,-5364,-4654,-5445,-5805,-5890,-6059,-6027,-5941,-34,-60,-91,-105,-324,-96,-1609,-2758,-3743,-3524,-3350,-5597,-5452,-6047,-5583,-5327,-5572,-5796,-5771,-6121,-6001,-5879],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
