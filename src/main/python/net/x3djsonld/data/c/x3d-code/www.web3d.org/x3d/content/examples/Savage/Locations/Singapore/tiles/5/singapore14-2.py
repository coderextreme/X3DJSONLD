###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.61856206825804,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[12,11,10,10,9,4,-1,-2,-1,0,3,4,6,7,10,12,15,16,16,16,16,11,2,-2,-3,-3,-3,-3,-4,-4,-4,-3,-2,0,0,2,12,11,10,10,9,2,-4,-6,-5,-4,-4,-3,-2,0,5,9,13,16,17,17,17,11,2,-1,-2,-2,-2,-3,-2,-3,-5,-6,-4,0,1,2,12,11,10,9,6,0,-6,-8,-8,-8,-8,-8,-8,-4,0,4,10,13,16,16,17,11,3,-1,-2,-2,-2,-2,-2,-3,-6,-7,-4,-1,0,2,12,11,10,7,2,-2,-7,-9,-9,-9,-9,-9,-9,-7,-5,0,4,9,14,16,17,12,3,-1,-2,-2,-2,-2,-3,-4,-5,-6,-4,-2,-2,-1,11,10,8,3,-1,-5,-8,-9,-9,-9,-9,-9,-9,-8,-8,-5,0,4,10,13,15,10,2,-1,-2,-2,-2,-2,-3,-4,-5,-5,-4,-3,-3,-2,11,8,3,0,-5,-7,-8,-9,-9,-9,-9,-9,-9,-9,-9,-7,-5,0,4,7,9,6,1,-1,-2,-2,-2,-2,-3,-4,-4,-4,-4,-3,-1,0,10,5,0,-3,-7,-8,-8,-9,-9,-9,-9,-9,-9,-9,-9,-8,-8,-5,0,1,3,2,0,-1,-2,-2,-2,-3,-3,-4,-4,-4,-3,-2,0,2,8,1,-4,-6,-8,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-7,-5,-3,0,0,-1,-1,-2,-2,-2,-3,-3,-4,-4,-3,-1,0,2,4,7,0,-7,-8,-8,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-8,-8,-6,-3,-1,-1,-2,-2,-2,-2,-3,-3,-4,-3,-2,0,2,4,6,6,0,-7,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-6,-3,-2,-2,-2,-2,-2,-2,-3,-3,-4,-2,0,2,5,6,7,6,0,-7,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-7,-4,-2,-2,-2,-2,-2,-2,-3,-4,-4,-1,0,4,6,7,7,7,0,-7,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-7,-5,-3,-2,-2,-2,-2,-3,-4,-4,-4,-1,0,3,5,5,5,8,1,-7,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-7,-6,-4,-3,-2,-2,-3,-4,-4,-5,-4,-2,0,1,2,2,2,11,1,-7,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-8,-7,-6,-4,-3,-3,-4,-4,-5,-5,-4,-3,-1,-1,0,0,0,14,4,-5,-7,-8,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-8,-7,-5,-4,-4,-4,-5,-5,-5,-5,-4,-4,-3,-2,-2,0,18,9,0,-4,-8,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-7,-6,-4,-4,-5,-5,-5,-5,-5,-5,-5,-4,-3,-3,-1,21,15,7,0,-5,-7,-8,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-8,-7,-6,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-4,-3,-2,22,19,15,7,0,-4,-8,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-8,-7,-6,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-3,-2,23,22,20,14,6,0,-6,-7,-8,-9,-9,-9,-9,-9,-9,-9,-9,-9,-8,-7,-6,-6,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-4,-3,23,23,23,19,14,6,0,-4,-8,-9,-9,-9,-9,-9,-9,-9,-9,-8,-7,-6,-6,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-4,-3,-2,23,23,23,22,20,14,6,0,-6,-8,-8,-9,-8,-8,-8,-8,-8,-7,-6,-6,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-4,-3,-2,0,23,23,23,23,23,19,14,6,0,-4,-8,-8,-7,-6,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-4,-3,-2,0,0],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
