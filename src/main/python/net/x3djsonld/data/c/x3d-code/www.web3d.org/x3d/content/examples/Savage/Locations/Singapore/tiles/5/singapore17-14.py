###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[52,53,54,53,52,49,46,43,41,43,45,47,49,50,49,48,48,48,48,49,49,47,44,43,44,45,47,47,47,45,43,43,47,52,58,61,51,52,52,52,52,49,45,43,41,43,46,48,50,50,48,47,47,47,48,48,48,47,44,44,46,48,48,46,42,36,33,33,42,51,57,61,52,50,48,49,50,47,43,43,42,44,47,50,53,50,46,46,46,47,47,47,46,46,46,48,53,55,53,47,37,27,21,21,37,50,57,61,53,49,46,47,49,46,43,44,45,47,49,51,55,52,47,46,47,47,47,47,46,47,48,52,56,57,55,48,38,27,19,19,36,50,56,60,54,51,48,48,47,46,44,46,48,49,51,53,56,53,49,47,47,47,46,46,47,48,50,52,55,55,52,49,45,40,32,31,42,51,53,56,56,52,50,49,48,47,45,48,51,52,52,54,56,54,51,49,47,47,46,47,48,49,51,52,53,52,50,49,49,47,41,39,44,49,51,52,57,54,52,52,51,49,47,51,55,54,52,53,55,54,53,50,46,46,47,48,49,50,50,51,50,49,49,49,49,47,43,40,41,43,47,49,58,56,54,54,55,52,48,53,58,56,52,53,54,54,55,53,49,48,49,49,50,50,50,49,49,48,49,49,49,48,44,42,40,40,44,46,59,56,53,56,59,55,51,54,58,56,53,53,55,56,57,57,56,55,52,51,51,50,49,48,48,49,50,50,49,48,46,44,42,42,43,45,57,54,53,58,62,58,54,56,58,56,53,53,54,56,57,60,61,59,55,53,50,49,48,48,49,49,50,50,48,46,46,45,44,43,43,44,50,52,53,59,64,60,57,57,58,57,54,53,52,52,54,57,62,60,56,53,48,47,47,47,50,50,49,47,46,44,45,46,45,44,44,44,47,51,54,59,64,61,58,58,58,56,53,51,50,50,51,55,61,60,56,52,47,46,46,47,50,49,48,45,43,43,44,46,46,46,45,45,48,52,55,59,63,60,56,56,57,54,51,49,47,48,49,53,58,57,55,52,48,46,46,46,47,46,45,43,43,43,44,45,45,46,46,45,50,52,54,59,62,58,53,54,55,53,49,48,46,46,48,51,54,54,52,49,47,46,45,45,45,44,43,42,42,43,43,44,45,46,45,44,49,49,51,56,61,56,51,52,54,53,51,48,46,47,48,50,51,48,43,42,44,45,45,45,44,43,42,42,42,42,42,42,43,43,43,43,48,48,48,54,60,56,50,51,52,52,52,50,47,48,48,49,48,44,38,38,41,43,44,44,44,43,43,43,42,42,41,41,41,41,41,41,47,47,48,53,58,55,51,51,50,50,50,50,48,49,49,48,46,43,39,38,40,41,43,44,45,46,47,46,45,43,40,39,40,40,40,40,47,47,48,52,55,54,53,51,49,49,49,49,50,50,49,47,45,43,41,41,41,42,43,45,47,49,50,49,47,44,41,39,39,39,39,40,47,47,48,50,52,53,54,52,49,49,49,49,50,50,50,48,45,44,43,44,44,45,46,48,50,51,52,51,48,46,43,40,39,39,39,41,47,47,48,48,49,51,55,53,51,50,49,49,50,50,50,49,46,46,45,46,47,48,49,51,52,53,53,52,50,47,44,41,39,39,40,42,47,47,48,48,49,51,54,54,53,51,50,50,50,50,50,49,47,47,47,47,47,48,51,53,53,54,54,53,51,48,45,42,40,39,41,44,47,47,47,48,49,50,52,53,55,53,51,50,50,50,50,50,49,48,48,47,47,48,52,54,55,55,55,54,52,49,47,44,41,40,43,46],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
