###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.67601420477412,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[26,21,17,13,10,8,7,7,7,8,8,8,7,7,8,8,9,8,6,6,6,6,7,8,10,11,11,13,16,18,19,19,19,18,18,18,28,23,17,13,11,10,9,9,8,8,7,7,6,6,8,9,10,10,8,8,7,7,7,8,9,10,11,13,17,19,20,19,18,18,17,17,27,21,16,13,12,12,13,12,11,9,8,7,7,8,10,12,13,14,13,12,10,9,8,8,9,9,11,13,16,18,19,18,17,17,16,16,26,20,16,14,14,16,18,17,16,14,11,10,9,10,12,14,17,18,18,17,16,15,12,10,9,9,10,12,14,16,16,16,15,15,15,14,24,20,17,17,18,21,23,23,22,20,17,15,14,13,14,16,20,22,23,24,24,22,17,13,10,9,8,9,11,12,13,13,12,12,12,12,24,22,21,21,22,24,26,27,27,25,23,21,20,19,19,20,22,25,27,29,30,28,21,16,12,9,8,8,9,10,10,10,10,10,10,10,26,25,25,25,25,26,27,29,29,29,28,27,27,26,26,25,24,25,28,31,33,32,26,20,15,11,9,8,9,9,8,8,8,9,9,9,28,28,28,27,26,26,26,28,29,30,31,31,32,32,32,30,27,27,30,33,37,36,31,25,19,14,12,10,9,9,8,8,8,9,9,9,29,30,30,28,24,24,24,26,28,29,30,32,35,36,36,34,31,30,32,35,40,40,34,28,22,18,15,13,11,10,9,9,9,10,11,11,29,30,30,28,25,23,23,24,26,27,29,31,34,36,37,36,33,32,32,36,41,42,37,31,25,20,18,16,13,12,11,10,10,11,12,13,27,27,27,27,28,26,24,23,23,24,25,28,31,34,35,36,35,34,33,36,40,41,37,33,26,21,19,17,15,14,13,12,13,13,14,15,27,26,25,27,28,26,23,20,19,19,21,24,27,30,32,33,33,33,32,33,37,38,35,31,26,22,20,19,17,16,15,15,15,15,16,16,29,26,24,25,25,23,19,15,13,13,16,19,22,24,26,27,28,28,28,29,32,32,29,27,24,22,21,21,20,20,19,18,18,18,17,17,29,26,24,25,25,23,19,16,13,13,16,18,20,22,23,24,25,25,24,25,27,27,25,23,22,22,22,23,24,24,23,22,22,21,20,19,28,25,25,27,28,27,25,24,25,25,25,23,22,22,23,23,23,22,21,22,24,25,23,22,21,22,24,27,28,28,27,26,25,25,23,23,27,26,26,29,32,31,29,30,33,33,32,29,25,23,23,23,22,21,18,19,22,24,23,22,21,23,26,29,31,32,31,30,29,28,26,26,27,27,28,31,34,32,30,31,34,36,36,33,28,25,24,24,23,21,16,16,22,26,26,25,23,23,27,31,35,36,37,36,34,31,30,30,26,28,30,33,35,34,32,33,36,39,40,37,31,28,27,26,26,22,16,16,24,29,31,30,26,25,27,31,36,39,41,40,37,34,34,35,26,27,28,32,35,35,34,36,40,42,43,39,34,31,32,32,31,28,22,23,30,35,37,36,30,27,27,30,35,39,41,41,38,37,38,41,27,27,28,31,34,35,35,38,43,45,45,42,36,35,36,36,36,33,27,27,34,38,41,40,35,31,29,29,33,37,39,40,38,38,42,46,27,27,28,29,31,31,32,36,42,46,47,44,37,35,37,38,38,35,28,27,33,37,42,43,39,35,33,32,32,33,34,34,34,37,42,48,27,27,27,28,28,28,29,34,41,46,49,46,39,37,39,40,39,36,29,28,31,36,42,45,42,40,37,34,32,30,30,30,31,35,41,48,27,27,27,26,26,26,27,32,41,47,51,50,44,41,42,41,38,35,30,28,31,34,40,43,44,43,41,38,35,32,30,29,30,32,36,42],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
