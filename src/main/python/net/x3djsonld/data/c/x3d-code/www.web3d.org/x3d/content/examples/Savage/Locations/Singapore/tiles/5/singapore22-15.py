###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore22-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[23,20,18,23,28,29,29,30,31,30,28,26,24,23,22,23,24,24,23,20,18,17,17,17,18,17,16,15,16,16,16,16,16,17,17,17,14,23,18,13,19,25,29,32,33,34,31,27,25,23,23,23,23,24,24,24,22,20,19,19,18,18,17,16,16,17,18,17,17,17,17,18,17,14,24,17,12,15,21,27,34,35,36,31,27,25,24,24,24,24,24,24,24,23,22,21,21,20,18,17,17,18,19,20,19,19,18,18,18,17,15,26,20,15,14,15,24,34,36,36,32,29,28,28,27,26,25,24,23,24,25,24,24,25,23,21,20,20,21,22,23,22,21,19,18,18,17,15,28,23,18,16,15,24,35,36,36,34,32,32,33,31,28,26,23,23,24,25,25,26,27,26,23,22,23,24,25,25,25,23,20,18,18,17,16,30,26,23,23,24,30,36,36,36,37,37,37,37,34,31,27,23,22,24,25,27,27,27,26,23,23,25,26,26,26,26,24,21,19,19,18,18,32,29,27,29,31,34,36,37,36,38,41,40,39,36,32,27,23,23,25,26,27,28,27,26,23,23,26,28,28,27,27,25,22,20,20,19,19,33,32,31,32,34,36,37,38,37,38,40,39,37,34,30,27,24,25,27,28,28,27,26,25,24,24,26,28,29,29,28,27,23,21,20,20,19,34,34,34,35,36,37,38,38,38,38,39,37,35,32,29,27,26,27,29,29,28,27,26,25,24,24,26,28,29,30,30,28,25,21,21,20,20,34,34,34,35,36,37,38,38,38,37,37,34,31,30,31,30,29,30,31,30,29,28,27,25,25,25,26,28,29,30,30,29,26,23,21,20,20,34,34,34,36,37,38,39,39,38,37,36,32,27,29,32,33,32,32,32,31,30,29,27,26,26,26,27,28,29,30,31,30,27,24,22,20,20,35,35,35,38,41,41,41,40,39,37,34,31,28,30,34,35,35,34,34,33,31,30,29,29,29,29,29,29,29,30,32,32,29,26,23,21,21,35,35,36,40,43,43,41,40,39,36,32,31,29,33,38,38,37,36,35,34,32,31,30,31,32,32,31,30,30,31,33,34,32,29,25,22,21,38,39,40,43,46,44,41,39,38,35,32,32,32,36,42,42,42,40,36,34,33,32,31,32,33,33,31,31,33,35,36,36,34,32,28,25,24,41,42,44,45,47,44,41,39,38,35,32,33,35,39,45,47,47,43,38,35,33,33,32,33,34,34,32,33,35,37,38,38,36,34,31,29,28,43,44,45,45,44,43,42,40,38,35,33,35,39,43,48,50,50,46,40,37,36,36,36,36,37,37,35,36,37,38,38,38,37,36,34,33,33,44,45,46,44,42,42,43,41,38,35,34,38,41,46,50,52,53,49,42,40,40,40,41,40,40,40,39,38,38,38,37,37,38,38,37,37,38,43,43,42,41,40,42,46,44,42,40,37,41,44,48,53,54,54,50,46,45,48,49,48,46,43,41,39,38,36,36,36,37,37,37,37,37,39,41,40,39,39,38,42,48,47,46,44,41,43,46,50,55,56,55,52,49,51,55,56,54,51,46,42,39,36,35,35,36,36,36,36,36,37,39,38,38,38,39,40,44,49,49,48,46,44,46,48,53,59,59,57,55,53,54,55,54,52,48,43,40,37,35,34,33,34,34,34,35,36,37,38,36,37,37,39,41,46,50,50,50,49,48,49,51,56,63,62,60,58,57,56,54,52,49,45,40,37,35,34,33,32,31,32,32,33,35,36,37,37,37,36,38,42,46,51,52,52,50,49,51,53,58,64,65,62,60,57,55,52,49,46,44,41,40,38,37,35,33,31,29,28,29,30,32,32],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
