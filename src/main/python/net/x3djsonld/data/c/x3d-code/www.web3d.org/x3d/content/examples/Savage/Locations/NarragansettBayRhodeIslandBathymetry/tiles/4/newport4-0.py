###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoLOD(center=(41.331234016012,-71.76921570372225,0.0),range=6150.345,child1Url=['../../tiles/5/newport8-0.x3d'],child2Url=['../../tiles/5/newport8-1.x3d'],child3Url=['../../tiles/5/newport9-0.x3d'],child4Url=['../../tiles/5/newport9-1.x3d'],
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(41.5,-71.5,0),geoSystem=['GDC']),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/4/newport4-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(41.30704408055511,-71.7911995308,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=55,xSpacing=8.142158E-4,zDimension=52,zSpacing=9.486249E-4,height=[-17,-18,-17,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-17,-17,-18,-18,-18,-18,-18,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-17,-17,-18,-18,-19,-19,-19,-20,-20,-20,-21,-21,-22,-22,-22,-22,-22,-22,-22,-17,-17,-17,-17,-18,-18,-18,-18,-18,-18,-18,-18,-18,-17,-16,-17,-18,-18,-18,-18,-17,-17,-16,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-18,-19,-19,-19,-20,-20,-20,-21,-21,-21,-21,-21,-21,-21,-17,-17,-17,-17,-17,-17,-18,-18,-18,-17,-17,-17,-16,-16,-16,-17,-17,-18,-18,-18,-17,-16,-16,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-18,-19,-19,-19,-20,-20,-20,-21,-21,-20,-21,-21,-21,-16,-16,-17,-17,-17,-17,-17,-17,-17,-17,-16,-16,-16,-16,-17,-17,-17,-17,-17,-16,-16,-16,-16,-17,-16,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-18,-18,-19,-19,-20,-20,-20,-20,-20,-20,-20,-21,-21,-15,-15,-15,-15,-15,-15,-16,-16,-16,-15,-15,-15,-16,-16,-16,-16,-16,-16,-15,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-17,-17,-16,-16,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-18,-19,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-14,-14,-14,-14,-14,-14,-14,-15,-15,-15,-15,-15,-15,-16,-16,-16,-15,-14,-15,-15,-15,-15,-15,-16,-15,-16,-16,-16,-16,-16,-16,-16,-16,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-18,-18,-19,-20,-20,-20,-20,-20,-19,-20,-20,-20,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-15,-15,-15,-16,-16,-15,-15,-14,-14,-15,-15,-15,-15,-15,-15,-15,-15,-16,-16,-16,-16,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-18,-19,-19,-19,-19,-19,-20,-20,-20,-20,-20,-20,-12,-13,-13,-13,-13,-13,-13,-13,-13,-13,-14,-15,-15,-15,-15,-14,-14,-14,-14,-14,-15,-15,-15,-15,-15,-15,-16,-16,-16,-16,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-18,-19,-19,-19,-20,-20,-20,-19,-19,-20,-20,-10,-11,-12,-12,-12,-12,-12,-12,-12,-12,-13,-12,-13,-13,-13,-13,-13,-13,-13,-13,-14,-14,-14,-15,-15,-15,-15,-16,-16,-16,-16,-16,-16,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-9,-10,-11,-11,-11,-11,-10,-10,-10,-9,-9,-10,-12,-11,-10,-11,-11,-12,-12,-12,-13,-13,-14,-14,-14,-14,-15,-15,-15,-16,-16,-16,-16,-16,-16,-16,-16,-17,-17,-16,-17,-17,-17,-17,-17,-18,-18,-18,-18,-19,-19,-18,-18,-18,-18,-7,-9,-9,-9,-10,-10,-10,-9,-7,-7,-7,-8,-8,-9,-10,-11,-11,-10,-10,-11,-12,-12,-13,-13,-13,-14,-14,-14,-15,-15,-14,-15,-14,-15,-15,-15,-15,-16,-16,-16,-16,-16,-16,-16,-16,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-7,-5,-6,-6,-8,-8,-7,-6,-8,-7,-7,-7,-7,-8,-10,-10,-11,-11,-11,-12,-12,-12,-13,-13,-13,-13,-13,-14,-13,-13,-14,-13,-14,-13,-13,-13,-15,-15,-15,-15,-15,-15,-15,-15,-15,-16,-16,-17,-17,-17,-16,-16,-16,-17,-17,-8,-8,-8,-7,-6,-6,-6,-5,-6,-6,-7,-6,-8,-9,-9,-10,-11,-11,-11,-11,-11,-12,-12,-12,-12,-12,-11,-12,-11,-10,-13,-13,-13,-14,-14,-15,-15,-15,-15,-15,-15,-15,-15,-14,-15,-15,-15,-16,-16,-15,-17,-16,-16,-15,-15,-8,-8,-8,-7,-7,-7,-6,-6,-3,-3,-5,-6,-8,-9,-9,-10,-10,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-10,-12,-12,-12,-13,-13,-13,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-13,-15,-15,-15,-15,-15,-14,-14,-8,-8,-8,-8,-7,-7,-7,-6,-5,-3,-5,-6,-8,-9,-9,-10,-10,-10,-10,-10,-9,-9,-10,-10,-10,-10,-11,-11,-11,-11,-12,-13,-13,-13,-13,-13,-13,-12,-13,-13,-13,-13,-13,-12,-13,-12,-12,-12,-13,-13,-13,-13,-14,-13,-13,-8,-8,-8,-7,-7,-6,-6,-7,-6,-5,-6,-7,-8,-9,-9,-9,-10,-9,-10,-9,-9,-8,-9,-9,-10,-10,-10,-9,-10,-11,-11,-13,-12,-12,-12,-12,-12,-12,-12,-12,-12,-11,-11,-11,-11,-11,-10,-10,-11,-11,-12,-12,-12,-11,-11,-7,-6,-7,-6,-5,-6,-6,-7,-8,-8,-7,-7,-8,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-10,-10,-10,-9,-10,-10,-11,-11,-11,-11,-11,-11,-10,-10,-10,-10,-10,-10,-10,-9,-9,-9,-8,-8,-9,-9,-10,-11,-10,-10,-10,-4,-5,-5,-5,-5,-6,-7,-6,-7,-7,-7,-8,-8,-8,-8,-8,-8,-8,-9,-9,-9,-9,-9,-9,-9,-9,-10,-10,-10,-10,-10,-8,-9,-9,-9,-8,-8,-8,-8,-8,-8,-7,-7,-7,-7,-7,-6,-6,-7,-7,-7,-8,-8,-8,-8,-1,-2,-2,-3,-4,-5,-5,-6,-6,-7,-7,-7,-7,-7,-6,-7,-7,-7,-8,-8,-8,-8,-8,-8,-8,-8,-8,-9,-8,-8,-8,-7,-7,-7,-7,-7,-7,-7,-7,-6,-6,-5,-14,-5,-5,-3,-4,-4,-5,-4,-5,-6,-6,-6,-6,0,0,0,-1,-1,-2,-2,-3,-3,-4,-4,-4,-5,-5,-5,-5,-6,-6,-7,-7,-7,-7,-7,-7,-7,-8,-8,-7,-7,-6,-5,-6,-7,-6,-6,-6,-5,-5,-5,-5,-4,-4,-3,-2,-2,-2,-2,-2,-3,-2,-4,-4,-4,-6,-6,0,0,0,0,0,0,-1,-1,-1,-1,-1,-2,-2,-2,-3,-4,-4,-4,-5,-5,-5,-5,-5,-5,-5,-6,-6,-6,-6,-6,-6,-5,-5,-5,-4,-4,-4,-4,-3,-3,-3,-2,-1,-1,0,-1,-1,0,0,0,-1,-2,-3,-4,-4,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-2,-2,-2,-3,-3,-3,-3,-3,-4,-4,-4,-4,-4,-3,-3,-3,-1,-1,-2,-2,-2,-2,-1,-1,-1,0,0,0,0,0,0,0,-1,-2,-2,-2,-2,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
