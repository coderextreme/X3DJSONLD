###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,157.4583433915838,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5358,-5231,-5327,-5313,-2224,-3988,-3727,-5203,-5143,-4742,-4556,-4307,-1815,-4275,-5116,-4990,-5300,-5436,-5345,-4850,-5771,-6165,-5672,-5470,-5533,-5357,-3513,-3445,-1637,-4319,-4636,-1894,-3919,-4276,-2852,-3586,-4756,-5154,-5343,-5426,-5236,-5145,-4436,-5114,-5652,-5526,-5802,-5510,-2533,-4109,-4096,-4620,-4879,-4225,-3364,-4613,-4626,-4065,-5036,-5156,-5401,-5500,-5605,-5461,-5158,-6170,-5846,-5910,-5580,-5385,-5418,-4026,-4907,-3467,-4614,-3896,-2037,-4131,-3744,-3944,-4794,-5221,-5584,-5637,-5359,-5529,-5794,-5791,-5989,-5779,-5691,-5373,-5957,-1972,-4909,-4982,-2972,-3363,-1645,-4261,-4811,-5031,-5028,-5078,-5670,-5617,-5739,-5714,-5771,-6043,-3252,-5974,-4735,-4688,-5813,-5365,-5302,-5174,-4367,-3974,-4450,-4617,-4755,-3792,-5050,-5544,-5654,-5574,-5728,-5673,-5791,-5745,-5582,-6101,-5640,-5462,-5745,-5387,-4608,-5323,-5072,-4805,-5217,-4604,-5049,-5154,-5285,-5578,-5730,-5680,-4788,-5457,-5755,-5813,-6251,-6099,-5388,-5589,-5535,-1817,-2385,-4825,-5245,-5093,-5103,-5058,-5394,-5433,-5356,-5532,-5723,-5692,-4653,-5529,-5811,-5100,-6048,-5471,-5655,-5545,-5567,-5183,-5428,-1955,-5151,-5269,-4044,-4605,-5102,-5504,-5641,-5763,-5514,-5626,-3878,-5298,-5789,-5812,-3304,-5826,-5674,-5476,-5374,-5337,-5598,-4917,-5198,-3885,-4750,-5256,-4213,-5614,-5695,-5457,-5479,-5609,-2282,-4196,-5036,-5405,-6175,-5835,-5825,-5599,-1176,-5351,-5552,-4880,-5207,-3853,-5691,-5387,-3547,-5683,-5509,-5596,-5580,-3877,-4156,-4257,-4779,-5302,-6123,-5985,-5008,-5238,-4269,-4666,-3709,-4900,-5113,-5270,-5228,-5634,-5320,-5647,-5539,-4118,-5612,-5023,-4356,-4127,-4410,-5138,-6060,-5897,-5518,-5604,-5211,-5470,-4776,-5327,-5355,-5468,-5404,-5468,-5576,-5662,-5628,-3555,-5521,-5174,-3709,-4008,-4570,-5117,-6023,-5929,-5891,-5791,-5696,-5521,-4947,-5276,-5360,-5293,-4825,-5620,-5483,-5572,-5607,-5000,-5407,-4709,-4111,-3997,-4295,-4989,-5854,-5836,-5853,-5708,-5639,-5603,-4595,-5355,-5496,-5776,-4206,-5454,-5499,-5365,-4515,-5241,-5290,-4095,-4280,-4102,-4217,-4848,-5770,-5748,-5771,-5705,-5626,-5355,-2477,-5240,-5408,-776,-5190,-5557,-5430,-5452,-4391,-4288,-5000,-3810,-4319,-4352,-4291,-4957,-5768,-5783,-5883,-5633,-5630,-5492,-5436,-5063,-5568,-5341,-5332,-5093,-5259,-4875,-3357,-2471,-4290,-3628,-3945,-4355,-4170,-3190,-5686,-5715,-5754,-5679,-5519,-5163,-5370,-5220,-4710,-3507,-4873,-5269,-5377,-4127,-1399,-3618,-3467,-3296,-4267,-4246,-3651,-4502,-5657,-5988,-5809,-5599,-5583,-5243,-5312,-5158,-3899,-5450,-5038,-5083,-5267,-3623,-2046,-4088,-3992,-3698,-3778,-2702,-4588,-4809,-5577,-5624,-4729,-4113,-5243,-5087,-5168,-5294,-1458,-5089,-4325,-5116,-5304,-4384,-2878,-5000,-4117,-4062,-3895,-4115,-4761,-4726,-5188,-2649,-5828,-5600,-4264,-4850,-4473,-5620,-4921,-5445,-5156,-5328,-5419,-4608,-5477,-4895,-3394,-4086,-3189,-3693,-4734,-4512,-3483,-5045,-5394,-5658,-2107,-5178,-4388,-5163,-5484,-5355,-5497,-5392,-5501,-5574,-5636,-5328,-3773,-4042,-2445,-3241,-4804,-4657,-3027,-4045,-4862,-5545,-4798,-5218,-3903,-4989,-5513,-5297,-5651,-5394,-5538,-5789,-5504,-5021,-3830,-3571,-3301,-3104,-3663,-2936,-2050,-2461,-4476,-5603,-4968,-5109,-4623,-5206,-5603,-4876,-5679,-5420,-5554,-5756,-5550,-4888,-3942,-3040,-3543,-2966,-3428,-2209],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
