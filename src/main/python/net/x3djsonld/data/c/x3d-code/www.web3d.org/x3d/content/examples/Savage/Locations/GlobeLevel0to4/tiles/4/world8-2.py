###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4471,-4334,-4358,-4519,-4422,-4559,-4361,-4531,-4632,-4612,-4636,-4511,-4440,-4354,-4234,-4178,-4211,-4217,-4145,-4275,-4220,-4109,-4475,-4421,-4258,-4309,-4458,-4531,-4573,-4428,-4656,-4650,-4692,-4538,-4439,-4365,-4214,-4133,-4147,-4215,-4175,-4177,-4192,-4076,-4128,-4166,-4396,-4333,-4409,-4446,-4620,-4628,-4688,-4588,-4605,-4549,-4526,-4297,-4145,-4098,-4125,-4094,-4128,-4023,-4108,-4062,-4336,-4269,-4368,-4489,-4461,-4493,-4470,-4528,-4569,-4680,-4569,-4455,-4435,-4298,-4184,-4042,-4134,-4094,-3987,-3975,-4056,-3972,-4292,-4216,-4307,-4384,-4391,-4435,-4377,-4550,-4520,-4280,-4368,-4302,-4413,-4271,-4142,-4081,-4015,-3960,-3947,-3955,-3975,-3942,-4405,-4401,-4379,-4416,-4346,-4579,-4541,-4435,-4529,-4567,-4573,-4558,-4490,-4825,-4111,-4081,-3995,-3945,-3896,-3964,-3895,-3930,-4520,-4482,-4411,-4290,-4376,-4469,-4588,-4280,-4473,-4703,-4681,-4605,-4610,-4394,-4425,-4243,-4092,-3992,-3855,-3800,-3831,-3842,-4361,-4170,-4307,-4329,-4352,-4467,-4492,-4435,-4549,-4612,-4671,-4659,-4565,-4394,-4311,-4271,-4135,-4015,-3941,-3828,-3809,-3817,-4360,-4203,-4375,-4377,-4421,-4529,-4432,-4427,-4519,-4538,-4561,-4582,-4483,-4420,-4214,-4211,-4232,-4077,-4001,-3841,-3826,-3843,-4311,-4181,-4344,-4319,-4469,-4501,-4463,-4449,-4584,-4528,-4555,-4602,-4358,-4283,-4289,-4196,-4145,-4097,-4016,-3855,-3817,-3867,-4363,-4370,-4326,-4449,-4442,-4482,-4523,-4469,-4497,-4440,-4562,-4511,-4391,-4288,-4229,-4184,-4141,-4138,-4017,-3917,-3851,-3902,-4436,-4509,-4425,-4340,-4544,-4442,-4435,-4438,-4384,-4387,-4542,-4355,-4456,-4299,-4083,-4242,-4147,-4166,-4204,-4023,-3914,-3983,-4572,-4546,-4345,-4314,-4493,-4223,-4487,-4328,-4357,-4468,-4391,-4193,-4352,-4355,-4187,-4307,-4313,-4311,-4137,-4104,-3941,-3932,-4589,-4542,-4392,-4321,-4038,-4303,-4485,-4290,-4357,-4493,-4144,-4166,-4119,-4175,-4114,-4551,-4288,-4194,-4272,-4001,-3992,-3979,-4672,-4582,-4300,-4304,-4069,-3740,-4346,-4491,-4334,-4476,-4290,-4270,-4184,-4051,-4095,-4131,-4193,-4182,-4168,-4059,-4034,-4027,-4610,-4422,-4546,-4244,-4229,-4198,-4399,-4487,-4391,-4293,-4353,-4330,-4272,-4106,-3858,-3889,-4194,-4211,-4190,-4043,-4077,-3963,-4798,-4403,-4361,-4296,-4449,-4400,-4397,-4573,-4384,-4156,-4422,-4463,-4275,-4137,-4399,-4015,-4077,-4301,-4077,-4105,-4015,-3866,-4738,-4681,-4660,-4583,-4628,-4478,-4555,-4492,-4235,-4560,-4256,-4334,-4291,-4167,-4120,-4000,-3923,-4099,-4021,-4085,-3884,-3877,-4656,-4669,-4851,-4837,-4997,-4561,-4392,-4562,-4533,-4456,-4288,-4339,-4422,-4303,-4088,-4068,-3882,-4059,-3949,-4059,-3948,-3936,-4721,-4837,-4940,-4929,-5036,-4728,-4662,-4491,-4410,-4412,-4417,-4379,-4448,-4145,-4087,-4109,-3753,-4096,-3889,-4121,-3630,-4024,-4697,-4811,-4838,-4938,-4903,-4790,-4695,-4606,-4516,-4515,-4527,-4454,-4427,-4208,-4447,-4105,-4057,-3892,-4053,-4012,-3759,-3976,-4820,-4932,-4874,-4979,-4900,-4769,-4706,-4603,-4603,-4578,-4501,-4489,-4441,-4313,-4245,-4295,-4055,-3756,-3983,-3992,-3958,-3933,-4950,-4888,-4972,-5013,-4899,-4762,-4609,-4626,-4623,-4626,-4591,-4531,-4423,-4366,-4418,-4250,-4251,-4076,-4174,-4078,-3619,-3943,-4916,-4896,-5002,-4981,-4887,-4751,-4625,-4639,-4630,-4637,-4601,-4520,-4426,-4394,-4311,-4406,-4234,-4120,-4371,-3849,-3601,-3955],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
