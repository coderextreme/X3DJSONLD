###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[28,28,27,22,16,13,12,10,11,14,19,20,17,14,11,10,11,11,11,11,13,14,14,13,13,12,12,12,14,16,19,22,22,22,24,26,33,24,25,26,21,16,13,11,11,11,15,21,20,16,13,10,9,9,10,11,12,13,13,14,14,13,13,13,13,15,17,18,20,21,22,25,29,36,19,20,22,19,15,13,11,11,12,15,19,19,15,11,8,7,8,10,12,13,13,13,13,13,14,14,14,14,16,18,18,18,20,23,26,30,37,11,13,16,15,14,12,11,11,12,14,15,15,13,9,6,6,7,10,13,14,14,13,12,12,14,14,15,15,17,18,17,17,21,25,27,30,35,8,10,13,13,13,12,12,12,13,13,12,12,12,9,6,5,8,11,14,16,15,14,13,12,13,14,15,16,18,19,18,18,23,27,29,31,34,12,12,13,13,13,13,13,14,14,13,11,11,10,9,7,7,10,13,16,18,17,16,14,13,13,13,15,16,19,20,20,20,25,29,32,35,36,16,15,15,14,14,14,14,15,15,13,12,11,10,9,9,10,12,15,17,19,18,17,16,14,13,13,15,17,19,21,21,21,26,30,33,36,36,20,18,16,15,14,13,13,14,14,13,13,13,13,13,13,14,15,17,18,18,18,17,17,16,15,15,16,17,18,19,20,21,25,29,31,33,34,20,18,16,14,13,12,13,13,14,14,14,14,15,15,16,17,18,18,19,19,18,18,18,18,17,17,17,17,17,17,18,20,24,27,29,30,33,17,15,14,12,11,11,12,13,14,15,15,15,14,15,16,18,19,19,20,20,20,19,18,18,18,18,17,17,17,17,18,19,23,26,28,30,34,16,13,12,10,9,10,12,13,15,17,17,16,14,15,16,18,19,19,19,20,21,21,19,19,19,19,20,20,19,19,19,20,22,25,28,31,36,18,14,11,9,8,10,12,14,17,19,18,17,15,15,17,18,18,18,18,19,21,21,21,21,21,23,26,27,25,24,23,22,23,24,28,32,38,21,15,10,9,8,10,12,15,19,19,19,17,16,16,18,19,18,18,18,19,21,22,23,24,25,28,33,36,33,29,28,26,25,25,28,32,37,21,15,10,8,8,10,12,15,18,18,17,15,15,16,17,18,18,18,18,19,21,22,24,26,29,33,40,44,40,35,33,31,29,28,29,30,34,20,15,10,9,9,10,12,15,16,16,15,15,15,16,18,19,21,21,20,20,21,22,25,28,32,37,44,48,43,39,37,36,34,32,31,30,32,17,13,10,10,11,12,13,15,16,16,16,16,16,18,21,24,28,28,24,22,21,21,24,27,33,38,43,46,41,38,38,39,39,38,35,33,34,13,11,10,11,13,13,14,15,16,17,17,18,18,21,25,30,35,35,30,26,22,21,23,26,32,37,40,41,37,33,36,38,40,41,39,37,38,9,9,10,12,14,14,14,15,17,18,19,20,20,23,28,33,39,39,35,30,23,21,23,26,29,33,35,35,31,27,30,33,35,37,39,40,41,8,9,9,11,13,14,15,15,17,18,20,22,22,25,30,34,39,40,37,32,25,22,24,26,27,29,31,31,26,22,24,26,28,30,37,42,44,10,9,8,10,13,14,15,16,17,19,22,24,25,27,29,31,34,34,34,31,27,26,28,29,29,29,31,31,27,23,23,23,25,27,36,44,46,14,11,8,10,13,14,16,17,17,20,23,25,27,27,26,26,26,26,28,28,28,29,31,32,31,32,33,33,30,27,25,23,24,27,36,44,46,16,13,10,12,15,16,18,18,18,19,22,24,25,24,22,21,20,20,22,24,26,28,31,33,33,33,34,34,33,31,29,27,27,28,34,40,44],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
