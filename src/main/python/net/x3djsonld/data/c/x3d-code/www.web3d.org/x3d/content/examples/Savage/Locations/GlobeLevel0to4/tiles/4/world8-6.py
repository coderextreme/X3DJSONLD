###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1,-17,-242,-3170,-3315,-3737,-3613,-4149,-4435,-4435,-4306,-4487,-4276,-4694,-4562,-3915,-4215,-4156,-4709,-4571,-4851,-4796,-23,-3,-2231,-2936,-3598,-3849,-3638,-4433,-4621,-4453,-4362,-4489,-4613,-4443,-4382,-3840,-3528,-3580,-3786,-2290,-3191,-3281,-48,-23,-3115,-3688,-3867,-3972,-4314,-4370,-4453,-4504,-4510,-4351,-4439,-4296,-3985,-4104,-3819,-3758,-3407,-2918,-3408,-4168,-69,-1360,-3723,-3844,-3047,-4112,-4494,-4480,-4480,-4535,-4451,-4580,-4270,-3764,-4380,-3950,-3815,-3356,-3520,-3974,-3560,-3766,-985,-3007,-4141,-4007,-4070,-4312,-3689,-4578,-4519,-4280,-4339,-4355,-4335,-3377,-4095,-3232,-3339,-3108,-3810,-3968,-3685,-3662,-3213,-4111,-4269,-4369,-4291,-4321,-4441,-4353,-4128,-3912,-3809,-3716,-3244,-3135,-2835,-3540,-3769,-4009,-3302,-3773,-3693,-4110,-3388,-4001,-4328,-4351,-4402,-4435,-4339,-4270,-4312,-4347,-3722,-3619,-3369,-3167,-2674,-3212,-3253,-3589,-3495,-3765,-3739,-4050,-3643,-4084,-4272,-4372,-4401,-4447,-4410,-4264,-4206,-4217,-3972,-3743,-3551,-2974,-2469,-3480,-3451,-3651,-3814,-3786,-4246,-4391,-3749,-4137,-4264,-4365,-4378,-4430,-4457,-4379,-4186,-4319,-3912,-3352,-3192,-2760,-3197,-3735,-3588,-3600,-4041,-4146,-4363,-4531,-3701,-4085,-4286,-4363,-4171,-4265,-4463,-4396,-4254,-3986,-3751,-3605,-3401,-3375,-3330,-3655,-3642,-4042,-4139,-4181,-4817,-4364,-3831,-4109,-3919,-3373,-3812,-4325,-4362,-4198,-4465,-3943,-3902,-3376,-3138,-2618,-3918,-3687,-3847,-4359,-4402,-4311,-4500,-4278,-3863,-4136,-3141,-3892,-4080,-4364,-4573,-4168,-3986,-3753,-3684,-3415,-2990,-3196,-3548,-4188,-3968,-4468,-4601,-4385,-4437,-4181,-3860,-4168,-3691,-4491,-4545,-4570,-4683,-4292,-4211,-3832,-3687,-3467,-2730,-3262,-3833,-3573,-4059,-4089,-4216,-4205,-4436,-4219,-4043,-4008,-4149,-4707,-4659,-4672,-4633,-4542,-4090,-4024,-3593,-3119,-3090,-3488,-3876,-3868,-3995,-4247,-4147,-4066,-4406,-4226,-4013,-3670,-4337,-4751,-4701,-4723,-4633,-4453,-4326,-3983,-3819,-3483,-3218,-3594,-4012,-4112,-4012,-3976,-3677,-3716,-4277,-4267,-4197,-4284,-4630,-4814,-4690,-4735,-4682,-4519,-4479,-4077,-3912,-3511,-3037,-3713,-4458,-4229,-4189,-4311,-4366,-1749,-4149,-3851,-4268,-4556,-4532,-4624,-4646,-4452,-4744,-4442,-4405,-4272,-3157,-2971,-3591,-3663,-4126,-4123,-4073,-4470,-4429,-4400,-3428,-3592,-4346,-4589,-4788,-4672,-4658,-4485,-4315,-4794,-4003,-4188,-4435,-3962,-3778,-4526,-4217,-4364,-4285,-4351,-4366,-4296,-4042,-3981,-4473,-4643,-4640,-4778,-4310,-4220,-3705,-4179,-4128,-3787,-3506,-3759,-4701,-4588,-4499,-4420,-4641,-4533,-5129,-4940,-4438,-4362,-4262,-4532,-4511,-4836,-3344,-4300,-4107,-4110,-4311,-4677,-3899,-4678,-4519,-4720,-4666,-4568,-4849,-5094,-5110,-4870,-4841,-4654,-4698,-4760,-4612,-4226,-3465,-2828,-3301,-3860,-4315,-4925,-4521,-5018,-4671,-5137,-4722,-4954,-5314,-5234,-4953,-5156,-4927,-4753,-4783,-4503,-4994,-4001,-2653,-3072,-3992,-4182,-4289,-4592,-4593,-4937,-4917,-4932,-5068,-4936,-5084,-5322,-5183,-4965,-4996,-4797,-4721,-4812,-4209,-4228,-2879,-2717,-3429,-4195,-4190,-4640,-5225,-5404,-5225,-5416,-5557,-5339,-5211,-5307,-5065,-5060,-5087,-4603,-4709,-4823,-4290,-4440,-2763,-3101,-3697,-4150,-4458,-4861,-4867,-4816,-5062,-5276,-5287,-5511,-5544,-5460,-5370,-5297,-5139,-4988],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
