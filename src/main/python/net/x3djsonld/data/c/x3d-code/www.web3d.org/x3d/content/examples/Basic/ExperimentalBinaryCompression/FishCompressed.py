###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  head=head(
    children=[
    meta(content='FishCompressed.x3d',name='title'),
    meta(content='Fish example with IndexedFaceSet compression.',name='description'),
    meta(content='Martin Isenburg',name='creator'),
    meta(content='X3D-Edit VRML importer',name='translator'),
    meta(content='Don Brutzman',name='translator'),
    meta(content='26-Sep-2002',name='created'),
    meta(content='28 April 2003',name='translated'),
    meta(content='20 October 2019',name='modified'),
    meta(content='http://www.cs.unc.edu/~isenburg/ac/models',name='reference'),
    meta(content='http://www.cs.unc.edu/~isenburg/research/pmc',name='reference'),
    meta(content='http://www.cs.unc.edu/~isenburg/pmc/pmc.html',name='reference'),
    meta(content="Martin Isenburg, Jack Snoeyink Binary Compression Rates for ASCII Formats, accepted for Web3D'03, March 2003",name='reference'),
    meta(content='isenburg/is-bcraf-03.pdf',name='reference'),
    meta(content='http://www.cs.unc.edu/~isenburg/research/papers/is-bcraf-03.pdf',name='reference'),
    meta(content="Martin Isenburg, Jack Snoeyink, Coding with ASCII: compact, yet text-based 3D content, Proceedings of the 1st International Symposium on 3D Data Processing, Visualization and Transmission'02 (Invited Paper), pages 609 - 616, June 2002.",name='reference'),
    meta(content='isenburg/is-cwa-02.pdf',name='reference'),
    meta(content='http://www.cs.unc.edu/~isenburg/papers/is-cwa-02.pdf',name='reference'),
    meta(content="Martin Isenburg, Jack Snoeyink Coding Polygon Meshes as Compressable ASCII, Proceedings of Web3D Symposium'02 (Best Paper), pages 1 - 10, February 2002",name='reference'),
    meta(content='isenburg/is-cpmca-02.pdf',name='reference'),
    meta(content='http://www.cs.unc.edu/~isenburg/papers/is-cpmca-02.pdf',name='reference'),
    meta(content='X3D VRML binary compression',name='subject'),
    meta(content='https://www.web3d.org/x3d/content/examples/Basic/ExperimentalBinaryCompression/FishCompressed.x3d',name='identifier'),
    meta(content='X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit',name='generator'),
    meta(content='Vrml97ToX3dNist, http://ovrt.nist.gov/v2_x3d.html',name='generator'),
    meta(content='../license.html',name='license')]),
  Scene=Scene(
    children=[
    WorldInfo(title='FishCompressed.x3d'),
    ExternProtoDeclare(appinfo='An ASCII-compressed IndexedFaceSet',name='CompressedIndexedFaceSet',url=["CodedCompressedPrototypes.x3d#CompressedIndexedFaceSet","https://www.web3d.org/x3d/content/examples/Basic/ExperimentalBinaryCompression/CodedCompressedPrototypes.x3d#CompressedIndexedFaceSet","CodedCompressedPrototypes.wrl#CompressedIndexedFaceSet","https://www.web3d.org/x3d/content/examples/Basic/ExperimentalBinaryCompression/CodedCompressedPrototypes.wrl#CompressedIndexedFaceSet"],
      field=[
      field(accessType='initializeOnly',appinfo='ASCII-compressed coordIndex and texCoordIndex values',name='code',type='SFString'),
      field(accessType='initializeOnly',appinfo='bounding box of texture coordinates (always 4 values minU minV maxU maxV)',name='box_tex',type='MFFloat'),
      field(accessType='initializeOnly',appinfo='number of quantization bits for texture coordinates',name='bits_tex',type='SFInt32'),
      field(accessType='initializeOnly',appinfo='bounding box of coordinates (always 6 values minX minY minZ maxX maxY maxZ)',name='box',type='MFFloat'),
      field(accessType='initializeOnly',appinfo='number of quantization bits for coordinates',name='bits',type='SFInt32')]),
    #  ==================== 
    Viewpoint(description='1M view',position=(0,0,1)),
    Background(groundColor=[(0.05,0.1,0.3)],skyColor=[(0.05,0.1,0.3)]),
    Transform(rotation=(0,1,0,1.57),scale=(0.025,0.025,0.025),
      children=[
      Shape(
        appearance=Appearance(
          material=Material(diffuseColor=(1,1,1)),
          #  modulateTextureWithDiffuse=true by retaining Material and diffuseColor 
          texture=ImageTexture(url=["fish.jpg","https://www.web3d.org/x3d/content/examples/Basic/ExperimentalBinaryCompression/fish.jpg"])),
        geometry=ProtoInstance(name='CompressedIndexedFaceSet',
          fieldValue=[
          fieldValue(name='code',value=''),
          fieldValue(name='box_tex',value=[.0146,.0749,.9896,.9834]),
          fieldValue(name='bits_tex',value=10),
          fieldValue(name='box',value=[-1.9725,-7.6861,-10,1.9725,7.6861,10]),
          fieldValue(name='bits',value=12)]))])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful for FishCompressed.py")
