###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_16',geoSystem=['GDC'],position=(-56.291665660871615,112.4583420504793,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-56.291665660871615,112.4583420504793,0.0),range=4495500.0,child1Url=['../../tiles/4/world2-12.x3d'],child2Url=['../../tiles/4/world2-13.x3d'],child3Url=['../../tiles/4/world3-12.x3d'],child4Url=['../../tiles/4/world3-13.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world1-6.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[1668,1912,2018,2053,1919,1917,2088,2151,2057,1826,1578,1385,1352,1312,1579,1826,1929,1765,1775,1962,2189,800,1227,1087,1315,1189,1372,1626,1649,1142,669,677,44,120,5,44,701,1104,499,714,1280,1388,-283,-608,-407,7,-293,2,715,-194,-708,-648,621,-2,-1002,-876,-958,-599,-12,-856,-494,-40,-1,-2873,-1856,-971,-3,-450,-123,-336,-828,-1642,-2896,-2173,-1579,-1613,-2794,-2704,-2670,-2586,-1907,-343,-228,-393,-3690,-3510,-2941,-2596,-1868,-1593,-2389,-3536,-3271,-3555,-2669,-2749,-2553,-3357,-3482,-3462,-3854,-3868,-3607,-3221,-3539,-3852,-3804,-3346,-3125,-3126,-3209,-3781,-4007,-3824,-3857,-3960,-3864,-3666,-3830,-3869,-4100,-4189,-4228,-4362,-4412,-4422,-3969,-4185,-4179,-4220,-4457,-4601,-4446,-4422,-4407,-4110,-4273,-4252,-4262,-4150,-4257,-4320,-4336,-4416,-4499,-4485,-4409,-4288,-4230,-4452,-4408,-4439,-4610,-4446,-4328,-4320,-4319,-4266,-4453,-4436,-4328,-4371,-4466,-4503,-4504,-4637,-4601,-4609,-4576,-4517,-4352,-4513,-4503,-4288,-4534,-4364,-4408,-4401,-4480,-4492,-4619,-4548,-4507,-4552,-4628,-4646,-4710,-4709,-4623,-4750,-4548,-4425,-4162,-4263,-4260,-4487,-4466,-4430,-4457,-4621,-4512,-4719,-4746,-4632,-4621,-4612,-4669,-4744,-4660,-4715,-4539,-4316,-4153,-4093,-4422,-4020,-4288,-4331,-4279,-4325,-4472,-4559,-4586,-4595,-4709,-4833,-4656,-4702,-4691,-4588,-4462,-4106,-4027,-4243,-4205,-4216,-4022,-4262,-4315,-4287,-4148,-4456,-4454,-4392,-4429,-4690,-4819,-4730,-4756,-4440,-4353,-4161,-4508,-4347,-4278,-4052,-3948,-4013,-3968,-4080,-4222,-3899,-4091,-4377,-4580,-4278,-4753,-4621,-4610,-4490,-4426,-4090,-4201,-4322,-4276,-4180,-3770,-3974,-3762,-4184,-3794,-3814,-3770,-3880,-4175,-4285,-4247,-4183,-4417,-4585,-4527,-4181,-4014,-3909,-4239,-4245,-4060,-3875,-3967,-3687,-3882,-3609,-3765,-3678,-3777,-3922,-3987,-4328,-4558,-4526,-4468,-4153,-3840,-3552,-3573,-4112,-4164,-3965,-3816,-3824,-3633,-3448,-3356,-3740,-3470,-3672,-3734,-3724,-3918,-4339,-4526,-3989,-3821,-3803,-3489,-3530,-3947,-4036,-3849,-3686,-3627,-3702,-3458,-3425,-3256,-3356,-3743,-3474,-3832,-3435,-4005,-4037,-4302,-3551,-3352,-3163,-2980,-4032,-3838,-3617,-3532,-3440,-3417,-3354,-3282,-3509,-3190,-3217,-2829,-3907,-3547,-3445,-3927,-3718,-3450,-3586,-3534,-3310,-3820,-3809,-3403,-3301,-3028,-3257,-3223,-3699,-3148,-3366,-3698,-3671,-3824,-3707,-4316,-4260,-4308,-3452,-3915,-3725,-3608,-3599,-3770,-3516,-3008,-2937,-3005,-3087,-3264,-3280,-3372,-3811,-3845,-3776,-3875,-4158,-4093,-3859,-4319,-4106,-4051,-3945,-3554,-3409,-3410,-2351,-3078,-3092,-3578,-3544,-3677,-3805,-3926,-4003,-3948,-4077,-4330,-4254,-4173,-4236,-4279,-4332,-4204,-3478,-3450,-3286,-2413,-3134,-3189,-3400,-3616,-3663,-3995,-3840,-4044,-4010,-4001,-4467,-4360,-4327,-4289,-4355,-4348,-4217],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
