###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.589836,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[16,14,12,11,10,10,10,12,13,14,14,15,15,16,15,14,14,15,16,18,18,17,17,19,21,24,28,34,42,51,57,53,46,35,26,22,16,15,14,13,12,10,10,11,12,14,15,15,16,17,16,14,14,15,17,19,18,17,17,19,21,24,29,33,41,50,56,54,48,37,27,24,14,13,13,14,12,11,11,11,12,14,15,16,16,17,16,14,14,16,18,20,19,17,17,18,20,24,28,33,39,47,52,51,46,36,28,25,13,13,13,14,13,13,12,10,12,14,15,18,18,18,16,15,15,16,18,20,20,17,17,17,19,22,26,30,36,42,46,45,42,34,27,24,12,13,14,15,15,15,12,9,10,12,16,20,21,21,19,17,16,17,19,21,21,18,17,17,18,20,23,27,31,35,37,36,34,29,24,23,12,13,14,15,16,17,14,10,10,11,15,20,22,22,22,20,20,20,21,22,22,20,19,18,18,19,21,24,28,28,29,29,28,25,22,23,12,13,14,15,16,16,15,14,12,10,13,17,19,22,24,26,26,26,25,25,24,23,22,21,21,20,20,22,24,24,24,23,22,22,22,24,13,14,14,15,15,16,17,17,15,11,12,14,18,22,26,29,30,29,28,27,26,25,25,25,25,22,21,21,22,21,21,20,19,20,21,24,13,14,14,14,15,17,18,19,16,12,12,14,17,21,26,30,31,31,29,27,26,27,28,29,29,26,24,23,23,23,22,20,19,20,21,24,15,16,15,15,17,19,20,21,18,13,13,13,16,21,26,30,31,32,30,27,27,28,30,33,32,29,26,24,23,23,22,20,19,20,21,24,17,19,19,18,20,22,22,22,19,14,14,13,16,22,26,30,31,31,30,27,28,30,32,34,33,29,26,24,22,21,21,20,19,20,21,23,18,20,21,21,23,25,24,24,20,15,14,13,16,23,27,31,31,30,29,27,28,31,33,34,32,28,25,23,21,20,19,19,19,20,21,22,18,20,20,21,24,27,26,25,21,16,14,13,17,25,29,33,32,30,28,26,27,32,33,32,29,25,22,20,18,17,17,18,18,19,20,20,18,19,19,20,24,28,27,24,20,15,14,12,17,24,29,33,32,29,26,24,25,30,32,30,27,23,20,18,17,16,16,17,17,18,17,18,16,16,17,18,21,25,23,20,17,14,12,10,14,20,25,30,30,27,24,20,20,25,27,28,27,23,21,19,18,18,18,18,18,16,15,15,15,14,15,16,19,21,20,17,14,12,10,8,11,16,21,26,27,25,22,17,17,20,24,26,27,25,23,21,19,20,20,19,17,15,13,13,15,14,15,16,17,18,17,16,14,11,9,8,10,13,18,23,25,24,22,17,17,19,23,26,28,28,27,24,22,21,20,18,17,15,13,13,16,14,15,17,17,17,17,17,15,12,10,9,9,10,14,19,21,22,21,17,17,19,22,26,29,30,30,26,23,21,19,18,17,15,13,13,16,14,16,18,20,20,20,20,19,17,15,12,10,8,10,14,16,18,19,18,18,20,23,26,29,30,30,26,23,20,18,18,17,15,14,14,15,14,16,19,21,23,24,24,23,22,19,15,11,7,7,9,11,14,17,18,20,21,23,25,27,29,28,25,21,18,17,17,17,16,15,14,14,13,16,19,21,23,23,23,23,22,19,15,11,7,7,7,10,13,17,20,21,21,22,23,24,26,25,22,19,17,17,17,18,17,16,15,14,13,16,19,20,21,22,22,22,22,19,14,11,8,7,8,10,13,16,20,21,21,20,21,21,22,22,19,17,17,17,18,19,19,18,17],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
