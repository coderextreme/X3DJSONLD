###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_20',geoSystem=['GDC'],position=(-33.79166499031936,-157.54166599614774,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-33.79166499031936,-157.54166599614774,0.0),range=4495500.0,child1Url=['../../tiles/4/world4-0.x3d'],child2Url=['../../tiles/4/world4-1.x3d'],child3Url=['../../tiles/4/world5-0.x3d'],child4Url=['../../tiles/4/world5-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world2-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-3333,-4412,-4520,-4753,-5058,-5455,-5459,-5101,-5025,-4847,-4764,-4489,-4862,-4921,-4994,-4868,-5029,-5018,-5197,-5008,-4825,-2543,-3601,-4218,-4693,-5015,-5279,-5393,-5494,-5170,-4979,-1898,-3926,-5314,-5070,-5019,-5194,-5082,-5093,-5077,-5339,-4672,-940,-569,-235,-3842,-4522,-5289,-5368,-5232,-5096,-3956,-5153,-3998,-5032,-5045,-5255,-5106,-5285,-5345,-5030,-4881,-4789,-499,-369,-683,-1724,-2448,-3184,-5400,-5063,-4950,-5047,-5011,-5097,-5185,-5256,-5281,-5429,-5364,-5500,-5312,-4726,-5021,-2702,-2497,-2666,-2362,-2713,-3442,-4862,-5015,-5036,-4994,-4761,-4942,-5118,-4997,-5468,-5446,-5172,-5295,-5410,-4931,-5075,-2842,-3343,-3187,-3844,-4086,-4677,-4672,-4641,-5207,-5125,-4805,-5048,-4967,-4888,-5403,-5533,-5462,-5976,-5431,-4966,-5180,-3131,-3821,-4390,-4763,-4627,-4715,-4716,-5465,-5040,-5059,-4895,-4756,-4938,-5112,-5404,-5362,-5318,-5263,-5333,-5165,-5083,-3597,-3972,-4820,-5216,-4546,-4786,-3161,-5006,-5091,-5085,-4890,-4961,-5105,-5190,-5201,-4946,-5436,-5155,-5168,-5048,-4674,-3621,-3643,-4997,-5110,-4980,-4668,-5280,-5296,-5266,-4780,-5228,-5411,-5164,-5513,-5500,-5670,-5184,-5069,-5188,-4970,-4743,-3205,-4671,-5550,-5265,-3777,-5004,-2993,-5021,-5216,-5378,-5327,-5443,-5456,-5682,-5247,-5285,-4770,-5273,-4946,-4791,-4873,-2699,-5994,-5640,-5155,-5379,-5043,-5168,-5021,-5466,-5269,-5277,-5530,-5551,-5310,-4919,-4913,-4839,-4788,-4988,-4600,-4791,-3037,-6368,-5525,-5641,-5866,-5277,-5205,-5281,-5389,-5145,-5396,-5377,-5395,-5080,-5396,-5047,-5274,-4661,-4697,-4887,-4622,-2762,-7565,-5759,-5783,-5153,-5348,-4956,-5465,-5577,-5359,-5519,-5262,-5187,-5286,-4907,-5169,-5273,-4951,-4700,-4601,-4724,-3103,-7037,-4886,-5903,-5779,-5436,-4876,-5775,-5431,-5542,-5406,-5237,-5283,-5108,-4905,-5123,-5320,-4542,-4701,-4510,-4199,-3068,-5620,-5366,-5912,-6005,-5623,-5379,-5377,-5312,-4853,-5084,-5359,-5156,-5121,-4676,-4884,-4953,-4826,-4022,-4294,-4145,-1189,-3354,-5438,-3752,-5766,-5282,-5405,-5305,-5188,-5250,-5319,-5149,-5109,-5053,-4612,-4727,-4824,-4317,-4112,-3984,-4068,-1754,-1418,-5946,-5209,-5428,-5377,-5367,-5291,-4023,-5115,-4679,-5089,-5274,-4672,-4709,-4671,-4517,-4239,-3985,-4340,-4240,-2598,-1985,-6920,-4987,-5181,-5547,-5508,-5253,-5320,-5100,-5217,-5151,-5018,-4476,-4741,-4367,-2058,-3225,-4262,-4197,-4172,-2887,-1521,-8100,-5293,-2843,-5666,-5475,-5497,-5336,-5120,-5097,-5335,-4901,-4442,-4446,-2905,-2812,-3902,-4320,-4390,-4274,-2578,-2151,-5436,-5084,-5644,-5975,-5574,-5700,-5231,-5085,-5055,-5007,-3358,-4325,-4392,-2953,-4302,-4283,-4428,-4259,-4171,-2379,-1306,-5146,-5465,-5858,-5777,-5834,-5435,-5119,-5027,-4876,-4472,-4135,-4907,-4346,-3875,-4596,-4558,-4450,-4043,-4145,-2385,-1282,-5329,-5397,-5875,-5814,-5750,-5390,-5070,-4913,-4895,-4424,-4339,-4708,-4506,-3556,-4586,-4626,-4433,-4179,-4021],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
