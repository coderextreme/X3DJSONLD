###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore18-18.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3694340860038916,103.84837061432235,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[23,21,21,23,28,35,40,39,37,36,36,38,40,40,38,39,40,41,42,40,36,32,29,30,34,36,37,35,32,30,28,26,22,18,16,14,23,21,22,26,33,39,44,42,38,35,35,37,39,40,38,39,40,41,42,39,34,31,30,32,34,35,36,34,29,27,27,26,21,16,14,13,22,21,23,30,38,46,50,45,38,34,32,34,38,39,39,38,38,39,41,37,31,29,31,32,33,33,33,31,25,23,25,25,20,15,12,11,21,22,26,34,44,54,58,49,36,31,31,33,37,38,38,38,37,38,39,36,33,31,30,30,29,29,29,28,24,21,22,22,18,14,11,11,20,23,28,37,48,58,63,50,35,30,30,32,35,36,36,36,36,35,35,35,36,33,29,26,24,24,25,25,23,21,20,18,15,13,11,11,21,24,28,36,45,55,60,49,34,30,30,31,32,32,32,32,32,32,31,33,37,35,29,25,23,23,23,23,22,20,18,16,14,12,11,11,23,25,28,32,38,47,52,45,34,31,31,31,30,29,27,27,28,28,28,31,36,35,29,25,24,23,23,22,21,19,16,14,13,12,12,12,25,27,29,32,35,41,45,40,34,32,32,32,31,29,26,25,25,25,26,29,33,32,28,27,27,26,24,22,20,18,15,14,13,13,13,13,27,28,30,32,34,37,39,37,34,33,34,33,32,30,27,26,25,25,25,26,28,28,27,28,30,29,25,22,19,17,15,14,14,15,15,15,29,30,31,32,33,34,34,34,33,33,33,33,33,31,29,28,26,26,26,26,25,26,26,28,31,30,26,22,18,16,14,14,15,15,15,16,31,31,32,32,32,31,30,31,31,31,31,31,32,32,31,30,28,28,28,27,25,25,25,27,29,29,25,21,16,14,13,14,14,14,15,16,30,30,31,31,30,28,28,28,29,29,28,29,30,30,29,29,28,28,29,28,25,25,25,26,28,27,24,20,15,13,13,13,14,14,15,15,28,28,28,28,28,27,26,26,26,26,25,26,27,27,26,26,26,27,29,28,26,25,26,27,27,25,22,19,15,13,12,13,14,14,14,14,26,26,26,27,26,25,24,24,24,23,22,23,25,25,24,24,25,26,28,28,25,25,26,26,25,24,22,19,15,12,12,13,14,14,14,14,24,24,25,25,25,25,24,23,22,22,22,23,24,24,25,24,23,24,26,26,25,24,25,24,24,24,22,19,15,12,12,12,13,14,15,15,22,22,23,24,25,25,25,23,22,23,24,25,25,25,25,24,23,23,25,25,25,24,23,23,23,23,22,19,16,13,12,12,13,14,14,14,20,20,21,23,25,27,28,25,23,25,28,29,29,28,26,24,22,23,24,25,25,24,23,22,23,22,21,19,16,14,13,13,12,12,13,13,20,21,22,24,27,30,32,29,25,26,29,30,30,29,27,24,22,22,23,24,24,24,22,22,23,22,20,18,16,15,14,13,12,12,12,12,21,24,27,29,32,36,38,33,27,27,28,29,30,29,26,24,22,22,22,23,23,23,23,23,24,22,19,17,16,15,14,13,13,13,12,12,22,26,30,32,34,38,40,35,29,28,28,29,30,29,27,25,23,22,22,23,23,24,24,24,25,23,19,17,15,14,14,13,13,13,12,12,22,25,28,30,31,34,36,34,29,29,29,29,30,29,28,27,25,24,24,24,25,25,25,25,25,24,21,18,17,15,15,14,14,14,13,12,23,26,28,29,30,32,34,32,30,30,30,30,29,29,29,28,26,26,25,25,25,25,25,25,25,23,21,19,17,16,15,15,15,15,13,12,24,26,28,29,31,32,32,32,31,31,31,30,28,28,28,28,27,26,25,24,23,23,23,22,22,21,20,19,17,16,15,15,15,15,13,12],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
