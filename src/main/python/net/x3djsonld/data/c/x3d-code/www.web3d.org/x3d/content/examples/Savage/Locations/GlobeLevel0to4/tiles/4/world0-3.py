###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world0-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-90.0416666667,-112.54166465504323,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2786,2784,2783,2781,2780,2778,2776,2775,2773,2771,2769,2768,2766,2764,2762,2760,2759,2757,2755,2754,2752,2750,2806,2805,2805,2805,2804,2804,2803,2802,2800,2798,2794,2788,2782,2775,2767,2760,2752,2744,2736,2728,2721,2716,2838,2831,2825,2818,2813,2808,2802,2798,2794,2788,2782,2775,2769,2764,2759,2754,2749,2745,2741,2737,2733,2730,2802,2798,2793,2787,2780,2771,2762,2751,2739,2725,2712,2699,2687,2670,2653,2640,2630,2622,2615,2609,2605,2602,2693,2687,2679,2666,2647,2622,2598,2577,2559,2544,2530,2518,2506,2498,2487,2470,2452,2437,2426,2419,2418,2419,2583,2583,2580,2574,2565,2551,2534,2515,2500,2488,2467,2439,2408,2385,2345,2302,2264,2234,2215,2203,2192,2189,2528,2560,2589,2605,2618,2623,2617,2596,2549,2492,2439,2369,2264,2183,2125,2066,2014,1988,1966,1943,1923,1910,2422,2441,2468,2505,2549,2591,2607,2614,2612,2595,2524,2302,2108,2012,1971,1940,1923,1912,1903,1892,1873,1856,2396,2384,2361,2354,2370,2401,2426,2431,2412,2390,2343,2278,2163,1994,1954,1988,2133,2240,2285,2283,2238,2091,2258,2287,2184,2087,2073,2109,2173,2199,2204,2213,2219,2302,2226,2244,2252,2238,2231,2227,2147,1951,2081,2050,1688,1789,1906,1986,2047,2149,2176,2197,2215,2287,2323,2310,2271,2260,2256,2238,2203,2175,2128,2195,2049,2028,1568,1628,1699,1736,1779,1818,1880,1912,1924,1934,1950,1961,1965,1967,1970,1968,1962,1961,1966,1953,1902,1843,1495,1530,1584,1700,1784,1827,1889,1928,1966,2001,2011,2008,2000,1990,1969,1941,1914,1897,1884,1831,1779,1737,1451,1556,1650,1707,1772,1864,1976,2053,2107,2110,2079,2024,1990,1970,1953,1940,1927,1916,1874,1793,1712,1681,1409,1490,1606,1671,1715,1800,1953,2068,2197,2205,2173,2119,2080,2027,1996,1965,1935,1908,1864,1778,1725,1705,1499,1600,1683,1789,1849,1928,2029,2112,2196,2226,2218,2195,2164,2122,2087,2030,1996,1963,1920,1867,1801,1737,1618,1709,1801,1862,1914,2003,2050,2086,2094,2102,2153,2196,2216,2194,2145,2106,2085,2055,2015,1917,1803,1769,1667,1735,1797,1841,1879,1898,1955,2008,2052,2093,2141,2212,2293,2322,2299,2225,2178,2127,2015,1969,1928,1902,1692,1749,1799,1832,1870,1916,1988,2029,2073,2099,2122,2159,2199,2259,2323,2447,2286,2228,2111,2034,1986,1930,1745,1775,1806,1865,1904,1951,1990,2021,2060,2086,2100,2108,2102,2096,2100,2117,2147,2186,2195,2172,2116,2071,1772,1801,1869,1914,1928,1939,1955,1980,2002,2029,2055,2065,2051,2020,1994,1975,1984,2014,2067,2097,2101,2082,1786,1789,1740,1771,1801,1811,1822,1839,1862,1886,1902,1913,1913,1910,1907,1905,1898,1887,1894,1917,1962,1992,1757,1718,1695,1733,1769,1787,1797,1808,1832,1859,1882,1885,1885,1890,1892,1894,1887,1874,1874,1897,1927,1961],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
