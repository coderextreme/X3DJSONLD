###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-17.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.83400758019333,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[16,15,14,13,12,12,11,12,18,26,31,34,34,34,34,33,31,27,24,22,21,21,23,24,26,27,28,29,29,27,24,23,22,22,22,22,23,17,17,16,15,14,13,12,12,18,27,34,39,39,38,36,35,32,28,26,25,24,24,24,25,25,24,24,26,26,24,22,20,20,22,24,25,24,18,19,19,18,16,13,12,12,18,26,34,41,41,40,38,36,32,28,27,26,26,26,25,25,24,22,21,22,22,20,19,17,18,21,24,24,24,21,22,22,21,18,14,11,11,17,24,32,40,41,41,38,36,31,27,26,26,27,26,25,24,23,21,20,19,18,17,17,16,17,19,21,22,22,25,25,25,24,20,14,12,11,15,22,29,35,37,38,36,33,30,26,26,27,27,26,25,24,22,21,20,19,18,17,17,17,17,19,20,21,21,29,27,27,26,21,16,12,10,13,18,23,27,29,30,29,28,28,27,28,28,27,26,25,24,23,22,22,21,21,20,20,19,19,20,21,21,21,32,30,29,28,23,17,13,10,11,14,18,22,24,24,24,24,26,28,29,30,28,26,24,24,24,23,23,23,24,23,23,22,22,23,22,22,21,33,31,30,29,23,17,13,9,10,12,16,21,22,22,22,21,23,27,29,30,28,25,24,23,23,24,24,25,26,26,26,25,25,26,26,25,23,32,31,31,29,23,17,12,9,9,11,16,22,23,22,21,20,22,26,27,28,27,24,23,23,23,24,25,26,26,27,27,27,27,28,28,26,23,30,30,30,28,22,16,12,9,10,12,17,23,24,23,23,22,22,23,24,24,23,22,21,22,23,25,25,25,25,27,28,28,28,29,29,26,23,28,28,28,26,20,15,12,10,11,14,19,24,25,25,25,24,24,23,23,22,21,19,20,21,23,24,25,23,24,26,28,28,28,29,28,25,23,26,26,25,22,17,12,10,10,13,17,21,25,26,27,27,27,27,26,24,21,19,17,18,20,22,23,23,23,23,25,27,27,28,27,26,23,21,24,24,22,18,14,10,10,11,14,19,23,26,27,28,29,30,31,31,27,22,19,18,18,18,20,22,22,23,23,24,25,26,26,25,23,20,19,23,22,19,16,13,11,12,14,17,20,23,26,27,28,30,33,34,35,32,26,23,21,19,17,18,20,22,24,24,23,23,24,24,23,22,19,17,22,20,17,14,13,12,14,16,19,21,24,26,27,28,32,36,37,38,35,31,27,24,20,16,16,19,22,25,25,24,23,23,23,23,22,19,17,21,18,16,13,13,13,15,18,20,23,25,26,28,30,35,39,39,36,36,36,32,26,20,16,16,18,22,27,29,28,26,24,24,25,24,21,18,20,17,14,13,13,14,16,19,21,24,26,26,29,33,38,43,41,36,37,40,35,25,19,15,15,17,22,28,32,30,28,26,26,26,25,22,19,18,16,14,13,14,16,18,20,22,25,26,27,31,35,40,45,45,42,41,40,33,22,15,12,13,15,20,27,30,28,26,24,24,24,23,20,17,16,16,14,14,16,19,20,21,23,25,26,26,30,35,41,47,49,49,45,39,30,18,12,9,10,13,18,23,26,24,22,21,21,21,19,16,14,16,16,16,16,19,22,23,24,24,24,24,23,27,31,38,46,49,51,46,38,28,17,12,10,11,12,15,18,20,19,18,17,17,16,15,13,13,17,17,19,20,24,27,28,28,26,24,21,19,22,26,34,42,45,48,44,37,28,18,14,13,12,13,14,15,16,16,15,13,12,12,13,12,12,18,20,22,24,29,33,34,34,30,24,21,19,20,23,28,34,38,41,38,32,25,17,13,13,14,15,16,17,17,16,14,13,11,12,12,13,14],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
