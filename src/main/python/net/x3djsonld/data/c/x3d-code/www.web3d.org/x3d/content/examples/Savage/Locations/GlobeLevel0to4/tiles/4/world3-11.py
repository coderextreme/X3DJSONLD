###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2224,-947,-1632,-2225,-1747,-1506,-2321,-3010,-2547,-2226,-2456,-1766,-1994,-3533,-4379,-4469,-4550,-4476,-4799,-4540,-4472,-4275,-2377,-2189,-2812,-4057,-3803,-2300,-2582,-2797,-2970,-2727,-2772,-2363,-2858,-3689,-4566,-4646,-4382,-4542,-4482,-4508,-4375,-4251,-3522,-4176,-4460,-4122,-4098,-4092,-3160,-3177,-2926,-2457,-2494,-2716,-2817,-3793,-4731,-4814,-4782,-4485,-4467,-4434,-4337,-4434,-3586,-4478,-4274,-2308,-3868,-3433,-2565,-2451,-2057,-1796,-2010,-2166,-2632,-4257,-4371,-3139,-4718,-4408,-4474,-4534,-4328,-4470,-4371,-4392,-4144,-3908,-3480,-3180,-2472,-1701,-1597,-1440,-1946,-2532,-3244,-3933,-4417,-4608,-4881,-4516,-4542,-4659,-4393,-4572,-4550,-4401,-4260,-3959,-2483,-1983,-2351,-1467,-1272,-1563,-1879,-2087,-3723,-3419,-3880,-2100,-4080,-4433,-4542,-4498,-4564,-4434,-4496,-4389,-4176,-3856,-2788,-1966,-1381,-1566,-1067,-1369,-1500,-1736,-3271,-3202,-2460,-2649,-4726,-4486,-4555,-4421,-4533,-4348,-4557,-4350,-4172,-3896,-3280,-1116,-253,-771,-891,-1221,-1628,-2050,-2459,-1080,-4122,-4371,-4328,-4504,-4485,-4559,-4432,-4566,-4479,-4238,-4156,-3808,-2887,-1039,-206,-176,-569,-837,-824,-965,-2428,-3543,-3597,-4309,-4331,-4417,-4403,-4405,-4419,-4344,-4222,-3669,-3763,-3744,-1996,-631,-256,-254,-397,-595,-1771,-3360,-3370,-3166,-3516,-4059,-4409,-4317,-4432,-4342,-4437,-4109,-3245,-3231,-3141,-2198,-2103,-904,-536,-340,-522,-96,-3273,-3456,-3880,-3730,-3857,-4082,-4282,-4318,-4321,-4118,-4329,-4220,-2656,-1967,-2499,-1255,-420,-220,-269,-422,-671,-1711,-3147,-3531,-3640,-3740,-3921,-4090,-4274,-4210,-4219,-4259,-4204,-4233,-2687,-1768,-1961,-1241,-571,-522,-511,-533,-324,-3154,-3404,-3508,-3657,-3914,-4026,-4090,-4248,-4141,-4199,-4179,-4133,-4019,-2402,-1519,-191,-349,-606,-540,-553,-699,-1884,-3128,-3558,-3615,-3622,-3832,-3958,-4117,-4166,-4165,-4174,-4160,-4103,-4116,-1631,-264,-112,-75,-399,-583,-925,-2726,-2600,-3080,-3351,-3586,-3636,-3837,-3875,-4012,-4117,-4166,-4116,-4125,-4134,-4030,-1491,-196,-54,-20,-160,-693,-2430,-2730,-2863,-3061,-3338,-3457,-3607,-3687,-3726,-3942,-4107,-4099,-4127,-4048,-4003,-3942,-1214,-194,-17,-72,-160,-1806,-2407,-2581,-2862,-3118,-3281,-3408,-3493,-3653,-3545,-3802,-3931,-4071,-4285,-3949,-3632,-3788,-668,-248,-84,-164,-141,-1836,-2353,-2518,-2944,-3064,-3227,-3358,-3286,-3510,-3501,-3696,-3842,-3957,-3942,-3793,-3714,-3711,-249,-310,-164,-162,-147,-473,-2214,-2376,-3046,-2971,-3211,-3325,-3309,-3387,-3377,-3575,-3705,-3730,-3760,-3723,-3669,-3683,-540,-236,-285,-101,-345,-227,-2161,-3348,-3474,-3245,-3281,-3310,-3348,-3403,-3380,-3564,-3683,-3561,-3575,-3601,-3641,-3598,-887,-422,-792,-2241,-1801,-2490,-3287,-3423,-3314,-3406,-3383,-3442,-3517,-3377,-3387,-3584,-3736,-3696,-3491,-3491,-3451,-3494,-2047,-762,-2866,-3145,-2976,-3050,-3474,-3308,-3498,-3434,-3439,-3473,-3344,-3517,-3495,-3572,-3738,-3455,-3487,-3540,-3397,-3316,-2512,-2066,-3238,-3537,-3330,-3356,-3770,-3809,-3585,-3579,-3373,-3422,-3510,-3509,-3451,-3555,-3509,-3788,-3562,-3530,-3420,-3355,-2890,-2141,-3237,-3532,-3355,-3365,-3710,-3836,-3377,-3613,-3567,-3375,-3512,-3432,-3491,-3534,-3516,-3602,-3511,-3550,-3423,-3326],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
