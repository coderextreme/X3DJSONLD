###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[3257,3282,3309,3344,3380,3401,3415,3437,3469,3507,3541,3569,3591,3600,3609,3622,3632,3638,3641,3641,3637,3631,3302,3321,3360,3394,3432,3461,3479,3493,3513,3545,3585,3611,3634,3650,3660,3667,3672,3669,3659,3642,3623,3609,3340,3371,3406,3464,3502,3519,3529,3541,3562,3597,3629,3664,3688,3702,3712,3718,3716,3709,3697,3667,3632,3608,3394,3434,3485,3510,3542,3564,3580,3596,3621,3666,3696,3707,3722,3743,3766,3786,3800,3787,3733,3687,3641,3613,3453,3513,3558,3586,3600,3612,3640,3680,3705,3719,3728,3733,3739,3753,3771,3786,3784,3755,3706,3676,3640,3614,3484,3557,3611,3626,3640,3656,3674,3694,3708,3719,3722,3720,3715,3713,3714,3717,3715,3704,3687,3660,3628,3609,3520,3601,3636,3649,3654,3655,3650,3641,3638,3646,3654,3654,3652,3653,3654,3647,3641,3636,3628,3616,3604,3595,3556,3591,3610,3618,3620,3616,3602,3588,3572,3564,3551,3547,3543,3541,3544,3555,3566,3572,3573,3570,3565,3559,3540,3555,3562,3558,3547,3542,3544,3537,3412,3382,3391,3399,3409,3420,3434,3450,3478,3499,3505,3499,3495,3492,3497,3501,3499,3477,3436,3397,3335,3257,3200,3202,3217,3239,3266,3299,3325,3358,3381,3395,3406,3422,3422,3410,3375,3380,3357,3331,3313,3249,3186,3101,3056,3030,3015,3051,3123,3168,3210,3260,3294,3302,3302,3297,3297,3300,3026,3048,3159,3203,3205,3201,3099,2913,2786,2758,2810,2887,2915,2946,3000,3103,3133,3155,3144,3119,3098,3089,2618,2795,2950,3155,3147,2986,2726,2371,2336,2465,2585,2593,2733,2803,2877,2901,2919,2945,2962,2977,2973,2964,1916,2209,2473,2760,2679,2120,1991,2048,1919,2136,2216,2343,2403,2581,2701,2716,2721,2752,2768,2786,2790,2791,1196,1336,1252,1224,1139,1172,1439,1645,1648,1729,1880,1935,2019,2299,2484,2448,2419,2433,2457,2489,2546,2624,727,703,770,757,672,788,939,1071,1159,1333,1435,1527,1642,1902,2051,2014,1952,2065,2146,2244,2355,2401,418,302,349,2,-8,297,397,615,872,1020,1155,1326,1503,1678,1753,1693,1565,1588,1777,1949,2093,2242,222,124,222,141,10,75,-79,80,476,607,761,942,1271,1398,1463,1221,912,1182,1530,1850,2000,2128,-651,-1195,-2478,-1538,-571,-5,33,137,161,-96,-88,596,863,899,619,502,204,890,1332,1694,1918,2099,-2192,-3031,-2977,-2894,-2243,-1833,-960,-2,309,71,-71,603,344,-75,-37,-189,-44,715,1255,1495,1803,1945,-3313,-3331,-3292,-3271,-3391,-2849,-2886,-1983,-541,-20,64,291,-9,-16,-344,-552,-199,503,1048,1271,1516,1635,-3767,-3741,-3419,-3528,-3583,-3600,-3348,-2854,-2509,-439,-325,-224,-420,-337,-574,-1394,-343,-340,-167,397,1116,1278,-4193,-4163,-4004,-3782,-3878,-3827,-3561,-3860,-3475,-2121,-505,-964,-2379,-2954,-1792,-3541,-2983,-1833,-284,-142,-3,-4,-4310,-4249,-4066,-3833,-3708,-3836,-3613,-3867,-3428,-2163,-673,-1004,-2934,-2780,-2143,-3752,-3228,-2520,-1342,-182,-60,-3],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
