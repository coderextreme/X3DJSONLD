###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore11-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3083120993579338,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[32,37,40,41,39,36,33,30,26,21,20,19,20,20,23,27,30,33,33,32,30,27,36,53,53,40,32,30,30,29,25,20,17,17,20,24,34,38,39,39,37,34,32,29,27,24,23,22,22,23,25,28,32,34,34,33,33,31,42,61,61,44,32,28,26,25,23,18,15,18,22,29,37,37,37,36,33,31,29,28,27,27,27,27,26,25,27,30,32,34,34,35,35,36,45,60,59,41,29,24,23,24,23,21,20,21,25,32,39,36,34,32,30,29,28,29,29,29,30,30,29,27,29,32,33,33,34,36,37,39,45,54,50,35,24,20,20,22,24,24,24,24,27,33,39,35,32,28,28,28,29,31,31,31,31,31,30,30,31,34,34,32,34,37,38,39,40,42,37,25,18,17,18,21,24,26,28,27,27,31,39,35,31,27,28,29,31,33,32,31,30,29,30,30,33,36,35,33,33,35,36,35,33,30,25,18,15,15,17,19,23,27,29,28,27,29,39,36,33,30,30,31,31,31,30,29,27,26,27,29,32,36,36,35,33,30,29,29,26,22,19,15,15,16,18,19,21,24,25,25,26,28,38,37,36,34,34,34,31,28,27,25,23,21,23,25,30,34,35,35,31,25,22,24,22,18,16,15,15,16,18,19,19,20,21,23,26,29,37,37,38,38,38,37,32,25,23,22,20,19,19,20,24,29,30,29,26,23,21,22,20,16,14,14,14,14,15,16,18,19,20,23,26,30,36,37,39,41,41,40,32,23,21,19,18,16,16,15,19,24,24,22,21,21,21,21,19,16,14,13,12,11,12,14,16,18,21,24,28,31,36,38,41,43,42,40,33,25,21,17,16,15,15,15,18,23,21,19,18,18,19,19,18,16,14,13,11,10,11,14,16,19,21,26,30,33,35,38,41,43,41,37,32,27,22,17,15,14,14,15,18,22,20,17,17,17,18,18,18,17,16,14,13,12,11,13,16,19,22,28,31,32,35,39,41,41,38,34,31,27,22,17,15,13,14,15,17,19,19,19,18,19,20,21,21,21,21,19,17,14,12,13,14,17,21,26,29,29,34,38,39,38,34,31,29,26,22,18,15,13,13,14,15,16,17,20,21,23,24,26,27,27,27,26,23,18,15,12,12,15,19,24,26,24,30,32,33,32,30,27,26,25,23,20,18,15,15,14,13,13,16,20,24,27,30,31,31,31,30,31,27,22,17,13,13,15,18,21,22,21,26,26,26,26,25,24,24,24,23,23,21,20,17,14,12,11,14,19,25,31,34,35,34,33,33,34,31,24,18,15,14,15,16,18,19,17,24,23,22,22,22,23,23,24,24,24,24,25,21,16,13,11,13,15,21,28,31,33,34,34,33,33,30,23,18,15,13,14,16,16,16,15,24,23,21,20,21,22,23,24,25,25,27,29,25,19,15,13,11,11,15,21,25,30,32,33,32,29,26,22,18,14,13,14,15,15,13,13,24,24,23,22,21,20,21,22,23,25,27,30,26,20,16,13,11,9,13,17,22,27,29,29,28,25,23,20,17,14,14,15,17,16,16,15,24,27,27,25,22,19,19,19,21,24,26,28,25,20,16,13,11,10,12,16,20,25,26,25,23,21,19,18,17,15,16,18,19,20,20,19,22,26,26,26,22,18,17,16,19,21,23,25,23,20,16,13,12,11,12,14,17,21,22,21,20,18,18,17,17,16,17,20,22,22,22,21,20,24,25,25,21,18,16,14,16,18,20,22,21,18,16,13,12,10,11,12,14,17,19,18,17,17,18,18,17,17,18,22,24,23,21,20,19,22,24,24,21,17,15,14,14,15,15,17,17,16,15,13,11,10,10,11,12,15,16,16,16,17,17,18,18,16,17,20,22,21,20,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
