###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore25-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4305560726498494,103.64728813651608,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[12,11,9,8,8,9,11,13,15,16,16,16,16,15,13,10,10,10,12,14,15,15,14,13,14,16,19,23,26,28,29,29,28,27,25,23,13,12,10,9,8,8,9,12,14,15,15,15,14,13,12,11,11,12,14,16,17,17,16,15,15,17,19,23,25,25,25,24,23,23,23,23,15,13,11,10,8,8,9,12,13,14,15,15,14,13,13,13,13,14,15,17,17,17,17,16,16,18,20,23,25,25,23,22,21,21,22,22,16,14,13,12,10,8,10,12,13,14,15,15,14,14,14,14,15,16,17,17,17,17,17,17,17,19,21,24,25,25,23,21,19,19,20,21,16,15,14,12,11,10,11,13,14,15,16,16,16,16,16,16,17,17,18,17,17,17,17,17,18,19,21,23,24,24,22,20,17,16,17,18,17,15,14,13,12,12,14,16,17,17,18,19,19,19,18,18,18,18,18,17,17,17,17,18,18,19,20,20,21,21,20,18,15,14,14,15,18,16,15,14,14,15,16,17,18,18,18,19,19,19,19,18,17,18,18,17,17,17,17,18,18,19,20,20,19,19,18,16,15,14,14,14,19,18,17,17,17,18,18,18,18,18,18,18,18,18,18,17,17,17,18,17,17,17,17,17,18,20,21,20,18,17,16,16,15,14,14,14,20,19,19,19,20,21,21,20,19,18,17,17,17,18,18,17,17,17,17,17,17,16,16,17,19,21,22,20,19,17,16,16,16,15,15,15,20,20,21,21,24,26,26,25,23,20,17,15,16,17,18,18,18,17,17,17,17,16,16,17,19,21,22,22,20,18,17,17,16,15,15,15,22,23,23,23,26,29,30,28,25,20,17,16,17,20,21,22,21,20,19,19,17,16,16,17,19,21,22,22,21,19,18,17,17,16,15,15,26,27,25,25,27,30,31,30,26,21,20,20,22,25,27,30,29,27,24,21,19,17,16,17,18,19,20,20,20,19,18,17,17,17,16,15,31,32,29,27,29,31,31,31,27,23,22,23,27,32,35,38,36,32,28,24,21,18,17,16,17,17,18,18,18,17,16,16,16,16,16,15,36,36,32,29,30,31,30,28,26,24,25,28,34,41,44,46,44,39,33,27,22,19,17,16,15,16,16,16,16,15,14,14,14,14,14,14,39,38,35,32,31,32,30,28,26,26,28,31,38,45,50,51,48,43,36,29,23,20,17,15,14,15,15,15,15,13,13,13,14,13,13,14,38,38,36,33,34,35,34,32,30,29,31,33,38,44,48,50,47,42,36,29,24,20,17,15,14,14,14,14,14,13,13,13,14,14,14,15,38,37,35,34,36,38,37,36,34,32,33,35,38,41,44,47,45,40,34,28,24,20,17,15,14,13,13,13,14,13,13,13,14,14,15,16,36,35,34,33,35,38,39,40,38,35,34,33,35,36,37,39,38,34,30,25,22,19,17,15,14,13,13,13,14,13,13,13,14,14,15,16,34,33,32,33,35,37,40,41,39,37,35,33,32,31,31,32,31,29,26,23,21,19,17,15,14,13,13,14,15,14,14,14,14,15,16,17,30,30,30,31,32,34,35,36,36,35,34,32,31,29,28,28,27,26,24,22,22,21,19,17,16,16,16,17,17,16,16,16,16,17,18,18,27,28,29,30,30,31,31,31,32,33,33,32,30,27,26,24,24,23,23,23,23,23,22,20,19,19,19,20,19,17,17,17,18,19,20,20,26,28,29,30,29,29,29,29,30,30,30,30,29,28,27,26,26,25,25,26,27,27,26,23,22,22,22,23,22,20,20,20,21,21,22,21,25,27,29,30,29,28,28,27,27,28,28,27,27,27,28,28,28,27,28,30,31,30,29,27,25,25,25,25,24,23,22,22,23,24,24,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
