###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-112.54166465504323,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2595,-2991,-3122,-3197,-3186,-3476,-3569,-3212,-3767,-3742,-3906,-3969,-3869,-4079,-4284,-4218,-4578,-4160,-4115,-4636,-4065,-3973,-2713,-2925,-3109,-3192,-3224,-3300,-3516,-3578,-3641,-3900,-3781,-4015,-4132,-4385,-4202,-4187,-3598,-4102,-3997,-4256,-4202,-4133,-2833,-2836,-3091,-3313,-3039,-3365,-3455,-3507,-3787,-3797,-3964,-3918,-4095,-4059,-4297,-4111,-4161,-4095,-4364,-4339,-4289,-4185,-2816,-2785,-3107,-3310,-1932,-3333,-3503,-3641,-3726,-3888,-3959,-4020,-3796,-3764,-4445,-4121,-4606,-4106,-4399,-4338,-4241,-4152,-2972,-2707,-3123,-3344,-3129,-3281,-3528,-3612,-3870,-3768,-3917,-4253,-4203,-3770,-1681,-4184,-4188,-4314,-4369,-4404,-4216,-4212,-2944,-2478,-3041,-3186,-3286,-3395,-3450,-3592,-3819,-3865,-3907,-4223,-4333,-3957,-3971,-4207,-4309,-4292,-4254,-4156,-4063,-4055,-2836,-2707,-2891,-3194,-3218,-3293,-3412,-3571,-3756,-3879,-4052,-4763,-4344,-4283,-4014,-4252,-4348,-4330,-4152,-4284,-4092,-3893,-2631,-2645,-2886,-3152,-3285,-3438,-3496,-3578,-3758,-4175,-4208,-4527,-4435,-4508,-3269,-4114,-4158,-4203,-4270,-4138,-3911,-3689,-2983,-2543,-2891,-3096,-3327,-3536,-3533,-3653,-3890,-4199,-4106,-3975,-3949,-4961,-4709,-3930,-3719,-3948,-3740,-3413,-3408,-3344,-3114,-2756,-2891,-3179,-3477,-3676,-3777,-3705,-3819,-3899,-3880,-5170,-4158,-3447,-3635,-3671,-3550,-3672,-3410,-3205,-3308,-3994,-3024,-2745,-2877,-3179,-3498,-3660,-3824,-3805,-3875,-3985,-3824,-4635,-4443,-4405,-3534,-3561,-3571,-3650,-3513,-2758,-3217,-3390,-3152,-2705,-2992,-3204,-3350,-3631,-3699,-3792,-3779,-3938,-4031,-4142,-4304,-4405,-4000,-3491,-3440,-3492,-3218,-2962,-3408,-3488,-3301,-2609,-2860,-3161,-3431,-3513,-3710,-3920,-3854,-3995,-4217,-4073,-4163,-4479,-3678,-3709,-3344,-3101,-3060,-3203,-3188,-3096,-3090,-2632,-2959,-3209,-3433,-3597,-3784,-3936,-4103,-3865,-4030,-4148,-4271,-4312,-3777,-3656,-3457,-3223,-3147,-2932,-3072,-3167,-2657,-2807,-2884,-3220,-3413,-3556,-3748,-3906,-3951,-3939,-4287,-3972,-4223,-3844,-3857,-3537,-3465,-2837,-2773,-2783,-3021,-3227,-2995,-2631,-2758,-3009,-3367,-3496,-3705,-3885,-3978,-4106,-4037,-4034,-4060,-3897,-3600,-3755,-3417,-3112,-2772,-2984,-3447,-3266,-3224,-2910,-2547,-3128,-3408,-3562,-3754,-3894,-3997,-4114,-3975,-4054,-4122,-3452,-3487,-3537,-3430,-2813,-3229,-3903,-3756,-3816,-3338,-2742,-2635,-3135,-3546,-3631,-3642,-3799,-3885,-3695,-3722,-3870,-3523,-3653,-3156,-3476,-3027,-3568,-3482,-3741,-3519,-3624,-3457,-2936,-2431,-3032,-3423,-3587,-3667,-3606,-3796,-3794,-3078,-3226,-3313,-3526,-3433,-3170,-3375,-3135,-3304,-2860,-3483,-3710,-2834,-2713,-2680,-3068,-3390,-3527,-3698,-3670,-3237,-3895,-3355,-4075,-3673,-3562,-3222,-3302,-2879,-3734,-3384,-3559,-3520,-3799,-3201,-2854,-3005,-3142,-3438,-3488,-3486,-3071,-4070,-2990,-3337,-3364,-3360,-3585,-3436,-3314,-3329,-3348,-3106,-3606,-3772,-3828,-4733,-3022,-3253,-3421,-3754,-4757,-3529,-3216,-3394,-3010,-3180,-3296,-3770,-3467,-3600,-3493,-3555,-3312,-3424,-3659,-3728,-3675,-3193,-3127,-2664,-2993,-2921,-3194,-3223,-3458,-3371,-3501,-3465,-3419,-3751,-3590,-3531,-3198,-3286,-3353,-3482,-3611,-3500,-3532,-3033,-3231,-3292,-2731,-2703,-3184,-3181,-3464,-3338,-3518,-3480,-3304,-3772,-3561,-3376,-3756,-3329,-3448,-3359,-3632,-3611,-3440],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
