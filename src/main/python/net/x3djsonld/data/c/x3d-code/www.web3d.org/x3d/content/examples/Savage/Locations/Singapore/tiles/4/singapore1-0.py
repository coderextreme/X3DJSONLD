###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_10',geoSystem=['GDC'],position=(1.238458400333982,103.60419903412902,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.238458400333982,103.60419903412902,0.0),range=4101.627,child1Url=['../../tiles/5/singapore2-0.x3d'],child2Url=['../../tiles/5/singapore2-1.x3d'],child3Url=['../../tiles/5/singapore3-0.x3d'],child4Url=['../../tiles/5/singapore3-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore1-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.229726687955988,103.589836,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[9,3,0,1,0,0,0,0,0,0,2,4,3,2,4,5,7,9,9,5,4,3,0,2,3,3,3,0,1,5,6,4,3,6,6,5,6,6,1,0,2,1,0,0,0,0,1,2,3,3,4,2,4,6,10,9,6,4,3,1,0,4,4,3,1,1,5,6,6,5,6,4,4,6,7,2,0,1,1,1,1,1,1,2,3,3,3,6,2,2,4,9,8,5,3,2,0,0,4,6,3,1,0,5,6,6,5,4,3,4,5,9,3,0,0,2,3,4,2,2,2,4,4,4,8,5,2,2,8,8,1,2,0,0,0,3,9,4,0,0,4,4,4,4,4,2,3,4,10,4,0,0,1,4,6,4,3,3,3,5,5,9,7,1,0,6,4,0,2,1,1,1,3,9,5,0,1,3,2,0,2,2,1,3,3,10,5,0,0,0,2,7,7,5,3,2,5,5,10,8,0,-1,1,0,0,4,4,5,4,5,8,5,2,4,2,0,-1,0,0,1,4,4,10,6,1,0,0,3,7,7,6,3,2,6,5,9,8,0,-1,1,0,0,3,5,5,4,6,8,5,4,6,2,0,-2,-1,0,2,4,4,10,7,3,1,2,5,7,6,6,3,4,5,4,8,7,1,0,3,1,2,2,4,4,4,5,8,7,5,7,4,0,0,0,0,2,3,3,11,8,5,2,4,7,7,5,7,3,5,5,3,6,5,1,0,3,4,3,2,4,2,3,4,7,7,6,6,3,0,0,1,1,1,2,2,15,9,6,4,5,6,7,5,6,5,5,5,3,4,4,1,1,1,6,6,4,3,1,3,3,4,4,6,3,0,0,0,2,1,1,0,0,16,9,6,6,7,6,7,5,7,5,4,5,3,2,2,1,3,0,7,7,4,3,1,3,2,3,4,6,1,0,0,1,3,1,1,0,0,13,7,6,9,8,5,7,5,7,6,3,4,4,2,2,2,8,0,6,5,2,2,2,3,3,3,3,4,1,0,0,1,3,1,1,2,2,10,4,7,12,9,6,8,7,9,6,2,3,5,3,3,3,9,1,4,3,2,2,3,3,4,3,2,2,1,0,0,1,2,1,2,3,3,7,2,9,14,11,9,10,11,12,5,1,1,5,6,6,5,5,6,2,3,7,3,4,4,4,3,1,0,1,0,0,0,1,1,1,3,3,6,4,11,15,10,11,11,13,13,6,1,0,5,8,7,5,2,8,0,2,10,3,6,6,4,3,0,0,0,1,0,0,0,0,2,3,3,8,14,18,16,8,9,10,8,11,8,6,2,5,9,5,4,1,10,3,1,9,0,8,11,3,4,0,0,0,1,-1,-3,-1,0,2,2,2,11,22,22,16,6,9,9,5,9,8,9,4,5,9,3,2,1,10,6,0,8,0,13,25,7,7,2,0,0,2,0,-3,-1,1,2,2,2,14,24,18,12,5,8,10,6,10,6,4,5,8,9,4,1,2,7,9,1,9,4,31,65,23,14,6,1,0,0,1,-1,-1,0,1,0,1,15,25,15,8,3,7,11,7,10,4,1,6,10,8,5,0,3,4,11,3,10,10,43,88,34,21,9,3,0,0,3,0,0,0,0,0,1,15,22,13,7,1,2,8,9,10,3,2,5,7,6,5,3,3,4,10,3,7,14,27,42,27,24,8,2,2,2,5,4,0,0,0,0,0,14,18,11,6,0,0,6,10,10,2,2,5,5,5,5,4,3,4,9,4,5,18,13,2,20,23,7,1,5,4,7,7,1,0,0,0,1,14,16,11,7,0,0,7,9,8,1,1,3,5,5,5,2,3,4,7,5,5,14,11,2,9,11,5,1,3,3,6,7,4,2,1,1,0,14,13,10,8,2,1,8,8,7,1,1,1,4,6,5,0,4,3,5,6,4,10,9,2,0,0,4,1,1,2,5,7,6,4,3,1,0,12,13,10,8,1,0,5,6,5,1,0,0,5,6,5,2,3,3,4,3,3,5,5,1,0,0,3,0,0,1,4,5,4,3,2,2,1,9,12,10,7,0,0,2,4,3,1,0,-1,5,6,5,3,2,2,3,1,2,2,2,0,0,0,3,0,0,1,4,2,1,2,1,2,4,5,11,13,7,1,-1,1,5,8,3,0,-1,3,4,0,2,2,2,3,0,0,1,1,0,0,0,4,0,1,2,3,1,1,2,0,2,4,2,12,15,8,1,-1,0,7,13,6,1,-1,2,3,-2,0,1,2,3,0,0,0,0,-2,0,0,4,0,3,4,2,0,2,3,0,1,5,8,14,11,6,4,0,0,6,13,10,5,1,3,5,-1,0,1,1,2,0,-2,-2,0,0,1,1,2,0,2,2,1,0,1,3,0,0,3,14,18,7,4,8,2,-1,4,15,15,10,5,5,6,0,0,1,0,1,0,-5,-4,0,3,2,4,0,0,0,1,0,0,1,1,1,0,1,12,11,2,3,8,6,1,3,12,13,10,5,7,6,0,0,2,-1,0,0,-5,-5,-1,1,2,3,0,0,0,0,0,0,1,1,1,1,1,11,3,-2,3,10,10,4,3,8,10,9,6,9,6,1,3,2,-4,-2,0,-5,-5,-2,0,1,2,1,0,0,0,0,0,1,0,2,2,0,9,1,-3,2,10,10,3,1,5,5,7,5,8,6,0,2,2,-5,-1,1,-3,-2,0,0,1,2,1,0,0,0,-1,0,1,1,1,0,0,6,0,-2,1,9,9,1,0,1,0,4,4,6,5,0,0,2,-4,0,2,-1,0,2,2,2,2,1,0,-1,0,-1,-1,0,1,0,0,0,6,2,0,2,10,8,1,0,0,0,1,3,4,4,1,0,2,-1,0,2,-1,0,4,3,3,4,3,1,0,0,0,0,1,2,0,-1,0,6,4,2,5,11,7,1,0,0,-1,0,2,3,3,2,1,4,0,1,2,-1,-2,6,3,4,8,5,3,2,3,3,2,2,2,0,-1,0,4,4,5,5,9,6,3,0,0,-1,0,2,2,2,1,0,6,3,0,0,-1,-3,6,2,3,6,2,2,3,4,3,2,2,2,0,0,1,2,4,8,5,5,4,5,-2,-2,-1,0,2,1,2,0,0,7,5,-1,-3,-2,-4,5,1,3,3,0,0,2,3,2,1,1,2,0,2,5,1,6,12,6,4,3,4,-1,-2,0,0,1,0,3,0,-1,5,5,0,-1,0,-3,2,1,3,3,0,0,3,3,2,1,1,1,0,2,5,0,9,15,9,4,3,2,0,0,0,0,0,0,6,1,0,1,4,1,1,1,-2,0,1,3,5,4,4,5,3,2,2,1,0,0,2,4,0,8,14,9,5,4,2,0,0,1,1,0,1,6,1,0,1,3,2,2,1,0,0,0,2,5,5,7,7,2,1,2,1,1,1,3,4,2,7,10,9,7,7,4,0,0,3,3,0,3,5,0,0,2,3,2,0,1,0,0,0,1,3,5,8,8,1,0,1,2,2,3,4,4,1,5,8,9,8,9,6,0,0,5,6,3,4,3,0,0,3,2,0,0,1,0,1,0,3,3,4,8,8,2,0,0,2,2,4,5,5,0,3,7,9,9,11,8,-1,0,8,12,12,5,1,0,0,5,1,-2,0,2,0,2,0,6,4,5,7,8,5,1,0,3,3,2,3,4,0,2,6,7,7,11,12,2,2,8,14,14,4,1,0,0,6,1,-4,0,2,1,2,0,5,4,4,7,8,7,3,1,2,3,2,2,3],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
