###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_57',geoSystem=['GDC'],position=(33.7083370213374,157.4583433915838,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(33.7083370213374,157.4583433915838,0.0),range=4495500.0,child1Url=['../../tiles/4/world10-14.x3d'],child2Url=['../../tiles/4/world10-15.x3d'],child3Url=['../../tiles/4/world11-14.x3d'],child4Url=['../../tiles/4/world11-15.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world5-7.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-5970,-4021,-4858,-4620,-4282,428,-6380,-5438,-5648,-5668,-5738,-5653,-4671,-4988,-5601,-5083,-3614,-2174,-3714,-4418,-4828,-5795,-4872,-4483,-4661,-4054,-2080,-5160,-2812,-5794,-5786,-4632,-5844,-5293,-5032,-5492,-5277,-5434,-4680,-3863,-3629,-2562,-5881,-4680,-4853,-4410,-4834,-2745,-4349,-3945,-5893,-4565,-3748,-5582,-5200,-5197,-5473,-5461,-5804,-5094,-2798,-2363,-3135,-5173,-4368,-4896,-4209,-1570,-6873,-5517,-5239,-5692,-5448,-5089,-3467,-4713,-5543,-5825,-5765,-5800,-5273,-2843,-3810,-5007,-2650,-4755,-4478,-2450,-4683,-6205,-5844,-5633,-5538,-5492,-2983,-5390,-5289,-5810,-5743,-6022,-5932,-5719,-5381,-5520,-5527,-5050,-4113,-5457,-1787,-5585,-5598,-5842,-1928,-4530,-5029,-5611,-4874,-5479,-5718,-6069,-6110,-5949,-5852,-5016,-5749,-5664,-5340,-5191,-4728,-756,-3636,-5665,-5695,-5776,-5567,-5715,-5866,-5822,-5681,-5609,-6121,-6142,-5974,-5924,-5863,-5881,-5601,-5211,-5529,-4882,-2343,-4313,-4962,-5591,-5719,-5609,-5845,-6109,-5801,-6120,-5567,-5865,-5809,-5942,-5936,-5900,-5540,-5564,-4692,-4770,-3573,-3651,-8119,-5636,-5906,-5982,-5821,-5879,-5988,-5909,-5944,-5823,-5860,-5896,-5909,-6103,-5830,-5195,-5336,-3760,-4397,-2866,-4056,-7488,-5779,-6158,-5996,-5767,-6109,-6142,-5971,-5607,-5989,-5712,-4845,-6063,-5932,-5583,-4944,-5280,-4761,-4580,-2332,-3948,-5902,-6055,-6226,-5956,-5901,-5781,-5651,-5816,-5960,-5996,-5878,-5901,-5581,-5491,-4252,-5230,-3320,-4477,-4461,-1931,-2836,-5677,-6216,-6370,-5997,-5899,-5696,-4385,-4775,-5861,-5868,-6035,-5899,-5429,-5188,-5406,-5283,-5467,-4595,-4241,-1986,-3089,-5795,-6015,-5775,-5790,-6003,-5420,-3829,-3451,-5791,-5977,-6374,-5952,-5611,-4967,-5260,-5257,-5362,-1778,-4418,-1894,-2535,-5347,-5905,-5098,-6079,-5559,-4506,-4458,-3001,-5702,-6152,-6168,-5927,-5652,-4611,-4413,-5332,-4808,297,-1767,-782,-4015,-5293,-5738,-6236,-6025,-5985,-5849,-5413,-3185,-5095,-6088,-6004,-5749,-5688,-5290,-3227,-3556,-2347,244,0,144,-2713,-5539,-5907,-5827,-6170,-6101,-5681,-5103,-4826,-4267,-5851,-5802,-5635,-5259,-5092,-4616,-3310,-4098,-918,1274,768,-606,-4408,-5670,-5840,-5966,-5690,-5626,-5259,-3852,-4856,-5211,-5685,-5403,-5226,-4837,-4441,-3794,-4463,-2519,-56,124,-109,-7365,-5606,-5663,-5852,-5909,-5790,-5556,-4472,-4722,-4777,-5295,-5123,-5250,-5548,-5069,-3786,-5385,-1439,-1230,-120,-19,-3265,-5295,-5638,-5574,-5850,-5891,-5705,-5591,-4539,-3942,-5527,-5412,-4143,-5705,-4735,-4924,-5432,-1341,-2607,-274,141,-2450,-5270,-5460,-5386,-5707,-5669,-5690,-5529,-5308,-4978,-3463,-5284,-6186,-5652,-4770,-5443,-5482,-2378,-3080,-2982,218,-2109,-5399,-5423,-5387,-5667,-5561,-5579,-5536,-5538,-4818,-5592,-5584,-1425,-4768,-5283,-5720,-4619,-2852,-3118,-3129,205,-1834,-5425,-5322,-5409,-5631,-5572,-5550,-5530,-5545,-4737,-5541,-5617,-1541,-4392,-5332,-5721,-5183],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
