###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore13-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3257755241139217,103.6616511706451,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[10,8,8,8,8,9,10,11,12,13,13,13,14,15,15,14,14,14,14,14,13,12,12,11,11,11,11,12,12,13,14,15,15,15,15,15,15,10,7,6,6,7,8,10,11,13,13,13,12,13,14,14,13,13,14,13,13,12,12,12,12,12,11,11,12,13,13,14,14,15,15,15,14,14,11,8,6,6,6,8,10,12,13,14,13,11,11,12,12,12,13,14,13,12,12,12,12,13,13,12,12,12,12,12,12,13,13,14,14,13,13,13,10,8,6,7,8,10,12,13,13,12,10,10,10,11,11,12,13,13,12,11,12,13,14,14,13,12,12,12,11,11,11,11,13,14,13,13,14,12,10,8,8,9,10,12,11,10,10,9,9,9,9,10,11,12,13,12,12,13,13,14,14,13,13,12,12,11,11,11,12,13,14,14,13,14,14,11,9,9,10,11,11,9,7,7,9,9,9,9,10,10,11,12,12,13,13,14,13,13,13,13,13,12,12,12,12,13,14,15,15,14,13,13,11,9,9,10,10,10,7,5,6,9,10,10,10,10,10,10,11,11,12,13,13,13,13,13,13,13,13,13,13,13,14,15,15,14,14,11,11,10,9,9,9,9,8,5,3,6,10,11,11,11,10,10,10,10,11,12,12,13,14,14,13,13,13,13,13,14,14,14,15,14,14,14,11,10,9,8,8,9,9,8,6,5,6,10,11,11,11,10,10,10,11,12,13,15,16,17,16,15,14,14,14,15,15,16,15,15,15,14,14,11,10,9,8,8,9,9,9,9,8,8,9,10,10,10,11,11,12,14,15,17,19,21,21,20,18,16,16,16,17,17,17,17,16,16,15,15,10,10,9,8,9,9,10,10,10,9,9,9,9,10,11,12,14,15,16,18,21,26,29,29,29,26,24,22,21,20,20,20,19,18,17,17,17,7,9,10,9,9,10,11,12,11,10,10,10,10,10,12,15,17,18,19,21,25,32,37,39,38,36,32,28,25,24,23,22,21,20,20,20,20,7,8,9,9,9,10,11,12,12,11,11,12,12,13,16,21,24,25,25,24,27,34,40,43,43,40,35,29,25,23,23,22,21,21,21,22,22,9,7,8,8,8,9,10,11,12,12,13,15,16,17,21,28,31,33,32,28,29,33,38,43,44,40,33,27,22,20,20,20,21,21,22,22,22,9,7,8,8,8,9,11,12,13,13,16,19,21,21,24,30,34,38,37,32,30,31,34,40,41,37,32,26,21,20,19,20,21,20,20,21,21,8,8,8,9,10,12,13,15,15,15,20,25,26,25,27,30,34,41,41,35,31,28,29,34,35,33,29,25,21,20,20,21,21,20,19,19,19,8,7,7,8,10,12,14,16,16,18,24,31,33,33,32,32,35,41,41,35,30,27,26,29,30,29,27,24,22,21,20,21,20,19,18,18,19,8,7,6,6,8,11,13,15,17,20,28,37,42,43,41,36,35,38,36,32,28,25,24,25,25,24,23,23,22,21,21,21,20,18,18,18,20,8,7,6,7,9,13,15,17,20,24,31,41,47,50,48,42,38,36,32,28,25,23,22,22,23,22,22,22,22,21,21,21,21,19,19,19,21,8,8,8,9,13,17,20,22,25,28,34,42,49,54,53,47,41,34,28,23,21,20,20,22,23,23,23,22,22,22,22,22,22,21,21,21,21,9,10,11,13,18,24,27,28,29,30,34,40,45,50,50,46,40,31,24,19,17,17,19,21,23,24,23,22,21,21,22,23,24,23,22,21,22,10,13,15,19,25,32,35,35,33,31,31,33,37,41,42,39,34,28,22,16,14,15,18,20,22,23,23,22,20,20,21,24,26,25,23,22,22,13,18,22,26,33,39,41,41,37,33,30,30,32,34,34,33,30,25,19,14,13,14,17,19,21,23,23,22,21,21,22,26,28,26,24,23,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
