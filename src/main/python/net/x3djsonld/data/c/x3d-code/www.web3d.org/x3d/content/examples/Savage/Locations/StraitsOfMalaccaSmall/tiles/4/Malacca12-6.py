###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca12-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(4.343236000485898,101.29356261898111,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[834,769,472,687,1029,1164,1022,1475,1900,1631,1806,1574,1036,932,443,393,387,259,208,242,210,219,1185,842,754,899,842,799,1189,1646,1799,1541,1517,1704,1501,1003,672,757,640,277,221,197,295,309,962,1148,922,510,847,1110,1262,1593,1507,1376,1439,1309,1171,1202,757,912,939,477,196,244,307,246,871,1147,846,790,810,1127,1373,1332,1273,1206,1198,1331,1112,847,816,948,1022,566,242,189,244,148,678,899,724,967,792,799,945,1303,1367,1312,1247,1411,1555,1069,865,676,510,404,289,207,227,217,756,1121,794,1215,1151,867,1325,1417,1341,1136,825,1058,1497,1542,1101,534,388,258,250,187,226,206,1030,1095,935,1171,1176,1150,1075,1013,933,1107,760,751,1204,1139,1086,536,592,264,307,330,139,172,1064,992,1234,1295,1253,1105,1425,1467,1274,1079,739,626,654,894,987,508,562,331,376,197,252,211,855,1163,1241,1438,1185,1101,1525,1541,1117,1006,928,980,979,515,415,475,363,549,372,184,180,246,825,831,1083,1484,1236,1272,1311,1465,1336,1064,1036,1109,1070,836,589,225,255,259,467,294,230,249,434,650,898,1095,1443,1444,1592,1566,1143,1194,1297,1306,1116,1088,648,265,272,234,214,528,272,259,863,881,740,993,1505,1524,1680,1445,1483,1473,1461,1346,1007,1050,624,311,496,348,415,616,343,318,1153,1093,769,1207,1557,1596,1715,1630,1504,1499,1534,1162,1055,694,416,475,732,423,643,951,583,445,808,1006,1078,1251,1375,1814,1608,1439,1601,1322,1193,982,690,760,608,704,625,586,642,994,665,476,1101,1099,1380,1672,2015,1827,1732,1321,1404,1053,1008,1106,898,1104,773,823,714,966,673,889,527,636,1054,836,1418,1575,1669,1514,1298,1193,1280,1268,1119,1345,1013,1304,814,1214,646,877,823,695,613,382,724,674,964,1630,1489,1376,1335,1565,1584,1545,1461,1304,1332,1412,918,1159,752,723,774,872,721,401,633,865,1078,1395,1394,1383,1455,1481,1721,1824,1709,1254,1191,1647,1271,931,630,718,650,1298,729,524,739,969,1061,1471,1442,1505,1540,1423,1489,1543,1289,1252,1506,1759,1381,862,508,725,735,1297,781,507,1010,773,1186,1232,1697,1777,1473,1450,1139,1156,1291,1468,1821,1623,1088,769,423,665,782,982,683,493,664,930,1171,991,1560,1667,1559,1240,983,987,1250,1326,1440,1322,1324,656,402,748,810,564,481,468,771,783,834,1195,1847,1676,1326,1088,983,978,1195,1137,1291,1112,914,524,557,406,679,482,425,382,701,803,865,1221,1844,1685,1322,1107,1012,949,1177,1166,1303,1133,879,499,573,379,670,504,422,403],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
