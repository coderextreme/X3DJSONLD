###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[4539,4605,4870,5040,4827,4803,5003,4321,3910,4699,4531,3662,3440,3700,1942,569,527,1160,1548,2064,1074,612,5095,4747,5157,4812,4776,4936,4375,4862,4131,4467,4562,4090,3777,3974,1515,999,615,836,1004,695,949,457,5036,5120,5031,5409,4736,4959,4552,4381,4626,4338,4234,4041,3957,3673,2884,1730,1111,600,388,417,537,257,5207,4935,5766,4991,4677,4926,5041,4726,4300,4896,4263,4385,3512,3468,3051,1880,1182,1262,2373,1020,659,572,5378,5055,4924,4600,4511,4941,5183,4650,4814,4534,4369,4106,3485,3466,2405,1856,1230,2881,1264,1448,952,1426,4841,5238,4993,4699,4655,4693,4704,4715,4515,4177,4706,3724,3643,3165,2753,2027,1874,729,529,676,1713,665,4899,4946,5079,5043,4503,4930,4725,4515,4267,4484,4343,4048,3787,3442,2597,1415,2042,1316,1116,419,347,753,4825,4912,5020,4894,4526,5120,4598,4426,5113,4291,4355,3532,3759,2200,2401,1895,2008,1309,1469,894,562,716,4959,5319,5073,4708,4476,3980,4663,4466,3953,4274,3660,2935,2403,2133,1784,1813,2007,1302,1525,1267,888,424,4926,4945,4683,4060,3736,2804,2788,2774,2893,3738,3033,3306,2488,2065,1642,2113,1716,1394,1564,1344,900,1089,4737,4087,4140,3657,2848,2681,2680,2990,3312,3618,3194,3132,2771,2652,1965,1727,1596,1621,1619,1115,1196,1027,4080,3888,4487,2999,2720,2737,3253,3077,3394,3616,3656,4230,3687,2775,1616,1390,1447,1503,1529,1277,691,1576,4330,3678,2959,2749,2694,2783,4412,4606,4741,4366,3848,3492,2904,1613,1506,1392,1135,1315,1276,1200,868,1892,3672,2970,2754,2717,2781,3450,4228,4594,4238,3988,4214,2381,1846,1457,1371,1310,1111,1352,1307,1183,978,1692,2311,3364,3634,2853,2785,2915,3902,3794,4213,3918,2324,2291,1356,1340,1315,1292,1099,1213,1393,1307,1304,1605,815,1451,1728,1754,2823,3262,3489,4949,4061,1821,1357,1587,1448,1246,1317,1148,1313,1364,1383,1412,1346,1149,805,794,900,1177,1199,1565,1945,3011,1841,1413,1503,1339,1297,1674,1347,1382,1035,1335,1270,1390,1240,1133,817,792,790,815,932,1052,1123,1427,1244,1406,1149,1150,1189,1232,1559,1459,1038,1098,1205,1021,993,1016,1120,947,790,1340,1416,1664,1535,1702,1534,1427,1149,1026,1192,1471,1354,1365,1791,1036,1023,1374,1641,1922,1498,1382,979,975,1102,1447,1929,2094,1568,1213,1054,999,955,881,867,921,1428,1332,1223,1655,1583,1507,705,943,1171,961,937,1186,1997,1950,1553,1414,949,952,989,1168,1138,1041,996,1412,1446,1536,1385,1422,1117,446,933,349,532,853,1350,1679,1392,1040,976,897,1106,1199,1582,1113,889,1070,1145,1219,1058,1244,-36,492,315,354,790,2958,1460,1278,1499,1739,1137,1382,1526,1199,1547,1630,1220,971,1046,1144,997,950,179,637,410,455,877,4153,1357,1403,1496,1564,1284,1515,1655,1233,1556,1645,1308,996,1072,1260,1054,943],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
