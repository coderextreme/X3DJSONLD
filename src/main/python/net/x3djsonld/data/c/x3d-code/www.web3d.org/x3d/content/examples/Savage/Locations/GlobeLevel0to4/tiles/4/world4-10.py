###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1916,-1465,-1653,-1813,-2847,-509,-3,-2274,-3248,-3403,-3909,-4165,-4362,-4502,-4577,-4783,-4646,-4502,-4547,-4433,-3633,-2890,-1389,-1659,-1553,-2234,-2917,-2217,-2516,-3060,-3282,-3460,-3916,-4217,-4426,-4533,-4613,-4776,-4764,-4716,-4798,-4684,-4302,-4136,-1414,-1654,-1892,-2422,-2904,-2783,-2926,-3271,-3459,-3715,-3976,-4308,-4475,-4615,-4711,-4775,-4818,-4840,-4840,-4725,-4334,-4378,-2029,-1960,-2250,-2407,-2820,-3016,-3031,-3294,-3458,-3628,-4075,-4415,-4531,-4619,-4729,-4836,-4978,-4856,-4805,-4627,-4556,-4465,-2692,-2723,-2563,-2509,-2486,-2444,-2902,-3308,-3526,-3861,-4216,-4470,-4637,-4600,-4782,-4891,-5001,-5082,-4890,-4681,-4474,-4465,-3089,-3033,-2886,-2673,-2633,-2440,-3121,-3381,-3280,-4041,-4261,-4290,-4659,-4829,-4882,-5197,-5057,-5045,-4914,-4889,-4369,-4336,-3424,-3435,-3269,-3000,-2991,-2827,-3336,-3633,-3693,-4035,-4309,-4388,-4673,-4840,-4734,-5056,-5016,-5203,-5006,-5013,-4444,-4347,-3213,-3061,-3150,-3081,-2979,-2983,-3402,-3624,-3641,-3946,-4388,-4495,-4700,-4865,-4545,-5159,-5107,-5105,-4926,-4953,-4857,-4400,-2645,-2678,-3082,-2807,-3242,-3183,-3652,-3949,-3934,-4120,-4580,-4579,-4765,-4879,-5118,-4941,-5079,-5075,-4965,-4661,-4501,-4426,-2146,-2341,-3297,-3119,-2914,-3538,-3287,-3656,-3727,-4419,-4638,-4695,-4769,-4949,-5152,-4990,-5153,-5151,-5137,-4614,-4432,-4424,-2757,-2809,-3237,-3272,-3534,-3750,-3975,-3748,-3869,-4235,-4419,-4755,-4890,-5054,-5179,-5337,-5199,-5166,-5092,-4879,-4548,-4382,-2316,-3023,-2121,-2927,-3025,-3485,-3900,-4354,-4238,-4210,-4518,-4787,-4866,-5137,-5191,-5412,-5201,-5121,-5026,-4642,-4240,-4357,-3052,-3142,-2733,-2996,-3354,-3822,-3375,-4354,-4110,-4166,-4325,-4768,-4948,-5141,-5291,-5562,-5294,-5150,-4947,-4697,-4600,-4651,-3414,-3547,-2493,-2163,-2861,-3300,-2988,-4009,-4014,-3667,-4127,-4736,-5025,-5190,-5268,-5298,-5254,-5192,-5147,-4359,-4529,-4410,-2919,-3755,-3354,-2037,-1781,-2730,-3894,-3801,-3950,-4147,-4584,-4732,-5064,-5285,-5277,-5313,-5285,-5168,-5110,-4698,-4405,-4416,-3204,-3890,-4554,-2059,-2488,-1807,-2521,-3072,-3447,-4396,-4066,-4621,-5110,-5224,-5275,-5246,-5182,-5132,-5047,-4648,-4503,-4345,-2356,-3425,-3304,-2769,-2134,-2651,-2186,-2884,-3709,-3928,-4779,-4463,-5349,-5161,-5256,-5232,-5168,-5110,-4931,-4504,-4429,-4440,-2760,-3686,-3710,-3317,-3153,-3148,-2932,-2543,-2891,-4194,-4176,-3975,-5202,-5090,-5118,-5129,-5084,-4952,-4635,-4477,-4359,-4572,-2633,-3093,-3666,-3374,-3679,-3425,-3448,-3173,-2246,-4347,-3806,-4409,-4813,-5036,-4960,-5142,-4981,-4698,-4562,-4438,-4499,-4363,-3208,-2807,-3365,-3636,-3781,-3623,-3997,-2843,-3167,-2924,-3170,-4778,-4713,-5012,-5057,-5195,-4883,-4625,-4469,-4358,-4381,-4251,-2858,-3322,-3645,-3615,-3627,-3532,-3898,-4004,-2940,-3164,-3001,-4521,-4705,-4663,-4900,-4987,-5026,-4655,-4342,-4381,-4260,-4300,-2086,-2865,-2776,-3761,-3446,-4074,-3519,-4847,-3649,-3135,-2092,-4107,-4717,-4377,-5055,-4931,-5038,-4683,-4239,-4433,-4473,-4443,-1744,-1712,-2503,-3985,-3892,-4159,-3937,-4844,-4131,-3235,-2979,-3016,-4034,-3960,-4854,-5046,-4827,-4757,-4300,-4591,-4622,-4521,-1435,-1690,-2521,-3503,-3979,-4139,-4011,-4784,-3854,-2987,-3011,-2745,-4365,-3977,-4697,-5011,-4794,-4592,-4661,-4560,-4600,-4512],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
