###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4056,-4031,-3994,-4192,-4057,-4065,-4164,-4089,-4313,-4475,-4198,-4483,-4507,-4414,-4614,-4516,-4271,-4506,-4606,-4526,-4478,-4465,-4142,-4052,-4037,-4271,-4170,-4266,-4106,-4208,-4242,-4269,-4270,-4587,-4198,-4285,-4887,-4451,-4474,-4627,-4582,-4583,-4548,-4430,-4075,-4242,-4154,-4293,-4146,-4344,-4016,-4223,-4473,-4490,-4521,-4374,-4388,-4355,-4602,-4874,-4812,-4836,-4551,-4714,-4686,-4618,-4292,-4227,-4277,-4289,-4248,-3704,-4098,-4451,-4455,-4368,-4514,-4526,-4567,-4480,-4712,-4561,-4967,-4872,-4811,-4734,-4809,-4724,-4383,-4306,-4286,-4319,-4314,-4570,-4281,-4314,-4440,-4510,-4589,-4511,-4369,-4665,-4777,-4422,-5154,-4835,-4834,-4754,-4801,-4788,-4416,-4303,-4353,-4400,-4373,-4489,-4469,-4470,-4465,-4751,-4618,-4652,-4758,-4614,-4625,-4840,-4973,-4939,-4907,-4914,-4940,-4875,-4323,-4285,-4335,-4357,-4425,-4436,-4470,-4666,-4651,-4690,-4689,-4650,-4774,-4600,-4794,-5112,-5271,-5011,-5012,-4961,-5064,-4878,-4320,-4335,-4460,-4458,-4378,-4395,-4574,-4660,-4679,-4715,-4702,-4856,-4830,-4801,-4877,-5284,-5054,-4695,-4944,-5044,-5205,-5072,-4310,-4397,-4436,-4550,-4504,-4423,-4582,-4605,-4624,-4783,-4701,-4871,-4906,-4896,-4898,-5156,-5007,-5384,-5079,-4958,-5120,-5124,-4302,-4489,-4481,-4582,-4484,-4435,-4668,-5027,-4724,-4825,-4854,-4986,-4925,-4834,-4956,-5000,-5148,-5367,-5347,-5400,-5065,-5164,-4384,-4449,-4602,-4607,-4684,-4582,-4886,-4820,-4884,-4905,-4729,-5121,-5031,-5001,-5036,-5105,-5248,-5487,-5238,-5232,-5234,-5308,-4393,-4571,-4659,-4666,-4740,-4678,-4979,-4924,-4858,-4929,-4902,-5216,-5248,-5097,-5080,-5146,-5362,-5389,-5336,-5561,-5396,-5386,-4586,-4563,-4757,-4758,-4907,-4815,-4684,-4954,-4834,-4194,-4973,-5317,-5265,-5101,-5146,-5147,-5375,-5561,-5364,-5500,-5546,-5570,-4881,-4476,-4758,-4762,-4741,-4819,-4805,-4286,-4927,-4399,-5162,-5152,-5197,-5132,-5120,-5343,-5258,-5593,-5515,-5604,-5451,-5613,-4542,-4508,-4611,-4792,-4904,-5084,-5349,-4728,-5251,-4880,-5287,-5374,-5341,-5039,-5083,-5485,-5407,-5325,-5391,-5626,-5568,-5522,-4271,-4500,-4484,-4708,-4713,-5399,-5284,-4920,-5260,-5058,-5060,-5322,-5446,-4945,-5091,-5671,-5414,-5647,-5511,-5589,-5586,-5551,-4718,-4373,-4463,-5120,-5357,-4433,-4888,-5257,-5475,-5399,-5009,-5345,-5753,-5608,-5066,-5442,-5557,-5486,-5531,-5554,-5568,-5563,-4445,-5702,-5182,-4855,-4535,-5038,-5015,-4716,-5125,-3999,-4998,-5323,-5601,-5606,-5566,-4914,-5612,-5598,-5570,-5624,-5475,-5487,-5699,-5480,-5676,-4605,-4867,-4971,-4956,-5008,-5374,-5482,-5219,-5478,-5511,-5447,-5588,-5463,-5620,-5662,-5589,-5584,-5526,-5423,-4783,-5795,-5245,-5125,-4837,-4458,-4404,-4620,-5306,-5390,-5363,-5274,-5273,-5336,-5567,-5516,-5554,-5520,-5707,-5205,-4761,-4302,-5140,-5185,-5364,-4940,-4025,-3069,-2596,-4162,-4480,-4959,-4806,-4859,-4778,-5236,-5338,-5269,-5324,-5106,-4755,-3025,-2145,-2022,-4756,-5052,-4771,-1595,-392,-4,-2,-1300,-4041,-4310,-4255,-4214,-4595,-4897,-4993,-4856,-4742,-4568,-2866,-1466,-1188,-1125,-2334,-2599,-2851,-257,-37,137,241,-7,-1150,-1306,-885,-711,-3664,-4339,-4541,-4317,-4049,-3263,-1540,-1142,-542,-125,-2281,-2668,-2586,-221,-1,158,153,-8,-371,-689,-195,-459,-3417,-4085,-4343,-4164,-3968,-2945,-1443,-1160,-408,-109],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
