###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore8-18.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2821169622239519,103.84837061432235,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[14,15,16,15,15,26,37,43,47,47,46,45,45,44,43,35,23,16,11,8,7,7,8,8,9,8,8,8,8,8,10,12,13,13,13,12,16,17,17,15,15,21,29,36,43,44,45,45,45,42,37,30,22,17,14,11,10,9,9,8,7,7,6,6,6,7,8,11,14,16,14,13,16,19,19,16,15,17,22,30,37,40,42,42,42,37,30,24,19,17,16,15,13,11,9,7,6,5,5,5,5,5,6,9,14,17,15,13,16,19,20,17,14,15,17,23,29,32,33,33,31,28,23,20,17,17,16,15,13,11,8,6,4,3,3,3,3,4,4,7,12,14,12,10,15,19,20,18,14,13,14,17,21,23,24,23,20,18,18,17,17,16,16,15,14,10,6,4,2,2,2,2,2,2,2,4,9,11,9,7,21,23,23,19,15,14,13,14,17,18,20,19,17,17,17,16,16,15,15,14,12,8,5,2,1,1,1,1,1,0,0,3,9,12,11,9,28,27,24,21,17,15,13,13,13,15,17,17,17,17,17,16,15,14,14,12,10,7,4,1,0,0,0,0,0,0,0,2,9,14,14,12,27,24,19,17,16,14,13,13,13,13,15,15,16,16,15,14,13,12,11,9,7,6,4,2,1,1,0,0,0,0,0,4,9,12,13,12,23,18,13,13,14,14,13,13,13,13,13,14,15,15,14,12,12,10,8,6,5,4,4,4,3,2,0,0,0,0,2,5,8,10,11,12,18,15,12,13,14,14,14,13,13,13,13,13,13,12,11,10,9,8,6,4,4,4,4,4,4,3,2,1,0,0,2,5,7,9,10,11,13,12,12,14,15,15,15,14,13,13,14,12,9,8,8,7,7,5,3,3,3,4,5,5,6,5,4,2,1,1,3,5,7,9,10,11,11,11,13,17,20,17,13,13,14,13,12,10,6,5,6,7,7,5,2,2,3,4,5,6,7,7,6,6,6,7,8,10,12,14,14,14,10,11,15,22,27,19,11,11,14,13,10,6,2,2,4,5,6,4,2,2,3,4,5,6,8,8,9,10,12,14,16,17,19,19,19,18,13,14,17,23,27,19,11,12,16,15,12,8,4,4,6,7,8,6,3,2,3,4,6,7,8,8,9,11,13,16,19,20,21,21,21,19,18,18,20,23,24,18,13,14,17,17,15,12,9,8,8,9,10,8,5,3,2,4,6,8,8,8,10,12,14,16,19,21,22,22,22,20,19,20,20,21,21,18,14,14,15,15,13,12,11,10,10,10,11,9,7,4,2,2,5,7,8,9,10,11,13,16,19,22,23,23,22,20,21,20,18,18,18,17,16,14,12,10,9,10,12,12,11,11,10,9,10,6,1,1,2,5,8,10,10,10,12,16,20,23,24,24,23,21,19,19,18,18,18,17,16,14,12,11,10,11,13,12,10,9,9,9,11,8,3,2,5,8,12,16,17,19,22,23,24,23,23,22,21,20,17,18,19,20,20,18,16,14,14,14,14,15,14,11,7,6,7,9,11,10,7,7,9,13,19,24,28,32,36,35,28,23,21,20,19,17,18,20,21,22,23,21,18,16,16,16,16,16,16,13,8,7,9,11,11,11,11,12,14,18,22,27,31,34,36,33,27,23,22,21,19,16,22,23,23,26,27,25,21,19,18,17,17,17,17,15,12,11,13,13,13,13,14,16,18,21,24,27,31,30,27,24,23,23,26,26,21,17,24,24,25,28,30,28,25,21,18,16,15,15,17,16,14,15,19,19,17,17,19,20,20,22,24,26,28,26,21,19,21,24,28,27,21,17,26,25,26,29,31,30,28,23,18,14,11,12,15,16,15,19,25,26,23,23,25,24,21,21,23,24,24,22,18,18,21,25,28,27,21,16],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
