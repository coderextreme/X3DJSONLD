###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore26-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4392877850278434,103.7334663412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[9,9,10,11,12,11,9,7,6,6,7,10,13,13,10,7,3,0,0,0,0,0,-3,-3,0,2,3,4,6,9,16,21,20,19,17,16,8,8,9,12,14,13,12,10,9,9,9,10,12,12,12,10,6,2,0,0,-1,-2,-1,0,1,3,4,4,7,12,18,25,26,26,26,26,8,8,9,12,16,16,15,14,13,11,10,10,11,12,14,12,8,4,0,-1,-3,-3,0,0,2,4,4,4,9,14,21,27,30,33,34,35,7,7,8,12,16,17,17,16,15,13,11,11,11,12,12,12,11,6,0,-2,-1,0,0,2,3,4,5,6,10,14,20,25,29,33,34,34,7,7,7,11,15,18,19,18,17,15,13,12,11,11,12,13,14,9,0,-3,0,1,3,4,4,4,6,8,11,13,18,23,28,32,33,33,7,8,8,12,16,19,20,19,17,14,12,11,11,11,11,11,11,8,2,0,0,2,3,4,5,6,8,11,13,15,19,23,27,31,32,33,7,8,10,13,16,19,21,20,17,14,11,11,11,11,11,10,9,7,3,2,3,4,4,4,6,7,10,13,15,17,20,23,26,30,31,32,8,10,11,14,16,17,17,16,14,12,11,11,11,11,11,10,9,8,4,3,4,4,5,6,8,10,12,14,15,17,20,23,26,29,31,32,10,11,13,15,15,15,14,12,11,11,11,11,11,11,11,11,10,9,5,4,4,4,6,7,10,13,13,14,16,17,20,23,25,28,30,31,11,13,14,13,13,12,12,11,11,11,11,11,11,11,11,11,10,9,7,5,5,6,8,10,12,13,14,14,16,17,20,23,25,27,29,31,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,10,9,8,7,7,7,10,13,13,13,14,14,16,17,20,22,24,27,29,31,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,10,9,9,9,10,12,13,13,13,14,14,16,17,20,22,24,26,28,30,9,9,9,9,9,9,10,10,10,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,14,14,16,17,20,22,24,26,28,30,8,8,8,8,9,9,10,10,10,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,13,14,14,16,17,19,22,24,26,28,29,8,7,7,7,8,9,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,14,14,16,17,19,21,23,26,27,29,7,7,7,7,7,8,9,10,10,10,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,14,14,16,17,19,21,23,25,27,28,8,7,7,6,6,7,8,9,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,13,13,14,14,16,17,19,21,23,25,27,28,8,7,7,6,6,7,7,8,9,10,10,10,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,14,16,17,19,21,23,25,26,27,7,7,7,7,7,6,6,7,8,9,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,13,14,16,17,19,21,22,24,26,27,7,7,8,7,7,6,6,7,7,8,9,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,9,9,11,12,13,15,16,18,20,21,6,7,7,7,7,7,6,7,7,7,8,9,10,10,10,10,11,11,11,11,11,11,11,11,11,10,5,2,3,3,4,5,7,9,11,13,6,6,7,7,8,7,7,7,7,7,7,8,9,10,10,10,10,11,10,9,7,5,3,2,1,0,-2,-5,-5,-4,-3,-2,0,0,2,4,5,6,6,7,7,7,7,7,7,7,7,7,8,9,10,10,10,10,10,7,2,-2,-6,-10,-13,-15,-15,-15,-14,-13,-12,-11,-9,-8,-5,-3],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
