###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_23',geoSystem=['GDC'],position=(-33.79166499031936,-22.54166197283422,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-33.79166499031936,-22.54166197283422,0.0),range=4495500.0,child1Url=['../../tiles/4/world4-6.x3d'],child2Url=['../../tiles/4/world4-7.x3d'],child3Url=['../../tiles/4/world5-6.x3d'],child4Url=['../../tiles/4/world5-7.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world2-3.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-5330,-5498,-5615,-5547,-5680,-5429,-5249,-4880,-4633,-4749,-4172,-3955,-3655,-3195,-2044,-3177,-3590,-3075,-3630,-4317,-3893,-5161,-5223,-5281,-5319,-5501,-5497,-5202,-4845,-4663,-4478,-4384,-4088,-3719,-2953,-3047,-2822,-3553,-3717,-3631,-3663,-4088,-4995,-5128,-5167,-5243,-5316,-5474,-5155,-4692,-4578,-4634,-4563,-3901,-3554,-3827,-2976,-3647,-3657,-3823,-3355,-3676,-3798,-5128,-5192,-5176,-5208,-5184,-5019,-4951,-4557,-4630,-4617,-4255,-3617,-3461,-2801,-3231,-3676,-4069,-4281,-4469,-3725,-4200,-5068,-5184,-5170,-5209,-5204,-4881,-5103,-4641,-4576,-4401,-4295,-3712,-3167,-2378,-3080,-3618,-3823,-4034,-3949,-4257,-420,-5098,-5182,-5200,-5245,-5147,-4987,-4722,-4384,-4258,-4148,-4005,-3582,-3392,-3075,-2971,-3126,-3778,-3872,-3747,-4032,-3746,-5133,-5138,-5156,-5194,-4856,-4991,-4728,-4524,-4256,-4157,-4027,-3666,-3388,-2162,-2642,-3099,-3308,-3234,-3972,-4666,-4933,-5161,-5098,-5110,-5184,-4867,-4991,-4276,-4100,-4182,-4122,-3842,-4027,-3203,-2976,-3188,-3330,-3065,-3527,-3790,-4863,-4910,-5145,-5067,-5053,-4936,-4880,-4747,-4153,-4036,-4188,-4093,-3804,-3924,-3167,-3195,-3629,-3845,-3224,-1507,-4180,-4557,-4998,-5042,-5003,-4965,-4970,-4841,-4462,-4324,-4333,-4514,-4169,-3988,-3840,-3080,-3210,-3449,-3948,-3727,-3144,-2825,-4790,-5165,-4842,-4937,-4826,-4922,-4621,-4485,-4365,-4278,-4277,-3994,-3755,-3806,-3256,-2986,-3525,-4182,-3805,-4110,-3170,-4365,-4588,-4788,-4701,-4694,-4763,-4600,-4441,-4078,-4319,-4271,-3975,-3862,-3527,-3430,-2737,-3426,-3814,-4024,-4185,-1767,-4279,-4484,-4055,-4425,-4641,-4485,-4424,-4288,-4134,-2925,-4483,-4381,-4083,-3525,-3435,-3099,-3329,-3873,-4067,-2414,-3784,-3521,-3654,-4081,-4083,-4418,-4289,-3216,-3602,-4107,-3466,-4218,-4212,-4020,-4015,-3638,-3253,-2439,-3206,-3922,-4217,-4015,-4191,-2539,-3521,-3737,-3852,-3638,-1781,-1518,-2847,-3341,-4620,-4615,-4421,-4147,-3870,-3482,-3551,-3420,-4174,-4078,-4383,-4339,-3251,-3444,-3882,-3523,-3897,-1497,-1392,-3882,-2277,-4675,-4470,-4511,-4241,-3942,-3453,-2656,-3626,-3815,-4217,-4446,-4653,-4423,-3490,-4013,-3751,-4290,-3707,-3508,-3728,-2122,-4853,-5357,-4481,-4602,-4273,-3423,-2637,-3410,-3832,-4211,-4394,-4489,-4676,-3112,-3056,-2632,-4576,-4406,-4342,-4980,-4450,-4945,-5230,-4846,-4440,-4057,-3690,-3088,-3265,-3855,-4453,-4486,-4715,-4661,-2331,-2443,-3282,-3271,-4643,-4013,-4807,-5282,-4915,-4626,-4582,-4133,-4282,-3482,-2837,-3486,-4115,-4469,-4300,-4755,-4937,-996,-2257,-2877,-3963,-4227,-4696,-4947,-5360,-5011,-4762,-4683,-3751,-3959,-3674,-3010,-3806,-4081,-4375,-4716,-4653,-5404,-105,-1994,-2830,-3787,-4155,-4745,-5233,-5379,-5182,-4755,-4408,-4755,-4106,-3874,-2756,-3574,-4416,-4670,-4919,-5080,-5467,-94,-1958,-2792,-3773,-4140,-4695,-5233,-5471,-5258,-4623,-4365,-4945,-4100,-3982,-2313,-3523,-4575,-4621,-4622,-5090,-5366],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
