###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3037,-5029,-6371,-5560,-5507,-5739,-5480,-5503,-5569,-5200,-5259,-5161,-5433,-5039,-5405,-5458,-5449,-5331,-5027,-5074,-5277,-5318,-1895,-4713,-6737,-5612,-5553,-5723,-5862,-5551,-5283,-5550,-5308,-5085,-5352,-6152,-5468,-5552,-5435,-5341,-5239,-5378,-5233,-5295,-2238,-4609,-7728,-5933,-5506,-5657,-5814,-5556,-3562,-5495,-5274,-5367,-5475,-5435,-5444,-5693,-5536,-4566,-5126,-5212,-5256,-5360,-2436,-3424,-8181,-6072,-5606,-5608,-5626,-5840,-4967,-5443,-5413,-5490,-5457,-5623,-5501,-5505,-5416,-5168,-5304,-5203,-5161,-4336,-2940,-2330,-6555,-6086,-5162,-5807,-5732,-5754,-5266,-5689,-5112,-5719,-5461,-5497,-5647,-5742,-5395,-5319,-5600,-5418,-5032,-5409,-3097,-1111,-5842,-6077,-5514,-5678,-5811,-5846,-5698,-5550,-5561,-5583,-5408,-5402,-5598,-5566,-5339,-5265,-5475,-5360,-5725,-5381,-3140,-1652,-5761,-6724,-5783,-5838,-5680,-5001,-5549,-5347,-5201,-5247,-5063,-5381,-4898,-5244,-5358,-5408,-5495,-5203,-5494,-5163,-2922,-1623,-4360,-8218,-5483,-5392,-5745,-4978,-5782,-5324,-5508,-5379,-5340,-5465,-3312,-5330,-5261,-5787,-5303,-5106,-5115,-4915,-1477,-1832,-3563,-8968,-5669,-5457,-5826,-5608,-5545,-5258,-5449,-5178,-5400,-5334,-4450,-5278,-5242,-5322,-5222,-5207,-4853,-5127,-1026,-1860,-2944,-6347,-5587,-5829,-4856,-5671,-5612,-5322,-5613,-5141,-5321,-5421,-5446,-5180,-5367,-5286,-5281,-5322,-4854,-5341,-1114,-2186,-2081,-5014,-5824,-5849,-4195,-5864,-5471,-5267,-5398,-5256,-5424,-5408,-5153,-5235,-5341,-5145,-5255,-5252,-5310,-4883,-1266,-2568,-1233,-3944,-6655,-5991,-5561,-5451,-5247,-5206,-5350,-5434,-5525,-5533,-5329,-5229,-5362,-5033,-5337,-5303,-5022,-4750,-2784,-2403,-758,-3511,-7419,-5580,-2954,-5496,-5208,-5051,-5521,-5535,-5538,-5554,-5180,-5473,-5085,-5274,-4359,-5121,-5073,-5200,-2598,-2503,-2025,-3458,-8040,-5424,-3958,-5344,-5286,-4644,-5621,-5585,-5532,-5564,-5266,-5397,-5444,-5118,-4829,-5196,-5340,-5186,-2626,-2033,-2251,-2541,-9114,-4892,-5136,-5177,-4819,-5120,-5433,-5608,-5566,-5592,-5575,-5349,-5276,-5090,-4894,-5184,-5018,-5285,-2978,-1778,-1853,-2820,-7850,-3959,-5383,-5275,-5594,-5403,-5572,-5626,-5552,-5585,-5432,-5608,-5470,-5130,-5525,-5310,-4780,-5134,-2636,-1838,-2195,-1941,-6256,-2166,-5294,-5405,-5613,-5570,-5617,-5823,-5595,-5396,-5272,-5428,-5458,-4947,-5227,-4800,-4998,-5274,-2712,-949,-2294,-1570,-5294,-4512,-5178,-5741,-5941,-4441,-5567,-5459,-5509,-5571,-5039,-5413,-5391,-5086,-5215,-5071,-5076,-5132,-2516,-1580,-1800,-525,-3379,-4925,-5402,-5400,-5719,-4827,-5783,-5625,-5645,-5699,-5269,-5320,-5410,-4692,-5064,-5042,-5140,-5000,-2471,-730,-1308,-841,-4914,-5344,-5312,-5605,-5609,-5599,-5762,-5760,-5675,-5709,-4655,-5471,-5333,-4657,-5102,-5004,-4905,-4910,-2440,-561,-1322,-1286,-4125,-5700,-5569,-5661,-5625,-5745,-5177,-5691,-5751,-5594,-5561,-5165,-5047,-5030,-5061,-4981,-4763,-4803,-2292,-420,-1991,-1233,-4159,-6160,-5671,-5687,-5807,-5659,-5661,-5654,-5772,-5695,-5544,-5343,-5373,-5102,-4782,-4772,-4457,-4885,-2658,-328,-2477,-1164,-3251,-6806,-5729,-5738,-5684,-5752,-5648,-5638,-5741,-5511,-5457,-5207,-5073,-5076,-4969,-4695,-4612,-4582,-2703,-1370,-2514,-1599,-2813,-7453,-5785,-5790,-5714,-5775,-5602,-5615,-5780,-5485,-5495,-5186,-4905,-5206,-4825,-4665,-4460,-4554],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
