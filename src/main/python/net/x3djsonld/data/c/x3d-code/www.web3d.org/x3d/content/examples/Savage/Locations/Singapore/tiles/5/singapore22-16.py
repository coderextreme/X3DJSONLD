###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore22-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[14,11,11,11,13,14,13,11,11,11,10,8,8,8,9,11,11,11,11,11,11,10,9,8,7,8,9,10,11,11,11,10,10,12,13,12,14,12,13,14,15,16,14,11,12,12,11,9,9,9,9,10,10,10,10,10,10,11,10,7,6,6,7,7,8,10,10,10,10,11,12,12,15,14,15,17,18,20,17,15,14,13,12,11,10,10,10,10,10,9,9,9,10,12,10,7,6,6,6,6,7,9,10,10,10,10,11,11,15,15,18,21,24,26,24,22,19,16,14,13,12,12,11,10,10,9,9,9,10,12,11,7,6,6,6,7,7,8,9,9,10,10,11,11,16,17,20,23,28,32,31,29,25,20,18,17,16,15,13,11,10,9,10,11,12,12,11,8,6,6,6,7,8,9,9,9,10,10,11,11,18,18,21,26,32,37,37,35,31,28,25,23,21,19,17,14,12,11,12,13,14,13,11,8,7,7,7,8,9,10,10,10,10,11,11,11,19,19,23,26,34,40,40,39,36,34,31,29,26,23,20,17,15,14,15,16,15,14,12,9,8,8,9,9,10,10,10,10,11,10,10,10,19,19,22,25,32,39,40,40,38,36,35,33,30,26,23,20,18,16,17,18,18,16,14,11,9,10,10,10,10,10,10,11,12,10,9,8,20,20,20,23,31,38,40,41,40,39,38,36,33,29,25,23,21,19,19,20,20,18,16,13,11,11,10,10,9,10,10,11,11,10,8,6,20,20,20,22,29,35,38,40,41,41,40,39,36,31,27,24,22,21,20,20,19,18,16,13,12,11,10,9,9,10,11,11,10,9,7,5,20,20,20,21,26,31,35,40,40,41,42,41,37,33,29,27,25,24,22,20,19,18,16,14,12,12,10,9,10,11,12,11,9,8,6,4,21,21,21,21,25,29,34,38,40,41,42,41,37,33,31,29,28,28,26,23,20,18,16,14,13,13,13,12,12,12,12,11,10,7,6,5,21,21,21,22,25,28,33,37,39,41,42,41,38,34,33,31,31,31,28,24,20,17,15,14,14,15,15,15,14,14,13,12,10,8,6,6,24,24,26,28,30,32,35,38,40,41,42,41,37,34,32,30,28,28,25,22,20,18,18,17,17,16,16,16,15,15,13,12,11,10,9,8,28,28,31,33,35,36,37,38,40,42,42,41,37,33,30,28,26,25,23,20,19,19,20,20,19,18,17,17,16,16,14,12,12,13,13,11,33,34,37,39,39,40,39,38,39,41,41,40,36,30,27,25,23,22,21,20,19,20,21,21,19,18,17,17,18,17,16,14,13,14,16,14,38,40,42,44,44,43,40,37,38,40,40,39,34,28,25,23,22,21,20,19,19,21,21,20,19,18,17,18,18,18,18,15,15,16,17,17,39,41,43,45,45,45,41,38,37,37,35,33,29,25,23,22,22,23,22,20,20,19,19,18,17,16,15,15,16,17,17,15,15,16,17,18,39,42,44,46,45,45,42,39,36,33,30,27,24,21,21,21,23,24,23,21,19,18,17,17,15,14,13,13,14,15,16,16,16,16,18,19,38,39,41,42,43,43,41,38,34,30,27,24,21,18,18,19,20,22,20,19,17,16,16,15,14,13,12,12,13,14,15,15,16,17,18,20,37,37,37,38,40,41,38,36,32,26,24,21,18,15,15,17,18,18,17,16,15,14,14,13,12,12,12,12,12,13,14,16,17,19,20,21,32,33,34,35,36,37,33,30,27,25,22,19,16,13,14,16,16,16,15,13,12,12,11,10,10,11,12,13,14,14,16,17,19,21,22,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
