###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_40',geoSystem=['GDC'],position=(11.208336350785146,-157.54166599614774,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(11.208336350785146,-157.54166599614774,0.0),range=4495500.0,child1Url=['../../tiles/4/world8-0.x3d'],child2Url=['../../tiles/4/world8-1.x3d'],child3Url=['../../tiles/4/world9-0.x3d'],child4Url=['../../tiles/4/world9-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world4-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-5102,-5916,-5797,-5411,-3932,-5307,-5464,-5241,-5180,-5349,-5161,-4700,-5005,-4722,-4658,-4712,-4570,-4471,-4471,-4400,-4511,-5192,-5531,-5384,-5349,-5319,-4687,-5469,-5388,-5371,-5141,-5071,-4996,-4833,-4823,-4753,-4517,-4523,-4426,-4361,-4464,-4392,-5427,-5245,-5397,-5446,-5569,-5372,-5100,-5213,-5321,-5313,-4877,-4799,-4833,-4630,-4629,-4093,-3953,-4532,-4219,-4304,-4337,-5502,-4776,-5392,-5375,-5618,-5209,-5229,-4563,-5133,-4863,-3703,-4649,-4692,-4386,-4349,-4265,-4383,-4423,-4278,-4380,-1928,-5420,-5214,-5509,-5496,-5526,-5081,-5449,-5203,-4039,-4720,-3104,-4504,-4333,-4329,-4604,-4472,-4330,-4336,-4389,-4328,-4483,-5102,-5365,-5093,-5407,-5294,-5432,-5490,-5313,-5175,-4324,-4060,-4779,-4780,-4709,-4804,-4593,-4451,-4466,-4363,-4247,-4397,-5508,-5372,-5043,-4956,-5347,-5314,-5499,-5362,-4468,-2427,-4402,-4770,-4895,-5007,-5354,-4708,-4532,-4403,-4317,-4393,-4286,-5358,-5444,-5125,-5648,-5593,-5464,-5327,-5028,-4313,-1522,-4439,-4500,-4899,-5095,-5141,-5089,-4826,-4536,-4397,-4422,-4525,-5796,-5083,-5469,-5733,-5843,-5679,-5070,-4086,-3122,-3147,-4133,-4941,-4831,-5184,-4859,-5106,-5046,-4750,-4884,-4633,-4594,-5911,-3825,-5555,-5863,-5706,-5454,-4832,-4773,-3222,-4370,-4599,-5133,-5054,-5304,-4647,-5078,-5096,-5198,-4863,-4796,-4601,-6023,-5429,-5791,-5834,-5622,-4805,-5153,-4940,-3824,-4236,-4806,-5197,-5161,-4962,-4963,-5252,-5207,-5087,-5097,-4873,-4687,-5886,-5859,-5978,-5904,-5113,-5070,-4801,-5183,-4817,-4567,-4848,-5285,-5123,-4935,-5019,-5204,-5047,-5119,-5042,-4760,-4693,-6097,-5964,-5394,-5750,-4393,-5241,-4703,-4663,-4774,-5229,-5204,-5240,-5189,-5108,-5310,-5143,-5152,-5122,-4921,-4878,-4854,-5814,-5983,-5452,-5523,-5476,-5305,-5336,-4136,-5224,-5508,-5319,-5209,-5120,-5292,-4955,-5329,-5181,-5160,-4928,-4958,-4970,-5588,-3941,-5277,-5537,-5035,-5500,-5391,-5070,-5372,-5216,-5409,-5036,-5261,-5413,-5471,-5271,-5097,-4957,-4925,-4966,-4988,-5710,-4675,-5288,-5517,-5603,-4479,-5234,-5407,-5557,-5713,-5585,-5367,-5565,-5388,-5347,-5314,-5084,-4838,-4956,-4766,-4699,-5701,-5216,-2895,-5121,-5791,-5171,-5321,-5546,-5667,-5646,-5658,-5434,-5737,-5448,-5110,-4315,-5083,-4918,-4849,-4803,-4864,-5580,-4703,-5708,-6054,-5389,-4979,-5453,-5494,-5407,-5590,-5542,-5481,-5686,-5543,-5390,-5378,-5359,-5641,-4688,-4870,-4840,-5163,-5193,-2366,-5393,-5150,-5104,-5288,-5515,-5710,-5601,-4976,-4991,-5279,-5350,-5219,-5264,-5380,-5481,-5245,-5473,-4790,-4936,-3662,-2683,-4872,-5229,-2130,-5413,-5463,-5581,-5368,-4781,-5098,-5036,-5250,-5430,-5514,-5339,-5404,-5669,-5325,-5071,-4700,-4729,-4149,-2167,-2492,-4951,-5444,-5453,-5371,-4914,-4452,-4992,-5229,-5370,-5428,-5368,-5475,-5496,-5399,-5144,-5137,-4899,-4843,-4554,-2685,-2634,-4999,-5278,-5427,-5073,-4950,-4460,-4604,-5097,-5385,-5394,-5360,-5512,-5521,-5410,-5137,-5163],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
