###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore13-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3257755241139217,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[19,18,16,16,15,15,15,16,17,18,19,17,16,17,19,24,29,29,27,23,18,15,13,14,18,21,23,24,22,20,18,17,17,18,21,22,19,18,17,17,16,15,15,15,15,16,17,18,18,17,19,21,25,30,30,28,25,20,17,14,16,19,22,24,25,24,22,20,18,17,17,19,20,18,17,17,17,15,14,14,14,14,15,17,18,18,18,20,22,25,29,29,29,25,20,16,14,16,19,23,26,27,26,24,22,19,18,19,20,21,20,17,17,16,14,13,13,13,14,15,17,19,19,19,21,22,25,27,28,28,24,19,15,13,15,18,22,26,27,27,25,23,20,19,20,22,24,23,15,15,15,13,12,12,12,14,16,18,20,21,21,22,24,25,26,27,27,24,18,15,13,14,17,21,24,26,26,26,23,20,20,20,23,25,24,14,14,14,13,12,12,11,13,16,18,21,22,23,24,25,26,26,26,26,23,18,15,13,14,16,19,21,23,26,25,22,20,20,21,24,25,24,13,14,14,14,13,12,11,13,16,18,21,22,24,25,27,28,27,26,25,22,20,17,16,15,15,17,18,21,24,25,22,21,21,22,25,26,24,14,15,15,15,14,13,12,13,15,17,20,22,24,27,29,29,28,25,23,22,22,20,18,15,14,14,16,19,23,24,23,22,22,24,26,26,24,17,17,17,16,14,14,12,14,15,18,21,23,25,27,29,28,27,24,22,22,24,23,20,17,14,14,16,19,22,24,23,22,23,25,26,26,23,22,21,19,16,13,13,13,15,16,20,23,25,26,27,29,27,25,23,22,23,26,25,21,18,15,14,18,20,22,23,23,23,24,25,26,25,23,26,24,22,18,14,13,13,15,17,21,24,26,27,27,28,27,24,23,23,24,28,27,24,20,16,15,18,20,22,23,24,24,25,25,26,25,24,29,26,23,19,15,13,12,15,18,21,24,26,27,28,29,27,24,24,25,26,29,29,27,23,17,16,18,20,22,24,26,27,26,26,26,25,26,28,25,21,18,14,13,13,15,17,20,23,25,27,28,29,28,26,27,28,29,30,30,28,24,19,17,18,19,21,23,25,26,25,25,27,29,30,25,22,18,16,14,14,14,14,14,18,22,24,26,27,30,31,30,30,31,32,32,31,28,25,21,18,17,16,18,20,22,23,24,26,31,35,36,22,19,17,17,16,16,15,14,13,17,21,24,26,28,31,31,32,32,31,31,31,29,27,24,21,18,16,15,17,18,20,23,26,30,35,40,40,20,18,18,19,20,18,16,14,13,17,21,25,27,30,32,32,33,32,30,29,28,27,25,22,20,18,15,15,16,18,21,25,30,35,40,44,43,18,19,19,21,22,20,17,16,15,20,25,28,30,31,33,33,32,31,28,26,25,24,22,20,18,17,15,15,16,18,20,25,31,37,41,44,44,18,20,21,23,24,21,17,18,20,26,33,34,33,34,34,33,31,29,26,24,22,21,19,17,15,14,14,16,17,19,20,24,30,36,40,43,43,19,21,23,25,25,22,18,21,24,31,38,37,35,35,35,34,31,28,26,24,22,21,19,18,17,17,17,18,20,21,22,25,29,33,37,40,42,20,22,24,25,26,22,19,23,29,35,41,39,35,34,36,34,31,29,27,26,26,24,23,22,23,23,22,23,24,24,26,27,28,30,34,37,39,21,22,24,25,25,23,19,24,29,35,41,38,34,34,35,34,31,30,28,28,29,27,26,26,27,27,26,26,26,26,28,29,29,30,33,37,39,20,21,23,24,25,22,19,22,26,31,36,35,33,33,33,32,30,30,29,29,30,30,28,28,28,28,27,27,27,28,30,32,32,33,36,40,42,19,20,21,22,24,21,18,21,25,28,32,32,32,33,33,32,31,30,28,28,29,30,30,29,28,27,27,28,29,30,32,34,34,35,37,40,43],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
