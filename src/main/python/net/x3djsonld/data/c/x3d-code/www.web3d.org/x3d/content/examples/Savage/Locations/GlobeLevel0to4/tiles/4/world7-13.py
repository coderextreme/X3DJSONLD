###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2677,-4286,-5452,-5163,-5166,-5509,-5489,-5234,-2974,-2889,-1367,-249,-93,-90,-94,-109,-88,-44,40,16,108,138,-3261,-4381,-4166,-4372,-5676,-5747,-5548,-5250,-3545,-3406,-1211,-104,-138,-52,-89,-129,-80,-71,0,-27,68,8,-4295,-3753,-4522,-4155,-6058,-6358,-5749,-4833,-4439,-2397,-1731,-905,-232,-105,-92,-119,-56,-43,6,27,-21,-26,-5032,-4492,-6525,-4537,-4019,-3286,-3968,-4447,-1590,-1069,-786,-1319,-1138,-429,-15,-106,-35,-67,-49,-38,-10,-57,-5531,-3295,-2131,-2041,-3875,-4339,-4068,-3641,-759,-1480,-1222,-105,-1548,-1016,-262,-43,-113,-90,-80,-45,-67,-57,-3694,-2527,-3068,-4021,-4525,-4214,-3124,-1180,320,-1467,-3008,-1590,373,-2517,-1322,-288,-55,-179,-138,-52,-27,-50,-3372,-3035,-3074,-3944,-3096,-2691,-2299,-145,-34,-2337,-3168,-3275,474,-737,-2245,-1535,-527,-448,-300,-112,-78,-67,-1333,-1414,-1816,-737,-385,832,5,-1068,-288,-128,-3004,-3226,-3139,2145,-210,-1902,-2305,-1428,-677,-225,-166,-120,-258,-44,7,-34,-874,-148,26,72,35,-102,-3,203,401,-2160,-239,-1653,-1293,-970,-631,-468,-16,-56,156,1474,1671,-654,-1350,-1544,-1936,-3242,-4042,-5036,-2894,-3231,-3535,-4100,-552,-2184,-3252,150,-3,-1130,-17,-64,49,16,-88,-101,-960,-577,-256,-2279,-3597,4,-1718,-3511,-3837,-4325,-3717,-2999,-3225,-3350,-235,-616,-110,-41,111,10,134,-71,-6,-550,-353,-13,-2495,-3,-43,-3518,-4080,-4324,-4440,-4690,-3961,-4390,-3196,-131,-215,-52,-31,-63,-56,-82,-16,-516,-388,-360,-1858,-1,-1728,-3530,-3720,-2782,-3838,-4554,-4783,-2659,-6292,-1036,-2805,-243,-53,-20,-66,-62,-75,-651,-414,-758,-468,-2261,-1814,-4004,-1086,-2762,-4166,-4947,-4983,-3481,-7169,-363,-2235,-2802,-69,-62,-58,-31,-60,-228,0,-402,441,-2424,-39,-1155,-93,-3265,-3833,-1215,-5214,-4358,-7270,-40,164,-3523,-47,-69,-46,-25,-38,-17,-725,-240,135,-1911,-3,-1513,-4808,-3019,-3736,-3903,-4903,-4491,-6768,-889,-1296,-2809,-58,-51,-29,-22,-2,-83,-1982,-552,209,-1248,47,-5232,-4695,-4451,-2658,-3867,-2311,-1176,-4154,-631,-1198,-1298,-40,-28,-21,13,-9,-39,-1781,-1200,65,-130,27,-1288,-4595,-4925,-3122,-3790,-2190,-3940,-84,-1257,1015,-40,-27,7,0,6,12,-38,-268,180,1880,1255,77,-2978,-4599,-5186,969,-792,-9,-740,-398,-1758,65,423,0,14,14,6,109,-61,-47,826,485,607,565,-3744,-4458,-4748,-1252,-2045,97,5,-1075,0,43,99,25,25,10,9,361,-5,-311,-325,1484,876,-1449,-3676,-5135,-4128,-3704,-3759,-2507,-1176,-308,-301,-3,25,28,24,37,30,594,-40,-1988,-1260,1298,546,-1049,79,189,217,-1201,-1216,-1677,349,-43,23,45,104,116,129,47,77,157,-35,-1828,-1620,1182,494,69,27,-1146,-2326,-2520,662,-273,-854,0,58,921,2491,168,116,40,90,202,-6,-1678,-1683,975,12,228,294,-1924,-2033,-2628,54,-603,-756,0,314,597,2197],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
