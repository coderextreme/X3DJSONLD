###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,-112.54166465504323,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3984,-4161,-4212,-4068,-4141,-4145,-4554,-4263,-4571,-4179,-4296,-4383,-4475,-4710,-4682,-4529,-4991,-5524,-5334,-5129,-5190,-4996,-4102,-3929,-3962,-3920,-4154,-4223,-4356,-4417,-4433,-4415,-4379,-4488,-4645,-4364,-4588,-4767,-4796,-5450,-5219,-5229,-5268,-5241,-3668,-3838,-3944,-3874,-4064,-4205,-4033,-4367,-4437,-4556,-4564,-4455,-4308,-4640,-4597,-4582,-5046,-5474,-5351,-5414,-4949,-5365,-3630,-3810,-3886,-3899,-3950,-4060,-4280,-4167,-4498,-4456,-4454,-4703,-3905,-4495,-4524,-4640,-5316,-5402,-5438,-5441,-5097,-4427,-3586,-3699,-3876,-3844,-3971,-4039,-4054,-4279,-4149,-4371,-4281,-4531,-4473,-3697,-4523,-4566,-4946,-5823,-5635,-4880,-4274,-4634,-3557,-3707,-3696,-3803,-3899,-4111,-4166,-3921,-3949,-4082,-4368,-4487,-4501,-4539,-4368,-4657,-4658,-5147,-5505,-4742,-4574,-4824,-3618,-3627,-3552,-3821,-3986,-3866,-4029,-3972,-4157,-3700,-4361,-4376,-4450,-4401,-3990,-4425,-4732,-5659,-4976,-4905,-4580,-4780,-3623,-3663,-3503,-3546,-3931,-3834,-3990,-4097,-3961,-3982,-4298,-4377,-4379,-4525,-4485,-4434,-4540,-4973,-4756,-5017,-4779,-4963,-3534,-3594,-3662,-3845,-3814,-4022,-4006,-4256,-4169,-4270,-4558,-4494,-4444,-4592,-4722,-4422,-4849,-4745,-5018,-4908,-4935,-4934,-3477,-3608,-3664,-3490,-3872,-3973,-3847,-4126,-4149,-4341,-4372,-4404,-4308,-4391,-4708,-4465,-4707,-4879,-4749,-4828,-4901,-4871,-3436,-3549,-3722,-3715,-3964,-3833,-3849,-3970,-4075,-4139,-4331,-4554,-4592,-4548,-4579,-4700,-4749,-4908,-4865,-4761,-4820,-4823,-3476,-3644,-3624,-3748,-3680,-3816,-4229,-4191,-4081,-4034,-4122,-4466,-4354,-4490,-4567,-4639,-4852,-4919,-4903,-4838,-4767,-4775,-3514,-3483,-3577,-3715,-3882,-3882,-3918,-4018,-3760,-4093,-4251,-4291,-4385,-4175,-4305,-4423,-4737,-4918,-4794,-4892,-4801,-4495,-3619,-3528,-3497,-3438,-3696,-3772,-3956,-3922,-4196,-4177,-4235,-4128,-4233,-4189,-2858,-4487,-4531,-4861,-4873,-4892,-4731,-4681,-3113,-3210,-3239,-3482,-3638,-3799,-3811,-3973,-4097,-4140,-4307,-4239,-4410,-4380,-4223,-4557,-4581,-4812,-4807,-4702,-4682,-4580,-2856,-3044,-3195,-3388,-3692,-3942,-3874,-4016,-4159,-4139,-4297,-4243,-4274,-4273,-4281,-4601,-4758,-4858,-4813,-4585,-4664,-4361,-2902,-3040,-3180,-3350,-3488,-3879,-3900,-4079,-4071,-4232,-4275,-4042,-4394,-4429,-4144,-4639,-4667,-4758,-4732,-4592,-4545,-4447,-2800,-2984,-3219,-3323,-3593,-3824,-3830,-3813,-3969,-4198,-4261,-4339,-4186,-4443,-4638,-4643,-4682,-4623,-4558,-4500,-4412,-4323,-2769,-3042,-3157,-3288,-3538,-3675,-3843,-3940,-4090,-4244,-4012,-4380,-4165,-4217,-4356,-4668,-4661,-4775,-4878,-4464,-3994,-4010,-2723,-2793,-3189,-3191,-3385,-3687,-3706,-3996,-4122,-4135,-4311,-4056,-4311,-4191,-4347,-4486,-4576,-4435,-4211,-4491,-4100,-3862,-2799,-3042,-3080,-3164,-3357,-3396,-3471,-3901,-3942,-3880,-4110,-3540,-4176,-4130,-4120,-4200,-4339,-4377,-4263,-4256,-4102,-4150,-2470,-2901,-3164,-3229,-3334,-3331,-3397,-3708,-3906,-4007,-3856,-3766,-4202,-4073,-4110,-4144,-4163,-4103,-4089,-4113,-3956,-3915,-2654,-3009,-3126,-3228,-3264,-3515,-3548,-3386,-3793,-3789,-3866,-3940,-3893,-4062,-4258,-4252,-4178,-4020,-4134,-4493,-4459,-4181,-2595,-2991,-3122,-3197,-3186,-3476,-3569,-3212,-3767,-3742,-3906,-3969,-3869,-4079,-4284,-4218,-4578,-4160,-4115,-4636,-4065,-3973],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
