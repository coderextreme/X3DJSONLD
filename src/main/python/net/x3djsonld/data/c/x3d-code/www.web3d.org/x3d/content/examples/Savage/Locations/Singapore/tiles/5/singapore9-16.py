###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore9-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2908486746019459,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[9,7,5,5,8,11,13,13,11,8,7,6,11,18,19,17,16,14,15,16,18,19,19,20,19,17,15,13,12,11,12,13,16,20,24,27,7,6,5,5,7,9,11,12,10,8,7,6,10,16,18,18,17,16,16,15,17,19,21,23,22,17,14,11,12,14,15,13,13,16,19,24,7,7,7,7,8,9,10,11,10,8,9,9,11,13,16,19,20,20,16,12,14,19,24,27,25,16,11,9,13,21,23,16,10,9,11,14,8,9,9,9,9,9,9,10,10,10,11,12,12,11,15,20,22,22,18,12,15,21,27,30,27,17,11,9,14,25,28,18,9,6,7,10,11,10,10,10,8,7,8,9,11,12,13,13,12,11,14,19,22,23,20,17,19,26,30,31,28,20,15,11,14,25,27,17,8,6,6,10,12,11,11,11,9,8,9,10,12,14,14,14,12,10,14,20,23,23,21,18,21,28,30,28,26,22,18,14,16,23,23,15,9,7,9,15,13,12,12,12,12,11,11,11,13,15,15,13,11,9,14,21,23,24,20,16,18,24,25,23,21,21,21,19,18,19,17,12,9,9,14,24,12,13,13,14,14,14,13,11,13,15,15,13,11,9,14,20,22,22,19,14,16,20,21,19,19,21,23,23,21,17,13,10,9,11,17,29,12,13,14,14,15,15,12,10,12,15,15,13,11,10,14,18,19,19,17,13,14,16,18,18,20,22,24,26,23,18,13,9,9,13,19,27,14,15,15,15,14,13,11,10,12,15,15,13,12,12,14,17,18,18,16,13,13,14,16,19,20,21,22,24,22,17,13,10,11,16,22,25,17,18,16,15,13,10,10,11,14,16,15,13,13,13,15,17,17,17,16,14,13,14,16,19,19,16,14,15,15,14,12,12,14,20,24,25,18,18,16,14,11,8,10,13,15,17,16,15,15,16,18,21,21,18,17,15,14,14,16,19,17,12,9,9,10,13,14,15,18,24,28,26,18,17,14,12,9,7,9,13,15,18,20,21,21,21,25,30,28,23,19,16,15,16,16,16,14,11,11,10,13,18,20,19,22,30,34,28,17,15,12,10,9,8,11,15,17,20,23,26,26,26,31,37,34,27,22,19,18,18,17,14,13,13,14,16,19,25,27,24,25,34,38,31,16,14,13,12,13,14,18,22,22,21,24,26,29,31,32,35,33,29,27,26,23,22,20,18,17,17,19,21,25,32,34,29,28,34,38,34,16,14,14,15,18,20,24,28,26,23,24,26,30,36,35,32,31,30,31,32,29,25,23,22,21,21,23,26,31,38,40,34,31,34,37,39,17,15,16,18,22,25,28,30,28,25,25,25,32,43,41,37,33,30,33,36,34,28,25,25,25,24,26,30,36,42,43,37,33,35,39,46,19,18,17,19,24,29,31,31,29,27,26,26,36,49,47,40,35,30,33,39,37,29,26,27,26,25,27,32,39,43,44,39,36,36,41,52,21,20,18,18,22,27,30,32,31,29,30,31,38,47,42,34,30,29,31,36,34,29,26,27,26,23,24,30,35,39,40,39,38,38,40,47,23,21,18,16,20,24,28,32,31,30,32,36,38,42,35,25,25,27,30,32,31,28,27,27,24,20,21,25,29,33,35,36,37,38,38,39,26,23,20,19,21,23,27,30,30,30,31,33,33,34,28,21,22,25,27,27,27,29,28,26,23,20,20,23,26,28,30,30,31,32,31,30,29,25,23,22,22,23,26,28,29,29,29,28,27,27,23,20,21,24,24,23,25,29,29,26,23,21,21,22,24,25,25,24,24,24,24,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
