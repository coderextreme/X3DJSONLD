###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore10-17.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2995803869799398,103.83400758019333,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[23,22,21,21,19,18,19,20,23,25,28,30,30,30,35,42,35,23,21,24,23,20,16,11,11,14,15,15,13,9,10,17,26,35,39,33,27,20,20,19,19,19,20,23,27,30,34,33,32,31,30,33,36,30,20,19,23,23,21,17,13,13,14,17,18,17,13,14,22,30,37,39,34,30,19,21,22,22,24,26,31,36,41,44,40,34,31,29,27,25,22,19,20,23,24,24,21,16,14,14,17,21,21,17,19,27,34,38,38,34,31,25,27,28,29,31,33,38,42,42,42,36,30,28,26,24,23,21,19,20,22,22,21,19,17,15,16,18,21,23,23,25,30,34,34,32,31,28,33,36,36,37,39,41,43,45,41,35,29,24,24,25,24,23,22,21,20,19,18,16,16,16,17,17,19,22,25,28,30,33,32,29,25,25,25,38,40,40,38,38,39,42,45,44,39,31,23,23,25,25,25,24,23,21,18,16,14,16,20,22,23,23,23,24,27,29,29,28,26,24,24,23,40,42,40,37,34,33,38,45,49,50,38,24,23,25,27,28,27,25,22,17,14,13,17,24,29,31,29,24,22,24,26,24,23,24,25,25,23,38,38,38,37,33,31,35,41,46,48,38,26,24,25,26,27,26,24,22,20,18,17,21,28,33,36,34,26,22,24,24,22,22,24,26,26,24,35,31,33,36,34,31,32,35,38,41,35,28,25,24,24,24,22,20,21,23,24,23,26,32,37,40,38,29,24,24,24,23,22,24,26,27,25,31,29,33,36,36,34,33,33,35,38,35,30,27,25,24,22,20,18,21,26,27,27,30,36,40,43,39,29,24,24,25,24,24,26,27,27,25,29,30,34,37,39,39,36,33,34,37,36,32,30,27,24,21,19,17,21,27,29,30,34,39,42,43,38,27,22,23,26,26,27,28,28,27,24,29,31,33,36,37,38,35,32,32,34,34,34,32,30,26,22,20,18,22,28,31,32,35,39,40,39,34,26,23,24,26,27,28,28,27,25,22,31,31,32,33,34,34,33,32,30,29,31,35,35,34,29,24,21,19,23,29,32,34,35,37,36,33,30,27,26,26,26,27,27,27,26,23,19,33,34,32,31,32,34,34,33,30,26,29,35,35,34,30,24,22,22,25,29,33,37,38,38,35,31,30,31,30,29,27,26,24,23,21,19,16,36,37,32,29,32,36,37,36,30,25,29,35,35,32,28,24,23,24,26,30,34,40,42,41,37,34,33,35,36,34,30,24,20,17,14,14,12,35,37,34,31,33,36,36,35,31,27,30,35,34,31,28,25,25,27,28,31,36,43,45,43,40,37,36,37,37,35,31,23,17,14,11,12,10,32,36,37,37,36,34,32,31,30,31,33,35,33,31,29,28,28,28,30,32,38,45,47,46,44,41,39,37,36,33,29,23,18,14,12,11,10,28,33,36,38,37,34,31,29,30,33,35,36,35,34,32,30,29,28,29,32,37,43,46,46,45,42,38,34,31,29,26,21,17,14,12,11,10,24,27,33,36,37,36,32,28,30,33,36,37,38,38,35,32,29,25,26,29,34,39,42,44,44,41,36,29,24,22,21,18,15,13,12,12,11,20,24,29,34,37,39,33,27,28,32,36,39,40,39,35,31,28,25,26,29,32,35,39,41,40,38,32,25,21,19,17,14,13,12,12,12,11,18,21,27,32,38,40,32,23,25,31,36,40,39,36,33,29,27,27,28,30,32,34,36,37,36,33,29,25,22,19,16,12,10,12,12,11,8,19,22,28,34,38,39,30,20,23,30,36,40,38,35,30,25,25,27,27,28,29,32,33,33,32,29,27,24,22,19,15,11,9,11,12,10,7,24,29,35,38,38,34,26,20,23,29,35,41,39,35,29,22,20,21,22,23,24,27,28,28,28,27,25,23,21,18,15,12,10,11,11,9,8],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
