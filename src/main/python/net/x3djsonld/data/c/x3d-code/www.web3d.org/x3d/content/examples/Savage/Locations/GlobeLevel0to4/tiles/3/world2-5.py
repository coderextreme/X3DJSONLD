###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_25',geoSystem=['GDC'],position=(-33.79166499031936,67.4583407093748,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-33.79166499031936,67.4583407093748,0.0),range=4495500.0,child1Url=['../../tiles/4/world4-10.x3d'],child2Url=['../../tiles/4/world4-11.x3d'],child3Url=['../../tiles/4/world5-10.x3d'],child4Url=['../../tiles/4/world5-11.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world2-5.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-2737,-2490,-1986,-1058,-3466,-4148,-4477,-4536,-4403,-3535,-712,-2779,-2969,-3465,-3436,-3521,-3375,-3690,-3472,-3554,-3478,-1700,-1415,-2390,-2167,-3374,-4134,-4484,-4759,-4493,-4562,-3202,-3514,-3359,-3702,-3639,-3469,-3368,-3557,-3558,-3496,-3344,-1598,-2315,-2914,-3283,-3567,-4334,-4559,-4760,-4900,-4563,-4327,-4143,-3649,-3588,-3659,-3466,-3369,-3470,-3352,-3357,-3144,-2664,-2825,-2414,-2963,-3986,-4334,-4726,-5068,-5008,-4481,-4366,-4000,-4311,-3626,-3202,-3231,-3209,-3019,-3113,-3017,-2898,-2767,-2967,-3058,-3946,-4180,-4499,-4853,-5153,-5105,-5010,-4298,-4093,-4054,-3806,-3276,-2933,-2826,-2795,-3182,-2562,-2575,-2467,-2909,-3396,-3660,-4195,-4697,-4957,-5099,-5165,-4572,-4259,-4108,-4069,-3793,-3092,-2634,-3009,-2961,-3226,-2696,-2862,-3169,-2484,-3703,-3900,-4117,-4591,-5092,-5365,-5112,-4717,-4285,-4179,-4196,-3872,-3796,-2560,-3345,-3336,-3408,-3326,-3103,-3180,-2651,-3054,-3212,-4086,-4461,-5179,-5349,-5219,-4632,-4271,-4251,-4420,-4388,-3305,-1637,-3436,-3467,-3536,-3547,-3488,-3406,-2723,-2746,-2622,-4211,-3890,-5155,-5259,-5137,-4513,-4452,-4215,-4342,-4156,-3447,-1785,-3468,-3584,-3703,-3622,-3667,-2021,-4146,-3403,-3475,-3260,-4503,-5040,-5116,-4778,-4297,-4556,-4289,-4449,-3841,-3058,-2731,-2371,-3811,-3950,-3857,-3839,-2973,-3543,-3770,-3733,-1711,-3838,-4391,-4966,-4655,-4333,-4159,-4431,-4312,-4086,-3478,-2795,-2723,-3848,-4007,-3897,-3901,-1423,-2719,-4118,-4061,-3626,-3174,-5124,-4992,-4592,-4535,-4639,-4466,-4182,-4384,-4199,-3123,-3036,-3418,-3927,-3695,-4071,-898,-2983,-4199,-4347,-4611,-3573,-4352,-5146,-4864,-4569,-4610,-4559,-4369,-4282,-3347,-2873,-3248,-2683,-3749,-2487,-3883,-1210,-3148,-3673,-4481,-5052,-4281,-3370,-4897,-4878,-5055,-4482,-4418,-4318,-3833,-3264,-3136,-3686,-3473,-3770,-1932,-3823,-2263,-3124,-4692,-4577,-4317,-3814,-2531,-4010,-4496,-4771,-4627,-4540,-4325,-3749,-2816,-3168,-4113,-3890,-4067,-1682,-3149,-2631,-2546,-4620,-4890,-4771,-4774,-3931,-3480,-5232,-4505,-4529,-4715,-4118,-3761,-2807,-3606,-3918,-4091,-3918,-833,-1832,-2375,-3262,-3560,-5077,-4856,-4624,-5457,-3666,-4860,-4582,-4367,-4547,-4009,-3296,-3945,-3953,-4104,-4305,-3884,-1920,-3701,-2259,-2644,-2903,-5228,-5051,-5041,-4978,-4761,-3208,-4516,-3447,-4168,-3501,-2848,-3585,-4213,-4189,-4307,-4154,-3531,-4248,-1835,-1680,-4721,-5357,-5386,-5147,-5428,-5300,-3948,-4489,-4721,-3460,-3095,-3387,-3932,-4020,-4135,-4199,-4161,-1608,-4611,-773,-1809,-4747,-5197,-5239,-5137,-5239,-5280,-4901,-5140,-3746,-4187,-3395,-4045,-3584,-4147,-4077,-4239,-4608,-2274,-5204,200,525,-4669,-4955,-4901,-4942,-5044,-4807,-4532,-4120,-4059,-3283,-3222,-3751,-3947,-4197,-3785,-4462,-4560,-1994,-5135,248,783,-4642,-5050,-4741,-4986,-5056,-4883,-4449,-4107,-4084,-3064,-3230,-3826,-3706,-4139,-4113,-4334,-4728,-2069,-5203],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
