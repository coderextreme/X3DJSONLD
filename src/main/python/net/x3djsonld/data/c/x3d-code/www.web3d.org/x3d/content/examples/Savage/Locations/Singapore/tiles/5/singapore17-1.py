###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.60419903412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[22,21,23,25,25,24,26,28,28,28,25,22,21,21,18,15,13,12,13,16,17,19,19,17,14,11,9,8,7,8,8,8,7,6,5,5,6,24,22,27,32,32,30,32,34,35,36,33,30,28,25,21,16,14,14,15,18,20,23,23,22,19,14,10,8,7,7,7,7,8,6,5,6,7,25,24,31,38,38,37,38,38,41,43,41,38,35,30,24,18,16,18,19,19,21,25,26,27,24,18,13,9,7,7,7,7,7,7,6,7,7,24,24,33,43,43,43,43,43,46,49,47,44,38,31,25,19,19,22,23,22,23,26,29,32,30,23,17,13,9,8,7,7,7,7,7,7,8,23,24,34,43,45,47,47,48,50,52,49,46,38,29,24,20,22,28,29,27,27,28,32,36,35,29,23,18,14,10,8,8,8,7,6,7,8,23,25,34,42,45,47,49,52,52,53,50,45,37,29,25,22,25,32,33,31,30,30,33,37,37,32,26,22,18,13,9,8,8,7,6,7,8,24,26,33,39,41,42,47,53,53,51,46,40,36,33,29,26,28,33,35,34,33,31,32,35,34,31,27,24,20,14,10,9,8,7,6,7,8,24,27,32,36,36,35,41,49,49,47,43,39,38,38,36,31,32,36,37,38,35,31,30,31,31,28,25,22,18,14,10,9,8,7,6,7,8,24,26,29,30,29,28,32,37,39,40,41,42,45,48,45,39,39,42,42,42,37,28,25,26,25,23,19,16,13,11,9,9,9,8,8,9,9,24,25,26,26,24,23,25,29,32,35,39,44,49,54,51,45,44,46,46,44,37,26,22,22,21,19,15,12,10,9,9,10,11,10,10,10,10,23,24,23,21,20,21,24,28,29,32,37,43,50,54,52,47,47,49,48,44,37,26,21,20,19,17,15,13,12,12,12,12,12,12,12,12,11,22,22,21,19,20,22,26,30,32,33,39,46,50,54,51,46,45,47,46,42,35,25,20,19,18,17,16,15,15,14,14,13,12,13,13,12,12,20,20,20,21,24,28,33,39,42,43,47,52,52,51,46,40,38,38,37,36,31,25,20,18,17,17,17,19,19,17,14,12,11,11,11,11,11,18,18,20,21,26,32,39,47,50,53,55,58,55,51,45,38,35,33,32,31,28,24,20,18,17,18,20,22,22,19,15,12,10,9,9,10,10,15,17,18,19,25,31,41,51,56,59,61,63,59,55,50,44,40,36,32,29,26,23,20,18,18,21,23,25,25,20,16,12,10,9,8,9,10,13,15,16,17,23,30,41,52,56,60,61,62,60,57,54,49,43,38,33,29,25,22,20,18,19,23,27,28,27,22,17,14,11,9,7,8,9,13,13,15,17,23,31,38,46,48,49,50,52,54,57,54,49,43,36,32,29,26,23,20,18,20,26,30,30,28,23,19,15,12,9,7,7,8,13,13,14,16,23,31,35,40,39,38,40,43,49,57,56,50,43,37,34,32,29,25,21,19,21,27,30,30,28,24,19,16,13,10,6,7,7,14,14,14,16,22,28,32,35,35,33,36,41,50,60,59,54,49,43,40,38,34,28,22,19,19,24,27,27,26,22,19,17,14,11,7,7,8,14,14,14,16,21,26,30,33,34,33,38,44,53,63,63,57,53,47,44,42,36,28,22,18,18,21,23,23,23,20,18,16,14,11,8,8,8,15,14,15,16,20,25,30,35,37,40,45,51,58,67,64,57,50,43,39,37,32,26,21,18,18,21,22,21,20,18,16,14,13,11,9,9,9,17,15,16,17,20,25,31,38,42,47,52,56,62,68,64,56,47,37,32,29,26,22,20,18,18,20,20,19,17,15,14,13,13,12,11,11,11],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
