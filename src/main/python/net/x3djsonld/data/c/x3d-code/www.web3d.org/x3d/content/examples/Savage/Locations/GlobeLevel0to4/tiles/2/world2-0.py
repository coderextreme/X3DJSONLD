###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_2_20',geoSystem=['GDC'],position=(22.458336686061273,-135.0416653255955,7492500.2232939005),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(22.458336686061273,-135.0416653255955,0.0),range=8991000.0,child1Url=['../../tiles/3/world4-0.x3d'],child2Url=['../../tiles/3/world4-1.x3d'],child3Url=['../../tiles/3/world5-0.x3d'],child4Url=['../../tiles/3/world5-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/2/world2-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=4.5,zDimension=21,zSpacing=2.25,height=[-6005,-5590,-5375,-5301,-4338,-5292,-5124,-4729,-4669,-4534,-4611,-4641,-4415,-4231,-4255,-4118,-3609,-3290,-3424,-3711,-3629,-5482,-5281,-5282,-5054,-5263,-5200,-4826,-4764,-4580,-4328,-4504,-4607,-4553,-4364,-4297,-4074,-3782,-3405,-3443,-3409,-3225,-5309,-5229,-5551,-5153,-5024,-3539,-4682,-4400,-4395,-4312,-2507,-4451,-4612,-4305,-4091,-4007,-3677,-3415,-3285,-3317,-1521,-5102,-5093,-5294,-5490,-5175,-4060,-4780,-4804,-4451,-4363,-4389,-4363,-4480,-4542,-4055,-3844,-3741,-3389,-3694,-2528,-1798,-5561,-4688,-5589,-5248,-4081,-4437,-4901,-5237,-4838,-4427,-4591,-4451,-4427,-4349,-4411,-3946,-3864,-3457,-3499,-3591,-3086,-5717,-5299,-5591,-4924,-2472,-4746,-5114,-4541,-5199,-4965,-4608,-4479,-4548,-4218,-4176,-3898,-3878,-3280,-3550,-3623,-3522,-5874,-5498,-5014,-3573,-4867,-4680,-4987,-5124,-5153,-5095,-4817,-4822,-4586,-4334,-4044,-3949,-3285,-3166,-3837,-3751,-3460,-5495,-5261,-5369,-5144,-5112,-5357,-5233,-5214,-5169,-4817,-4926,-4855,-4649,-4416,-4204,-4120,-3557,-2978,-3503,-4057,-3709,-5503,-5364,-6011,-4318,-5608,-5618,-5664,-5077,-4958,-4918,-4598,-5031,-4617,-4161,-4155,-3957,-3750,-3076,-3345,-4065,-119,-5329,-5626,-5412,-5234,-5519,-5456,-5468,-5267,-5482,-5425,-4832,-4895,-4552,-4248,-3879,-3888,-3837,-3439,-4730,-66,158,-4338,-2338,-5029,-5444,-5545,-2998,-5096,-5439,-5391,-5654,-5197,-4987,-4389,-3898,-3792,-3394,-3575,-1633,1383,-2,174,-4542,-5391,-3510,-5057,-4791,-4371,-5064,-5414,-5594,-5149,-5237,-4004,-4781,-3874,-3753,-3059,-3236,1773,2143,-2521,12,-5388,-5324,-4777,-4682,-3670,-4666,-5052,-5340,-5107,-4970,-5027,-4760,-3876,-3973,-4120,-3465,-2980,2276,118,-3702,-113,-5482,-5052,-4428,-5042,-4952,-4327,-5329,-5344,-5095,-4710,-4381,-4671,-4417,-4165,-3813,-143,3,1511,253,-3667,-3508,-5321,-4234,-4721,-4525,-5116,-5470,-5450,-5420,-4946,-4872,-4545,-4383,-4473,-4034,-3690,407,2077,1092,165,-1125,-2192,-5020,-5312,-5218,-5256,-5209,-5785,-6127,-5087,-5009,-4733,-4558,-4787,-4334,-3994,-2676,-56,2165,1026,272,-11,0,-4731,-5494,-5564,-5701,-4824,-5839,-5392,-5456,-5343,-4496,-4318,-4643,-4441,-3824,-1146,507,1641,840,439,109,82,-4405,-5511,-5835,-3612,-5650,-5772,-5583,-5638,-5669,-5112,-5064,-4941,-4572,-3409,818,880,2101,1352,336,129,49,-4996,-4605,-5741,-5692,-6085,-5484,-5858,-5381,-5457,-5269,-5101,-4946,-4635,855,1179,1887,1900,1544,550,353,76,-5518,-5547,-4890,-5643,-5345,-5083,-5337,-5476,-5529,-5103,-4890,-4868,-4270,1,1880,2483,2091,1376,608,276,174,-5512,-5401,-5299,-5620,-5205,-5146,-5517,-5176,-5413,-4938,-4762,-4851,-4226,5,2080,2723,1822,1385,597,297,170],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
