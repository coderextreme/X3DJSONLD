###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore22-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.67601420477412,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[33,36,38,38,35,30,25,24,25,26,26,26,27,27,28,28,28,33,40,47,53,56,55,53,49,45,43,41,40,39,36,33,32,31,29,27,31,33,36,40,42,36,28,26,26,27,27,27,28,28,27,26,26,29,36,43,51,56,56,53,48,45,43,41,40,39,36,34,34,33,31,29,29,31,34,39,42,38,31,28,28,28,28,28,29,28,27,26,25,28,33,40,51,56,57,54,49,45,43,41,40,39,37,36,36,35,33,31,28,30,32,34,35,35,33,33,33,32,31,31,31,30,28,27,26,28,33,41,52,58,59,56,49,45,43,42,42,41,39,38,38,37,35,33,29,31,33,34,34,35,36,36,35,34,33,33,33,32,30,29,27,29,33,41,52,59,60,57,50,45,42,41,41,41,40,38,38,37,35,34,35,38,40,41,41,40,39,37,34,33,33,33,35,35,33,31,29,29,32,39,50,57,59,57,50,45,41,39,39,39,37,36,35,35,34,33,42,46,48,49,48,45,42,37,34,33,33,36,39,39,37,35,32,31,32,37,47,53,56,55,50,45,41,39,38,38,36,35,33,32,32,33,51,56,59,58,54,49,43,37,34,33,35,40,45,47,45,42,39,36,34,36,42,47,50,50,48,45,43,41,39,38,36,35,33,31,31,32,59,63,65,62,57,50,42,36,33,34,37,44,51,54,53,50,46,41,37,36,39,42,45,47,47,47,47,45,41,39,37,36,33,31,31,31,63,65,62,57,50,44,38,34,32,35,40,48,56,60,59,57,53,48,43,40,40,41,44,47,50,52,52,50,46,42,40,38,36,33,32,31,65,63,58,51,44,38,34,32,32,36,42,50,60,64,65,63,58,53,48,44,42,42,44,47,51,54,55,53,48,44,42,40,38,35,33,30,56,54,51,45,39,35,32,30,32,36,42,51,61,67,69,67,62,57,50,46,44,44,45,46,47,48,50,49,46,44,43,42,39,35,32,30,46,46,44,40,35,31,30,30,32,36,42,51,62,69,71,70,66,60,52,48,46,46,46,46,44,43,44,45,43,43,43,42,39,35,32,30,35,37,38,36,33,30,30,31,33,37,42,50,60,67,71,71,66,60,52,48,48,48,49,47,41,37,36,36,36,37,38,38,37,34,32,29,25,29,33,33,32,31,30,32,35,38,43,50,59,66,70,70,66,60,51,48,49,50,50,47,38,32,29,28,30,33,35,35,34,33,32,29,24,30,35,36,35,35,35,37,41,44,48,54,61,66,68,67,64,58,49,45,46,46,45,42,36,31,28,27,30,33,36,37,36,34,32,29,25,32,37,39,39,39,39,43,47,50,53,56,61,65,66,64,60,54,46,43,44,43,41,38,34,31,27,26,30,33,36,38,37,35,32,30,33,39,43,44,43,43,44,49,54,55,55,56,58,59,59,57,52,48,44,42,43,42,39,36,33,30,27,28,32,36,39,40,39,37,34,31,40,46,49,48,46,47,49,54,59,60,58,56,55,53,52,50,46,43,41,40,41,41,38,35,32,29,28,30,34,38,41,42,40,38,35,32,47,51,52,50,47,48,51,56,62,63,60,57,53,50,48,45,43,42,43,44,45,44,40,36,32,29,29,31,35,38,40,41,39,37,34,31,53,55,54,51,47,48,52,58,63,64,61,56,51,47,44,41,41,42,45,47,48,46,40,35,31,29,30,32,35,37,38,38,37,34,32,29,56,56,53,48,45,46,50,54,59,59,56,52,47,44,41,40,41,44,48,50,50,46,39,34,29,28,30,32,33,34,33,32,31,30,30,29],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
