###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore11-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3083120993579338,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[27,26,24,25,26,27,28,31,34,33,32,32,32,35,39,41,43,43,44,46,50,50,49,45,40,34,30,28,31,33,34,32,30,28,27,28,32,24,24,24,26,29,30,30,33,34,33,33,33,35,38,42,44,45,45,44,45,48,48,47,43,38,33,28,28,31,33,34,33,31,29,30,31,34,23,24,26,31,37,36,36,37,37,37,37,39,41,43,46,49,50,48,44,44,45,45,44,41,36,32,29,28,31,33,33,32,31,31,34,37,37,23,24,27,34,42,41,40,40,41,42,43,45,46,48,51,53,54,52,46,44,44,43,41,39,35,33,31,32,34,35,33,31,30,31,37,41,39,22,25,28,35,41,41,40,42,45,47,48,48,49,51,55,57,58,56,51,47,44,42,41,38,35,34,37,39,41,40,36,31,29,29,36,42,39,23,26,29,34,38,39,40,44,47,50,52,52,51,53,57,59,61,58,54,49,45,42,41,39,35,36,41,45,46,44,37,31,27,28,35,41,39,25,28,29,32,35,38,40,45,49,52,54,55,54,54,55,58,61,59,55,51,46,43,42,40,36,38,42,45,45,42,35,30,27,29,35,39,39,28,30,30,31,32,36,39,44,48,51,54,55,55,54,53,55,60,58,54,50,46,44,43,40,38,38,42,45,44,41,34,29,28,30,34,38,38,32,32,32,32,31,34,37,41,43,47,51,52,53,52,50,52,55,54,50,47,43,41,41,39,37,38,44,47,46,42,34,29,29,31,34,36,37,34,35,35,32,30,32,34,36,38,42,47,48,49,48,47,47,49,48,46,43,39,37,37,36,33,37,44,49,47,43,34,29,30,32,34,36,36,33,35,36,33,29,29,30,32,35,39,43,43,44,43,42,42,42,41,41,38,35,33,32,31,29,33,41,46,47,44,35,30,30,32,33,35,36,31,34,36,32,28,27,26,29,32,36,40,40,39,38,37,36,35,35,35,33,30,28,26,25,24,28,37,43,46,45,37,32,31,31,32,33,35,28,31,33,31,26,24,23,25,28,34,39,40,39,37,35,32,29,29,29,28,26,25,23,22,21,25,34,41,45,45,39,34,31,30,30,32,35,26,29,31,29,26,23,21,22,24,31,39,41,42,39,34,29,25,24,25,25,24,22,21,20,20,24,32,39,43,44,39,34,31,29,29,30,34,26,28,30,28,26,23,20,21,23,30,38,41,42,38,34,28,22,21,22,22,21,20,20,20,20,23,29,33,36,36,33,30,28,27,27,28,30,27,28,30,29,27,24,21,21,23,29,36,38,39,37,34,29,22,21,21,20,19,19,19,19,21,23,26,28,28,28,25,24,24,25,26,26,26,28,28,28,28,28,25,23,23,25,29,33,34,33,33,33,31,27,25,24,22,21,19,17,19,21,23,25,25,25,25,22,21,23,24,25,25,24,29,27,26,27,28,26,25,26,27,29,30,28,26,29,32,33,33,31,28,25,23,20,17,18,20,23,24,24,25,25,22,21,22,23,24,25,24,24,23,22,24,27,27,27,29,30,29,27,25,22,25,29,31,33,32,29,28,27,25,20,19,19,20,22,23,25,25,24,23,22,21,22,23,24,18,18,19,21,25,26,28,30,32,29,26,23,19,22,25,28,31,31,29,30,31,30,25,21,18,18,20,23,25,26,26,25,22,20,19,20,24,18,18,18,20,23,25,26,28,30,28,26,22,19,20,23,25,27,27,27,30,32,31,27,22,17,16,19,22,25,27,28,26,22,19,17,18,22,20,20,20,20,21,22,24,25,27,26,26,23,19,20,21,22,21,23,24,28,32,31,27,22,15,13,18,22,25,27,29,27,22,18,16,16,20,22,22,21,20,20,21,23,24,25,25,25,22,19,19,19,19,18,19,21,26,30,30,27,22,15,14,19,23,26,28,30,29,24,19,16,16,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
