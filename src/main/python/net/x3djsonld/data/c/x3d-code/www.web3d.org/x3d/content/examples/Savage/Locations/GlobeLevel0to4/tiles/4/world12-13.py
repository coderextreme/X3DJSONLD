###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world12-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(44.95833735661353,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[943,1090,1012,1149,1262,1321,1063,632,402,311,250,125,302,388,309,632,584,315,301,-47,58,715,1103,1004,1173,1127,1243,1398,1083,712,376,251,180,137,183,324,512,658,805,428,787,98,488,473,1089,1040,962,1160,1170,1259,994,803,388,233,169,136,202,224,212,568,586,716,301,58,176,459,1119,1222,1275,1136,1074,997,1078,1119,703,221,167,146,193,206,190,312,419,574,525,87,401,264,952,1027,1279,1406,966,1108,947,1012,725,309,170,138,139,201,180,196,350,408,513,77,69,102,906,877,1241,1430,1248,862,827,876,882,463,190,143,126,122,185,558,149,360,250,145,64,165,1144,952,1219,997,1075,1032,1079,1036,908,613,292,132,127,202,125,106,107,445,295,113,64,62,1200,969,1007,990,779,912,803,972,1111,752,322,140,146,151,138,213,1031,182,268,82,402,47,1157,1028,997,922,755,700,728,977,1217,751,407,147,141,167,195,179,437,265,70,57,55,146,1099,1006,1036,847,637,641,702,764,1076,839,396,155,152,190,175,254,402,452,74,57,53,51,1090,972,816,751,665,588,587,750,863,769,617,286,169,231,307,444,258,669,339,62,162,43,1154,1093,930,716,767,606,559,667,789,1216,893,414,264,219,300,414,430,530,314,99,54,46,1090,1071,946,763,805,638,546,667,761,725,754,451,273,370,405,503,336,125,180,193,116,58,1042,857,840,709,606,737,543,642,777,724,753,446,353,271,597,246,105,107,437,717,339,290,1435,1151,1034,821,595,744,700,521,754,870,809,604,425,383,554,129,181,218,267,274,742,642,1229,1111,806,635,600,793,639,696,652,910,955,662,543,394,479,124,225,267,504,829,848,971,899,1273,842,822,917,1211,866,696,735,1153,897,886,577,402,389,245,206,241,684,735,459,941,948,978,764,967,638,933,1074,824,479,949,957,948,705,423,227,274,174,231,458,1057,356,773,870,941,693,1047,701,618,855,931,665,875,737,746,625,366,270,276,210,198,391,439,1067,1212,993,986,1033,1007,898,641,766,833,641,906,736,675,642,425,253,273,288,260,270,476,847,1382,1249,1004,1000,1159,619,757,753,421,723,661,504,639,418,333,308,308,365,309,454,558,752,802,1101,972,968,1031,893,1290,1063,1028,483,432,397,413,396,396,307,304,298,441,538,631,763,945,1589,1196,844,822,855,1211,1067,1005,724,659,544,424,689,425,439,714,424,613,492,261,150,666,1657,1518,1055,1009,1058,993,955,851,930,553,572,381,641,473,408,524,381,503,422,227,143,420],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
