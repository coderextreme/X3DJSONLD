###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca15-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(5.297423545807372,101.29356261898111,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[583,628,831,585,361,270,358,423,984,1403,1267,1367,1539,1697,1520,1627,1076,789,414,565,870,494,469,848,762,414,345,260,398,628,809,1395,1432,1417,1350,1594,1634,1693,1117,853,473,698,953,598,541,823,445,402,260,265,454,532,1246,1033,1384,1167,1446,1387,1552,1272,1031,863,641,932,860,582,475,442,419,297,268,276,372,756,804,1179,1233,1050,1095,1298,1457,1181,1025,805,737,1212,926,995,408,382,449,471,253,335,408,672,814,988,964,751,1102,1174,1322,1197,1126,1046,1102,1530,1201,1259,241,390,480,296,314,359,325,601,818,1119,852,711,1125,922,1011,1177,1144,1378,1377,1474,1314,1378,229,439,407,255,549,298,378,644,971,1066,701,867,723,737,935,1126,1092,1298,1252,1297,1069,1141,285,453,247,346,556,362,359,532,621,822,759,625,606,720,924,1118,1061,1153,1210,1122,1021,1182,409,288,266,523,576,552,375,420,439,497,519,508,692,802,1114,1128,1096,1027,1147,1058,1045,1170,182,288,271,350,476,681,351,308,380,408,430,617,720,978,1267,1049,1017,970,1010,1123,1051,1226,399,260,333,277,347,375,502,301,419,318,435,635,913,1217,1260,1213,912,1037,1045,1075,1111,1144,404,254,246,251,379,382,337,254,307,393,573,978,1299,1151,1241,973,1005,742,1316,1256,1092,1136,572,545,251,365,325,463,258,283,679,448,534,907,1226,1234,1177,854,774,915,1104,1129,1055,1012,438,389,241,266,329,314,265,567,584,675,809,1158,1111,1294,720,1169,587,972,1078,1066,961,969,431,377,249,354,257,276,409,439,478,952,1098,1115,955,1066,670,619,595,605,953,912,958,975,634,368,537,324,347,269,322,397,446,753,820,1066,893,958,831,755,868,738,1155,1035,1079,1040,537,415,623,257,395,263,267,277,446,548,516,620,458,919,549,605,668,800,1162,1412,1223,1139,564,747,495,231,469,255,340,360,291,248,368,415,591,512,534,596,730,1010,1255,1184,990,1221,622,735,436,275,382,339,347,352,472,611,663,632,772,493,557,721,728,927,1001,979,852,1136,482,467,265,248,267,304,292,333,575,1022,677,664,918,772,560,989,866,955,899,986,878,997,433,385,296,256,303,340,357,376,388,603,934,1213,924,715,698,708,624,869,883,913,802,822,640,353,281,268,389,303,368,556,659,751,879,1061,1074,857,745,717,679,690,802,818,895,827,657,357,288,264,388,294,346,495,699,766,865,1079,1049,865,763,761,706,682,810,827,915,819],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
