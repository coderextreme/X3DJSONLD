###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/bosphorus5-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(40.898245841898074,29.401860686199143,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.0035324567,zDimension=24,zSpacing=0.0023768744,height=[207,203,199,211,229,248,235,217,216,235,208,194,178,183,193,199,224,214,224,249,248,244,211,195,200,218,228,238,225,219,203,212,194,194,187,178,183,202,220,195,220,243,231,225,200,190,199,215,208,223,236,214,208,198,198,183,176,167,176,199,207,189,219,233,227,219,202,184,201,207,197,214,240,229,223,216,218,204,194,166,189,187,200,182,206,227,209,219,199,188,183,186,198,221,244,244,240,244,241,226,198,172,173,185,184,177,196,207,223,234,205,194,173,185,210,224,226,228,224,248,243,216,198,184,165,167,182,169,180,191,211,213,201,197,176,184,199,211,206,205,224,254,231,216,198,191,185,164,178,167,189,198,207,214,200,191,183,168,188,193,188,216,226,257,249,236,218,202,192,172,156,163,191,207,207,219,192,206,188,165,181,175,197,223,248,253,239,228,215,216,201,197,163,170,186,174,193,199,191,190,192,164,166,193,211,223,238,240,224,217,217,219,217,204,171,151,163,168,212,209,170,177,183,159,179,193,207,216,236,242,218,225,198,212,200,192,188,156,159,174,180,182,164,167,155,164,173,180,201,208,231,244,222,203,196,200,187,174,193,170,147,156,200,201,166,163,151,175,189,196,212,214,232,236,206,218,191,200,180,165,173,173,162,160,193,198,168,147,167,178,193,209,225,217,234,227,199,186,179,193,190,165,153,156,148,163,191,197,157,150,170,186,203,216,200,199,220,217,190,181,180,176,187,182,166,151,139,184,196,198,140,157,173,193,208,216,195,204,214,208,195,180,160,165,170,189,180,159,139,159,181,178,149,165,189,197,210,201,189,200,212,199,183,181,176,145,153,173,182,168,133,139,167,174,159,170,184,200,196,188,187,169,183,187,186,166,153,146,137,151,186,212,170,132,152,155,164,167,175,190,175,173,174,158,166,172,182,165,170,160,136,141,165,210,171,129,154,157,155,174,179,179,170,150,160,153,155,170,181,190,200,166,150,130,145,182,167,123,151,159,163,159,170,163,148,141,143,145,157,159,168,212,202,196,163,137,131,157,162,126,131,137,135,153,158,149,137,136,147,159,170,154,161,189,180,183,179,167,118,162,220,142,128,133,127,140,144,132,128,138,163,159,172,158,147,166,158,169,166,177,118,148,194,130,128,133,123,137,142,132,126,138,163,161,172,161,146,161,155,166,161,171,117,147,185,124,129,135],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(41.06225017873692,29.030952729968703,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
