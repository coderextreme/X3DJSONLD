###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-8.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[805,753,590,550,441,251,168,144,151,219,368,298,655,755,110,-37,-884,-1458,-1282,-15,230,141,1509,835,723,622,573,271,162,124,139,230,368,141,104,341,107,-204,-1211,-1786,-1816,-375,559,515,1296,913,791,771,625,335,97,107,95,159,482,46,-19,-11,-330,-904,-1812,-2070,-2013,-929,-1001,152,1121,1266,1256,887,733,410,71,76,36,88,420,-6,-41,-333,-587,-1131,-1795,-2387,-2971,-2061,-3022,-2220,1066,1103,1291,900,653,391,23,-8,150,24,-67,-30,-74,-307,-354,-1061,-1865,-2677,-3383,-3500,-2470,-2236,1181,1045,1062,1082,1051,294,37,14,420,585,4,-33,-78,-128,-305,-307,-1765,-3255,-3562,-3105,-2638,-2450,953,1053,1122,865,1077,604,305,1076,956,524,153,-32,-29,-208,-459,-248,-1929,-2123,-3802,-2951,-2568,-3150,174,475,947,742,849,391,1056,1154,1197,692,145,-27,-52,-252,-522,-373,-3077,-3926,-3832,-3061,-2929,-3517,-2122,372,596,998,705,1124,872,977,614,941,39,-63,-112,-716,22,-636,-3717,-4051,-3734,-3224,-2987,-3700,-2662,-1516,531,500,592,484,691,706,833,410,119,-100,-330,-1701,-151,-2019,-3331,-3610,-3720,-3175,-3620,-3065,-2668,-2678,-2729,-742,-467,-217,-235,-13,-38,287,42,-70,-147,-609,52,-2630,-3126,-3596,-3812,-3578,-3320,171,-1675,-2733,-2784,-2794,-2782,-2781,-2775,-2786,-2654,-101,-71,-348,-71,268,320,-2153,-2618,-2531,-3513,-3273,-1849,211,-20,-1540,-2433,-2785,-2874,-2818,-2844,-2851,-2760,-616,-465,-404,0,798,1310,-1420,-1778,-2651,-3379,-3619,-135,985,268,-294,-931,-2768,-2697,-2734,-2851,-2865,-2781,-1628,-1344,-922,-1645,-1361,-1636,-429,-320,-2621,-3211,-2369,-7,262,242,-229,-2,-599,-2357,-2716,-2853,-2836,-412,-68,-2486,-1569,-2449,-3269,-2758,-1434,71,-1854,-1504,-2349,16,1082,239,-1158,-1082,-68,-1538,-2676,-2853,-2852,-364,92,-1670,-2857,-3362,-3613,-3282,-403,1137,-2135,-911,6,674,164,699,-80,-1571,-1044,-66,-2380,-2865,-2914,-922,698,-1681,-2831,-3580,-2773,-862,-838,-54,-412,-715,55,1494,721,1677,7,-1205,-1896,-2244,-2752,-2833,-2919,-171,274,-1534,-2973,-3352,-2239,-762,773,129,62,-867,417,1248,736,827,456,-500,-1844,-2493,-2733,-2683,-2861,-1325,459,-1416,-2416,-2068,-620,34,680,388,-115,-363,128,841,1898,390,221,694,-147,-1514,-2645,-2599,-2761,-2623,-2,-1109,-878,-154,688,1246,68,-121,-1109,-255,472,1129,524,405,511,841,675,-1329,-2425,-2492,-2717,-2767,634,-796,-804,66,598,572,3,-151,-1172,-130,795,487,679,922,749,1873,627,-977,-1737,-2479,-2690,-2739,1752,-77,11,276,1203,-52,-53,-120,-673,1244,1377,712,533,1100,1423,1427,584,-101,-162,-1967,-2556,-2670,-1620,-117,72,172,675,-107,-10,2,402,1048,738,977,374,883,1233,707,443,-90,-123,-694,-2343,-2660,-1788,-116,129,250,483,-90,-10,-2,419,1540,1024,1356,289],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
