###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5220,-5092,-5281,-5381,-5439,-5364,-5328,-5375,-5410,-5571,-5655,-5324,-5234,-5056,-5020,-4767,-4633,-4558,-4725,-4245,-4614,-4257,-5037,-5008,-5119,-5209,-5202,-5147,-5195,-5352,-5425,-5582,-5597,-5398,-5227,-5129,-5023,-4741,-4580,-4718,-4462,-4428,-4427,-4239,-5013,-5050,-5106,-5037,-5082,-5101,-5151,-5336,-5380,-5402,-5506,-5481,-5252,-5052,-4885,-4691,-4527,-4604,-4404,-4304,-4655,-4597,-4962,-5106,-5143,-5125,-5148,-5221,-5167,-5314,-5311,-5275,-5419,-5355,-5468,-4957,-4841,-4873,-4645,-4511,-4485,-4655,-4518,-4477,-5135,-5118,-5186,-5171,-5189,-5220,-5184,-5317,-5264,-5221,-5211,-5029,-5029,-5073,-4616,-4321,-4705,-4738,-4515,-4819,-4459,-4226,-5172,-5137,-5162,-5217,-5174,-5245,-5140,-5265,-5223,-5172,-5115,-4994,-4886,-4812,-4554,-4426,-4500,-4633,-4574,-4516,-4478,-4339,-5106,-5138,-5186,-5192,-5181,-5230,-5193,-5219,-5204,-5162,-5054,-5284,-5079,-4515,-4551,-4506,-4515,-4595,-4579,-4514,-4249,-4224,-5021,-5149,-5178,-5178,-5147,-5241,-5231,-5207,-5212,-5138,-4945,-5123,-5334,-4845,-4621,-4571,-4504,-4645,-4550,-4325,-4222,-4180,-5081,-5130,-5169,-5169,-5176,-5229,-5223,-5243,-5268,-5120,-4931,-4901,-4898,-4988,-4928,-4645,-4448,-4515,-4477,-4439,-4074,-4113,-5103,-5122,-5170,-5150,-5201,-5353,-5221,-5270,-5228,-5053,-5023,-4984,-4879,-4786,-4717,-4658,-4444,-4201,-4337,-4229,-3946,-4087,-5101,-5114,-5141,-5170,-5200,-5299,-5213,-5232,-5235,-4864,-5048,-5034,-4999,-4660,-4813,-4483,-4168,-4282,-4239,-4198,-3908,-3932,-5144,-5100,-5124,-5150,-5172,-5184,-5177,-5220,-5159,-4833,-5077,-5042,-4998,-4827,-4744,-4496,-4322,-4293,-4113,-4071,-4090,-3992,-5165,-5135,-5088,-5125,-5129,-5129,-5189,-5263,-5073,-4841,-4913,-4914,-4622,-4673,-4372,-4363,-4155,-4272,-4300,-4024,-3870,-4004,-5173,-5122,-5109,-5089,-5087,-5108,-5160,-5140,-4939,-4918,-4976,-5166,-4995,-4337,-4402,-4329,-4189,-4231,-4305,-3897,-4121,-4122,-5170,-5139,-5114,-5091,-5080,-5072,-5108,-5158,-5010,-4975,-5027,-4962,-4654,-4344,-4095,-3904,-3986,-4286,-4199,-4171,-3945,-4065,-5131,-5126,-5099,-5082,-5078,-5117,-4997,-5164,-5090,-4978,-4925,-4774,-4605,-4312,-4086,-3917,-3866,-4226,-3451,-4041,-3984,-3873,-5132,-5112,-5067,-5048,-5044,-5137,-4927,-4973,-4881,-4964,-4819,-4672,-4591,-4334,-3501,-4047,-3312,-4122,-3869,-4151,-4041,-4240,-5082,-5051,-5029,-5051,-5001,-4997,-4954,-4969,-4906,-4923,-4707,-4533,-4411,-4577,-3446,-4458,-4310,-4196,-4200,-4325,-3819,-3992,-5052,-4978,-4999,-4985,-4956,-4957,-4977,-4962,-4866,-4869,-4576,-4568,-4333,-4343,-4282,-4425,-4570,-4464,-4150,-4352,-3742,-3796,-4952,-4911,-4976,-4941,-4919,-4871,-4973,-4884,-4862,-4794,-4487,-4633,-4308,-4245,-4409,-4555,-4236,-3960,-4197,-4255,-3926,-3774,-4845,-4863,-4926,-4898,-4861,-4814,-4918,-4862,-4682,-4629,-4487,-4516,-4468,-4025,-4434,-4763,-4265,-4558,-4404,-4034,-3957,-3780,-4825,-4860,-4857,-4805,-4811,-4779,-4884,-4770,-4566,-4700,-4425,-4370,-4580,-4012,-3589,-4262,-3774,-4135,-3954,-3779,-3863,-3838,-4825,-4774,-4774,-4717,-4701,-4813,-4880,-4746,-4650,-4621,-4465,-4526,-4433,-3693,-2642,-4087,-4050,-4370,-4132,-3774,-3878,-3755,-4791,-4761,-4721,-4697,-4678,-4814,-4878,-4688,-4659,-4575,-4426,-4575,-4425,-3821,-2613,-4893,-4798,-4320,-4059,-3880,-4087,-3868],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
