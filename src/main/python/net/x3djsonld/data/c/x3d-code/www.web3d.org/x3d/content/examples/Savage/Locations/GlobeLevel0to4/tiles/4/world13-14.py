###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world13-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(56.20833769188965,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[420,1289,468,-98,-49,160,-38,-432,-34,-117,-1436,-1552,-1589,-1077,-832,-777,-435,-419,-459,-231,-127,101,626,28,-19,74,-22,-88,-101,-455,-527,-618,-1391,-1254,-1058,-779,-650,-551,-299,-347,-442,-332,-22,186,1040,384,-219,58,-28,-136,-150,-401,-311,-740,-1170,-688,-632,-715,-433,-350,-241,-387,-459,-416,-24,233,860,1229,394,-167,-85,-127,-278,-339,-464,-657,-240,-207,-299,-334,-270,-295,-291,-348,-554,-366,-33,149,1111,995,942,222,-239,-85,-319,-232,-354,-126,-245,-223,-296,-221,-174,-230,-263,-429,-683,-342,-69,59,720,843,812,1081,-226,-343,-284,-185,-286,-153,-292,-92,-148,-139,-116,-187,-251,-459,-830,-415,-231,131,601,343,610,771,655,-144,-24,-182,-199,-165,-231,-127,-49,-79,-92,-205,-251,-444,-727,-492,-416,-56,1021,534,571,411,862,828,-21,-156,-74,-6,-177,-162,-65,-71,-131,-247,-172,-319,-431,-414,-329,-174,615,602,383,617,697,856,138,-137,-207,-113,-26,-90,-160,-57,-49,-134,-92,-151,-238,-320,-333,-400,337,407,600,458,1051,782,533,77,-211,-168,-137,-216,-43,-46,-31,-3,-31,-44,-59,-98,-275,-220,512,636,344,729,627,591,519,403,-98,-63,-159,-33,-132,-59,-2,-3,389,590,-40,-37,-36,-135,309,311,466,909,734,584,522,716,136,195,353,154,95,477,210,-126,33,251,157,-5,-413,-258,245,230,408,487,818,852,765,360,1101,692,289,616,271,103,137,889,683,550,564,29,-360,-332,255,295,225,945,1134,1229,919,809,760,909,973,682,492,638,864,1028,1025,797,1077,437,14,-270,345,201,460,1201,951,1050,1018,1482,891,1121,706,742,1023,1279,1014,1087,867,1043,962,1367,415,9,277,237,538,792,799,926,1230,1766,1250,1441,1268,1058,886,855,848,1168,1758,557,1059,785,1193,833,189,267,215,559,979,1274,1409,2097,1642,1586,1332,1176,1099,1132,1259,388,1132,926,641,789,1215,571,179,211,171,461,1643,1494,2001,1739,1248,1064,1323,1197,878,946,815,779,681,515,267,565,860,527,112,175,191,540,1369,1473,1692,1034,917,1111,899,956,1019,798,1148,473,702,273,520,384,673,494,280,451,1056,1147,829,1707,1300,1065,660,1022,1511,1164,1393,1080,1007,1253,817,410,310,423,647,566,1522,1104,468,569,888,1175,1031,973,1757,816,949,1107,1236,927,767,604,219,337,469,305,551,381,1348,1012,944,1109,1245,1035,757,957,1077,1130,908,1662,1477,882,551,599,121,666,438,579,454,371,791,1069,754,1163,1028,978,1126,1727,1888,1649,1497,1332,624,1648,515,174,75,274,699,278,185,319,1190,1017,850,1071,1383,989,1184,1865,1487,1025,1934,1179,594,2008,946,125,64,382,436,307,251,645],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
