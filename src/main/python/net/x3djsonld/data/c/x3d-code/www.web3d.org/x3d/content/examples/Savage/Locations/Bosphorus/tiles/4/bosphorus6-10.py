###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/bosphorus6-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(40.95291395417769,29.17931591246088,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.0035324567,zDimension=24,zSpacing=0.0023768744,height=[341,268,232,215,210,198,188,184,189,209,243,195,197,229,250,200,190,217,246,278,357,367,319,297,256,242,205,197,191,179,198,246,245,199,191,210,222,192,204,230,262,284,299,296,260,260,288,272,214,197,185,182,198,268,219,202,208,188,205,175,201,252,314,298,274,264,220,219,237,238,221,209,193,183,175,207,195,205,237,181,200,171,231,273,273,223,208,205,204,202,209,213,193,194,202,196,168,178,183,186,200,175,194,173,209,204,199,187,177,177,227,204,185,190,184,175,197,217,184,168,177,179,181,163,181,153,174,170,167,160,162,162,256,223,205,188,175,168,167,179,173,151,168,175,168,148,170,151,163,164,152,145,151,150,289,249,251,216,196,183,164,170,173,160,160,173,170,160,167,153,153,156,146,142,152,151,314,307,294,241,217,206,181,149,154,159,143,166,168,159,159,149,136,146,138,132,144,139,288,273,244,240,246,211,185,163,145,138,137,150,160,160,151,144,134,140,136,121,127,127,236,219,211,203,202,216,190,162,150,146,136,137,144,161,140,135,132,127,130,120,113,112,218,213,201,184,186,200,188,152,142,140,140,128,131,148,129,132,123,119,124,121,108,110,195,206,198,180,174,164,171,149,138,135,130,140,121,123,128,120,121,119,116,116,109,107,181,193,191,188,179,168,150,149,143,137,130,131,123,119,114,116,113,115,114,109,104,103,171,185,187,181,175,171,165,147,138,133,130,122,126,124,115,110,114,112,114,107,105,104,164,168,178,170,169,168,157,149,138,130,127,121,118,129,123,114,108,106,108,107,101,100,159,160,172,162,165,158,160,156,144,127,125,123,119,119,127,129,109,106,101,108,102,100,153,151,162,155,156,153,160,148,145,135,121,118,115,116,128,126,127,114,103,98,98,97,151,148,153,163,150,152,154,138,145,128,122,116,118,114,120,125,133,134,123,113,116,119,152,145,147,164,151,149,154,139,130,129,123,118,115,116,117,121,127,123,124,121,122,121,152,141,142,155,157,142,152,138,128,123,129,117,114,114,119,117,123,122,119,114,119,125,143,139,141,153,146,151,155,150,136,125,118,118,116,115,116,116,125,121,115,112,106,109,141,136,141,159,141,156,156,151,142,133,123,120,118,116,111,115,119,124,123,121,109,112,142,136,141,163,140,154,155,150,146,134,124,121,117,115,111,115,119,124,125,121,108,110],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(41.06225017873692,29.030952729968703,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
