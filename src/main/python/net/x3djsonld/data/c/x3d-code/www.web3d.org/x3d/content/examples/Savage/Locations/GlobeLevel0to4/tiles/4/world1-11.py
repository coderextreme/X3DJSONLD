###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[3535,3541,3537,3531,3527,3532,3534,3540,3542,3557,3577,3597,3618,3630,3637,3645,3651,3662,3680,3695,3722,3743,3387,3389,3387,3384,3384,3387,3388,3388,3391,3397,3401,3411,3427,3457,3483,3515,3547,3580,3604,3630,3658,3678,3160,3159,3166,3175,3179,3184,3188,3191,3198,3203,3221,3261,3297,3334,3380,3433,3489,3528,3571,3600,3621,3640,2921,2932,2948,2970,2994,3002,3010,3017,3036,3065,3090,3117,3165,3205,3275,3337,3415,3490,3528,3576,3608,3628,2682,2655,2650,2657,2670,2692,2712,2755,2796,2871,2925,3002,3060,3112,3182,3256,3346,3432,3489,3525,3586,3609,2496,2459,2440,2461,2491,2518,2567,2596,2655,2712,2778,2864,2972,3062,3118,3191,3280,3395,3445,3487,3539,3598,2234,2229,2241,2265,2306,2372,2424,2500,2578,2642,2716,2805,2939,3046,3149,3229,3301,3370,3410,3445,3498,3565,2084,2066,2056,2066,2095,2169,2337,2436,2514,2588,2674,2785,2944,3066,3190,3295,3340,3373,3398,3420,3476,3526,1675,1671,1726,1814,1886,2047,2141,2333,2478,2554,2645,2765,2905,3036,3136,3253,3329,3366,3385,3403,3455,3501,1281,1448,1548,1633,1829,2062,2128,2218,2404,2523,2605,2737,2848,2976,3052,3171,3299,3348,3370,3393,3433,3486,1003,1128,1284,1544,1898,2092,2116,2192,2273,2482,2572,2702,2797,2899,3030,3143,3267,3311,3341,3370,3412,3464,666,758,1546,1543,1736,1911,2024,2073,2172,2386,2537,2651,2756,2833,3010,3105,3199,3251,3296,3337,3398,3443,370,126,1160,1183,1295,1420,1583,1735,1964,2259,2485,2598,2707,2790,2901,3052,3113,3194,3230,3256,3310,3386,443,134,143,646,988,1198,1446,1754,2065,2133,2377,2529,2642,2742,2809,2907,3021,3070,3143,3191,3200,3207,603,85,96,2,499,1039,1409,1644,2067,2098,2228,2458,2576,2687,2747,2799,2876,2984,3035,3090,3111,3132,943,517,24,-146,-3,621,1253,1582,1896,2072,2122,2317,2485,2586,2673,2731,2773,2809,2849,2886,2944,3000,1452,625,169,-147,-257,207,868,1523,1707,1898,2046,2148,2320,2487,2566,2623,2693,2729,2762,2786,2797,2802,1179,141,155,-265,-296,-2,347,1259,1572,1529,1642,1905,2099,2273,2388,2483,2536,2590,2629,2671,2690,2690,1024,299,80,-275,-171,-86,-6,394,348,986,1293,1560,1743,2030,2172,2278,2366,2400,2438,2485,2510,2531,1221,819,214,-60,-44,-16,-27,-301,-258,71,769,1120,1432,1743,1982,2022,2096,2182,2240,2290,2327,2360,1294,1002,320,-2,-30,23,-643,-668,-728,-750,-393,585,1085,1396,1584,1682,1828,1979,2034,2039,2022,2042,1036,1052,782,347,-831,-516,-758,-719,-575,-583,-643,38,969,1358,1370,1380,1455,1624,1680,1650,1642,1695,452,346,139,-9,-469,-705,-705,-534,-483,-481,-442,-442,-259,34,557,708,1014,1252,1290,1325,1343,1401,292,13,-185,-5,-450,-695,-684,-517,-467,-437,-422,-459,-348,-148,280,597,877,1183,1206,1279,1288,1350],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
