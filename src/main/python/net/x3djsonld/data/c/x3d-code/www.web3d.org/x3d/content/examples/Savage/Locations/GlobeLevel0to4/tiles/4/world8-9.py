###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[410,420,469,434,509,787,873,1508,1341,1150,1134,1134,1754,1828,1618,1151,305,94,36,-1700,-3183,-3462,414,378,474,467,484,938,976,1071,1466,1173,1134,1134,1691,2359,1886,869,321,122,58,-194,-2988,-3378,409,428,435,439,520,753,871,2241,1755,1237,1135,1134,1134,2476,1896,544,288,141,51,8,-2625,-3129,417,494,425,510,721,735,788,1724,1226,1190,1134,1134,1455,1671,1745,950,357,132,58,8,-1296,-2246,399,483,433,443,473,667,718,927,1455,1306,1148,1085,1682,2344,1407,781,286,161,63,29,34,-1778,421,455,405,489,494,597,745,887,621,1120,1075,1075,2457,1072,1328,623,234,187,85,62,39,-1,375,424,430,482,490,537,781,909,1700,1062,1034,1064,1263,853,1309,489,312,237,149,80,85,59,344,392,529,490,630,737,845,1017,1607,700,1055,1094,1349,730,954,747,352,414,225,138,178,89,420,470,514,451,627,752,799,972,1168,653,1069,1245,1208,554,1648,598,469,476,307,206,313,167,472,552,447,562,639,665,777,887,1086,623,775,1126,942,454,430,609,601,555,411,199,465,331,456,527,539,582,607,662,699,752,956,814,916,1346,644,361,613,889,1097,670,549,278,448,598,431,457,556,566,618,699,715,754,826,585,774,1263,515,474,711,1246,1291,1038,701,176,420,456,549,528,576,635,678,659,630,740,753,498,534,747,465,375,497,1233,1007,1224,840,263,429,611,514,573,563,628,614,670,626,661,636,508,464,518,501,397,535,1652,1059,1104,642,345,458,345,611,577,648,644,650,695,612,532,520,446,443,431,1161,439,798,1526,1705,1365,595,691,496,454,605,688,676,657,641,562,555,477,472,426,432,423,904,517,1461,1540,1727,1117,830,708,334,469,637,622,734,624,765,588,530,462,433,421,426,417,569,1213,1603,1203,2526,1208,938,509,500,536,692,683,693,673,741,564,495,419,414,416,417,426,668,2147,1334,1801,2601,2388,1123,617,909,676,702,758,731,716,614,512,521,407,403,410,412,418,534,2445,1861,2055,2465,1949,1207,824,1011,1036,761,793,825,769,605,487,418,399,400,409,406,413,478,1935,1791,2373,1798,1410,1297,1210,1038,1138,515,948,806,702,498,476,410,391,400,403,405,407,1924,1737,1490,2423,1848,1930,1086,1365,1397,1239,490,558,690,624,505,432,404,394,400,403,398,428,1398,2074,2007,2889,2576,827,2650,1505,1606,1212,468,563,594,520,466,419,405,396,400,402,395,435,1404,1040,1758,2534,2584,758,920,1516,1560,1163,456,586,580,521,458,417,405,398,402,402,393,443,1431,1474,1830,1725,2601,754,848,1191,1606,1099],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
