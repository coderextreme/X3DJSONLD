###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore29-27.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4654829221618253,103.97763792148352,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[51,49,47,45,43,40,36,33,30,30,30,31,33,34,36,38,41,41,41,41,40,39,37,35,32,30,28,26,23,21,20,19,20,20,21,21,19,53,51,49,48,46,43,39,35,30,29,28,29,29,32,34,36,38,39,39,39,39,39,37,35,33,31,29,27,24,21,19,18,20,21,21,21,18,55,53,51,50,50,46,42,37,33,30,27,27,26,28,31,32,34,35,35,36,36,35,33,32,32,31,30,28,25,23,20,18,20,21,21,21,18,55,54,52,52,52,48,44,40,35,32,28,26,25,26,28,29,29,30,31,32,32,32,30,30,31,31,30,28,26,24,21,19,20,21,22,21,19,54,54,53,53,53,49,45,41,37,34,32,29,26,26,26,26,26,26,26,27,29,29,28,28,29,28,28,27,26,24,22,20,21,21,22,23,21,52,53,54,53,52,49,46,43,39,37,34,31,27,25,24,23,23,22,22,23,26,27,27,27,27,26,26,25,25,24,22,21,21,21,23,24,22,48,49,50,50,51,49,47,44,40,37,34,31,27,25,23,22,21,20,20,21,24,26,25,25,25,25,24,24,24,23,23,22,22,21,22,22,20,44,46,47,48,49,48,47,44,41,38,34,31,28,25,22,21,20,19,18,20,23,24,23,24,24,24,23,23,23,23,23,23,22,22,21,20,17,42,43,45,47,48,47,47,44,42,40,37,35,32,29,25,23,21,19,18,18,19,19,20,21,23,24,23,23,24,23,22,22,22,22,20,19,16,39,41,44,46,47,47,46,44,42,41,39,37,35,32,28,25,23,21,18,17,16,16,17,19,22,24,24,24,24,23,22,20,21,21,19,17,14,39,40,41,44,46,47,47,45,43,42,40,37,35,32,29,26,24,22,19,17,15,14,15,16,19,21,21,21,21,19,17,15,15,15,14,13,11,38,38,39,42,45,46,47,46,44,42,40,37,34,32,29,27,25,22,20,17,14,13,13,14,17,18,19,18,17,15,12,10,10,10,9,9,8,37,38,39,42,44,46,47,46,44,42,40,37,34,31,29,27,25,22,20,17,14,13,13,14,16,17,17,16,16,14,11,9,8,8,8,8,7,36,38,39,41,44,45,46,45,44,42,39,37,34,31,28,26,25,22,20,17,15,14,14,14,16,16,15,15,14,13,10,8,7,6,7,7,7,36,36,37,40,43,45,46,45,44,42,39,36,33,30,27,25,24,22,21,20,19,18,18,17,18,18,16,15,14,13,10,8,7,6,7,7,7,35,35,35,39,43,44,45,44,44,41,39,36,32,29,26,24,23,22,22,23,24,23,22,21,21,20,18,16,15,13,11,9,8,7,7,8,8,33,33,33,37,40,42,43,43,43,41,39,37,33,30,28,26,25,25,25,26,26,25,24,24,23,22,20,18,17,15,12,10,9,9,9,9,10,31,31,30,34,38,40,42,42,42,41,39,37,35,33,31,29,28,28,29,29,28,28,27,26,25,24,21,19,18,16,13,11,11,11,11,11,13,30,29,28,32,35,37,40,40,40,40,39,38,36,35,33,32,30,30,30,30,30,30,29,28,26,24,22,21,20,19,16,14,14,14,15,15,16,29,28,26,29,32,35,37,38,38,39,39,38,37,36,36,34,33,32,32,32,32,32,31,30,27,25,23,22,22,21,19,18,18,18,18,19,20,30,28,26,29,30,32,35,35,35,36,37,37,37,37,36,35,34,33,33,33,33,33,32,31,29,27,25,24,24,24,23,22,22,22,21,20,21,32,29,27,28,28,30,32,32,32,33,34,36,38,37,36,35,34,34,34,33,33,33,33,32,30,28,27,27,27,27,27,26,26,26,24,22,22],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
