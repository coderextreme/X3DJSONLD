###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore26-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4392877850278434,103.60419903412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[19,20,23,25,25,25,25,26,27,29,32,35,36,36,33,28,26,27,26,22,21,20,20,20,20,21,22,22,23,23,24,24,24,24,24,24,24,20,20,21,22,22,22,23,23,24,26,29,31,32,32,31,28,28,30,29,26,24,22,22,22,22,23,23,23,23,23,24,25,25,25,25,26,26,20,20,20,21,21,21,21,22,22,23,25,28,29,29,29,29,30,33,33,29,27,24,24,24,24,24,23,23,23,24,25,25,26,26,26,27,28,22,22,23,23,22,22,22,24,25,26,27,29,30,31,32,32,32,33,32,30,28,25,25,25,25,25,25,25,25,25,26,26,26,26,26,27,28,23,24,24,24,23,22,24,26,27,28,29,30,32,34,35,34,33,33,32,31,29,27,26,25,25,25,26,26,26,26,26,26,26,26,25,26,27,22,22,22,22,21,20,22,25,28,31,32,33,34,35,35,33,32,32,32,31,30,28,27,26,26,26,26,26,26,25,25,25,25,25,24,25,26,22,21,20,20,19,18,21,24,29,34,35,37,37,37,36,33,32,31,32,31,30,29,28,27,27,27,27,26,26,25,25,24,24,24,23,23,24,19,17,17,17,17,18,21,23,28,33,34,35,35,34,33,31,30,31,31,32,32,31,30,29,28,28,27,27,26,25,25,24,23,23,22,23,23,16,14,13,15,17,19,21,22,27,32,32,32,32,32,31,30,29,30,31,32,33,33,33,30,29,28,28,27,27,26,25,24,23,22,22,22,22,15,12,12,12,14,16,18,20,24,27,27,28,28,28,28,27,28,29,31,33,35,36,36,35,33,32,30,29,28,27,26,25,24,23,22,22,21,14,11,11,11,12,14,16,18,20,22,23,23,24,24,25,25,27,29,31,35,37,38,39,40,38,35,32,30,29,29,28,27,26,24,23,22,21,13,10,10,11,13,15,16,18,20,21,22,23,24,25,26,26,28,31,34,38,41,43,44,43,41,37,34,32,31,31,31,29,27,25,24,23,22,12,9,11,13,15,17,18,18,20,22,23,25,26,28,28,27,29,34,38,42,45,49,49,47,43,38,35,34,34,33,33,30,27,26,24,24,23,11,10,13,16,18,20,21,22,24,26,27,28,29,30,29,28,30,34,39,44,50,55,55,51,46,41,37,36,34,33,31,29,27,26,25,24,24,9,10,15,20,22,23,25,27,29,31,32,32,32,32,30,28,29,33,39,48,55,61,61,56,50,44,39,37,34,31,29,28,27,26,25,25,25,9,11,15,19,21,22,24,27,29,32,33,34,35,35,32,29,29,31,37,47,53,59,60,55,50,45,41,38,35,31,28,28,27,26,25,25,26,9,10,14,17,18,20,22,25,27,30,33,36,37,38,35,31,30,30,35,44,50,55,56,52,48,45,42,40,36,32,29,28,27,26,26,27,29,9,10,12,15,16,18,20,22,25,29,33,38,39,38,34,30,29,29,33,39,45,50,51,50,47,43,41,39,37,32,29,28,28,26,26,28,32,8,9,11,12,13,15,17,20,23,27,33,39,40,38,33,28,27,27,30,34,39,44,47,47,45,41,39,38,36,32,29,29,28,27,27,30,34,8,9,11,12,14,15,17,19,22,26,32,37,37,36,32,27,26,26,28,32,37,43,46,46,43,39,37,37,35,32,30,29,28,28,28,30,34,10,10,12,14,15,16,18,19,22,25,28,31,32,33,30,27,26,26,28,33,38,43,45,45,41,38,35,34,33,31,30,29,28,28,28,29,32,11,11,13,15,17,18,19,20,22,25,26,27,28,30,30,27,26,26,29,34,40,45,46,45,42,39,36,35,33,32,31,30,30,30,30,30,30,13,12,13,15,17,20,21,22,23,24,24,23,26,29,30,29,28,27,31,37,43,48,48,46,44,42,39,37,35,33,32,34,34,34,32,31,30],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
