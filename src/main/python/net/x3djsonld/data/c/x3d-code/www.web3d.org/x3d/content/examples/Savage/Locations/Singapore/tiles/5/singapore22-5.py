###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore22-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.6616511706451,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[6,6,6,7,11,16,18,19,20,19,18,17,16,16,16,17,20,24,28,30,31,30,30,31,31,30,30,29,29,29,28,27,27,27,28,30,33,6,6,6,7,9,12,14,16,18,19,19,18,17,16,16,17,20,24,28,32,33,32,32,32,32,31,30,29,29,28,28,29,28,27,27,28,31,6,6,6,7,7,8,10,13,15,17,18,18,18,17,17,17,19,23,28,34,36,35,34,33,32,31,30,29,28,28,28,29,29,28,28,28,29,6,6,7,6,6,6,7,9,12,15,17,18,18,18,18,17,19,22,27,34,37,38,37,35,32,30,29,28,27,26,27,29,31,31,29,28,28,6,6,6,6,5,4,4,5,8,12,15,17,18,19,18,17,17,20,25,33,37,39,39,35,32,29,28,26,24,23,24,28,31,32,31,30,29,6,6,5,5,4,3,1,1,4,9,14,18,20,19,18,16,16,18,22,30,35,38,37,33,29,28,26,23,21,19,19,23,28,31,32,33,35,6,5,5,3,2,1,0,0,2,7,13,19,21,20,19,16,15,16,20,27,32,35,34,29,26,25,24,22,19,15,14,19,26,31,35,38,42,5,5,3,1,0,0,0,2,5,10,15,20,23,22,20,17,15,15,19,24,27,28,26,22,21,22,22,20,17,12,11,18,25,33,40,45,51,5,4,1,0,0,0,1,5,8,11,16,20,22,22,20,16,15,14,17,22,23,22,20,17,16,19,20,19,17,13,12,18,27,36,45,52,59,4,1,0,0,0,1,4,8,9,11,13,16,17,17,16,14,13,13,15,18,19,19,17,14,14,16,17,18,19,20,22,27,33,41,50,58,63,3,0,0,0,1,4,8,10,10,10,10,10,11,12,13,12,13,13,14,14,15,15,14,13,12,13,15,18,22,27,31,35,40,47,54,61,65,3,0,0,1,4,8,9,10,8,6,3,0,3,9,13,15,15,13,12,11,11,13,13,14,14,14,16,21,26,33,39,45,48,50,52,54,56,4,0,1,5,8,10,10,9,6,2,-2,-6,-3,5,12,17,17,13,9,7,7,10,12,14,15,15,18,23,30,38,45,51,53,51,48,46,46,8,6,7,8,9,9,7,4,0,-3,-6,-7,-3,3,9,15,15,11,7,3,3,7,10,12,15,16,20,27,34,40,44,46,44,41,37,35,35,11,11,11,10,10,9,5,0,-3,-8,-9,-9,-4,1,7,12,12,8,4,0,0,4,8,11,15,18,23,31,38,42,43,40,35,31,27,25,25,11,10,9,8,7,4,0,-3,-7,-9,-9,-6,-2,1,5,8,7,4,2,1,3,5,8,12,17,23,29,34,37,36,34,31,27,24,22,22,24,9,8,7,6,4,1,-3,-7,-9,-9,-8,-5,-1,1,3,4,3,0,1,4,6,7,9,13,19,28,34,36,35,31,26,22,19,19,19,21,25,8,7,6,5,4,2,0,-4,-7,-8,-7,-4,-1,0,1,1,1,2,4,7,9,10,12,17,23,30,33,32,29,25,21,19,18,19,22,27,33,7,6,5,5,4,3,1,-2,-4,-6,-5,-3,-1,0,0,0,1,5,9,11,13,13,15,20,25,30,32,28,24,20,17,17,18,20,25,33,40,6,6,6,6,7,6,4,1,0,-2,-2,-2,-1,0,0,2,6,10,12,14,15,16,18,19,22,25,26,24,21,19,18,18,21,26,32,40,47,6,6,6,7,9,9,7,4,2,0,0,0,0,0,2,6,10,14,16,16,17,18,19,18,18,20,20,20,19,18,18,21,26,32,39,47,53,7,7,7,8,8,8,5,3,1,0,0,0,0,1,6,11,14,16,18,18,18,17,16,13,13,15,16,17,18,19,22,27,32,39,46,53,56],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
