###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.7334663412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[14,15,16,16,16,16,16,17,17,18,20,19,18,17,17,17,17,18,18,18,17,16,14,13,11,10,10,10,11,11,13,16,21,26,27,28,12,14,15,17,17,16,15,16,18,19,18,17,17,16,15,16,17,18,18,17,17,16,15,14,13,12,13,13,12,11,13,15,23,29,27,24,11,13,16,17,18,17,15,17,19,19,17,16,16,16,16,17,18,19,18,18,18,18,17,16,15,14,16,16,13,11,13,15,22,28,23,19,11,13,17,18,19,18,17,17,18,18,16,16,16,18,20,21,21,20,20,20,21,21,21,20,18,16,18,18,14,10,12,14,19,21,15,11,10,14,18,19,19,19,18,18,19,18,17,17,18,19,23,23,22,21,19,20,21,23,23,23,20,19,22,22,17,12,14,16,17,17,12,8,9,14,18,20,20,19,19,20,20,20,20,20,20,21,24,23,21,19,17,17,20,22,23,23,22,23,28,30,23,18,19,20,19,17,14,12,9,13,18,19,20,20,20,21,21,21,22,22,22,22,24,23,20,18,16,16,19,22,23,24,26,28,34,36,29,24,24,24,21,19,17,16,9,12,16,18,19,20,21,21,21,22,23,22,21,21,23,23,21,19,16,17,20,22,24,26,31,34,37,39,34,29,27,24,23,22,21,20,9,12,15,17,19,20,21,21,21,21,22,22,21,21,22,23,22,21,19,19,21,23,25,27,33,37,38,38,34,30,28,26,25,24,22,20,10,14,17,19,20,20,21,21,21,21,21,21,21,21,22,23,24,24,22,22,24,24,24,26,31,35,35,34,29,26,28,29,25,22,20,17,10,15,18,20,20,20,20,20,21,21,21,21,22,21,21,22,24,25,25,25,25,25,23,23,28,31,30,28,24,22,27,31,26,21,18,16,10,14,17,19,19,19,19,19,20,21,22,22,22,21,20,21,23,25,26,26,25,23,21,21,24,26,25,24,20,19,25,29,26,22,20,18,10,13,15,17,19,19,19,19,20,22,23,23,22,21,20,20,23,26,28,27,24,21,19,18,20,22,23,22,20,19,24,28,27,25,23,21,10,12,15,17,19,21,21,21,21,22,23,23,22,21,20,21,24,28,29,28,24,20,18,18,18,19,23,25,22,22,26,30,29,28,25,21,11,12,15,18,21,23,24,23,22,22,23,23,22,21,20,22,26,29,30,28,23,19,19,19,19,19,23,26,26,27,30,32,31,30,25,20,12,14,17,21,25,28,30,27,22,21,23,23,22,21,22,24,27,28,28,26,22,20,21,22,22,22,23,25,28,31,32,32,31,28,22,17,15,17,21,25,29,32,34,29,22,21,22,22,21,21,23,25,27,27,25,23,22,21,23,24,24,23,22,23,28,32,31,30,27,24,18,13,18,22,26,29,32,33,32,28,23,21,21,21,21,21,23,25,27,26,24,23,22,22,23,23,22,21,20,21,25,27,26,24,21,17,13,9,23,27,31,33,33,31,27,25,24,22,20,20,20,21,22,24,26,26,24,23,23,23,22,21,20,19,19,19,19,19,18,17,14,11,9,8,27,31,35,34,32,27,23,22,22,20,18,18,19,20,21,23,24,25,24,24,23,23,23,22,20,19,18,18,17,15,14,13,11,10,10,10,31,34,36,33,29,24,19,19,19,19,18,18,19,19,20,21,22,23,24,24,23,23,24,24,21,19,18,17,16,14,13,12,12,11,13,14,32,33,33,30,27,23,19,19,19,18,18,18,19,19,20,21,21,22,24,25,24,24,24,23,20,18,18,17,15,13,12,12,14,16,17,16],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
