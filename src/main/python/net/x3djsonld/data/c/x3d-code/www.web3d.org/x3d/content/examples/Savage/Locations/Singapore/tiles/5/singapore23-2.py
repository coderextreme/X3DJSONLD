###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore23-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4130926478938615,103.61856206825804,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[21,20,20,20,20,21,21,19,18,18,18,20,21,22,22,23,24,25,25,24,23,23,24,26,28,29,29,29,29,29,30,31,31,31,30,28,21,21,20,20,21,21,21,19,18,18,18,17,18,18,19,20,21,21,21,20,21,22,24,26,28,29,29,29,29,29,30,30,30,30,29,28,20,20,19,20,21,21,21,19,18,18,17,17,16,16,16,17,18,19,19,20,21,22,24,25,27,27,28,28,28,28,28,29,29,29,28,26,19,19,19,20,21,21,21,19,18,18,17,17,16,16,16,16,16,18,20,21,22,22,23,24,25,25,27,27,27,26,26,27,27,27,26,24,20,20,20,20,21,21,21,20,19,18,18,17,16,16,16,17,18,19,21,23,24,24,24,25,25,26,26,26,25,24,25,25,25,25,24,22,21,20,20,20,21,21,21,21,21,20,19,17,16,16,16,18,20,22,24,25,26,26,26,26,27,27,26,25,24,23,23,24,23,23,22,20,20,20,19,20,21,21,21,21,21,20,19,17,16,16,17,20,23,26,26,26,27,28,29,28,28,27,27,26,24,23,23,23,23,22,21,20,19,19,19,19,21,21,21,21,21,20,18,17,15,16,18,22,26,28,28,27,28,30,31,31,29,28,28,27,26,25,24,23,23,22,21,20,20,19,19,19,21,21,20,20,20,19,17,16,16,17,20,24,27,28,27,27,29,31,32,32,29,28,27,27,27,26,25,24,25,24,22,20,22,20,19,19,20,20,19,19,18,18,16,16,17,19,22,24,26,26,25,26,29,32,33,33,29,28,27,27,27,27,26,26,27,27,24,22,24,22,20,21,21,20,19,19,18,17,17,17,17,19,22,24,24,24,24,26,29,31,32,31,28,26,26,26,26,27,27,27,28,28,25,23,25,23,22,22,23,21,20,19,19,18,18,17,16,18,21,22,22,23,23,25,28,29,29,28,26,25,24,25,26,27,27,28,28,28,26,25,25,24,23,23,22,22,20,20,20,19,18,17,16,17,19,20,20,21,23,25,27,27,27,26,25,24,24,25,26,27,27,28,29,28,27,27,24,24,23,23,22,22,21,22,22,20,18,17,16,16,17,18,19,21,22,24,26,25,24,24,24,25,26,27,27,27,27,28,29,29,29,29,24,23,23,22,22,23,24,24,24,21,19,17,16,16,17,17,18,20,22,23,24,23,23,23,25,27,28,28,27,27,27,28,29,29,29,30,23,22,22,22,22,24,27,27,27,24,20,18,16,16,17,18,20,21,21,22,21,21,21,24,28,30,31,30,27,27,27,28,28,28,29,30,23,22,21,21,22,26,29,29,28,25,20,18,16,16,17,19,21,22,22,22,21,21,21,25,30,32,32,31,28,27,27,27,27,27,28,29,23,21,20,20,22,25,28,28,27,24,20,18,16,16,17,19,21,22,24,23,22,22,22,25,29,32,32,30,28,27,27,26,25,25,25,27,24,22,20,20,21,24,26,26,26,23,19,17,16,16,16,18,21,23,26,26,25,23,23,25,29,32,32,31,29,28,27,25,24,23,23,25,26,24,21,21,22,23,24,23,22,21,18,17,15,15,15,17,20,24,29,30,29,27,25,25,29,32,34,34,32,30,28,25,23,22,23,25,29,26,23,23,23,23,23,22,20,19,18,17,16,15,15,17,19,24,29,32,32,30,27,28,31,34,37,37,36,34,30,26,23,22,23,26,30,27,25,25,25,24,24,22,21,20,19,18,17,16,16,16,17,20,24,27,29,30,29,31,35,39,42,43,41,37,33,29,27,25,26,28,32,30,28,27,26,25,24,23,22,21,20,19,19,18,16,16,16,18,20,23,27,30,32,35,40,44,49,50,46,42,38,34,31,30,30,31],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
