###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_21',geoSystem=['GDC'],position=(-33.79166499031936,-112.54166465504323,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-33.79166499031936,-112.54166465504323,0.0),range=4495500.0,child1Url=['../../tiles/4/world4-2.x3d'],child2Url=['../../tiles/4/world4-3.x3d'],child3Url=['../../tiles/4/world5-2.x3d'],child4Url=['../../tiles/4/world5-3.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world2-1.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4825,-4677,-4606,-4515,-4463,-4161,-3995,-3772,-3373,-2986,-2848,-3157,-3309,-3626,-3943,-4006,-3665,-4305,-4349,-4145,-3812,-4672,-4660,-4881,-4699,-4393,-4140,-4015,-3824,-3228,-3174,-2675,-3134,-3240,-3566,-3705,-3785,-4054,-4329,-3882,-4223,-3997,-4789,-5015,-5053,-4711,-4609,-4354,-3871,-3451,-3668,-3273,-2792,-3154,-3249,-3544,-3780,-3930,-3767,-4214,-3995,-4310,-4174,-5021,-5249,-4952,-4858,-4551,-4321,-3809,-3873,-3918,-3362,-2929,-3160,-3315,-3490,-3846,-4146,-4764,-4189,-4043,-4280,-4078,-5075,-5263,-5051,-4770,-4409,-4277,-4309,-4020,-3120,-3374,-2740,-2982,-3197,-3443,-3893,-4075,-4508,-4051,-4308,-3878,-3586,-5180,-5123,-4994,-4656,-4464,-4137,-3994,-4689,-3787,-3272,-3056,-2938,-3535,-3698,-3991,-4700,-4675,-3474,-3559,-3208,-2867,-5083,-5042,-4942,-4568,-4482,-4014,-4323,-3979,-3823,-3383,-3056,-2886,-3458,-3666,-3860,-4149,-4427,-3853,-3233,-3339,-3279,-4674,-4994,-4783,-4624,-4176,-4366,-4286,-4207,-3818,-3483,-2850,-2860,-3515,-3824,-3968,-4102,-4308,-3602,-3206,-3070,-3177,-4743,-4719,-4418,-4325,-4066,-4110,-3914,-4133,-3827,-3483,-1891,-2868,-3507,-3770,-4069,-4026,-4030,-3819,-3015,-3115,-3557,-4873,-4577,-4531,-4288,-4285,-3307,-4242,-4399,-4020,-3379,-2113,-2941,-3577,-3687,-3785,-3075,-3194,-2749,-2969,-3408,-3781,-4791,-4082,-3944,-4146,-3173,-4127,-3961,-3810,-3492,-3458,-3014,-2823,-3449,-3320,-3320,-3331,-3816,-3381,-3411,-3463,-3516,-4622,-3854,-3836,-4085,-4315,-4194,-1348,-3653,-4058,-3427,-2589,-3006,-3095,-3165,-3313,-3365,-2983,-3492,-3486,-3658,-3692,-4724,-4333,-3591,-3654,-3580,-2588,-3695,-3588,-3466,-2858,-2610,-2980,-3295,-3407,-3119,-3409,-3826,-3647,-3686,-3766,-3602,-4199,-4290,-3817,-4106,-2420,-2571,-2635,-3229,-3508,-3154,-2899,-3064,-3324,-3386,-3647,-3555,-3676,-3835,-3895,-3258,-3575,-4145,-4004,-3962,-3358,-3737,-3738,-3477,-3398,-3448,-3034,-2761,-2699,-3266,-3459,-3515,-3623,-3781,-3735,-3878,-3397,-3391,-4068,-4337,-4215,-4187,-3829,-3822,-3681,-3508,-3420,-3156,-2994,-3045,-3176,-3435,-3508,-3658,-3522,-3871,-3769,-3433,-3631,-4240,-4177,-4086,-4034,-3977,-3636,-3592,-3471,-3380,-3233,-2927,-3077,-2893,-3028,-3471,-3413,-3669,-3642,-3633,-3581,-3607,-4172,-4151,-3861,-3990,-3827,-3495,-3337,-3407,-3369,-3033,-2782,-2772,-2506,-2805,-3435,-3678,-3477,-3344,-3852,-3557,-3484,-4274,-4132,-4068,-3687,-3793,-3675,-3347,-3403,-2803,-1839,-2747,-2288,-2884,-3170,-3519,-3216,-3483,-3300,-3606,-3757,-3403,-4171,-4105,-3784,-3525,-3570,-3614,-2999,-3139,-2898,-3123,-2548,-3104,-3281,-3287,-3456,-2892,-3451,-2330,-3778,-3932,-3873,-4145,-3963,-3449,-3538,-3469,-3314,-2193,-1864,-2983,-3070,-3103,-3450,-3648,-3430,-3606,-3346,-3683,-3738,-2804,-3711,-3414,-4021,-3940,-3396,-3687,-3492,-2823,-1297,-2094,-2889,-2822,-3209,-3575,-3616,-3575,-3615,-3526,-3612,-3601,-3335,-4106,-2649],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
