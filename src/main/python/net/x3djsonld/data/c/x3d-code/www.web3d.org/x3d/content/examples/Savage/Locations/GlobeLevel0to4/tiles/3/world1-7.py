###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_17',geoSystem=['GDC'],position=(-56.291665660871615,157.4583433915838,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-56.291665660871615,157.4583433915838,0.0),range=4495500.0,child1Url=['../../tiles/4/world2-14.x3d'],child2Url=['../../tiles/4/world2-15.x3d'],child3Url=['../../tiles/4/world3-14.x3d'],child4Url=['../../tiles/4/world3-15.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world1-7.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[2189,2186,1968,1588,831,698,-1,-104,-488,-266,-472,-1805,-2195,-2560,-2688,-2741,-3082,-3263,-3425,-3388,-3031,1388,1398,1300,979,763,-15,-421,-706,-745,-849,-1193,-2655,-2670,-1938,-1870,-2130,-3181,-2826,-3500,-3589,-3855,-1,-122,-651,-197,-457,-237,-518,-633,-2115,-2573,-3071,-2836,-2803,-2485,-3035,-3043,-3024,-3294,-3492,-3673,-4105,-393,-2002,-2396,-3067,-3066,-3307,-3171,-3226,-3344,-3261,-3200,-2671,-2767,-3114,-3256,-3261,-3212,-3308,-2549,-3135,-2441,-3539,-3464,-3580,-3776,-3744,-3761,-3772,-3621,-3535,-3283,-3269,-2594,-2902,-3012,-3040,-3008,-2583,-2323,-3036,-3000,-3266,-4422,-4009,-3551,-3703,-3965,-3983,-3937,-3777,-3378,-2732,-2249,-2510,-2835,-2943,-2456,-2865,-2895,-3848,-3617,-3468,-3975,-4409,-4297,-4203,-4258,-4114,-4137,-4082,-3739,-2745,-3108,-2582,-2388,-2998,-2711,-2638,-3365,-3662,-4421,-4295,-4439,-4306,-4609,-4441,-4338,-4189,-4200,-4163,-3462,-3379,-2983,-3319,-2923,-2618,-3026,-3360,-4224,-4500,-4842,-4586,-4302,-3209,-3983,-4623,-4571,-4212,-4071,-3957,-3744,-3448,-2844,-2872,-2791,-3093,-5342,-3774,-4486,-4577,-4864,-4941,-4497,-4813,-4927,-4678,-4715,-4582,-4150,-3970,-3782,-3470,-3100,-3021,-2897,-3373,-3387,-3797,-3600,-4893,-4859,-5187,-5225,-5298,-5075,-4841,-4851,-4462,-4420,-4103,-4089,-3530,-2992,-2639,-2625,-3466,-3641,-3962,-4180,-3703,-4975,-5090,-5122,-5550,-5426,-5324,-5035,-5162,-4161,-3960,-3806,-3652,-3283,-2912,-3179,-3615,-3599,-3678,-3521,-4391,-4189,-4679,-4758,-5173,-5354,-5365,-5201,-4891,-5151,-4201,-3968,-3735,-3079,-2937,-2694,-3863,-3261,-3925,-4059,-4168,-5173,-4549,-5132,-1711,-1719,-4758,-5336,-5130,-5170,-5414,-3909,-3985,-3703,-2842,-2781,-2694,-4067,-3878,-4030,-4098,-4260,-3032,-4141,-4713,-971,-983,-1033,-4636,-5137,-4923,-5251,-3573,-3490,-3649,-2541,-3189,-3192,-4120,-3810,-4181,-4174,-4039,-4450,-3854,-4243,-1157,-812,-375,-412,-4631,-4668,-5062,-3530,-3295,-1843,-3277,-3620,-3050,-4048,-4308,-4255,-4512,-4273,-4462,-5722,-4279,-951,-649,-344,-475,-3240,-4972,-4968,-2980,-3084,-3187,-3646,-3782,-4289,-4302,-3592,-4362,-4281,-4496,-3901,-3307,-3770,-77,-579,-565,-536,-1235,-4598,-4582,-3310,-3021,-2980,-3861,-4039,-4605,-4302,-3635,-4345,-4814,-4647,-4721,-4107,-2200,-2061,-615,-482,-493,-691,-1191,-2395,-3608,-3642,-3336,-4048,-4241,-4383,-3976,-1650,-4637,-4670,-4850,-4530,-4374,-4438,-2460,-655,-832,-736,-751,-1267,-714,-3945,-3776,-3812,-4082,-4451,-3088,-1209,-2254,-4857,-4833,-4753,-4681,-4384,-4461,-2674,-131,-1262,-1390,-1236,-626,-154,-4204,-4174,-3854,-4631,-4313,-2787,-1747,-4349,-4454,-4578,-4771,-4925,-4915,-4370,-140,-64,-675,-1543,-1917,-2668,-3092,-4217,-4080,-3850,-4344,-4649,-2699,-2008,-4381,-4465,-4609,-4665,-4908,-4957,-4355,-139,-147,-741,-1538,-2029,-2693,-3281],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
