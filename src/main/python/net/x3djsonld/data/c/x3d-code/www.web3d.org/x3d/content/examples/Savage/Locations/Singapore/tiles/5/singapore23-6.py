###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore23-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4130926478938615,103.67601420477412,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[56,56,53,48,45,46,50,54,59,59,56,52,47,44,41,40,41,44,48,50,50,46,39,34,29,28,30,32,33,34,33,32,31,30,30,29,59,56,50,46,43,43,47,51,53,53,51,48,44,41,39,40,43,47,52,53,50,46,38,32,27,26,29,31,31,30,28,26,26,26,29,30,58,53,47,43,40,40,42,45,47,47,46,43,40,37,36,38,43,49,54,56,53,48,39,32,27,27,31,32,31,28,25,23,24,27,31,33,55,50,44,40,37,37,38,39,41,41,41,39,36,34,34,37,43,49,55,58,56,51,41,33,28,27,32,33,31,27,22,21,24,29,33,36,51,47,42,37,35,35,37,39,40,39,38,36,35,34,34,37,42,49,56,58,55,49,39,31,27,26,31,32,29,25,21,20,25,31,34,37,46,44,40,36,33,34,37,39,40,39,36,35,34,35,36,38,42,48,56,57,53,46,36,29,25,25,29,30,27,23,20,20,26,32,35,36,44,43,40,36,32,33,36,38,39,38,35,35,37,38,40,42,44,49,56,56,50,43,33,26,22,21,24,25,22,20,18,20,25,30,33,34,43,44,41,36,32,32,35,37,38,36,34,35,40,43,45,46,46,49,55,55,48,39,29,23,20,18,19,19,17,16,17,19,23,27,30,30,39,40,38,33,28,28,31,34,36,34,32,34,40,43,45,46,47,50,55,53,46,37,28,21,17,15,15,15,13,13,15,18,21,23,26,26,33,36,35,30,25,24,27,30,32,32,30,32,38,41,42,43,46,49,53,51,44,36,26,19,16,14,13,12,11,12,14,16,18,20,21,22,29,32,32,28,22,21,24,27,30,30,30,32,38,40,39,40,42,44,46,44,38,31,24,18,15,12,11,10,10,11,12,14,16,18,19,20,27,30,30,26,22,21,22,25,29,30,29,32,38,40,38,37,36,36,36,34,29,24,20,16,13,11,10,10,10,10,11,13,15,17,18,20,25,28,28,24,20,19,20,23,27,28,28,31,37,40,40,38,35,32,29,26,22,18,15,13,12,11,11,11,11,11,11,13,15,18,19,20,23,26,26,22,18,17,18,21,24,25,25,29,36,41,43,41,35,29,23,18,14,12,11,10,11,11,12,13,12,12,12,14,16,19,21,22,20,22,22,19,16,16,18,20,22,23,22,26,33,40,45,43,36,28,20,13,10,8,9,10,11,13,15,15,14,13,13,15,18,21,23,24,15,17,18,16,14,15,18,20,21,21,19,22,28,36,44,43,35,27,19,13,9,8,10,12,14,16,18,18,15,14,15,17,19,22,23,25,13,14,14,14,14,17,21,23,23,21,18,19,24,31,38,38,32,25,17,12,9,8,11,14,15,17,19,19,17,16,16,17,20,22,24,25,12,12,12,14,17,22,28,30,29,25,20,18,19,23,27,27,24,20,15,13,11,12,14,15,14,15,17,18,18,18,18,18,19,21,22,23,12,12,12,15,19,26,32,34,31,26,19,16,15,16,19,19,18,16,14,13,12,12,14,14,13,13,16,18,19,19,19,19,19,19,20,22,13,13,14,17,21,28,34,34,31,25,17,12,11,11,13,14,14,13,13,12,11,10,11,11,12,14,17,19,20,21,20,20,19,19,20,22,14,14,16,19,23,29,34,34,29,22,14,9,8,8,9,10,11,11,12,12,10,9,9,10,12,15,19,21,22,22,21,20,19,19,20,22,16,16,17,21,26,31,33,31,25,18,10,7,8,9,9,9,10,11,12,12,10,9,9,10,14,17,20,22,22,22,22,21,20,20,20,21,19,17,18,22,27,31,31,27,21,14,8,6,7,8,8,9,10,11,12,12,10,9,9,11,15,18,20,22,22,23,22,22,21,20,19,20],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
