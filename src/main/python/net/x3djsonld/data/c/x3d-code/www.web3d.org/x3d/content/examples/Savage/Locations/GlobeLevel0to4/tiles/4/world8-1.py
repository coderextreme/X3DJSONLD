###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4975,-4791,-3915,-4409,-4841,-4780,-4836,-4767,-4761,-4617,-4292,-4235,-4468,-4424,-4354,-4471,-4457,-4315,-4209,-4254,-4441,-4471,-4982,-4850,-4769,-4126,-4807,-4772,-4553,-4512,-4611,-4267,-4071,-3859,-4343,-4314,-4499,-4489,-4316,-4255,-4319,-4431,-4259,-4475,-3454,-4772,-4883,-4742,-4743,-4574,-4348,-4501,-4088,-3960,-4245,-4188,-4284,-4362,-4329,-4439,-4319,-4293,-4287,-4314,-4402,-4128,-3568,-3890,-4721,-4867,-4624,-3000,-3885,-4409,-4531,-4300,-4368,-4326,-4217,-4405,-4405,-4346,-4297,-4364,-4378,-4328,-4361,-4336,-4318,-3808,-3956,-4795,-4392,-3450,-4255,-4399,-4476,-4371,-4290,-4320,-4335,-4241,-4355,-4434,-4353,-4390,-4365,-4451,-4360,-4292,-4159,-4266,-4407,-4506,-4519,-3992,-4268,-4472,-4586,-4607,-4512,-4577,-4354,-4304,-4318,-4432,-4402,-4365,-4158,-4356,-4439,-4405,-2256,-4319,-4774,-4428,-4656,-4369,-4188,-4441,-4618,-4804,-4536,-4462,-4386,-4348,-4344,-4432,-4372,-4371,-4238,-4397,-4453,-4520,-2667,-4537,-4763,-4901,-4798,-4569,-4342,-4482,-4687,-4608,-4553,-4518,-4309,-4432,-4458,-4546,-4410,-3925,-4247,-4346,-4387,-4361,-4326,-4721,-4801,-4780,-4859,-4914,-4692,-4814,-4804,-4763,-4687,-4625,-4461,-4502,-4503,-4467,-4324,-4203,-4175,-4292,-4290,-4360,-4136,-4468,-4728,-4835,-4825,-4863,-4988,-5110,-4866,-4667,-4589,-4667,-4594,-4480,-4554,-4418,-4316,-4279,-4281,-4348,-4328,-4311,-4185,-4606,-4755,-4754,-4902,-4931,-4899,-4740,-4959,-5117,-4478,-4600,-4538,-4437,-4383,-4359,-4356,-4251,-4362,-4399,-4335,-4363,-4320,-4474,-4511,-4715,-4855,-4885,-5106,-4938,-4710,-5034,-5141,-4996,-4504,-4511,-4505,-4401,-4311,-4298,-4346,-4422,-4495,-4436,-4386,-4669,-4250,-4728,-4926,-4883,-5034,-4805,-5005,-4718,-4918,-5019,-5063,-4628,-4417,-4469,-4436,-4358,-4420,-4470,-4594,-4572,-3427,-4660,-4707,-4745,-4825,-4829,-5039,-5070,-4747,-5109,-5100,-5021,-4977,-4892,-4882,-4823,-4445,-4468,-4624,-4565,-4639,-4589,-4296,-4659,-4860,-4750,-4800,-4938,-5208,-5145,-4874,-4494,-5078,-5109,-5107,-4999,-4909,-4727,-4808,-4879,-4681,-4552,-4575,-4672,-4442,-4814,-4901,-4803,-4835,-5019,-5183,-4953,-5085,-5075,-5152,-5090,-5231,-5077,-4928,-4799,-5081,-4925,-4765,-4937,-4526,-4610,-4153,-4854,-5048,-4734,-4819,-5209,-5271,-5059,-4645,-4780,-5021,-5151,-5064,-5045,-4796,-4986,-4968,-4967,-4930,-4700,-4705,-4798,-4556,-4959,-5109,-4801,-5004,-4997,-5245,-5253,-4773,-4973,-4996,-5120,-5143,-5014,-5167,-5048,-5043,-5070,-4807,-4605,-4564,-4738,-4393,-4962,-5172,-4973,-5091,-5439,-5091,-4866,-4688,-5069,-5120,-5113,-5155,-5074,-5052,-5025,-5129,-5096,-4861,-4774,-4607,-4656,-4835,-5230,-5208,-5076,-5197,-5039,-5072,-4867,-4936,-5239,-4955,-5167,-5104,-5088,-5159,-5083,-5096,-5135,-4863,-4787,-4665,-4721,-4970,-5207,-5354,-5094,-5245,-5280,-4923,-4635,-5229,-5162,-5293,-5321,-5236,-5166,-5041,-5130,-5106,-5043,-4879,-4653,-4783,-4697,-4410,-5344,-5249,-5199,-5172,-5248,-4918,-5012,-5118,-5209,-5170,-5208,-5118,-5080,-5131,-5171,-5171,-4973,-4802,-4813,-4807,-4820,-5119,-5221,-5337,-5265,-4842,-4989,-4349,-5039,-5282,-5191,-5240,-5116,-5269,-5118,-5013,-5085,-5032,-4878,-4792,-4809,-4854,-4950,-5397,-5203,-5340,-5249,-4947,-5117,-4498,-5001,-5324,-5239,-5314,-5128,-5151,-5061,-5019,-5164,-5063,-4860,-4822,-4804,-4828,-4916],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
