###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world13-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(56.20833769188965,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2668,-1468,127,-12,-19,834,52,1229,1058,768,697,806,702,1516,2041,1040,1169,839,820,641,625,631,-2683,-725,-395,-346,95,1345,94,714,1009,797,715,811,880,1753,1158,1000,859,751,963,671,650,672,-2582,-94,60,-2,391,1192,1036,2070,874,1279,1071,870,1578,1189,848,665,659,744,839,758,636,565,-1055,-119,454,-78,801,1168,275,1839,1382,1260,928,849,1125,1045,776,710,590,622,674,869,829,557,-392,-1,121,321,909,2090,993,1352,1218,1610,755,1554,992,664,613,374,625,712,661,571,593,561,-57,597,69,1126,1402,896,1604,846,1521,1022,1054,1054,794,743,910,717,644,598,588,690,530,509,99,-341,863,496,1835,1197,1689,1572,1603,1549,1514,1594,957,699,770,815,647,568,669,564,693,510,345,608,656,1972,931,1474,1811,1553,1153,1449,2052,1548,925,752,964,622,706,416,613,485,651,724,77,-9,1334,2320,506,1441,1123,1801,1533,2179,2021,1034,663,468,668,601,401,334,291,302,346,670,15,921,538,1523,978,1158,1838,1234,1122,1454,1213,588,427,431,372,446,434,343,351,269,249,226,772,1192,630,1353,1341,911,1087,686,1643,1533,663,440,451,621,408,384,337,485,833,806,262,252,627,1219,1408,800,1474,973,986,803,554,725,403,508,649,455,526,638,623,346,648,578,300,303,1611,1490,891,1199,1079,809,810,717,915,977,458,368,461,610,458,613,760,216,277,283,289,230,1520,913,1515,1221,1547,792,928,848,872,908,924,305,606,494,762,304,284,267,198,301,229,203,628,982,1011,1353,1647,1174,1500,1254,1539,896,1244,200,306,374,185,222,217,156,156,156,207,222,703,1569,1550,1241,1202,872,1977,1839,807,916,904,537,220,175,197,243,161,171,156,156,156,251,908,1202,909,962,942,1499,1428,892,1519,1422,799,272,109,271,762,657,243,196,161,156,208,220,820,1198,1007,1460,921,1458,1468,1830,1613,1482,566,62,180,201,280,191,269,273,156,246,243,305,918,1552,678,1430,1506,1771,1283,2006,843,821,636,169,351,436,265,257,283,240,156,304,305,319,1023,886,1198,905,1796,1524,1491,1201,1269,646,332,566,286,247,387,327,282,199,276,290,308,488,1479,903,1099,901,1525,1194,1387,1751,1045,458,123,338,390,244,374,331,305,305,316,385,410,449,1524,1589,1742,2069,2198,1195,1508,1129,579,368,380,253,161,243,460,396,224,272,300,374,475,475,810,1580,990,1358,1075,1408,956,208,110,63,176,156,156,223,287,221,207,304,362,532,409,472,602,823,1294,1330,1618,1261,611,145,39,69,284,156,156,314,195,230,275,312,375,535,389,447],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
