###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore6-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.264653537467964,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[7,10,9,8,7,6,6,6,6,6,6,7,6,4,7,10,10,9,9,9,9,8,7,5,5,5,6,9,11,12,12,12,12,14,15,14,7,9,8,7,7,6,8,10,9,9,9,9,7,6,7,10,11,10,10,9,9,8,8,6,6,5,7,10,12,14,14,14,14,16,18,18,8,10,8,7,8,9,11,14,12,11,11,10,9,7,7,9,9,10,10,9,9,9,9,8,7,7,8,11,13,14,16,16,17,18,20,22,12,12,10,8,10,14,16,18,16,11,11,10,8,6,6,7,8,8,8,9,9,9,9,10,10,9,10,11,12,13,15,18,20,19,19,22,15,16,14,12,16,21,23,24,19,13,11,11,9,7,7,7,7,6,7,8,9,9,10,11,11,11,11,11,11,12,14,18,20,18,18,21,19,21,21,23,26,30,33,35,27,18,14,13,11,10,10,10,9,7,7,7,8,10,11,11,12,11,11,11,10,10,11,14,17,16,16,17,23,26,30,34,37,40,43,44,36,24,18,14,14,14,14,13,10,7,6,6,8,12,13,11,11,11,11,11,10,8,8,11,13,14,13,13,27,29,33,36,38,40,42,43,36,27,20,14,13,14,12,10,8,4,4,5,8,12,13,11,11,11,11,11,10,9,9,11,12,13,12,10,31,33,36,39,40,40,42,43,37,29,22,14,13,13,11,8,5,2,2,3,7,12,13,11,11,12,12,11,10,10,10,11,12,12,11,8,35,37,39,41,42,44,44,43,35,26,19,13,12,12,12,12,9,6,6,7,9,11,11,9,9,10,10,11,10,10,11,11,10,10,9,7,39,41,43,44,46,48,47,44,34,22,17,12,11,11,13,15,13,11,10,11,10,9,8,8,8,8,9,9,10,11,11,10,9,8,8,7,46,49,52,53,54,54,51,46,33,18,13,10,10,10,12,13,12,10,10,12,11,8,7,8,8,8,8,10,10,11,10,9,8,8,8,7,54,57,61,63,63,62,56,49,33,15,10,9,9,10,11,11,10,9,10,12,10,6,5,8,9,8,8,10,11,10,9,8,8,8,8,8,64,68,70,71,70,67,60,49,34,16,12,9,9,9,7,6,6,7,9,12,11,8,7,8,9,10,11,11,10,9,9,9,9,9,9,9,74,78,79,79,76,72,62,50,34,19,13,9,8,7,5,1,2,4,8,12,12,10,9,8,10,12,13,11,10,9,9,10,11,11,10,10,78,79,80,80,79,76,62,48,34,21,16,13,9,6,2,0,0,0,3,7,9,7,8,9,11,12,13,12,11,10,10,10,11,11,11,11,81,79,79,80,80,78,63,46,34,22,18,16,11,4,0,-2,-4,-6,-2,3,5,4,6,10,12,12,12,14,14,13,11,10,10,10,11,12,81,80,77,74,70,67,54,41,31,23,21,21,14,6,3,2,0,-3,-1,0,2,2,5,9,11,12,14,15,15,14,12,12,11,13,13,13,82,82,74,65,58,52,44,35,29,23,24,26,19,9,8,8,4,1,0,0,0,1,4,6,9,13,15,16,16,15,14,13,13,15,15,13,77,72,60,50,45,41,36,31,28,25,24,24,19,12,11,11,10,9,7,5,5,8,9,8,9,12,14,15,16,14,13,13,14,15,16,14,71,58,45,34,31,30,30,28,28,26,24,20,18,15,14,14,16,19,17,14,14,16,15,11,10,11,13,14,14,13,13,14,15,16,16,15,59,47,37,30,29,28,28,28,27,27,24,20,19,17,17,17,19,21,21,20,19,18,16,11,9,10,10,11,11,11,11,14,17,20,22,20,45,37,33,30,29,28,27,27,26,25,24,22,20,20,20,21,21,21,23,25,23,19,16,11,8,8,7,7,7,8,10,13,18,26,30,26],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
