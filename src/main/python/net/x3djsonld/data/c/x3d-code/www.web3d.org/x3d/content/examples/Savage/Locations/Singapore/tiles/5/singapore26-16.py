###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore26-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4392877850278434,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[19,20,20,20,20,21,21,20,19,19,19,20,19,18,19,21,22,23,23,24,23,21,20,20,17,14,13,13,13,13,13,14,15,15,15,14,17,17,17,17,19,19,18,16,15,15,16,17,17,17,18,19,20,22,23,24,24,24,24,24,21,17,14,13,13,13,13,12,13,13,13,13,15,15,15,15,17,17,15,12,11,12,13,14,15,16,17,18,19,21,22,24,25,26,27,27,24,19,14,13,12,12,12,12,11,12,13,13,15,14,14,13,12,13,12,11,11,11,11,12,14,17,18,19,20,21,23,25,27,29,30,30,26,20,15,13,12,11,11,11,11,13,14,16,15,14,12,10,9,9,9,10,10,10,10,11,14,18,19,21,21,21,23,27,30,32,32,31,27,21,16,13,11,10,10,10,11,14,16,19,13,13,13,12,11,10,10,10,9,9,10,10,13,17,19,20,21,21,23,27,29,31,31,29,25,20,15,11,9,8,8,8,9,11,14,17,12,12,12,13,13,12,11,10,9,9,9,10,13,17,18,20,20,20,23,26,29,31,31,27,23,19,14,10,8,7,6,6,7,9,12,16,11,12,13,14,14,13,12,10,10,10,10,9,12,15,16,18,19,19,22,25,26,26,25,21,18,15,12,9,7,6,6,5,7,10,13,17,11,12,14,15,15,15,13,11,11,11,10,9,10,13,14,15,17,19,21,24,23,21,19,16,14,13,10,7,6,6,6,5,6,11,15,17,12,14,16,18,18,18,15,13,12,11,10,9,9,10,12,14,16,17,19,21,20,18,16,15,13,11,9,6,6,6,7,7,7,11,13,15,15,15,19,21,21,21,18,15,13,11,10,9,9,9,10,13,15,16,17,17,17,15,15,15,13,10,7,5,5,7,8,8,8,9,11,13,16,15,16,18,20,22,22,21,17,13,11,9,9,9,10,13,14,14,14,15,15,15,15,14,12,9,7,6,6,6,6,6,5,6,8,10,17,14,14,14,19,24,25,26,22,16,12,8,8,9,11,13,14,13,13,13,13,14,15,14,12,8,6,6,6,5,4,3,2,3,4,6,20,17,15,15,19,24,25,26,21,15,12,11,12,14,15,16,16,15,14,12,13,15,15,13,11,8,7,7,6,2,0,0,1,2,3,5,24,21,18,16,20,23,24,25,19,12,12,14,17,21,21,20,18,17,15,13,13,16,16,12,10,8,7,7,5,0,-2,0,1,2,3,4,26,24,21,19,21,23,24,25,20,14,16,20,22,25,25,24,23,21,18,15,15,15,14,11,9,7,6,5,2,-1,-2,0,3,4,4,3,25,26,24,23,23,24,25,26,22,19,22,26,27,28,28,28,27,26,22,18,15,14,12,10,8,5,3,1,0,-1,-1,2,4,5,5,2,25,25,23,22,22,23,23,23,22,22,25,29,30,30,29,28,28,27,23,19,15,13,11,10,8,6,2,-1,-2,-1,0,4,6,7,6,4,24,21,20,20,20,19,18,18,20,24,27,30,31,32,30,27,26,26,22,17,14,12,11,10,9,7,2,-4,-5,-1,3,6,7,8,7,7,26,22,20,18,18,17,17,16,20,24,27,31,32,33,29,25,24,24,21,17,13,11,11,11,9,6,1,-5,-6,0,4,7,8,8,8,8,31,26,21,17,17,16,16,17,19,22,26,31,32,32,27,21,21,24,21,16,12,11,11,11,8,4,0,-6,-5,0,4,6,8,9,10,9,31,27,22,18,17,16,16,17,19,21,25,30,31,30,26,21,20,20,18,14,12,10,10,9,5,0,-3,-4,-2,1,5,6,7,9,10,9,28,25,22,20,17,15,15,16,18,20,24,29,30,30,26,22,19,16,14,12,11,10,8,5,1,-5,-6,-1,2,4,5,6,7,8,9,7],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
