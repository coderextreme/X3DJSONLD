###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5190,-5259,-5275,-5309,-5373,-5282,-5502,-5613,-5572,-5680,-5789,-5693,-5803,-5799,-5884,-5474,-4193,-4888,-5558,-5653,-5673,-5777,-5250,-5517,-5188,-5069,-5068,-4633,-5583,-5562,-5641,-5676,-5708,-5875,-5840,-5100,-5409,-5421,-5438,-5799,-5903,-5639,-5753,-5751,-4853,-5379,-5341,-5470,-3912,-5296,-5531,-5537,-5602,-5647,-5786,-5673,-5763,-5815,-5213,-5457,-5120,-5745,-5646,-5763,-5767,-5732,-4849,-4522,-5372,-5358,-4135,-5520,-5611,-5590,-5751,-5653,-5752,-5671,-5549,-5682,-5598,-5623,-5593,-5773,-5789,-5925,-5837,-5875,-4405,-4785,-3602,-4504,-5509,-5874,-5592,-5686,-5833,-5678,-5563,-5443,-3065,-5449,-5713,-5654,-5505,-5717,-5722,-5805,-5754,-5735,-3240,-3836,-3271,-2794,-5426,-5325,-5811,-5832,-5697,-5879,-5745,-6101,-5520,-5627,-5535,-5653,-5660,-5822,-5705,-5777,-5870,-5764,-3583,-3942,-3314,-2541,-5198,-5440,-5747,-5793,-5905,-6056,-5916,-5976,-5732,-5898,-5750,-5703,-5846,-5857,-5682,-5835,-5802,-5737,-4315,-4409,-4236,-3856,-3284,-5261,-5477,-5485,-5837,-6032,-5899,-5943,-5831,-5922,-5778,-5459,-5837,-5803,-5791,-5683,-5743,-5621,-4605,-5045,-4703,-4619,-4370,-5186,-5193,-4857,-5511,-5628,-6123,-6191,-5690,-5794,-5742,-5684,-5734,-5954,-5773,-5817,-5795,-5691,-5135,-5026,-4885,-5245,-4596,-5019,-5310,-5571,-5388,-5849,-6247,-5789,-5990,-5764,-5642,-5647,-5812,-6026,-5707,-5873,-5637,-5596,-5382,-5284,-5352,-5360,-4588,-5200,-5328,-4939,-5723,-5591,-5847,-5426,-5611,-5892,-6031,-5603,-5507,-5757,-5699,-5555,-5599,-5671,-5324,-5436,-5271,-5335,-4749,-4928,-4905,-5322,-4830,-5586,-5854,-5925,-5683,-5387,-5157,-5014,-5866,-5337,-5547,-5406,-5452,-5639,-5508,-5452,-5267,-6288,-5500,-5034,-4995,-5371,-5461,-5581,-5520,-5913,-5704,-5493,-5384,-5322,-5233,-5927,-5063,-5001,-5188,-5020,-5518,-5708,-5442,-5119,-5736,-5668,-5472,-5666,-5167,-4129,-5210,-5759,-5720,-5563,-5336,-5110,-5457,-5537,-5518,-5630,-5359,-5211,-5409,-5498,-5205,-5450,-5867,-5834,-5667,-5557,-5462,-5450,-5667,-5715,-5797,-5606,-5244,-5265,-5412,-5387,-5263,-5350,-5163,-5413,-5339,-5344,-5071,-5260,-5861,-5957,-5756,-5739,-5526,-5384,-5520,-5758,-5836,-5688,-5388,-5424,-5417,-5550,-5495,-5327,-5182,-5087,-5276,-6658,-5528,-5805,-6025,-5985,-5785,-5667,-5660,-5418,-5609,-5775,-5769,-5639,-5568,-5498,-5468,-5565,-5395,-5369,-5137,-5308,-6974,-5625,-5674,-5807,-6119,-5989,-5847,-5731,-5635,-5506,-5706,-5657,-5669,-5475,-5263,-5636,-5548,-5439,-5349,-5256,-5259,-5283,-5795,-5797,-5807,-6044,-6137,-5983,-5894,-5719,-5699,-5597,-5787,-5802,-5523,-5407,-5278,-5408,-5587,-5352,-5143,-5315,-5158,-5120,-5900,-5778,-5891,-5916,-5978,-5990,-5937,-5651,-5403,-5659,-5846,-5713,-5522,-5445,-5459,-5614,-5761,-5345,-5251,-5317,-3824,-5492,-5627,-6187,-5826,-5921,-5994,-5858,-6005,-5390,-5617,-5905,-5777,-5747,-5630,-5149,-5578,-5402,-5398,-5597,-5415,-5270,-5016,-5461,-6276,-6622,-5773,-5920,-6064,-6216,-5725,-5201,-5544,-5811,-5662,-5795,-5711,-5766,-5481,-5392,-5464,-5428,-5317,-5283,-5750,-5324,-5883,-5906,-5187,-5792,-5869,-6101,-6044,-5113,-5561,-5553,-5659,-5669,-5887,-5381,-5591,-5593,-5477,-5451,-5334,-5390,-5504,-5105,-5544,-6275,-5293,-5721,-5123,-5625,-6040,-5535,-5642,-5601,-5682,-5682,-5942,-5430,-5685,-5656,-5555,-5428,-5526,-5407,-5456,-5192],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
