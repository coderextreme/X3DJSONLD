###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[55,59,55,51,47,43,40,37,39,43,45,46,45,41,39,38,36,34,31,25,23,25,26,27,29,32,36,40,41,36,34,36,40,47,54,58,60,62,55,48,44,41,38,35,37,39,43,46,45,40,38,37,35,33,30,25,23,24,26,28,31,35,38,41,42,36,33,36,40,46,52,57,62,63,55,46,42,39,37,35,35,37,40,44,43,40,37,35,33,32,29,26,24,25,27,30,33,38,41,42,42,37,33,36,40,45,51,56,60,60,53,45,42,39,36,34,34,35,37,40,40,38,35,33,32,30,28,26,25,26,28,31,35,40,43,42,41,37,35,37,40,45,50,54,55,55,50,45,42,39,36,34,34,35,35,35,35,35,33,32,30,29,27,26,26,27,28,31,35,40,43,40,38,38,38,40,42,45,48,51,50,50,46,43,41,39,36,33,33,34,33,33,33,33,33,32,30,28,27,27,26,26,27,30,34,38,40,36,35,37,39,42,44,46,48,50,45,45,43,41,40,39,36,33,33,33,33,33,33,34,33,32,30,28,27,28,27,25,25,29,32,34,34,33,33,35,39,42,45,46,48,49,44,45,43,41,40,39,36,33,33,33,33,33,33,34,33,32,30,28,28,28,28,25,25,29,31,31,31,31,32,35,38,41,44,45,47,48,48,49,47,45,43,41,38,34,33,33,33,34,35,35,34,32,30,29,29,29,29,26,27,30,31,31,31,31,32,35,38,40,42,43,45,46,49,51,50,48,47,44,40,37,34,33,35,38,38,36,35,33,31,30,30,30,31,30,30,31,32,31,31,31,32,35,38,40,41,42,43,44,46,49,50,51,50,49,45,41,38,36,39,43,42,40,38,35,32,31,31,33,34,34,34,34,34,35,34,33,32,35,37,40,42,42,42,42,40,42,44,46,48,50,47,43,40,39,42,46,46,43,39,36,33,31,32,35,37,37,37,38,38,38,37,34,33,35,37,40,42,42,42,42,31,28,29,31,38,44,44,42,41,41,44,48,47,44,41,38,35,33,33,37,39,40,40,41,42,42,40,36,34,36,37,39,41,43,43,44,23,18,19,21,31,42,43,42,41,42,45,48,48,45,42,39,37,34,35,38,40,42,43,45,46,45,44,38,35,36,38,39,41,43,44,44,19,14,16,20,31,43,44,43,42,41,44,47,48,47,45,41,38,34,34,37,40,43,45,48,50,50,48,42,38,38,39,40,40,43,44,43,19,14,17,22,34,46,46,44,43,41,43,46,48,49,47,43,39,35,34,37,39,43,48,52,55,54,52,46,42,41,40,40,40,42,44,43,26,23,27,33,41,51,50,48,45,41,41,44,47,50,49,44,40,36,35,37,39,43,49,56,59,58,56,50,46,43,41,41,40,41,42,42,33,31,34,40,47,54,53,51,46,42,41,43,47,51,50,46,42,38,37,37,39,43,50,58,63,61,58,53,49,46,43,42,42,41,42,41,37,35,36,37,45,54,53,50,46,42,42,44,48,52,52,49,46,43,40,38,39,45,52,59,63,61,58,53,48,47,46,46,45,44,42,40,40,38,37,37,46,55,54,50,47,43,43,45,49,53,53,52,50,47,43,40,40,45,52,59,63,61,57,53,49,48,48,49,49,46,43,39,36,36,41,45,52,58,56,52,49,46,45,46,49,53,55,55,52,47,44,41,41,45,51,57,61,60,58,54,51,50,50,51,50,47,43,39,35,36,44,52,56,61,59,54,52,49,48,46,49,53,56,57,54,48,45,41,41,44,49,54,58,59,59,55,53,52,52,51,50,47,43,40,41,38,45,53,59,64,62,60,56,52,48,45,47,53,56,57,55,49,45,40,40,43,48,53,57,60,60,58,56,54,53,50,48,45,42,40],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
