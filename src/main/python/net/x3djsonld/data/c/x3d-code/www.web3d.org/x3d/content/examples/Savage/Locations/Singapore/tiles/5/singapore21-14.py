###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore21-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3956292231378735,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[39,42,45,46,46,44,42,43,44,43,41,40,38,37,35,34,33,34,38,38,35,34,34,33,32,32,33,36,39,41,41,39,36,34,33,32,36,39,42,42,42,41,39,41,43,43,41,41,39,37,35,33,30,31,36,36,35,34,33,33,33,33,32,33,36,38,38,36,34,31,31,31,37,39,41,40,40,38,36,38,39,40,40,40,40,38,36,34,31,32,34,35,35,34,34,33,33,32,32,32,34,34,32,31,30,29,30,30,36,38,38,39,38,36,33,35,36,37,38,39,41,39,37,34,32,33,33,34,34,34,34,33,32,32,32,32,31,30,27,26,26,27,29,30,33,33,33,34,35,33,32,32,33,35,38,39,40,40,39,37,34,34,33,33,33,34,33,33,32,32,31,31,29,28,26,24,25,26,28,29,30,29,29,30,31,31,31,31,30,33,38,39,39,40,40,39,36,35,33,33,33,33,33,32,32,31,30,29,28,26,24,24,24,25,27,29,30,29,28,29,30,30,30,30,31,33,37,38,39,40,40,40,38,37,34,34,33,33,32,32,31,30,29,28,26,24,24,23,23,24,26,27,31,29,28,29,29,30,29,30,31,33,34,37,39,39,39,39,39,37,35,33,32,32,31,31,30,29,28,26,24,24,23,23,23,23,24,25,32,31,31,30,30,30,30,30,30,31,32,34,36,37,39,39,38,36,34,32,30,29,29,29,29,28,26,24,24,23,23,23,23,23,23,24,34,34,35,32,30,31,31,31,30,30,30,32,34,36,39,38,36,34,32,30,27,26,26,26,26,26,24,24,23,23,23,23,23,23,23,23,37,37,37,34,31,31,32,32,31,29,27,30,35,37,38,37,34,32,30,27,24,23,23,24,25,24,24,23,23,23,23,23,23,23,23,23,41,40,39,35,32,32,32,33,34,29,25,30,37,38,36,34,32,30,27,24,22,21,21,22,23,23,23,23,23,23,23,23,23,23,23,23,43,41,38,35,32,32,33,35,36,33,29,32,37,36,34,32,30,27,24,22,22,21,21,21,22,22,23,23,23,23,23,23,23,23,23,23,43,40,37,35,32,32,33,36,38,37,36,35,35,34,33,30,28,25,23,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,42,39,36,34,31,32,34,37,40,40,40,38,36,34,33,29,25,23,23,22,22,23,23,23,23,24,24,24,24,23,23,23,23,23,23,24,40,38,35,33,31,33,35,38,42,42,42,41,39,36,33,28,24,23,24,24,24,24,24,24,26,27,27,27,25,23,23,23,23,23,24,25,38,36,35,33,32,34,36,38,42,42,42,40,38,36,34,30,26,24,25,26,25,25,25,27,29,30,31,31,29,28,27,27,26,25,25,26,35,35,35,35,35,36,36,38,41,41,41,39,36,36,35,33,29,28,27,27,27,27,28,30,33,34,35,35,34,34,33,32,30,29,27,27,35,35,35,36,37,37,37,38,40,40,40,37,35,35,35,34,32,30,29,29,29,29,31,33,35,35,36,37,37,38,37,35,34,33,29,27,37,37,38,38,38,38,38,39,40,40,39,36,34,35,36,34,32,31,30,30,30,31,33,35,35,36,36,37,37,38,38,38,37,36,31,27,38,39,39,38,38,39,39,40,41,40,39,37,35,36,37,36,33,32,31,31,30,31,33,35,35,36,36,37,37,38,38,39,39,38,32,26,40,39,38,37,37,39,41,43,44,43,43,41,38,40,42,40,36,34,32,31,31,31,33,34,35,36,36,37,37,38,38,39,39,37,30,24,39,38,37,36,36,39,43,43,45,45,44,42,39,41,43,42,39,36,33,32,31,31,32,34,35,36,36,36,37,38,39,39,39,37,30,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
