###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world15-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(78.7083383624419,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1100,-974,-945,-1647,-2031,-2199,-2200,-2191,-2186,-2076,-2040,-1136,-357,-602,-588,-794,-2014,-1423,-2066,-1290,-654,-573,-1141,-1007,-1012,-1577,-1832,-2004,-2172,-2181,-2191,-2168,-2207,-1635,-603,-1116,-799,-587,-1169,-933,-2070,-2057,-1063,-916,-1416,-1424,-1401,-1209,-1606,-1980,-2115,-2195,-2203,-2137,-1831,-511,-605,-820,-406,-396,-2453,-647,-1023,-1454,-1798,-1843,-1578,-1596,-1345,-1035,-1378,-2007,-2163,-2222,-2226,-2111,-1312,-476,-399,-498,-316,-264,-1192,-2395,-1682,-1802,-926,-1646,-1641,-1397,-1427,-897,-1388,-1548,-1961,-2058,-2308,-2454,-1182,-354,-385,-432,-495,-448,-574,-2199,-1499,-2797,-2992,-1456,-1621,-1438,-1338,-1423,-1639,-1566,-1967,-2231,-2582,-2713,-2595,-2520,-1317,-830,-821,-863,-799,-731,-654,-2356,-2871,-3273,-1506,-1772,-1825,-1833,-1795,-2004,-1851,-2207,-2340,-2951,-3045,-3013,-2644,-2359,-2434,-2237,-2446,-2948,-3115,-3154,-2958,-3630,-1775,-1689,-1568,-1469,-2133,-2212,-2516,-2427,-2884,-3202,-3180,-3148,-3189,-2991,-2669,-3286,-3374,-3424,-3448,-3543,-3557,-3582,-1796,-1247,-1921,-2207,-2275,-2238,-2602,-3148,-3242,-3250,-3289,-3221,-3217,-3267,-3274,-3114,-3221,-3263,-3203,-3137,-3328,-3369,-1740,-2009,-2181,-2071,-2498,-3070,-3225,-3223,-2895,-3241,-3238,-3253,-3242,-3217,-3192,-3104,-3076,-3226,-3649,-3486,-3612,-3528,-2188,-2221,-1859,-2024,-2966,-3217,-2992,-2996,-3233,-3215,-3203,-3207,-3285,-3207,-3387,-3426,-3384,-3545,-3545,-3640,-3696,-3698,-2248,-2132,-2260,-2330,-2430,-2679,-2825,-3021,-3109,-3182,-3260,-3315,-3384,-3484,-3581,-3707,-3697,-3705,-3703,-3787,-3794,-3794,-2269,-2004,-1899,-2607,-2823,-3033,-3160,-3201,-3136,-3245,-3351,-3397,-3473,-3567,-3620,-3648,-3707,-3708,-3767,-3731,-3788,-3793,-2522,-2422,-2451,-2455,-2524,-2734,-2728,-3002,-2886,-3311,-3300,-3308,-3589,-3596,-3568,-3686,-3761,-3714,-3101,-3670,-3485,-3706,-2503,-2542,-2635,-2741,-2802,-2517,-1859,-1613,-2320,-2455,-3078,-3170,-3188,-3293,-3293,-3023,-2636,-2850,-3084,-2704,-3201,-3433,-2676,-2521,-2379,-2371,-2173,-2098,-2152,-2343,-2468,-2364,-2587,-2672,-2950,-2994,-3034,-2693,-2179,-2442,-2531,-2293,-2194,-2211,-2051,-2213,-2226,-2235,-2183,-2143,-2140,-1742,-1628,-1922,-2343,-2390,-2424,-2338,-2223,-1977,-1633,-1404,-1364,-1421,-1818,-2381,-2278,-2109,-2171,-2080,-2032,-2019,-1985,-1974,-2002,-1991,-1850,-1700,-1757,-1620,-1853,-2003,-1993,-1994,-1789,-1993,-2038,-2039,-2571,-2491,-2391,-2297,-2183,-2100,-1970,-1920,-1746,-1725,-1888,-1704,-1665,-1658,-1785,-1801,-1799,-1858,-2008,-2228,-2405,-2331,-2253,-2198,-2262,-2288,-2191,-2200,-2438,-2652,-2650,-2540,-2303,-2202,-2166,-2136,-2268,-2478,-2523,-2537,-2556,-2668,-2777,-2816,-3800,-3808,-3813,-3831,-3892,-3910,-3880,-3832,-3810,-3794,-3817,-3831,-3824,-3813,-3806,-3811,-3829,-3815,-3779,-3633,-3586,-3546,-3831,-3833,-3834,-3834,-3834,-3834,-3830,-3826,-3824,-3826,-3844,-3858,-3857,-3773,-3807,-3730,-3480,-3457,-3472,-3511,-3410,-3498,-3837,-3840,-3842,-3826,-3804,-3781,-3758,-3745,-3763,-3820,-3843,-3832,-3825,-3820,-3762,-3596,-3358,-3198,-3055,-3049,-3268,-3467,-3838,-3840,-3835,-3828,-3819,-3809,-3803,-3804,-3815,-3833,-3840,-3837,-3828,-3716,-3504,-3310,-3199,-3156,-3124,-3164,-3289,-3371],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
