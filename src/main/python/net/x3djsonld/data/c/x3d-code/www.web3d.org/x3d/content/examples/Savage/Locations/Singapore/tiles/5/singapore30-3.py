###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.63292510238706,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[42,40,39,35,33,32,31,32,33,34,35,37,39,37,32,31,31,31,33,33,33,33,33,33,34,34,32,30,29,28,28,28,29,30,30,31,30,39,39,39,37,34,33,32,32,33,34,36,37,39,37,33,31,30,30,32,33,34,34,34,34,34,34,33,32,31,30,29,29,29,29,30,31,30,36,37,38,36,35,34,33,32,31,33,36,38,40,38,34,31,29,29,30,32,35,35,34,34,34,35,34,33,32,32,31,30,29,29,30,30,30,32,33,35,36,35,34,33,31,30,32,36,39,41,39,36,33,30,29,29,31,34,34,32,32,32,33,33,33,33,32,32,31,30,29,30,30,31,28,30,32,34,35,34,32,31,30,32,36,39,42,41,39,35,32,30,29,29,32,32,30,29,29,30,31,32,33,33,33,33,32,31,30,30,30,26,28,31,34,36,34,31,30,30,32,35,37,39,39,38,35,32,30,28,29,31,30,28,28,28,29,31,32,33,34,34,33,32,31,30,30,30,25,28,31,34,36,34,30,29,29,30,32,34,35,36,36,34,33,31,28,28,29,30,28,28,29,30,32,32,33,33,33,33,32,31,30,30,31,24,27,31,33,34,31,28,27,28,28,30,31,33,34,35,34,33,31,28,28,29,30,29,29,30,31,32,33,33,33,33,33,32,32,31,30,31,23,26,29,30,30,28,25,25,26,27,28,29,31,34,35,34,32,30,28,28,30,31,31,31,32,32,33,33,33,33,33,33,33,32,32,31,32,21,24,26,27,27,25,23,23,25,26,28,29,31,33,34,33,31,30,29,30,32,33,33,33,32,32,32,33,33,32,32,32,32,33,32,32,32,20,22,24,24,24,23,21,23,25,27,30,31,32,33,33,31,30,30,32,33,35,35,35,33,31,31,31,32,32,31,30,30,30,31,31,32,33,20,20,22,22,22,21,20,22,26,29,32,33,32,32,30,30,30,31,34,36,38,37,35,32,29,29,29,30,30,30,29,28,28,29,31,32,33,20,20,20,20,20,20,20,24,29,32,35,34,33,31,28,29,31,34,38,39,39,37,32,30,28,28,28,28,29,28,27,26,26,27,30,32,33,19,19,19,19,19,19,20,25,30,34,37,36,34,31,28,29,32,36,40,41,39,36,31,27,27,27,27,27,27,27,25,25,25,26,29,31,32,17,17,16,17,17,18,20,25,31,35,38,38,35,32,28,30,35,39,42,41,38,34,29,27,26,26,26,26,25,25,24,24,24,24,27,29,30,16,15,15,15,16,18,20,24,30,35,38,37,35,31,28,30,35,39,41,40,36,32,28,26,25,25,25,25,23,23,23,24,24,24,25,27,28,16,15,15,15,16,17,19,23,28,32,36,35,32,29,26,28,32,36,37,35,32,29,26,25,23,23,23,23,23,23,23,23,24,24,24,24,25,16,15,15,16,16,17,19,22,26,29,32,31,29,26,23,26,29,32,33,32,30,27,25,23,21,21,22,22,22,22,22,23,24,24,23,23,23,16,16,16,16,17,18,20,22,24,26,26,26,25,23,21,23,26,28,29,30,29,27,25,22,21,20,20,20,21,21,22,23,24,24,23,22,23,16,16,16,17,17,19,20,21,23,22,22,21,21,20,20,21,22,24,27,28,28,26,24,21,20,19,19,19,19,21,22,23,24,24,22,22,23,16,16,15,15,17,18,19,20,21,20,20,20,19,19,19,19,20,22,24,26,26,24,21,19,19,18,18,18,19,20,21,22,22,23,23,22,23,17,15,15,15,16,17,18,19,19,19,19,18,18,18,18,18,19,20,22,23,23,22,19,18,18,17,17,17,18,19,20,20,21,22,23,23,23,19,17,15,15,16,18,19,19,19,18,18,18,17,17,17,17,18,19,20,21,21,20,18,18,17,17,16,16,17,18,19,19,20,21,21,22,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
