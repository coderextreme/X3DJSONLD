###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world15-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(78.7083383624419,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-573,-699,-1979,-3734,-3759,-3719,-3811,-3747,-3751,-3810,-3706,-3777,-3686,-3669,-3656,-3669,-3696,-3662,-3620,-3603,-3530,-3467,-916,-1629,-1028,-2300,-3733,-3735,-3732,-3726,-3720,-3725,-3720,-3694,-3700,-3668,-3637,-3638,-3662,-3678,-3665,-3628,-3594,-3467,-1843,-1699,-1369,-1208,-3219,-3724,-3729,-3726,-3722,-3719,-3708,-3694,-3689,-3687,-3669,-3655,-3659,-3687,-3614,-3561,-3505,-3484,-1646,-1491,-976,-1632,-1684,-2602,-3726,-3725,-3723,-3720,-3714,-3705,-3669,-3693,-3681,-3666,-3646,-3628,-3600,-3558,-3523,-3503,-1456,-1319,-1519,-862,-2392,-3716,-3727,-3727,-3727,-3721,-3719,-3720,-3733,-3699,-3695,-3681,-3651,-3618,-3592,-3565,-3552,-3547,-3273,-3717,-3695,-2612,-3678,-3722,-3725,-3724,-3724,-3720,-3719,-3718,-3720,-3664,-3696,-3686,-3640,-3598,-3582,-3566,-3550,-3540,-3630,-3724,-3708,-3452,-3722,-3725,-3725,-3725,-3722,-3718,-3723,-3720,-3713,-3706,-3701,-3682,-3637,-3601,-3585,-3574,-3563,-3554,-3582,-3483,-3159,-3714,-3724,-3725,-3726,-3727,-3727,-3712,-3718,-3724,-3717,-3703,-3693,-3682,-3642,-3632,-3611,-3595,-3588,-3583,-3369,-3705,-3701,-3716,-3724,-3724,-3724,-3724,-3723,-3718,-3705,-3715,-3707,-3699,-3687,-3656,-3726,-3727,-3724,-3711,-3680,-3677,-3528,-3378,-3669,-3719,-3709,-3721,-3696,-3723,-3719,-3706,-3698,-3695,-3697,-3697,-3691,-3670,-3659,-3701,-3723,-3715,-3696,-3686,-3698,-3700,-3699,-3704,-3587,-3669,-3797,-3742,-3595,-3443,-3680,-3700,-3677,-3675,-3672,-3662,-3654,-3661,-3680,-3691,-3684,-3676,-3794,-3702,-3703,-3685,-3335,-3246,-2788,-3208,-3472,-3220,-3443,-3051,-3090,-3196,-3274,-3386,-3561,-3643,-3636,-3644,-3651,-3650,-3793,-3791,-3626,-3401,-3464,-3215,-2998,-3006,-2998,-2840,-3425,-2549,-2639,-2745,-2989,-3223,-3583,-3578,-3569,-3597,-3602,-3601,-3706,-3778,-3647,-3512,-3363,-3211,-3052,-2778,-2811,-2496,-2662,-2700,-2402,-2790,-3041,-3007,-3135,-3237,-3339,-3445,-3408,-3415,-3433,-3207,-3195,-3219,-2642,-2064,-2943,-3107,-2865,-2790,-2804,-2806,-2803,-2782,-2854,-2923,-2915,-2888,-2732,-2735,-2894,-3027,-2211,-2237,-2438,-2177,-2714,-2808,-2834,-2822,-2638,-2129,-2416,-2775,-2544,-2415,-2428,-2553,-2449,-2513,-2437,-2408,-2627,-2736,-2381,-2358,-2343,-2159,-2003,-2335,-2491,-1937,-1798,-2320,-2579,-2406,-2329,-2265,-2189,-1992,-2250,-2367,-2339,-2483,-2576,-2570,-2039,-2100,-2233,-2229,-2262,-2289,-2296,-2275,-2189,-1879,-2004,-2203,-2200,-2191,-2202,-2202,-1989,-1949,-1987,-1931,-2105,-2134,-2331,-2037,-1855,-1889,-2189,-2267,-2220,-2199,-2201,-2200,-2168,-2051,-1995,-2029,-2011,-2001,-2001,-1978,-1979,-1792,-1796,-1807,-2816,-2829,-2812,-2865,-2793,-2803,-2809,-2735,-2656,-2602,-2522,-2429,-2381,-2426,-2426,-2394,-2108,-1886,-1701,-1442,-1330,-1316,-3546,-3454,-3412,-3339,-3210,-3079,-2887,-2817,-2810,-2718,-2582,-2477,-2360,-2301,-2428,-2340,-2315,-2347,-2363,-2155,-1932,-1816,-3498,-3529,-3583,-3621,-3619,-3587,-3531,-3410,-3316,-3254,-3170,-3055,-2981,-2929,-2697,-2813,-2733,-2699,-2457,-2537,-2588,-2591,-3467,-3424,-3309,-3232,-3185,-3157,-3142,-3135,-3134,-3136,-3134,-3122,-3113,-3108,-3075,-3043,-3053,-3070,-3038,-2995,-2933,-2897,-3371,-3356,-3257,-3181,-3134,-3104,-3083,-3070,-3064,-3064,-3072,-3091,-3094,-3091,-3071,-3056,-3064,-3086,-3074,-3041,-3005,-2958],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
