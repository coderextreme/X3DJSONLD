###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5186,-5126,-4958,-5287,-5233,-5011,-4998,-4381,-4777,-4950,-4977,-4822,-4814,-4858,-5104,-3989,-4305,-4056,-4086,-3734,-4330,-4412,-5250,-5360,-5580,-5261,-5164,-5162,-4975,-4800,-5049,-4784,-4681,-4933,-4660,-4705,-4688,-4589,-4115,-3504,-4047,-4063,-4179,-4305,-5293,-5419,-5498,-5372,-5279,-3522,-5001,-4601,-3054,-4811,-4753,-4770,-4800,-4784,-4829,-4421,-4447,-4080,-3259,-3849,-4107,-4341,-5205,-5263,-5505,-5334,-5331,-5067,-5054,-4722,-4977,-4837,-4725,-4652,-4765,-4780,-4695,-4476,-4130,-3059,-3801,-4143,-3540,-3797,-5436,-5573,-5479,-3968,-5291,-5162,-4986,-4920,-4839,-4856,-4919,-4752,-5054,-4871,-4774,-4300,-4189,-3650,-3690,-4204,-3918,-4528,-5549,-5461,-5498,-5499,-4943,-4657,-4497,-3618,-4909,-4852,-5010,-5004,-5053,-4806,-4331,-4282,-4135,-1260,-3011,-4231,-4196,-4086,-5428,-5570,-5524,-5436,-4991,-4869,-5138,-4965,-4936,-4846,-4620,-5067,-5088,-4821,-4471,-4275,-2651,-2521,-4074,-4233,-4433,-4192,-4582,-5389,-5502,-5038,-5174,-4727,-3717,-5011,-5279,-5094,-5151,-5093,-5002,-4716,-4333,-4215,-382,-3655,-4058,-4273,-4394,-4536,-5424,-5519,-5258,-5091,-4790,-4866,-2846,-5092,-4849,-5151,-5181,-5089,-4836,-4497,-4160,-3878,-3492,-3964,-4119,-4307,-4536,-4529,-5456,-5165,-5349,-5218,-5048,-4947,-4952,-5085,-5043,-5423,-5139,-5059,-4758,-4512,-4235,-3257,-1530,-4084,-4182,-4357,-4543,-4572,-5530,-4968,-5027,-5116,-5051,-5050,-5199,-5120,-5063,-5231,-4894,-4750,-4624,-4320,-4253,-4162,-3753,-4099,-4236,-4442,-4341,-4445,-5505,-5217,-5071,-5152,-4913,-3848,-5316,-5126,-5299,-5167,-4878,-4924,-4637,-4356,-4318,-4309,-4265,-4126,-4363,-4401,-4320,-4382,-5239,-5314,-5228,-5306,-4835,-3172,-5132,-4923,-5094,-5192,-4820,-4886,-4670,-4485,-4387,-4385,-4288,-4053,-4436,-4398,-4356,-4514,-5481,-5161,-4805,-5022,-4867,-4618,-5002,-4630,-5231,-4988,-4781,-4753,-4528,-4562,-4459,-4358,-4323,-4186,-4356,-4441,-4367,-4557,-4161,-4991,-4785,-5075,-5141,-5424,-5321,-4736,-5066,-5249,-4588,-4774,-4379,-4580,-4496,-4439,-4310,-4211,-4298,-4618,-4507,-4528,-5273,-4978,-5288,-5060,-4165,-5649,-4933,-4810,-4569,-4976,-4951,-4741,-4491,-4646,-4558,-4491,-4358,-4377,-4409,-4462,-4564,-4641,-5367,-5081,-5227,-4840,-5033,-5191,-4787,-4588,-4722,-4819,-4503,-4654,-4560,-4475,-4147,-4529,-4386,-4508,-4295,-4587,-4540,-4656,-5303,-5163,-4963,-4927,-5139,-5050,-4736,-4388,-4658,-4737,-4536,-4752,-4525,-4445,-4588,-4519,-4321,-4478,-4737,-4476,-4577,-4552,-5271,-5227,-4814,-5011,-5250,-5046,-4747,-4605,-4709,-4733,-4790,-4668,-4545,-4846,-4670,-4278,-4485,-4409,-4507,-4568,-4496,-4470,-5158,-5098,-4496,-4921,-4935,-4658,-4754,-4681,-4697,-4690,-4755,-4659,-4528,-4628,-4638,-4373,-4418,-4345,-4387,-4413,-4531,-4522,-5248,-5088,-4876,-4881,-4877,-4505,-4850,-4787,-4726,-4673,-4666,-4667,-4602,-4585,-4568,-4500,-4410,-4414,-4404,-4333,-4662,-4357,-5224,-4806,-5019,-4504,-4825,-4588,-4745,-4793,-4778,-4708,-4621,-4524,-4137,-4470,-4448,-4220,-4230,-4340,-4334,-4335,-4433,-4370,-4969,-4845,-4783,-4293,-4876,-4783,-4808,-4797,-4774,-4571,-4411,-4282,-4462,-4386,-4314,-4459,-4509,-4254,-4252,-4253,-4316,-4342,-4975,-4791,-3915,-4409,-4841,-4780,-4836,-4767,-4761,-4617,-4292,-4235,-4468,-4424,-4354,-4471,-4457,-4315,-4209,-4254,-4441,-4471],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
