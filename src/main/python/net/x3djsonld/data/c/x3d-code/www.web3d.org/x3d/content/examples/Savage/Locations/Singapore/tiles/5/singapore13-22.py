###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore13-22.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3257755241139217,103.90582275083842,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[11,13,14,14,13,12,11,11,11,12,13,14,14,14,13,14,15,17,19,19,19,17,14,12,10,9,10,11,10,11,12,14,17,19,20,21,11,12,13,12,11,10,10,10,11,12,14,15,15,15,14,14,15,16,18,20,19,18,15,13,11,10,11,12,11,11,12,14,17,20,21,21,10,11,12,10,9,9,9,10,10,12,14,15,16,15,15,15,15,16,18,19,20,20,17,14,11,9,11,12,11,11,12,14,17,19,20,21,10,11,11,9,9,9,9,10,11,13,14,15,16,16,16,16,15,16,18,19,21,21,18,15,11,9,10,12,12,12,13,15,17,19,20,21,12,11,11,10,10,10,11,12,13,15,17,17,16,16,17,17,17,17,19,21,23,22,19,15,12,10,12,13,13,13,15,16,18,19,20,21,14,13,12,12,12,13,14,14,15,18,20,19,17,16,17,18,18,19,21,23,25,24,20,16,14,13,14,15,15,15,17,18,19,20,21,22,15,15,14,14,14,15,16,17,18,21,23,22,18,17,18,18,19,21,24,26,27,25,21,18,15,15,18,19,19,19,20,20,21,22,22,23,17,17,17,16,16,17,18,19,21,24,26,24,20,18,18,19,19,22,25,28,28,27,23,19,17,17,21,24,24,24,23,22,22,23,23,24,19,19,19,19,19,19,20,21,22,25,27,25,20,19,19,19,20,21,24,26,26,26,24,21,19,19,22,25,27,27,25,23,23,23,23,24,21,21,21,22,22,22,22,22,23,25,26,24,20,19,19,19,20,21,21,22,23,24,25,24,22,22,22,24,27,29,27,25,23,22,22,22,25,24,24,24,23,23,23,23,24,24,23,22,19,19,19,19,21,21,20,20,21,23,25,26,25,23,23,24,27,29,27,25,23,22,23,23,28,27,26,26,25,23,23,23,23,22,21,20,19,19,19,20,21,21,20,20,20,22,24,26,26,25,24,24,26,28,27,26,25,24,24,25,29,28,27,27,26,24,23,23,23,22,20,19,19,19,19,20,21,21,20,19,20,21,24,26,27,26,25,24,26,27,28,28,26,25,26,27,28,28,28,27,27,26,25,24,24,22,20,19,20,20,20,21,22,21,19,18,20,22,25,27,27,26,26,26,26,27,28,28,28,27,27,28,25,26,26,27,27,28,27,27,25,23,20,20,20,20,21,21,21,20,19,19,20,21,24,26,25,26,26,26,27,27,28,29,28,27,27,27,21,22,24,26,27,29,30,29,27,24,22,21,21,21,21,21,20,20,20,20,20,21,22,23,23,24,25,26,27,28,29,29,28,27,26,25,20,22,24,26,28,29,31,29,27,24,22,21,21,21,21,21,20,20,21,21,21,21,22,23,23,24,25,26,27,28,28,28,28,27,26,25,22,24,26,27,28,29,30,28,26,23,20,19,20,21,21,20,20,20,21,22,22,22,23,24,25,25,26,27,26,26,27,27,27,27,27,27,22,24,26,27,28,28,29,27,24,22,19,19,20,21,21,21,20,20,21,22,23,24,25,26,26,26,27,27,26,25,25,25,26,26,26,25,21,23,25,25,26,27,27,25,23,21,20,20,21,22,22,22,21,21,22,23,23,25,27,27,27,26,26,26,27,26,25,23,24,24,23,23,23,24,26,26,26,27,26,25,23,21,21,21,22,22,22,22,22,22,22,23,23,25,27,28,27,26,25,24,26,26,24,23,23,22,22,21,26,28,29,29,28,28,27,25,23,22,22,21,21,20,20,21,21,21,22,22,23,24,27,27,26,25,24,23,24,25,23,23,23,23,21,19,27,29,30,30,29,29,28,26,24,23,23,21,20,20,20,20,20,21,22,22,23,24,25,26,25,24,23,23,24,24,23,23,23,23,21,20],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
