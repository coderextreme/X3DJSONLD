###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore27-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4480194974058374,103.61856206825804,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[30,31,34,38,42,39,35,31,27,25,23,22,22,21,20,19,18,18,20,21,23,25,28,28,27,26,26,25,25,24,23,22,22,21,21,20,30,29,29,32,35,33,30,28,25,24,22,22,22,21,20,19,19,20,22,24,25,28,30,30,27,26,25,24,24,23,23,23,22,21,21,20,29,27,25,26,27,27,26,25,24,22,20,19,19,19,19,20,21,23,24,27,29,31,32,31,28,25,24,23,23,22,22,22,21,21,21,21,29,26,24,24,24,23,23,22,22,20,19,18,17,17,19,20,22,24,25,27,29,30,31,30,27,24,23,22,22,21,21,21,21,21,21,22,29,26,24,24,24,23,22,21,20,19,18,17,17,17,18,20,21,22,23,24,25,26,27,26,23,22,22,21,21,20,20,20,20,21,22,23,28,26,25,24,23,21,20,19,18,17,16,16,17,17,18,19,20,21,21,22,22,23,23,22,21,20,20,20,20,20,19,19,20,21,22,24,27,25,24,22,20,19,18,17,16,16,15,15,16,16,17,18,18,18,19,19,20,20,21,20,19,19,19,19,19,19,19,19,20,21,23,25,26,25,24,21,19,18,17,16,15,14,14,14,15,16,16,17,17,17,17,18,18,19,19,19,18,18,18,18,18,18,19,19,20,21,23,26,25,25,24,21,19,17,16,15,14,13,13,13,15,16,16,17,17,17,17,18,18,18,19,19,18,18,17,17,17,17,19,20,20,21,23,25,25,25,24,22,20,18,16,14,13,13,13,13,15,16,17,17,17,18,19,19,19,18,19,19,19,18,17,16,16,17,19,21,21,22,23,25,27,26,26,25,24,20,17,15,14,13,14,15,17,18,20,21,22,23,23,23,21,20,20,20,19,19,17,16,16,18,20,22,24,25,25,25,28,27,27,27,27,23,19,17,15,15,16,17,18,20,22,24,26,26,26,25,23,22,21,20,20,20,18,17,17,18,21,23,26,27,26,25,30,29,29,29,29,25,21,19,18,17,18,19,20,23,25,27,28,28,28,26,24,22,21,20,20,20,19,18,19,20,22,24,27,28,26,24,31,30,31,31,31,27,23,22,21,20,20,21,22,25,28,29,30,30,30,27,24,22,20,20,20,20,20,20,20,21,22,24,27,28,26,24,33,33,34,34,34,33,31,28,25,24,23,22,23,26,28,30,31,31,30,27,23,20,19,19,22,23,24,24,24,24,24,25,27,28,27,25,35,36,37,38,38,38,36,33,30,27,25,24,24,26,29,30,32,31,29,26,22,19,18,20,23,27,28,28,28,27,26,26,28,28,27,25,40,41,44,45,47,45,42,38,34,31,28,27,26,27,30,32,32,31,28,25,21,19,18,20,23,27,29,29,29,28,27,26,26,27,26,25,44,47,50,53,55,51,47,42,38,34,30,28,26,29,32,33,33,30,27,23,20,19,18,20,23,27,30,31,30,28,27,26,26,26,24,24,49,53,56,58,58,53,46,41,36,33,30,29,28,31,34,34,32,29,25,22,21,20,19,19,22,25,28,29,30,29,28,28,26,24,22,20,55,59,62,62,62,54,45,39,34,31,29,29,30,33,36,35,31,27,23,21,21,20,19,19,21,22,25,27,28,29,30,30,27,24,21,17,55,59,62,60,57,50,41,36,33,30,28,29,32,35,38,36,32,27,22,21,21,20,21,22,24,25,25,26,29,31,33,33,29,25,21,18,55,59,61,58,53,45,37,33,31,29,27,30,33,37,40,38,32,27,22,21,20,21,24,26,27,27,26,26,29,33,36,37,32,26,22,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
