###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.589836,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[39,38,36,33,32,32,29,27,27,27,27,28,29,31,34,38,37,34,32,31,30,29,29,29,29,30,29,28,26,24,22,19,17,16,15,13,46,45,41,38,35,33,30,27,27,28,28,30,32,35,38,40,38,33,30,29,29,30,31,32,33,33,32,29,27,24,21,18,15,15,14,12,55,53,48,43,38,33,30,27,27,28,29,31,34,38,40,40,38,32,29,28,28,31,34,37,38,39,37,34,30,25,21,17,14,13,13,11,66,63,55,48,40,32,29,27,28,29,30,32,35,38,40,39,37,32,29,28,29,32,36,39,41,42,40,36,32,26,21,17,13,12,12,10,76,71,61,51,41,31,29,28,29,31,32,33,35,36,37,36,35,33,31,29,30,33,37,39,41,41,40,37,33,27,22,17,13,11,9,8,81,74,61,50,40,31,30,30,33,35,36,37,36,34,34,33,32,32,30,28,29,32,34,36,38,39,38,35,31,27,22,17,13,10,8,8,79,70,57,45,38,32,32,33,37,40,41,41,38,34,31,30,29,29,28,27,27,28,29,31,32,33,33,31,28,24,20,16,12,9,8,8,72,63,52,41,37,32,33,34,37,41,41,41,37,32,29,27,26,26,25,24,24,24,25,26,28,29,30,27,25,21,18,14,11,9,8,9,61,53,45,38,35,33,33,33,35,37,37,37,34,30,27,26,24,23,22,21,21,21,22,23,24,26,26,24,21,18,15,12,10,9,9,11,52,45,40,37,35,34,34,33,35,37,38,37,34,29,27,26,24,23,21,20,20,20,19,21,22,23,23,20,18,15,12,10,9,9,10,12,44,40,38,37,37,37,36,34,38,42,43,42,38,32,29,28,27,25,24,23,22,20,19,18,19,19,18,16,14,12,10,9,8,9,11,12,39,37,37,38,39,40,38,36,41,47,48,47,42,34,31,30,29,28,27,26,24,22,20,18,17,17,16,14,12,11,9,8,8,9,11,13,38,38,39,40,41,42,40,38,44,52,53,52,45,37,34,32,32,31,30,28,26,25,23,21,19,18,17,15,13,11,9,9,9,10,11,13,38,40,42,44,45,45,42,39,46,54,55,55,49,41,37,36,34,34,32,30,29,28,25,23,21,19,17,16,14,12,10,10,10,10,11,13,40,43,47,50,49,48,45,41,46,53,55,57,53,47,43,40,38,35,34,33,32,30,28,25,22,19,16,15,14,12,11,11,10,10,10,11,42,47,51,55,53,50,47,43,47,53,57,60,57,52,48,44,41,39,37,36,35,32,30,27,23,19,16,15,14,13,12,11,11,10,10,9,46,49,53,57,54,52,49,46,51,58,63,66,62,56,51,46,44,42,41,39,37,33,30,27,24,20,17,15,13,13,12,12,11,11,10,9,50,53,56,59,56,53,50,48,54,63,68,71,68,60,54,49,46,45,44,42,38,34,30,27,24,21,18,15,13,12,12,12,11,11,11,9,54,58,60,62,57,51,50,49,56,66,71,74,70,63,58,53,50,48,45,43,38,33,29,26,23,21,18,15,12,12,12,11,10,11,12,11,57,61,63,64,57,50,49,49,57,68,72,75,71,65,60,56,53,49,46,42,37,31,27,24,22,19,16,14,12,12,12,11,10,12,13,13,57,61,62,63,57,49,49,49,55,64,66,68,66,62,59,56,52,47,42,38,33,27,24,21,18,16,14,12,12,12,12,12,12,14,15,15,56,60,61,61,55,48,48,49,53,59,61,61,61,60,58,55,50,44,39,34,30,25,22,19,16,14,13,12,12,12,12,13,14,16,17,18,48,53,54,54,49,45,46,47,49,53,55,57,58,57,54,51,46,41,37,33,30,27,25,21,18,16,15,14,13,14,14,16,17,18,19,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
