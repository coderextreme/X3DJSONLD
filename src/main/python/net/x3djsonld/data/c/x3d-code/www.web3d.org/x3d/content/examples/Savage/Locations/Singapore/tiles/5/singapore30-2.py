###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.61856206825804,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[26,31,36,40,44,50,58,74,92,95,93,82,68,61,58,54,50,50,50,47,43,37,31,27,26,30,39,49,58,65,66,65,60,54,47,42,26,28,31,35,39,45,54,67,82,87,87,81,70,63,56,51,46,44,43,42,37,34,30,27,26,27,35,42,49,57,61,60,56,50,44,39,26,27,28,31,36,44,52,64,75,79,79,78,75,68,59,51,44,40,37,34,31,29,27,26,25,26,30,36,41,47,53,54,50,44,39,36,26,27,28,30,34,42,50,58,65,70,73,77,80,74,66,57,49,45,41,38,34,31,30,28,26,26,27,29,33,37,42,45,42,38,34,32,28,28,28,30,33,40,48,51,53,60,68,76,85,81,73,66,59,53,49,45,40,37,34,31,27,25,23,22,24,27,31,34,32,30,29,28,30,30,30,30,32,36,41,44,45,53,61,71,80,79,74,70,67,63,59,54,49,45,42,38,34,29,24,22,21,22,25,26,26,25,26,26,32,32,31,30,29,31,33,36,39,46,55,64,72,73,71,72,76,74,71,65,58,54,52,48,43,36,29,24,21,20,20,21,22,23,24,25,33,35,36,34,31,30,30,33,36,42,47,54,60,63,65,70,77,78,75,69,62,57,55,51,46,40,32,26,23,21,20,20,20,21,22,24,34,38,42,39,35,32,29,32,37,39,40,43,47,53,58,65,73,75,74,69,62,56,53,50,46,42,34,29,26,24,23,21,21,21,22,23,35,41,47,45,40,34,30,31,34,35,36,38,42,47,52,57,64,67,68,63,57,52,47,44,42,38,33,29,27,25,23,21,21,21,21,21,36,44,52,50,46,38,29,29,30,32,34,38,43,45,47,49,53,55,56,54,49,45,40,37,35,32,29,27,26,24,22,20,20,20,20,20,39,47,55,53,48,39,30,28,27,31,35,41,48,49,48,48,48,48,48,45,42,38,34,32,30,28,26,25,24,23,21,20,20,20,20,20,44,50,56,54,49,40,30,28,26,32,38,47,55,56,54,52,50,47,44,40,36,33,31,28,26,25,23,23,23,22,21,20,21,21,21,20,49,52,54,52,46,38,31,28,26,31,39,47,56,57,55,52,49,45,40,36,31,29,27,25,23,22,22,22,22,22,21,21,21,22,20,19,54,52,50,46,42,36,31,27,25,29,34,40,47,49,49,48,45,41,37,33,29,26,24,22,21,20,20,21,22,22,21,21,21,20,18,17,52,48,44,40,37,33,29,26,24,26,30,34,37,40,42,41,38,35,32,29,26,24,22,21,19,18,19,20,21,22,21,20,20,19,17,16,43,38,34,33,32,30,27,26,25,25,26,28,30,32,34,33,31,28,27,25,24,23,22,20,18,17,18,19,20,20,19,19,19,18,17,16,34,30,27,27,27,26,24,24,25,24,23,24,26,27,28,27,24,23,22,23,23,23,23,21,19,18,18,18,19,20,19,18,18,17,17,16,29,26,25,24,24,23,23,23,23,23,22,23,25,26,25,24,22,22,22,24,25,25,24,23,21,20,20,20,20,20,19,19,18,17,16,16,27,25,24,23,22,22,22,22,22,22,21,22,24,24,23,23,22,23,24,26,28,27,26,25,25,24,23,22,22,21,20,20,19,18,17,16,27,26,25,24,23,23,22,21,21,20,19,20,22,23,22,23,25,27,29,30,31,30,29,28,29,28,26,25,23,22,22,22,21,19,18,16,29,28,27,26,25,23,22,21,20,19,19,19,21,21,22,24,27,30,32,34,34,33,31,30,32,31,29,27,25,24,23,23,23,22,20,17,32,30,28,26,24,23,23,22,21,20,20,20,20,21,22,24,27,31,34,35,35,35,34,34,35,34,31,27,24,22,23,24,24,24,22,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
