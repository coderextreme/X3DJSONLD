###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4788,-4061,-4456,-5055,-5466,-5322,-5437,-5423,-5449,-5467,-5488,-5444,-5301,-5351,-5344,-5061,-5223,-5342,-5121,-5087,-4992,-4956,-4104,-2755,-3666,-5338,-4691,-5105,-5488,-5469,-5429,-5451,-5379,-5353,-5345,-5340,-5048,-4944,-4778,-4988,-4867,-4689,-4994,-4842,-3500,-3237,-3579,-4490,-4442,-5433,-5430,-5428,-5449,-5450,-5442,-5319,-5128,-5343,-5067,-4293,-4049,-4128,-4494,-4991,-4577,-4664,-4066,-3729,-3690,-4736,-5310,-5534,-5542,-5411,-5523,-5424,-5489,-5366,-5142,-5136,-4830,-4028,-3589,-3684,-4237,-4003,-4384,-4354,-3849,-3653,-4810,-4044,-4906,-5513,-5137,-5360,-5534,-5420,-5434,-5378,-5044,-4927,-4743,-3815,-3420,-3144,-3699,-3761,-3840,-4071,-3357,-3939,-4015,-4223,-4106,-4658,-5022,-5148,-5455,-5448,-5356,-5451,-5084,-4872,-4753,-4067,-3055,-2677,-3330,-3260,-3751,-3839,-2946,-3704,-3486,-5186,-4088,-5810,-4679,-4912,-5356,-5482,-5514,-5483,-4976,-4685,-4585,-4135,-3133,-2323,-2860,-3188,-3185,-3492,-3305,-3438,-2508,-2323,-3927,-4730,-5247,-5052,-5454,-5491,-5188,-5310,-4887,-4762,-4665,-4185,-3424,-2619,-2564,-2843,-2332,-1683,-2748,-3005,-3150,-3191,-2246,-3214,-4424,-5248,-5354,-5676,-5249,-5137,-5230,-4711,-4805,-4313,-3786,-2822,-2251,-2548,-759,-354,-3331,-3303,-3234,-3835,-4137,-3681,-5503,-4884,-4657,-5567,-5471,-5244,-5212,-4691,-4486,-4269,-3813,-3060,-706,-2636,-2661,-2734,-3752,-3530,-3720,-4601,-4021,-3688,-4091,-5111,-4288,-4826,-5368,-5171,-4964,-4460,-4173,-4319,-3648,-3097,-2950,-2400,-2544,-2969,-3822,-4382,-4245,-4333,-3312,-4161,-3827,-4883,-4791,-4949,-5452,-5288,-5295,-4840,-5223,-4250,-3708,-3193,-3279,-3176,-3274,-3388,-3939,-4284,-4574,-4657,-4542,-4828,-4237,-5275,-4182,-5416,-4605,-5365,-5016,-4789,-4719,-4375,-3946,-3686,-3569,-3703,-3987,-3992,-4280,-4330,-4482,-4682,-5147,-4662,-4446,-4750,-5032,-4570,-4991,-4111,-5246,-4936,-4688,-4559,-3884,-4249,-3869,-4010,-4250,-4157,-4304,-4088,-4252,-4799,-4589,-4462,-5162,-4311,-3073,-3839,-4099,-5130,-5060,-4569,-4714,-4733,-3982,-4359,-4061,-4129,-4347,-4386,-4432,-4484,-4234,-5127,-4280,-4977,-5343,-4776,-4390,-3651,-3996,-4297,-4707,-4576,-4513,-4556,-4069,-4371,-4101,-4335,-4425,-4495,-4211,-4479,-4945,-4880,-4494,-5196,-4948,-4221,-4049,-3208,-4620,-4218,-4280,-4366,-4463,-4572,-4316,-4083,-4443,-3943,-3798,-2302,-4535,-4960,-4464,-4945,-5344,-5106,-5538,-5246,-3892,-5512,-3155,-4284,-4302,-4215,-4299,-4310,-4255,-4206,-4263,-4017,-4428,-3030,-5019,-4457,-4933,-4973,-5394,-4765,-4514,-4112,-4057,-3565,-1837,-2927,-3393,-3706,-3927,-4056,-4088,-4123,-3836,-4033,-3818,-3232,-4948,-4881,-5095,-5229,-5818,-5385,-5490,-5046,-4245,-3622,-2213,-1847,-3321,-3302,-3323,-3782,-4096,-3757,-3652,-3904,-3440,-3409,-4836,-4994,-4884,-5000,-5379,-5706,-5578,-5363,-4920,-4099,-3420,-4766,-2413,-3282,-3391,-195,-3355,-3451,-3307,-3217,-3220,-3007,-4989,-5038,-5216,-5419,-5573,-5560,-5515,-5306,-5182,-4075,-4446,-2983,-3457,-2880,-2692,-2728,-2375,-2859,-2907,-1028,-2576,-2818,-4846,-4961,-5331,-5406,-5493,-5536,-5561,-5320,-5560,-4656,-4211,-3608,-3059,-2925,-2307,-2347,-2737,-2235,-1214,-1620,-1935,-1947,-4769,-5091,-5320,-5372,-5522,-5607,-5665,-5490,-5618,-4635,-4080,-3579,-2483,-2811,-2387,-2194,-2747,-2228,-1178,-1680,-1990,-1916],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
