###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[3743,3759,3768,3769,3766,3759,3749,3736,3720,3701,3671,3626,3594,3544,3503,3470,3434,3410,3400,3387,3367,3352,3678,3702,3723,3737,3744,3744,3741,3732,3717,3694,3664,3629,3600,3572,3537,3509,3482,3443,3413,3399,3382,3369,3640,3668,3690,3704,3720,3729,3728,3719,3704,3685,3654,3621,3595,3569,3546,3521,3498,3456,3408,3386,3368,3353,3628,3658,3687,3705,3719,3724,3720,3709,3693,3663,3627,3600,3583,3563,3539,3513,3488,3451,3411,3389,3362,3342,3609,3649,3684,3702,3715,3725,3725,3712,3694,3656,3605,3580,3560,3540,3520,3496,3464,3433,3408,3382,3339,3316,3598,3643,3678,3704,3718,3731,3736,3727,3705,3651,3594,3567,3542,3522,3500,3457,3411,3373,3329,3306,3288,3279,3565,3631,3675,3700,3717,3725,3716,3698,3661,3604,3574,3545,3522,3498,3450,3397,3337,3288,3256,3240,3229,3224,3526,3604,3655,3692,3704,3700,3677,3639,3600,3576,3543,3515,3495,3450,3398,3350,3292,3245,3213,3199,3186,3175,3501,3586,3624,3644,3643,3627,3607,3587,3559,3529,3501,3486,3452,3402,3362,3305,3241,3197,3166,3139,3118,3106,3486,3551,3597,3600,3595,3577,3554,3533,3514,3496,3478,3453,3420,3381,3327,3250,3183,3127,3092,3064,3048,3041,3464,3517,3553,3560,3548,3527,3505,3493,3476,3455,3436,3415,3389,3332,3269,3186,3125,3087,3048,3018,3001,2998,3443,3499,3524,3529,3511,3482,3451,3435,3423,3412,3396,3363,3312,3255,3187,3117,3080,3035,2998,2974,2966,2970,3386,3440,3482,3475,3437,3408,3397,3389,3379,3358,3327,3290,3216,3157,3092,3018,2972,2935,2903,2898,2899,2901,3207,3276,3320,3330,3334,3325,3309,3300,3291,3259,3208,3152,3098,3037,2985,2921,2880,2844,2821,2815,2820,2829,3132,3185,3216,3226,3223,3206,3193,3185,3164,3129,3085,3035,2993,2954,2906,2864,2803,2768,2760,2762,2764,2770,3000,3051,3086,3101,3111,3107,3098,3075,3026,2998,2962,2926,2899,2868,2827,2787,2726,2688,2685,2700,2717,2724,2802,2843,2910,2990,3001,2994,2967,2925,2897,2862,2830,2810,2800,2787,2738,2691,2646,2616,2615,2628,2656,2672,2690,2703,2751,2799,2841,2854,2832,2800,2761,2726,2704,2691,2676,2658,2630,2602,2569,2541,2531,2537,2560,2582,2531,2569,2608,2678,2715,2742,2741,2711,2642,2598,2564,2543,2538,2541,2536,2517,2490,2447,2429,2437,2445,2452,2360,2397,2444,2503,2568,2604,2609,2587,2510,2464,2437,2441,2446,2461,2457,2422,2377,2333,2312,2306,2288,2216,2042,2100,2168,2221,2280,2365,2412,2403,2345,2288,2252,2242,2291,2367,2373,2317,2271,2233,2210,2153,2070,1957,1695,1832,1979,2021,2063,2101,2143,2150,2096,2016,1986,2014,2081,2167,2212,2202,2155,2103,2050,1947,1810,1718,1401,1584,1686,1756,1827,1818,1864,1889,1887,1788,1673,1753,1842,2007,2014,2001,1980,1850,1735,1613,1509,1377,1350,1539,1656,1718,1786,1766,1812,1848,1874,1747,1612,1677,1800,1917,1990,1981,1903,1768,1669,1553,1417,1305],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
