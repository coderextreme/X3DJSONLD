###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3677,-4377,-4644,-5173,-4576,-4740,-4170,-3984,-4745,-4231,-4576,-4486,-3693,-4030,-3635,-3598,-2435,-2493,-2726,-3528,-3647,-3295,-4111,-3984,-4766,-4598,-4834,-4873,-4502,-4503,-4639,-4633,-4595,-4192,-4146,-3622,-4122,-3805,-2298,-3824,-2445,-3537,-3651,-3442,-3989,-4222,-5252,-4906,-4598,-5234,-4223,-4244,-3614,-4320,-4810,-4029,-3648,-3696,-3827,-3155,-3270,-3825,-4581,-3957,-3464,-3452,-4000,-3996,-4582,-4448,-5023,-4658,-3956,-4014,-4365,-4064,-4088,-3995,-3536,-3457,-3490,-3520,-3150,-3099,-3235,-2375,-3289,-2603,-4031,-4290,-4522,-4667,-4385,-4381,-3896,-3961,-4031,-3958,-4160,-3966,-3422,-3064,-3340,-3084,-2632,-2941,-2876,-2664,-1884,-2332,-2883,-4442,-3818,-3422,-4520,-4340,-4211,-4237,-4096,-4002,-3914,-3766,-3486,-3240,-3022,-2926,-2587,-2460,-2424,-3022,-1980,-2364,-4435,-4260,-4212,-4121,-4235,-4325,-4165,-4047,-4059,-3930,-3810,-3659,-3318,-3344,-3132,-2917,-2081,-2592,-1913,-2197,-2549,-2513,-4109,-4367,-4395,-4199,-4303,-4185,-4078,-4127,-3989,-3770,-3729,-3661,-3422,-3330,-3130,-2956,-2593,-1948,-1772,-2104,-2610,-2426,-4393,-4549,-4387,-4347,-4336,-4242,-4138,-4062,-3781,-3837,-3723,-3609,-3264,-3141,-2890,-1672,-2521,-2188,-2154,-2063,-2321,-2475,-4488,-4364,-4352,-4374,-4300,-4254,-4141,-4153,-4041,-3723,-3536,-3505,-3207,-2748,-2685,-2647,-2337,-2955,-2855,-2545,-2503,-2733,-4666,-4410,-4634,-4366,-4360,-4302,-4221,-4077,-4092,-3808,-3664,-3446,-3309,-2755,-2106,-2401,-2143,-2502,-2576,-2548,-2552,-2545,-4707,-4698,-4478,-4416,-4411,-4331,-4372,-4244,-3812,-3695,-3585,-3591,-3819,-2864,-2523,-2334,-2096,-2407,-2566,-2712,-2592,-2634,-4467,-4403,-4492,-4467,-4389,-4241,-4227,-4024,-3999,-3745,-3906,-3247,-3475,-3238,-2921,-2341,-2252,-2412,-2844,-2550,-2540,-2666,-4502,-4524,-4218,-4240,-4428,-4312,-4182,-4072,-3668,-3529,-3835,-3404,-3330,-3138,-3077,-1495,-2362,-2824,-2693,-2868,-3092,-2659,-4502,-3987,-4093,-4355,-4269,-4316,-4188,-3946,-3674,-3506,-3789,-3594,-3517,-3099,-2858,-2943,-3051,-3219,-3302,-3190,-3363,-3359,-4337,-3659,-3916,-4163,-4208,-4129,-4089,-4000,-3820,-3480,-3515,-3027,-2949,-3020,-2945,-3193,-3298,-3837,-3742,-3642,-3449,-3601,-4495,-4249,-4017,-4234,-3901,-3877,-3735,-3849,-3912,-3447,-3183,-2982,-2997,-2850,-2656,-3119,-3976,-3559,-3623,-3695,-3616,-3461,-4323,-4094,-3933,-4071,-3980,-4155,-3785,-3814,-3626,-3209,-2949,-2529,-2554,-2583,-3271,-3659,-3774,-4088,-3858,-3999,-3972,-3858,-4514,-4242,-4046,-4041,-3746,-3706,-3878,-3174,-3571,-3123,-2705,-2356,-2042,-2918,-3235,-3449,-3658,-3924,-3857,-4218,-3896,-3785,-4269,-4072,-4116,-4093,-3690,-3280,-3272,-3226,-3098,-2992,-2896,-2509,-1857,-1906,-3601,-3466,-3394,-3681,-3780,-4035,-3954,-3586,-4312,-4204,-4023,-4069,-3731,-3169,-3447,-3021,-2855,-2491,-3161,-2836,-3281,-3027,-3359,-3767,-3717,-3719,-3801,-4123,-3933,-3706,-4246,-4071,-4306,-4047,-3712,-3558,-3612,-2939,-3094,-2524,-2981,-2875,-3296,-3630,-3632,-3285,-3681,-3608,-4049,-4133,-4052,-4000,-4330,-4064,-3967,-3911,-3751,-3529,-3293,-3221,-2718,-3312,-3151,-2974,-3416,-3545,-3630,-3529,-4090,-3838,-3838,-3942,-4175,-3595,-4257,-4238,-4075,-4008,-3865,-3314,-3505,-2830,-2136,-3208,-3397,-3050,-3683,-3517,-3712,-3637,-3967,-4040,-3730,-3815,-4062,-3542],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
