###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore10-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2995803869799398,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[19,19,19,17,16,15,13,12,10,10,11,13,16,18,21,22,23,24,25,27,29,30,32,33,34,33,30,29,31,32,32,32,33,34,33,32,29,22,21,20,18,16,15,16,15,15,14,14,14,13,16,21,23,24,25,27,29,31,32,33,34,34,32,30,29,29,29,30,31,32,34,34,32,29,25,22,20,18,16,17,18,20,21,19,17,13,10,15,22,25,26,28,30,31,33,33,34,34,34,32,30,28,27,27,27,28,30,32,32,31,28,23,22,21,20,20,22,23,24,24,21,17,14,11,16,23,27,28,30,32,34,35,34,34,34,34,32,31,29,27,26,26,26,27,28,27,26,25,21,21,21,24,27,28,28,27,27,22,16,14,14,19,24,28,30,32,34,36,37,35,34,34,34,34,32,30,28,27,25,24,24,23,22,21,21,19,20,23,26,30,31,32,29,26,23,18,19,20,24,29,30,31,32,34,36,36,36,35,35,36,36,33,30,27,25,24,23,22,22,21,21,21,18,21,24,28,31,33,35,31,25,23,21,24,27,30,34,34,32,32,34,35,35,35,37,38,39,38,34,30,26,24,23,23,22,22,22,23,22,17,20,24,28,31,34,36,31,26,24,23,26,30,33,35,34,32,32,34,34,35,35,36,37,38,37,33,29,26,24,24,23,22,22,24,25,25,17,19,23,27,31,34,37,32,27,26,26,28,32,34,35,34,31,31,33,34,34,35,34,34,35,34,30,27,26,25,26,25,24,24,26,28,29,20,21,24,28,33,35,37,33,28,28,29,31,34,34,33,31,28,29,32,33,34,34,33,33,33,33,30,29,29,29,29,29,28,27,28,30,32,24,24,26,30,36,36,36,34,30,31,32,34,36,34,31,28,25,26,30,32,33,33,32,32,32,32,32,32,33,34,34,34,32,31,32,33,34,25,25,26,30,35,36,36,34,31,32,34,35,37,35,31,28,26,27,29,31,32,33,32,32,32,33,34,35,34,34,33,33,32,32,33,34,35,25,25,25,29,32,34,35,33,31,32,34,36,38,36,32,30,29,29,29,30,32,32,32,32,33,35,37,36,33,30,29,29,30,32,34,36,36,27,27,27,29,31,33,35,33,30,32,34,35,36,35,32,31,31,30,29,30,30,31,31,32,33,35,36,35,31,28,27,26,27,29,32,34,34,30,31,31,31,31,32,34,32,29,31,32,33,34,33,32,32,31,31,30,29,28,28,30,31,32,32,33,32,30,28,27,26,25,26,28,30,30,35,35,35,33,31,32,33,32,30,31,32,32,32,31,30,30,30,30,31,30,29,29,30,30,31,30,29,28,27,27,26,25,23,23,25,26,27,41,40,38,35,33,33,33,33,33,33,34,32,29,28,27,27,28,30,31,32,33,32,31,31,30,28,25,24,25,26,25,23,22,21,21,23,24,44,42,38,35,33,33,34,35,36,36,36,33,30,27,26,27,29,31,33,36,38,38,36,34,32,30,26,25,26,26,25,23,22,21,21,22,24,45,40,35,33,33,33,36,38,41,40,39,35,31,29,27,29,33,35,37,40,44,44,42,40,38,35,31,29,28,27,25,24,23,23,23,24,28,42,37,32,31,30,32,34,38,41,41,39,36,33,31,30,32,36,38,40,44,48,49,47,45,41,38,34,31,29,28,27,26,24,24,24,26,30,37,33,28,28,28,29,31,35,39,39,37,35,33,33,34,36,38,41,43,46,50,51,50,47,43,38,34,32,30,30,30,29,26,24,25,27,31,31,29,26,26,26,27,29,33,36,36,34,33,33,35,37,39,41,42,44,47,51,52,51,47,42,37,33,30,31,32,33,31,28,25,26,28,31,27,26,24,25,26,27,28,31,34,33,32,32,32,35,39,41,43,43,44,46,50,50,49,45,40,34,30,28,31,33,34,32,30,28,27,28,32],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
