###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore28-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4567512097838313,103.63292510238706,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[19,22,25,27,27,26,24,21,17,17,18,22,26,28,29,28,27,28,31,35,39,38,34,32,31,35,42,44,41,39,39,41,42,41,36,32,30,21,25,29,32,32,30,27,23,19,18,19,21,23,24,25,27,29,32,37,42,47,46,40,36,33,36,43,47,47,45,45,43,41,39,35,32,33,23,28,33,36,38,34,28,24,21,20,19,20,20,21,22,26,31,36,42,49,56,55,47,40,35,36,44,49,52,51,49,46,41,36,33,33,37,29,33,37,40,43,39,34,30,27,25,23,21,19,20,22,27,32,38,44,50,57,55,48,41,35,35,42,49,55,57,54,49,44,40,39,40,44,35,39,42,44,47,43,38,36,34,30,26,23,19,20,23,28,33,39,44,50,56,55,49,42,34,34,40,49,57,61,58,53,47,44,45,48,52,41,45,47,46,45,42,40,39,37,32,26,23,21,22,25,29,32,36,41,47,54,54,48,41,34,33,39,46,54,59,59,56,51,48,47,49,52,47,51,52,47,42,41,41,41,39,33,25,23,24,26,29,29,30,33,38,45,53,53,47,41,35,33,38,44,49,54,59,60,55,51,48,48,51,48,50,50,44,38,37,37,35,33,29,24,24,26,30,34,35,34,38,43,48,53,52,46,40,35,35,38,42,46,51,57,61,58,54,50,48,48,47,48,46,39,33,31,30,28,26,24,23,25,28,33,39,41,42,45,49,52,54,50,44,39,36,36,39,42,44,49,56,61,59,56,52,48,44,49,47,43,39,35,34,34,30,26,24,25,27,30,35,40,44,48,52,56,57,54,49,43,39,38,40,44,47,47,49,55,59,60,59,56,51,45,51,46,41,39,40,40,40,35,28,28,29,30,31,35,39,46,54,59,64,62,56,49,42,39,40,44,50,53,51,50,53,56,60,61,59,54,46,54,48,42,43,46,46,45,39,32,31,32,33,33,35,37,45,53,60,67,64,57,50,43,40,42,46,53,55,53,50,49,50,53,55,54,50,43,58,51,45,47,52,52,50,43,35,34,35,36,36,36,35,41,50,58,66,66,59,52,44,41,43,47,55,57,53,49,45,43,43,43,43,41,38,65,57,51,54,57,55,52,44,36,35,38,40,41,39,36,40,48,56,64,65,59,53,47,44,43,46,52,55,54,51,48,44,42,40,38,37,35,71,65,60,60,62,57,51,43,36,37,42,45,46,44,39,41,46,53,62,63,59,55,51,47,44,44,48,52,55,55,53,49,46,42,39,36,34,77,73,67,65,62,55,48,41,37,39,45,48,51,49,43,43,46,51,59,59,55,52,51,48,43,42,43,47,51,53,53,50,45,42,39,36,34,81,79,74,67,59,51,44,40,37,41,47,52,57,54,48,46,46,50,55,53,49,48,49,47,42,39,38,40,44,47,48,46,42,38,38,37,34,83,83,78,68,58,49,42,39,38,42,49,54,58,56,51,49,48,49,51,48,43,42,46,46,41,38,35,36,38,40,42,41,37,34,35,35,32,85,84,78,69,58,49,41,39,39,44,52,55,56,55,53,51,49,48,48,44,39,38,42,43,41,37,34,32,33,35,34,33,30,28,30,31,29,81,80,77,68,57,48,41,39,39,44,52,53,53,52,52,50,48,47,45,41,36,35,38,40,39,37,32,30,30,31,31,29,27,26,27,27,25,69,72,72,65,55,47,40,38,39,43,48,49,47,47,47,47,47,45,43,39,34,33,34,35,36,34,30,29,30,31,31,30,28,27,26,24,21,61,66,69,63,55,47,40,39,40,44,48,47,45,43,43,43,43,41,39,36,32,31,31,31,32,31,29,28,29,30,31,31,30,28,26,24,21,55,62,68,64,57,49,42,42,44,48,53,52,47,44,41,39,37,36,34,31,28,28,27,28,28,28,26,26,29,31,32,32,32,31,29,26,24],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
