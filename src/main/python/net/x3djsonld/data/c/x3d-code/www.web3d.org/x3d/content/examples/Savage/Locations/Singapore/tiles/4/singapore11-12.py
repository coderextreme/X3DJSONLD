###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_1112',geoSystem=['GDC'],position=(1.4130926478938615,103.94891185322548,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.4130926478938615,103.94891185322548,0.0),range=4101.627,child1Url=['../../tiles/5/singapore22-24.x3d'],child2Url=['../../tiles/5/singapore22-25.x3d'],child3Url=['../../tiles/5/singapore23-24.x3d'],child4Url=['../../tiles/5/singapore23-25.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore11-12.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.93454881909646,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[9,8,9,10,13,14,14,13,10,8,9,15,24,26,26,24,15,6,3,1,-2,-1,0,1,1,1,1,8,11,11,7,4,2,0,-4,-4,-3,9,9,8,9,12,13,14,14,12,9,8,12,20,26,26,25,20,11,4,2,0,-2,0,1,1,1,1,6,10,9,5,3,1,-2,-4,-3,-2,9,9,8,9,10,13,14,14,13,10,8,9,15,24,26,26,24,15,6,3,1,-2,-1,0,1,1,1,5,9,7,4,3,0,-4,-4,-2,0,9,9,9,8,9,12,13,14,14,12,9,8,12,19,26,26,25,20,11,4,2,0,-2,0,1,1,1,4,7,5,3,1,-2,-4,-3,0,0,9,9,9,8,9,11,13,14,14,13,10,8,9,15,24,26,26,24,15,6,3,1,-2,-1,0,1,1,2,5,4,3,0,-4,-4,-2,0,2,10,9,9,9,8,10,12,13,14,14,12,9,8,12,20,26,26,25,20,11,4,2,0,-2,0,1,1,1,3,3,1,-2,-4,-3,0,1,3,11,9,9,9,8,9,11,13,14,14,13,10,8,9,15,25,26,26,24,15,6,3,1,-2,-1,0,1,1,3,3,0,-4,-4,-2,0,3,3,13,10,9,9,9,8,10,12,13,14,14,12,9,8,11,19,26,26,25,20,11,4,2,0,-2,0,1,2,3,1,-2,-4,-3,0,1,4,5,14,11,9,9,9,8,9,10,13,14,14,13,10,8,8,15,25,26,26,24,15,6,3,1,-2,0,1,3,3,0,-2,-4,-2,0,3,5,6,15,13,10,9,9,9,8,9,12,13,14,14,12,9,8,11,19,26,26,25,20,11,4,2,0,0,3,4,4,1,0,-1,0,1,4,5,6,16,14,11,9,9,9,8,9,10,13,14,14,13,10,8,8,15,25,26,26,24,15,6,4,1,0,4,5,4,3,1,0,1,3,5,5,5,15,15,13,10,9,9,9,8,9,12,13,14,14,12,9,8,11,19,26,26,25,20,9,6,4,3,5,5,5,4,3,3,3,4,5,5,5,15,16,14,11,9,9,9,8,8,10,13,14,14,14,10,8,8,15,25,26,25,23,11,6,7,6,5,5,5,5,5,5,5,5,5,5,5,13,15,15,13,10,9,9,9,8,9,11,13,14,14,12,9,8,11,20,26,25,19,10,7,7,7,6,5,5,5,5,5,5,5,5,5,5,12,15,16,14,11,9,9,9,8,8,10,13,14,14,14,10,8,8,15,25,24,15,8,8,8,8,6,5,5,5,5,5,5,5,5,5,5,10,13,15,15,13,10,9,9,9,8,9,12,13,14,14,12,9,8,11,18,18,12,8,8,8,8,7,6,5,5,5,5,5,5,5,5,5,9,12,15,16,14,11,9,9,9,8,8,10,13,14,14,14,10,8,8,13,13,9,9,8,8,8,7,6,5,5,5,5,5,5,5,5,5,7,10,13,15,15,13,10,9,9,9,8,9,12,13,14,14,12,9,9,11,11,9,9,8,8,8,8,7,6,5,5,5,5,5,5,5,5,6,9,12,15,16,14,11,9,9,9,8,8,11,13,14,14,14,10,10,11,10,10,9,9,8,8,8,7,6,5,5,5,5,5,5,5,5,5,7,10,13,15,15,13,10,9,9,9,9,10,13,13,13,13,11,11,11,10,10,9,9,8,8,8,8,7,6,5,5,5,5,5,5,5,4,5,9,12,15,16,14,11,9,9,9,9,10,14,13,13,13,12,11,11,11,10,10,9,9,8,8,8,7,6,5,5,5,5,5,5,5,5,5,7,10,13,15,15,13,10,9,9,9,10,14,14,13,13,12,12,11,11,10,10,9,9,8,8,8,8,7,6,5,5,5,5,5,5,5,4,5,9,12,15,16,14,11,9,9,9,10,14,14,13,13,12,12,12,11,11,10,10,9,9,8,8,8,7,6,5,5,5,5,5,5,6,5,5,7,10,13,15,15,13,10,8,8,9,12,14,14,13,13,12,12,11,11,10,10,9,9,8,8,8,8,7,6,5,5,5,5,5,7,5,4,5,9,12,15,16,14,11,8,7,8,11,14,14,13,13,12,12,12,11,11,10,10,9,9,8,8,8,8,6,5,5,5,5,5,7,6,5,5,7,10,13,15,15,12,8,7,8,10,12,14,14,13,13,12,12,11,11,10,10,9,9,8,8,8,8,7,6,5,5,5,5,7,7,5,5,5,9,12,15,16,13,7,6,7,9,11,14,14,13,13,13,12,12,11,11,10,10,9,9,8,8,8,8,6,5,5,5,5,7,7,6,5,5,7,10,13,15,11,6,5,6,8,10,12,14,14,13,13,12,12,11,11,10,10,9,9,8,8,8,8,7,6,5,5,5,7,7,7,5,5,6,9,12,12,8,3,3,5,7,9,11,14,14,13,13,12,12,12,11,11,10,10,9,9,8,8,8,8,6,5,5,5,7,7,7,6,5,5,6,8,7,5,3,3,4,6,8,10,12,14,14,13,13,12,12,11,11,10,10,9,9,8,8,8,8,7,6,5,5,7,7,7,7,5,5,5,5,2,1,3,3,3,5,7,9,11,14,14,13,13,12,12,12,11,11,10,10,9,9,8,8,8,8,7,6,5,7,7,7,7,6,6,6,4,0,0,2,3,3,4,6,8,9,13,14,14,13,13,12,12,11,11,10,10,9,9,8,8,8,8,7,7,6,8,7,7,7,7,9,10,5,0,0,1,3,3,3,5,7,8,11,14,14,13,13,13,12,12,11,11,10,10,9,8,8,8,8,8,7,7,8,7,7,8,10,13,15,9,0,0,0,2,3,3,4,6,8,9,13,14,14,13,13,12,12,11,11,10,10,9,8,8,8,8,9,8,8,9,8,7,10,15,19,19,15,5,0,0,1,3,3,3,5,7,9,11,14,14,13,13,13,12,12,11,11,10,9,8,8,8,8,9,9,9,9,9,8,11,18,22,21,18,10,0,0,0,2,3,3,4,6,8,10,13,14,14,13,13,12,12,11,11,10,9,8,8,8,9,9,10,9,10,10,10,12,18,22,22,20,15,5,-1,0,1,3,3,3,5,7,9,11,14,14,13,13,13,12,12,11,10,9,8,8,8,9,9,10,10,11,11,11,13,17,21,22,21,19,10,0,0,0,2,3,3,4,6,8,10,13,14,14,13,13,12,12,11,10,9,8,8,9,9,10,10,10,11,11,12,12,15,20,22,22,20,15,5,0,0,2,3,3,3,5,7,9,11,14,14,13,13,13,12,11,10,9,8,8,9,9,10,10,11,12,12,12,12,13,17,21,22,21,19,10,0,0,0,2,3,3,4,6,8,10,13,14,14,13,13,12,11,10,9,8,8,9,10,10,11,11,12,12,12,12,12,15,20,22,22,20,15,4,0,0,2,3,3,3,5,7,9,11,14,14,13,13,12,11,10,9,8,8,9,10,10,11,11,12,12,12,12,12,13,17,21,22,21,19,10,0,0,0,2,3,3,4,6,8,10,13,14,14,13,13,11,10,9,8,8,9,10,11,11,11,12,12,12,12,12,13,16,20,22,22,20,15,4,-1,0,2,3,3,3,5,7,9,11,14,14,13,13,11,10,9,8,8,9,10,11,11,12,12,12,12,12,12,12,14,18,21,22,21,19,10,0,0,0,3,3,3,4,6,8,9,13,14,14,13,12,10,9,8,8,9,10,11,12,12],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
