###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5358,-5078,-4902,-4147,-4614,-4407,-4349,-4323,-4396,-3111,-3252,-2793,-394,356,530,1099,2737,1150,1010,821,831,805,-5352,-5181,-5019,-4291,-4155,-4182,-1590,-4370,-4359,-4238,-3481,-3506,-2417,142,501,393,1386,1868,1272,1045,1081,1509,-5375,-5256,-5132,-4255,-3483,-3268,-2155,-4054,-4425,-4456,-4011,-3803,-3574,-86,317,835,812,1335,1215,1360,1279,1296,-5410,-5303,-5274,-4853,-4111,-3654,-3425,-3967,-4338,-4440,-4376,-4314,-4348,-291,108,383,815,2032,866,1163,1128,1121,-5377,-5295,-5217,-4889,-4586,-4031,-4114,-3894,-2813,-4443,-4453,-4447,-4341,-3455,-139,145,411,550,923,1121,1128,1066,-5214,-5123,-5190,-5303,-5018,-4537,-3842,-3736,-3092,-4337,-4469,-4456,-4293,-3857,-2043,-206,28,382,747,849,1172,1181,-5052,-5080,-5129,-5156,-4913,-4352,-2387,-3265,-2858,-2783,-2668,-4406,-4064,-3671,-2206,-433,180,1359,498,79,494,953,-5029,-4867,-5246,-5247,-4993,-4570,-3257,-1869,-4409,-4908,-4146,-4501,-3833,-3084,-1681,-682,150,-396,-331,-320,-101,174,-4645,-4803,-5192,-5457,-5444,-4578,-4094,-2762,-4220,-4857,-4788,-4899,-4707,-3587,-1624,-771,-335,-1109,-1551,-992,-2177,-2122,-3954,-4263,-4897,-5318,-5510,-5242,-4723,-3599,-3013,-4037,-3632,-3546,-4421,-2350,-719,-370,88,-106,-902,-981,-2483,-2662,-4185,-3860,-4167,-4423,-5125,-5171,-4684,-2855,-926,-3734,-5129,-2305,-3514,-112,-65,-43,167,488,760,430,-1913,-2668,-4318,-4257,-3610,-4912,-4143,-4677,-3627,-4602,-2348,-4471,-5118,-5087,-3362,-173,241,92,134,298,966,1004,-206,-1675,-3849,-3913,-4579,-5041,-4483,-5531,-5345,-4851,-4748,-3345,-5030,-5021,-2929,-148,188,634,619,161,404,1221,335,-20,-3887,-4450,-5196,-4621,-5083,-5539,-5024,-5655,-5259,-4230,-4880,-4993,-4742,-88,236,571,532,596,942,1062,425,268,-3739,-4348,-4971,-4547,-5332,-4706,-5026,-5166,-5226,-3038,-4244,-3198,-276,-4,179,173,366,579,649,1052,908,242,-3707,-4332,-4830,-4907,-4957,-5251,-5517,-5218,-5222,-3933,-3778,-4579,-2388,206,274,350,710,642,748,704,593,239,-3872,-3796,-4370,-4880,-5550,-4315,-5168,-4926,-5185,-5356,-5189,-5025,-3540,-8,510,297,275,456,708,960,1069,699,-4264,-3928,-3746,-4848,-5364,-5424,-5052,-5406,-5358,-5355,-5281,-4974,-3272,-70,248,797,1083,744,635,731,1348,1677,-3677,-3963,-3593,-4809,-5158,-5163,-5120,-4958,-5320,-5366,-5214,-4414,-3573,-16,657,591,855,864,937,1078,1034,827,-3926,-3786,-3461,-4017,-5158,-5570,-5245,-5065,-5365,-5339,-4714,-3607,-3357,-40,650,458,726,785,1001,981,751,390,-3821,-3834,-4013,-3816,-4628,-5245,-5464,-5360,-5330,-5331,-4178,-2310,-2810,-128,850,991,698,859,992,1132,255,405,-3668,-3881,-4010,-4060,-4527,-4568,-5207,-5085,-5339,-5320,-4407,-1888,-2628,-14,407,369,831,859,950,543,373,922,-3360,-2982,-4365,-4317,-4302,-4488,-4731,-4990,-5325,-5267,-2421,-2251,-2966,331,526,1238,1680,1360,629,561,1106,1100,-3269,-2583,-3571,-5120,-4317,-4335,-4672,-4918,-5310,-5221,-2568,-2464,-3151,284,738,470,1382,1553,701,1052,877,883],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
