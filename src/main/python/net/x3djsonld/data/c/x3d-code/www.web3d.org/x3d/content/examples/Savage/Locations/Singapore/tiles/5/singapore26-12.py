###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore26-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4392877850278434,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[10,6,7,8,11,13,14,14,12,10,8,7,7,7,9,12,14,15,16,18,22,27,31,33,35,36,36,33,29,25,24,28,30,33,35,34,10,6,5,5,9,13,14,13,11,10,8,7,7,7,9,11,13,15,17,20,23,27,30,31,32,33,32,28,25,23,23,26,28,30,32,32,10,6,4,2,7,13,13,12,11,10,8,7,7,8,9,10,12,15,18,21,24,27,29,29,29,30,29,24,22,22,22,24,25,27,29,29,8,4,1,0,3,11,13,13,12,11,10,9,9,9,9,10,12,15,18,21,24,27,29,30,31,31,30,27,26,26,26,25,25,24,25,28,6,2,0,-4,0,8,12,14,14,13,12,11,10,10,10,11,12,15,17,20,24,26,29,30,31,31,31,30,29,29,28,26,24,22,22,26,2,-1,-1,-1,2,7,10,12,13,13,12,11,10,10,10,11,12,13,16,20,23,24,27,27,28,30,30,30,30,29,28,27,25,22,20,22,0,-4,-1,1,4,6,8,10,12,13,12,10,10,10,10,11,11,12,14,19,23,23,24,25,26,29,30,31,30,30,29,28,26,22,19,19,-2,-2,0,3,5,7,8,10,10,10,10,9,9,9,10,12,13,13,15,19,22,22,24,25,26,29,31,31,30,30,29,27,25,22,19,18,-2,0,2,5,7,8,8,9,8,8,8,8,9,9,10,13,14,14,15,18,20,21,22,24,27,29,30,30,30,29,29,27,24,21,18,18,0,2,4,6,7,8,8,8,8,7,7,8,9,11,13,15,15,15,16,19,20,21,22,25,28,29,29,28,28,27,26,25,23,20,18,18,2,5,6,7,8,9,8,8,7,7,7,8,10,13,15,18,17,17,17,19,20,21,22,26,28,29,29,27,25,25,24,23,21,19,18,18,4,6,7,8,8,8,8,7,7,6,7,8,10,13,16,20,20,19,19,18,19,21,23,26,29,29,28,25,24,23,22,23,22,21,20,20,6,7,8,9,8,8,7,6,6,6,7,8,10,13,17,23,23,21,19,18,19,20,24,27,28,28,27,24,22,22,22,23,24,23,23,22,7,8,8,8,8,7,6,5,5,4,4,5,9,15,20,26,26,24,22,18,18,20,23,25,26,27,27,26,24,22,22,23,23,23,23,22,8,8,8,8,7,6,5,5,4,3,2,2,8,18,24,29,29,27,24,18,17,20,22,23,24,26,27,29,28,24,22,22,22,23,23,21,8,8,8,7,7,6,5,5,4,4,4,5,10,18,24,27,27,25,21,17,17,20,22,24,26,27,28,28,27,24,21,20,20,20,20,19,8,8,7,7,6,6,5,5,5,5,7,9,13,18,21,24,23,20,18,16,17,20,24,27,30,30,29,26,25,23,22,20,18,17,16,16,8,7,7,7,6,6,6,6,6,7,8,10,13,15,17,19,18,16,14,14,15,18,23,28,31,30,28,26,24,23,22,21,19,17,16,14,7,7,7,7,7,7,7,7,8,9,9,10,11,11,12,12,12,12,12,12,14,16,20,27,30,29,28,25,24,24,23,23,22,19,16,14,8,7,7,7,7,7,7,8,9,9,10,9,9,9,9,9,9,10,10,11,12,14,18,26,30,28,27,25,25,25,25,24,23,19,16,14,9,8,7,7,8,8,8,9,9,9,9,8,7,7,7,7,8,8,9,10,12,12,17,24,28,27,26,26,27,28,28,26,23,19,15,14,10,9,9,8,8,9,9,9,10,9,8,7,6,6,6,7,7,7,8,9,10,10,13,22,26,26,26,27,28,30,30,27,24,20,16,15,11,11,10,9,9,9,10,9,9,8,7,6,6,6,6,6,6,7,7,7,6,6,9,18,25,25,26,27,28,31,32,28,24,21,18,16],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
