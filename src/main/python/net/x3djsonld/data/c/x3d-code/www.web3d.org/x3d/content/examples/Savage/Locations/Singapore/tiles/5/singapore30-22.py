###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-22.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.90582275083842,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[48,47,45,42,38,35,33,33,33,33,33,32,32,31,29,29,30,29,28,27,26,26,27,27,26,26,28,29,29,29,29,30,32,34,36,37,48,47,45,42,39,36,34,34,34,33,33,32,31,30,29,29,28,27,27,27,27,28,29,29,27,27,28,29,30,30,29,29,32,35,36,36,48,46,44,42,40,38,36,35,35,34,33,32,31,30,29,28,26,25,25,25,28,29,30,30,28,27,28,29,30,30,29,30,33,35,36,37,46,45,43,42,42,40,39,38,37,36,34,32,31,30,29,28,26,25,25,26,27,29,29,30,29,29,28,29,30,30,30,30,32,34,36,37,44,43,43,43,44,43,42,41,39,37,34,32,30,29,29,28,27,26,26,26,27,27,28,29,30,30,30,29,29,29,30,30,32,34,36,38,46,45,44,45,46,45,43,42,41,38,35,33,31,29,29,28,27,27,28,28,28,29,29,30,30,30,30,30,29,29,30,31,32,34,36,39,49,48,47,48,48,46,45,43,42,40,37,34,31,29,29,28,27,27,29,30,31,32,32,31,30,29,30,30,29,30,31,32,32,34,37,39,52,50,49,48,48,47,45,44,43,40,37,34,31,30,29,28,27,28,30,31,32,31,30,29,28,28,29,29,30,31,32,33,34,35,38,42,55,52,49,47,46,45,44,43,42,39,36,33,30,29,29,28,27,28,31,33,31,29,26,25,25,26,27,28,30,32,33,35,36,37,41,44,56,53,50,47,45,45,44,43,41,38,35,31,29,29,29,29,28,30,33,33,30,28,26,25,25,26,27,28,30,31,33,35,37,38,41,45,56,53,50,47,45,45,44,43,40,37,33,30,28,28,30,31,31,33,35,34,31,29,27,26,26,27,28,29,30,30,32,35,37,39,41,42,55,53,50,47,45,45,44,42,39,35,32,29,28,28,30,31,32,34,36,36,33,31,30,29,28,28,28,29,30,31,33,35,37,39,40,41,54,52,50,48,46,45,43,41,38,34,30,29,29,29,29,30,31,34,37,39,37,36,33,31,29,28,29,29,30,31,34,36,38,39,40,41,52,50,49,47,45,44,42,40,37,34,30,29,29,28,28,29,32,35,38,40,40,38,35,32,30,28,29,29,31,32,35,37,38,39,41,41,50,48,47,45,43,42,41,40,37,34,31,29,27,27,27,29,33,36,39,41,40,39,37,34,31,29,29,29,31,33,36,38,39,40,42,43,47,46,45,43,41,41,40,39,37,35,33,30,27,27,27,30,34,37,39,40,40,39,37,35,31,29,29,29,31,34,36,38,39,40,41,41,46,45,43,42,40,40,39,38,37,35,33,30,28,28,29,30,32,35,37,38,38,37,37,35,32,29,29,29,32,34,37,38,38,37,35,35,46,45,44,42,41,40,40,39,37,36,34,31,29,29,31,32,32,33,35,36,36,36,38,37,33,30,29,30,32,35,37,38,38,36,32,31,46,47,47,45,44,43,43,41,39,36,34,32,31,32,33,34,34,36,37,37,37,37,40,40,35,32,32,32,34,36,38,40,40,38,33,30,48,49,50,49,47,47,45,43,40,37,34,32,33,34,36,37,37,38,39,39,39,40,42,42,37,34,33,33,35,38,40,41,41,40,34,30,49,51,52,52,51,49,47,44,40,36,33,33,35,36,38,39,39,40,40,41,43,44,45,43,37,34,33,34,37,39,42,43,42,39,35,31,50,52,54,55,54,52,49,44,40,35,33,34,36,39,40,41,42,42,42,43,46,48,48,45,38,34,34,35,38,41,44,44,42,39,35,32,49,52,55,55,54,51,48,44,39,35,33,34,37,40,42,45,46,46,45,46,48,49,47,44,39,35,35,36,39,42,44,45,42,39,35,31],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
