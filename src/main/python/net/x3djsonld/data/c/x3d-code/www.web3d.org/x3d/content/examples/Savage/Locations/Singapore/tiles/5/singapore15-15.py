###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[39,40,40,37,35,33,33,31,30,29,29,27,24,24,24,27,31,32,32,31,28,27,26,26,26,28,30,30,28,25,24,23,22,22,23,25,27,41,42,43,40,37,36,37,36,34,33,33,30,25,23,22,24,28,29,29,28,27,25,23,23,24,25,27,28,27,26,24,23,23,23,24,25,26,41,42,43,41,39,40,42,40,37,37,37,33,28,26,23,24,25,26,26,24,23,21,20,20,22,23,25,26,26,26,24,24,23,23,24,25,25,41,41,42,42,41,44,48,45,41,40,40,38,34,30,26,25,24,24,23,20,18,17,18,19,21,22,24,25,26,26,25,25,24,24,24,25,25,41,42,42,42,43,47,50,47,44,44,44,41,37,34,29,27,24,23,21,19,16,16,18,19,21,24,26,27,27,27,26,26,26,27,29,31,31,42,43,44,44,44,47,50,48,47,46,46,42,39,35,31,28,25,23,21,19,17,17,19,21,23,26,29,30,30,29,26,26,29,33,36,39,40,43,44,45,45,44,46,48,48,47,47,45,42,38,34,31,28,24,23,21,19,19,19,21,23,24,27,30,32,32,31,29,30,34,39,44,49,49,43,44,45,44,43,43,44,45,46,45,42,39,35,31,29,26,23,22,21,21,20,22,25,26,26,28,31,34,34,34,32,34,40,47,53,58,58,42,43,43,42,41,40,40,42,44,42,40,36,32,29,26,24,22,22,22,23,24,26,29,30,30,31,33,34,34,34,34,38,45,53,59,63,63,40,41,40,39,38,37,36,38,41,40,38,34,30,26,23,22,21,22,24,27,30,32,33,35,36,36,35,34,32,32,35,41,49,56,61,65,65,37,37,36,35,34,33,32,34,37,36,36,32,28,25,21,21,20,23,27,31,36,39,39,40,40,39,36,34,31,32,37,43,51,58,63,66,66,33,32,31,30,30,29,28,30,32,32,32,29,27,24,21,21,22,25,31,36,42,45,46,45,42,39,36,34,32,33,38,44,52,58,64,67,67,29,29,28,27,27,26,26,27,28,27,27,26,25,23,20,22,25,29,35,41,47,49,50,48,45,41,38,36,34,35,41,47,53,59,65,68,67,27,27,27,26,26,25,25,24,24,22,21,21,21,21,21,24,29,34,40,46,49,51,51,51,49,46,42,39,37,38,44,50,56,62,65,67,65,27,27,27,26,25,24,24,23,22,21,20,20,21,22,23,27,33,39,45,49,52,53,53,53,53,50,46,42,39,39,45,52,58,63,65,66,63,29,28,27,26,24,23,22,22,22,22,23,25,27,28,29,33,38,43,48,51,52,54,56,57,57,55,51,46,41,40,45,52,59,64,65,64,60,32,31,29,27,24,23,21,24,27,28,29,31,32,33,33,36,41,45,50,53,53,55,58,60,60,59,55,49,42,40,45,51,58,63,63,61,55,38,36,33,29,25,23,22,29,36,38,39,39,38,37,36,38,41,45,50,53,55,58,61,62,62,61,57,51,42,39,44,50,56,59,58,54,50,42,39,35,30,26,24,24,34,43,46,47,46,43,41,39,40,43,46,50,54,57,59,62,63,62,60,56,51,42,39,43,48,54,56,54,51,48,43,39,35,30,25,26,29,38,47,50,51,49,47,45,43,44,46,49,52,55,57,59,60,60,58,55,50,46,40,39,43,47,51,53,52,50,51,44,39,34,29,25,27,31,40,49,51,52,52,50,49,47,48,50,52,54,56,58,58,59,57,54,50,45,42,39,38,43,47,50,51,51,51,53,44,39,34,29,25,27,31,39,47,50,52,53,52,51,50,51,53,54,56,57,59,58,57,54,49,45,42,39,38,39,43,47,49,50,50,52,56,45,39,33,29,27,28,31,37,44,48,51,53,54,53,51,52,54,55,56,57,58,57,55,52,48,44,42,40,39,41,44,48,49,50,51,53,59],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
