###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore13-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3257755241139217,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[20,16,18,20,21,22,20,18,16,15,14,13,14,14,16,18,21,25,32,43,48,46,46,48,49,47,46,47,47,46,43,39,35,38,40,42,19,16,18,21,22,22,21,20,19,17,16,15,15,15,17,19,21,23,28,36,42,45,49,52,54,52,51,52,52,49,45,39,34,35,35,38,19,17,18,20,21,22,22,22,21,20,18,17,17,17,18,21,23,24,28,34,40,44,49,54,57,56,55,55,54,50,46,38,32,32,32,35,19,18,18,19,21,23,23,24,24,23,22,20,19,18,19,22,24,27,31,35,40,44,49,55,58,58,57,56,54,49,43,36,31,31,31,34,18,16,18,20,21,23,25,28,29,29,26,23,21,19,20,23,25,29,33,38,42,45,51,55,58,57,56,54,50,45,39,34,31,31,32,34,16,15,18,21,22,23,27,33,34,34,30,26,22,20,21,23,26,30,35,39,43,47,51,55,57,55,52,50,46,41,36,33,31,32,34,35,16,16,18,21,22,25,30,36,39,38,34,28,24,21,21,23,27,31,35,39,42,44,47,51,53,50,48,46,43,39,35,34,33,34,35,37,17,18,18,19,22,27,33,39,42,42,36,30,25,22,22,24,27,31,34,37,39,40,42,46,47,45,43,41,40,38,37,37,37,37,37,39,17,18,18,18,23,28,35,41,42,42,36,29,25,22,22,24,27,31,35,38,39,39,40,42,42,41,40,39,39,39,39,40,40,39,39,40,17,17,18,19,24,29,35,42,42,40,35,28,24,22,23,24,27,33,37,39,40,40,39,39,39,39,39,38,38,41,42,43,43,42,42,41,16,16,18,20,24,29,34,40,40,37,32,27,24,23,24,25,29,35,39,40,40,39,38,37,38,38,38,36,37,41,44,44,45,43,42,40,16,16,18,21,25,28,32,37,36,34,30,26,25,25,25,27,31,37,41,40,39,37,36,37,37,37,37,34,34,39,44,45,47,44,41,39,16,16,19,22,25,28,31,34,33,31,29,28,28,28,28,30,34,40,42,41,39,38,36,37,37,37,36,33,32,38,43,46,48,46,43,39,16,16,20,24,26,29,30,31,30,29,30,31,31,31,32,34,37,41,43,42,41,39,37,36,36,36,35,32,31,37,41,45,48,47,45,40,17,17,21,25,27,30,29,29,29,29,30,31,31,32,33,35,38,41,43,44,42,40,37,37,37,38,38,33,31,35,39,42,46,44,41,37,19,19,22,26,28,29,29,28,28,28,28,29,30,30,32,34,36,40,43,45,44,41,38,39,40,41,41,35,32,34,36,38,40,37,35,32,21,20,23,26,28,29,29,29,29,28,28,30,31,31,32,35,37,40,43,45,44,41,39,40,41,43,42,37,33,34,35,36,36,34,31,30,22,21,23,26,28,30,31,32,30,28,29,32,33,34,35,38,40,42,43,44,43,40,39,40,41,43,42,37,34,35,35,35,35,33,31,30,24,24,27,31,32,33,34,34,31,29,31,34,35,36,37,40,41,41,42,43,43,41,39,40,40,41,40,37,35,36,35,34,34,33,33,33,26,29,34,39,40,39,37,35,33,32,33,34,35,37,38,40,40,40,41,44,44,43,41,39,39,38,37,36,36,36,36,34,33,34,35,36,28,33,38,44,45,44,41,37,35,34,34,35,36,38,39,39,39,38,40,43,44,43,41,38,37,35,34,35,35,36,36,34,33,35,36,37,30,36,40,45,46,46,43,39,37,35,36,37,38,39,39,38,38,37,38,40,42,42,40,36,34,32,31,33,34,36,36,35,35,35,35,35,33,39,43,46,48,48,44,40,37,36,37,40,41,41,40,39,38,37,38,39,41,42,39,35,32,30,30,31,33,35,36,36,35,35,35,34],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
