###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore24-21.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4218243602718554,103.8914597167094,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[8,9,9,9,10,11,12,12,12,10,9,7,5,4,5,6,8,10,10,11,11,10,9,8,8,10,10,10,10,10,10,9,9,8,6,5,5,9,10,10,10,10,11,11,12,12,12,10,8,6,4,4,5,6,8,10,11,11,11,10,9,9,10,10,10,10,10,10,9,8,7,6,6,6,10,11,11,11,11,11,11,11,12,13,11,9,7,5,4,4,4,6,8,10,11,11,11,10,10,10,10,10,10,10,9,8,6,6,6,6,6,11,11,11,11,11,11,11,11,12,12,12,11,9,6,5,4,4,5,6,8,10,11,11,10,10,10,10,10,10,9,8,7,6,6,6,5,5,11,11,11,11,11,11,11,11,11,12,13,13,11,8,6,4,4,4,4,6,8,10,11,10,10,10,10,10,9,8,6,6,6,6,6,5,4,10,11,11,11,11,11,11,11,11,12,12,13,12,11,9,6,5,4,4,5,6,8,9,10,11,11,10,9,8,7,6,6,7,6,6,5,4,10,10,11,11,11,11,11,11,11,11,12,12,13,13,11,8,6,4,4,4,4,6,8,10,11,10,9,8,6,6,6,6,6,6,5,5,4,9,9,10,11,11,11,11,11,11,11,11,12,12,13,12,11,8,6,5,4,4,5,6,8,9,9,8,7,6,6,7,6,6,6,5,4,4,8,9,10,10,11,11,11,11,11,11,11,11,12,12,13,13,11,8,6,4,3,3,4,5,7,7,6,6,6,6,6,6,6,6,5,4,4,7,8,9,9,10,11,11,11,11,11,11,11,11,12,12,13,12,11,7,2,0,-1,-2,-2,-2,-1,0,4,6,6,6,6,6,5,5,4,4,6,7,8,9,10,10,11,11,11,11,11,11,11,11,11,11,12,11,7,0,-4,-7,-10,-11,-11,-9,-4,2,5,5,4,4,4,4,3,3,3,6,6,7,8,9,9,10,11,11,11,11,11,11,9,5,0,-3,-3,-5,-8,-11,-13,-14,-15,-15,-14,-11,-8,-6,-6,-6,-6,-6,-7,-7,-7,-5,5,6,6,7,8,9,10,11,12,12,12,11,11,9,0,-11,-17,-17,-18,-18,-18,-18,-19,-19,-19,-19,-18,-18,-18,-18,-18,-18,-18,-18,-17,-17,-13,3,5,6,6,7,8,12,15,18,20,20,20,20,17,8,-3,-11,-16,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-16,-10,-3,2,4,6,7,8,10,15,21,25,27,29,30,29,25,17,6,-4,-14,-18,-18,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-18,-18,-14,-4,6,2,5,14,21,23,24,28,31,33,35,35,34,32,28,21,11,0,-8,-14,-17,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-17,-11,-4,5,15,4,8,23,36,40,40,40,41,41,41,40,38,35,30,23,15,5,-3,-10,-15,-18,-18,-19,-19,-19,-19,-19,-19,-19,-19,-18,-18,-14,-4,5,15,22,27,33,41,47,46,43,43,43,43,43,42,40,37,32,25,16,7,-1,-7,-12,-16,-18,-19,-19,-19,-19,-19,-19,-19,-19,-17,-13,-6,3,12,20,25,52,60,60,57,50,44,43,43,43,43,43,42,39,34,26,16,7,0,-5,-9,-13,-17,-18,-18,-19,-19,-19,-19,-18,-18,-15,-7,1,10,19,24,27,63,68,67,62,56,50,45,43,43,43,43,42,40,36,29,17,6,-2,-7,-8,-11,-13,-15,-17,-19,-19,-19,-19,-18,-15,-11,-3,4,15,23,26,27,68,70,70,67,62,56,50,44,43,43,43,43,42,39,31,17,5,-4,-8,-8,-8,-9,-11,-16,-18,-18,-18,-18,-16,-12,-6,-1,6,18,27,28,27,68,70,70,69,66,61,55,49,45,43,43,43,43,41,32,18,5,-6,-10,-8,-6,-5,-7,-11,-14,-17,-18,-15,-12,-7,-2,1,7,16,24,27,28],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
