###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore29-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4654829221618253,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[14,15,16,16,15,14,16,19,23,26,29,31,33,34,34,34,31,26,22,20,19,19,21,25,28,32,33,32,30,28,26,25,24,20,17,14,18,20,20,20,17,15,16,19,23,28,31,33,35,36,36,35,33,28,24,22,21,22,23,26,29,33,34,33,32,30,28,27,27,23,20,17,22,25,23,22,18,15,16,18,22,25,30,33,36,37,36,35,33,30,27,24,23,24,25,27,30,34,35,34,33,31,29,28,27,25,23,20,26,28,26,23,20,16,16,17,20,23,28,32,35,37,36,35,34,31,29,25,25,26,28,30,32,34,35,35,34,32,30,29,27,26,24,22,26,29,27,24,21,18,17,17,19,22,26,30,34,36,36,35,33,31,30,27,27,30,33,33,34,35,35,34,32,30,29,28,27,26,24,22,27,30,28,25,23,20,18,17,19,21,24,28,32,36,36,34,33,31,30,28,29,32,35,34,34,34,33,31,29,28,27,26,26,25,23,22,29,32,30,28,26,23,21,20,20,22,25,28,31,35,35,34,32,31,29,28,27,30,32,32,32,30,29,26,25,25,25,24,24,23,22,20,31,33,32,31,29,27,25,23,23,23,26,28,31,35,34,33,32,30,28,26,25,27,28,29,28,27,25,22,21,22,23,22,22,21,21,19,31,34,34,35,34,31,29,26,25,25,27,29,32,34,33,31,30,28,27,24,24,25,25,25,24,24,22,20,19,20,20,20,20,19,17,16,30,34,37,39,38,36,33,29,28,28,29,31,32,33,32,30,28,26,24,23,22,23,23,22,21,21,20,18,17,17,18,18,18,16,14,14,27,31,37,44,43,41,37,32,31,32,33,33,33,31,30,29,27,25,24,23,23,23,23,21,20,20,18,17,16,16,16,16,15,14,13,13,24,29,38,47,47,45,41,35,35,36,36,35,33,31,29,28,27,25,24,24,24,24,23,22,20,19,17,16,15,15,14,13,13,13,13,13,22,26,33,41,42,43,40,36,38,40,39,37,35,32,31,30,29,29,28,28,27,25,24,23,21,18,16,15,15,14,13,13,13,13,13,12,20,24,28,33,37,41,39,38,40,44,43,39,36,34,33,32,31,32,32,31,29,26,24,23,22,19,17,15,14,14,14,14,14,14,13,12,22,25,28,31,34,37,37,37,40,44,42,39,37,36,35,33,32,33,32,30,28,25,23,22,21,19,17,16,15,15,15,16,16,16,15,13,24,26,28,30,32,34,35,36,39,43,41,39,38,38,37,34,33,33,32,29,27,24,22,21,19,18,17,16,16,17,17,18,19,18,18,15,24,27,28,28,30,32,33,35,37,38,37,34,34,36,36,34,33,32,29,27,25,22,21,20,18,17,17,18,19,19,19,19,19,18,17,15,24,27,27,27,29,31,32,34,34,34,32,29,30,33,34,34,32,29,26,24,22,21,20,19,18,18,18,20,22,22,22,20,18,17,15,13,25,27,27,27,29,31,32,33,32,31,29,27,28,31,32,32,31,27,25,23,21,20,20,21,21,21,21,22,23,22,22,19,17,15,13,12,25,28,27,27,29,31,31,31,30,28,26,25,26,28,29,29,28,26,24,22,20,20,21,23,24,24,24,24,24,22,21,18,15,13,12,12,28,32,29,27,30,32,33,33,32,30,28,27,26,28,28,28,27,26,24,22,21,22,23,25,26,25,25,25,24,22,20,17,15,13,12,12,32,36,32,28,31,35,36,36,34,33,31,30,28,27,27,28,27,25,24,23,24,25,27,27,27,26,25,24,23,21,19,17,16,15,14,13],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
