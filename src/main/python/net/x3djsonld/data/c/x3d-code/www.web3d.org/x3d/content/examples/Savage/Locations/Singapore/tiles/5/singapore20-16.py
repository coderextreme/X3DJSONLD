###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[39,38,36,35,38,42,48,54,55,54,51,47,47,48,44,40,35,29,28,29,29,29,29,29,29,30,30,29,27,25,24,23,23,22,20,19,39,37,36,35,37,40,45,50,51,51,49,47,48,49,47,43,38,31,28,27,27,28,28,29,29,30,30,30,29,26,23,21,19,19,18,17,42,40,37,36,36,37,40,45,46,47,48,48,49,50,48,46,41,35,31,28,27,27,28,29,30,31,31,31,30,27,24,21,18,17,16,16,45,43,40,38,37,37,39,42,44,47,49,51,52,53,51,49,45,41,37,31,29,28,28,30,31,31,32,31,30,28,26,22,19,17,16,16,49,46,43,41,40,40,41,42,45,49,52,55,56,57,55,52,50,48,43,37,33,29,29,30,31,32,32,31,31,30,28,26,22,19,17,17,51,47,45,43,41,41,41,42,46,51,54,58,59,59,57,53,51,50,46,41,36,31,30,31,31,31,31,32,32,31,30,28,25,21,18,18,50,47,44,42,41,40,41,42,46,51,56,59,59,59,56,51,49,48,46,43,39,34,31,30,30,30,31,32,33,33,31,30,27,23,20,19,48,45,43,41,40,39,39,39,44,50,54,57,57,57,53,47,45,44,44,42,40,35,32,28,28,29,30,32,32,32,31,30,28,23,20,18,43,42,43,43,40,38,36,35,39,45,48,51,52,52,48,43,41,40,39,40,38,35,31,26,25,27,29,30,31,30,29,28,27,22,19,17,39,42,44,46,43,39,35,31,35,40,43,46,47,48,45,40,37,35,35,36,35,34,30,25,24,25,27,29,29,28,27,27,26,21,18,16,38,43,47,50,47,42,36,30,31,34,37,40,42,43,41,37,34,31,31,32,33,33,30,26,24,23,24,27,28,26,26,26,24,19,16,14,37,44,48,51,47,42,35,28,27,28,30,33,35,36,34,33,29,26,26,27,28,29,27,24,22,21,21,25,25,24,23,23,22,17,14,13,36,42,45,46,42,38,31,25,23,22,24,25,26,26,26,25,23,20,20,21,21,22,21,20,19,18,18,21,22,21,20,20,18,15,13,12,33,38,39,39,36,32,27,22,20,18,19,20,20,19,19,20,18,16,15,15,16,17,17,17,16,15,16,17,18,18,17,17,15,13,11,11,26,30,31,31,28,25,23,21,19,17,17,18,17,16,17,18,17,15,14,13,13,14,14,14,14,13,14,15,15,15,14,13,12,10,9,10,22,24,25,25,23,22,22,21,20,18,17,16,16,15,15,16,15,14,13,11,11,11,12,12,12,12,12,12,12,13,12,11,10,9,9,9,22,23,24,25,25,25,26,26,23,20,18,17,16,15,15,15,14,13,12,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,10,10,22,23,24,25,27,29,29,29,25,23,20,18,17,15,15,14,13,12,12,11,11,11,11,10,10,11,11,11,11,11,11,11,12,11,10,10,22,24,25,27,29,31,30,29,26,24,22,19,17,16,15,13,12,12,12,12,12,12,12,11,12,12,12,11,10,10,11,11,12,11,10,9,21,23,26,28,30,32,31,29,27,26,23,20,18,16,14,13,12,12,12,13,13,13,13,13,13,13,12,11,10,10,11,11,11,10,10,9,19,21,23,26,28,29,30,30,29,28,25,21,19,18,16,15,15,15,15,15,15,15,15,15,14,13,12,11,11,11,10,10,10,10,10,11,17,19,21,24,26,27,29,31,30,29,25,21,20,19,18,17,17,18,18,17,17,17,17,17,15,13,12,12,11,11,10,10,10,10,10,11,15,17,20,22,23,25,26,28,28,27,25,21,20,21,20,20,20,20,19,19,19,19,19,19,17,15,13,12,12,11,11,11,10,10,10,11],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
