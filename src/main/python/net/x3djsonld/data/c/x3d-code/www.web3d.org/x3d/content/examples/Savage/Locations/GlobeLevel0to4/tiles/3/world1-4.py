###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_14',geoSystem=['GDC'],position=(-56.291665660871615,22.458339368270288,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-56.291665660871615,22.458339368270288,0.0),range=4495500.0,child1Url=['../../tiles/4/world2-8.x3d'],child2Url=['../../tiles/4/world2-9.x3d'],child3Url=['../../tiles/4/world3-8.x3d'],child4Url=['../../tiles/4/world3-9.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world1-4.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4359,-4409,-3599,-3843,-3598,-2470,-2790,-3632,-4027,-3988,-4161,-3613,-3601,-3231,-1874,-382,-1068,-2040,-411,16,1139,-4699,-4462,-3360,-4192,-4130,-2724,-3328,-4142,-4580,-4313,-4577,-4454,-4081,-4030,-3843,-1142,-3653,-4278,-2967,-2950,-795,-3970,-3015,-3834,-4268,-4257,-3585,-2811,-3744,-4670,-4699,-4626,-4877,-4621,-4566,-4368,-1306,-4309,-4655,-4412,-3690,-3070,-4107,-2480,-2765,-4512,-4715,-4670,-4160,-3950,-4789,-4976,-4912,-4989,-5004,-4922,-4828,-3138,-4680,-4848,-4692,-4022,-4041,-5197,-2919,-3829,-4401,-4714,-5415,-5024,-5161,-5218,-4768,-5014,-5073,-5137,-5140,-5070,-4917,-5020,-4952,-4820,-4617,-4445,-5345,-5306,-5338,-5182,-5248,-5034,-5439,-5063,-5151,-4890,-5093,-5112,-5110,-5163,-5112,-5118,-5088,-5063,-5006,-5024,-4795,-5417,-5361,-5357,-5302,-5131,-4705,-5291,-5223,-5059,-5136,-5163,-5185,-5184,-5215,-5170,-5181,-5183,-5203,-5195,-5192,-5099,-5305,-5408,-5155,-5315,-5158,-5138,-5184,-5097,-4984,-5107,-5199,-4914,-5238,-5275,-5247,-5200,-5260,-5282,-5268,-5259,-5262,-5247,-4960,-5226,-5292,-5092,-5329,-5222,-4994,-5187,-5031,-5218,-5449,-5313,-5313,-5280,-5257,-5284,-5309,-5322,-5299,-5294,-4272,-4694,-5339,-5265,-4650,-5428,-5642,-5129,-5097,-5244,-5218,-5160,-5419,-5397,-5395,-5313,-5363,-5263,-5180,-5227,-5329,-3832,-4195,-4328,-4874,-5383,-5131,-5498,-5142,-4770,-4558,-4554,-5118,-5420,-5428,-5475,-5414,-5404,-5073,-5283,-5180,-5159,-3375,-4485,-2946,-3916,-4981,-4718,-5067,-5150,-5115,-4074,-3775,-5003,-5375,-5438,-5459,-5340,-5393,-4971,-5078,-4832,-4767,-2848,-3242,-3185,-2966,-4273,-4620,-4873,-5284,-4331,-3956,-2728,-4234,-4377,-5610,-5435,-5373,-5389,-4102,-3684,-4104,-4419,-2582,-2897,-1943,-2168,-3529,-3778,-4489,-4314,-3590,-3363,-3626,-3492,-5600,-5046,-5454,-5424,-4922,-4116,-2694,-3308,-3848,-2604,-2612,-3680,-2858,-2917,-3000,-3326,-3053,-2941,-3070,-3894,-3394,-3590,-4418,-5504,-5384,-4676,-4188,-2665,-2727,-595,-2847,-2751,-3325,-4151,-3821,-3041,-2476,-3036,-3132,-3434,-3566,-4166,-3080,-4180,-5463,-5130,-4518,-4268,-3155,-2728,-2856,-2824,-2487,-3326,-4080,-4388,-3767,-1944,-3713,-3299,-3978,-4003,-4462,-3809,-5280,-5158,-4842,-5181,-4297,-3487,-3491,-3788,-3396,-3579,-3113,-2375,-4390,-3502,-3884,-4339,-4142,-4192,-4492,-4490,-4703,-3756,-3263,-4730,-4936,-4619,-4208,-4151,-4358,-3863,-4100,-3872,-3618,-4085,-3814,-4359,-4428,-4727,-4268,-4457,-4073,-5169,-5035,-5243,-4667,-4458,-4506,-4083,-3892,-4117,-3653,-3998,-4410,-4356,-3807,-4373,-4403,-4537,-4582,-4967,-4823,-5457,-4839,-5013,-2934,-3192,-3431,-3895,-4019,-3938,-4007,-4084,-4295,-4884,-3980,-3933,-4931,-4600,-4578,-4641,-4603,-4787,-4832,-5484,-5439,-3678,-1730,-3105,-149,-2897,-2909,-2870,-3893,-4317,-4837,-3969,-4250,-4847,-4032,-4384,-4791,-4632,-4772,-5041,-5699,-5314,-3724,-2147,-3184,-1734,-2490,-2581,-2737],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
