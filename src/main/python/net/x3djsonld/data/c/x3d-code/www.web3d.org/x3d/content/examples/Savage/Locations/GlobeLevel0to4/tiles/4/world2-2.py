###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4451,-4442,-4132,-4391,-4418,-4147,-4174,-4197,-4233,-4098,-4143,-4245,-3198,-4318,-4342,-4287,-4223,-4322,-4488,-4504,-4386,-4251,-4527,-4531,-4456,-4502,-4351,-4287,-4305,-4382,-4308,-4324,-4053,-4362,-4324,-4369,-4175,-4457,-4472,-4491,-4529,-4544,-4437,-4462,-4600,-4607,-4599,-4556,-4511,-4464,-4506,-4538,-4553,-4625,-4359,-4462,-4418,-4603,-4414,-4574,-4585,-4619,-4696,-4732,-4668,-4707,-4607,-4668,-4659,-4704,-4669,-4647,-4584,-4666,-4524,-4519,-4489,-4594,-4638,-4624,-4713,-4754,-4730,-4737,-4754,-4802,-4834,-4796,-4526,-4562,-4839,-4743,-4743,-4727,-4740,-4606,-4705,-4726,-4741,-4687,-4744,-4757,-4796,-4884,-4873,-4847,-4827,-4848,-4841,-4853,-4537,-4764,-4686,-4728,-4764,-4765,-4803,-4762,-4783,-4816,-4833,-4799,-4836,-4876,-4932,-4921,-4919,-4900,-4943,-4910,-4911,-4928,-4727,-4663,-4771,-4739,-4787,-4843,-4831,-4866,-4868,-4898,-4910,-4863,-4905,-4949,-4975,-4994,-4998,-4939,-4939,-4970,-4996,-4984,-4539,-4713,-4805,-4605,-4762,-4780,-4909,-5079,-5002,-4948,-4971,-4951,-4967,-4981,-5011,-4990,-4970,-4967,-4985,-4993,-5022,-5092,-4840,-4514,-4765,-4792,-4713,-4638,-4942,-4996,-5019,-5044,-5076,-5045,-5010,-5009,-5011,-4994,-4998,-5025,-5119,-5129,-5155,-5129,-4563,-4383,-4823,-4362,-4760,-4906,-4633,-4919,-5014,-5050,-5105,-5058,-5021,-5024,-5033,-5028,-5024,-5082,-5088,-5150,-5129,-5127,-4964,-4715,-4627,-4950,-4892,-4778,-4871,-4732,-4895,-4960,-5019,-5102,-5026,-4985,-5028,-5022,-4969,-5059,-5105,-5168,-5145,-5120,-4710,-4596,-4810,-4853,-4855,-4795,-4855,-4835,-4962,-5102,-5019,-5095,-5029,-4988,-4977,-4780,-4992,-5135,-5133,-5170,-5153,-5181,-4225,-4609,-4797,-4582,-4770,-4643,-4731,-4969,-4981,-4957,-4659,-5141,-5089,-5052,-4432,-5055,-4957,-4933,-5106,-4983,-5161,-5159,-4442,-4516,-4699,-4548,-4503,-4474,-4472,-4134,-4653,-4984,-5116,-5113,-5026,-4656,-4965,-4963,-5240,-5069,-5027,-5035,-5009,-5094,-4393,-4598,-4499,-4498,-4358,-3933,-4420,-4435,-4502,-5118,-5277,-4817,-4661,-4512,-4917,-5056,-4982,-4921,-5087,-5099,-5089,-5117,-4183,-4287,-4335,-4382,-3977,-4340,-4352,-4301,-4746,-4968,-4349,-4632,-4796,-4482,-4796,-4979,-4860,-4919,-5030,-5150,-5212,-5135,-4089,-4114,-4319,-4240,-4320,-4325,-4508,-4389,-4091,-4246,-4522,-4661,-4467,-4919,-4897,-4586,-4857,-4999,-5035,-5066,-5025,-5153,-3892,-3678,-4091,-4369,-4484,-4562,-3794,-4116,-4391,-4417,-4486,-4590,-4510,-4554,-4716,-4930,-5045,-4766,-5001,-5108,-5232,-5153,-4007,-3936,-4558,-5204,-3324,-3902,-4074,-4078,-4413,-4290,-4422,-4502,-4592,-4587,-4688,-4717,-4782,-4992,-4743,-5221,-5140,-5186,-4272,-3527,-3418,-3508,-3691,-3644,-3827,-3939,-3947,-3964,-4444,-4421,-4687,-4699,-4438,-4530,-4582,-4812,-4818,-4966,-5513,-4538,-3660,-3375,-3297,-3658,-3632,-3616,-3411,-4058,-3791,-4045,-4219,-4267,-4471,-4367,-4877,-4580,-4685,-4570,-4898,-4488,-4358,-4630,-3346,-3541,-3417,-3468,-3493,-3724,-3709,-3940,-4091,-4036,-4123,-4353,-4068,-4674,-4132,-4581,-4836,-4613,-4240,-4952,-4898,-4286,-3340,-3259,-3372,-3381,-3515,-3652,-3897,-4093,-4084,-4032,-3994,-4186,-4359,-5311,-4262,-4303,-4144,-4045,-3910,-3917,-3756,-4061,-3306,-3373,-3282,-3102,-3501,-3663,-3851,-3972,-3969,-3932,-4116,-3779,-4648,-4792,-3964,-4225,-3898,-3866,-3912,-3825,-3724,-3984],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
