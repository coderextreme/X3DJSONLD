###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4310,-4249,-4066,-3833,-3708,-3836,-3613,-3867,-3428,-2163,-673,-1004,-2934,-2780,-2143,-3752,-3228,-2520,-1342,-182,-60,-3,-4513,-4443,-4463,-4333,-4071,-3825,-3864,-4023,-3804,-3601,-1182,-1218,-3671,-3502,-4018,-4208,-3776,-2681,-3101,-2736,-2006,-395,-4606,-4647,-4641,-4574,-4349,-4378,-4176,-4214,-4081,-4025,-2337,-1318,-3978,-4341,-4294,-4333,-4220,-4213,-4091,-3310,-2340,-2160,-4553,-4717,-4700,-4654,-4533,-4509,-4449,-4350,-4290,-4083,-3244,-1277,-3326,-4434,-4714,-4583,-4528,-4493,-3994,-3357,-3312,-2842,-4703,-4746,-4796,-4798,-4708,-4765,-4783,-4716,-4610,-4360,-2658,-1316,-3433,-4355,-4691,-4728,-4718,-4606,-4462,-4059,-3606,-3249,-4835,-4786,-4899,-4962,-4908,-4891,-4865,-4839,-4845,-4509,-3791,-3272,-3251,-4236,-4699,-4798,-4726,-4625,-4515,-4371,-4043,-4025,-4919,-4902,-4981,-5031,-5016,-5022,-5005,-4966,-4966,-4720,-4165,-2938,-3904,-4491,-4826,-4853,-4826,-4698,-4442,-4293,-4305,-4155,-4984,-4971,-5004,-5034,-5064,-5156,-5104,-5058,-5019,-4981,-4801,-4880,-4952,-4919,-4849,-4909,-4866,-4736,-4512,-4482,-4341,-4253,-5025,-5047,-5036,-5104,-5113,-5223,-5135,-5088,-5092,-5079,-4980,-4988,-5043,-5084,-4979,-4963,-4899,-4812,-4638,-4666,-4655,-4579,-5108,-5050,-5077,-5107,-5150,-5138,-5148,-5157,-5137,-5092,-5061,-5066,-5014,-5037,-5015,-5033,-4986,-4917,-4860,-4906,-4790,-4751,-5072,-5096,-5119,-5107,-5107,-5126,-5153,-5157,-5137,-5105,-5108,-5105,-5072,-5073,-5061,-5049,-5019,-5006,-5001,-5034,-4898,-4843,-5117,-5142,-5137,-5140,-5135,-5154,-5178,-5183,-5171,-5126,-5133,-5126,-5120,-5136,-5129,-5114,-5087,-5089,-5078,-5097,-5043,-4966,-5201,-5160,-5166,-5192,-5185,-5168,-5202,-5212,-5192,-5137,-5166,-5158,-5158,-5176,-5159,-5193,-5185,-5174,-5200,-5173,-5139,-5098,-5401,-5184,-5115,-5198,-5218,-5223,-5247,-5246,-5229,-5196,-5166,-5187,-5194,-5218,-5231,-5242,-5250,-5244,-5241,-5226,-5219,-5205,-5218,-5466,-5082,-5213,-5278,-5229,-5257,-5289,-5262,-5214,-5202,-5201,-5232,-5247,-5245,-5263,-5283,-5259,-5267,-5259,-5254,-5248,-5314,-5181,-5230,-5304,-5222,-5255,-5262,-5271,-5226,-5244,-5227,-5220,-5256,-5269,-5244,-5269,-5276,-5281,-5284,-5273,-5256,-5273,-5170,-5101,-5211,-5218,-5318,-5284,-5290,-5266,-5179,-5272,-5278,-5249,-5259,-5267,-5274,-5289,-5308,-5300,-5296,-5238,-5307,-5287,-5191,-5448,-4955,-5030,-5288,-5365,-5341,-5326,-5287,-5321,-5292,-5274,-5278,-5297,-5303,-5318,-5316,-5283,-5270,-5292,-5322,-5304,-5169,-5367,-5416,-4374,-5220,-5387,-5368,-5362,-5354,-5360,-5316,-5296,-5316,-5333,-5309,-5299,-5313,-5218,-5221,-5302,-5302,-5321,-4824,-5303,-5278,-5290,-5450,-5484,-5445,-5415,-5390,-5381,-5341,-5317,-5363,-5384,-5331,-5236,-5227,-5187,-5022,-5173,-5224,-5281,-4595,-5301,-5099,-5272,-5388,-5328,-5377,-5427,-5430,-5431,-5382,-5368,-5393,-5372,-5273,-5143,-5220,-5311,-5111,-5128,-5161,-5222,-4596,-4996,-4379,-5165,-5242,-5396,-5410,-5414,-5449,-5454,-5453,-5424,-5409,-5378,-5216,-5008,-5249,-5310,-5245,-5222,-5174,-5168,-5029,-4309,-4405,-5153,-5383,-5476,-5446,-5443,-5441,-5490,-5484,-5393,-5339,-5384,-5345,-4896,-5281,-5352,-5172,-5080,-5102,-5025,-4788,-4061,-4456,-5055,-5466,-5322,-5437,-5423,-5449,-5467,-5488,-5444,-5301,-5351,-5344,-5061,-5223,-5342,-5121,-5087,-4992,-4956],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
