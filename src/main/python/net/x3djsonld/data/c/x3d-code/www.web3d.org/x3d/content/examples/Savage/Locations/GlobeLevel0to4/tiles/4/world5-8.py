###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-8.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4621,-4378,-4923,-4920,-5072,-5226,-5239,-5269,-5156,-5030,-5020,-4950,-4812,-4789,-4531,-4359,-3523,-1217,-148,84,-27,-14,-4331,-4457,-4752,-4922,-4947,-5197,-5235,-5267,-5249,-5022,-5002,-4895,-4727,-4502,-4419,-4085,-3214,-302,25,904,147,21,-1962,-4586,-4585,-4599,-5074,-5070,-5215,-5113,-5136,-5053,-4944,-4786,-4609,-4345,-4188,-3765,-1943,-193,413,1176,509,254,-3140,-4528,-2857,-3714,-5023,-4986,-5303,-5209,-5221,-5064,-5003,-4767,-4374,-3953,-3806,-3364,-1132,-157,47,600,825,569,-2483,-4088,-3426,-4783,-4583,-4920,-5100,-5094,-4984,-5058,-5028,-4666,-4207,-3716,-3471,-2360,-396,-138,121,467,1514,671,-4453,-3792,-4335,-4443,-4683,-5163,-5131,-4961,-4982,-4967,-5117,-4605,-4086,-3478,-2931,-1831,-370,-121,102,489,1318,1444,-3083,-4600,-4455,-1903,-4700,-5021,-5172,-5072,-4629,-4954,-4906,-4337,-3954,-3343,-2865,-972,-311,-135,176,1069,1191,1250,-3527,-4416,-4446,-2263,-4933,-4975,-5187,-5173,-4941,-4794,-4853,-4656,-3843,-3192,-2432,-615,-248,51,250,1020,1222,1270,-4743,-2633,-4272,-2841,-5045,-4918,-5115,-5169,-5172,-4959,-4870,-4416,-3906,-3036,-1832,-254,-220,240,815,948,968,1017,-4712,-2498,-3300,-1517,-4685,-4985,-5200,-5222,-5131,-4990,-4833,-4343,-3814,-3003,-789,-221,-219,691,941,926,896,962,-4576,-4093,-3816,-2390,-4874,-5086,-4984,-5176,-5121,-5009,-4900,-4157,-3699,-2766,-584,-188,-142,788,1003,958,938,1031,-4338,-4485,-3618,-2842,-5096,-5120,-4987,-5249,-4862,-5194,-4879,-4269,-3748,-2655,-407,-199,-61,848,976,1014,952,1023,-4507,-4526,-4308,-3395,-4584,-5220,-4976,-5076,-4915,-5246,-4832,-4512,-3829,-2602,-220,-176,166,731,895,769,840,847,-4625,-4650,-4602,-3692,-3979,-4918,-4763,-5031,-5059,-5009,-4872,-4585,-3946,-2579,-442,-60,430,477,940,854,877,1058,-4784,-4770,-4553,-3867,-2867,-4403,-4884,-5138,-4866,-5105,-4877,-4648,-3975,-2379,-465,188,967,772,1232,809,892,991,-5196,-4945,-4706,-4501,-2336,-3489,-4884,-5131,-4929,-4873,-4791,-4544,-3766,-1842,-336,514,1506,722,1384,885,892,933,-5248,-4638,-4531,-4593,-3037,-2204,-4233,-5115,-5006,-4869,-4644,-4452,-3552,-1299,-284,535,1503,815,956,954,919,970,-5101,-5129,-5160,-5040,-4341,-2960,-1507,-4217,-4761,-4757,-4652,-4285,-3391,-1002,-200,693,1604,932,1032,967,937,979,-5349,-5233,-5234,-5260,-4675,-3851,-965,-3947,-4744,-4718,-4519,-4291,-3328,-860,-146,918,1634,978,1070,1003,969,999,-4744,-5147,-5436,-5344,-5101,-4521,-1225,-2897,-4731,-4686,-4375,-4049,-3106,-900,-104,951,1424,1047,1108,1050,1017,1052,-5156,-5264,-5103,-5207,-5022,-3603,-1647,-2648,-4721,-4654,-4255,-3952,-2921,-510,-34,840,1395,1178,1154,1106,1074,1104,-5049,-5438,-4906,-5276,-5005,-3102,-1568,-3039,-4724,-4639,-4147,-3575,-2566,-323,3,819,1410,1223,1206,1185,1143,1125,-5448,-5383,-5197,-5336,-4361,-2955,-1506,-2987,-4284,-4476,-4239,-3415,-2161,-249,27,641,1607,1286,1265,1252,1200,1177,-5181,-5454,-5293,-4945,-4479,-2854,-1904,-2981,-3744,-4581,-4187,-3446,-2104,-250,76,760,1637,1313,1283,1269,1213,1179],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
