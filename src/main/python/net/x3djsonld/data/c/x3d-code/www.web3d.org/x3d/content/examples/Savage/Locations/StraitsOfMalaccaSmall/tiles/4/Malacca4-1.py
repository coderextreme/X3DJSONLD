###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca4-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.7987358796286328,99.20606251983018,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[677,795,788,854,901,931,851,864,947,1312,1371,1201,1065,997,890,960,1090,1325,916,583,540,583,748,846,852,848,1028,954,874,891,940,1082,1168,1140,1029,984,985,856,1295,1249,1031,1039,1117,615,782,846,845,877,1193,937,879,877,905,1092,1202,1171,1117,1032,1000,988,1140,1367,1048,645,625,622,894,869,876,1037,1166,922,933,910,923,1069,1190,1139,1103,1138,1078,1156,1079,1331,859,567,404,409,1041,1136,1160,1341,1222,1010,942,921,912,1043,1146,1121,1140,1220,1156,1215,737,1140,853,853,757,523,1367,1300,1366,1174,1182,963,952,943,985,1131,1134,1050,863,1063,1366,925,542,734,496,712,764,776,1469,1372,1281,1220,1112,985,955,958,1003,1038,1215,1224,829,802,1119,923,337,593,400,663,764,717,1381,1290,1235,1148,1041,1008,1036,1206,1014,1066,1129,842,1005,855,1042,647,347,429,295,445,666,705,1265,1231,1166,1112,1059,1005,1018,1040,961,1068,1223,884,728,484,520,481,449,375,288,579,722,770,1194,1187,1143,1104,1073,1014,938,970,868,1020,789,728,705,550,490,419,400,348,319,550,595,703,1193,1184,1138,1098,1166,1015,950,901,852,728,691,673,619,551,490,463,417,360,289,446,455,133,1199,1183,1179,1296,949,882,904,900,879,759,722,661,615,579,557,494,379,500,577,249,333,105,1222,1261,1125,1142,1032,951,921,889,813,792,741,696,648,578,556,503,583,687,529,660,785,248,1359,1271,1213,976,947,954,900,902,835,777,716,639,600,518,536,668,784,891,253,911,928,895,1157,1154,1117,971,939,926,869,840,808,781,729,699,629,603,546,811,992,615,398,1191,865,534,1095,1070,1002,983,951,917,864,844,812,768,721,652,699,752,613,933,1273,419,903,1098,530,212,1126,1054,1032,1003,937,914,901,846,832,736,804,921,890,632,781,1007,1134,853,1317,641,529,222,1078,1073,1050,1022,979,942,929,828,837,843,749,1263,984,704,923,1408,619,820,786,362,303,323,1055,1067,1028,1006,1001,917,884,860,874,869,834,1211,768,624,1329,1462,875,1629,1262,723,323,386,1222,1153,1068,1004,959,965,904,896,892,1020,1153,1447,1057,1037,985,1862,1328,1301,1101,626,623,348,1525,1438,1133,1108,1019,988,929,921,916,1161,1266,1460,1077,1171,1401,1474,1743,1361,1174,1159,789,388,1490,1333,1178,1135,1095,981,913,1043,986,1282,1329,1489,1409,1200,1210,928,1145,1705,1086,914,1076,770,1471,1354,1179,1131,1097,1007,909,1059,988,1308,1275,1447,1337,1235,1226,927,1096,1670,1111,871,1098,804],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
