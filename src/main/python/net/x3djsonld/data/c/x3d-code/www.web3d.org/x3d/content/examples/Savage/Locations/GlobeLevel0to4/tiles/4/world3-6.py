###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3750,-3660,-3720,-3930,-3521,-3198,-2784,-2868,-3553,-3925,-3319,-3200,-3222,-3281,-3046,-3132,-2444,-330,-3247,-6493,-5561,-3677,-4024,-3358,-3048,-3938,-3220,-2663,-3213,-3228,-3293,-3608,-3545,-3208,-3197,-3170,-3202,-3147,-2594,-1528,-5239,-8117,-4406,-4111,-3781,-3421,-2786,-3135,-3460,-2982,-2870,-3542,-3191,-2402,-2812,-3263,-3173,-3343,-3132,-3210,-1388,-1922,-6825,-5537,-3910,-3989,-4013,-3649,-3100,-3379,-3151,-3327,-3276,-3509,-2551,-92,-741,-3167,-2344,-3151,-4147,-5819,-5318,-7299,-6904,-4481,-3884,-4000,-3372,-3200,-3811,-3942,-3287,-2996,-2854,-510,-210,-3,-856,-4179,-5883,-6022,-6544,-6350,-6513,-6168,-5040,-4431,-4165,-4031,-3466,-2916,-3012,-2550,-2230,-2149,-723,-147,397,-212,-3789,-3827,-4349,-4768,-4920,-5029,-5395,-5462,-5106,-4512,-4470,-2883,-3713,-2741,-2811,-1007,-192,-1552,-244,-147,-193,-1335,-3675,-2371,-3152,-3823,-4211,-4458,-4756,-4887,-5081,-4663,-4219,-4435,-1896,-1026,-1474,-932,-2323,-4108,-3726,-3171,-2460,-3313,-3499,-2650,-3170,-3498,-3465,-3871,-4419,-4527,-4773,-4048,-4424,-4109,-3378,-3128,-2964,-2638,-3752,-3739,-3702,-3103,-2094,-3725,-3758,-3370,-3004,-3641,-3717,-3185,-4569,-4770,-4490,-4348,-4559,-4393,-3336,-3184,-3241,-3453,-3785,-3756,-3639,-3421,-2831,-4162,-3914,-2523,-2474,-3380,-2958,-3089,-4414,-4590,-2871,-4167,-4695,-4488,-2684,-2658,-2725,-2148,-3661,-3756,-3709,-3927,-4317,-4653,-4548,-1877,-2406,-3418,-3239,-3663,-4734,-3778,-2727,-3555,-4328,-4666,-2681,-2644,-1626,-1986,-2870,-3820,-4005,-4707,-4581,-4805,-4891,-2207,-3711,-3915,-4151,-4580,-4905,-3915,-3186,-3335,-4621,-4707,-1638,-1439,-1374,-1664,-2277,-3745,-4468,-4985,-4985,-2979,-4730,-4375,-4492,-4388,-4551,-4882,-5096,-3739,-3031,-4320,-4462,-4467,-2553,-1754,-1674,-1318,-1673,-2768,-4520,-5114,-4914,-4354,-4922,-4673,-4871,-4895,-4902,-4744,-5360,-3154,-4403,-4403,-4699,-4502,-3384,-3103,-2190,-2112,-1928,-2551,-4591,-5105,-5146,-5037,-5279,-5219,-5165,-5120,-4894,-4940,-4306,-4603,-4684,-4564,-4642,-4502,-5812,-5586,-5257,-4996,-5338,-5223,-5325,-4439,-4513,-5024,-5278,-5247,-5279,-5357,-5114,-5188,-3591,-4480,-4551,-4630,-4589,-4337,-5758,-6036,-5807,-5522,-5562,-5366,-5298,-5431,-5098,-4926,-4685,-4533,-3467,-3269,-5061,-3431,-3907,-4633,-4553,-4549,-4460,-4495,-6064,-5741,-6030,-5808,-5749,-5753,-5659,-5636,-5542,-5289,-5194,-5107,-4750,-4919,-4679,-4536,-4162,-4478,-4492,-4350,-4466,-4323,-5971,-5575,-5704,-5878,-5859,-5522,-5765,-5888,-5981,-5607,-5432,-5512,-5503,-4961,-5029,-4718,-4765,-4632,-4543,-4330,-4445,-4514,-5945,-5479,-5647,-5990,-5900,-5448,-5772,-5876,-5947,-5797,-5609,-5457,-5318,-4975,-5039,-4626,-4753,-4628,-4286,-4334,-4327,-4269,-5729,-5369,-5519,-5792,-5767,-5610,-5590,-5721,-5812,-5871,-5549,-5380,-5239,-5188,-4903,-4835,-4814,-4709,-4443,-4462,-4430,-4312,-5334,-5007,-5385,-5566,-5563,-5502,-5329,-5546,-5594,-5692,-5684,-5332,-5357,-5272,-4959,-4864,-4787,-4612,-4819,-4336,-4338,-4246,-5230,-5054,-5292,-5416,-5413,-5414,-5352,-5379,-5418,-5589,-5675,-5293,-5254,-5052,-4863,-4764,-4604,-4514,-4565,-4325,-4526,-4330,-5220,-5092,-5281,-5381,-5439,-5364,-5328,-5375,-5410,-5571,-5655,-5324,-5234,-5056,-5020,-4767,-4633,-4558,-4725,-4245,-4614,-4257],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
