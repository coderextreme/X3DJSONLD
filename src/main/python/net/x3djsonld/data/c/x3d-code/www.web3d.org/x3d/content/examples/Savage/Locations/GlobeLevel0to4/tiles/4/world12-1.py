###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world12-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(44.95833735661353,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5192,-5321,-5027,-5062,-4970,-5206,-5163,-5124,-5056,-4938,-4813,-4290,-4344,-4388,-4277,-4391,-4264,-4031,-4140,-4118,-4060,-3920,-5334,-5141,-5533,-5391,-5282,-4590,-5140,-5146,-5145,-5045,-4965,-4634,-4636,-4430,-4393,-4323,-4367,-4188,-4174,-4086,-4000,-3986,-5081,-5332,-5359,-5465,-5416,-4869,-5239,-5147,-5162,-5080,-5001,-4786,-4730,-4315,-4305,-4362,-4318,-4269,-4097,-4107,-3829,-3960,-5323,-5302,-5401,-5298,-5300,-5139,-5344,-5220,-5118,-5051,-4979,-4848,-4623,-4739,-4459,-4258,-4392,-4280,-4215,-4097,-4053,-3938,-5252,-5236,-5364,-5346,-5284,-5299,-5219,-5168,-5139,-5015,-4984,-4804,-4726,-4575,-4492,-4478,-4392,-4298,-4256,-4170,-4151,-3877,-5213,-5234,-5208,-5275,-5178,-5257,-5233,-5231,-5136,-5022,-4917,-4804,-4696,-4675,-4562,-4460,-4400,-4340,-4290,-4229,-4176,-4100,-5255,-5296,-5279,-5200,-5257,-5230,-5161,-5180,-4710,-5028,-4863,-4789,-4713,-4638,-4540,-4452,-4375,-4316,-4281,-4251,-4195,-4018,-5123,-5115,-5219,-5328,-5046,-5259,-5138,-5154,-5033,-4987,-4829,-4822,-4740,-4677,-4479,-4441,-4349,-4284,-4210,-4223,-4097,-4098,-5115,-5089,-5225,-5236,-5265,-5052,-5470,-5130,-5014,-4937,-4896,-4818,-4747,-4585,-4495,-4402,-4331,-4215,-4175,-4155,-4140,-3992,-4437,-5084,-5176,-5094,-5176,-5068,-4895,-4924,-4961,-4846,-4828,-4769,-4694,-4209,-4444,-4379,-4266,-4190,-4106,-4078,-4085,-4042,-5208,-5178,-5086,-5068,-4775,-4717,-4578,-4645,-4701,-4754,-4636,-4493,-4493,-4442,-4404,-4310,-4222,-4176,-4093,-4002,-3814,-3617,-5090,-5019,-4709,-4997,-4961,-5081,-4832,-4826,-4763,-4693,-4664,-4503,-4378,-4384,-4324,-4229,-4098,-3890,-4046,-4032,-3931,-3891,-4777,-5032,-4857,-4979,-4776,-4885,-4867,-4797,-4188,-4682,-4408,-4464,-4182,-4249,-4038,-4095,-4029,-3718,-4028,-3847,-3934,-3904,-4730,-4865,-4891,-4845,-4952,-4092,-4951,-4823,-4730,-4824,-4481,-4120,-4156,-4137,-3903,-4054,-3960,-3648,-4036,-3219,-3736,-3735,-4957,-4864,-4768,-4745,-4902,-4884,-4858,-4858,-4164,-4499,-4358,-4255,-4190,-4243,-4025,-4039,-3866,-3904,-3923,-3858,-3592,-3499,-4787,-4891,-4709,-4769,-4878,-5108,-4841,-4935,-4722,-4537,-4395,-4272,-4272,-4010,-3868,-2969,-3781,-3806,-3833,-3159,-3783,-3609,-4827,-4829,-4753,-4735,-4869,-4923,-4976,-4793,-4606,-4442,-4318,-4273,-4188,-3561,-3947,-3929,-3708,-3439,-3007,-3638,-3757,-3554,-4825,-4716,-4689,-4515,-4632,-4843,-4689,-4687,-4497,-4418,-4392,-4263,-4010,-3568,-3818,-3696,-2907,-3578,-3643,-3629,-3630,-3478,-4623,-4630,-4532,-4552,-4671,-4771,-4777,-4063,-4200,-4240,-4266,-4176,-3683,-3551,-3808,-3710,-3707,-3706,-3591,-3596,-3552,-3501,-4676,-4522,-4419,-4559,-4435,-4451,-4276,-3681,-4046,-4029,-4507,-4215,-4097,-3924,-3823,-3770,-3659,-3679,-3428,-3456,-3587,-3300,-4651,-4432,-4283,-4427,-4598,-4456,-4559,-4222,-4399,-4334,-4108,-4108,-3962,-3852,-3827,-3767,-3608,-3600,-3412,-3441,-3459,-2775,-4636,-4639,-4454,-4473,-4587,-4499,-4591,-4450,-4182,-4018,-4135,-4074,-3476,-3598,-3827,-3712,-3584,-3526,-3313,-3304,-2384,-2915,-5676,-5053,-4567,-4573,-4586,-4456,-4383,-4115,-3596,-3768,-3989,-4077,-3527,-3805,-3810,-3756,-3432,-3434,-3234,-3168,-2843,-2636,-5732,-5260,-4618,-4588,-4526,-4386,-4231,-3925,-3583,-2919,-3917,-4079,-3859,-3880,-3796,-3755,-3453,-3382,-3310,-3225,-2729,-2668],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
