###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.61856206825804,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[23,23,23,23,23,19,14,6,0,-4,-8,-8,-7,-6,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-4,-3,-2,0,0,23,23,23,23,23,22,21,14,6,0,-5,-5,-4,-2,-1,-1,-1,-1,-3,-4,-4,-5,-5,-5,-5,-5,-5,-5,-5,-5,-4,-3,-1,0,0,1,23,23,23,23,23,23,24,19,13,6,1,0,1,2,3,3,3,2,0,-2,-4,-4,-5,-5,-5,-5,-5,-5,-5,-4,-3,-1,0,0,1,1,23,23,23,23,23,23,23,21,18,14,9,8,8,8,9,9,9,6,2,0,-2,-4,-4,-5,-5,-5,-5,-5,-4,-3,-1,0,0,1,2,2,23,23,23,22,21,21,20,19,19,16,13,13,12,12,12,12,11,9,6,2,0,-2,-4,-5,-5,-5,-5,-4,-3,-2,0,1,1,2,2,3,23,23,22,21,19,17,16,16,16,15,13,13,13,12,12,12,12,11,9,6,2,0,-3,-5,-6,-5,-5,-4,-2,0,0,1,2,2,3,3,23,22,21,19,17,15,14,14,15,13,12,12,12,12,12,12,12,12,11,9,6,2,-1,-3,-5,-6,-6,-5,-2,0,0,1,2,3,3,4,22,21,19,17,15,14,14,14,14,12,10,11,11,12,12,12,12,12,12,11,9,6,2,-1,-5,-7,-8,-8,-5,-1,0,1,2,2,3,4,21,19,17,15,14,14,14,13,12,11,9,9,11,11,12,12,12,12,12,12,11,9,5,1,-2,-6,-9,-9,-7,-4,-2,0,1,2,3,4,19,17,15,14,14,14,14,12,10,8,6,7,9,11,11,12,12,12,12,12,12,11,9,6,1,-2,-7,-9,-9,-8,-5,-2,0,1,2,4,17,15,14,14,14,13,12,10,7,6,5,6,9,10,11,12,12,12,12,12,12,12,11,9,5,1,-3,-7,-9,-10,-8,-5,-2,0,1,3,15,14,14,14,14,12,10,7,5,5,5,7,10,11,11,12,12,12,12,12,12,12,12,11,9,6,1,-2,-7,-9,-10,-8,-5,-1,0,1,14,14,14,13,12,10,7,6,5,5,6,9,13,13,12,12,12,12,12,12,12,12,12,12,11,9,5,1,-4,-8,-9,-9,-7,-4,-1,0,14,14,13,11,10,7,5,5,5,7,10,13,18,16,12,11,11,12,12,12,12,12,12,12,12,10,8,5,0,-3,-7,-9,-9,-7,-4,-1,14,13,12,10,7,6,5,5,6,9,13,17,20,17,13,11,11,12,12,12,12,12,12,12,12,11,10,8,4,0,-4,-8,-10,-9,-7,-3,13,11,10,8,5,5,5,7,10,13,17,19,19,16,12,11,11,11,11,12,12,12,12,12,12,12,11,10,7,3,0,-5,-8,-10,-9,-7,12,10,7,6,5,5,6,9,13,17,19,19,17,15,12,11,11,11,11,11,12,12,12,12,12,12,12,11,9,7,2,-1,-5,-9,-10,-9,9,8,5,5,5,7,10,13,17,19,19,18,16,14,11,10,10,11,11,11,11,12,12,12,12,12,12,11,11,9,5,1,-3,-8,-10,-10,7,6,5,5,6,9,13,17,19,19,17,16,14,12,9,9,9,10,10,10,11,11,11,11,12,12,12,12,12,10,8,3,-1,-7,-11,-13,6,5,5,7,10,13,17,19,19,18,16,14,11,9,7,7,7,8,9,10,10,10,10,11,11,11,12,12,12,11,10,6,0,-6,-13,-19,5,5,7,10,13,17,19,19,17,16,14,12,8,6,5,5,6,7,9,9,9,9,10,10,10,11,12,12,12,11,11,8,0,-8,-17,-22,5,7,10,13,17,19,19,18,16,14,11,9,6,5,5,5,5,6,7,8,8,9,9,9,10,10,10,11,11,12,10,5,-4,-15,-21,-22,7,10,13,17,19,19,17,16,14,12,8,6,5,5,5,5,5,6,6,7,8,8,8,9,9,9,9,10,10,10,9,3,-8,-19,-22,-21],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
