###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2960,-2700,-3252,-3644,-3682,-4526,-2482,-2811,-4569,-4818,-4841,-4831,-4952,-4815,-4751,-4690,-4693,-4691,-4652,-4729,-4638,-2865,-3711,-3000,-3282,-4037,-4180,-4725,-1550,-2895,-4430,-4698,-4812,-4812,-4771,-4627,-4713,-4656,-4615,-4623,-4680,-4626,-4654,-2933,-3184,-3247,-3445,-3713,-3834,-3995,-2050,-2798,-4338,-4541,-4776,-4751,-4751,-4709,-4592,-4324,-4555,-4575,-4558,-4560,-4490,-4150,-2879,-3209,-3916,-3916,-3884,-4177,-1227,-2567,-4259,-4533,-4743,-4800,-4705,-4639,-4587,-4437,-4565,-4537,-4535,-4536,-4503,-4318,-3057,-3867,-3405,-3889,-4141,-4089,-62,-2468,-3832,-4308,-4724,-4745,-4696,-4585,-4540,-4208,-4507,-4503,-4499,-4518,-4437,-4091,-3612,-3402,-3827,-3950,-4180,-3983,-2024,-2559,-3346,-4228,-4525,-4629,-4557,-4551,-4497,-4416,-4505,-4460,-4480,-4432,-4407,-3893,-2913,-3159,-3485,-3975,-3969,-3971,-1784,-2432,-3193,-4054,-4476,-4535,-4458,-4518,-4438,-4388,-4422,-4407,-4377,-4384,-4305,-3631,-1823,-4005,-3848,-4128,-4096,-3802,-1,-2271,-3070,-3969,-4312,-3842,-4411,-4469,-4392,-4378,-4381,-4354,-4037,-4311,-3943,-2891,-2241,-3691,-3814,-3973,-4088,-3763,-449,-2389,-2981,-3843,-4208,-3536,-4311,-4422,-4357,-4315,-4339,-4246,-4245,-4258,-4249,-3452,-3094,-3378,-3553,-4028,-4080,-3673,-16,-2443,-2841,-3696,-3766,-3321,-4242,-4364,-4321,-4261,-4251,-4235,-4199,-4202,-4186,-3850,-3487,-3431,-3755,-3855,-4141,-3764,-158,-2500,-2735,-3348,-3398,-3387,-4431,-4358,-4281,-4232,-4190,-4053,-4080,-4165,-4108,-3762,-3613,-3570,-3756,-4021,-4109,-3789,-340,-2539,-2590,-3121,-3131,-3734,-4285,-4342,-4234,-4207,-4166,-4050,-4088,-4091,-4143,-3470,-3995,-3468,-3899,-3967,-4069,-3607,-504,-2502,-2168,-2945,-3005,-3939,-4135,-4323,-4270,-4147,-4094,-4090,-4027,-4029,-4006,-4008,-3515,-3980,-3997,-3957,-4048,-3248,-2,-2531,-2399,-2800,-2759,-3904,-4175,-4283,-4188,-4092,-4058,-4040,-3990,-4004,-3957,-3411,-4223,-4082,-4548,-4285,-3996,-2623,-214,-2634,-2612,-2434,-2529,-3540,-3835,-3202,-4094,-4064,-4021,-3993,-3962,-3941,-3898,-3785,-4644,-4452,-4471,-3975,-4018,-2631,-5,-2474,-2539,-2059,-2326,-2832,-2774,130,-1918,-4009,-3971,-3915,-3890,-3892,-3878,-3832,-4672,-4177,-4468,-4637,-4059,-2844,5,-2747,-2582,-1883,-2297,-2558,-1648,682,31,-3960,-3951,-3861,-3826,-3859,-3825,-3733,-4337,-4560,-4712,-4139,-4136,-2995,-1041,-2747,-2330,-1675,-235,-2421,-1021,939,16,-3939,-3870,-3836,-3792,-3777,-3720,-3730,-4582,-4665,-4634,-4408,-4077,-2762,-1838,-2804,-2655,-1578,-62,-1662,-900,254,6,-3864,-3862,-3789,-3771,-3715,-3686,-3713,-4605,-4634,-4645,-4613,-4120,-2613,-2061,-2815,-2440,-1037,63,-1391,-619,169,-1504,-3633,-3763,-3762,-3723,-3648,-3644,-3581,-4567,-4546,-4575,-4586,-3914,-3181,-2261,-2732,-2196,-51,74,-432,-321,135,-3661,-3770,-3709,-3697,-3642,-3629,-3566,-3504,-4605,-4508,-4581,-4566,-4108,-2648,-2270,-2745,-1949,-30,191,8,-2,29,-3759,-3694,-3741,-3649,-3635,-3574,-3504,-3455,-4469,-4496,-4528,-4545,-4284,-2295,-1812,-2594,-2359,11,706,62,-4,-77,-3691,-3625,-3633,-3599,-3579,-3527,-3441,-3428,-4470,-4453,-4538,-4554,-3958,-2395,-1872,-2540,-2237,3,717,73,-4,-211,-3658,-3648,-3615,-3592,-3558,-3515,-3428,-3414],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
