###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world15-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(78.7083383624419,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[2493,2585,2604,2648,2613,2562,2518,2500,2494,2465,2423,2371,2379,2414,2313,2218,2161,2219,2328,1783,635,310,2443,2468,2484,2484,2460,2436,2419,2399,2357,2289,2228,2179,2132,2106,2044,2002,1999,1972,1948,1184,592,152,2453,2455,2451,2445,2438,2420,2375,2312,2267,2213,2159,2118,2064,2025,1984,1934,1863,1828,1708,1321,650,290,2460,2454,2445,2439,2435,2401,2344,2291,2251,2191,2140,2063,1980,1918,1849,1778,1673,1484,1295,1107,679,343,2423,2437,2438,2433,2413,2370,2312,2276,2232,2151,2091,2008,1938,1820,1698,1639,1565,1469,1356,1147,1520,904,2315,2382,2435,2430,2399,2351,2306,2281,2235,2154,2093,2028,1972,1870,1797,1697,1602,1500,1373,1371,1331,1060,2179,2227,2275,2274,2284,2254,2216,2179,2142,2110,2035,1973,1839,1725,1592,1437,1351,1220,1059,1034,1029,947,1939,1972,2047,2108,2115,2086,2056,2046,2051,1964,1873,1692,1292,1128,866,770,752,763,764,689,619,614,1568,1661,1844,2003,2016,1861,1730,1602,1448,1355,1228,1058,910,854,846,831,790,675,519,324,298,284,1212,1222,1323,1494,1726,1848,1795,1652,1494,1326,1133,1048,932,904,910,888,824,551,285,800,328,47,772,796,786,903,1199,1489,1627,1533,1333,1124,972,766,589,537,589,638,621,609,609,610,586,366,123,62,369,885,1099,1365,1383,1215,965,766,770,898,-169,66,529,870,609,609,575,529,-9,11,58,2,1,205,118,163,590,544,607,609,581,602,577,503,300,208,508,93,14,1,151,-8,1,1,1,1,614,1,1,8,91,15,7,952,205,179,464,640,489,609,45,146,1,1,-194,-91,19,-10,220,-64,638,1,1,46,16,237,79,186,508,303,1,466,1,27,-151,-188,-289,-280,-274,-248,-212,-190,-155,-117,-103,-100,-97,-89,-103,-105,-123,-175,-202,-215,-321,-651,-1195,-1561,-1393,-1372,-1444,-1512,-1551,-1441,-1233,-953,-563,-411,-342,-315,-351,-415,-652,-830,-928,-990,-804,-762,-938,-1299,-2395,-2418,-2460,-2443,-2414,-2382,-2350,-2261,-2161,-1911,-1540,-1220,-995,-1054,-1185,-1365,-1135,-1005,-1463,-1578,-1598,-1569,-2841,-2607,-2596,-2610,-2506,-2406,-2334,-2302,-2261,-2223,-2072,-1800,-1603,-1383,-1362,-1386,-1556,-1386,-1535,-1800,-1972,-1797,-2999,-2993,-2971,-3008,-3095,-3206,-3190,-2924,-2578,-2638,-2398,-2505,-2917,-3185,-3258,-3323,-3339,-3274,-3388,-3564,-3545,-3577,-2873,-3083,-3328,-3403,-3323,-3178,-3166,-3205,-3251,-3301,-3355,-3416,-3553,-3591,-3703,-3733,-3801,-3840,-3869,-3889,-3850,-3936,-2285,-2799,-3413,-3508,-3412,-3582,-3407,-3457,-3580,-3622,-3686,-3769,-3815,-3874,-3946,-3999,-4022,-4058,-4098,-4134,-4164,-4182,-3302,-3355,-3491,-3528,-3237,-3474,-3630,-3608,-3599,-3614,-3691,-3779,-3826,-3891,-3955,-3995,-4029,-4063,-4100,-4131,-4125,-4153,-3389,-3324,-3479,-3662,-3610,-3617,-3644,-3606,-3594,-3601,-3677,-3772,-3825,-3882,-3937,-3979,-4006,-4027,-4061,-4125,-4185,-4192],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
