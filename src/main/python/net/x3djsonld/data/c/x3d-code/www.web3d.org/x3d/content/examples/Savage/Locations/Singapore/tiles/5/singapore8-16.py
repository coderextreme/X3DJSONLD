###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore8-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2821169622239519,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[39,34,27,23,31,40,33,26,26,29,29,29,27,23,21,19,25,34,40,45,44,40,37,36,32,26,23,21,21,21,20,18,17,17,18,19,32,27,24,22,28,34,31,26,24,24,26,28,26,22,20,18,21,24,31,39,40,38,36,33,29,25,21,19,18,18,17,16,16,16,16,18,26,22,21,21,25,28,27,26,23,20,22,27,25,21,19,18,17,16,23,33,37,36,34,30,26,23,20,17,16,15,14,15,15,15,15,17,23,22,22,22,22,23,23,23,21,20,22,26,24,22,20,19,18,17,22,30,33,33,31,27,24,20,17,17,16,15,14,14,13,13,13,15,21,23,23,23,20,18,19,20,20,21,23,26,25,23,21,21,21,21,24,28,30,30,28,24,21,17,16,16,16,15,14,13,12,11,10,11,20,22,22,22,20,18,19,21,22,24,26,29,27,23,24,25,26,27,29,31,30,27,23,19,17,16,15,14,14,13,12,11,11,10,10,10,20,22,21,21,20,19,20,22,24,26,29,33,29,24,25,28,31,34,35,34,30,25,19,15,14,15,15,13,11,12,11,10,10,10,10,10,23,24,22,20,19,18,19,21,24,28,29,32,28,23,24,27,30,33,35,35,32,27,22,16,14,14,15,13,12,12,12,11,11,10,10,11,27,26,23,20,19,17,18,19,24,28,29,28,26,22,22,23,26,30,32,33,33,30,25,19,15,14,15,14,13,13,13,14,13,12,11,12,28,27,25,23,22,20,19,19,22,26,24,22,20,17,17,19,22,26,27,28,27,26,23,20,17,14,14,14,15,18,19,18,17,14,13,15,27,28,28,27,26,24,22,19,20,22,19,14,12,11,12,14,17,21,22,22,21,19,20,21,19,14,13,15,19,23,25,24,21,18,16,18,26,27,29,30,28,25,22,19,19,19,16,12,11,10,11,11,14,18,19,18,19,19,19,20,18,13,12,15,20,24,27,26,26,25,26,28,24,26,30,32,29,25,22,20,17,15,13,11,11,11,11,9,12,16,16,15,17,20,20,18,16,12,12,15,20,25,28,28,29,33,37,39,20,24,28,31,28,24,21,18,16,13,12,11,11,12,11,10,11,13,14,14,16,19,19,18,15,11,11,15,20,23,27,32,37,40,42,43,15,21,26,29,26,22,19,16,13,10,10,11,12,13,12,11,11,10,12,14,16,18,18,18,16,11,10,14,18,21,27,39,47,47,46,45,15,19,23,26,23,20,18,16,12,9,10,11,12,13,13,12,12,11,13,15,16,17,17,18,17,14,13,14,16,17,23,34,41,41,40,40,15,17,20,22,20,17,17,16,13,9,9,10,11,13,14,15,14,14,14,15,16,16,17,19,20,19,18,15,14,14,18,26,31,30,29,32,15,14,17,19,19,19,19,20,15,9,8,9,11,14,14,14,14,13,13,13,14,15,16,18,20,20,18,15,12,11,14,20,24,23,23,28,13,12,14,16,19,21,23,24,18,11,9,9,11,15,14,13,12,11,11,11,12,14,15,17,18,19,17,14,11,9,11,16,19,17,18,26,14,12,11,12,17,22,23,23,18,12,10,9,12,16,15,14,13,12,11,11,12,15,15,16,17,18,17,15,13,11,12,15,18,17,18,24,14,13,10,8,14,20,20,17,15,11,10,9,13,18,18,16,15,14,13,12,14,16,16,16,16,17,17,16,14,14,15,17,20,21,22,23,12,11,8,5,10,16,16,14,12,10,9,8,13,18,19,18,16,15,14,14,16,17,17,17,17,17,17,15,14,14,15,17,19,22,24,23,9,7,5,5,8,11,13,13,11,8,7,6,11,18,19,17,16,14,15,16,18,19,19,20,19,17,15,13,12,11,12,13,16,20,24,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
