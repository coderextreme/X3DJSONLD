###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4365,-3941,-4090,-3674,-2668,-2121,-3245,-2832,-3705,-3628,-3787,-3891,-3830,-4308,-4203,-3947,-936,-5187,-5443,-5435,-5414,-5358,-4043,-4116,-3940,-3192,-3235,-2957,-3175,-3504,-3437,-3634,-3868,-3812,-4249,-3765,-3569,-3625,-1894,-4258,-4854,-5425,-5418,-5352,-4252,-3763,-4376,-3315,-3827,-1897,-2494,-3124,-3135,-3382,-4029,-2914,-3427,-3578,-3242,-3512,-3268,-4575,-4853,-5230,-5431,-5375,-4690,-3999,-3682,-3930,-3654,-2784,-1856,-3521,-3196,-2722,-3489,-3162,-3362,-3321,-3341,-3067,-4147,-3769,-4614,-4846,-5293,-5410,-4507,-4325,-4452,-3848,-3351,-3904,-3087,-1672,-1969,-2844,-3288,-3419,-3365,-3607,-2516,-3384,-3531,-4363,-5084,-5326,-5277,-5377,-4500,-4449,-3936,-4308,-3511,-2995,-3358,-2923,-2066,-2169,-3043,-3274,-2782,-2619,-2229,-3627,-3563,-4485,-4446,-5500,-5246,-5214,-4236,-3991,-4265,-4127,-3325,-3802,-3351,-3191,-1332,-2423,-2298,-2918,-2474,-2953,-3545,-3518,-2531,-4330,-4242,-4305,-4805,-5052,-4936,-4464,-3923,-3866,-3708,-3891,-3436,-3400,-3355,-2224,-1697,-2806,-2831,-3109,-3134,-3211,-3478,-4018,-4285,-3942,-4887,-5029,-5284,-4647,-4194,-3834,-4261,-3754,-3932,-3545,-3240,-2494,-1632,-1816,-2403,-2936,-3161,-3175,-3390,-3487,-4226,-4337,-4383,-4645,-4843,-4595,-4642,-4280,-3596,-3819,-3782,-3356,-3261,-2707,-2077,-1830,-2628,-2824,-2956,-3490,-3180,-3406,-3904,-3187,-3821,-3954,-5242,-5211,-4444,-4679,-3894,-3846,-3764,-3233,-3601,-3063,-2796,-1838,-1980,-2530,-3034,-3376,-3002,-2432,-3325,-2322,-4843,-4185,-5198,-5004,-4464,-4171,-3974,-4202,-3607,-3694,-3653,-3114,-2756,-1191,-1470,-2049,-2046,-1866,-2352,-2512,-2312,-1610,-3090,-4318,-5302,-5353,-4788,-4449,-4503,-4233,-4131,-3790,-3762,-3474,-2645,-2171,-2057,-1663,-1936,-313,-1687,-2235,-2330,-1417,-3466,-3849,-5225,-5324,-5171,-5127,-4980,-4862,-4690,-4007,-4482,-3479,-3289,-2515,-2184,-1677,-2613,-1630,206,-955,-2576,-3433,-4068,-3887,-4547,-5068,-5044,-5121,-5009,-5120,-5196,-4635,-4505,-4121,-3606,-2940,-2090,-1570,-1950,-1841,-1205,-1558,-2722,-3296,-3762,-3739,-4268,-4567,-4720,-4883,-4830,-4776,-4935,-4649,-4435,-3968,-4005,-3198,-1950,-1271,-1835,-1931,-1643,-1148,-3043,-3562,-4037,-3707,-4412,-4679,-4718,-4979,-5018,-4552,-4749,-4563,-4461,-4263,-4110,-3600,-1996,-2013,-1695,-1846,-1878,-1549,-3084,-3544,-3957,-3872,-4481,-4699,-4779,-4949,-4834,-4583,-4748,-4488,-4394,-4371,-3975,-3512,-2620,-2279,-2028,-1522,-2006,-1987,-2933,-3282,-4091,-4264,-4694,-4828,-4892,-4970,-4663,-4764,-4652,-4496,-4592,-4322,-3988,-3365,-3201,-2229,-2613,-2282,-2712,-2718,-3212,-3489,-3505,-3677,-4797,-4910,-4928,-5029,-4842,-4873,-4678,-4457,-4240,-4335,-4266,-3653,-3104,-2752,-2447,-2478,-2744,-2796,-3292,-3543,-3732,-3926,-4771,-4891,-4918,-4925,-4883,-4862,-4554,-4153,-4357,-4163,-4059,-3862,-3221,-2835,-2701,-2445,-2608,-2953,-3312,-3194,-3736,-3821,-4748,-4879,-4877,-4876,-4865,-4795,-4444,-3792,-4381,-4042,-4070,-3929,-3319,-3113,-2621,-1557,-2526,-3113,-3431,-3327,-3868,-3668,-4916,-4843,-4907,-4845,-4878,-4892,-4362,-3851,-3966,-3949,-3993,-3732,-3217,-2965,-2992,-1846,-2801,-2949,-3404,-3418,-3579,-3360,-4754,-4844,-4864,-4864,-4870,-4913,-4360,-3817,-3939,-3913,-3829,-3650,-3329,-3059,-2916,-2688,-2631,-3189,-3338,-3333,-3433,-3269],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
