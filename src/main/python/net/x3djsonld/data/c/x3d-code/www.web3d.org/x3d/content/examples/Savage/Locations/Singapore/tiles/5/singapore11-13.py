###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore11-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3083120993579338,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[28,31,29,27,28,28,32,37,38,38,38,36,34,33,32,33,32,29,26,23,22,23,22,21,19,14,12,14,17,22,26,25,25,24,24,23,22,26,29,28,26,26,27,31,36,38,38,38,36,34,33,34,36,35,33,29,25,23,24,24,22,20,15,14,16,20,24,27,27,27,26,25,24,23,26,28,27,27,28,29,31,34,36,37,36,34,34,34,36,38,38,36,32,26,24,24,22,20,18,17,18,20,22,23,25,26,27,28,28,26,25,26,27,28,28,29,29,29,30,33,35,34,32,34,35,37,37,38,38,33,26,22,21,20,17,17,19,21,23,24,23,22,24,26,28,29,27,26,27,27,27,27,27,26,26,25,29,33,33,32,34,36,36,34,34,35,31,23,19,16,16,16,17,20,23,24,24,23,21,23,24,25,27,27,27,27,26,26,26,24,23,22,21,25,29,31,33,34,36,34,31,30,30,26,20,16,13,13,15,18,21,24,26,25,23,21,22,23,24,24,26,27,29,26,25,25,23,21,20,18,22,25,28,31,32,34,32,28,26,25,21,17,14,13,13,16,18,22,25,26,26,24,23,24,25,24,24,25,25,29,25,24,24,22,20,18,17,19,20,24,28,30,31,29,25,22,20,17,15,14,14,15,17,19,23,26,27,27,26,25,26,27,25,23,24,24,28,25,25,24,21,19,17,16,16,17,19,23,25,26,25,22,19,17,16,15,15,16,17,18,21,24,27,27,28,28,27,27,26,24,22,23,23,27,25,25,25,21,19,17,15,15,14,16,18,20,22,22,19,18,17,17,17,17,17,18,19,21,24,27,27,28,29,28,27,25,23,22,23,24,26,24,24,25,21,18,16,15,15,14,15,16,17,19,19,19,18,18,18,19,19,18,18,18,20,23,25,26,27,27,27,25,25,24,24,27,28,25,22,23,23,21,18,16,16,15,15,16,16,17,18,19,19,19,20,21,21,21,19,18,18,18,20,22,24,25,25,25,25,25,26,28,31,33,22,20,21,21,20,20,18,16,16,16,15,15,17,19,19,19,20,21,23,23,23,21,19,18,18,19,20,22,23,24,24,26,27,30,32,33,34,21,19,19,18,20,21,19,17,17,17,16,15,17,21,21,19,20,22,24,25,25,22,20,18,18,18,19,20,21,23,24,27,30,33,35,34,33,22,24,21,18,20,21,20,19,19,19,18,16,19,23,23,21,22,23,25,26,25,23,22,20,20,19,20,21,22,23,25,28,31,34,36,34,32,26,31,25,19,21,22,22,21,22,22,21,20,22,25,25,23,23,24,25,26,25,24,23,22,22,21,21,23,24,24,26,28,31,34,35,33,32,26,29,28,27,27,26,24,23,24,25,25,25,25,26,26,25,25,26,26,26,26,25,24,23,23,22,23,25,26,27,28,29,31,33,34,32,31,25,24,31,38,34,31,28,26,26,27,28,29,28,27,27,28,28,28,27,27,26,25,24,24,24,24,25,28,29,30,30,30,29,31,33,31,30,24,23,32,40,38,36,33,30,31,31,31,32,31,29,28,28,28,27,27,27,26,25,25,24,24,25,27,30,31,31,31,29,29,30,31,31,30,23,25,32,38,40,42,39,36,36,35,35,35,33,30,28,27,26,26,26,27,27,26,25,25,25,26,28,31,32,31,30,29,28,29,30,30,31,24,27,33,39,43,47,45,42,39,37,36,35,33,29,27,25,24,24,25,26,27,26,26,26,27,28,30,33,33,32,30,29,28,28,28,30,32,26,28,35,42,47,52,50,48,43,38,36,35,31,27,25,23,22,23,25,26,27,26,26,27,29,31,32,34,34,33,31,30,28,27,27,30,34,27,30,38,45,49,53,51,49,44,37,35,33,29,25,23,22,23,24,25,27,27,27,28,29,30,31,33,33,33,33,32,30,28,27,27,30,33],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
