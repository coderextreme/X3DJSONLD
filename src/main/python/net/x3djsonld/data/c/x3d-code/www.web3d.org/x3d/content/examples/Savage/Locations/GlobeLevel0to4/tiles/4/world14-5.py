###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world14-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(67.45833802716578,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[401,0,-611,152,60,-162,-263,-320,-438,-589,-670,-777,-253,-73,-88,294,613,1086,1441,2019,2445,2587,30,-33,-2,518,9,31,-259,-404,-438,-524,-654,-675,-125,-85,308,611,301,1104,1497,2012,2338,2580,30,-23,48,421,1134,130,-149,-408,-667,-613,-655,-193,-95,-93,1392,1334,911,967,1473,1996,2127,2368,151,196,327,904,945,762,618,-540,-902,-655,-669,-167,-74,-97,455,299,267,599,1437,1719,2072,2176,589,913,1902,1061,439,281,-202,-861,-1218,-1127,-488,-100,-31,200,929,498,283,749,1254,1654,2020,2161,526,1061,870,587,-537,-528,-1417,-1528,-1183,-311,-201,-120,-47,-34,278,-124,7,947,1045,1451,2001,2231,157,-15,-4,-135,-1109,-1513,-1697,-1530,-463,-431,-342,-199,-49,-7,1,-14,305,749,903,1415,2135,2298,-47,-194,-510,-545,-1534,-1801,-1759,-1566,-495,-292,-329,-290,-312,-283,1,-33,304,634,1604,1586,2119,2309,0,32,-412,-519,-1658,-1911,-1857,-1678,-1081,-319,-190,-156,-139,-198,-265,-222,-140,749,1222,1676,2112,2268,2,-88,-165,-1103,-1949,-2056,-1739,-1441,-956,-307,-190,-284,80,914,1276,-66,135,909,1652,1867,2246,2340,91,-105,-544,-1716,-2073,-1958,-1405,-544,-480,-425,-258,-125,-16,745,-678,880,304,939,1378,1884,2199,2324,-267,-511,-1445,-2087,-2075,-2020,-1365,-620,-577,-479,-507,-453,-330,1051,1477,376,596,1104,1477,2107,2350,2444,-664,-1644,-2140,-2187,-2199,-2093,-1691,-846,-341,-296,-292,-294,-280,342,-12,1023,1261,1443,1869,2216,2377,2452,-2087,-2253,-2310,-2273,-2251,-2158,-1737,-878,-429,-271,-229,-56,309,426,-116,346,1689,1914,2117,2286,2450,2521,-2261,-2345,-2325,-2297,-2257,-2112,-1561,-794,-309,-296,-293,-6,908,224,1377,1819,1981,2106,2296,2421,2537,2596,-2267,-2349,-2330,-2277,-2158,-1839,-696,-664,-353,-144,-193,29,8,711,1169,1561,2122,2179,2464,2522,2621,2745,-2253,-2354,-2335,-2151,-1778,-700,-354,-301,-609,-769,-376,1,307,1203,1438,1735,1923,2083,2288,2457,2653,2754,-2216,-2315,-2301,-1616,-682,-581,-497,-418,-189,-626,-48,50,1105,1448,1918,2079,2144,2165,2289,2496,2672,2752,-2054,-2214,-2208,-1266,-697,-693,-622,-638,-453,-461,1,290,1023,1438,1786,2002,2186,2239,2325,2530,2742,2810,-1940,-2061,-1328,-549,-298,-321,-714,-773,-800,-52,-12,364,812,1082,1619,1798,1919,2048,2283,2458,2629,2721,-498,-484,-292,-233,-99,-268,-860,-522,-220,-17,382,840,1063,1371,1545,1817,1893,1977,2176,2334,2482,2589,-399,-482,-549,-499,-407,-853,-369,-195,-45,104,906,1011,1329,1529,1793,1984,2013,2044,2176,2329,2458,2566,588,-89,1,1,-31,-18,-3,86,324,689,901,1048,1215,1514,1669,1794,1880,1982,2183,2346,2437,2527,672,1,-32,112,18,13,163,216,460,768,911,1049,1331,1503,1653,1782,1870,1998,2183,2343,2437,2493],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
