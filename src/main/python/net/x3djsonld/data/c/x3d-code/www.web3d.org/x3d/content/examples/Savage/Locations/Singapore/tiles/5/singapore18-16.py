###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore18-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3694340860038916,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[35,34,34,34,33,32,30,29,28,26,26,27,25,22,19,17,17,19,19,19,19,18,19,22,25,26,26,24,22,21,22,25,27,29,30,30,33,32,32,31,31,30,29,28,27,26,26,27,26,25,23,21,22,24,24,24,23,20,21,24,27,29,28,26,24,22,22,24,27,29,30,30,33,31,30,29,28,27,27,28,27,26,26,27,27,27,27,26,28,31,32,31,28,23,23,26,28,30,30,28,26,24,23,24,26,28,30,30,32,31,29,27,27,27,27,28,27,27,27,26,28,29,30,31,34,37,37,36,32,26,24,25,27,30,31,30,28,26,25,25,25,26,28,29,32,31,29,28,28,28,28,28,28,28,27,26,29,32,33,35,38,42,42,39,34,27,25,25,26,29,31,32,31,29,28,26,25,25,27,28,32,31,30,29,29,29,28,28,28,28,28,28,31,34,36,38,41,44,43,39,34,28,25,25,27,29,31,31,32,31,30,28,27,26,27,28,34,34,33,32,32,31,30,28,28,28,29,30,33,36,38,40,42,43,41,37,32,28,26,27,28,29,30,31,32,33,33,32,30,29,28,29,36,37,36,36,34,33,31,30,29,29,29,31,34,37,39,41,40,40,37,32,29,26,26,27,28,28,29,31,32,34,35,33,32,30,29,30,39,40,40,39,37,35,33,32,31,29,30,30,34,39,40,40,38,35,31,27,25,25,25,26,26,28,29,31,32,35,36,35,33,31,30,31,41,43,44,42,39,36,36,36,34,32,31,30,34,39,41,41,38,33,29,25,25,26,27,26,27,28,30,31,34,36,37,36,35,33,33,33,43,47,47,45,41,38,38,39,37,34,32,30,34,39,42,44,40,34,30,27,27,29,29,28,28,29,30,32,35,37,39,38,37,35,35,35,46,50,49,46,43,40,41,41,39,36,34,32,35,39,43,47,42,36,32,30,29,30,31,31,30,30,31,34,36,38,39,38,38,37,37,37,47,52,50,47,45,44,42,42,40,38,37,36,39,42,45,48,44,38,34,32,31,32,33,33,32,32,33,35,37,38,38,37,37,37,38,39,46,50,49,46,45,45,44,42,42,42,42,42,43,44,46,48,45,40,36,34,33,33,34,35,34,34,34,36,37,38,37,36,36,36,37,39,41,44,44,44,44,45,44,44,46,49,49,48,47,46,46,47,44,40,37,36,35,35,35,35,36,36,37,37,38,38,37,35,33,34,35,37,37,39,41,43,45,46,47,47,50,54,54,53,51,49,47,47,43,40,38,37,36,36,36,36,36,37,38,38,38,38,37,36,34,34,34,35,35,37,41,44,46,48,49,51,54,58,58,57,55,53,50,47,44,41,39,37,36,36,36,37,37,38,39,40,40,40,39,39,37,34,33,33,35,37,42,46,48,50,52,54,57,60,60,59,58,56,53,50,47,45,43,41,39,38,37,39,40,41,42,42,42,42,41,41,39,36,33,32,38,40,45,49,50,51,53,55,57,59,59,59,58,57,56,54,54,53,50,47,43,40,40,43,45,47,46,45,44,44,43,42,40,37,34,33,39,41,45,48,49,50,53,55,56,57,57,57,57,57,58,58,58,58,56,51,46,42,42,46,48,50,50,48,46,46,45,43,42,38,36,35,40,39,41,44,46,48,50,52,53,55,55,55,56,58,59,61,61,60,57,53,48,43,43,46,48,51,51,50,48,46,45,45,44,41,40,39,41,39,40,42,44,46,48,49,51,53,52,52,54,57,59,62,62,60,57,52,48,43,42,44,46,49,50,50,49,46,45,45,45,43,42,42,44,43,43,43,45,47,48,48,50,52,51,50,52,55,58,60,59,56,52,48,44,40,38,38,39,42,44,47,48,46,45,44,44,44,43,43],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
