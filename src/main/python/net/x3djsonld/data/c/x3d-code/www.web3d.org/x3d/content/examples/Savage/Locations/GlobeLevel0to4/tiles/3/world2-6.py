###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_26',geoSystem=['GDC'],position=(-33.79166499031936,112.4583420504793,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-33.79166499031936,112.4583420504793,0.0),range=4495500.0,child1Url=['../../tiles/4/world4-12.x3d'],child2Url=['../../tiles/4/world4-13.x3d'],child3Url=['../../tiles/4/world5-12.x3d'],child4Url=['../../tiles/4/world5-13.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world2-6.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-3478,-3450,-3286,-2413,-3134,-3189,-3400,-3616,-3663,-3995,-3840,-4044,-4010,-4001,-4467,-4360,-4327,-4289,-4355,-4348,-4217,-3344,-3143,-3102,-2413,-3399,-3430,-3608,-3680,-3975,-3868,-4146,-4094,-4192,-4150,-4428,-4568,-4457,-4332,-4532,-4565,-4460,-3144,-3152,-2971,-3253,-3570,-3647,-3852,-3616,-3974,-4138,-4206,-4144,-4269,-4358,-4433,-4480,-4618,-4727,-4758,-4646,-4636,-2898,-2759,-3014,-3393,-3647,-3863,-3724,-3821,-4131,-4188,-4291,-4404,-4367,-4458,-4598,-4679,-4574,-4761,-4792,-4953,-4815,-2575,-2959,-3256,-3464,-3756,-3928,-3989,-3970,-4076,-4329,-4397,-4459,-4469,-4759,-4632,-4779,-4801,-5019,-5106,-5089,-5001,-2862,-3217,-3393,-3659,-3893,-4076,-4265,-4008,-4163,-4426,-4559,-4491,-4515,-4659,-4757,-4935,-4834,-5312,-5141,-5204,-5117,-3103,-3306,-3523,-3764,-4014,-4112,-4465,-4474,-4355,-4519,-4259,-4653,-4733,-4917,-4845,-5259,-5065,-5159,-5474,-5515,-5368,-3488,-3537,-3550,-3908,-4138,-4258,-4474,-4703,-4588,-4545,-4762,-4772,-4969,-5124,-4758,-5366,-5040,-5491,-5567,-5634,-5621,-3667,-3875,-3795,-4216,-4404,-4502,-4651,-4925,-4520,-4397,-4485,-4679,-4385,-5181,-5192,-5522,-5028,-5474,-5355,-5076,-5545,-3839,-3942,-4081,-4399,-4535,-4575,-4936,-5085,-5260,-4853,-5446,-5402,-4940,-5020,-5383,-5419,-5498,-5521,-5635,-5584,-5352,-3901,-3766,-4255,-4595,-4638,-4552,-4531,-4576,-5421,-5456,-5267,-5394,-3767,-3876,-5145,-4891,-5236,-5291,-4962,-2730,-2511,-4071,-4118,-4351,-4499,-4475,-4346,-5468,-5606,-5187,-3992,-2352,-903,205,-4,-1061,-136,-4085,-4229,-2446,-984,-92,-3883,-4156,-4402,-4238,-4485,-4238,-5189,-5600,-5136,-2720,-2968,-996,278,336,169,139,-202,-813,-856,-114,-56,-3823,-4341,-4436,-4463,-3537,-2750,-5191,-5331,-5231,-5152,-4804,-2743,407,326,331,256,89,-36,-64,-61,62,-3149,-4081,-2549,-2308,-2257,-3398,-5160,-3333,-5250,-5306,-5098,-4145,219,367,482,271,157,144,96,53,114,-1832,-2765,-2099,-2798,-2529,-4106,-4872,-4672,-5088,-5498,-5027,-1458,316,452,407,344,222,217,146,170,156,-3701,-3841,-2853,-2980,-1728,-4356,-4938,-5514,-5142,-5579,-5240,-12,295,447,438,452,219,241,251,249,164,-4248,-4478,-4087,-4066,-1420,-4728,-4185,-5039,-5253,-5701,-4178,104,370,471,485,458,366,338,433,377,204,-4611,-4844,-4483,-4789,-4264,-4691,-4895,-4774,-5384,-5618,-1096,121,324,487,500,448,426,373,586,521,227,-5204,-4715,-4671,-5065,-5383,-3451,-5149,-4821,-5098,-4019,-673,8,351,515,556,457,411,518,739,585,313,-5135,-4916,-5087,-5400,-5596,-4124,-5356,-5771,-3108,-4053,-618,58,336,569,569,459,446,474,555,518,325,-5203,-4930,-5075,-5313,-5595,-4301,-5402,-5981,-3019,-4150,-638,57,388,599,567,441,427,475,514,552,355],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
