###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4916,-4896,-5002,-4981,-4887,-4751,-4625,-4639,-4630,-4637,-4601,-4520,-4426,-4394,-4311,-4406,-4234,-4120,-4371,-3849,-3601,-3955,-4824,-4975,-4831,-4998,-4883,-4800,-4666,-4625,-4666,-4711,-4584,-4529,-4441,-4376,-4341,-4290,-4307,-4187,-4141,-3025,-3945,-3661,-4796,-4970,-4822,-5031,-4911,-4774,-4792,-4723,-4709,-4660,-4595,-4511,-4451,-4427,-4354,-4342,-4365,-4186,-4087,-4137,-3944,-3624,-5081,-4893,-4894,-5007,-4845,-4857,-4807,-4726,-4704,-4610,-4601,-4475,-4505,-4443,-4362,-4315,-4185,-4153,-4015,-4082,-4042,-3941,-4964,-4870,-4849,-4871,-4885,-4886,-4819,-4862,-4815,-4677,-4624,-4548,-4508,-4428,-4392,-4376,-4275,-4213,-4115,-4044,-4126,-4309,-4928,-4797,-4799,-4991,-5001,-4839,-4803,-4726,-4827,-4703,-4561,-4522,-4493,-4363,-4184,-4208,-4220,-4133,-3989,-4028,-4035,-4108,-4649,-4778,-4891,-4845,-4998,-4800,-4836,-4761,-4885,-4677,-4627,-4534,-4403,-4392,-4299,-4325,-4235,-4116,-4146,-4245,-4104,-4068,-4730,-4747,-4864,-4932,-5118,-4818,-4827,-4744,-4708,-4664,-4682,-4510,-4500,-4400,-4142,-3415,-4221,-4163,-4040,-4099,-3977,-4027,-4838,-4908,-4897,-5015,-5031,-4980,-4772,-4712,-4726,-4585,-4535,-4538,-4255,-4231,-4429,-3955,-4174,-4077,-4102,-3976,-3845,-3987,-4751,-4960,-4906,-5059,-5034,-4864,-4756,-4646,-4548,-4515,-4616,-4371,-4411,-4284,-4119,-4071,-4153,-4112,-4160,-3993,-3951,-3890,-4594,-4975,-4883,-5046,-5016,-4937,-4885,-4726,-4585,-4535,-3835,-4512,-4377,-4249,-4185,-4124,-4167,-4196,-3976,-3989,-3964,-3767,-4858,-5053,-5089,-5010,-5065,-4931,-4871,-4790,-4572,-4411,-4366,-4459,-4407,-4067,-4183,-4097,-3938,-3971,-3914,-3939,-3758,-3933,-4860,-4891,-4972,-4907,-5034,-5088,-4880,-4847,-4564,-4485,-4350,-4415,-4206,-3944,-3996,-3884,-3972,-3910,-3950,-3648,-3536,-3658,-4849,-4797,-4955,-4736,-4891,-4919,-4827,-4785,-4408,-4417,-4348,-4376,-4073,-4099,-3953,-4004,-3816,-3866,-3951,-3529,-3771,-3595,-5576,-4262,-4907,-3076,-4990,-5156,-4398,-4680,-4534,-4451,-4413,-4212,-4138,-3950,-4005,-3998,-3645,-3776,-3984,-3697,-3717,-3286,-4808,-5138,-5193,-5018,-5086,-4948,-4619,-4325,-4403,-4376,-4451,-4267,-4071,-3944,-3992,-3917,-3932,-3673,-3958,-3656,-3516,-3464,-5116,-5097,-5164,-5072,-5094,-4966,-4405,-4551,-4486,-4006,-3848,-4022,-4030,-3968,-3701,-3847,-3725,-3955,-3889,-3776,-3498,-3506,-5336,-5229,-5174,-5106,-5165,-5004,-4778,-4796,-4645,-4110,-4244,-4396,-4041,-4203,-4158,-4014,-4122,-3611,-3558,-2525,-2830,-3493,-5157,-5216,-5283,-5260,-5129,-5097,-4855,-4757,-4650,-4288,-4298,-4220,-4093,-3964,-3982,-4038,-3817,-3820,-3870,-3450,-3548,-3342,-5408,-5201,-5287,-5232,-5025,-5032,-4827,-4802,-4638,-4227,-4349,-4431,-4219,-4118,-3910,-3888,-3902,-4026,-3606,-3615,-3604,-3432,-5203,-5312,-5126,-5060,-5047,-4855,-4875,-4993,-4725,-4439,-4404,-4183,-4398,-4284,-4026,-4077,-3892,-3795,-3655,-3444,-3605,-3524,-5180,-5273,-5170,-5063,-2321,-4814,-4737,-4744,-4609,-4572,-4370,-4353,-4238,-4213,-4005,-3910,-3551,-3684,-3818,-3663,-3316,-3322,-5422,-5171,-5079,-5004,-4850,-4747,-4665,-4573,-4280,-4611,-4330,-4345,-4272,-3901,-3942,-3994,-3713,-3893,-3813,-3856,-3695,-3551,-5400,-5022,-5095,-4910,-4611,-4688,-4699,-4440,-4430,-4551,-4379,-4326,-4271,-4055,-3934,-4082,-3980,-3891,-3708,-3799,-3798,-3609],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
