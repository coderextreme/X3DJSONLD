###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,-90.04166398449098,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3440,-4021,-3919,-3845,-3920,-3944,-3797,-3845,-3606,-3841,-4072,-4145,-3970,-3948,-3843,-4318,-2730,127,1266,2937,1018,533,-3926,-3874,-3626,-3812,-3953,-3895,-3998,-3779,-3628,-3680,-4186,-3839,-4099,-4131,-4005,-3924,-4346,263,510,3855,1168,559,-3642,-3883,-3732,-3736,-3760,-3882,-3929,-3905,-3749,-2878,-3398,-1073,-3595,-4359,-4148,-4016,-5381,-360,428,3668,1121,546,-3730,-3584,-3668,-3576,-3856,-3858,-3479,-3792,-3910,-4084,-4134,-4025,-4266,-4291,-4378,-3250,-4782,-771,764,3925,703,587,-3631,-3386,-3583,-3957,-3517,-3811,-3792,-3800,-3940,-4003,-3896,-4139,-4224,-4250,-4302,-4083,-4554,-2381,1481,3637,589,561,-3392,-3417,-3579,-3808,-3924,-3922,-3846,-3903,-3870,-3875,-3999,-4133,-4011,-4180,-4198,-3993,-4345,-2073,1247,2225,677,531,-3063,-3648,-3664,-3581,-3878,-4013,-3792,-3910,-3866,-3923,-3917,-4072,-4013,-4282,-4089,-3986,-4226,-2542,1769,3180,751,1175,-3494,-3500,-3596,-3802,-3832,-4045,-3741,-3931,-4035,-3831,-4012,-4121,-4240,-4485,-4267,-3944,-4454,-1631,1800,3293,1064,1829,-3576,-3789,-3637,-3622,-3705,-3855,-3727,-3936,-4095,-3942,-3625,-4221,-4192,-4268,-4391,-3823,-4478,-2410,1121,5053,964,707,-3585,-3704,-3467,-3657,-3232,-3722,-3870,-3880,-4000,-3981,-3983,-4129,-4352,-4101,-4497,-4155,-4417,-2964,779,4992,1174,1260,-3537,-3570,-3765,-3919,-3469,-4090,-3941,-3944,-3976,-3964,-3862,-3854,-4306,-4251,-4198,-3967,-4240,-2784,1488,4067,1483,1359,-3461,-3431,-3746,-3785,-3706,-3988,-4142,-3553,-4065,-4022,-3985,-3832,-4047,-4148,-4046,-3893,-4305,-4060,1110,4460,3321,3451,-3399,-3634,-3706,-3665,-3794,-3782,-3639,-3624,-3993,-4110,-3787,-3886,-3651,-4308,-4238,-4114,-4193,-4161,441,4825,2671,3209,-3601,-3243,-2472,-3935,-3831,-3834,-3833,-4031,-3986,-4099,-4006,-3834,-4053,-4052,-4263,-4158,-4460,-5466,457,2674,4432,4540,-3801,-3562,-3117,-3430,-4000,-3840,-3801,-3897,-3797,-4198,-4052,-3814,-3423,-4214,-4018,-4294,-3943,-6327,292,2793,4164,3023,-2729,-3778,-3335,-3219,-3866,-3804,-3706,-3924,-3778,-4059,-4017,-3895,-3395,-3824,-3919,-4017,-4054,-5911,29,2070,5480,3506,-3608,-3739,-3281,-3280,-3869,-3829,-3925,-3900,-4027,-4043,-3537,-3933,-3718,-4179,-3997,-3987,-3734,-5210,-160,2064,4858,5107,-3713,-3774,-3322,-3571,-2022,-3512,-4240,-4206,-4265,-4199,-3930,-3952,-3575,-3982,-4243,-3936,-4403,-4573,-580,1681,4318,3768,-2081,-768,-3873,-2745,-3152,-3921,-3105,-3461,-3679,-3920,-4281,-4147,-3990,-3111,-3605,-4352,-3544,-4554,-908,2030,4349,6119,-1006,-2500,-1083,-3743,-3360,-3891,-3904,-3862,-3833,-4022,-4403,-4312,-4372,-4030,-3313,-3927,-3902,-4327,-1230,2427,4039,4216,-2506,-3685,-3733,-4509,-3490,-2702,-4039,-3721,-3895,-4198,-4288,-4466,-4486,-4346,-3776,-3683,-4315,-4653,-1920,1607,3981,3555,-4018,-3437,-4011,-3649,-4028,-2921,-3914,-3452,-4064,-4204,-4285,-4582,-4502,-4276,-4276,-3349,-4164,-4464,-2413,1160,3080,4881,-4107,-4388,-3997,-4053,-3401,-3398,-4027,-3774,-4544,-4047,-4437,-4816,-4620,-4394,-4433,-3965,-3724,-4549,-2529,967,2784,3128,-4263,-4266,-3984,-3957,-3749,-2572,-3879,-3643,-4569,-4258,-4509,-4699,-4639,-4415,-4479,-4067,-3794,-4637,-2906,1287,2899,3128],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
