###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,157.4583433915838,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2043,-2035,-2232,-4406,-2636,-3634,-4982,-4479,-4518,-7287,-1778,-2278,-2984,-2972,-1971,-2492,-2976,-3231,-2526,-2785,-3234,-2649,-2582,-2480,-2522,-4261,-777,-4082,-4691,-4246,-4301,-5572,-1117,-1769,-3344,-1717,-2030,-3229,-1652,-3902,-2516,-3315,-2298,-1057,-3232,-2476,-3203,-1582,-3191,-5759,-5912,-4382,-4738,-3367,-1794,-1992,-3299,-1984,-2942,-3325,-2822,-2378,-444,-4025,-1630,-2783,-3797,-1501,-3043,-2780,-3995,-2645,-3355,-4822,-4953,-1030,-3337,-2713,-3375,-3008,-5768,-2993,-4300,-3999,-3444,-4816,-4135,-4610,-3021,-1613,-2197,-2026,-4911,286,-4495,-2062,-3292,-1631,-2282,-3755,-3607,-5924,-3751,-3925,-4925,-5013,-4677,-5042,-4954,-4785,-3572,-3487,-4337,-3789,17,-1636,-3374,-3213,-3577,-1693,-2534,-1472,-3396,-3396,-4494,-4911,-5084,-5161,-5138,-5062,-4762,-4739,-2967,-3528,-4513,-905,-586,-2420,-3350,-3468,-2631,-2881,-3266,-3992,-4686,-4658,-4834,-5205,-5355,-5223,-5099,-4955,-4808,-5056,-3341,-3878,-1568,-1480,-1640,-2769,-2703,-2698,-3298,-4262,-3860,-3387,-3791,-4450,-4985,-5437,-5233,-5227,-5130,-4942,-4671,-4889,-3636,78,-1785,-73,29,-3561,-1674,-2674,-2801,-5203,-4050,-3208,-4162,-4976,-5108,-5325,-5013,-4783,-5616,-5069,-4859,-4646,-3782,-732,-1737,-487,56,-1849,-2145,-3782,-3925,-3166,-3899,-2855,-4166,-5101,-5409,-5524,-5331,-5552,-5286,-4616,-4334,-4860,-1189,-104,-233,-2194,-2917,-1503,-3202,-3448,-3736,-3510,-3518,-4176,-4701,-5212,-5340,-5406,-5174,-5207,-5247,-3545,-4805,-1807,-466,-2086,-2646,-3726,-1917,-2052,-3134,-3681,-3707,-3555,-3613,-3718,-4452,-4508,-4969,-5389,-5415,-5549,-5365,-5119,-4998,-5567,-959,-3224,-3406,-2307,-1706,-2336,-3398,-3642,-3672,-3707,-3578,-3327,-3616,-4158,-4987,-5376,-5424,-5431,-5503,-4022,-5304,-5495,-2463,-2618,-2308,-1852,-1889,-2832,-3296,-3496,-3547,-2971,-2969,-2773,-2937,-3626,-4051,-5281,-5520,-5555,-5486,-4536,-5112,-5364,-1721,-1925,-1942,-21,-1757,-2037,-3215,-3275,-2068,-2436,-2952,-2827,-3025,-3348,-3780,-4587,-5496,-5630,-5323,-5006,-5583,-5771,-1634,-1207,-1698,-1242,-1814,-1791,-3092,-1638,-1936,-3050,-3092,-3115,-3178,-3384,-3537,-4275,-4995,-5251,-5254,-5090,-5435,-5711,-1614,-1405,-1769,-1509,-2061,-1998,-2791,-2038,-2599,-3082,-3201,-3339,-3161,-3404,-3469,-4084,-4776,-5206,-5321,-5151,-5195,-5776,-1760,-1636,-1835,-1944,-2491,-2463,-3165,-2869,-2782,-3538,-3384,-3501,-3373,-3710,-3794,-4290,-4531,-5148,-3641,-5231,-5135,-5189,-1857,-1733,-1879,-1982,-2409,-2521,-3386,-4023,-3858,-3668,-3624,-3590,-3416,-3818,-3951,-4204,-4392,-5027,-5149,-5125,-5105,-5149,-1799,-1711,-1922,-2130,-2882,-2657,-3660,-3262,-4035,-4042,-3960,-3638,-3477,-3823,-4019,-4036,-4383,-5017,-5149,-3361,-5351,-5413,-1703,-1663,-1956,-2388,-2542,-2719,-3820,-4429,-3936,-4187,-3872,-3635,-3710,-4124,-3994,-4039,-4462,-4771,-3951,-3889,-3964,-5405,-1700,-1612,-1955,-2161,-3193,-2700,-3905,-4348,-4529,-4393,-3985,-3622,-4030,-4210,-4028,-4285,-4511,-4640,-4085,-5244,-5274,-5395,-1805,-1738,-1995,-2343,-3219,-3432,-4057,-4420,-4491,-4352,-3951,-3952,-4286,-4359,-4235,-4207,-4733,-2097,-4339,-5134,-5527,-5354,-1881,-1764,-1969,-2314,-3129,-3479,-4094,-4451,-4440,-4392,-3860,-4009,-4302,-4290,-4203,-4422,-4986,-1327,-4176,-4975,-5684,-5416],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
