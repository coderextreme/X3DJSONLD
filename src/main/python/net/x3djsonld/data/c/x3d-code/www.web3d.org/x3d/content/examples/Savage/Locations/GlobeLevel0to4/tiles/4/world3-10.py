###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4956,-5079,-5119,-5214,-5335,-5522,-5400,-5363,-5360,-5025,-4887,-4658,-4729,-4963,-4843,-4914,-4786,-4802,-4689,-4246,-2788,-2224,-4842,-4896,-4987,-5079,-5198,-5390,-5320,-5347,-5297,-5080,-4698,-4741,-3863,-4519,-4782,-4847,-4751,-4796,-4668,-3649,-2816,-2377,-4664,-4788,-4691,-4810,-5069,-5392,-5419,-5304,-5259,-5233,-4979,-3048,-4252,-4351,-4644,-4854,-4690,-4715,-4407,-3534,-2784,-3522,-4354,-4342,-4594,-4599,-5046,-5299,-5041,-5211,-4943,-5335,-4760,-4110,-4205,-4371,-4621,-4742,-4744,-4642,-4377,-3606,-2819,-3586,-4071,-4077,-4312,-4465,-4795,-5237,-2198,-2183,-4123,-4872,-4977,-4860,-5028,-4657,-4638,-4790,-4801,-4771,-4490,-4052,-4498,-4371,-3839,-3991,-4313,-4618,-4442,-4671,-1428,-1477,-3160,-4555,-4746,-4904,-5098,-4667,-4600,-4756,-4779,-4749,-4619,-4715,-4684,-4550,-3492,-4054,-3788,-4176,-2909,-4330,-4297,-3283,-3780,-3909,-4829,-4748,-4496,-5149,-4781,-4758,-4796,-4801,-4663,-4618,-4478,-4496,-1683,-1236,-3232,-3600,-2500,-4703,-4153,-3965,-4025,-4300,-4633,-4531,-4498,-5193,-4875,-4693,-4920,-4705,-4629,-4849,-4599,-4557,-354,-2975,-3099,-3537,-3925,-4538,-2840,-4729,-4485,-4210,-4519,-4667,-4658,-4673,-5021,-4807,-4424,-4628,-4459,-4332,-4616,-4479,-2734,-3212,-3190,-3791,-4474,-4641,-4437,-4976,-4439,-4039,-4333,-4401,-4634,-4787,-5250,-4794,-4618,-4130,-4496,-4556,-4295,-4222,-2969,-3344,-3523,-4054,-4468,-4611,-4639,-4586,-4283,-4530,-4333,-4211,-4501,-4844,-4650,-4584,-4806,-4739,-4499,-4243,-4033,-3245,-3388,-3825,-3991,-4205,-4507,-4643,-4606,-4615,-4713,-4251,-3353,-4236,-4399,-4664,-4746,-4551,-5203,-4569,-4242,-3811,-3016,-2656,-3992,-4089,-4230,-4368,-4467,-4572,-4520,-4688,-4693,-4533,-4358,-3610,-4533,-4689,-4766,-4490,-4483,-4612,-3971,-3853,-2879,-2687,-4157,-4104,-4197,-4456,-4607,-4390,-4371,-4493,-4618,-4595,-4340,-4340,-4194,-4610,-4717,-4047,-4549,-4513,-2164,-978,-1578,-2402,-4386,-5000,-4241,-4249,-4209,-4323,-4280,-4349,-4388,-4440,-4331,-4306,-4368,-4494,-4668,-4616,-4035,-3589,-1460,-296,-1976,-1631,-4495,-4187,-4299,-4264,-4122,-4247,-4210,-4253,-4207,-4162,-4254,-4300,-4363,-4402,-4474,-4452,-3061,-2399,-1674,-1999,-1636,-1491,-2302,-4244,-4178,-4097,-4119,-4161,-4105,-4097,-4013,-4070,-4194,-4274,-4266,-4459,-4419,-4463,-3434,-2007,-2548,-1944,-1454,-1214,-3030,-3894,-3834,-3735,-3863,-4008,-3979,-3936,-3889,-3922,-4106,-4264,-4459,-4373,-4360,-4379,-3358,-3066,-3179,-2113,-836,-668,-3232,-3614,-3535,-3211,-3777,-3977,-3795,-3853,-3891,-3752,-3926,-4264,-4393,-4172,-4421,-4383,-3885,-3546,-3461,-2397,-786,-249,-3409,-3395,-2959,-3140,-3689,-3669,-3294,-3408,-3808,-3770,-3941,-4241,-4334,-4313,-4340,-4358,-4410,-3877,-3747,-2693,-1012,-540,-3007,-2623,-2387,-2927,-3001,-2161,-1541,-438,-344,-3704,-3980,-4174,-4430,-4474,-4373,-4439,-4444,-4485,-3868,-3243,-2155,-887,-2818,-1894,-1763,-2717,-2985,-121,-534,-887,-3189,-3631,-3937,-4222,-4382,-4479,-4507,-4649,-4573,-4539,-4106,-4046,-2697,-2047,-1947,-1649,-1686,-1917,-2883,-299,-3,-2262,-3271,-3398,-3889,-4171,-4360,-4495,-4572,-4753,-4622,-4471,-4565,-4433,-3373,-2512,-1916,-1465,-1653,-1813,-2847,-509,-3,-2274,-3248,-3403,-3909,-4165,-4362,-4502,-4577,-4783,-4646,-4502,-4547,-4433,-3633,-2890],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
