###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[66,67,67,63,60,59,58,55,52,48,45,47,49,56,62,65,67,66,65,66,68,71,76,80,82,82,79,75,69,62,55,50,46,42,40,37,68,68,67,65,63,63,63,58,53,48,42,43,46,51,56,60,61,61,62,63,67,70,73,77,80,80,76,73,67,61,55,50,46,43,41,39,68,67,66,66,67,67,67,62,55,48,41,40,42,46,51,54,56,58,60,64,68,70,71,72,75,74,71,68,64,59,55,51,48,45,43,41,64,63,62,66,69,70,69,64,57,49,42,40,40,43,48,51,53,57,61,66,70,71,69,69,69,69,66,63,60,57,53,50,48,46,44,42,58,57,57,62,69,69,68,63,57,51,43,41,40,43,46,50,54,59,64,69,73,73,69,66,65,63,62,59,56,53,50,48,47,45,43,42,54,53,53,59,66,66,66,60,54,48,42,41,41,44,48,52,55,61,68,72,76,74,69,65,62,59,58,55,52,49,47,46,45,44,42,41,51,50,50,55,61,61,62,55,49,44,39,41,44,48,52,56,58,64,72,76,78,75,68,64,60,57,54,51,49,46,45,43,41,40,39,38,50,49,48,53,56,56,56,50,44,41,38,42,46,51,55,59,61,67,75,78,78,75,68,63,60,56,52,50,47,44,42,40,38,36,36,35,50,49,48,50,52,51,49,45,39,39,39,44,50,54,57,60,63,68,75,78,78,75,68,63,59,55,52,49,46,43,41,38,36,35,34,34,52,51,49,50,51,49,46,43,39,39,39,45,51,55,57,60,63,68,74,76,77,74,68,63,59,56,53,49,46,43,40,37,36,35,34,34,55,54,53,53,54,51,48,46,44,41,39,44,50,54,56,59,61,65,70,72,73,71,68,64,61,58,55,51,48,44,41,38,38,37,37,36,57,57,56,56,56,53,49,48,47,43,38,43,49,53,57,59,60,63,67,69,70,69,66,63,61,58,56,53,49,44,41,38,38,38,37,36,56,57,57,56,56,53,51,49,47,43,38,42,47,53,57,60,60,62,65,66,68,67,64,62,59,57,55,52,47,43,39,37,37,37,36,35,56,56,56,55,55,54,52,50,47,43,39,42,46,52,58,60,60,61,61,63,65,65,63,60,58,56,54,50,46,42,38,36,36,36,35,34,53,54,54,54,54,55,55,51,48,45,41,44,46,52,59,60,59,59,58,59,62,62,61,59,56,53,51,48,44,41,38,36,35,34,33,32,51,52,53,53,54,55,56,52,48,45,43,43,44,49,56,58,58,57,55,56,59,59,60,58,55,52,49,47,43,41,38,37,35,34,32,30,50,51,52,52,53,54,54,51,49,44,39,37,37,42,50,53,55,54,53,54,55,56,56,55,53,50,49,47,45,43,41,40,38,35,33,30,49,50,51,52,53,52,53,50,47,42,36,33,32,37,44,48,51,52,51,51,51,52,52,52,51,49,48,46,46,45,44,43,40,37,33,30,46,49,51,52,53,51,50,47,43,39,35,33,32,36,41,45,47,48,48,48,48,47,48,47,46,46,45,45,47,47,47,45,43,39,34,29,43,47,51,52,52,50,47,44,40,37,34,33,32,35,39,42,44,45,46,45,44,43,43,42,41,41,42,44,47,49,48,46,44,40,34,29,42,47,51,51,52,49,46,44,42,39,37,36,35,35,37,39,41,42,43,42,40,39,39,37,35,35,38,41,44,46,45,44,41,39,35,32,42,46,49,50,51,48,45,44,43,42,40,39,37,36,35,36,37,38,41,39,36,35,35,34,31,31,35,38,42,44,43,41,39,37,35,33,39,42,45,46,46,44,42,43,44,43,41,40,38,37,35,34,33,34,38,38,35,34,34,33,32,32,33,36,39,41,41,39,36,34,33,32],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
