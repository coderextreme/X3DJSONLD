###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[533,391,417,234,141,109,86,66,27,-27,-34,32,62,-23,-58,-1204,-3020,-3504,-4263,-4656,-4811,-4791,559,413,514,276,145,119,100,66,24,34,104,93,224,22,-46,-602,-2167,-2973,-3547,-4223,-4562,-4532,546,454,617,391,165,124,101,58,2,15,108,128,144,12,-10,-74,-836,-2582,-3231,-3755,-3967,-4057,587,653,1049,577,206,118,98,6,11,4,50,106,143,10,8,-62,-190,-1439,-3113,-3639,-3894,-4090,561,656,1073,912,232,116,84,6,49,1,99,92,147,86,5,-49,-103,-1812,-3033,-3685,-4002,-4137,531,451,418,917,267,114,47,86,51,2,104,195,135,100,11,-4,-93,-2024,-2964,-3396,-3741,-3887,1175,420,281,1200,262,109,63,12,62,50,151,141,207,157,277,-3,-85,-1764,-2875,-3210,-3519,-3648,1829,649,253,1098,193,86,81,18,70,45,94,330,143,308,142,10,-4,-172,-2293,-3141,-3452,-3522,707,611,239,606,165,69,83,24,66,58,99,196,141,277,442,185,13,-106,-710,-2176,-3272,-3462,1260,418,218,197,204,74,78,55,36,76,64,160,88,71,32,23,7,-74,-187,-1554,-2571,-3520,1359,400,301,167,372,79,66,58,40,99,64,70,120,417,339,105,319,-39,-156,-1540,-2511,-3447,3451,2431,304,132,183,87,69,59,34,79,75,98,369,455,638,323,923,-10,-124,-1301,-2429,-3323,3209,943,473,249,115,102,71,59,40,73,68,57,140,370,395,730,968,110,-75,-273,-2425,-3019,4540,863,1664,431,133,125,69,62,53,69,66,144,234,444,610,666,990,1422,-54,-194,-2272,-2947,3023,1540,517,303,146,146,83,73,56,65,73,143,285,404,597,744,985,449,-3,-208,-2015,-2440,3506,2202,1913,319,174,165,106,85,62,60,75,193,477,368,600,952,966,353,-31,-133,-1102,-2220,5107,3219,4352,421,205,183,130,94,77,53,109,115,222,613,663,1239,953,895,-18,-110,-404,-1931,3768,5027,2500,622,242,196,143,103,83,62,129,138,245,521,716,1096,788,923,-3,-80,-233,-900,6119,4200,2434,639,280,206,151,115,88,68,398,221,246,271,521,1003,923,897,15,-55,-167,-138,4216,3953,2806,740,302,209,150,125,102,77,116,364,320,576,747,1108,875,595,617,-28,-86,-105,3555,4283,3479,1238,276,201,158,129,105,82,71,183,284,453,532,866,946,1076,89,15,-54,-49,4881,3962,5133,437,247,202,168,139,108,86,87,202,363,335,468,467,716,730,799,608,-26,-44,3128,4304,3729,965,268,206,173,142,110,89,156,315,302,291,421,680,807,573,657,917,780,786,3128,4403,3503,883,254,210,177,142,110,88,107,294,377,332,438,651,679,477,632,703,905,753],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
