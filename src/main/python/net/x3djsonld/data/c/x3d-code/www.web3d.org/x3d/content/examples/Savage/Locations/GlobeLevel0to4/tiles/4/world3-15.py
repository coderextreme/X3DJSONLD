###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,157.4583433915838,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3728,-5054,-1249,-3901,-3968,-3759,-4946,-4730,-4820,-5092,-5228,-5234,-5189,-5359,-5257,-5383,-5377,-5300,-5173,-4979,-5062,-5049,-3810,-3747,-2032,-3704,-4171,-4236,-4695,-5433,-4688,-4642,-4745,-5199,-5321,-5236,-5502,-5332,-5393,-5293,-5231,-4949,-4898,-5093,-3913,-4010,-3551,-3963,-4243,-4761,-4190,-5115,-4376,-3306,-3609,-4051,-4961,-5283,-5263,-5614,-5327,-5173,-5152,-5169,-5138,-5287,-4148,-3923,-1455,-4410,-4587,-4668,-4749,-4526,-4088,-1718,-1570,-1719,-3299,-4760,-5293,-5377,-5423,-5188,-4953,-5217,-5211,-5243,-4066,-3601,-3647,-4563,-4287,-4318,-4637,-3542,-2160,-1248,-1011,-1136,-1279,-2552,-4226,-5240,-5260,-5156,-5008,-5014,-5126,-5295,-3991,-4395,-3769,-4748,-4112,-4350,-4729,-4624,-1363,-688,-973,-1000,-1006,-1184,-1807,-4419,-5140,-4788,-5007,-4817,-4924,-5237,-4032,-4199,-4229,-4236,-4156,-2582,-4409,-4711,-1500,-1343,-1089,-882,-808,-892,-733,-1087,-2407,-4669,-4916,-4929,-4982,-5030,-4154,-4448,-4355,-3409,-3968,-3738,-4418,-4194,-2373,-1206,-981,-842,-472,-463,-417,-272,-976,-4357,-4912,-4758,-5061,-4961,-4521,-4104,-4129,-3896,-3623,-4317,-4175,-4431,-2153,-1194,-1062,-728,-155,-439,-481,-384,-754,-3825,-4614,-4797,-4881,-5223,-4396,-4112,-4016,-3762,-1877,-4346,-4033,-4353,-4054,-1193,-1000,-691,-163,-385,-516,-594,-827,-3477,-4720,-5054,-4916,-4952,-4375,-4315,-4266,-3611,-3143,-4097,-3981,-4307,-4173,-919,-794,-625,-340,-440,-539,-320,-653,-1019,-4303,-4983,-4920,-4930,-4426,-4355,-4338,-4404,-3925,-1617,-3263,-3990,-4111,-516,-559,-590,-562,-529,-515,-531,-659,-970,-2561,-4905,-5087,-4701,-4462,-4285,-4493,-4493,-4029,-4375,-2214,-1882,-3700,93,-394,-511,-592,-567,-537,-579,-708,-1216,-1989,-4269,-4535,-4644,-4548,-4516,-4240,-3280,-4147,-4011,-3926,-2089,-3593,-1245,-136,-501,-613,-587,-543,-524,-601,-1163,-1521,-2062,-4186,-3564,-4498,-4542,-4884,-4357,-4355,-3848,-4072,-1893,-3597,-720,-225,-635,-657,-562,-454,-465,-502,-635,-1054,-1347,-785,-508,-4829,-4902,-4589,-4473,-4414,-4379,-4234,-5648,-3425,-2520,-612,-541,-791,-677,-339,-331,-494,-512,-871,-1416,-981,-945,-4709,-4727,-4900,-4301,-4389,-4110,-3983,-4709,-1326,-2006,-174,-655,-765,-883,-727,-685,-651,-750,-948,-1351,-1050,-785,-4751,-4934,-4889,-5312,-4694,-4267,-4158,-3680,-2899,-2718,-2,-131,-642,-1110,-1080,-1092,-1143,-1075,-1175,-1368,-1048,-586,-4772,-4821,-4692,-4763,-4019,-4654,-4271,-4001,-2181,-2713,-168,-133,-643,-1273,-1346,-1380,-1318,-1244,-1491,-1105,-968,-290,-4742,-4466,-4777,-4804,-4561,-4898,-4281,-4503,-4399,-2341,-290,-98,-205,-1128,-1340,-1385,-1537,-1339,-1493,-1055,-1104,-847,-4697,-4851,-4660,-4899,-4925,-3683,-4630,-4168,-4873,-165,-546,-34,-97,-829,-1225,-1505,-1525,-1735,-1946,-2313,-2788,-2422,-4788,-4901,-5098,-5078,-4928,-4815,-4299,-4363,-3222,-230,-14,28,267,-69,-1171,-1538,-1891,-1746,-2005,-2118,-2872,-3075,-4596,-5331,-4617,-5085,-4882,-4747,-4550,-4518,-4414,-3093,983,274,376,129,-1002,-1338,-1467,-1512,-1650,-2147,-2676,-2747,-4606,-5238,-4878,-4886,-4891,-4637,-4577,-4531,-4434,-3816,63,345,390,369,-1091,-1593,-1439,-1416,-1580,-2051,-2721,-2762],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
