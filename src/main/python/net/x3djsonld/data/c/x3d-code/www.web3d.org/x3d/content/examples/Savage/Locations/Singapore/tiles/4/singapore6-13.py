###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_613',geoSystem=['GDC'],position=(1.3257755241139217,103.97763792148352,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.3257755241139217,103.97763792148352,0.0),range=4101.627,child1Url=['../../tiles/5/singapore12-26.x3d'],child2Url=['../../tiles/5/singapore12-27.x3d'],child3Url=['../../tiles/5/singapore13-26.x3d'],child4Url=['../../tiles/5/singapore13-27.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore6-13.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3170438117359278,103.9632748873545,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[8,9,10,11,8,11,12,11,10,9,9,9,9,12,12,10,7,8,11,14,14,14,17,17,14,11,8,7,7,6,6,5,6,7,8,8,8,6,9,10,10,9,10,10,11,11,10,9,8,9,12,12,10,7,8,10,13,15,16,17,18,17,14,8,6,6,6,7,6,7,6,7,8,7,6,9,10,9,9,10,10,12,12,12,10,9,9,11,12,9,6,8,9,12,15,16,17,18,18,14,8,6,6,6,7,6,7,6,6,8,7,8,11,8,8,9,11,11,13,13,13,12,10,9,10,10,7,6,9,9,10,14,17,17,17,16,14,8,7,6,5,6,6,6,5,5,7,7,10,11,8,8,8,11,13,14,13,14,13,10,8,9,9,6,6,9,9,10,13,17,16,15,14,13,9,7,6,6,6,6,5,5,5,7,7,14,11,9,9,7,11,14,15,14,15,14,11,7,9,9,7,6,9,10,9,12,16,15,11,10,12,9,7,7,7,6,6,4,4,6,7,7,16,13,10,9,6,10,14,15,14,15,14,11,8,9,8,7,7,9,10,10,12,14,13,9,7,10,9,7,7,7,5,5,3,4,7,7,7,19,14,10,7,6,9,12,14,14,14,13,11,9,9,7,6,7,9,11,11,11,12,10,7,6,7,7,7,7,6,4,5,2,3,6,7,8,20,15,9,6,6,9,10,13,13,13,13,11,10,11,7,6,7,9,11,12,11,9,8,6,5,6,7,6,6,5,4,4,3,4,6,8,8,19,15,7,7,7,9,8,12,13,12,12,11,11,13,8,7,7,11,13,11,9,7,6,5,5,5,7,6,5,6,6,5,5,6,5,8,8,17,15,5,6,8,9,8,11,13,12,11,11,12,14,10,8,8,12,14,11,8,6,5,5,5,5,6,6,5,6,7,7,7,7,5,8,8,14,15,3,5,8,8,8,11,13,12,11,10,12,15,14,10,9,12,13,11,8,5,5,5,5,5,5,7,7,8,8,8,8,8,6,7,8,11,12,3,6,10,8,9,9,13,12,11,10,12,16,16,12,10,11,13,11,8,5,5,5,5,5,5,7,9,9,10,9,8,9,7,7,8,10,5,4,12,14,10,10,8,11,11,10,10,12,15,16,12,9,10,14,13,8,6,6,6,6,6,5,6,9,9,12,10,9,10,8,8,8,9,2,5,15,14,11,10,7,10,11,10,10,12,14,15,12,10,9,12,12,8,6,6,6,6,7,5,6,8,9,12,11,10,11,10,10,9,11,4,7,13,8,12,10,7,10,11,10,12,12,13,14,12,10,8,10,10,8,6,6,6,7,7,5,6,7,7,10,11,12,13,13,12,11,11,7,10,13,2,9,10,8,10,11,10,12,11,11,13,12,10,8,9,8,7,6,6,5,6,6,5,6,7,7,9,11,14,15,15,14,13,10,10,13,15,0,4,10,9,11,12,9,10,9,9,12,11,9,7,8,7,6,6,5,5,6,6,5,6,7,7,9,13,17,17,16,15,14,9,13,15,17,0,2,10,10,12,12,8,8,9,9,12,10,8,6,8,7,6,5,5,4,5,6,6,6,7,7,8,14,19,18,17,15,14,9,14,19,14,1,4,9,10,12,12,7,8,10,11,11,9,8,6,7,7,8,6,5,5,5,6,5,6,7,6,7,15,19,17,15,13,13,9,14,20,11,3,7,9,11,12,12,8,10,12,13,11,9,9,7,6,8,9,7,6,5,5,6,5,6,6,5,7,14,18,17,15,12,12,7,12,18,9,4,8,9,10,12,13,10,12,13,13,9,8,10,9,6,8,10,9,8,6,5,5,5,6,6,5,7,13,18,17,15,11,11,5,9,16,8,6,9,10,10,13,14,13,13,12,12,8,7,11,11,7,9,12,12,9,7,5,5,5,6,6,6,7,11,17,16,14,9,10,4,7,14,11,8,11,11,12,15,16,14,12,11,11,7,7,10,12,10,12,14,12,10,7,5,5,6,6,5,6,8,9,14,15,12,8,9,4,5,13,14,12,13,13,13,16,17,14,11,10,10,8,7,10,13,13,15,16,12,10,8,6,6,7,6,5,6,7,7,11,13,10,8,8,4,6,12,15,16,16,15,14,15,15,12,9,8,9,8,8,10,12,13,15,15,12,10,9,7,7,7,7,5,6,7,5,9,12,10,8,8,5,6,12,16,19,17,17,13,14,12,10,7,4,7,9,8,11,11,11,14,14,11,11,10,7,6,8,7,5,7,7,5,7,11,9,8,9,6,9,13,17,18,17,18,13,13,12,9,6,-5,1,8,9,11,10,10,12,13,10,12,12,8,6,8,7,6,7,6,5,7,9,8,8,9,8,12,16,16,16,16,17,12,13,13,9,7,-14,-4,7,10,11,10,9,11,12,10,12,12,8,7,8,7,6,7,6,6,6,8,8,7,9,10,15,17,15,13,14,16,12,13,14,10,7,-13,-5,6,8,11,10,9,9,10,10,12,12,9,6,7,7,6,7,6,6,6,7,7,7,8,13,17,17,13,11,12,14,12,14,14,12,8,-6,-1,5,7,11,11,9,8,9,10,11,12,9,5,6,6,6,6,6,7,7,7,7,6,7,15,16,17,13,10,11,12,11,13,13,12,9,0,1,5,7,11,13,11,8,9,10,11,11,9,5,5,6,6,5,5,6,7,6,7,6,6,16,15,17,13,11,10,9,11,12,12,13,11,6,5,6,8,12,14,13,10,10,11,11,11,8,5,4,5,7,6,5,6,7,6,7,6,6,15,14,17,13,11,11,10,11,12,12,15,13,9,8,6,7,12,14,13,12,11,10,11,11,8,6,4,5,7,6,5,6,8,6,7,7,7,14,13,15,13,12,14,13,11,12,13,16,14,11,9,5,6,12,13,13,14,12,10,11,11,8,6,4,5,8,7,6,6,8,7,7,9,8,13,12,13,11,12,14,12,11,11,13,16,13,10,9,6,6,11,13,12,13,12,9,10,11,8,7,5,5,8,7,5,6,8,7,7,9,9,12,10,10,9,10,12,10,11,10,14,15,10,7,9,7,6,10,12,11,11,10,8,8,9,9,8,6,6,7,7,5,5,8,7,7,8,8,11,10,9,8,10,11,9,10,10,13,13,8,7,9,7,6,10,12,11,11,9,7,7,8,9,8,7,6,7,8,6,5,7,7,6,7,8,11,10,10,9,10,11,10,10,10,11,10,8,8,9,7,7,10,13,12,11,9,6,5,8,10,9,7,7,8,9,7,5,7,6,4,6,7,11,9,10,10,10,11,10,10,10,10,9,9,9,8,7,8,11,13,12,11,7,4,5,8,10,9,8,6,7,8,7,6,6,7,4,6,7,11,8,9,10,10,11,10,10,10,9,9,10,10,8,8,9,12,12,11,10,5,3,6,8,10,11,9,5,5,5,7,5,6,8,5,5,7,10,8,9,10,11,10,10,11,10,9,9,11,10,7,9,10,13,12,11,9,6,5,8,9,10,11,8,5,4,4,7,5,6,8,6,5,6,11,10,10,10,11,10,9,11,11,10,9,10,10,8,10,12,13,11,10,10,10,9,10,10,11,9,6,4,2,4,7,5,6,8,8,6,7,11,11,11,10,11,10,9,10,11,10,10,10,10,9,11,11,14,12,9,10,11,11,11,10,9,8,6,4,2,4,7,5,6,7,9,6,7],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
