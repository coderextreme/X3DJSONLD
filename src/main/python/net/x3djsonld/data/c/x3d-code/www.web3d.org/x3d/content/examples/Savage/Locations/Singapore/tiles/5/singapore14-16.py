###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[43,45,47,48,46,43,41,39,39,39,38,37,35,32,32,33,33,33,32,31,32,34,35,35,35,37,38,40,40,38,35,31,26,20,16,16,40,41,43,45,44,41,40,39,39,39,38,37,36,35,37,39,38,37,35,33,32,34,36,36,36,36,36,38,38,38,35,29,23,19,17,17,38,38,41,43,42,41,40,39,37,36,36,35,36,37,40,44,43,42,38,35,35,36,37,37,37,35,35,35,34,34,32,27,22,19,18,18,36,36,39,42,42,42,39,37,34,32,31,31,34,37,42,47,48,46,43,39,39,40,40,38,37,35,32,31,29,27,26,24,22,21,21,21,35,35,37,40,41,41,38,36,33,31,29,28,32,37,43,49,50,49,46,42,41,42,40,38,35,33,30,27,24,23,23,24,25,25,25,25,34,32,34,37,38,38,37,36,34,32,29,26,30,35,42,49,51,50,47,44,42,40,38,35,32,30,27,24,22,22,24,28,31,31,30,29,34,31,32,34,35,36,36,36,35,33,30,26,29,33,39,46,48,48,45,43,40,38,35,32,29,28,25,22,21,23,27,31,35,35,34,32,34,30,30,31,33,35,35,36,34,32,30,27,28,30,35,39,42,43,42,40,37,34,31,28,27,26,24,21,21,24,28,33,36,36,35,33,35,31,30,29,31,34,35,35,33,31,29,27,27,28,30,32,34,36,36,36,33,30,27,26,26,26,24,22,22,25,29,32,34,34,33,32,36,33,30,29,31,32,33,33,32,30,28,27,27,27,27,26,27,29,30,30,28,26,25,25,26,28,27,23,23,24,26,29,31,31,30,30,36,35,33,32,32,32,33,33,31,29,29,29,28,27,25,22,21,23,24,26,26,25,25,27,28,31,30,26,23,23,25,27,27,27,27,28,37,37,37,36,36,36,35,34,33,31,32,34,32,30,26,21,19,19,21,25,27,27,29,31,32,34,32,28,25,24,25,27,27,26,26,26,36,38,39,40,40,40,39,38,36,35,36,38,36,33,28,22,20,19,22,26,29,31,33,35,36,36,34,30,27,26,26,28,28,26,24,24,34,36,39,42,43,43,43,43,42,40,40,40,37,34,30,26,24,23,25,28,31,33,35,37,38,38,35,32,29,28,28,29,29,26,24,23,31,33,37,41,44,46,47,47,46,44,43,41,38,35,33,30,29,28,29,31,33,34,36,38,39,38,36,33,31,29,29,31,30,27,24,22,29,31,35,39,42,45,48,49,48,45,44,43,41,38,36,34,33,31,32,33,35,37,38,39,39,38,36,34,31,28,28,30,31,28,25,21,26,29,33,36,40,44,47,49,47,45,45,45,43,42,40,38,36,34,34,35,36,38,39,39,38,38,37,33,29,25,24,27,29,27,24,20,23,29,32,35,40,44,47,49,47,44,46,48,47,46,44,43,39,35,35,35,35,37,37,36,37,38,37,34,28,21,18,22,25,24,21,18,21,28,32,35,40,43,45,47,45,43,45,49,50,50,48,46,42,36,35,35,35,36,37,37,38,38,37,35,28,17,13,17,21,19,17,16,24,30,32,34,37,41,42,43,42,39,43,48,49,50,49,47,42,36,35,35,38,42,45,47,45,40,35,33,27,18,13,15,18,17,16,16,27,32,31,30,33,36,38,39,38,35,39,44,46,48,47,46,42,37,36,37,42,49,54,58,53,41,33,30,26,21,17,16,17,17,17,17,27,29,27,24,27,30,32,34,34,34,37,41,43,45,44,43,40,37,37,37,42,48,52,55,51,41,34,30,27,24,22,20,19,18,18,18],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
