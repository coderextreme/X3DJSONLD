###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world10-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-112.54166465504323,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3609,-3293,-2579,-2858,-3041,-2992,-3877,34,1462,1739,1731,1945,2034,1381,42,-1225,-2695,-3002,-2386,-12,-20,4,-2913,-3387,-3156,-3065,-3028,-2757,114,87,2152,2576,1876,1962,2188,339,32,-1629,-2882,-3368,-2687,-60,-25,-10,-3485,-3201,-3193,-3065,-2989,-2831,-82,17,1235,1697,2264,1909,1098,51,-3,-2074,-2944,-3517,-3310,-140,-50,-46,-3559,-3330,-2994,-3142,-2691,-2344,-81,823,1438,2130,2239,1837,1050,65,-61,-2409,-3174,-3662,-3554,-3371,-100,-48,-3182,-3117,-1485,-1038,-2750,-1551,-68,1755,1577,2172,2199,1796,1050,63,-176,-2199,-3257,-3744,-3743,-3753,-1857,-1030,-3384,-1238,-328,312,-2577,-952,33,2116,2266,2036,1959,1785,1285,349,-30,-2193,-3061,-3801,-3782,-3746,-3734,-2156,-3153,-327,71,-1789,-1256,-59,508,2387,1876,1894,2099,1857,2719,187,-11,-1829,-3315,-3754,-3757,-3745,-3671,-3681,-2159,-34,-161,-1379,-1174,14,1808,2217,2028,1782,1885,1722,1728,268,-13,-1397,-3463,-3780,-3725,-3739,-3721,-3660,-365,28,73,-2268,-242,58,884,2377,1776,1475,1747,2077,539,258,-6,-762,-3157,-3762,-3709,-3685,-3602,-3626,-358,59,-1015,-1999,1,194,2446,2120,1282,1141,2063,2622,319,114,4,-164,-2326,-3584,-3540,-3331,-3433,-3509,-118,488,-1184,-2,64,838,2585,1751,2108,1096,1136,1289,291,160,10,-81,-1819,-3230,-3297,-2865,-3397,-3329,-18,417,-2000,-66,297,2109,2521,1864,1185,1775,1057,653,254,73,9,-65,-1595,-1832,-1992,-2065,-2060,-3119,365,-457,-1342,12,241,2402,1810,1494,1191,1109,740,624,140,154,8,-155,-1508,-1144,-1380,-1623,-1896,-2417,210,-1587,-1,122,1279,1970,1585,1378,2034,1123,1644,320,160,164,1,-96,-997,-1221,-790,-1298,-1364,-1317,2,-728,-1,614,1435,2484,1430,1218,1418,1074,1399,419,195,175,23,-41,-101,-229,-169,-380,-577,-734,-108,-74,148,208,2074,2290,1658,1275,1558,1112,921,376,195,90,44,0,-34,-47,-55,-60,-56,-61,-394,27,421,1360,1533,2003,1609,1676,1590,1192,1043,300,198,164,103,13,-7,-25,-25,-29,-7,-21,-141,161,340,1159,2219,2053,1559,1216,808,1074,806,312,321,192,81,45,13,-14,-16,-4,0,1,-75,687,603,875,2194,1796,1600,1700,1156,889,523,518,617,465,130,119,27,5,2,1,5,1,140,616,1018,912,2192,1338,1462,1155,1466,1285,726,637,683,521,175,68,76,27,14,12,15,3,83,567,1453,1533,1423,1232,1318,1070,1690,949,876,739,638,364,257,104,61,70,57,12,71,82,293,888,1433,1276,1554,1287,1410,1489,997,758,824,690,545,371,258,120,114,63,119,25,49,109,431,969,1316,1495,1433,1260,1216,1151,975,876,796,760,581,495,237,167,94,132,36,58,78,118,483,1090,1328,1471,1434,1285,1223,1109,959,901,819,791,597,450,277,121,109,90,35,55,76,128],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
