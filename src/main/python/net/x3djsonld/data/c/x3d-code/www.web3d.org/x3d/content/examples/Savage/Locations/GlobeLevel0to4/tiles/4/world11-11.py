###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1377,2101,1912,1493,179,187,188,214,253,779,4547,4214,4442,4961,4731,5754,5143,4909,4817,4608,4710,4539,1943,2161,2284,1600,476,417,203,228,303,2720,5533,5482,5614,4978,5060,4422,4533,5148,4793,5132,5250,5095,2115,2379,2448,1438,376,386,435,337,1065,4150,5176,5819,4463,4846,4613,4547,4994,4850,5100,4734,4728,5036,2274,3374,2456,1413,995,350,504,1683,2885,2804,4997,5495,4619,5350,5123,4903,4602,5485,5072,4803,5399,5207,2625,3709,2615,2908,1329,581,1030,1708,2084,4601,4638,4241,5360,5489,5242,5618,4865,5143,5000,4884,4990,5378,3272,3028,2752,2112,796,422,1313,1874,3703,3972,5537,6015,5439,5568,5172,5374,5031,4963,5359,5113,5050,4841,2983,3079,2398,2949,1615,921,2831,4046,4215,4130,4871,5878,5150,5014,5025,5020,5039,5087,4929,4904,4970,4899,3289,2355,3672,3692,2921,2635,1908,1236,4265,4612,5767,5412,4823,6138,5458,5074,5162,4939,5085,4830,4869,4825,1364,2546,891,3656,4052,2224,4876,2891,5054,4919,5437,5156,5743,5158,4494,5068,5149,5017,5014,4828,4955,4959,868,1120,574,3269,4667,4563,4815,5087,4836,5268,4660,4545,4302,2387,2377,3873,5115,4721,4953,5358,5062,4926,310,318,394,923,2131,4020,4350,5272,4871,3724,3477,2971,1731,1447,1418,1647,2571,4005,5465,4580,4406,4737,281,379,482,1103,2870,3841,4151,4657,4589,4519,2008,1451,1302,1283,1350,1345,1472,2134,4488,4354,5094,4080,1967,425,414,796,3613,3557,5321,4334,3318,2592,1332,1288,1251,1229,1226,1297,1273,1321,1646,4239,4217,4330,1063,1431,892,1276,2371,2790,4521,3946,4558,2535,1210,1219,1218,1188,1184,1205,1216,1188,1128,1324,3286,3672,547,2494,3220,2040,2237,5387,4737,3852,2638,1262,1181,1173,1163,1145,1138,1125,1102,1125,1107,941,1023,2311,1344,1432,2172,3276,3860,4168,4588,3798,1727,1233,1161,1125,1125,1111,1090,1070,1068,1027,1020,939,808,815,536,837,948,1535,1749,3642,2903,3145,3234,1770,1895,1116,1076,1058,1049,1015,994,999,949,901,821,805,1233,271,268,742,508,766,1718,2158,3521,3881,1763,1790,1064,1031,1012,974,940,921,887,911,832,817,241,264,258,667,727,426,901,3211,2913,3209,4440,2153,1758,1058,990,965,942,914,898,868,1004,1120,261,281,350,1248,2898,1359,1481,1474,1712,3533,4071,3939,1338,1267,991,988,933,911,890,1975,1824,1498,234,218,392,1291,2362,2873,1348,2037,3264,2942,3962,4370,3859,3920,1630,1404,1186,921,1708,1053,1467,705,182,218,237,639,2168,1515,2357,3317,3984,1601,1601,3016,3610,2810,4448,3391,2345,2854,1221,2355,1695,1117,188,184,207,757,571,747,681,654,856,3102,3517,3260,1932,1676,1946,3237,2470,2826,3219,3242,431,-36,191,183,205,815,465,605,642,621,1120,2068,2895,2592,1876,1733,1679,3648,2570,2509,3453,3675,506,179],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
