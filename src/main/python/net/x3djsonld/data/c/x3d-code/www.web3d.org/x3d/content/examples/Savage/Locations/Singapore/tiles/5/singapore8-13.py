###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore8-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2821169622239519,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[6,5,6,8,9,10,13,15,12,9,8,8,10,13,15,18,20,23,25,27,31,36,37,35,31,23,18,16,15,17,19,21,26,34,43,48,53,7,6,7,9,11,12,13,13,10,8,8,8,11,13,16,20,24,27,29,31,33,36,36,31,27,21,18,17,17,18,20,24,29,38,48,54,59,9,8,9,10,12,13,12,10,8,6,8,9,11,13,16,22,27,30,32,33,34,35,32,26,22,20,18,19,20,21,23,28,33,42,51,58,63,10,11,11,11,11,11,10,9,7,6,9,13,15,16,20,27,31,33,33,33,32,30,27,23,22,22,22,23,25,28,30,34,38,46,54,58,61,11,14,12,10,10,8,8,8,8,7,11,16,19,21,25,32,34,34,34,32,29,25,22,22,22,25,27,28,31,35,38,40,44,52,58,59,57,11,13,12,10,9,8,8,8,8,10,13,17,20,23,28,34,34,32,30,29,28,25,24,24,25,27,29,30,33,38,43,48,54,60,65,61,56,11,11,11,10,9,8,7,7,9,13,15,17,20,26,30,35,34,30,27,26,26,26,27,26,27,30,32,32,34,39,46,55,63,68,70,63,55,10,10,10,10,9,9,9,9,12,15,17,19,23,27,31,35,33,30,27,26,26,26,27,28,30,34,36,36,37,41,47,57,65,67,68,62,56,9,9,9,9,10,10,10,11,14,18,20,22,25,29,32,33,33,31,28,26,25,26,27,29,33,38,40,40,40,43,48,57,65,64,64,60,56,9,9,9,9,10,10,11,11,15,21,23,24,26,28,29,29,29,28,28,28,28,29,30,31,36,43,47,47,48,50,52,58,61,57,55,56,57,10,10,10,10,10,10,11,11,17,24,26,27,26,26,25,25,25,26,28,30,32,32,33,34,39,48,55,56,57,58,58,58,57,50,46,53,59,10,10,11,11,10,10,12,14,21,26,27,27,26,24,23,24,25,25,28,32,35,36,37,37,41,51,59,62,64,62,60,57,53,47,43,48,52,10,11,11,11,11,11,15,19,24,28,27,26,24,21,21,23,24,25,28,33,38,41,41,41,44,54,61,67,69,65,60,54,49,45,43,42,43,11,12,13,15,13,12,16,19,21,24,24,22,24,25,26,26,27,28,32,37,42,45,47,47,50,57,62,67,67,63,58,51,47,45,44,43,42,12,13,16,19,16,13,15,17,17,17,18,19,24,31,32,31,31,32,36,41,46,50,52,55,57,60,62,65,63,58,53,49,46,46,47,45,44,13,13,16,19,16,13,15,18,17,16,16,17,23,31,32,32,33,36,40,44,49,53,57,60,62,62,62,61,59,54,51,49,47,47,47,45,43,14,14,16,16,14,12,16,20,18,16,16,17,21,27,30,32,35,39,43,47,51,56,60,65,67,64,61,56,53,51,51,49,48,47,46,44,42,14,15,16,16,13,12,16,20,18,17,16,17,21,27,32,36,40,45,48,51,55,59,62,66,66,64,60,54,51,51,51,50,48,47,46,44,41,15,17,17,17,14,12,16,20,19,18,17,17,22,28,35,42,48,52,55,56,59,62,63,64,64,62,59,53,50,51,52,49,47,47,46,44,40,15,19,20,20,17,15,18,20,19,19,19,19,24,29,36,43,49,53,56,56,58,59,60,60,60,58,56,51,49,51,51,48,46,45,44,40,36,17,21,24,26,23,21,21,21,20,19,20,23,27,30,35,40,46,51,53,53,54,55,55,55,54,52,51,49,49,49,48,47,45,42,38,34,30,21,24,27,30,27,25,24,24,22,21,24,28,32,35,38,40,46,51,52,51,51,51,51,51,49,46,45,46,46,46,45,43,40,37,33,28,24,26,28,31,34,31,28,27,27,25,24,28,35,39,42,43,43,46,51,52,50,49,49,48,47,45,42,40,41,42,43,42,37,33,30,27,22,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
