###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[44,47,51,55,55,54,52,49,49,50,50,49,48,46,45,42,40,36,33,31,31,34,37,39,40,41,41,41,40,38,35,32,29,29,30,31,41,46,50,55,56,56,54,52,52,52,52,50,49,48,46,44,40,35,32,31,32,36,39,40,41,42,41,40,39,36,34,30,27,27,28,31,39,44,49,54,55,57,56,54,54,53,52,50,49,49,47,45,41,35,32,33,34,37,40,41,41,41,40,38,37,34,31,28,26,26,27,32,39,43,48,52,54,57,56,56,54,52,51,49,49,49,47,45,41,37,34,35,35,38,40,41,40,39,38,36,34,31,28,25,24,26,29,33,40,43,48,53,54,54,55,54,53,51,50,48,47,46,45,43,40,38,37,37,37,38,39,40,39,37,35,34,32,31,28,26,25,27,29,33,42,45,49,53,52,50,50,50,50,49,48,48,45,43,41,40,39,40,40,40,39,39,38,38,37,34,32,33,32,32,30,29,28,28,29,32,40,42,45,47,45,44,44,44,45,46,46,45,43,41,39,39,40,45,46,44,42,40,38,36,34,32,31,32,33,33,33,31,30,30,31,33,35,36,37,37,37,37,37,37,39,40,42,42,41,40,39,39,43,50,52,50,46,41,37,34,32,32,32,33,35,35,35,34,33,33,33,35,33,34,33,33,33,33,33,33,35,38,40,41,41,39,39,40,45,54,56,52,47,41,36,34,32,33,33,34,36,36,37,37,37,36,36,37,34,35,36,36,34,33,32,32,34,38,40,42,42,40,40,40,46,55,57,52,45,40,35,35,35,36,36,35,35,36,37,40,41,39,38,39,37,38,39,40,39,37,35,34,36,39,42,45,45,43,43,44,48,55,55,49,43,39,36,36,37,39,39,37,35,36,38,43,46,45,45,44,42,44,45,47,46,44,41,38,39,41,45,49,49,48,48,50,51,52,51,46,41,37,35,37,39,42,42,39,37,37,39,46,51,53,54,52,42,46,48,50,49,49,47,44,44,44,48,52,53,54,55,56,56,52,48,44,39,36,34,37,39,42,43,40,39,40,43,50,56,59,61,60,40,44,46,48,50,51,52,52,50,48,50,54,57,60,62,63,60,54,48,43,38,35,34,36,38,39,40,41,42,45,49,55,61,63,66,68,36,41,44,48,50,52,55,57,55,52,54,57,61,66,68,67,63,55,49,42,38,35,35,36,38,39,41,42,44,49,53,58,63,66,70,75,30,38,44,49,50,51,54,58,58,57,60,62,67,71,72,70,65,57,49,42,38,37,36,38,40,44,46,45,46,52,56,59,62,67,72,79,28,37,44,52,52,52,56,61,63,64,67,69,73,76,74,69,64,56,49,42,39,39,39,41,44,50,53,52,51,56,60,62,65,69,74,83,31,38,47,55,57,57,60,63,68,73,76,79,80,79,74,65,59,52,47,42,40,41,44,47,52,59,64,63,62,62,63,67,72,72,75,86,35,41,51,60,62,64,66,69,75,82,86,88,87,83,75,63,55,50,45,43,42,43,47,52,59,68,74,75,75,71,70,76,80,81,84,95,41,48,56,66,69,73,76,81,87,92,95,94,91,87,76,63,54,49,46,44,44,45,49,56,65,76,84,89,90,85,82,87,91,96,103,112,45,52,59,68,72,77,83,89,95,99,100,98,93,87,77,63,55,50,47,46,46,47,52,60,70,82,93,100,104,98,94,95,98,106,115,125,46,52,58,64,69,74,82,92,98,103,100,96,90,84,75,64,57,51,48,47,48,50,56,65,75,87,99,110,117,111,105,101,99,107,118,133,44,49,53,57,62,68,78,89,96,101,98,94,87,80,73,65,58,52,48,48,49,52,59,69,79,91,104,119,128,123,117,108,103,111,121,139],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
