###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world10-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5348,-5268,-5428,-5247,-5227,-5486,-5505,-5567,-5231,-4983,-4878,-4896,-4639,-5880,-5446,-4648,-4831,-4405,-4396,-3683,-3820,-2687,-5267,-5346,-5394,-5366,-5583,-5539,-5703,-5622,-5558,-5187,-5103,-5770,-5340,-5102,-5208,-4856,-4846,-4814,-4349,-3978,-3415,-3543,-5308,-5464,-5548,-5587,-5619,-5677,-5728,-5614,-5660,-5287,-5304,-5476,-5275,-5378,-5136,-4974,-4584,-4755,-4011,-3583,-3484,-2953,-5229,-5760,-5748,-5823,-5955,-5902,-5870,-5718,-5717,-5604,-5648,-5843,-5511,-5722,-5566,-4943,-5132,-4163,-4083,-4174,-3737,-2271,-5484,-5790,-5825,-5828,-5841,-5903,-5868,-5847,-5926,-5596,-6327,-5545,-5328,-6374,-5211,-4445,-4765,-4449,-4205,-4585,-4356,-3028,-5777,-5810,-5843,-5838,-5875,-5937,-5906,-5847,-5853,-6058,-5681,-5775,-5728,-5985,-4955,-5226,-5103,-4853,-4537,-3663,-3797,-4053,-5760,-5798,-5676,-5826,-5850,-5931,-6039,-5925,-6002,-6264,-5929,-5798,-5899,-5044,-5357,-4993,-5145,-4701,-4090,-3915,-4859,-3854,-5757,-5663,-5763,-5834,-5718,-5900,-5894,-5904,-5736,-5817,-5320,-6237,-5455,-5647,-5282,-5346,-5047,-4492,-4321,-3776,-4603,-3299,-5561,-5534,-5353,-5485,-5773,-5953,-5884,-5932,-5781,-5839,-5781,-5945,-5671,-5361,-5923,-4629,-4813,-4472,-4756,-4266,-3178,-3497,-5415,-5425,-5220,-5391,-5596,-6060,-5933,-5956,-5512,-6076,-5844,-5518,-5622,-5530,-5429,-5602,-5174,-4643,-4527,-3920,-3203,-3335,-5678,-5339,-5345,-5526,-5570,-5870,-5981,-6156,-5937,-6048,-6006,-6226,-5877,-5102,-4982,-4512,-5197,-5027,-4900,-3977,-3214,-2810,-5465,-5141,-5274,-5258,-5486,-5888,-5959,-5812,-6188,-5807,-6357,-6028,-5940,-4636,-5760,-5455,-5360,-4391,-4934,-4049,-4067,-3920,-5444,-5045,-5276,-5132,-5477,-5872,-5829,-5958,-6408,-6210,-5997,-5965,-5468,-5816,-5600,-5286,-5091,-5070,-4779,-4110,-3777,-3563,-5144,-5163,-4753,-5350,-5592,-5734,-5964,-6371,-5854,-6063,-5566,-5976,-5885,-5629,-5154,-5813,-4846,-5036,-4675,-4542,-4388,-4124,-5255,-5045,-5334,-5376,-5157,-5564,-5420,-5969,-5724,-5812,-5367,-5734,-5631,-5309,-5264,-4930,-4701,-4729,-4842,-4719,-3724,-3844,-5167,-5020,-5400,-5339,-5449,-5547,-5660,-5869,-5838,-6066,-5616,-5877,-5565,-5544,-5640,-5002,-4897,-5091,-4776,-4580,-4003,-3884,-5255,-5356,-5080,-4843,-5118,-5298,-5637,-5718,-5779,-5817,-5778,-5728,-5357,-5351,-5550,-5434,-4876,-5312,-4870,-4815,-3903,-3304,-5099,-5153,-4955,-4857,-4391,-5130,-5151,-5434,-5645,-5747,-5581,-5600,-5971,-5668,-5371,-5109,-4958,-4582,-4532,-4337,-4182,-3522,-5205,-5133,-5023,-4907,-4825,-5254,-5358,-5437,-5598,-5638,-5574,-5615,-5148,-5745,-5433,-4709,-5323,-4780,-4554,-4141,-4157,-4022,-5165,-5102,-4885,-4731,-5054,-4958,-4714,-5588,-5501,-5493,-5429,-5556,-5621,-5453,-5670,-5135,-5224,-4871,-4682,-4133,-4403,-3876,-5162,-5094,-4822,-4579,-4559,-5042,-4865,-5371,-5618,-5152,-5470,-5597,-5666,-5729,-5347,-5661,-5078,-5163,-4670,-4306,-4511,-3525,-5131,-4975,-4771,-4495,-4698,-4667,-4797,-5287,-5560,-5324,-5632,-5556,-5496,-5598,-5406,-5542,-5115,-5244,-5496,-4790,-4476,-4310,-5186,-4933,-4806,-4242,-4634,-4494,-4633,-5108,-5205,-5494,-5555,-5667,-5687,-5569,-5490,-5475,-5643,-5148,-5209,-4821,-4204,-4498,-5162,-4994,-4800,-4111,-4664,-4653,-4540,-5147,-5359,-5561,-5553,-5571,-5646,-5493,-5649,-5366,-5765,-5231,-5152,-5029,-4511,-4365],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
