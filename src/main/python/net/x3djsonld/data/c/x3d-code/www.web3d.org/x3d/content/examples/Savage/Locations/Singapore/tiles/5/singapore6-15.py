###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore6-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.264653537467964,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[7,7,7,6,4,7,11,13,16,19,22,17,9,7,5,5,7,9,11,11,10,11,12,13,11,11,12,11,8,5,2,1,1,1,1,3,7,6,6,7,6,5,7,10,15,19,24,28,22,13,8,3,4,6,10,13,12,8,8,11,12,12,11,11,10,7,5,3,2,2,2,2,3,7,5,6,6,6,6,7,9,15,21,26,31,24,15,8,2,3,7,10,13,10,5,6,9,11,11,11,10,8,6,5,4,4,4,4,4,5,8,4,5,6,8,10,9,9,12,16,21,26,20,12,7,3,5,9,10,9,7,5,4,5,7,8,9,8,7,5,4,4,5,5,6,8,10,12,4,5,6,10,13,11,10,11,12,16,21,17,10,8,5,7,10,9,6,5,5,4,3,4,5,7,7,6,4,4,5,7,7,8,11,14,15,3,4,4,9,14,13,12,11,11,14,18,17,13,11,8,8,8,7,5,5,7,6,5,4,5,6,6,6,5,5,7,8,8,9,13,17,19,5,4,4,9,15,16,16,14,11,13,17,17,16,15,13,10,8,6,5,6,9,9,6,5,5,6,5,5,6,7,10,11,11,12,17,22,23,9,8,7,11,14,15,16,15,14,15,16,17,16,15,14,12,12,9,7,8,10,10,8,6,5,5,5,6,9,12,15,16,17,17,21,25,27,13,12,12,12,14,15,17,18,19,17,16,16,17,16,15,16,16,13,10,9,12,11,9,7,5,5,5,8,13,17,21,23,24,24,26,29,31,16,15,14,13,14,16,18,21,23,20,15,16,17,18,19,19,19,16,12,12,14,13,11,9,7,8,9,12,16,20,26,31,32,32,33,33,35,20,18,15,15,15,16,18,23,28,22,15,15,18,20,22,22,22,19,14,13,15,15,13,12,10,11,13,16,18,22,30,37,40,40,39,38,39,22,20,18,17,15,16,19,23,27,23,18,17,18,19,21,22,22,18,12,11,13,14,14,13,12,13,16,19,20,24,31,38,43,46,45,44,46,25,23,21,17,14,17,20,22,25,24,22,20,17,18,21,22,22,17,10,9,10,12,14,14,14,16,19,22,23,26,31,38,47,52,51,50,54,27,25,21,17,13,16,20,21,21,20,18,17,16,17,20,20,20,15,10,9,10,14,17,18,19,21,26,30,32,35,38,43,52,58,59,60,64,30,26,21,16,13,16,20,20,18,15,12,14,15,17,18,19,18,15,10,10,12,16,19,22,24,27,33,39,43,45,45,48,58,65,68,70,74,27,23,18,14,12,17,25,31,36,28,17,17,18,19,20,19,18,16,13,14,17,22,27,28,29,32,38,45,52,55,54,55,62,68,72,76,78,23,19,14,12,11,20,30,44,59,43,24,21,21,21,22,21,20,18,16,19,23,29,34,35,35,37,42,50,60,65,64,63,65,69,76,82,81,19,16,12,12,11,20,29,39,49,38,25,24,26,27,26,24,22,22,22,27,32,37,42,42,40,41,44,51,62,69,72,73,72,73,78,81,81,16,14,11,11,12,19,25,29,32,28,24,27,31,32,31,28,24,25,28,34,41,46,50,50,46,44,45,51,62,71,81,84,79,76,78,80,82,14,13,11,12,13,18,23,25,27,27,26,27,29,29,28,27,25,26,30,35,41,46,51,53,52,53,54,58,64,71,82,87,85,83,82,81,77,11,12,12,13,14,17,21,23,24,26,29,28,25,24,24,25,25,27,30,34,38,43,50,55,59,62,64,66,66,71,80,87,89,90,87,82,71,11,11,12,14,17,19,21,22,23,28,32,30,27,27,28,28,29,32,36,38,38,40,45,50,57,64,71,75,73,74,80,85,85,84,78,70,59,11,11,13,16,20,21,23,23,24,29,35,34,31,32,33,33,34,38,43,42,38,37,38,44,54,65,78,83,81,80,81,81,78,72,64,54,45],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
