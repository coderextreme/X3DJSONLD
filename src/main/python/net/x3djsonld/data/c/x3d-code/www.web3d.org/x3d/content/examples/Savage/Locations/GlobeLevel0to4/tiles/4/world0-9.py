###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world0-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-90.0416666667,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2798,2799,2801,2803,2806,2808,2811,2813,2816,2819,2821,2823,2826,2829,2831,2834,2837,2839,2842,2844,2846,2848,2763,2768,2774,2780,2786,2791,2796,2798,2801,2805,2810,2815,2822,2829,2837,2846,2856,2867,2877,2887,2899,2906,2740,2744,2748,2753,2757,2762,2767,2774,2781,2789,2797,2804,2817,2830,2844,2858,2872,2885,2895,2901,2907,2913,2729,2730,2730,2731,2733,2735,2738,2743,2747,2755,2766,2781,2797,2814,2846,2882,2908,2926,2941,2956,2969,2976,2737,2741,2746,2752,2760,2766,2773,2780,2789,2799,2807,2819,2834,2852,2871,2888,2900,2912,2930,2948,2968,2980,2759,2769,2778,2788,2796,2802,2811,2821,2832,2846,2860,2874,2889,2900,2913,2931,2952,2972,2990,3001,3013,3022,2760,2771,2782,2793,2800,2811,2827,2848,2870,2892,2905,2925,2951,2978,2999,3015,3036,3057,3078,3094,3106,3113,2747,2757,2769,2783,2798,2811,2836,2868,2896,2914,2939,2968,2995,3015,3050,3086,3103,3118,3133,3146,3158,3164,2724,2734,2748,2765,2783,2800,2824,2860,2895,2917,2945,2976,3002,3038,3079,3104,3126,3147,3166,3182,3195,3201,2695,2700,2714,2736,2764,2793,2810,2837,2871,2898,2925,2961,2998,3033,3078,3107,3139,3172,3199,3222,3258,3282,2657,2667,2682,2698,2726,2767,2800,2839,2886,2911,2943,2977,3009,3060,3101,3135,3174,3203,3239,3282,3305,3317,2657,2678,2696,2710,2735,2764,2796,2826,2871,2901,2924,2957,2997,3052,3098,3145,3194,3236,3288,3311,3332,3345,2664,2690,2705,2723,2744,2773,2802,2874,2920,2946,2967,2987,3015,3068,3109,3173,3228,3293,3322,3348,3368,3378,2663,2690,2713,2748,2790,2823,2875,2908,2943,2978,3002,3029,3067,3109,3160,3200,3256,3303,3335,3362,3385,3396,2605,2639,2680,2706,2741,2788,2836,2895,2929,2970,3000,3036,3087,3140,3194,3240,3298,3329,3367,3395,3412,3428,2659,2696,2747,2812,2878,2909,2939,2964,2987,3009,3052,3122,3183,3230,3263,3306,3372,3419,3439,3454,3470,3490,2799,2857,2916,2968,2997,3012,3041,3072,3114,3164,3199,3246,3293,3327,3380,3421,3458,3486,3507,3527,3553,3577,2930,2971,3005,3040,3080,3111,3159,3204,3249,3287,3317,3359,3394,3418,3450,3485,3510,3540,3570,3598,3627,3645,3004,3039,3081,3119,3173,3225,3275,3304,3332,3366,3399,3431,3459,3469,3517,3529,3545,3565,3599,3646,3695,3708,3098,3120,3146,3184,3233,3295,3328,3349,3365,3379,3404,3455,3501,3526,3543,3555,3562,3570,3593,3683,3724,3732,3187,3203,3229,3269,3308,3337,3361,3379,3395,3433,3484,3521,3549,3564,3575,3586,3594,3601,3623,3654,3678,3688,3247,3272,3302,3334,3369,3395,3406,3426,3456,3501,3533,3562,3584,3596,3602,3614,3625,3633,3639,3642,3642,3638,3257,3282,3309,3344,3380,3401,3415,3437,3469,3507,3541,3569,3591,3600,3609,3622,3632,3638,3641,3641,3637,3631],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
