###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4709,-4823,-4290,-4440,-2763,-3101,-3697,-4150,-4458,-4861,-4867,-4816,-5062,-5276,-5287,-5511,-5544,-5460,-5370,-5297,-5139,-4988,-4847,-4468,-4899,-4416,-3261,-3258,-3640,-3984,-4655,-4723,-5299,-4841,-5701,-5481,-5254,-5682,-5219,-5341,-5347,-5416,-5401,-5110,-4730,-3153,-5168,-5223,-4783,-5044,-4734,-5868,-5592,-5194,-5310,-5167,-5694,-5775,-5728,-6060,-5284,-5420,-5554,-5186,-5344,-5096,-4407,-3761,-3047,-3691,-3863,-4435,-4541,-4882,-5236,-5065,-5279,-5546,-5476,-5378,-5925,-5870,-5387,-5342,-5183,-5290,-5270,-5109,-4141,-3718,-3065,-4278,-4722,-4395,-4760,-5077,-5149,-5284,-5116,-5657,-5547,-5527,-5841,-5560,-5381,-5375,-5446,-4892,-5029,-5098,-4420,-3900,-2716,-4155,-5030,-4998,-4977,-5165,-5198,-5949,-6143,-5622,-6104,-5583,-5704,-5838,-5268,-5269,-5152,-4944,-5006,-4957,-4214,-2882,-3587,-4287,-4906,-4986,-5077,-5821,-5312,-5823,-6595,-5496,-5856,-5794,-5668,-5665,-5392,-5176,-5088,-4922,-4792,-4827,-3993,-3253,-3703,-4236,-4584,-5093,-5172,-5352,-6026,-6113,-6276,-5802,-5588,-5847,-5734,-5657,-5338,-5171,-4913,-4721,-4586,-4623,-3501,-3272,-3933,-4567,-4675,-4935,-4928,-5265,-5858,-5510,-6167,-5875,-5906,-5808,-5595,-5599,-5261,-5057,-4700,-4469,-4534,-4423,-2808,-3205,-4137,-4683,-4794,-4980,-5453,-5639,-5342,-5547,-5589,-5847,-6024,-5922,-5603,-5418,-5177,-5067,-4611,-4530,-4215,-4239,-2807,-3765,-3968,-5181,-4607,-5107,-5377,-5470,-5268,-5707,-5959,-6017,-5843,-5758,-5554,-5464,-5105,-4915,-4646,-3315,-3511,-3297,-4458,-2952,-3991,-4422,-4899,-4716,-4800,-5402,-5070,-4900,-5675,-5653,-5592,-5538,-5452,-5308,-4988,-4881,-4812,-3969,-1117,-317,-4330,-4320,-4389,-4557,-4813,-5485,-5222,-4884,-5014,-5438,-5365,-5491,-5036,-5110,-5369,-5218,-4973,-4679,-4620,-4229,-3731,-4,-3745,-4462,-4559,-4360,-4595,-4657,-5047,-5232,-4521,-5312,-5286,-5314,-5190,-5198,-4930,-5089,-4962,-4760,-4392,-3721,-3654,-490,-3921,-4361,-4678,-4801,-4837,-4948,-5136,-5198,-5320,-4938,-5220,-5230,-5271,-4961,-4981,-4993,-4876,-4528,-4145,-944,-3245,-980,-3404,-3829,-4671,-4166,-4732,-4807,-5281,-4955,-5352,-5023,-5133,-5016,-4978,-5024,-4718,-3801,-4647,-4425,-3614,-2604,-3510,-3397,-3934,-3213,-4135,-4610,-4932,-4833,-5296,-5374,-5346,-5316,-5000,-5079,-4612,-4798,-4695,-5074,-4513,-4339,-4035,-3652,-3605,-3469,-3983,-3360,-4545,-4901,-4700,-5349,-5739,-5682,-5540,-5273,-5241,-5365,-4880,-4791,-4521,-4711,-4576,-4441,-3930,-3733,-3782,-3620,-2963,-4209,-4360,-4302,-4654,-5143,-5249,-5637,-5593,-5477,-5207,-5102,-5253,-5103,-5102,-4771,-4639,-4287,-4146,-3926,-3877,-3728,-3161,-3856,-4287,-4198,-4895,-5201,-5584,-5474,-5300,-5218,-5278,-4941,-5174,-4900,-4832,-4748,-4648,-4627,-4265,-4142,-4053,-3903,-3374,-3921,-4174,-4731,-5346,-5309,-5389,-5399,-5371,-5655,-5511,-5342,-4955,-4654,-4740,-4766,-4739,-4769,-4554,-4356,-4256,-4106,-2817,-3915,-4642,-4444,-4590,-5369,-5764,-5580,-5044,-5742,-5465,-5298,-4887,-4598,-4623,-4819,-4926,-4950,-4731,-4585,-4527,-4393,-2669,-3674,-4195,-4780,-4482,-4851,-5548,-5083,-5422,-5348,-5636,-5171,-4932,-4477,-4336,-4779,-5225,-5066,-5043,-4761,-4682,-4505,-2687,-3931,-3764,-4856,-4590,-4744,-5460,-5824,-5349,-5178,-5473,-5074,-4798,-4588,-4435,-4854,-5161,-5111,-4915,-4791,-4708,-4558],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
