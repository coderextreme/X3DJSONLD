###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4840,-4863,-4912,-4877,-4878,-4880,-4856,-4857,-4889,-4898,-4888,-4908,-4889,-4919,-4741,-4780,-4689,-4531,-4323,-4108,-4526,-4519,-4894,-4865,-4899,-4899,-4894,-4907,-4940,-4892,-4879,-4937,-4862,-4926,-4937,-4936,-4902,-4858,-4815,-4728,-4529,-4402,-4589,-4659,-4887,-4898,-4923,-4946,-4952,-4945,-4955,-4967,-4949,-5008,-4984,-4939,-4920,-4994,-4889,-4857,-4939,-4835,-4612,-4591,-4738,-4751,-4915,-4933,-4923,-4953,-4976,-5006,-4989,-4962,-4992,-5020,-4981,-4844,-5011,-4911,-4929,-4889,-4860,-4783,-4618,-4620,-4687,-4180,-4955,-4967,-4945,-4956,-4985,-5055,-5078,-5035,-5035,-5067,-5056,-5006,-4997,-4996,-5017,-4925,-4921,-4916,-4866,-4795,-4899,-4248,-4960,-5026,-4974,-4972,-4982,-5081,-5063,-5053,-5103,-5088,-5098,-5041,-4985,-5008,-5018,-5009,-5022,-5006,-4972,-4955,-5021,-4372,-5011,-5025,-4935,-4977,-4984,-5065,-5052,-5096,-5060,-5074,-5091,-5045,-5054,-5075,-5075,-5124,-5117,-5098,-5069,-5028,-5052,-4901,-4953,-4995,-4989,-4973,-4997,-5002,-5087,-5034,-5052,-5083,-5091,-5077,-5122,-5151,-5171,-5165,-5186,-5230,-5120,-5080,-5141,-5143,-4989,-4952,-4928,-5002,-5028,-5046,-5096,-5152,-5090,-5139,-5110,-5115,-5151,-5213,-5216,-5196,-5209,-5205,-5185,-5118,-5168,-5199,-4972,-4923,-4695,-4894,-5021,-4951,-5201,-5109,-5248,-5142,-5100,-5138,-5152,-5157,-5170,-5163,-5239,-5254,-5225,-5223,-5226,-5219,-4992,-4807,-4892,-4816,-5067,-5224,-4803,-5080,-5104,-5131,-5056,-5125,-5079,-5222,-5192,-5244,-5239,-5239,-5249,-5246,-5275,-5273,-4837,-4853,-4547,-5057,-5009,-5047,-5053,-4824,-5134,-4741,-5059,-5128,-5251,-5459,-5079,-5245,-5224,-5190,-5281,-5291,-5329,-5347,-4223,-5006,-4933,-4668,-4293,-5168,-4812,-4446,-4727,-5148,-5159,-5132,-4872,-5294,-5095,-5154,-5261,-5207,-5256,-5235,-5421,-5412,-4533,-4744,-4447,-3880,-3962,-4847,-4904,-4898,-4634,-4566,-4616,-4735,-5074,-4853,-5223,-5155,-5068,-5261,-5333,-5320,-5321,-5369,-5328,-5242,-5316,-5375,-3750,-4131,-3132,-4406,-4997,-4362,-4720,-4758,-4377,-4741,-5264,-5184,-5178,-5156,-5249,-5214,-5393,-5387,-3769,-4032,-3980,-3651,-3597,-3643,-3460,-3478,-3984,-4521,-4711,-5177,-4753,-4903,-5036,-5193,-5173,-5257,-5382,-5286,-5396,-5466,-4319,-3419,-3144,-3166,-3250,-3113,-3810,-3906,-4178,-4450,-3846,-5047,-4851,-5153,-5341,-4987,-5204,-5273,-5040,-5122,-4747,-5456,-4339,-4041,-3860,-3575,-2790,-3144,-3370,-4114,-3452,-3421,-3964,-4690,-4456,-4860,-4965,-5221,-4855,-5171,-4742,-4770,-5307,-5294,-4916,-4187,-4571,-4148,-3977,-3681,-3714,-3133,-2800,-4260,-3944,-3726,-3515,-4032,-4598,-4850,-4383,-4020,-5599,-4537,-4691,-4582,-4832,-4351,-3603,-4627,-4660,-4274,-3135,-3910,-5385,-4657,-3267,-4010,-4599,-3903,-3847,-4507,-4330,-3768,-4725,-4154,-4972,-4803,-5006,-4807,-4713,-4670,-4322,-5052,-4561,-4540,-4606,-4161,-3503,-3994,-3626,-4051,-4159,-4461,-3876,-3854,-3891,-3527,-3991,-4092,-4548,-4794,-4445,-4391,-4592,-4710,-4603,-4012,-4618,-4405,-3459,-3370,-3217,-3081,-3659,-3812,-2049,-3100,-2981,-3738,-3593,-3376,-4642,-4342,-4550,-5079,-4443,-4327,-4457,-4561,-4901,-4598,-4292,-3993,-3401,-3799,-3868,-3026,-2083,-2791,-2667,-3590,-3757,-3562,-3677,-4377,-4644,-5173,-4576,-4740,-4170,-3984,-4745,-4231,-4576,-4486,-3693,-4030,-3635,-3598,-2435,-2493,-2726,-3528,-3647,-3295],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
