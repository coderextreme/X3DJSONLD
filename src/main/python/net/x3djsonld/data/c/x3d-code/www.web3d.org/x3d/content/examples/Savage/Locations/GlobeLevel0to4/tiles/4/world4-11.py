###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2890,-2141,-3237,-3532,-3355,-3365,-3710,-3836,-3377,-3613,-3567,-3375,-3512,-3432,-3491,-3534,-3516,-3602,-3511,-3550,-3423,-3326,-4136,-3839,-3549,-3753,-3454,-3477,-3474,-3570,-3715,-3677,-3600,-3425,-3261,-3479,-3315,-3558,-3480,-3637,-3429,-3491,-3381,-3314,-4378,-4071,-4008,-3963,-3515,-3819,-3698,-3467,-3574,-3908,-3522,-3412,-3409,-3556,-3349,-3462,-3664,-3680,-3431,-3485,-3310,-3304,-4465,-4172,-3900,-3961,-3691,-3793,-3664,-3576,-3306,-3507,-3374,-3422,-3359,-3337,-3570,-3234,-3376,-3186,-3302,-3319,-3217,-3087,-4465,-4413,-3945,-3763,-4040,-3731,-3736,-3574,-3433,-3278,-3345,-3347,-3276,-3220,-3142,-3259,-3204,-3462,-3062,-3151,-3087,-3047,-4336,-4298,-4204,-4008,-3847,-4060,-3751,-3477,-3351,-3069,-3221,-3458,-3178,-3145,-2949,-3000,-3007,-3041,-3056,-2970,-2883,-2920,-4347,-4306,-4215,-4153,-4033,-4099,-3653,-3610,-3437,-3182,-3101,-3092,-2996,-3036,-2673,-2676,-3708,-3015,-2821,-2977,-2884,-2770,-4400,-4400,-4160,-4097,-3948,-3885,-3817,-3702,-3317,-3230,-2996,-3007,-3064,-2884,-2763,-2795,-2968,-3146,-2902,-2858,-2635,-2740,-4426,-4210,-4118,-4026,-3996,-3911,-3785,-3644,-3339,-3204,-3115,-2906,-2798,-2722,-2549,-2798,-3143,-3487,-2880,-2579,-2445,-2580,-4424,-4173,-4100,-4030,-4223,-4113,-4070,-3807,-3555,-3228,-3163,-2815,-2778,-3380,-2771,-2922,-3162,-3414,-2617,-2713,-2786,-2818,-4382,-4130,-4007,-4101,-4131,-4076,-4074,-3782,-3896,-3099,-2714,-2348,-2996,-3130,-2997,-3078,-3207,-3316,-3555,-2769,-2980,-2981,-4357,-4246,-3916,-4148,-4132,-4141,-4059,-3697,-3449,-3246,-2361,-2650,-3055,-3234,-3228,-3253,-3297,-3386,-3444,-3239,-3184,-3079,-4651,-4188,-4191,-4211,-4176,-4293,-4014,-4018,-3731,-3635,-2242,-2293,-3196,-3299,-3326,-3377,-3408,-3437,-3504,-3594,-3414,-3239,-4410,-4347,-4185,-4189,-4184,-4338,-4180,-4244,-3727,-3216,-2013,-1908,-3139,-3234,-3407,-3443,-3483,-3532,-3590,-3591,-3515,-3526,-4416,-4209,-4207,-4232,-4119,-4372,-4317,-4115,-3945,-3032,-359,-1778,-3211,-3403,-3500,-3460,-3634,-3639,-3580,-3658,-3551,-3623,-4345,-4267,-4207,-4346,-4373,-4215,-4392,-4003,-3862,-3213,-1918,-1990,-2508,-3443,-3622,-3511,-3633,-3786,-3596,-3610,-3670,-3723,-4440,-4299,-4151,-4255,-4396,-4294,-4319,-4029,-4196,-3170,-2321,-1451,-1832,-3593,-3678,-3585,-3623,-3749,-3703,-3650,-3499,-3631,-4572,-4333,-4210,-4307,-4396,-4312,-4338,-4111,-3883,-3251,-3062,-1916,-2308,-3607,-3615,-3781,-3756,-3835,-3834,-3763,-3671,-3650,-4363,-4452,-4419,-4206,-4372,-4506,-3934,-3898,-3539,-4069,-2720,-2621,-2399,-2020,-3694,-3859,-3872,-3935,-3954,-3874,-3716,-3568,-4251,-4462,-4383,-4425,-4336,-4236,-4067,-4131,-3745,-3082,-3474,-2570,-1565,-2372,-3711,-3838,-3944,-3995,-4037,-3922,-3874,-3864,-4300,-4436,-4384,-4537,-4378,-4921,-4299,-3896,-3460,-3389,-2913,-3048,-2777,-2704,-3638,-3848,-3870,-4025,-3936,-3948,-3960,-4010,-4443,-4468,-4365,-4400,-4142,-4100,-4343,-3832,-3732,-3465,-2777,-2405,-2893,-1006,-3107,-3787,-3890,-4033,-3744,-3879,-4046,-4041,-4521,-4533,-4456,-4343,-4238,-4288,-4562,-4248,-4095,-3502,-2997,-2596,-3013,-3036,-2936,-3639,-3730,-3956,-3648,-3545,-4050,-4077,-4512,-4576,-4404,-4629,-4322,-4398,-4945,-4041,-3720,-3165,-3012,-2642,-3084,-3035,-2709,-3418,-3481,-3927,-3481,-3629,-4062,-4015],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
