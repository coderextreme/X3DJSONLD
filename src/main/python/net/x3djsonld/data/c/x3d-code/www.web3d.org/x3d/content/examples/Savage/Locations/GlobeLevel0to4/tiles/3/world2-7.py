###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_27',geoSystem=['GDC'],position=(-33.79166499031936,157.4583433915838,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-33.79166499031936,157.4583433915838,0.0),range=4495500.0,child1Url=['../../tiles/4/world4-14.x3d'],child2Url=['../../tiles/4/world4-15.x3d'],child3Url=['../../tiles/4/world5-14.x3d'],child4Url=['../../tiles/4/world5-15.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world2-7.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4217,-4080,-3850,-4344,-4649,-2699,-2008,-4381,-4465,-4609,-4665,-4908,-4957,-4355,-139,-147,-741,-1538,-2029,-2693,-3281,-4460,-4329,-4062,-4590,-4992,-2032,-3991,-4533,-4661,-4602,-4985,-4875,-4605,-4668,-4454,920,545,-1465,-1123,-2368,-2463,-4636,-4610,-4267,-4718,-4920,-2432,-3000,-2779,-4610,-4614,-4646,-5291,-4896,-4718,-4282,334,786,-96,-590,-1128,-1098,-4815,-4787,-4695,-4651,-4630,-44,-29,-3108,-4599,-4602,-4693,-4871,-4950,-4636,-4102,-1141,76,7,-278,-216,-441,-5001,-4933,-4828,-4648,-4339,298,421,-4341,-4907,-4614,-4705,-4678,-4908,-4596,-4086,-1507,-529,1285,-2286,-2951,-2599,-5117,-5126,-4942,-5041,-2414,248,114,-4352,-4858,-4683,-4540,-4900,-4787,-4783,-4072,-1040,-623,883,35,-1845,-2991,-5368,-5152,-5125,-4441,-108,-74,82,-4389,-4868,-4573,-4850,-4732,-4794,-3721,-3678,-874,-783,-154,-30,-427,-2938,-5621,-5489,-5468,-1959,-44,-75,-66,-4374,-4667,-4321,-4486,-4708,-4755,-3686,-3030,-488,-646,-145,348,258,-3438,-5545,-5464,-2264,59,242,266,87,-527,-4766,-4552,-4620,-4942,-4895,-2550,-1971,-678,-1328,-1583,57,-61,-1532,-5352,-2460,-51,127,206,216,1080,-93,-4699,-4469,-4616,-4788,-4124,-2436,-1290,-1620,-2020,-1669,82,-1804,-2625,-2511,-78,-30,116,120,112,686,35,-4856,-4521,-4652,-4886,-3127,-1458,-939,-2682,-1664,-637,-148,-2158,-2603,-92,-37,219,34,66,116,341,715,-5111,-4716,-4649,-4983,-2343,-1177,-2857,-1534,-1946,-28,-1849,-2435,-2432,-56,252,544,52,69,120,231,986,-2816,-4797,-4731,-3872,-1430,-1017,-2939,-2086,-1375,-2384,-2736,-3266,-2946,62,195,312,176,62,228,222,400,1,-4583,-4106,-4467,-1417,-1833,-2489,-1352,-3747,-2008,-3840,-3709,-3182,114,91,305,122,99,221,180,367,436,-4810,-4069,-2094,-1420,-1657,-3000,-2720,-4996,-1063,-3580,-3996,-1860,156,118,383,78,169,105,128,1059,1064,-4671,-4918,-2368,-1289,-1732,-2816,-2589,-3076,-1621,-4009,-4248,-2767,164,36,51,133,112,143,162,249,790,-4554,-4622,-2543,-1441,-1940,-3112,-82,-2533,-2693,-4252,-4249,-3211,204,26,71,133,115,190,201,233,689,-3366,-4210,-3429,-1486,-1671,-3509,-2905,-2869,-2766,-4115,-4019,-3212,227,36,31,97,180,278,325,291,191,-4762,-4837,-2818,-1561,-1539,-3580,-3264,-3840,-3384,-4036,-4250,-2981,313,88,37,126,184,354,423,309,49,-4656,-4545,-2601,-1398,-1562,-3564,-2503,-2587,-4029,-4648,-4353,-1940,325,149,67,120,246,342,931,176,39,-4241,-2896,-2677,-1403,-2696,-3555,-1364,-3991,-4048,-4550,-4455,-2184,355,154,68,134,281,346,781,198,-5,-4265,-2792,-2745,-1342,-2629,-3584,-557,-4012,-4007,-4523,-4429,-1920],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
