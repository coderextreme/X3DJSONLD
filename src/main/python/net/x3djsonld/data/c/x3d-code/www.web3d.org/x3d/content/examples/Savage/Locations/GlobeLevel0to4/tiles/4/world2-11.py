###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[292,13,-185,-5,-450,-695,-684,-517,-467,-437,-422,-459,-348,-148,280,597,877,1183,1206,1279,1288,1350,-369,-396,-299,-297,-394,-572,-595,-458,-390,-263,-345,-253,-488,-231,-1,-93,159,436,557,726,853,883,-718,-2167,-1682,-865,-518,-503,-491,-1306,-1603,-1125,-827,-294,-370,-224,-118,9,-6,-10,0,-12,-11,211,-2244,-2974,-1994,-2318,-2157,-1834,-2026,-2635,-2788,-2737,-3108,-2375,-1175,-649,-317,-219,-178,-116,51,204,0,-249,-3279,-3132,-2401,-2515,-2750,-2638,-2909,-2782,-3189,-3041,-2947,-3233,-2923,-1837,-1193,-948,-600,-1021,-957,-721,-560,-1000,-3423,-2821,-2872,-2767,-3006,-3071,-3158,-3184,-3164,-3500,-3451,-3448,-3435,-3172,-2896,-3227,-2933,-2587,-2796,-2538,-2351,-2130,-3445,-3096,-3035,-3152,-3296,-3479,-3606,-3426,-3278,-3383,-3439,-3506,-3548,-3610,-3529,-3345,-3457,-3466,-3472,-3258,-3187,-3090,-3732,-3487,-3240,-3357,-3457,-3471,-3693,-3623,-3574,-3531,-3623,-3699,-3520,-3763,-3759,-3665,-3741,-3603,-3603,-3455,-3512,-3568,-3858,-3699,-3461,-3711,-3562,-3641,-3716,-3728,-3709,-3655,-3647,-3635,-3642,-3644,-3650,-3641,-3651,-3751,-3710,-3678,-3679,-3687,-4095,-4028,-3898,-3946,-3894,-3922,-3839,-3889,-3790,-3748,-3806,-3831,-3715,-3537,-3253,-2568,-2797,-3845,-3607,-3802,-3815,-3838,-4344,-4236,-4131,-4043,-4076,-3991,-3951,-3873,-4003,-3842,-3824,-3870,-3513,-3049,-2796,-2320,-2592,-3176,-3283,-3652,-3791,-3838,-4416,-4450,-4271,-4119,-4090,-4097,-4006,-4027,-3914,-4008,-4029,-3642,-2796,-2501,-1827,-2181,-2683,-3283,-3639,-3640,-3544,-3892,-4391,-4421,-4390,-4161,-4085,-4124,-4154,-4104,-4052,-4046,-3604,-3138,-2307,-2096,-2207,-2351,-2915,-3424,-3764,-3613,-3886,-4004,-4413,-4353,-4387,-4224,-4215,-4234,-4111,-3944,-3980,-3697,-3346,-3293,-2894,-2274,-2116,-1637,-2552,-3014,-3238,-3841,-4200,-4186,-4465,-4360,-4439,-4396,-4202,-4158,-3480,-3630,-3328,-3157,-3436,-2901,-2763,-1992,-1863,-1324,-2157,-3555,-3840,-4172,-4286,-4279,-4533,-4449,-4414,-4523,-4397,-4390,-3643,-3234,-2248,-2333,-2808,-2678,-2351,-1720,-1616,-1571,-1611,-2702,-4074,-4465,-4434,-4441,-4712,-4607,-4431,-4469,-4400,-3944,-2632,-1901,-1808,-1361,-1516,-2266,-2194,-1776,-1021,-1333,-1534,-2049,-4092,-4523,-4681,-4682,-4747,-4521,-4500,-4693,-4634,-4428,-3112,-1619,-1300,-1182,-1127,-1366,-1865,-1966,-1817,-1311,-2194,-3961,-4520,-4599,-4644,-4567,-4772,-4591,-4640,-4803,-4610,-4406,-3379,-1870,-1193,-1149,-690,-1427,-1228,-1707,-1455,-1878,-2250,-4079,-4694,-4727,-4767,-4766,-4570,-4405,-4540,-4969,-4523,-4565,-3826,-2767,-1876,-1384,-1802,-1460,-1541,-1654,-1610,-2509,-3613,-4041,-4760,-4840,-4898,-4809,-2368,-4485,-4425,-4387,-3867,-4094,-3469,-3007,-2736,-1602,-2008,-1687,-1652,-1693,-1911,-2764,-4665,-4620,-4858,-4828,-4862,-4772,-4154,-4364,-2758,-2192,-1802,-2401,-3295,-3332,-2644,-2423,-2181,-1641,-1620,-1949,-2593,-4349,-4504,-4760,-4772,-4728,-4726,-4611,-2499,-1076,-1314,-2153,-1549,-1591,-2552,-2971,-2420,-2273,-2428,-1866,-1895,-3327,-4395,-4557,-4549,-4482,-4724,-4560,-4470,-4369,-2224,-947,-1632,-2225,-1747,-1506,-2321,-3010,-2547,-2226,-2456,-1766,-1994,-3533,-4379,-4469,-4550,-4476,-4799,-4540,-4472,-4275],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
