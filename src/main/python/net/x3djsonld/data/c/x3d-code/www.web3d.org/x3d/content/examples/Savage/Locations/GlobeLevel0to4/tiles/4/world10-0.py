###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world10-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4773,-5075,-4993,-5551,-5528,-5390,-5092,-4834,-3240,-3048,-5077,-4837,-4991,-4909,-4867,-4872,-4693,-4671,-4672,-4674,-4121,-1896,-3058,-5334,-5649,-5584,-5610,-5557,-5364,-5240,-5012,-4424,-3327,-3192,-4651,-4790,-4793,-4758,-4744,-4677,-4349,-3334,-2659,-382,-4615,-5171,-5650,-5646,-5443,-5387,-5290,-5018,-4997,-4828,-4739,-4489,-4752,-4646,-4169,-4691,-4654,-4540,-2725,-724,-2456,-3274,-5143,-5403,-5629,-5661,-5440,-5300,-5205,-4996,-4842,-4754,-4666,-3970,-3804,-4656,-4640,-4506,-4280,-4494,-4421,-2265,-4743,-4838,-5339,-5679,-5695,-5580,-5330,-5203,-5110,-4860,-4806,-4677,-4657,-4853,-4831,-3882,-4657,-4341,-3937,-3201,-4807,-4144,-4815,-4580,-5612,-5673,-5604,-5493,-5128,-5127,-4928,-4778,-4735,-4653,-4711,-4864,-4817,-4333,-2929,-2823,-844,-3440,-4821,-4821,-3082,-4390,-5634,-5680,-5536,-5374,-5076,-5084,-4886,-4700,-4708,-4617,-4802,-4946,-3345,-487,-3678,-4514,-4743,-4433,-4787,-4185,-4614,-4338,-5529,-5586,-5302,-5296,-5171,-5086,-4704,-4522,-4701,-4787,-4641,-1154,-226,-3639,-4834,-4874,-4849,-4218,-4736,-4725,-4599,-4444,-5690,-5459,-5312,-5207,-5131,-4835,-4496,-4042,-4580,-3723,-3743,-37,-3374,-4910,-5009,-4954,-4899,-4906,-4725,-4663,-4597,-4359,-5566,-5522,-5268,-5237,-5097,-4637,-3099,-1482,-3738,-1052,-3690,-454,-4203,-4844,-4908,-3426,-4955,-4885,-4958,-4629,-4870,-4533,-5385,-5413,-5140,-5237,-5170,-4322,-809,-3767,-3593,-3701,-3766,-3991,-4774,-4664,-4502,-4892,-4936,-5017,-4980,-3893,-5095,-5117,-5333,-5214,-4318,-4881,-5177,-144,-3915,-4800,-4438,-4569,-4523,-4372,-4450,-4447,-4787,-4895,-5049,-5049,-5034,-4632,-4426,-5179,-5308,-5286,-5073,-3677,-3471,-5118,-5009,-4886,-4884,-4499,-4376,-3087,-1029,-4666,-4683,-4946,-4953,-4403,-4982,-5089,-5294,-5237,-5270,-5247,-4882,-4872,-5221,-5275,-5126,-4885,-4862,-4584,-4335,-4409,-4754,-4640,-4756,-5007,-5010,-3894,-4442,-3643,-5357,-5296,-5202,-5008,-2821,-4810,-1987,-5159,-5186,-4964,-4893,-4731,-4476,-4447,-4573,-4763,-5095,-5185,-5115,-4225,-5178,-5115,-5546,-5659,-5132,-4482,-4290,-3698,-4116,-5400,-5134,-4885,-4850,-4636,-4720,-4650,-4885,-4862,-5156,-5340,-5176,-4933,-5230,-5578,-5310,-5659,-4827,-1043,-4152,-3461,-5070,-5363,-5199,-5099,-4713,-4883,-4867,-4906,-5051,-5252,-5244,-5139,-3935,-5421,-5559,-5465,-6154,-5986,-4978,-4041,-5564,-5601,-5280,-5350,-5152,-5019,-5109,-5058,-5127,-5151,-5127,-5305,-5334,-5473,-5469,-5264,-5322,-5730,-5712,-5663,-4879,-5019,-5504,-5380,-5295,-5237,-5158,-5265,-5196,-5078,-5280,-5383,-5361,-5406,-5416,-5709,-5515,-5556,-5528,-5627,-5622,-5924,-5318,-5189,-5203,-5329,-5200,-5377,-5401,-5372,-5436,-5488,-5433,-5459,-5532,-5548,-5388,-5335,-5574,-5698,-5545,-5735,-5829,-5876,-5083,-5175,-5170,-5349,-5296,-3203,-4637,-5390,-5605,-5534,-5498,-5504,-5697,-5659,-5544,-5819,-5312,-5667,-5521,-5721,-5764,-5786,-4948,-5271,-4957,-5225,-5404,-4626,-5564,-5452,-5588,-5643,-5574,-5650,-5719,-5890,-5693,-5660,-5736,-5514,-5443,-5569,-5863,-5925,-4534,-5190,-5172,-5338,-5386,-4937,-5507,-5459,-5556,-5625,-5807,-5685,-5717,-5780,-4794,-5604,-4797,-3661,-5495,-5630,-5623,-5771,-5190,-5259,-5275,-5309,-5373,-5282,-5502,-5613,-5572,-5680,-5789,-5693,-5803,-5799,-5884,-5474,-4193,-4888,-5558,-5653,-5673,-5777],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
