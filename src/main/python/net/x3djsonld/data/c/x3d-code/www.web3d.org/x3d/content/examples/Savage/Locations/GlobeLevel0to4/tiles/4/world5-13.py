###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2281,-2668,-2586,-221,-1,158,153,-8,-371,-689,-195,-459,-3417,-4085,-4343,-4164,-3968,-2945,-1443,-1160,-408,-109,-2157,-2595,-2906,-146,151,253,246,188,-3,-154,-2,-3,-1,-1011,-3282,-3098,-3151,-1856,-1144,-944,-123,-88,-2730,-2655,-2730,-119,121,251,322,364,205,146,137,141,-13,-236,-810,-999,-2040,-831,-656,-128,-101,-102,-4402,-3591,-2529,-203,28,288,291,310,389,255,226,168,-62,-54,-97,-18,-96,-65,-106,-89,-69,-32,-4838,-4583,-4178,-679,9,332,351,399,409,353,292,186,133,-41,-60,-42,-50,-64,-68,-79,-57,-7,-5029,-4958,-4730,-1403,3,208,303,418,422,352,341,239,153,109,14,17,-37,-44,-65,-21,4,40,-5055,-5014,-4730,-1439,66,248,269,405,400,435,301,306,163,145,124,117,105,73,-2,47,104,110,-5133,-5069,-4868,-1226,81,285,310,434,413,364,308,312,181,177,169,166,148,123,84,72,131,140,-5137,-5013,-4978,-194,286,288,344,421,494,398,338,406,203,201,199,191,174,146,117,105,222,143,-5158,-5035,-4585,-57,280,296,353,411,467,380,372,376,280,219,238,219,192,159,153,187,147,208,-5424,-5169,-2278,-40,252,338,328,488,471,380,358,400,397,212,215,220,211,184,228,219,166,165,-5403,-4245,-1222,-16,304,347,375,425,421,422,400,441,375,278,211,244,288,265,230,224,197,175,-5628,-3194,-126,200,325,354,441,429,489,427,424,468,412,325,365,313,312,404,396,278,232,222,-5455,-1184,-4,267,282,409,412,530,425,467,473,426,365,366,422,343,443,345,381,403,291,233,-4147,-858,-72,235,275,398,430,504,522,470,533,520,449,364,474,361,346,398,427,402,348,294,-2856,-598,-88,175,311,405,454,518,563,491,522,446,381,445,492,402,403,588,494,476,428,342,-2190,-489,5,140,283,402,454,601,513,507,490,469,454,467,530,417,463,622,573,559,451,312,-1589,-147,26,121,274,366,412,518,575,528,448,477,423,471,469,475,590,869,715,618,521,426,-1433,-116,-2,84,278,407,465,574,538,563,524,457,467,440,488,552,626,705,590,527,490,405,-1146,-103,-4,97,210,371,430,534,608,542,503,431,450,448,481,491,645,626,481,502,492,396,-1170,-61,4,130,289,421,522,618,611,554,501,429,432,439,465,435,497,506,480,573,464,403,-1795,-469,-1,162,279,399,381,492,619,543,519,404,422,410,454,399,461,512,683,731,648,546,-3498,-820,-19,141,311,352,347,587,619,556,389,379,406,407,356,457,434,554,635,874,732,741,-3722,-882,-43,149,310,351,368,636,582,567,391,390,396,401,338,458,425,574,647,700,679,725],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
