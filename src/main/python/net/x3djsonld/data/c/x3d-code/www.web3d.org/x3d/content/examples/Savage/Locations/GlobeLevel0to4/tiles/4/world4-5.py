###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[669,-124,-88,-114,-90,-89,-112,-177,-1640,-3281,-4655,-5405,-5748,-5917,-6013,-6030,-5920,-5649,-5543,-5359,-5229,-5220,624,67,-33,-84,-91,-96,-81,-117,-1325,-3418,-4829,-5482,-5625,-5833,-5962,-5951,-5784,-5547,-5434,-5295,-5186,-5037,653,386,75,-105,-74,-103,-118,-209,-1458,-2710,-4555,-5441,-5575,-5771,-5897,-5853,-5681,-5446,-5283,-5202,-5155,-5013,412,307,307,-70,-82,-96,-127,-58,-1651,-2327,-4593,-5181,-5454,-5679,-5866,-5749,-5498,-5322,-5125,-5066,-5069,-4962,343,370,258,-91,-28,-96,-76,-137,-1293,-2806,-3979,-5079,-5415,-5669,-5837,-5630,-5384,-5275,-5300,-5212,-5169,-5135,290,126,171,-15,-33,-61,-93,-2,-301,-2051,-3687,-4912,-5289,-5613,-5806,-5665,-5484,-5484,-5370,-5224,-5191,-5172,1294,145,127,-30,-8,-76,-87,-67,-124,-1533,-2616,-4661,-5128,-5542,-5737,-5704,-5595,-5689,-5483,-5225,-5200,-5106,1207,501,319,-30,-24,-68,-74,-61,-47,-414,-1811,-4100,-4965,-5528,-5693,-5670,-5681,-5836,-5499,-5234,-5180,-5021,1003,1082,412,-175,-55,-42,-54,-77,-84,-107,-1195,-3443,-4555,-5379,-5586,-5605,-5722,-5667,-5545,-5237,-5091,-5081,863,983,322,-125,-1,-23,-47,-69,-76,-95,-436,-1982,-4520,-5177,-5540,-5557,-5509,-5543,-5431,-5179,-5115,-5103,866,406,188,112,16,10,-38,-56,-45,-91,-88,-1425,-3669,-5149,-5379,-5517,-5481,-5452,-5376,-5225,-5136,-5101,714,299,61,117,57,19,-24,-54,-81,-66,-101,-920,-2139,-4686,-5227,-5521,-5456,-5423,-5369,-5265,-5173,-5144,588,60,149,132,67,10,-18,-45,-73,-82,-96,-125,-1549,-4344,-4969,-5264,-5392,-5414,-5358,-5255,-5185,-5165,463,191,211,142,54,11,-15,-27,-45,-70,-97,-98,-968,-3724,-4666,-5072,-5315,-5337,-5325,-5236,-5178,-5173,317,257,203,186,9,60,130,49,18,-43,-78,-81,-813,-2805,-4416,-5070,-5203,-5242,-5269,-5208,-5182,-5170,367,319,283,177,129,215,357,152,107,52,-35,-82,-659,-2263,-4059,-4556,-4980,-5182,-5166,-5166,-5192,-5131,397,323,233,236,176,336,242,215,280,71,-12,-81,-375,-1254,-3741,-4268,-4813,-5146,-5106,-5141,-5132,-5132,590,266,281,286,133,151,161,210,151,45,6,-32,-98,-1135,-3339,-4155,-4654,-4960,-5038,-5068,-5090,-5082,713,288,305,268,135,120,110,145,90,23,1,-21,-68,-599,-2729,-3717,-4442,-4759,-4856,-4966,-5034,-5052,767,318,317,239,122,92,99,74,45,10,-6,-11,-50,-89,-1767,-3330,-4054,-4559,-4796,-4882,-4954,-4952,764,355,337,216,119,89,82,57,25,12,-17,-17,-16,-60,-443,-2621,-3697,-4336,-4694,-4845,-4874,-4845,497,385,359,234,123,100,82,59,29,18,-10,-10,-32,-27,-141,-1972,-3555,-4139,-4633,-4794,-4784,-4825,534,396,408,229,130,108,83,66,39,-20,-30,37,55,-40,-33,-1391,-3074,-3593,-4320,-4705,-4716,-4825,533,391,417,234,141,109,86,66,27,-27,-34,32,62,-23,-58,-1204,-3020,-3504,-4263,-4656,-4811,-4791],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
