###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world15-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(78.7083383624419,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[672,1,-32,112,18,13,163,216,460,768,911,1049,1331,1503,1653,1782,1870,1998,2183,2343,2437,2493,585,1102,1264,1216,1220,1177,1056,985,964,1037,1205,1365,1607,1788,1919,1983,2059,2226,2321,2391,2435,2443,518,445,305,947,1124,1145,1138,1234,1402,1553,1817,1975,2056,2127,2198,2208,2263,2334,2394,2434,2448,2453,1106,633,886,1116,1192,1198,1346,1485,1675,1934,2121,2230,2281,2286,2297,2298,2300,2324,2372,2432,2455,2460,1190,1205,1184,1193,1204,1183,1221,1400,1664,1902,2113,2192,2209,2231,2281,2291,2286,2278,2286,2331,2393,2423,239,383,516,667,815,949,1041,1140,1364,1674,1826,1933,1976,2023,2137,2153,2158,2189,2230,2273,2287,2315,-319,-162,-63,103,346,604,819,971,1067,1189,1428,1550,1671,1720,1787,1848,1949,1984,2030,2102,2143,2179,-95,-102,-189,17,182,354,564,728,926,1105,1283,1460,1575,1635,1688,1807,1845,1844,1829,1832,1890,1939,-196,2,71,234,303,360,561,609,717,995,1184,1397,1513,1542,1623,1729,1815,1760,1661,1596,1555,1568,-306,-327,-57,415,219,582,170,331,625,1049,1228,1148,1090,1083,1125,1175,1173,1139,1067,1037,1151,1212,456,297,306,-441,-143,-490,492,213,718,854,389,224,340,344,515,713,800,813,779,739,753,772,610,646,659,301,-474,-699,1,1,1,57,325,608,606,224,127,128,52,147,609,609,604,123,581,692,609,522,627,609,290,-399,-421,-452,-301,39,284,309,535,110,1,1,1,149,540,58,655,-35,510,63,5,-165,-89,-107,-97,-117,-199,-347,-508,-476,-507,-525,-43,-99,249,-60,-39,1,-171,-269,-226,-93,-101,-110,-155,-191,-196,-201,-222,-226,-281,-326,-353,-419,-394,-374,-304,-256,-209,-194,-185,-243,-271,-298,-349,-382,-416,-468,-503,-398,-319,-300,-291,-292,-292,-291,-275,-284,-271,-283,-296,-289,-1126,-1231,-1271,-1303,-1435,-1585,-1612,-1628,-1569,-1543,-1319,-1212,-662,-619,-745,-943,-1326,-1547,-1503,-1423,-1405,-1393,-670,-729,-842,-1032,-1127,-1198,-1254,-1612,-1900,-2003,-2052,-2282,-2397,-2422,-2476,-2524,-2554,-2585,-2603,-2523,-2502,-2395,-574,-451,-397,-399,-398,-394,-400,-416,-425,-455,-502,-584,-661,-874,-1207,-1707,-1863,-2283,-2836,-2877,-2875,-2841,-1129,-1107,-1009,-743,-641,-569,-520,-505,-508,-513,-505,-441,-411,-514,-647,-1511,-2362,-2485,-2893,-3005,-2997,-2999,-1884,-1922,-1813,-1478,-1177,-1029,-865,-776,-687,-623,-623,-646,-736,-718,-1540,-1903,-2046,-2339,-2415,-2761,-2731,-2873,-2389,-2378,-2189,-1943,-1580,-1289,-1172,-1090,-1028,-872,-783,-780,-815,-801,-871,-1320,-2253,-2375,-2006,-1691,-2107,-2285,-2210,-1957,-1602,-1219,-1233,-1225,-1187,-1174,-1185,-1212,-1146,-1206,-1288,-1547,-1749,-1829,-1993,-2150,-2341,-2617,-2998,-3302,-2005,-1658,-1439,-1202,-1192,-1180,-1155,-1137,-1145,-1123,-1081,-1126,-1275,-1451,-1590,-1727,-1991,-2470,-2525,-2920,-3369,-3389],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
