###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4470,-4453,-4538,-4554,-3958,-2395,-1872,-2540,-2237,3,717,73,-4,-211,-3658,-3648,-3615,-3592,-3558,-3515,-3428,-3414,-4381,-4426,-4451,-4531,-3923,-2593,-1557,-2407,-1760,3,2105,147,-48,-254,-3675,-3620,-3571,-3525,-3499,-3478,-3383,-3338,-4343,-4419,-4415,-4555,-3738,-1339,-1870,-2225,-479,36,306,121,11,-1829,-3720,-3563,-3543,-3493,-3436,-3382,-3339,-3289,-4287,-4336,-4373,-4348,-2719,-506,-1816,-2122,-4,90,323,168,9,-2652,-3653,-3501,-3501,-3424,-3373,-3310,-3276,-3225,-4247,-4335,-4325,-4478,-2885,-1493,-1979,-1394,-3,892,538,431,25,-2650,-3592,-3485,-3469,-3360,-3296,-3266,-3237,-3189,-4192,-4223,-4287,-4283,-2877,-1054,-2142,-777,69,760,542,372,63,-2716,-3514,-3412,-3391,-3307,-3241,-3199,-3191,-3121,-4148,-4163,-4294,-4214,-2629,-1680,-2002,-308,105,816,693,433,100,-508,-3541,-3409,-3333,-3262,-3203,-3140,-3130,-3050,-4076,-4131,-4160,-4106,-2530,-947,-1709,-59,959,897,903,742,107,-742,-3524,-3364,-3282,-3199,-3154,-3093,-3075,-3011,-4021,-4104,-4103,-3947,-2281,-1625,-1201,-96,677,661,656,632,89,-2665,-3426,-3329,-3224,-3181,-3096,-3027,-3006,-2936,-3994,-4059,-4069,-4072,-2548,-1782,-851,-100,663,709,577,260,111,-2487,-3214,-3294,-3158,-3205,-3021,-2960,-2944,-2936,-3940,-4001,-3971,-3509,-2543,-2093,-323,-3,545,655,432,162,82,-2343,-3077,-3228,-3113,-3129,-2932,-2941,-2881,-2836,-3882,-3910,-3891,-3625,-2454,-2165,-134,65,625,492,463,190,78,-883,-2507,-2980,-3095,-3000,-2877,-2841,-2790,-2793,-3885,-3814,-3779,-3743,-2800,-1698,-110,654,617,571,390,249,90,-58,-1319,-2889,-3155,-2951,-2806,-2753,-2712,-2686,-3761,-3275,-3704,-3718,-2847,-1353,-58,733,575,497,375,415,167,10,-137,-2229,-3115,-2942,-2741,-2672,-2670,-2603,-3687,-3104,-3610,-3580,-2849,-717,-60,548,591,500,415,543,117,47,12,-998,-2760,-2792,-2687,-2598,-2558,-2497,-3597,-3497,-3558,-3390,-2205,-66,-50,589,569,444,423,602,209,135,62,-361,-2346,-2678,-2613,-2491,-2503,-2358,-3494,-3454,-3419,-3124,-281,-28,-79,696,468,559,598,592,268,146,836,77,-114,-2861,-2496,-2426,-2221,-2218,-3355,-3370,-3380,-2590,-97,-100,169,720,563,658,557,496,205,101,337,1044,5,-2313,-2294,-2392,-2239,-2004,-3192,-3325,-3225,-1729,-4,-87,7,616,586,625,373,371,127,275,697,872,64,-205,-2078,-2192,-2224,-1840,-3187,-3187,-3139,-134,-84,-51,1,707,515,402,370,443,190,278,549,601,288,-125,-1597,-1902,-1895,-1645,-2830,-3098,-2841,-92,-33,-60,50,613,496,526,439,253,223,338,617,228,837,328,-3,-1353,-1383,-1488,-2629,-3031,-2999,-84,-72,-89,163,642,743,592,429,350,211,384,442,214,546,247,14,-261,-211,-638,-2349,-2866,-2481,-5,2,-106,26,653,286,304,294,279,263,365,302,362,125,203,32,-4,-94,-439,-2393,-2888,-1931,-37,25,-85,26,675,246,266,276,273,350,367,301,383,109,151,20,-6,-69,-305],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
