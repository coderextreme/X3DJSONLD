###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore19-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3781657983818856,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[21,23,25,25,26,27,29,31,32,33,35,35,34,35,38,40,40,38,36,34,34,33,32,31,31,29,24,20,19,18,18,18,18,18,22,26,33,21,24,26,27,28,29,29,30,31,32,33,33,31,33,36,38,38,36,34,33,32,31,30,29,28,26,20,16,16,17,18,18,18,19,24,30,37,25,27,28,29,30,29,27,29,30,31,32,32,30,32,34,35,35,35,33,32,30,29,30,30,28,25,18,14,15,16,17,18,19,20,24,27,31,28,29,30,31,31,29,27,28,30,31,32,31,30,30,31,33,33,33,32,31,29,28,30,31,29,25,18,13,14,16,17,18,20,21,24,27,27,29,30,31,31,30,28,27,28,30,31,32,32,30,30,30,30,31,31,30,29,27,28,31,33,31,27,21,16,16,17,18,20,21,22,27,30,28,30,31,32,31,29,28,27,28,29,31,33,32,30,29,28,28,29,29,28,27,25,26,30,32,30,27,22,17,17,17,19,20,21,23,28,33,28,29,29,29,29,28,28,28,28,28,30,32,32,29,28,27,28,28,28,26,24,23,23,25,25,24,23,19,16,16,16,18,19,20,22,29,34,30,29,29,28,27,27,28,29,28,28,29,32,31,28,27,26,27,27,26,24,22,21,20,20,20,20,19,17,16,16,16,18,19,21,23,29,35,31,31,30,29,27,27,27,28,28,28,29,31,30,27,26,25,25,24,23,22,21,21,20,19,18,19,19,17,15,15,16,18,21,24,26,30,33,31,32,31,29,27,26,26,27,27,28,29,30,29,26,25,24,23,22,21,20,20,20,20,18,18,18,18,17,15,15,16,19,23,26,30,31,32,33,30,29,28,26,25,25,25,26,28,28,29,28,26,24,23,21,20,19,19,19,19,19,17,17,17,15,14,13,14,16,19,23,27,32,34,36,39,28,27,26,26,25,25,25,26,28,28,28,28,27,24,22,20,18,18,18,18,18,18,17,16,15,13,13,13,14,16,19,22,28,34,37,40,45,27,27,27,27,27,27,28,29,30,31,32,31,29,26,22,19,17,16,16,17,17,16,17,16,14,12,13,13,16,19,20,22,28,34,40,46,51,26,27,27,28,29,30,30,31,33,34,35,34,33,29,23,19,16,15,15,15,15,15,16,16,13,12,14,15,19,21,21,23,29,35,44,51,54,26,26,26,27,28,29,30,32,34,36,37,37,36,32,26,21,17,15,14,13,12,12,13,14,14,15,18,21,23,24,24,24,31,36,45,52,51,25,26,26,27,28,29,30,32,35,37,40,40,38,34,28,23,19,15,13,12,10,10,11,12,14,18,22,26,26,27,26,26,32,37,45,51,47,24,26,27,28,29,30,31,34,37,38,40,40,37,34,29,24,20,16,14,12,11,10,11,12,16,20,25,28,29,29,26,25,31,37,44,50,48,23,26,29,30,31,33,34,37,39,40,40,38,35,32,29,25,21,17,14,12,12,12,12,14,18,21,26,29,30,29,25,24,30,36,43,48,48,24,27,30,32,34,36,38,40,41,41,40,37,34,31,30,26,21,16,13,11,11,11,13,15,19,22,26,28,29,29,27,26,31,35,40,45,47,25,28,32,34,37,39,42,42,43,42,40,36,31,29,29,25,19,15,13,11,10,11,13,16,20,22,25,26,28,29,30,31,33,36,39,43,46,26,29,33,36,39,42,44,45,44,42,39,34,28,24,23,20,16,12,11,10,10,11,14,17,19,22,25,28,29,30,32,33,36,38,42,46,50,26,30,34,37,40,43,45,45,44,41,37,31,23,18,16,14,12,10,11,10,10,11,15,17,18,20,26,31,31,31,33,35,39,43,47,51,55],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
