###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca3-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4806733645214747,99.20606251983018,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[1696,1282,779,733,736,600,595,577,515,361,466,316,309,207,226,217,212,200,175,134,107,100,1399,1067,803,837,783,678,652,588,569,373,391,317,280,268,276,187,341,372,204,134,115,100,1035,998,984,1027,978,814,696,602,401,365,403,300,346,358,368,310,291,349,186,200,126,105,864,1021,1176,1135,1108,865,712,605,428,421,413,451,361,379,239,241,242,219,215,211,193,94,871,1070,1285,1538,1119,854,661,621,436,462,482,481,546,253,299,436,415,330,195,128,103,114,792,1225,1489,1520,1068,877,675,474,488,514,564,511,290,371,428,360,177,157,187,115,194,201,1055,1263,1564,1315,1030,910,765,968,622,680,654,351,438,433,400,307,309,217,272,230,190,267,948,1225,1580,1171,937,881,809,991,1038,701,673,497,607,598,411,497,389,268,257,320,396,599,808,1183,1306,979,894,860,995,1193,1122,1087,676,680,694,664,612,630,544,314,337,493,618,459,763,1110,1048,908,875,850,1177,1256,1193,888,833,699,1017,531,802,840,504,542,419,540,652,412,710,957,933,889,888,865,1223,1404,1154,1006,975,927,964,837,816,1101,574,466,340,625,617,669,880,1173,928,884,842,865,1091,1297,1253,1154,853,1025,963,1142,832,908,487,298,430,850,723,572,890,1033,959,903,859,857,1140,1131,1556,1037,1018,1121,1255,1440,1193,1096,728,496,336,588,897,654,1040,966,930,889,829,884,925,1174,1530,1158,1259,953,1297,1184,1400,1179,753,415,292,626,806,659,1112,1017,1015,900,833,882,915,1100,1247,1394,1549,1072,991,778,970,997,727,631,352,515,998,518,944,1002,1049,940,831,873,862,1110,1371,1488,1323,1332,1094,818,933,894,911,586,331,702,652,556,822,1011,1054,889,850,853,882,1348,1626,1706,1303,1270,1405,1024,925,605,848,461,654,745,617,551,674,709,989,896,856,829,873,1329,1529,1673,1384,1641,1481,1082,756,596,566,756,751,654,527,480,634,670,891,825,827,819,938,1483,1347,1884,1800,1608,1513,1089,949,670,808,907,1204,677,413,503,637,656,749,764,829,819,1031,999,1469,1663,1492,1579,1269,1075,893,623,873,905,1279,874,702,685,617,686,771,825,841,834,872,954,1269,1464,1595,1322,1116,968,766,636,1110,1156,1170,1130,599,380,708,769,801,831,888,936,868,869,938,1355,1408,1203,1056,975,893,942,1083,1340,856,605,518,552,677,795,788,854,901,931,851,864,947,1312,1371,1201,1065,997,890,960,1090,1325,916,583,540,583],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
