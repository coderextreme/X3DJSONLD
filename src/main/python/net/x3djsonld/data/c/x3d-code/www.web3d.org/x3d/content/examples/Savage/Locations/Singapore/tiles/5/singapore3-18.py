###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore3-18.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.238458400333982,103.84837061432235,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[3,5,7,9,10,11,11,9,8,8,9,11,12,12,11,11,11,12,14,16,18,20,23,24,24,24,23,21,19,14,9,4,1,0,0,0,1,3,5,8,10,11,11,11,11,12,14,13,12,11,10,10,11,13,14,16,18,20,22,23,25,25,24,24,23,20,15,9,4,1,0,0,0,0,3,5,7,9,10,11,11,11,12,12,11,10,10,10,11,13,14,16,18,20,22,23,24,25,25,25,25,23,20,15,10,6,3,0,-4,-1,1,3,5,8,10,11,11,11,11,10,10,10,10,10,11,13,14,16,18,20,22,23,23,24,25,25,25,24,24,22,17,11,5,1,-7,-4,-1,0,3,5,7,9,10,11,10,10,10,10,10,10,11,13,14,16,18,20,21,22,23,24,25,25,26,25,25,23,21,16,11,6,-11,-8,-4,-1,1,3,5,8,10,10,10,10,10,10,10,10,11,13,14,16,18,19,21,22,23,24,24,25,25,25,25,24,24,22,17,11,-10,-10,-7,-4,-1,0,3,5,7,9,10,10,10,10,10,10,11,13,14,16,17,19,20,21,22,23,24,25,25,25,25,25,25,23,21,16,-10,-11,-11,-8,-4,-1,1,3,5,8,10,10,10,10,10,10,11,13,14,15,17,18,20,21,22,23,24,25,25,25,25,25,25,24,24,23,-6,-9,-10,-10,-7,-4,-1,0,3,5,7,9,10,10,10,10,11,13,14,15,17,18,19,21,22,23,24,24,25,25,25,25,25,25,25,23,-2,-6,-10,-11,-11,-8,-4,-1,1,3,5,8,10,10,10,10,11,13,14,15,17,18,19,20,22,23,23,24,24,25,25,25,25,25,25,24,1,-4,-11,-12,-12,-10,-7,-4,-1,0,3,5,8,9,10,10,11,12,14,15,16,18,19,20,21,22,23,24,24,24,25,25,25,25,25,25,7,-2,-11,-13,-12,-11,-11,-8,-4,-1,1,3,5,7,9,10,11,12,14,15,16,17,19,20,21,22,23,24,24,24,24,25,25,25,25,25,-21,-26,-26,-22,-15,-12,-10,-9,-7,-4,0,0,3,5,8,9,10,12,13,15,16,17,18,20,21,22,23,23,24,24,24,24,25,25,25,25,-60,-56,-45,-32,-20,-12,-8,-9,-10,-7,-3,0,1,3,5,7,9,11,12,14,16,17,18,19,21,22,22,23,23,24,24,24,24,25,25,25,-69,-61,-46,-28,-13,-6,-3,-4,-5,-4,-2,0,0,1,3,5,7,9,11,13,15,16,18,19,20,21,22,23,23,24,24,24,24,24,25,23,-69,-58,-41,-20,-3,1,1,1,1,0,0,0,0,0,1,2,4,7,9,12,13,15,17,19,20,21,22,23,23,23,23,24,24,24,24,22,-58,-43,-26,-10,1,4,3,3,3,2,0,0,0,0,1,1,2,5,7,10,12,14,16,18,20,21,22,22,23,23,23,24,24,23,21,17,-41,-22,-5,1,3,4,4,4,4,3,2,1,1,1,1,1,2,2,4,7,10,12,15,17,19,21,21,22,22,23,23,23,23,21,16,9,-23,-8,2,4,3,4,4,4,4,3,2,2,2,2,2,2,1,1,2,5,7,10,13,15,18,20,21,22,22,23,23,22,20,17,10,3,-5,0,3,4,4,4,4,3,3,3,2,2,2,2,2,2,1,1,2,2,4,7,10,13,16,18,20,21,22,22,22,20,16,9,2,-1,2,4,3,4,4,4,4,3,3,2,2,2,2,2,2,2,2,2,1,1,2,5,7,10,14,16,18,20,21,21,19,16,9,3,-1,-4,3,4,4,4,4,3,3,3,2,2,2,2,2,2,2,2,2,2,1,1,2,2,4,7,10,13,16,18,20,19,15,9,2,-1,-3,-4,3,4,4,4,4,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,5,8,10,13,15,17,15,9,3,-1,-4,-4,-4],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
