###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_02',geoSystem=['GDC'],position=(1.220994975577994,103.6616511706451,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.220994975577994,103.6616511706451,0.0),range=4101.627,child1Url=['../../tiles/5/singapore0-4.x3d'],child2Url=['../../tiles/5/singapore0-5.x3d'],child3Url=['../../tiles/5/singapore1-4.x3d'],child4Url=['../../tiles/5/singapore1-5.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore0-2.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2122632632,103.64728813651608,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[1,0,0,0,-2,0,0,0,0,0,3,0,1,2,0,0,0,-1,0,0,-1,0,0,1,0,0,0,3,5,6,5,4,2,4,6,4,3,1,0,0,0,0,0,0,0,-2,-1,3,3,3,3,0,0,0,-2,-1,0,-3,0,0,2,0,0,0,4,6,7,5,4,3,4,7,7,6,1,1,0,0,0,0,0,-1,-2,0,2,3,2,2,1,0,0,-2,-2,-2,-1,0,0,1,0,2,1,4,6,6,3,4,4,4,7,8,8,1,2,0,0,0,0,0,-1,-1,0,2,2,1,1,2,0,0,-1,-3,-2,1,1,0,0,0,4,2,4,6,4,1,4,5,5,6,9,10,0,0,0,0,0,0,0,0,-1,0,1,1,0,0,1,0,0,-3,-4,-3,1,3,0,0,0,5,4,3,5,3,0,3,4,4,4,8,10,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,-5,-5,-4,1,5,1,0,0,5,6,2,3,2,1,2,2,3,1,5,9,0,0,1,0,0,0,0,-1,0,0,0,0,0,0,1,1,0,-4,-3,-2,1,5,1,0,0,5,7,3,2,1,0,1,1,3,2,4,7,0,0,2,1,0,0,0,-1,0,0,1,1,0,0,2,1,0,-1,0,0,0,3,2,0,1,5,6,3,1,0,0,0,1,3,3,4,5,0,0,1,1,0,1,0,0,0,0,0,0,1,1,2,2,0,0,1,2,0,2,2,2,5,5,4,2,0,0,0,0,1,2,4,4,5,0,0,0,1,2,3,0,0,0,1,0,0,1,2,2,1,0,1,3,5,1,1,2,5,9,4,1,0,0,0,0,1,1,1,4,5,5,0,0,0,0,1,2,1,0,1,2,0,0,1,2,1,0,1,4,6,7,3,2,2,4,6,1,0,0,0,0,0,1,1,2,5,6,6,0,1,1,0,0,0,1,2,2,3,1,0,1,2,1,0,2,8,9,9,6,2,1,0,-1,-2,1,1,1,0,0,1,2,3,5,7,7,0,2,2,0,0,0,1,3,3,3,2,0,0,1,1,0,2,8,11,10,8,4,0,-3,-6,-5,0,1,1,0,0,1,2,3,4,6,6,1,4,4,1,0,0,0,3,4,3,2,0,0,0,0,2,1,6,14,13,10,5,0,-7,-10,-6,0,0,0,0,-2,0,2,2,1,3,3,2,7,7,2,0,0,0,2,4,3,2,1,0,0,0,2,0,4,15,15,13,7,0,-9,-11,-6,0,0,0,0,-2,0,2,1,0,0,1,3,11,11,2,0,0,1,1,3,3,3,2,0,0,0,1,0,3,13,17,17,10,2,-10,-10,-4,0,-1,0,0,-2,0,1,1,0,0,0,5,16,14,1,-1,0,2,1,3,3,2,2,1,0,0,0,0,2,12,18,19,11,1,-9,-8,-2,-1,-1,0,0,-1,0,0,0,0,0,0,8,23,18,1,-1,1,3,3,4,2,1,2,3,1,0,0,1,2,9,17,16,8,0,-7,-6,0,-1,-1,0,0,-2,0,0,0,0,0,1,10,24,18,1,-1,1,4,4,4,2,1,1,3,3,0,0,1,1,7,15,14,7,1,-4,-4,0,-1,0,2,1,-1,0,0,0,0,1,2,10,16,10,0,0,2,3,4,4,2,2,0,2,4,1,1,1,0,3,12,15,10,8,-1,-3,0,0,0,3,1,0,0,0,0,2,3,3,8,9,4,0,0,2,2,3,3,2,2,0,1,5,2,2,1,0,1,10,16,14,14,1,-3,0,0,2,4,2,2,2,0,1,4,4,4,6,5,1,0,0,1,1,2,0,2,2,0,1,5,4,3,1,0,0,11,19,19,18,3,-2,1,3,4,4,2,2,1,0,2,5,4,4,3,1,0,0,0,0,0,0,0,2,2,0,0,4,4,3,1,0,0,11,21,24,20,3,-1,2,4,5,3,2,2,1,1,4,4,3,3,1,0,0,-1,-1,1,1,0,0,2,2,0,-1,1,2,3,1,-1,-1,8,20,26,16,-1,0,3,2,2,3,1,0,0,1,4,3,1,1,0,0,0,-1,0,2,1,0,0,1,2,0,-2,0,1,2,1,-3,-2,5,19,25,13,-4,0,4,0,0,2,0,0,0,1,3,2,0,0,0,0,0,0,0,1,0,2,2,1,1,0,0,0,0,0,0,-1,0,5,11,18,9,1,3,3,0,1,0,0,0,1,2,3,3,2,2,0,0,0,1,1,1,0,2,3,0,1,0,1,0,0,-3,-3,0,1,4,4,11,7,5,7,3,0,2,0,0,1,3,2,2,3,4,3,0,0,0,2,1,1,1,5,6,0,0,0,2,1,0,-1,-2,0,2,3,1,4,3,5,8,4,0,0,0,0,0,1,2,2,2,4,5,0,0,0,2,1,1,3,7,9,0,-2,0,2,0,1,0,0,2,4,2,0,0,0,5,10,5,0,0,0,0,0,0,2,2,1,4,6,0,0,2,4,2,2,4,7,5,-1,-3,0,0,0,0,0,0,0,3,0,0,0,0,5,8,3,0,0,0,1,-1,0,4,1,0,1,3,1,0,3,5,3,3,6,7,3,-2,-5,-1,0,-1,0,0,0,-1,1,0,0,1,0,4,7,2,0,0,1,2,-3,0,6,1,-1,0,0,1,0,1,2,0,0,3,5,1,-4,-5,-1,0,0,1,0,0,-2,0,0,0,0,0,0,2,0,-2,0,1,1,-1,2,5,1,-2,-2,0,0,0,0,0,-1,-2,0,2,0,-5,-6,-1,1,3,2,0,0,-3,0,0,0,0,0,-3,-1,0,-4,-1,2,0,0,3,4,2,-3,-4,-1,0,0,0,0,0,0,0,-2,-1,-2,-2,0,1,1,0,0,0,0,0,0,0,0,0,-2,-1,0,-3,0,0,0,1,4,3,1,-3,-3,0,0,0,0,0,1,1,-1,-7,-3,0,0,1,0,0,-2,0,0,1,0,0,0,1,2,-1,-1,0,-1,0,0,0,4,4,2,0,-1,-1,1,-2,-3,-1,0,1,2,-2,-8,-3,0,0,0,0,-1,-3,-1,0,2,0,0,0,1,2,0,0,0,0,0,-2,-1,3,4,0,0,0,2,4,-4,-7,-4,0,3,4,-3,-9,-2,0,0,-3,-1,-4,-2,-1,0,1,0,0,1,1,1,0,0,0,3,0,-3,-2,2,3,0,0,3,6,7,-2,-3,-2,0,3,6,0,-7,0,1,0,-4,-1,-5,-2,0,0,0,0,0,0,0,1,2,2,0,2,0,-1,0,3,2,0,0,3,7,8,0,0,0,0,3,9,2,-5,0,2,0,-4,-1,-5,-1,0,-1,0,0,0,0,0,1,5,6,2,1,0,0,2,5,1,1,0,3,7,7,0,0,0,0,3,8,2,-3,0,1,0,-3,-1,-4,-1,0,-1,0,0,0,0,1,1,5,7,2,2,0,0,3,6,2,2,0,2,5,5,-1,0,0,0,2,7,2,-3,-1,0,0,-2,0,-2,-1,-1,0,0,0,0,1,1,0,4,7,2,4,2,0,3,6,4,3,0,1,4,4,-2,0,0,-1,0,6,6,0,0,0,-2,-2,0,-2,-1,0,0,0,0,2,2,0,0,4,7,5,5,5,1,3,7,6,4,1,1,3,3,-2,-1,-1,-2,-2,4,9,2,0,-2,-4,-3,0,-1,-2,0,1,1,1,4,3,0,0,5,8,8,6,10,3,3,9,7,6,4,3,3,3,-2,-2,-2,-1,0,7,13,5,0,0,-1,-1,0,0,-1,0,1,1,1,4,4,0,0,4,8,9,5,7,1,2,9,7,6,5,3,2,3],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
