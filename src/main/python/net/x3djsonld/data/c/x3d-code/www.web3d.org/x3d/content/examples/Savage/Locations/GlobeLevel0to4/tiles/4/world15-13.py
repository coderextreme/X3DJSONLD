###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world15-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(78.7083383624419,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[35,9,-9,-39,-44,-50,-39,-44,-60,-71,-71,-65,-62,-50,-49,-45,-48,-52,-49,-43,-44,-32,1,-21,-35,-49,-61,-43,-49,-59,-70,-72,-83,-90,-91,-81,-65,-60,-62,-62,-57,-46,-34,-30,-43,-48,-59,-60,-57,-59,-83,-143,-84,-100,-109,-603,-787,-811,-682,-99,-88,-71,-66,-59,-51,-47,-263,-104,-106,-73,-268,-429,-1141,-1333,-1353,-1448,-1862,-1956,-1870,-1977,-1869,-1238,-1785,-207,-100,-79,-72,-68,-299,-336,-363,-351,-857,-1458,-1897,-2048,-2203,-2302,-2386,-2445,-2368,-2407,-2445,-2497,-2440,-1873,-1589,-712,-206,-153,-425,-812,-1508,-1919,-1989,-2161,-2353,-2559,-2706,-2807,-2972,-2989,-2832,-2856,-2842,-2814,-2761,-2670,-2606,-2704,-2654,-2058,-2050,-2399,-2614,-2660,-2696,-2771,-2812,-2914,-3002,-3082,-3144,-3053,-3252,-3008,-3119,-3085,-3067,-3129,-3144,-3091,-3046,-2975,-2777,-2948,-3082,-3195,-3178,-3205,-3190,-3205,-3215,-3217,-3201,-3407,-3390,-3342,-3388,-3388,-3403,-3401,-3365,-3382,-3399,-3362,-3199,-3306,-3319,-3315,-3325,-3331,-3322,-3310,-3304,-3311,-3474,-3606,-3470,-3496,-3587,-3598,-3611,-3626,-3630,-3608,-3528,-3502,-3406,-3414,-3423,-3429,-3436,-3440,-3438,-3423,-3399,-3417,-3619,-3615,-3638,-3739,-3800,-3800,-3800,-3803,-3803,-3797,-3692,-3605,-3450,-3468,-3483,-3495,-3505,-3497,-3435,-3147,-4351,-4283,-3824,-3644,-3600,-3794,-3856,-3851,-3843,-3833,-3826,-3812,-3777,-3680,-3486,-3513,-3537,-3557,-3553,-3336,-2543,-4465,-4961,-3436,-3665,-3667,-3599,-3964,-3978,-3997,-3985,-4005,-4009,-3968,-3879,-3833,-3555,-3554,-3558,-3584,-3461,-3398,-3999,-4209,-3772,-3639,-3798,-3807,-3702,-4081,-4089,-4080,-4063,-4044,-4023,-4002,-3995,-3961,-3533,-3486,-3451,-3422,-3387,-4005,-4207,-4135,-3791,-3841,-3500,-3801,-3876,-4056,-4080,-4097,-4108,-4109,-4098,-4079,-4057,-4042,-3527,-3584,-3032,-3801,-4228,-4225,-3601,-3389,-3813,-3808,-3848,-3967,-4270,-4230,-4229,-4227,-4103,-4102,-4147,-4165,-4159,-4152,-3458,-3916,-4187,-4101,-3864,-3854,-3785,-3815,-3500,-3885,-4232,-4255,-4266,-4265,-4249,-4231,-4217,-4209,-4199,-4179,-4135,-4100,-4085,-3920,-3849,-3868,-3812,-3842,-4149,-4275,-4273,-4300,-4326,-4326,-4305,-4274,-4238,-4200,-4172,-4173,-4163,-4146,-4115,-4111,-3892,-3835,-4386,-4446,-4218,-4247,-4228,-4272,-4270,-4262,-4246,-4226,-4215,-4208,-4202,-4199,-4189,-4180,-4179,-4182,-4186,-4191,-4190,-4166,-4395,-4289,-4282,-4362,-4296,-4210,-4242,-4235,-4229,-4228,-4230,-4226,-4216,-4210,-4201,-4192,-4179,-4164,-4150,-4138,-4419,-4223,-4253,-4258,-4257,-4256,-4253,-4250,-4246,-4244,-4241,-4236,-4231,-4226,-4221,-4211,-4203,-4199,-4187,-4174,-4168,-4163,-4270,-4269,-4267,-4265,-4262,-4258,-4254,-4250,-4247,-4243,-4240,-4233,-4224,-4215,-4206,-4197,-4191,-4192,-4201,-4195,-4041,-3957,-4280,-4284,-4285,-4286,-4284,-4279,-4273,-4264,-4254,-4243,-4231,-4222,-4216,-4209,-4205,-4199,-4170,-4112,-4021,-3860,-3632,-3410,-4330,-4332,-4328,-4326,-4324,-4311,-4305,-4278,-4234,-4208,-4100,-3963,-3976,-3992,-3958,-3532,-3149,-2885,-2643,-2452,-2473,-2486,-4296,-4281,-4268,-4261,-4253,-4244,-4235,-4223,-4214,-4210,-3783,-3472,-3546,-3520,-3492,-3321,-2883,-2507,-2437,-2417,-2425,-2431],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
