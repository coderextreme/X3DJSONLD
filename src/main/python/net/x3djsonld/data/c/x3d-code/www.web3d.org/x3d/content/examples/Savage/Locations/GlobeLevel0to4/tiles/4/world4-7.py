###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4257,-4238,-4075,-4008,-3865,-3314,-3505,-2830,-2136,-3208,-3397,-3050,-3683,-3517,-3712,-3637,-3967,-4040,-3730,-3815,-4062,-3542,-4239,-4213,-4051,-3844,-3565,-3168,-3390,-3019,-2746,-3353,-3056,-3335,-3641,-3644,-3680,-3664,-3566,-3336,-3251,-3580,-3953,-4323,-4597,-4261,-4126,-3685,-3588,-3854,-3308,-3622,-3368,-3720,-3413,-3579,-4063,-3681,-3658,-3914,-3682,-3549,-2038,-3882,-4105,-4365,-4477,-4367,-4167,-3750,-3477,-3521,-3192,-3183,-3859,-3369,-3471,-3464,-4031,-3619,-3811,-3839,-3477,-4270,-3963,-3283,-4080,-4463,-4226,-4129,-3888,-3731,-3939,-3499,-2783,-2878,-3343,-3226,-3706,-3765,-4001,-4057,-3878,-3814,-4097,-3172,-4234,-4464,-362,-4112,-4339,-4152,-3860,-3587,-3583,-3276,-2418,-3227,-3074,-3440,-3724,-3670,-3769,-3862,-4068,-4130,-4285,-4376,-4355,-3675,-4703,-4375,-4224,-3991,-3859,-3445,-3340,-3201,-2663,-2976,-3165,-3172,-3447,-3677,-3989,-3995,-3230,-4350,-4231,-4025,-4207,-2923,-2282,-3965,-4180,-3912,-3781,-3458,-3134,-2992,-2598,-3131,-3127,-3162,-3352,-3714,-3825,-3820,-3960,-4070,-4129,-4109,-3495,-4257,-2714,-1080,-4113,-3790,-3678,-3559,-3342,-2943,-2350,-2977,-3197,-3192,-3275,-3625,-3608,-4036,-3923,-4181,-4468,-4313,-4364,-4273,-3291,-2679,-4087,-4032,-3625,-3494,-3444,-2908,-2147,-3133,-3181,-3031,-3249,-3275,-3403,-3617,-3633,-4087,-3941,-4087,-4429,-4203,-3676,-3546,-3932,-4089,-3588,-3439,-3758,-2748,-2695,-3146,-3203,-3140,-3227,-3244,-3098,-3471,-3456,-3728,-2959,-3744,-4578,-4466,-4484,-4445,-3992,-3917,-3722,-3483,-3622,-3248,-2544,-3428,-3157,-2364,-3100,-3219,-3202,-3521,-3528,-3495,-3451,-4118,-4377,-4517,-5126,-5027,-4004,-3935,-3804,-3557,-3220,-2881,-1949,-3462,-3040,-2979,-3452,-3259,-3049,-3236,-3326,-957,-2695,-4523,-4285,-4635,-5007,-4988,-4122,-4034,-3861,-3568,-3365,-2707,-2435,-2642,-2853,-3049,-3238,-3310,-3255,-3454,-2615,-3141,-3227,-3602,-4554,-4710,-4669,-4809,-4065,-4027,-3685,-3559,-3876,-2772,-2217,-2742,-2667,-2907,-3320,-1955,-2402,-3325,-3268,-3507,-3799,-3866,-4704,-4885,-4664,-5220,-3873,-3969,-3951,-3476,-3581,-2786,-2262,-3380,-3078,-3073,-3198,-3423,-3291,-3387,-2101,-3288,-3768,-4250,-4635,-4960,-5031,-4969,-4240,-3767,-3846,-3721,-3295,-2305,-2707,-3016,-3295,-3382,-3660,-3357,-3407,-3306,-3399,-3307,-3502,-3877,-4413,-4025,-4537,-5094,-3992,-4004,-3515,-3731,-3163,-2496,-2967,-3139,-3353,-3433,-35,-3833,-3694,-3770,-2339,-3667,-3823,-3814,-3276,-2776,-4796,-5153,-3796,-3635,-3951,-3897,-2998,-2259,-2778,-3228,-3739,-3532,-3748,-3718,-3608,-3717,-3737,-3376,-3942,-3084,-4424,-4897,-4923,-5143,-3774,-3729,-3873,-3768,-3167,-2456,-2936,-3416,-3558,-3405,-3825,-3720,-3566,-3700,-3817,-2040,-4110,-3993,-3989,-4784,-4199,-4955,-3780,-3773,-3753,-3471,-3507,-2176,-3081,-3153,-3584,-3960,-3901,-3285,-3838,-3875,-3827,-4356,-2387,-3041,-4122,-4365,-4693,-4727,-3838,-3727,-3901,-3527,-3322,-3538,-2909,-2151,-3480,-3056,-3418,-3784,-4183,-3873,-4056,-3805,-3620,-2897,-4227,-4349,-4534,-4512,-3755,-4308,-3404,-3709,-3717,-3406,-3585,-2260,-2871,-3442,-3754,-4111,-4013,-3894,-4107,-4610,-4099,-2238,-3657,-3950,-4508,-4710,-3868,-4092,-3315,-3568,-3549,-3802,-3761,-2178,-3315,-3434,-3520,-3775,-4353,-3732,-3962,-4139,-3978,-3069,-2274,-4279,-4431,-4621],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
