###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore18-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3694340860038916,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[41,32,26,20,19,19,20,22,25,27,30,33,35,37,38,39,39,39,39,40,41,42,42,42,41,39,38,36,36,36,36,37,39,42,45,45,38,31,25,19,19,19,21,23,25,27,29,32,34,36,37,38,39,39,40,40,41,43,44,45,44,43,41,40,39,39,39,41,43,46,49,48,35,30,24,19,19,19,21,24,26,27,29,31,33,35,37,38,39,39,40,40,41,44,46,47,47,46,44,43,42,42,42,44,47,50,54,51,31,27,22,18,19,20,23,25,27,28,30,31,33,35,37,38,38,39,40,42,44,47,49,49,49,48,45,43,41,41,41,44,46,52,57,55,27,24,21,18,20,22,24,27,29,30,31,32,33,35,37,38,38,39,41,44,47,49,51,51,50,48,45,42,40,40,40,41,44,52,59,58,26,22,20,19,20,23,26,30,32,32,34,35,36,36,37,38,39,39,41,46,49,51,52,51,49,47,44,41,39,40,40,41,43,51,57,57,25,21,20,20,21,23,27,33,34,34,37,41,41,39,39,40,39,39,41,45,49,51,52,50,47,45,42,40,39,40,41,41,43,48,53,54,23,18,19,20,21,22,27,32,34,36,42,49,48,43,42,41,40,40,40,44,46,49,49,47,44,43,41,39,39,42,44,43,43,47,51,51,20,16,17,20,20,21,26,31,34,37,47,56,55,49,44,41,39,40,40,41,43,45,46,44,42,41,40,40,40,44,46,45,44,47,49,49,20,15,17,20,20,21,25,32,37,41,50,59,58,51,45,40,38,39,39,38,40,43,44,43,41,41,41,41,42,44,45,45,45,47,48,47,21,16,17,20,20,20,27,35,41,46,52,58,56,49,43,39,37,37,38,38,39,42,44,43,42,42,42,43,43,42,43,44,45,46,46,45,20,15,16,20,20,21,28,36,41,46,50,54,52,45,40,36,35,37,38,38,39,41,43,43,42,41,41,43,43,41,41,42,44,43,43,41,17,13,16,20,22,24,29,35,39,42,45,47,45,40,36,33,33,36,38,39,39,39,40,42,42,40,40,41,42,41,40,41,41,41,39,35,17,14,19,25,28,30,32,35,36,39,41,42,40,37,35,32,32,35,37,39,39,37,37,39,40,39,39,40,41,40,40,39,39,39,37,33,20,18,26,33,36,37,36,35,35,37,37,37,37,37,36,35,34,35,36,37,37,35,34,36,37,38,39,39,40,41,41,39,38,38,37,35,21,21,27,34,37,40,37,34,33,33,35,35,36,38,38,38,37,37,37,38,37,34,33,34,35,38,39,38,38,41,41,40,39,38,37,36,21,21,24,28,31,35,34,33,31,30,32,36,38,39,40,41,41,40,39,39,37,35,33,34,36,38,39,37,37,40,42,42,41,39,37,37,20,20,23,25,28,32,32,30,29,28,32,35,37,38,40,41,41,40,39,38,36,34,33,34,35,38,38,36,36,40,43,44,44,41,38,39,18,20,23,26,29,32,29,26,27,30,33,34,36,36,36,36,37,37,37,35,34,33,33,33,33,35,35,35,35,40,43,46,47,43,39,39,17,19,23,26,29,31,28,24,28,33,33,33,33,33,33,33,34,35,35,34,33,33,34,33,34,34,34,34,36,41,45,49,50,45,40,41,18,20,23,25,27,29,27,25,30,35,33,29,28,29,30,31,32,34,35,35,35,36,37,36,36,35,35,36,39,44,49,52,53,48,43,43,23,26,26,26,27,27,27,27,32,36,34,29,27,27,28,29,31,33,34,35,36,38,38,38,38,37,37,38,41,46,51,53,53,49,45,46,33,38,35,32,29,27,28,29,33,37,37,34,32,28,29,30,31,31,32,32,34,35,37,39,40,38,38,40,42,48,51,50,49,49,49,50],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
