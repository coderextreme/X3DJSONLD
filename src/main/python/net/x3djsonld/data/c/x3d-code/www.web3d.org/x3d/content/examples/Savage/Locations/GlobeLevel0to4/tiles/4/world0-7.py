###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world0-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-90.0416666667,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2729,2730,2731,2732,2733,2734,2735,2735,2736,2737,2738,2739,2740,2741,2742,2744,2745,2746,2747,2749,2750,2751,2662,2663,2664,2665,2667,2668,2669,2671,2672,2674,2675,2677,2678,2680,2682,2683,2685,2687,2689,2692,2694,2695,2589,2590,2592,2594,2596,2599,2601,2604,2607,2611,2615,2619,2623,2627,2631,2636,2640,2645,2650,2655,2660,2664,2531,2536,2542,2548,2553,2558,2563,2568,2572,2577,2581,2585,2589,2592,2595,2597,2599,2601,2604,2609,2614,2619,2468,2480,2490,2498,2502,2508,2514,2520,2526,2531,2536,2541,2546,2551,2556,2560,2565,2570,2576,2582,2588,2592,2337,2348,2361,2373,2386,2397,2407,2423,2442,2461,2478,2492,2501,2512,2523,2534,2545,2556,2566,2576,2583,2589,2293,2303,2320,2340,2361,2382,2398,2409,2427,2448,2467,2485,2498,2508,2522,2538,2554,2570,2583,2594,2600,2603,2294,2316,2346,2374,2396,2408,2428,2449,2469,2485,2497,2505,2518,2532,2546,2559,2571,2582,2592,2601,2608,2612,2235,2284,2325,2356,2377,2394,2409,2429,2451,2471,2490,2500,2509,2520,2531,2543,2556,2567,2578,2587,2595,2599,2190,2215,2245,2276,2298,2320,2344,2368,2387,2399,2412,2430,2450,2470,2488,2499,2510,2524,2538,2550,2560,2567,2131,2160,2185,2201,2222,2250,2280,2300,2317,2337,2355,2369,2381,2392,2402,2420,2443,2466,2485,2501,2515,2523,1945,1988,2036,2091,2114,2137,2157,2180,2201,2228,2262,2293,2309,2332,2352,2369,2382,2393,2402,2420,2440,2454,1786,1809,1842,1875,1909,1967,2007,2045,2069,2095,2112,2138,2168,2189,2217,2260,2298,2321,2345,2369,2389,2400,1685,1695,1712,1755,1795,1829,1873,1910,1949,1986,2004,2027,2050,2079,2103,2131,2159,2189,2213,2249,2284,2303,1650,1663,1681,1700,1725,1773,1821,1883,1921,1956,1980,1995,2005,2018,2032,2045,2063,2088,2111,2141,2178,2198,1514,1571,1609,1671,1710,1748,1776,1837,1903,1938,1965,1982,1993,1999,2003,2009,2013,2021,2035,2057,2087,2105,1242,1309,1405,1502,1581,1631,1672,1707,1770,1820,1875,1904,1930,1952,1972,1989,2001,2018,2039,2064,2088,2111,1136,1194,1300,1368,1449,1544,1607,1654,1683,1711,1766,1811,1868,1904,1934,1970,2003,2054,2098,2143,2192,2212,1312,1558,1289,1214,1478,1641,1648,1640,1649,1685,1729,1788,1860,1914,1972,2041,2111,2169,2213,2246,2271,2285,608,694,757,1018,1158,1287,1374,1451,1536,1647,1744,1801,1919,2011,2091,2158,2209,2245,2273,2293,2306,2325,610,664,734,819,925,1197,1331,1417,1480,1579,1756,1829,1950,2050,2127,2200,2235,2264,2286,2303,2324,2346,1108,1120,1151,1199,1266,1340,1401,1440,1495,1591,1720,1809,1892,2017,2113,2198,2240,2266,2290,2313,2359,2386,1156,1190,1210,1264,1326,1391,1421,1457,1505,1606,1720,1815,1893,2010,2106,2198,2242,2267,2291,2318,2367,2393],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
