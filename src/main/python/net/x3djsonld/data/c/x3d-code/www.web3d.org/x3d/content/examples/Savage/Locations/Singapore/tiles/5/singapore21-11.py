###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore21-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3956292231378735,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[29,31,33,35,36,33,29,25,22,19,17,14,11,12,13,14,14,15,17,18,20,23,27,31,33,37,43,48,50,51,52,54,52,50,47,45,41,30,32,35,36,35,32,28,25,23,20,16,13,10,11,13,13,13,14,16,18,19,21,26,30,32,35,40,45,46,46,47,48,47,46,50,53,47,30,32,34,35,36,35,32,30,28,23,17,14,12,12,13,12,12,13,16,17,19,22,27,30,32,35,39,42,42,41,42,44,44,45,53,59,57,30,32,33,35,36,36,35,34,31,25,19,15,13,13,13,12,12,12,15,17,20,23,27,30,32,34,37,39,38,38,39,41,43,46,57,65,65,30,30,31,33,35,35,35,33,30,24,18,15,13,13,13,12,12,12,14,16,19,22,26,29,30,32,34,36,36,38,42,45,50,54,63,71,69,30,29,30,32,35,35,33,31,27,23,17,15,13,13,13,12,12,12,13,15,18,21,24,27,29,30,31,34,36,39,45,50,55,60,67,73,70,30,29,29,33,36,36,33,29,24,22,18,16,13,12,12,12,11,12,13,15,17,19,22,24,25,26,29,33,36,39,47,54,57,60,64,67,63,30,29,28,33,38,37,35,29,23,22,21,18,14,12,11,11,11,12,13,14,16,18,20,22,22,24,29,34,37,41,50,56,57,57,58,58,55,30,29,29,32,36,38,39,34,29,29,29,25,17,13,11,11,11,12,13,14,15,17,20,22,24,28,35,42,44,47,50,52,52,52,52,50,48,30,30,29,31,33,39,44,40,35,36,37,31,20,13,11,10,11,12,13,13,14,16,20,23,28,34,42,49,51,52,50,48,47,46,45,43,41,31,30,29,30,32,39,46,44,39,38,38,32,21,14,10,9,10,12,12,13,14,16,21,26,31,37,46,52,53,53,48,44,41,39,38,37,36,32,31,29,30,31,39,46,45,41,39,38,31,22,14,10,9,10,11,12,13,14,17,22,27,34,40,46,51,51,51,45,41,37,33,32,31,32,36,33,31,29,30,38,45,45,42,41,38,31,23,16,10,9,10,11,11,12,14,17,22,27,32,37,42,45,46,46,42,39,35,31,30,28,29,40,36,32,30,29,36,44,45,43,42,39,33,24,17,12,10,11,11,11,12,14,17,22,25,29,33,36,39,40,41,39,38,34,31,29,28,28,39,37,35,32,30,35,42,43,42,43,43,36,25,18,14,12,12,12,11,12,14,17,19,22,25,28,31,34,37,39,39,38,35,32,29,27,27,37,38,38,34,31,35,40,40,39,43,47,40,25,18,15,13,13,13,12,12,14,15,16,18,22,25,28,32,36,40,40,39,37,34,31,28,27,37,41,42,37,33,36,40,42,43,47,51,42,26,18,15,14,14,13,13,13,14,14,14,16,20,23,26,30,35,40,41,41,39,37,33,30,29,39,43,45,40,35,37,42,46,50,52,51,41,27,19,15,13,13,13,14,13,13,13,13,15,18,22,26,30,35,39,41,43,41,39,36,33,32,39,44,48,42,36,38,42,46,50,49,45,36,24,17,14,12,12,12,13,13,13,13,13,14,17,20,23,27,32,37,41,44,43,42,37,33,32,39,44,47,42,36,36,39,42,44,41,35,27,19,15,13,12,11,11,11,11,12,13,13,14,16,18,21,25,30,36,41,44,45,44,37,32,31,34,39,43,38,33,32,33,33,33,30,25,20,15,13,12,12,10,10,10,11,12,13,14,14,16,17,20,23,28,34,39,43,44,43,38,32,30,26,30,33,31,28,25,23,22,20,18,16,14,13,12,11,10,9,9,10,10,11,13,14,15,16,18,21,23,27,32,37,41,41,41,38,33,30,20,22,24,24,22,19,15,14,13,12,11,12,12,12,11,10,9,9,10,10,11,13,14,16,17,19,22,25,29,32,36,38,39,38,36,33,29],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
