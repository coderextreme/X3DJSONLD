###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore8-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2821169622239519,103.69037723890314,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[15,15,15,14,14,15,16,17,18,16,12,8,4,3,5,6,8,9,10,9,7,7,10,11,10,10,11,10,10,10,10,10,9,8,8,9,11,13,14,14,14,14,15,16,16,15,11,7,5,3,3,4,6,7,8,10,10,8,8,10,10,9,9,9,9,9,9,10,10,10,9,9,9,10,12,12,13,13,13,14,15,14,11,7,3,2,3,3,4,5,6,7,9,10,9,9,9,9,8,7,8,9,8,8,9,11,10,10,10,9,9,13,13,13,13,14,15,15,12,7,4,2,2,3,3,4,4,5,5,5,6,7,8,7,7,6,6,8,9,8,9,10,11,11,10,9,8,7,14,14,14,14,15,15,14,10,5,2,2,2,3,3,4,3,3,3,2,2,4,4,4,4,4,6,8,9,9,9,10,11,11,10,8,6,4,16,16,17,17,17,16,15,11,7,4,2,2,3,3,3,3,2,1,0,-1,-1,-2,-2,-1,0,3,6,8,9,9,10,10,11,10,7,4,1,18,19,20,19,18,17,16,13,10,6,3,2,3,3,3,2,1,0,-2,-5,-9,-10,-10,-8,-3,0,4,7,8,9,9,10,10,9,6,2,0,18,20,21,20,19,17,16,13,10,7,4,2,3,3,2,1,0,-3,-7,-11,-14,-16,-16,-14,-9,-5,0,3,6,8,9,9,9,8,4,1,-1,17,19,22,21,18,16,15,13,11,8,4,3,3,2,1,0,-4,-8,-13,-17,-19,-20,-21,-20,-16,-12,-5,0,4,7,8,8,7,6,3,0,0,11,14,16,16,14,13,12,11,9,7,5,4,3,1,0,-4,-9,-14,-17,-19,-21,-22,-21,-20,-18,-14,-10,-6,0,3,6,7,6,3,1,0,0,6,7,8,9,9,9,9,9,7,7,6,5,3,0,-4,-10,-15,-18,-20,-21,-21,-21,-20,-19,-18,-17,-15,-12,-6,-1,3,6,4,1,0,0,0,5,4,4,5,6,7,8,8,7,7,7,7,6,1,-5,-12,-17,-20,-21,-22,-21,-21,-20,-19,-18,-17,-16,-14,-10,-5,1,5,3,1,0,0,0,7,3,1,2,4,5,6,7,8,8,9,9,9,3,-5,-13,-18,-21,-21,-21,-21,-20,-20,-19,-18,-17,-16,-15,-15,-11,-1,4,3,1,1,0,0,7,5,2,3,5,6,7,7,8,9,10,11,10,5,-2,-10,-18,-22,-21,-21,-21,-20,-20,-19,-18,-17,-16,-15,-12,-8,0,4,4,3,2,1,1,7,7,6,6,6,7,7,8,9,10,10,11,12,8,2,-6,-16,-21,-21,-21,-21,-20,-19,-19,-18,-17,-16,-14,-9,-3,1,4,5,5,3,2,2,8,8,8,8,7,7,8,9,10,11,11,12,12,10,6,-1,-10,-16,-17,-19,-20,-20,-19,-18,-18,-16,-14,-10,-5,0,2,4,5,5,4,4,3,8,10,10,9,8,8,9,10,10,11,12,12,11,10,9,4,-2,-8,-13,-17,-19,-20,-19,-18,-17,-15,-10,-6,-1,1,3,4,4,5,5,5,4,8,9,10,9,8,8,9,10,11,11,12,11,10,9,8,5,0,-3,-7,-11,-14,-16,-18,-17,-15,-11,-7,-3,0,1,2,3,3,4,5,5,4,9,9,9,9,9,9,9,10,12,12,10,9,9,8,7,5,2,0,0,-3,-8,-12,-16,-16,-12,-8,-3,0,0,0,1,1,2,3,4,5,4,8,8,8,8,8,8,9,9,10,9,8,7,7,6,5,3,2,1,1,0,-3,-7,-11,-12,-8,-5,-2,0,0,0,0,0,0,1,2,3,3,6,6,6,6,5,6,8,7,6,6,5,5,5,4,3,2,2,2,2,1,0,-2,-6,-7,-5,-3,-2,-2,-2,-2,-1,-1,-2,-1,0,0,1,6,6,6,5,5,5,6,5,4,3,3,3,3,2,2,2,2,2,2,1,1,0,-2,-4,-4,-4,-4,-4,-4,-4,-5,-5,-5,-5,-5,-5,-3,6,5,5,5,5,5,5,4,2,1,2,2,2,2,2,2,2,2,2,2,2,1,-1,-3,-5,-6,-7,-7,-7,-7,-8,-8,-8,-9,-11,-12,-11],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
