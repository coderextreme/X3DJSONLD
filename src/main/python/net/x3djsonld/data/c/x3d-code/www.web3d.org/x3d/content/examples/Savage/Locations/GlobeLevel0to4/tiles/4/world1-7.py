###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1156,1190,1210,1264,1326,1391,1421,1457,1505,1606,1720,1815,1893,2010,2106,2198,2242,2267,2291,2318,2367,2393,963,1217,1396,1504,1536,1546,1569,1604,1672,1730,1805,1877,1953,2019,2082,2175,2243,2292,2328,2384,2425,2460,1181,1298,1403,1528,1636,1711,1747,1786,1804,1834,1905,1982,2037,2071,2099,2147,2234,2322,2385,2429,2491,2510,1420,1449,1496,1610,1704,1775,1804,1824,1862,1928,2007,2071,2141,2176,2201,2229,2277,2346,2406,2467,2509,2542,1588,1623,1650,1686,1719,1766,1807,1848,1906,2006,2101,2208,2266,2296,2317,2344,2386,2429,2470,2501,2556,2590,1284,1350,1419,1478,1507,1545,1599,1721,1900,1994,2126,2204,2279,2319,2375,2423,2467,2508,2533,2571,2636,2700,529,399,516,744,917,970,1127,1340,1485,1975,2063,2195,2281,2335,2402,2474,2510,2546,2584,2639,2722,2771,1,0,0,0,-7,481,839,1045,1290,1571,2133,2192,2319,2402,2514,2559,2591,2631,2697,2762,2823,2866,0,0,1,1,1,334,544,895,1106,1301,1543,2355,2363,2440,2516,2568,2680,2770,2817,2846,2878,2898,0,1,0,1,0,0,137,208,580,865,1009,1167,1636,1981,2359,2429,2681,2783,2799,2817,2834,2832,-260,-279,0,0,0,0,0,16,119,507,795,998,1196,1456,1735,1919,1905,2618,2747,2700,2632,2571,-2465,-1422,-246,0,0,0,0,626,862,478,781,859,1142,1408,1602,1776,1994,2037,2031,2141,2406,2316,-3407,-3343,-2609,-745,1,1,0,1,1,88,296,518,924,1331,1467,1697,2019,2001,1785,1651,1642,1766,-3896,-3876,-3618,-3511,-2604,-1077,-269,0,0,0,0,191,671,1026,1309,1393,1610,1497,1612,1095,1044,1264,-4198,-4197,-4141,-4109,-3580,-2877,-1258,-352,-427,-252,-282,-124,530,506,489,794,1279,1383,829,1014,369,343,-4186,-4299,-4359,-4404,-4221,-3230,-2608,-2265,-488,-234,-67,7,558,19,-61,389,102,528,-11,311,-8,-24,-4409,-4351,-4343,-4490,-4505,-4548,-3723,-3129,-2238,-2235,-1630,-298,-15,-51,0,40,7,-233,-22,-19,23,129,-4498,-4493,-4477,-4466,-4516,-4630,-4635,-4645,-4364,-2722,-2183,-1965,-1730,-377,-929,-599,-67,-34,0,-15,259,429,-4486,-4513,-4544,-4584,-4620,-4655,-4693,-4841,-4933,-4410,-4224,-3064,-2187,-2776,-1991,-2139,-2238,-1953,-2546,-2368,8,206,-4682,-4645,-4658,-4674,-4705,-4684,-4704,-4802,-4819,-4660,-4686,-4138,-3396,-2906,-2654,-2935,-1927,-2950,-3108,-3265,-2669,-2192,-4762,-4745,-4774,-4775,-4766,-4791,-4764,-4792,-4819,-4809,-4794,-4672,-4399,-4220,-3525,-2804,-2194,-2882,-3809,-3499,-3417,-3465,-4822,-4827,-4817,-4796,-4760,-4799,-4803,-4799,-4856,-4870,-4810,-4819,-4248,-3883,-4100,-3301,-4238,-3935,-3798,-4179,-4291,-4294,-4825,-4864,-4879,-4875,-4884,-4880,-4854,-4836,-4915,-4857,-4913,-4894,-4884,-4773,-4649,-4770,-4662,-4462,-4296,-4032,-4415,-4460,-4840,-4863,-4912,-4877,-4878,-4880,-4856,-4857,-4889,-4898,-4888,-4908,-4889,-4919,-4741,-4780,-4689,-4531,-4323,-4108,-4526,-4519],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
