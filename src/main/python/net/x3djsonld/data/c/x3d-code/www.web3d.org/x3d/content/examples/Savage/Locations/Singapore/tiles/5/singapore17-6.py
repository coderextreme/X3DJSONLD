###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.67601420477412,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[9,10,12,18,25,31,37,44,51,52,50,45,39,38,43,46,48,47,44,41,39,37,33,31,30,29,25,22,20,19,19,20,21,22,22,23,9,10,12,17,24,30,36,44,51,53,52,47,40,38,41,44,46,46,42,39,37,34,31,29,30,28,25,22,19,18,18,20,21,22,23,23,11,13,15,18,22,27,33,40,47,51,52,48,43,39,39,41,44,43,39,35,33,31,28,27,28,27,24,20,17,16,17,19,21,22,24,24,12,15,19,21,22,26,31,37,42,46,48,46,42,39,36,37,40,39,35,31,29,27,25,24,25,25,21,18,15,14,16,19,21,22,24,25,13,19,24,25,25,27,30,33,37,39,40,40,38,35,33,33,35,34,29,26,24,22,20,21,22,22,19,15,13,13,16,19,21,22,24,25,15,22,28,29,29,29,30,32,34,35,35,34,33,31,29,29,30,29,24,21,20,19,18,18,19,18,16,13,11,12,15,19,21,23,23,24,15,24,32,35,34,33,32,33,34,33,30,29,27,26,24,24,24,23,20,18,18,17,16,16,15,14,13,11,11,12,16,19,22,23,23,23,17,27,37,40,39,36,33,33,33,31,28,26,24,22,20,19,19,19,17,16,15,15,14,13,12,12,11,11,11,13,16,19,22,24,23,23,19,32,42,44,41,36,33,32,32,30,28,26,24,21,18,17,17,16,15,13,12,11,11,11,11,10,10,11,12,14,18,21,22,23,23,22,24,36,45,44,39,35,30,29,29,28,27,25,24,21,17,15,15,14,13,12,11,10,11,11,10,10,11,12,15,18,20,22,22,22,21,21,31,39,43,40,34,29,26,25,24,24,25,25,24,21,17,14,13,12,12,13,13,13,14,14,13,13,14,17,21,23,23,22,20,19,19,20,36,39,39,35,29,25,23,21,20,21,23,24,23,21,17,14,12,11,12,13,14,16,16,17,16,16,17,20,25,27,25,22,19,17,17,18,38,36,32,28,25,22,21,20,19,19,20,20,19,18,16,13,11,11,12,13,14,16,17,18,18,18,20,22,26,27,25,22,19,15,15,16,38,34,28,24,23,22,21,20,19,19,19,18,17,15,14,12,10,10,11,12,15,16,18,19,20,21,22,23,26,27,25,22,17,14,13,14,39,34,29,27,27,26,23,21,19,19,19,18,16,14,12,11,10,10,11,12,16,18,19,21,22,24,24,25,26,25,23,20,15,12,12,13,38,35,32,31,31,29,25,22,20,19,20,18,15,13,11,10,10,10,11,13,17,19,20,21,24,26,25,25,25,24,21,17,13,10,10,11,35,36,36,35,33,30,26,23,21,20,20,18,15,13,11,10,9,10,12,14,17,19,19,21,24,26,25,24,23,21,18,14,11,8,8,10,32,35,37,37,35,31,27,24,23,21,20,18,15,12,10,9,9,10,13,15,18,20,19,21,24,26,24,23,21,19,15,12,8,7,8,9,26,32,35,35,33,31,28,27,26,24,21,18,15,12,9,8,8,9,13,16,18,19,20,21,24,25,23,21,20,18,14,11,8,7,8,10,21,27,32,32,31,31,31,31,30,27,23,20,16,12,9,8,8,10,14,17,18,20,21,22,24,24,22,20,19,17,14,11,9,8,10,11,17,23,27,29,31,34,37,36,34,30,25,21,17,14,11,10,11,13,17,19,21,22,22,22,23,23,22,20,19,17,14,11,9,9,11,13,14,19,24,29,34,40,44,42,37,32,28,23,19,15,13,12,14,17,20,22,24,24,22,21,22,23,22,21,20,17,14,11,10,10,12,14],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
