###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca4-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.7987358796286328,98.7885625,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[426,357,727,663,659,617,816,754,809,927,974,1021,979,851,550,513,505,809,952,783,688,677,346,310,529,439,490,554,649,764,843,943,998,892,771,587,571,477,552,857,853,856,824,748,596,352,409,438,491,573,660,739,889,1013,957,841,792,602,563,525,972,1026,813,984,898,782,292,438,328,446,506,576,716,765,921,967,1015,1116,884,650,588,636,1189,1219,1040,1099,980,894,258,385,321,437,563,664,711,794,942,1007,1135,1231,994,675,650,817,1177,1425,1176,1184,1078,1041,319,549,349,463,583,872,790,821,971,1014,1090,931,826,576,614,1056,1191,1463,1421,1385,1461,1367,446,430,608,594,783,1109,1111,919,989,1022,1126,1052,884,599,728,1192,1362,1595,1591,1675,1568,1469,461,485,613,701,1023,1367,1184,955,995,1046,1288,1103,777,722,954,1300,1464,1482,1496,1468,1417,1381,517,738,563,655,969,1220,1075,1002,1005,995,1193,995,736,914,1222,1240,1384,1400,1365,1376,1364,1265,613,720,651,851,902,988,1029,1049,996,1038,939,963,846,1128,1227,1334,1283,1315,1307,1268,1266,1194,565,678,711,832,909,947,1018,1079,1051,1054,976,1025,1006,1234,1359,1262,1242,1266,1243,1245,1214,1193,774,776,825,777,958,1167,1080,1104,1156,1448,1143,989,1254,1388,1260,1306,1236,1228,1228,1218,1211,1199,603,722,830,873,938,1019,1125,1220,1201,1239,1072,1155,1299,1376,1258,1229,1202,1227,1212,1213,1217,1222,708,794,817,1020,1007,1163,1070,1192,1100,1127,940,1135,1357,1348,1318,1219,1206,1207,1204,1209,1188,1359,785,822,834,980,982,1101,1186,1417,1094,944,941,1182,1257,1340,1267,1239,1202,1192,1207,1205,1286,1157,468,691,874,1034,1107,1162,1401,1291,1080,947,961,1254,1220,1208,1546,1207,1198,1204,1189,1200,1225,1095,694,786,759,1128,1175,1384,1353,1157,979,947,1073,1168,1182,1202,1217,1205,1198,1196,1259,1289,1146,1126,779,1084,1069,940,1192,1346,1245,1079,960,1020,1081,1128,1173,1188,1152,1200,1197,1203,1215,1456,1086,1078,928,1315,1599,1393,1280,1322,1154,1025,959,1107,1108,1121,1134,1180,1218,1214,1195,1202,1354,1378,1161,1055,1137,1351,1793,1465,1386,1190,1148,1020,1062,1121,1129,1141,1144,1170,1193,1215,1203,1386,1444,1246,1183,1222,1109,1436,1691,1420,1366,1332,1050,1048,1110,1180,1183,1130,1102,1162,1170,1191,1221,1283,1389,1415,1403,1525,1387,1494,1530,1457,1462,1304,1090,1127,1120,1139,1171,1124,1110,1141,1193,1230,1211,1223,1272,1406,1428,1490,1361,1515,1522,1457,1455,1308,1109,1122,1130,1146,1168,1132,1123,1154,1198,1232,1211,1219,1266,1410,1412,1471],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
