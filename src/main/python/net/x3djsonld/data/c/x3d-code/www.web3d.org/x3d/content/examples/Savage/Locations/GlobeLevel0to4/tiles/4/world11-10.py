###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[34,16,12,9,41,836,2019,1967,1467,1556,1161,1596,802,711,1514,1183,552,658,886,854,1253,1377,38,22,10,168,156,930,2302,1670,1539,1004,1152,886,1175,898,1510,1476,636,1967,1212,1033,1596,1943,38,22,66,975,1562,2274,3027,1583,1884,1287,1151,993,745,1087,1581,1080,875,1044,2230,1702,2227,2115,33,30,816,1358,1650,1935,2677,2509,1011,1169,957,1159,1090,1282,1947,723,962,1365,2083,2472,1844,2274,44,74,1638,1855,3081,2239,1570,938,1737,817,903,727,1328,1329,1600,632,1271,2215,2564,2414,2849,2625,69,148,1574,1718,1852,1729,1376,786,842,709,728,708,997,1559,846,1078,785,1510,2815,2181,2994,3272,161,791,1882,1759,1712,1482,903,817,1053,731,727,706,1389,805,1042,1184,1111,1228,1536,2775,3211,2983,244,809,1625,1784,1782,2348,1318,1030,2128,1329,789,707,1160,1539,1643,1033,843,574,2414,2098,3198,3289,409,1847,1696,1795,2055,1444,1225,2613,2983,1476,1058,1080,940,1165,1386,1023,661,432,670,846,2684,1364,1117,2106,1626,2583,1973,1535,1910,1517,99,2365,1327,1260,1820,1224,1263,743,325,354,820,489,471,868,1205,1586,1376,1625,2367,698,-16,-29,-29,-29,1412,1218,1007,1873,2403,268,247,342,523,357,290,310,2058,1276,1737,1823,2238,-24,-29,-29,-29,-29,31,1763,1518,1613,498,182,202,296,280,258,258,281,2412,1267,2034,1699,2383,-29,-29,-29,-29,-20,54,249,1559,393,136,155,193,213,210,236,423,1967,2336,2100,2213,994,1417,-29,-29,-29,-29,-25,112,247,1639,93,110,133,170,184,206,232,447,1063,2272,1501,511,972,461,-29,-29,-29,-29,-29,110,157,59,79,105,135,160,175,196,271,392,547,2316,1246,961,175,14,-29,-29,-29,-29,-19,30,32,55,79,102,105,189,176,186,244,363,1344,973,1910,1895,56,-14,-29,-29,-29,-29,-16,141,19,55,76,137,175,186,199,192,248,484,536,2466,1898,1619,3,24,68,-29,-29,-16,102,205,230,93,116,136,145,157,172,187,263,1310,1233,2162,1528,91,498,1775,-29,-29,-29,-29,-30,174,14,78,81,119,119,134,178,392,135,299,241,1261,305,585,2408,568,-29,-29,-29,-30,-30,316,124,40,58,94,96,128,165,307,309,242,261,1238,1185,2440,2333,-29,-29,-29,-29,83,60,198,159,2,59,75,89,91,106,90,189,203,234,2671,2771,2888,1601,-29,-29,-29,-29,137,16,184,42,23,56,70,139,81,126,446,302,220,182,1072,1747,1582,587,-29,-29,-29,-29,-57,213,231,205,172,131,63,55,72,121,234,243,204,188,813,1364,895,-3,-29,-29,-29,-29,115,143,276,205,163,127,63,56,75,115,242,240,198,191],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
