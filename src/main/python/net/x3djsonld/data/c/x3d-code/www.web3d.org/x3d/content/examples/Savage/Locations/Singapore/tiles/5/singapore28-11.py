###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore28-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4567512097838313,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[10,12,14,17,19,20,19,19,20,21,21,20,20,23,29,34,36,37,34,32,28,25,23,20,18,15,11,9,11,14,18,22,27,31,30,29,27,13,16,20,23,24,23,21,22,22,23,23,22,22,24,28,32,34,34,32,30,27,25,23,20,18,15,12,10,11,12,16,20,26,31,30,30,27,16,21,26,28,29,27,24,24,25,25,26,25,24,25,28,30,31,32,30,28,26,24,22,20,18,15,13,11,10,10,14,19,25,31,31,31,28,17,22,28,30,30,28,25,26,27,28,29,29,27,29,32,33,34,34,33,31,28,26,24,22,20,18,15,12,11,10,14,18,24,31,31,31,29,17,23,29,31,31,28,26,27,30,32,33,33,31,33,36,38,39,38,36,34,31,28,25,23,23,22,18,14,12,11,14,17,24,30,31,31,30,15,20,24,27,29,27,27,29,32,34,35,34,33,34,35,36,38,37,35,33,30,28,26,24,22,20,18,16,15,16,19,22,27,30,31,32,33,14,16,19,22,25,27,28,31,34,36,36,36,34,33,33,33,35,35,34,32,30,28,27,25,21,18,18,18,19,21,25,28,30,31,31,32,36,14,16,19,22,25,27,30,34,38,38,37,35,34,32,31,30,31,31,32,30,28,27,25,22,19,18,19,21,25,28,29,31,30,31,31,31,35,14,17,20,23,25,28,32,37,43,42,37,35,33,31,29,27,26,26,28,28,27,25,22,19,18,17,20,24,31,36,34,32,30,29,30,30,34,17,20,22,26,29,33,37,40,43,41,37,34,32,30,27,25,24,24,25,25,24,22,19,16,15,14,18,24,31,36,33,30,29,27,27,27,29,21,23,25,29,34,38,41,42,42,40,36,33,30,27,25,24,23,22,22,21,20,17,15,13,11,11,16,22,29,35,30,26,26,26,25,24,23,23,25,27,31,36,39,42,41,40,38,35,32,29,27,25,24,23,22,20,18,16,14,11,10,10,11,15,21,27,32,28,25,24,24,23,21,20,26,27,28,32,36,38,40,39,37,35,33,30,28,27,26,25,24,22,21,18,14,11,10,9,9,11,15,20,25,29,27,26,23,22,21,19,18,29,30,31,33,36,37,38,37,35,33,31,29,27,26,25,24,22,21,19,17,12,10,9,9,11,13,17,22,26,28,27,27,24,21,19,17,16,33,34,34,35,36,35,35,34,32,30,29,27,26,25,23,21,19,18,17,15,11,10,10,11,13,16,21,25,27,28,28,28,25,22,17,14,15,36,36,37,38,37,37,35,33,31,28,27,25,23,22,21,19,17,16,15,14,12,11,11,13,16,19,23,26,28,29,29,29,23,18,14,11,12,36,40,41,42,41,40,39,35,31,27,24,22,20,19,18,16,15,14,14,14,13,12,14,16,19,22,24,26,29,30,30,29,20,12,9,7,8,35,40,44,44,44,43,41,37,32,28,24,20,18,17,15,14,13,13,14,15,15,15,16,18,22,24,25,27,31,33,35,34,21,9,7,7,8,31,39,45,46,46,45,43,39,34,29,24,20,16,15,14,12,12,13,15,17,18,19,19,21,24,25,27,29,35,40,43,44,26,11,10,9,9,30,38,44,46,45,44,43,39,34,29,23,19,16,13,13,12,13,14,17,19,21,22,22,24,26,27,29,31,36,42,45,44,27,11,11,10,10,31,36,41,42,42,42,41,38,32,27,22,18,15,14,14,14,15,17,20,22,23,25,26,27,28,30,30,32,35,38,37,35,22,11,11,11,10,32,34,37,37,37,37,38,35,29,25,20,17,15,14,15,16,18,20,22,24,25,27,28,29,30,31,32,32,33,32,30,26,18,11,12,12,11,31,31,32,31,31,31,32,30,26,23,20,17,15,16,17,19,21,24,27,28,27,28,30,31,31,32,32,31,28,24,21,19,15,12,13,13,14],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
