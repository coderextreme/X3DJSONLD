###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore16-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3519706612479037,103.7334663412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[23,21,18,16,16,18,20,22,22,20,17,17,18,20,23,25,27,30,32,33,35,35,33,30,27,25,25,27,30,34,36,37,36,34,34,34,20,18,15,15,16,18,20,21,21,19,17,17,18,20,24,26,29,31,33,34,35,35,32,31,31,30,30,32,36,40,41,42,40,39,39,39,16,15,13,14,15,17,18,20,20,19,18,18,19,21,24,27,29,31,33,34,34,34,33,32,35,37,37,38,42,45,47,48,46,44,44,44,12,13,13,14,15,15,17,18,19,19,19,19,21,23,25,26,28,29,31,32,33,34,35,36,42,46,45,45,47,49,51,52,52,50,49,48,11,12,13,14,15,15,16,17,19,19,19,20,22,23,24,25,26,27,29,30,32,34,36,40,46,51,50,50,50,50,52,54,54,53,51,49,11,12,13,14,15,15,17,18,19,19,19,20,21,22,23,24,25,26,27,29,32,35,38,41,46,49,48,48,48,48,50,52,51,50,48,48,11,13,14,15,15,16,18,19,19,19,18,19,20,21,22,23,24,25,26,28,32,35,39,42,43,45,44,43,43,44,46,47,47,46,46,46,12,13,14,15,15,16,18,18,18,17,17,17,18,19,20,21,23,25,26,28,31,35,39,41,41,41,40,39,38,39,40,42,42,43,44,45,12,13,14,15,16,17,18,17,17,16,16,16,16,17,18,20,22,24,26,28,31,34,37,39,39,38,36,35,35,35,37,38,40,42,43,44,12,13,14,15,17,17,18,17,17,16,16,16,16,16,17,19,22,24,26,29,30,32,35,36,36,36,34,33,34,37,39,40,42,43,42,41,12,14,15,17,18,18,18,18,17,17,16,16,16,16,17,19,21,24,26,28,29,31,31,32,34,34,32,32,37,41,42,44,45,45,42,38,13,17,19,20,21,20,19,19,18,18,17,17,16,16,17,19,21,23,25,27,28,29,28,29,32,33,33,34,40,44,45,46,48,48,42,36,15,19,23,24,23,21,20,19,19,19,19,18,17,17,18,19,21,23,25,27,27,27,26,27,30,33,36,39,43,46,48,49,50,50,42,35,15,20,24,25,24,22,20,20,20,19,19,18,18,18,18,19,22,24,25,27,27,27,27,28,32,36,40,44,48,51,53,55,53,51,42,34,15,19,23,24,24,21,19,19,19,19,18,18,18,18,19,20,23,25,25,26,27,28,29,31,35,39,45,50,54,57,59,61,57,51,41,33,15,18,20,21,21,20,19,19,19,19,18,18,18,18,18,20,22,24,25,26,29,30,32,34,38,42,50,57,60,63,63,62,56,50,40,32,16,16,17,17,17,17,18,18,18,18,18,18,18,18,17,19,21,23,25,27,31,33,35,38,41,46,56,63,66,67,63,58,52,46,38,31,16,15,15,14,15,16,18,18,17,17,16,16,16,16,16,18,20,22,24,27,31,34,37,40,44,49,59,66,66,65,57,51,45,40,34,30,15,14,13,14,15,17,19,18,16,15,14,14,14,14,15,17,19,21,23,26,30,33,37,41,46,51,59,64,61,57,48,40,37,34,31,29,15,14,14,15,17,19,20,20,18,16,15,14,14,15,16,17,19,20,22,25,28,31,35,40,46,51,56,58,54,49,40,32,31,30,29,29,15,15,16,18,20,22,22,22,21,19,18,17,17,17,17,18,19,19,21,23,26,29,33,37,43,48,49,49,45,40,34,28,28,29,30,30,17,18,19,21,22,23,24,24,24,23,21,20,19,19,18,18,18,18,19,20,23,27,30,34,39,42,41,40,37,34,30,26,27,28,30,30,21,22,24,24,24,24,24,25,26,26,23,22,21,20,18,17,17,17,16,17,20,23,27,30,32,33,33,32,31,31,28,26,27,28,29,30],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
