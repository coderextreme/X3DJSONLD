###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_15',geoSystem=['GDC'],position=(-56.291665660871615,67.4583407093748,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-56.291665660871615,67.4583407093748,0.0),range=4495500.0,child1Url=['../../tiles/4/world2-10.x3d'],child2Url=['../../tiles/4/world2-11.x3d'],child3Url=['../../tiles/4/world3-10.x3d'],child4Url=['../../tiles/4/world3-11.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world1-5.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[1139,1172,1059,1796,2129,1495,1855,1442,1474,1081,845,578,-652,-644,-496,-136,1079,1273,1530,1524,1668,-795,-318,7,543,1365,223,1,-229,-143,-111,-288,-387,-532,-426,-372,-257,-488,-54,82,590,800,-3070,-2651,-2211,-130,672,-47,-2172,-2373,-2903,-2920,-3300,-2147,-2411,-2553,-2697,-3121,-1189,-614,-371,74,-283,-4041,-3231,-3878,-2682,-2568,-3066,-3995,-4039,-3664,-3159,-3398,-2911,-3378,-3460,-3361,-3478,-3554,-3281,-3072,-2995,-2873,-4445,-4028,-4778,-4613,-4567,-4615,-4428,-4336,-3935,-4048,-3745,-3437,-3534,-3718,-3618,-3630,-3589,-3637,-3677,-3690,-3690,-4795,-4426,-4930,-4947,-4998,-4915,-4657,-4568,-4323,-4298,-4286,-4073,-4034,-3896,-3824,-3881,-3080,-2320,-3257,-3723,-3852,-5099,-5151,-5135,-5179,-5095,-4998,-4801,-4668,-4472,-4442,-4387,-4222,-4120,-4116,-4150,-3194,-2189,-2328,-3755,-3765,-3969,-5262,-5274,-5264,-5239,-5166,-5064,-4908,-4693,-4718,-4543,-4457,-4374,-4358,-3337,-3314,-3102,-1939,-1679,-3457,-4454,-4288,-5294,-5317,-5315,-5252,-5184,-5094,-4976,-4847,-4985,-4767,-4605,-4434,-4488,-1874,-1283,-1617,-2006,-1265,-3811,-4645,-4576,-5329,-5327,-5363,-5268,-5229,-5148,-5007,-4931,-4927,-4796,-4249,-4472,-4718,-2520,-1245,-1237,-1600,-2429,-3889,-4869,-4750,-5159,-5301,-5409,-5323,-5128,-4999,-4948,-4727,-4785,-4293,-4441,-2538,-2529,-3399,-2511,-1665,-1932,-4374,-4736,-4816,-4539,-4767,-4964,-5322,-5355,-5116,-4641,-4679,-4800,-4781,-3693,-1817,-3473,-2484,-2814,-2814,-1988,-3377,-4738,-4703,-4458,-4106,-4419,-4690,-5132,-4954,-5049,-4520,-4407,-4844,-4642,-3420,-3635,-4225,-3585,-2338,-1929,-1914,-4094,-3139,-4442,-4409,-4508,-3848,-4391,-4628,-1445,-4514,-4819,-4888,-4790,-4893,-4565,-4489,-4129,-1876,-1964,-1378,-2102,-3603,-2969,-4649,-4621,-4322,-595,-3286,-3642,-4351,-4100,-4545,-4519,-4476,-4650,-2600,-4505,-3966,-1987,7,-1058,-1881,-917,-3699,-4670,-4556,-4239,-2856,-3519,-4518,-4736,-4369,-4096,-4779,-4562,-3981,-4412,-3703,-2763,-672,-311,-671,-3444,-3480,-3897,-4283,-4318,-4112,-3788,-4311,-4613,-4540,-4607,-4016,-4701,-4764,-4668,-3814,-2354,-1980,-594,-446,-1903,-3502,-3756,-4132,-4206,-4158,-3947,-4358,-4459,-4299,-4358,-4460,-4233,-4522,-4639,-3857,-150,-1966,-110,-584,-1469,-2960,-3543,-3805,-4076,-4188,-4108,-4032,-4117,-4133,-4263,-4099,-4032,-4285,-4401,-4463,-2007,-1874,-395,-4,-1451,-2531,-3099,-3446,-3685,-3802,-4072,-3941,-3820,-4007,-3236,-3909,-3697,-3774,-4217,-4143,-4379,-3687,-2290,-485,-185,-347,-688,-2897,-3204,-3466,-3568,-3724,-3716,-3599,-2870,-2527,-2176,-794,-3565,-4117,-4466,-4492,-4427,-3380,-631,-2536,-2666,-3354,-3427,-3520,-3361,-3654,-3434,-3542,-3554,-2737,-2490,-1986,-1058,-3466,-4148,-4477,-4536,-4403,-3535,-712,-2779,-2969,-3465,-3436,-3521,-3375,-3690,-3472,-3554,-3478],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
