###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-90.04166398449098,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4263,-4266,-3984,-3957,-3749,-2572,-3879,-3643,-4569,-4258,-4509,-4699,-4639,-4415,-4479,-4067,-3794,-4637,-2906,1287,2899,3128,-4346,-4246,-3980,-3924,-4109,-3800,-4306,-2020,-3914,-4138,-4732,-4783,-4726,-4676,-4373,-3608,-3449,-4385,-2880,1535,3042,3727,-4198,-4338,-4129,-4277,-4021,-4069,-2530,-2834,-2456,-4300,-4665,-4761,-4732,-4673,-4526,-4524,-3562,-4215,-4223,1673,2511,4488,-4035,-4208,-4042,-4007,-3998,-4216,-3829,-1865,-3239,-4295,-4693,-4813,-4707,-4884,-4721,-4583,-4291,-4048,-4447,1354,3173,4604,-4266,-3872,-4215,-4152,-4175,-4188,-3689,-2927,-16,-4222,-4491,-4276,-4690,-4300,-4674,-4703,-4668,-5148,-3161,1014,3508,5054,-4195,-4230,-4285,-4249,-4382,-4313,-4157,-3644,-2468,-3777,-4208,-4281,-4742,-4010,-4960,-4758,-4784,-4180,-3031,1271,4586,3674,-4144,-4318,-4287,-4267,-4392,-4418,-4198,-4085,-3234,-2631,-4271,-4386,-4803,-4744,-4962,-4888,-4557,-3257,-2344,993,4832,3660,-4460,-4234,-4263,-4340,-4411,-4505,-4447,-4390,-3782,-2741,-4102,-3953,-4432,-4895,-4915,-5260,-4546,-4568,-1826,1105,4393,3660,-4266,-4566,-4180,-4273,-4405,-4463,-4371,-4375,-4039,-3494,-3583,-4352,-4747,-4630,-4759,-4803,-4324,-5568,-1466,1448,4032,3665,-3916,-4272,-4335,-4372,-4405,-4464,-4413,-4347,-4075,-3915,-3227,-4217,-4508,-4595,-4649,-4683,-4184,-6856,-1410,1761,3874,3677,-4300,-4356,-4395,-4344,-4431,-4476,-4461,-4441,-4464,-4285,-3098,-4087,-4356,-4618,-4303,-4599,-4414,-3622,-1140,2837,3833,3788,-4445,-4402,-4419,-4450,-4448,-4478,-4461,-4357,-4577,-4448,-3135,-3439,-4160,-4463,-4760,-4740,-6315,-1858,443,3948,4102,3968,-4519,-4525,-4468,-4413,-4399,-4527,-4601,-4576,-4515,-4419,-3610,-2691,-3702,-4307,-4415,-4999,-3542,-630,1001,4682,4003,3755,-4589,-4338,-4445,-4370,-4466,-4611,-4640,-4640,-4534,-4561,-4195,-3210,-3177,-3876,-4401,-6637,-1930,695,2995,4666,3880,4233,-4546,-4551,-4358,-4320,-4599,-4659,-4675,-4661,-4597,-4605,-4571,-3460,-2703,-3742,-5467,-2728,215,1400,2993,4629,4055,4241,-4483,-4342,-4495,-4311,-4660,-4684,-4707,-4628,-4597,-4597,-4621,-4052,-2176,-3387,-3831,-115,1644,3408,4727,3831,3831,1077,-4270,-4294,-4397,-4447,-4640,-4767,-4769,-4784,-4594,-4617,-4588,-4146,-3025,-4235,-676,2861,3616,5240,4602,3815,1707,633,-4321,-4069,-4426,-4545,-4710,-4833,-4785,-4798,-4799,-4695,-4532,-4143,-3731,-2445,980,3559,4850,4822,4967,3935,1609,621,-4041,-4137,-4229,-4506,-4822,-4781,-4873,-4844,-4805,-4738,-4534,-4185,-4552,-152,446,4258,4751,3953,4926,4482,935,349,-3860,-4270,-4156,-4195,-4517,-4862,-4886,-4930,-4895,-4746,-4468,-4386,-3666,8,3803,4468,3978,4229,5167,2242,1309,274,-3882,-4118,-4031,-4215,-4535,-4686,-4718,-4786,-4913,-4702,-4527,-4743,-2417,-159,4319,3435,3196,3776,3958,347,246,220,-4160,-4194,-4257,-4216,-4126,-4510,-4886,-5026,-4758,-4642,-4702,-5313,-1361,947,4832,4250,3699,3767,688,230,204,182,-4075,-4145,-4052,-4110,-4200,-4088,-4600,-4935,-4669,-4631,-4719,-3650,-293,2535,4119,2147,663,2013,328,293,178,193,-4006,-4060,-4188,-4124,-4285,-4415,-4485,-4969,-4682,-4700,-4816,-3507,-207,2734,3351,1583,733,2427,319,290,202,202],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
