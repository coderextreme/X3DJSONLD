###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore21-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3956292231378735,103.589836,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[48,53,54,54,49,45,46,47,49,53,55,57,58,57,54,51,46,41,37,33,30,27,25,21,18,16,15,14,13,14,14,16,17,18,19,19,42,46,47,47,44,41,43,45,46,48,50,53,54,53,50,47,43,39,35,32,30,29,27,23,20,18,16,15,15,15,17,19,21,21,21,20,40,44,44,43,42,40,41,43,44,45,48,50,50,50,47,44,42,39,36,33,32,30,28,24,21,19,17,17,17,18,19,21,23,23,23,23,39,43,42,41,40,38,40,41,42,43,45,47,47,46,44,42,40,40,37,35,33,31,29,24,21,19,18,19,20,20,21,23,25,25,26,26,42,47,45,42,40,37,38,39,41,42,43,44,43,42,41,40,39,39,38,35,33,31,28,24,21,20,20,21,22,23,24,25,25,26,27,29,43,51,48,45,40,36,35,36,38,41,41,40,39,38,38,37,38,39,38,36,34,31,28,24,22,22,22,24,25,26,27,26,26,26,28,31,45,52,49,46,40,35,33,33,34,37,36,35,35,34,35,36,37,38,38,36,34,32,29,25,24,24,24,26,27,28,28,26,25,26,28,32,45,51,49,47,41,35,32,30,31,32,32,31,31,31,32,34,36,38,38,36,34,32,30,28,26,26,27,29,30,29,28,26,25,26,28,32,42,48,48,46,41,34,31,29,29,29,29,28,28,29,31,34,37,39,39,38,36,34,32,31,30,30,30,31,32,30,28,26,26,25,26,29,40,44,45,45,39,34,31,28,26,26,26,26,26,27,30,34,37,39,40,40,39,36,35,34,34,34,34,34,33,31,28,26,25,24,24,26,38,42,42,42,37,32,30,27,26,25,25,26,27,28,30,34,36,38,40,40,40,38,37,37,37,37,37,36,34,31,29,26,23,21,20,22,35,38,38,37,34,30,28,26,25,24,24,26,27,28,31,33,36,38,39,40,40,40,39,39,39,40,40,37,35,32,29,25,21,17,15,17,31,34,33,32,30,27,26,25,24,24,24,26,27,28,30,31,32,34,36,37,38,38,38,38,39,40,39,38,35,32,28,23,19,16,14,15,28,29,29,27,26,24,24,24,24,24,25,26,27,27,28,28,29,30,31,33,34,34,34,35,37,38,38,37,34,30,26,22,18,16,14,14,24,26,25,24,23,22,23,23,24,25,26,26,26,25,25,25,25,26,27,28,29,30,31,32,33,34,35,34,32,27,23,19,16,15,14,14,21,23,22,22,22,22,22,23,24,26,26,27,25,23,22,22,22,22,23,24,25,26,27,28,29,30,31,31,29,24,20,17,15,15,15,14,22,22,22,22,22,22,23,24,24,26,26,26,24,22,20,19,19,19,20,21,23,25,26,27,26,27,27,27,25,21,18,17,16,17,18,17,24,23,23,23,24,25,25,25,25,26,26,26,24,21,20,18,18,18,18,19,21,25,26,26,25,25,24,22,20,18,17,18,20,21,22,20,26,25,26,27,27,27,27,28,29,30,30,29,26,22,20,18,17,16,16,17,19,24,26,25,25,23,22,19,18,17,17,20,23,25,26,24,30,28,30,31,31,30,31,32,34,36,36,35,31,26,22,18,17,15,14,14,17,21,24,24,24,22,20,18,16,17,19,22,25,28,29,26,35,31,33,34,34,33,35,36,39,41,41,40,36,30,24,19,17,15,14,14,15,19,20,22,22,19,17,16,15,17,21,24,28,30,31,28,38,34,34,34,35,36,37,38,42,45,45,44,39,33,26,21,18,16,15,14,14,16,17,18,18,16,14,13,14,18,22,26,30,31,32,29,41,36,35,33,36,38,40,42,44,47,48,47,41,34,28,23,20,17,15,14,14,14,14,15,15,14,13,13,14,19,24,27,31,31,31,29],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
