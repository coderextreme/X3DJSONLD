###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore27-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4480194974058374,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[28,25,22,20,17,15,15,16,18,20,24,29,30,30,26,22,19,16,14,12,11,10,8,5,1,-5,-6,-1,2,4,5,6,7,8,9,7,27,24,23,21,20,18,18,19,20,22,26,30,31,32,30,27,21,14,11,11,11,10,6,2,-2,-6,-5,1,6,6,6,6,7,7,8,7,28,26,23,22,22,23,24,24,25,27,30,34,37,40,37,33,25,14,11,12,12,11,5,-2,-5,-5,-1,5,8,7,6,6,7,6,6,6,30,27,24,23,25,27,28,28,29,29,33,37,40,43,40,36,27,17,14,14,14,13,6,-2,-4,-1,2,7,9,8,7,7,6,5,5,5,32,28,27,26,28,30,31,31,31,30,34,39,40,40,37,34,29,23,20,19,18,16,11,2,0,2,5,7,9,10,10,7,5,5,5,5,33,28,27,28,30,32,32,33,32,31,34,38,37,35,34,32,29,26,24,23,21,19,15,8,6,7,8,8,9,10,10,7,5,5,5,5,30,24,26,29,30,31,32,33,32,29,30,32,32,31,31,30,29,27,26,25,23,19,16,13,12,11,11,10,10,8,6,5,5,5,5,6,25,21,25,28,29,29,30,31,30,28,28,29,29,29,29,29,28,27,26,25,23,20,19,18,18,17,15,14,11,7,5,5,5,6,6,6,20,19,23,26,23,21,22,25,26,27,28,29,30,31,31,30,27,25,22,19,19,20,21,22,22,22,21,18,14,11,8,7,6,7,8,8,18,18,21,24,21,17,18,21,23,26,27,28,31,34,32,30,27,24,20,16,16,20,23,25,26,26,25,21,17,13,10,8,7,8,8,8,18,18,21,23,23,22,21,21,22,23,25,26,31,36,34,30,27,25,22,18,19,21,23,26,27,29,26,21,16,12,9,8,8,8,9,8,20,19,21,23,24,25,24,22,22,22,23,25,31,39,36,29,27,26,24,21,21,22,25,27,29,30,27,21,16,11,9,8,8,9,9,9,24,24,23,23,25,25,25,24,23,23,25,27,33,40,37,31,28,27,25,24,24,25,28,31,31,30,26,20,15,12,10,10,11,11,11,9,27,27,26,24,25,26,26,25,24,24,26,28,33,40,38,32,30,28,27,26,26,28,31,34,33,30,25,19,14,13,12,13,13,13,13,9,24,25,25,24,26,28,24,20,21,23,24,25,29,34,34,32,31,31,30,28,28,31,33,34,33,31,27,21,17,16,15,15,15,15,15,12,21,23,24,24,28,30,24,17,19,22,23,23,25,28,30,32,34,35,33,30,31,34,34,34,33,32,28,23,20,19,18,18,17,17,17,15,18,20,21,23,27,30,26,20,21,23,23,22,26,31,33,34,35,37,37,35,35,35,35,34,33,32,29,25,23,22,22,23,23,23,22,19,17,18,19,22,27,30,26,22,23,24,23,21,27,35,36,36,37,39,39,40,39,37,35,33,33,32,31,28,27,26,26,28,29,27,25,23,19,18,19,20,22,24,25,24,24,24,23,24,29,35,37,36,37,39,40,40,38,35,34,33,32,31,29,27,27,30,33,35,34,31,26,25,20,19,19,19,18,19,22,26,25,23,24,27,31,36,37,37,38,40,40,38,36,34,33,32,31,30,28,26,28,34,39,41,40,33,28,26,18,16,16,16,17,19,23,26,25,23,23,24,27,31,34,36,37,38,38,36,35,33,31,30,29,29,29,30,33,36,39,40,39,34,30,28,16,14,13,13,16,20,23,26,24,22,22,21,22,25,30,36,37,37,36,34,33,31,30,28,28,28,31,34,37,38,39,39,38,35,32,30],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
