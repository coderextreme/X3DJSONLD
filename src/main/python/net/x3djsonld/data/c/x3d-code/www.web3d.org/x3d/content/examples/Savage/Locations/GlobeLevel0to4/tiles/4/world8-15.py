###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,157.4583433915838,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1881,-1764,-1969,-2314,-3129,-3479,-4094,-4451,-4440,-4392,-3860,-4009,-4302,-4290,-4203,-4422,-4986,-1327,-4176,-4975,-5684,-5416,-2008,-1904,-2092,-2470,-2898,-4109,-4371,-4538,-4469,-4387,-4189,-4202,-4227,-4307,-4253,-4317,-4753,-4382,-5117,-5190,-5441,-5636,-1991,-2095,-2200,-2636,-2956,-3951,-4465,-4467,-4416,-4431,-4353,-4240,-4384,-4620,-4414,-4695,-3716,-4996,-4995,-5242,-5402,-5517,-2030,-2141,-2195,-2528,-3069,-3975,-4392,-4432,-4403,-4369,-4286,-4352,-4510,-4404,-4660,-4572,-6,-4617,-4781,-5307,-5384,-5417,-2082,-2196,-2335,-2723,-2953,-3908,-4270,-4356,-4351,-4315,-4322,-4172,-4332,-4160,-4406,-4435,-4236,-4710,-5104,-5226,-5632,-5526,-2310,-2350,-2535,-2690,-3229,-3840,-4201,-4375,-4331,-4274,-4208,-4230,-4431,-4275,-4200,-4185,-4363,-4610,-2639,-4438,-5681,-5611,-2397,-2403,-2598,-2587,-3366,-3792,-4187,-4347,-4262,-4168,-4292,-4196,-4374,-4262,-4550,-3981,-4665,-4728,-5098,-5494,-5408,-5490,-2450,-2640,-2728,-2808,-3405,-3811,-4216,-4358,-4159,-4240,-4225,-4347,-4438,-4227,-4184,-4344,-4474,-3864,-5065,-5406,-5396,-5569,-2697,-2968,-2863,-2085,-3542,-3782,-4171,-4375,-4150,-4308,-4335,-4445,-4391,-4152,-3990,-4380,-4730,-4591,-5132,-5228,-5380,-5445,-2825,-2970,-2848,-3450,-3576,-3727,-4157,-4384,-4196,-4243,-4436,-4441,-4255,-4307,-4269,-3773,-4635,-5047,-4926,-5362,-5513,-5470,-3339,-2885,-3008,-3659,-3616,-3531,-4185,-4398,-4401,-4447,-4624,-4372,-4236,-4479,-4291,-4437,-4893,-5102,-5056,-5626,-5657,-5390,-3515,-2972,-2993,-3816,-3607,-3536,-4387,-4497,-4503,-4597,-4618,-4318,-3761,-4392,-4319,-3677,-4965,-5153,-4933,-5976,-5699,-5636,-3576,-3140,-3129,-3846,-3736,-3711,-4258,-4571,-4675,-4596,-4763,-4571,-4369,-4430,-4622,-1511,-4931,-5093,-5991,-6157,-5770,-5884,-3578,-3257,-3318,-4029,-4229,-4305,-3134,-4684,-4803,-4630,-4876,-4351,-4375,-4086,-4526,-3239,-5142,-5122,-6145,-6096,-5792,-5778,-3755,-2412,-3517,-4075,-4317,-4663,-4289,-4790,-4917,-4948,-5024,-1078,-3274,-4398,-4739,-3109,-4715,-5182,-6060,-6160,-5577,-5590,-4051,-2420,-4019,-4341,-3308,-4774,-4622,-4780,-5024,-5015,-5007,-4862,-2911,-4490,-3405,-4673,-4849,-5257,-4218,-5736,-5449,-5623,-4624,-3601,-3088,-4572,-4825,-4900,-4927,-4923,-5111,-5133,-4966,-4881,-4653,-4539,-4567,-4037,-4981,-5217,-5219,-5794,-5478,-5626,-4384,-4436,-3192,-4737,-4804,-4827,-4795,-5070,-5159,-5138,-4978,-4889,-4674,-4278,-2278,-4131,-5116,-5363,-5405,-5720,-5527,-5330,-4736,-4644,-4910,-4918,-4751,-4879,-5195,-5142,-5183,-5192,-4984,-2645,-4005,-4040,-3985,-4961,-5134,-5382,-3746,-4982,-5245,-5480,-5146,-4872,-5008,-4945,-2333,-4413,-5146,-5224,-5218,-5237,-5007,1,-4248,-4305,-4401,-4883,-5062,-5279,-4962,-5653,-5730,-5234,-5148,-4989,-5080,-5127,-4825,-4800,-4848,-4888,-5206,-4500,-4673,-4496,-4453,-4650,-3448,-4929,-5224,-5441,-5072,-5167,-5563,-5817,-5177,-5194,-5213,-5215,-4792,-4904,-5103,-5227,-4804,-4069,-1049,-4539,-4772,-2881,-4650,-4894,-5248,-5418,-5232,-5440,-5675,-5762,-5338,-5269,-5335,-5182,-2040,-4244,-4139,-5220,-4959,-4791,-4525,-4381,-3962,-4155,-4856,-4907,-5277,-5435,-5317,-5139,-5562,-5916,-5358,-5231,-5327,-5313,-2224,-3988,-3727,-5203,-5143,-4742,-4556,-4307,-1815,-4275,-5116,-4990,-5300,-5436,-5345,-4850,-5771,-6165],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
