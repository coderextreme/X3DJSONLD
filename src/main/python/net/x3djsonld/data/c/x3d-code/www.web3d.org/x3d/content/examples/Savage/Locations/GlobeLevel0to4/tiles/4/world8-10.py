###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3462,-4144,-4594,-4761,-4906,-5020,-5098,-5105,-4713,-4651,-4569,-4601,-4421,-4564,-4538,-4634,-4635,-4513,-4760,-4117,-3450,-2960,-3378,-3970,-4501,-4777,-4832,-4992,-5072,-5020,-4814,-4725,-4595,-4613,-4655,-4575,-4601,-4377,-4664,-4484,-4257,-4723,-3691,-3711,-3129,-3809,-4265,-4612,-4787,-4950,-5079,-5025,-4965,-4827,-1835,-4544,-4627,-4660,-4711,-4610,-4472,-4069,-3793,-3934,-3799,-3184,-2246,-3552,-3969,-4458,-4727,-4941,-5079,-5090,-5041,-4955,-4704,-4284,-4490,-4711,-4703,-4544,-4121,-4079,-4664,-3643,-3692,-2879,-1778,-3359,-3750,-4323,-4693,-4970,-5077,-5098,-5059,-5055,-4760,-3884,-4750,-4739,-4706,-4832,-4545,-4058,-4035,-3814,-3306,-3057,-1,-2640,-3450,-4223,-4657,-4831,-5088,-5134,-4988,-5099,-4754,-4458,-4739,-4582,-4802,-4899,-4392,-3926,-3929,-3587,-3401,-3612,59,-1117,-3099,-4086,-4557,-4679,-5110,-5098,-5134,-5045,-4785,-4639,-4686,-4575,-4402,-4698,-4220,-4176,-3977,-3563,-3240,-2913,89,105,-2286,-3557,-4338,-4646,-4971,-5138,-5116,-5028,-4990,-4878,-4631,-4769,-4657,-4802,-4417,-3764,-4455,-3849,-3012,-1823,167,96,0,-2928,-4001,-4469,-4890,-5056,-5114,-5056,-5045,-4933,-4044,-4702,-4166,-4365,-4455,-3462,-3677,-2801,-2505,-2241,331,118,217,-2370,-3360,-4318,-4598,-5045,-5145,-4841,-4980,-4892,-4394,-4995,-4357,-4008,-3825,-3590,-4054,-3236,-2804,-3094,598,217,152,-139,-3255,-3258,-4872,-5090,-5074,-5107,-4963,-4906,-4693,-4836,-4400,-4217,-3734,-3227,-3482,-3368,-3213,-3487,456,179,154,147,-1248,-3237,-4987,-5107,-4236,-4906,-5012,-4928,-4955,-4728,-4330,-3844,-3663,-2813,-3210,-3915,-2886,-3613,611,180,185,224,-265,-3325,-4788,-5105,-5256,-5123,-5000,-4838,-4320,-3853,-3747,-3763,-3470,-2594,-3704,-4071,-3852,-3995,345,348,223,122,-71,-3234,-4817,-5110,-5106,-5186,-4941,-4904,-4494,-3923,-3603,-3587,-3265,-3131,-3733,-3999,-4521,-3515,454,491,275,157,133,-2315,-4586,-5097,-5129,-4089,-4721,-5082,-4643,-3855,-3657,-3336,-4120,-3937,-4157,-4072,-4685,-4223,469,468,342,217,59,-1080,-4215,-5083,-5082,-5123,-4955,-4310,-3493,-4072,-3225,-2919,-2897,-3941,-4115,-4508,-4788,-4644,536,547,402,285,114,-589,-3391,-5083,-5092,-5115,-4472,-4438,-4339,-3804,-2885,-2754,-3521,-3993,-4232,-4766,-4691,-4672,676,645,437,370,233,-78,-3543,-5013,-5088,-5099,-5212,-4899,-4250,-4001,-3201,-2933,-3314,-3783,-4289,-4729,-4667,-4337,1036,699,619,537,526,167,-3007,-5025,-5047,-5090,-5124,-4714,-3758,-3414,-2760,-3430,-3566,-4018,-4443,-4605,-4603,-4582,1138,821,646,709,620,297,-1844,-4909,-5130,-5071,-4863,-4242,-4026,-2879,-3066,-3456,-4225,-4172,-4643,-4543,-4592,-4605,1239,917,892,572,431,486,-1566,-4413,-5008,-4938,-4791,-3680,-4467,-2856,-3248,-3892,-4181,-4501,-4583,-4539,-4542,-4567,1212,939,959,636,642,527,-62,-3785,-4728,-4801,-4788,-4005,-3368,-3321,-3953,-4268,-4573,-4464,-4514,-4583,-4505,-4605,1163,1218,889,836,897,692,262,-1623,-4483,-4550,-4693,-3435,-3359,-3298,-4017,-4240,-4437,-4506,-4453,-4469,-4439,-4469,1099,1249,955,889,910,755,320,-1416,-4426,-4546,-4633,-3733,-3721,-3653,-4062,-4250,-4495,-4501,-4446,-4458,-4423,-4470],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
