###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore25-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4305560726498494,103.61856206825804,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[23,22,23,25,28,30,32,32,32,30,28,29,29,29,29,29,27,27,28,27,26,25,23,23,23,23,23,23,22,21,20,19,18,18,18,17,21,20,21,24,27,31,34,35,36,34,33,32,32,32,32,31,30,31,31,31,29,28,26,25,25,25,26,25,23,22,20,19,18,17,17,17,20,20,21,25,29,34,39,41,42,41,38,37,36,36,36,36,35,36,37,36,34,32,29,29,30,31,32,31,28,25,21,19,18,17,16,16,20,21,23,27,33,38,43,47,50,48,46,43,41,41,42,42,42,43,44,43,39,36,33,34,36,38,39,37,33,28,23,19,17,16,14,13,20,21,23,28,34,39,43,47,52,52,51,49,46,47,47,47,47,47,48,46,43,39,37,38,42,44,46,44,38,32,26,21,18,16,14,13,20,20,22,26,32,36,40,45,50,53,54,54,53,52,52,52,51,50,51,48,44,43,42,44,47,50,50,49,44,37,30,23,19,16,15,14,19,20,21,25,30,34,37,41,46,49,51,52,52,51,51,50,48,48,47,45,42,41,42,44,47,49,50,49,45,39,31,24,20,17,16,16,18,19,21,24,27,30,32,36,39,42,45,45,45,45,44,43,41,39,39,38,36,36,37,40,43,44,44,43,41,37,30,24,20,18,17,17,18,19,22,24,27,30,33,36,39,41,44,44,44,42,40,38,36,34,33,32,31,32,34,36,39,39,39,38,36,33,28,24,21,19,19,18,19,20,22,26,30,34,38,43,47,49,50,48,45,41,37,34,32,31,30,29,28,28,30,32,35,35,34,33,31,29,25,23,22,21,21,21,19,20,22,27,31,37,43,48,55,55,55,51,47,42,36,33,31,29,27,26,25,26,27,29,31,31,30,28,27,25,24,23,23,23,23,23,20,21,23,27,32,39,45,54,62,61,58,53,47,42,38,34,32,30,28,26,24,24,26,27,27,27,26,24,23,22,22,22,23,23,23,23,21,22,23,27,32,41,48,57,67,65,61,55,49,45,41,38,35,32,29,26,24,24,24,24,24,24,22,21,20,19,20,20,22,22,22,22,21,22,22,26,31,40,50,59,68,66,62,58,55,51,48,44,41,36,31,27,25,24,23,22,22,21,20,19,18,17,17,17,18,18,18,18,21,21,22,25,29,39,49,57,65,65,62,60,58,56,53,50,45,39,33,29,25,23,23,21,20,19,18,17,16,15,15,15,15,16,16,16,20,20,21,23,26,35,45,52,57,58,57,58,58,57,55,51,46,40,34,29,25,24,23,22,20,19,18,17,15,14,14,15,15,16,16,16,20,20,21,21,23,31,39,44,48,50,52,53,55,54,53,50,45,40,34,29,26,24,24,23,21,19,18,16,15,14,14,15,15,16,16,17,21,21,21,21,23,27,32,35,37,39,41,43,44,44,43,41,38,35,32,29,26,25,24,22,20,19,18,17,15,15,15,16,18,19,20,21,22,22,21,21,22,24,26,27,28,30,31,33,35,35,34,34,33,31,30,28,27,25,24,22,20,19,19,18,16,16,16,17,20,23,24,24,22,22,22,22,23,24,25,25,25,26,27,28,29,29,29,29,29,29,29,28,27,26,25,23,21,21,20,20,19,19,19,20,23,25,26,26,22,22,23,23,24,25,26,25,23,23,23,23,24,24,25,25,26,27,27,27,27,26,26,24,23,22,22,22,22,22,22,23,25,27,28,29,23,23,24,25,26,26,27,26,26,24,21,21,21,21,22,23,24,25,26,26,27,27,26,25,23,23,23,23,23,24,25,26,28,30,31,30,24,25,26,27,27,27,28,28,28,24,20,19,18,18,19,20,22,24,25,26,27,27,27,26,24,23,22,23,24,26,27,29,31,33,33,31],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
