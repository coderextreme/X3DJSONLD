###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore23-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4130926478938615,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[9,10,10,10,9,9,8,8,9,9,10,10,9,9,10,9,8,8,9,10,11,12,12,13,14,15,16,17,20,22,26,27,27,27,24,21,23,9,10,10,10,10,9,8,8,8,9,10,11,11,12,11,10,8,8,9,10,11,12,14,16,17,18,19,20,24,27,30,33,31,30,26,23,23,9,10,10,9,9,9,9,9,9,9,10,10,11,11,11,10,8,8,10,11,13,15,17,18,20,21,21,22,25,28,32,36,35,34,30,26,25,10,10,9,8,8,8,9,9,10,10,10,10,10,10,9,8,8,8,11,13,16,18,19,21,23,24,23,23,25,27,34,38,37,36,32,29,27,10,9,9,8,8,8,9,10,10,10,10,10,10,9,9,9,9,10,12,14,16,18,19,21,23,24,24,24,24,26,30,35,36,37,35,32,29,10,9,9,8,8,8,9,10,11,11,11,10,10,9,9,9,10,11,13,15,16,17,19,20,22,24,25,24,24,24,27,30,34,37,36,34,30,10,9,9,8,8,9,9,10,12,11,11,10,10,10,10,9,9,10,12,14,16,17,20,22,24,25,25,24,24,24,26,28,32,35,34,33,29,10,10,9,9,9,9,10,11,11,11,11,10,10,10,9,9,9,9,11,12,15,18,22,26,26,26,25,25,25,26,26,27,31,33,32,31,26,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,8,9,9,10,11,13,16,22,27,28,29,28,27,28,28,28,27,29,30,29,28,24,10,10,11,10,10,11,11,10,10,9,9,8,8,7,7,8,9,10,10,11,11,15,21,27,31,34,32,31,31,31,29,27,27,26,26,25,23,9,10,11,10,10,10,11,10,10,9,9,8,7,6,6,7,10,11,11,12,12,16,22,27,33,35,35,34,34,33,29,26,25,24,26,26,25,9,10,11,10,9,10,11,11,10,9,9,8,7,6,5,7,10,13,13,14,15,18,23,28,33,35,36,36,35,34,30,25,24,24,26,28,26,9,10,11,10,9,10,11,10,10,10,9,8,8,7,6,8,11,14,15,17,18,20,24,27,30,33,35,36,35,34,29,26,25,24,27,29,27,9,10,11,10,10,10,10,9,9,9,10,9,9,9,9,10,12,14,17,19,20,21,24,25,28,30,32,33,32,31,28,27,26,25,28,29,28,9,10,10,10,10,10,10,9,9,9,9,9,9,9,10,11,12,15,18,20,21,22,22,23,25,27,29,30,29,27,27,27,27,27,29,29,27,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,10,12,15,18,20,21,21,21,22,23,25,26,27,25,24,25,27,28,28,28,27,26,10,9,9,9,9,9,9,9,9,8,8,8,9,9,9,10,12,15,18,20,21,21,20,20,22,23,23,24,22,22,24,25,27,28,27,25,24,11,10,9,8,8,8,9,9,9,8,8,8,8,9,9,10,13,15,17,19,20,20,20,20,21,22,22,21,20,21,22,24,25,26,24,23,22,11,10,9,8,8,8,9,9,9,8,8,8,8,9,9,10,13,15,17,18,19,19,19,19,20,20,20,20,20,20,22,22,23,23,22,21,21,10,10,9,9,9,9,9,9,9,8,8,8,8,8,9,10,12,14,16,18,18,18,18,18,18,18,20,21,22,23,22,21,21,21,21,22,22,9,9,9,8,8,9,9,9,9,8,8,8,8,8,9,10,12,14,15,17,17,17,17,17,16,17,19,22,23,24,22,21,20,20,20,22,23,8,8,8,8,8,8,9,9,10,9,8,8,8,8,9,10,12,13,14,16,17,17,16,16,15,16,19,22,24,24,22,19,19,18,19,21,23,7,7,8,8,8,8,9,9,9,9,9,8,8,8,9,11,11,12,13,15,17,17,16,15,15,15,18,21,23,24,20,17,17,17,17,18,22],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
