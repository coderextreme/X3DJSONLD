###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-23.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.92018578496744,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[21,20,20,22,25,28,30,30,29,29,29,29,29,26,20,17,17,16,15,14,14,15,16,16,17,17,18,17,17,17,16,16,17,17,17,17,16,22,21,21,22,24,27,28,28,27,27,27,29,29,26,20,17,17,16,16,16,16,16,16,16,17,17,17,17,16,16,16,16,17,17,17,17,16,24,23,22,22,22,24,26,26,26,26,26,27,28,25,21,17,16,16,16,16,18,18,16,16,17,17,17,16,16,16,17,17,17,17,17,17,17,24,24,23,21,21,23,24,25,25,25,25,26,27,25,22,19,17,16,17,18,19,19,17,16,16,16,16,16,16,16,17,18,17,17,18,19,18,24,23,22,21,20,22,23,23,23,23,24,25,25,24,22,20,18,17,18,19,20,19,17,16,16,15,15,15,16,17,17,18,18,18,20,21,19,24,23,22,20,20,21,22,22,22,23,24,25,25,25,23,21,19,18,18,19,20,19,17,15,15,15,15,15,16,17,18,18,18,19,21,21,21,22,21,21,20,20,20,21,22,23,24,25,25,26,26,24,22,20,18,17,17,18,18,16,14,14,13,14,15,17,18,18,18,18,19,19,20,22,22,21,21,20,20,20,21,22,23,24,24,24,25,26,25,23,22,20,18,17,17,17,15,14,13,13,14,15,17,19,18,18,18,19,19,20,21,23,23,23,22,21,20,20,20,21,22,23,23,24,24,25,24,24,23,21,19,17,16,15,14,14,14,14,15,17,18,19,19,19,19,18,18,19,25,25,25,24,22,21,20,19,19,20,21,22,23,23,24,24,24,23,22,20,18,16,15,14,14,14,14,15,17,18,19,20,19,18,17,17,17,28,27,27,25,24,23,23,21,19,19,20,20,21,22,23,22,21,20,21,21,18,17,16,15,14,13,13,14,16,18,18,18,18,18,16,15,15,30,29,28,27,26,25,25,22,20,19,19,20,20,21,21,20,17,18,20,20,18,17,16,15,14,14,13,14,16,17,17,16,17,17,15,14,13,32,31,31,29,28,27,27,24,22,21,20,20,19,19,18,17,15,15,17,17,16,16,15,15,15,15,16,16,16,16,15,15,16,17,15,14,14,33,33,33,31,30,29,28,26,25,23,21,20,19,18,16,15,14,14,15,15,15,15,15,15,17,18,18,18,16,15,14,14,16,16,16,15,15,34,34,34,33,32,31,29,28,26,24,22,20,19,18,17,16,15,15,14,14,14,14,15,16,19,21,20,19,16,15,15,15,16,17,16,16,16,35,34,34,33,32,31,29,27,26,24,21,20,19,18,17,16,15,15,14,14,14,14,14,16,20,21,20,18,16,15,15,16,16,17,17,17,17,35,34,33,32,31,29,27,25,23,21,19,19,18,17,16,15,16,15,14,14,13,13,14,15,17,17,17,16,15,14,15,16,16,16,16,16,16,33,32,31,30,29,27,24,22,20,18,17,17,18,17,16,15,16,15,15,14,13,13,14,14,14,14,13,13,13,14,14,15,15,15,16,15,15,30,29,28,27,26,25,23,21,19,18,17,17,18,18,18,17,17,16,15,15,14,14,14,14,13,13,11,11,13,13,13,14,15,16,15,15,14,28,27,27,26,25,24,23,21,19,17,17,17,18,19,20,19,18,17,16,15,15,14,14,14,13,12,10,10,12,14,13,13,15,16,15,15,14,29,28,28,28,27,26,25,23,21,19,17,18,19,20,21,20,19,17,16,16,16,16,15,15,14,14,11,11,13,15,14,14,15,15,15,15,14,30,30,30,30,30,28,26,24,22,20,19,19,20,22,22,21,20,18,17,17,18,19,18,17,16,15,12,12,14,15,15,14,14,13,13,14,14],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
