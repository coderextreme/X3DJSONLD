###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoLOD(center=(41.355423951468886,-71.65929656833352,0.0),range=12300.69,child1Url=['../../tiles/4/newport4-2.x3d'],child2Url=['../../tiles/4/newport4-3.x3d'],child3Url=['../../tiles/4/newport5-2.x3d'],child4Url=['../../tiles/4/newport5-3.x3d'],
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(41.5,-71.5,0),geoSystem=['GDC']),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/newport2-1.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(41.30704408055511,-71.70326422248901,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=55,xSpacing=0.0016284316,zDimension=52,zSpacing=0.0018972498,height=[-33,-32,-31,-30,-29,-29,-29,-29,-28,-29,-29,-29,-29,-30,-29,-28,-28,-28,-28,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-25,-26,-26,-27,-26,-25,-24,-24,-23,-22,-22,-21,-21,-22,-22,-22,-23,-23,-28,-28,-29,-30,-29,-29,-29,-28,-28,-28,-29,-29,-28,-29,-28,-27,-28,-29,-28,-27,-27,-27,-27,-27,-27,-27,-26,-26,-27,-26,-26,-26,-26,-26,-26,-26,-25,-24,-24,-25,-25,-25,-23,-22,-22,-21,-21,-22,-23,-23,-23,-23,-23,-23,-23,-25,-26,-27,-28,-29,-28,-29,-29,-28,-28,-29,-29,-27,-29,-28,-27,-28,-29,-28,-27,-27,-26,-27,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-24,-23,-23,-24,-25,-25,-22,-23,-23,-23,-24,-24,-24,-24,-23,-22,-21,-21,-21,-23,-23,-22,-22,-24,-28,-31,-31,-28,-28,-29,-29,-28,-31,-29,-27,-29,-29,-28,-27,-27,-26,-26,-26,-26,-26,-25,-25,-26,-26,-25,-26,-26,-26,-25,-24,-22,-21,-22,-23,-25,-24,-24,-24,-24,-24,-24,-24,-23,-21,-20,-20,-20,-20,-20,-21,-21,-21,-21,-22,-23,-26,-29,-26,-27,-28,-27,-29,-29,-27,-25,-24,-24,-26,-26,-26,-26,-26,-26,-26,-26,-25,-25,-25,-26,-25,-25,-25,-25,-23,-22,-22,-23,-24,-25,-25,-25,-24,-24,-24,-22,-21,-18,-19,-20,-20,-20,-20,-20,-20,-19,-20,-20,-18,-17,-15,-15,-17,-17,-16,-15,-15,-17,-19,-22,-23,-23,-23,-24,-24,-27,-27,-26,-26,-26,-25,-25,-25,-25,-25,-25,-24,-24,-22,-21,-23,-23,-23,-24,-24,-23,-22,-21,-19,-18,-16,-17,-18,-19,-20,-20,-20,-20,-20,-20,-13,-12,-12,-13,-14,-13,-13,-13,-13,-12,-13,-16,-17,-18,-20,-21,-22,-22,-24,-24,-24,-25,-26,-26,-26,-25,-25,-24,-25,-24,-23,-20,-20,-21,-21,-22,-22,-22,-22,-22,-21,-17,-17,-16,-16,-18,-19,-20,-20,-20,-20,-20,-20,-20,-20,-11,-12,-13,-13,-13,-13,-12,-13,-14,-13,-14,-16,-15,-16,-17,-17,-18,-19,-20,-21,-22,-22,-23,-23,-23,-23,-24,-23,-18,-18,-18,-19,-20,-20,-20,-20,-18,-18,-17,-17,-17,-17,-18,-19,-19,-19,-19,-20,-20,-19,-19,-19,-19,-19,-19,-12,-12,-13,-13,-13,-13,-13,-13,-12,-13,-14,-14,-14,-14,-14,-14,-14,-16,-17,-17,-16,-16,-17,-18,-18,-16,-12,-15,-16,-17,-17,-18,-18,-18,-17,-17,-17,-17,-17,-17,-17,-18,-19,-19,-19,-19,-18,-18,-18,-18,-18,-18,-19,-19,-19,-12,-12,-12,-12,-12,-12,-12,-11,-11,-12,-13,-13,-13,-12,-12,-12,-13,-13,-13,-13,-12,-13,-12,-11,-11,-12,-14,-14,-15,-16,-17,-17,-18,-17,-17,-17,-17,-17,-17,-18,-18,-19,-18,-17,-17,-17,-17,-18,-18,-18,-18,-18,-18,-19,-19,-10,-11,-11,-10,-11,-11,-11,-10,-10,-10,-10,-10,-10,-10,-9,-9,-9,-9,-10,-10,-10,-10,-12,-12,-13,-13,-14,-14,-15,-16,-16,-16,-16,-16,-17,-16,-16,-17,-17,-17,-16,-16,-16,-16,-17,-17,-18,-18,-18,-18,-18,-18,-18,-18,-18,-8,-8,-8,-7,-7,-7,-7,-8,-8,-8,-9,-10,-10,-9,-9,-9,-9,-10,-11,-11,-11,-11,-11,-12,-13,-13,-14,-14,-15,-15,-15,-15,-15,-14,-15,-15,-15,-15,-15,-16,-16,-16,-17,-17,-17,-17,-18,-18,-18,-18,-18,-18,-17,-17,-18,-7,-7,-6,-6,-6,-7,-7,-8,-8,-8,-10,-10,-9,-9,-9,-10,-10,-10,-10,-10,-10,-11,-11,-12,-13,-13,-14,-14,-14,-14,-14,-14,-14,-15,-15,-15,-16,-16,-17,-17,-17,-17,-17,-17,-17,-18,-17,-18,-18,-19,-18,-18,-18,-17,-17,-5,-5,-5,-6,-7,-6,-7,-7,-8,-8,-8,-9,-9,-10,-10,-10,-10,-10,-11,-11,-12,-12,-13,-13,-14,-14,-14,-14,-15,-15,-14,-14,-16,-16,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-18,-18,-18,-18,-18,-18,-18,-18,-18,-5,-6,-7,-7,-6,-7,-8,-8,-8,-8,-9,-10,-11,-11,-11,-12,-12,-13,-13,-14,-14,-13,-13,-13,-14,-15,-15,-15,-15,-15,-15,-16,-16,-17,-17,-15,-15,-16,-16,-16,-16,-16,-16,-16,-17,-17,-17,-18,-18,-18,-18,-17,-18,-17,-17,-1,-3,-6,-7,-6,-7,-8,-9,-9,-9,-9,-10,-11,-12,-13,-12,-12,-13,-13,-13,-14,-13,-13,-13,-13,-14,-14,-14,-13,-13,-14,-14,-14,-15,-14,-15,-15,-14,-16,-16,-15,-15,-15,-16,-17,-17,-17,-17,-17,-18,-18,-17,-17,-10,-7,0,-1,-2,-3,-7,-7,-8,-7,-9,-9,-9,-10,-11,-12,-12,-12,-11,-12,-12,-13,-13,-13,-13,-13,-11,-11,-11,-12,-13,-13,-13,-13,-13,-13,-13,-14,-13,-13,-14,-14,-14,-15,-15,-16,-16,-16,-17,-17,-17,-17,-17,-17,-16,-16,-16,0,0,0,-1,-4,-5,-7,-8,-8,-8,-8,-9,-10,-10,-10,-10,-10,-10,-11,-11,-12,-12,-12,-12,-12,-11,-8,-10,-11,-12,-11,-12,-12,-12,-12,-12,-12,-12,-12,-13,-13,-14,-15,-15,-16,-17,-17,-16,-16,-15,-16,-16,-16,-17,-17,0,0,0,0,0,0,-2,-4,-5,-5,-7,-7,-8,-9,-9,-9,-9,-9,-10,-9,-10,-11,-11,-12,-12,-12,-11,-11,-11,-11,-11,-11,-11,-11,-10,-11,-12,-12,-12,-11,-12,-13,-15,-15,-16,-15,-14,-14,-15,-16,-17,-16,-16,-15,-15,0,0,0,0,0,0,0,0,0,-2,-4,-5,-5,-6,-6,-7,-7,-8,-8,-8,-9,-10,-10,-11,-11,-11,-10,-10,-10,-9,-10,-9,-9,-10,-10,-10,-10,-10,-10,-10,-11,-13,-13,-13,-14,-14,-14,-15,-15,-15,-15,-15,-15,-15,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-3,-4,-5,-6,-6,-6,-7,-8,-9,-9,-9,-8,-7,-9,-9,-8,-8,-9,-9,-9,-11,-10,-10,-9,-9,-8,-9,-11,-12,-12,-14,-14,-14,-14,-14,-14,-15,-15,-15,-14,-14,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-3,-4,-5,-6,-6,-7,-8,-8,-8,-8,-8,-9,-9,-9,-8,-8,-9,-11,-11,-10,-8,-7,-6,-8,-10,-11,-13,-13,-13,-13,-13,-13,-14,-13,-13,-14,-14,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-3,-4,-4,-5,-6,-6,-7,-6,-7,-8,-8,-8,-8,-9,-9,-8,-7,-7,-7,-5,-7,-10,-12,-12,-12,-13,-13,-13,-13,-12,-12,-12,-13,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-2,-2,-1,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-4,-4,-4,-6,-6,-6,-5,-7,-7,-7,-5,-6,-8,-7,-5,-6,-8,-10,-11,-11,-11,-12,-12,-12,-12,-12,-12,-12,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-2,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,-2,-3,-3,-3,-4,-4,-5,-4,-5,-6,-5,-6,-7,-8,-10,-11,-11,-12,-11,-11,-11,-11,-12,-12,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,-2,-2,-3,-3,-3,-3,-4,-6,-6,-9,-7,-10,-11,-11,-11,-11,-11,-11,-11,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,-1,0,-2,-4,-4,-6,-6,-8,-8,-9,-9,-8,-9,-8,-10,-11,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,-1,-1,0,0,0,0,-1,0,0,0,-1,-3,-4,-5,-6,-7,-7,-7,-7,-6,-8,-9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,0,0,0,0,0,-1,-2,-4,-4,-5,-6,-6,-7,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,-1,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-2,-3,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
