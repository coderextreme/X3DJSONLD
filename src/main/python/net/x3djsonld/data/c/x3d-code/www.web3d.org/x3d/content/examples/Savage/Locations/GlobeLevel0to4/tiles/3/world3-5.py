###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_35',geoSystem=['GDC'],position=(-11.291664319767108,67.4583407093748,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-11.291664319767108,67.4583407093748,0.0),range=4495500.0,child1Url=['../../tiles/4/world6-10.x3d'],child2Url=['../../tiles/4/world6-11.x3d'],child3Url=['../../tiles/4/world7-10.x3d'],child4Url=['../../tiles/4/world7-11.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world3-5.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[248,783,-4642,-5050,-4741,-4986,-5056,-4883,-4449,-4107,-4084,-3064,-3230,-3826,-3706,-4139,-4113,-4334,-4728,-2069,-5203,154,858,-3782,-5039,-4604,-4314,-4773,-4687,-4250,-4226,-4058,-2768,-4021,-3896,-4423,-4283,-4170,-4096,-4602,-3265,-5277,539,724,-3713,-4848,-4415,-4204,-4622,-4854,-4159,-3951,-3554,-3479,-4259,-4282,-4579,-4588,-4515,-4598,-4665,-3560,-5156,286,993,-3487,-4962,-4209,-2133,-4560,-4255,-3819,-3506,-3102,-2978,-4486,-4412,-4173,-4782,-4866,-4505,-4591,-3299,-5004,58,1557,-2412,-4914,-4869,-3415,-4376,-4042,-3702,-3147,-2568,-3072,-4027,-4847,-4605,-4747,-4778,-4821,-4348,-2472,-5002,42,1467,-280,-4837,-4814,-4395,-677,-3259,-3850,-2531,-2849,-3069,-4080,-4455,-5112,-5840,-5010,-5274,-4892,-2012,-4555,397,1442,190,-4686,-4848,-3933,-1562,-4012,-3470,-2627,-2808,-3647,-4005,-4803,-4765,-4477,-5124,-5296,-5096,-3628,-5160,96,234,445,-4807,-4773,-4462,-3571,-1616,-3924,-3440,-3303,-3991,-4744,-5290,-4739,-4925,-5099,-5230,-5124,-3303,-5255,-147,22,845,-4136,-4691,-4591,-4095,-273,-4011,-3357,-2433,-3832,-4487,-4874,-5188,-4856,-5064,-5009,-5007,-3338,-5557,-3414,-493,1027,-3797,-4563,-4216,-4092,-296,-3760,-3215,-2467,-3758,-4401,-5495,-5071,-4937,-4958,-5044,-4711,-2253,-5406,-3523,-2766,838,-3997,-2578,-4257,-4326,-531,-3856,-3390,-3231,-3745,-4265,-5114,-5264,-5262,-4857,-4298,-4805,-4186,-5464,-3277,-3456,156,-4257,-4305,-4482,-4227,-2959,-3831,-3450,-2751,-3103,-4493,-5021,-5285,-5331,-4706,-4403,-5016,-4880,-5179,-3313,-3741,-1755,-4296,-4785,-4249,-4211,-2893,-2441,-3166,-3346,-4159,-3985,-4993,-5325,-5358,-4932,-4947,-5374,-5284,-5076,-3431,-2667,-4335,-4032,-4799,-4207,-4022,-122,-1612,-3968,-2289,-3711,-3304,-5004,-5293,-5431,-5270,-5031,-4746,-5068,-5141,-3834,-4150,-3694,-2398,-3812,-3384,-3575,-1142,-2453,-4194,-3457,-3717,-2858,-5183,-5322,-5390,-5229,-5124,-4920,-4876,-4833,-4103,-2197,-4728,-4078,-3809,-3403,-3155,-1835,-3128,-3750,-3903,-3889,-2310,-4644,-5272,-5383,-5093,-5205,-5125,-4955,-4629,-4214,-4006,-4394,-4516,-3992,-3551,-1559,-3507,-3731,-3898,-3528,-3823,-619,-4619,-5333,-5140,-5195,-4877,-4887,-5107,-4028,-4247,-4563,-4365,-4507,-3761,-3375,-1200,-4064,-4029,-4060,-3716,-3961,-4,-5142,-5204,-5077,-5173,-5206,-4995,-5237,-3202,-4398,-4671,-4849,-4697,-3108,-13,-3620,-4075,-4195,-4176,-3448,-3301,-1356,-5246,-5247,-5197,-5150,-4539,-5052,-5079,-4021,-4518,-4812,-4975,-5065,-1893,-56,-4017,-2719,-4129,-4120,-3682,-3652,-4056,-3128,-5137,-4941,-5048,-3358,-4917,-5129,-3146,-4138,-4791,-4972,-5087,-3739,-3689,-3748,-3166,-4146,-3345,-3586,-3146,-4104,-3227,-4893,-4836,-4947,-3116,-4793,-4783,-3446,-4112,-4805,-5006,-5110,-3847,-3628,-3691,-4376,-4168,-3106,-3473,-3401,-4397,-3427,-4937,-4884,-4948,-3220,-4813,-4857,-3206],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
