###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3929,-4031,-3951,-4164,-4138,-4359,-4385,-4357,-4212,-4324,-4143,-4195,-4450,-4297,-4287,-4260,-4357,-3966,-4355,-4423,-4427,-4451,-3856,-3911,-4229,-3783,-4048,-4182,-4108,-4203,-4041,-4166,-4182,-4369,-4101,-4092,-4180,-4158,-4234,-4359,-4249,-4356,-4446,-4527,-3882,-3957,-3667,-3855,-3774,-4107,-3947,-4328,-4191,-4027,-4409,-4155,-4492,-4004,-4094,-4258,-4298,-4273,-4149,-4436,-4495,-4600,-4015,-3861,-4115,-4162,-4085,-3896,-4007,-4318,-3977,-4223,-4347,-3885,-4474,-4343,-3623,-3842,-4045,-4458,-4444,-4465,-4348,-4607,-3883,-4211,-3837,-4314,-4315,-3951,-4231,-3784,-4053,-4302,-3873,-3572,-3570,-4221,-4082,-3852,-3881,-4360,-4120,-4287,-4509,-4526,-3567,-4509,-4155,-3813,-3720,-3656,-4046,-4676,-3900,-4154,-4180,-3896,-3924,-4023,-3956,-4249,-4198,-4534,-4127,-4368,-4522,-4537,-3701,-3774,-3783,-3391,-4068,-3980,-4335,-3890,-4006,-4065,-3457,-3875,-3807,-3695,-4137,-4175,-4348,-4146,-4265,-4249,-4302,-4727,-3288,-3255,-3379,-3608,-3851,-3675,-3750,-4199,-3932,-3411,-4086,-3820,-4028,-3996,-4496,-4194,-4258,-4232,-4440,-4554,-4736,-4539,-2906,-3059,-3574,-3296,-3320,-3342,-3643,-3837,-3704,-4314,-3917,-4045,-3848,-4009,-4275,-4255,-4594,-4227,-4754,-4856,-4804,-4840,-2547,-2581,-2888,-3074,-3088,-3202,-3174,-4067,-3172,-3748,-4029,-3844,-3718,-4017,-3865,-4275,-4230,-4391,-4735,-4646,-4521,-4563,-2478,-2772,-2846,-2936,-3019,-2784,-3142,-3390,-3500,-3671,-3638,-4054,-3818,-3859,-4166,-4025,-4274,-4364,-4203,-4616,-4777,-4964,-2873,-2580,-2630,-2758,-2662,-3183,-2666,-3390,-3569,-3173,-3455,-3712,-3809,-4084,-3928,-3954,-4072,-4556,-4067,-4398,-4694,-4710,-2943,-2897,-2676,-2324,-2812,-2770,-3201,-3085,-3575,-3570,-3520,-3688,-3472,-3251,-3966,-4181,-3910,-4133,-4230,-4421,-4593,-4225,-2966,-2902,-3026,-2667,-2659,-2894,-3132,-3113,-3404,-3373,-3575,-3703,-4112,-3692,-4009,-3962,-4046,-3923,-4390,-4267,-4324,-4442,-3325,-3419,-3142,-2982,-2559,-2851,-2935,-3132,-3196,-3498,-3529,-3538,-3501,-3564,-3706,-3684,-4131,-3209,-4104,-4266,-4340,-4393,-3542,-3490,-3288,-2966,-2719,-2577,-2782,-2983,-3055,-3317,-3371,-3379,-3224,-3498,-3614,-3703,-3788,-3999,-4230,-4026,-4418,-4183,-3599,-3395,-3296,-3045,-2774,-2628,-2648,-2784,-2972,-3167,-3129,-3283,-3301,-3539,-3508,-3684,-3686,-3648,-3913,-3983,-3957,-4089,-3861,-3496,-3457,-3171,-2965,-2733,-2714,-2600,-2729,-2965,-3041,-3364,-3302,-3389,-3411,-3643,-3640,-3937,-3919,-4025,-4219,-3892,-3827,-3577,-3533,-3357,-3067,-2951,-2666,-2777,-2661,-2829,-3136,-3183,-3182,-3359,-3454,-3744,-3632,-3754,-3658,-3949,-3824,-4007,-3975,-3679,-3493,-3388,-3099,-3028,-2945,-2766,-2778,-2803,-2924,-3097,-3286,-3405,-3527,-3659,-3777,-3981,-3811,-3664,-4031,-4272,-4254,-3575,-3619,-3493,-3273,-3165,-3044,-2975,-2691,-2668,-2829,-2967,-3051,-3436,-3498,-3565,-3642,-3745,-4251,-4036,-3532,-3660,-3924,-3807,-3795,-3551,-3410,-3194,-3162,-3051,-2797,-2703,-2665,-2849,-3066,-3285,-3375,-3815,-4100,-3680,-3240,-3360,-3325,-3346,-3934,-3887,-3805,-3519,-3367,-3409,-3471,-2958,-3033,-2637,-2666,-2798,-3091,-3164,-3558,-4325,-2373,-2920,-3070,-3318,-3242,-3340,-4021,-4009,-3767,-3480,-3384,-3467,-3319,-3398,-3058,-2659,-2685,-2816,-2972,-3247,-4144,-3431,-2839,-2854,-3008,-3283,-3268,-3306],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
