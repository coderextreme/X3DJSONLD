###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[61,60,59,60,62,65,69,77,85,92,98,98,97,88,78,72,66,65,65,63,60,56,52,49,48,45,42,38,35,32,30,29,30,32,33,35,36,61,60,60,61,62,66,70,78,86,91,96,96,96,88,78,71,64,61,60,59,57,54,50,47,46,44,40,37,34,33,31,30,31,33,33,33,35,61,62,62,62,62,65,69,76,83,87,90,91,93,87,79,72,63,59,57,56,56,54,51,48,45,41,36,34,33,33,32,33,34,34,33,33,35,60,60,61,60,60,63,66,72,77,79,82,85,89,85,79,70,61,56,54,53,54,52,50,46,43,39,35,33,33,34,34,35,35,34,32,32,34,56,56,57,57,57,60,62,65,69,70,71,77,82,80,76,68,57,53,51,50,50,48,46,43,40,39,38,37,37,37,36,36,34,32,30,30,32,52,52,53,53,54,55,57,60,62,62,63,69,76,75,71,63,53,50,49,48,46,45,43,40,38,38,40,40,39,39,37,35,33,30,28,28,31,49,49,49,50,50,50,51,55,59,58,56,62,69,67,63,57,51,48,47,46,45,43,40,38,38,39,41,42,41,39,37,34,31,28,26,26,29,46,47,47,47,47,47,47,51,55,54,51,57,62,60,55,52,48,46,45,45,44,41,38,37,37,38,41,41,40,38,36,32,28,25,24,24,28,45,45,46,46,47,46,46,49,52,51,50,53,57,55,50,49,46,45,44,43,41,39,37,36,36,36,37,37,36,35,33,29,23,19,21,24,29,44,44,45,46,47,46,45,47,49,50,50,51,51,50,47,46,45,44,43,41,38,36,35,35,35,35,36,35,34,32,31,28,22,18,20,25,30,44,45,45,45,46,47,47,47,49,49,51,49,47,46,45,44,43,43,42,39,35,33,32,34,35,37,38,37,34,31,31,29,26,24,25,27,30,45,45,45,45,46,47,47,48,48,48,49,47,44,44,44,43,41,41,41,38,35,32,31,33,35,37,39,38,34,32,31,31,30,29,29,29,31,45,45,45,45,46,46,47,47,47,46,44,43,43,43,42,41,40,39,40,39,38,36,34,34,35,37,39,39,35,34,34,34,34,33,33,33,32,44,44,44,45,45,46,47,46,45,43,40,41,43,42,40,39,39,39,39,39,41,39,36,35,35,37,38,38,36,35,35,36,36,35,35,35,34,43,43,43,44,45,45,45,44,42,41,40,40,41,40,39,38,38,39,39,39,41,40,37,35,35,36,36,36,34,34,35,35,35,34,34,34,35,41,42,42,43,44,44,43,41,40,40,40,40,40,39,38,37,38,38,38,40,41,40,38,35,34,33,33,33,33,33,35,36,35,34,33,33,36,40,41,42,42,43,42,41,40,40,40,40,40,39,39,38,37,36,37,38,40,42,40,36,34,32,31,30,30,31,33,35,37,38,37,36,36,37,40,41,41,42,42,42,41,41,40,40,40,39,39,39,38,37,36,37,39,41,43,40,36,33,32,30,28,28,30,33,36,39,40,40,39,38,39,41,41,42,43,44,45,47,44,42,41,39,39,39,39,39,39,39,41,42,43,44,42,38,35,34,32,28,28,30,33,37,40,42,42,41,40,41,42,42,43,44,46,48,51,48,45,42,39,39,39,39,39,41,42,43,45,46,46,44,40,38,37,35,30,29,31,34,38,41,43,43,42,41,41,44,44,45,47,49,51,52,51,48,44,39,39,39,39,40,41,42,43,45,46,47,45,41,40,39,37,33,32,32,34,39,42,44,44,41,38,38,46,47,48,50,52,52,52,52,52,45,40,39,38,39,40,40,41,42,44,46,46,44,42,41,40,38,37,35,33,34,39,42,44,43,39,35,35],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
