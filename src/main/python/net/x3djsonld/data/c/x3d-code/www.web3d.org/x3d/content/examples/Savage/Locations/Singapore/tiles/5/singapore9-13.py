###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore9-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2908486746019459,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[26,28,31,34,31,28,27,27,25,24,28,35,39,42,43,43,46,51,52,50,49,49,48,47,45,42,40,41,42,43,42,37,33,30,27,22,19,30,30,32,34,32,30,30,30,29,28,33,40,45,50,50,47,49,52,52,50,48,47,45,44,41,38,37,38,39,39,38,33,29,26,24,20,17,33,32,33,34,32,31,31,32,32,33,38,44,50,55,56,54,53,53,52,49,47,45,42,40,38,37,36,37,36,36,34,29,26,25,24,20,18,34,33,33,34,33,33,35,36,38,40,44,49,54,58,57,54,52,51,49,46,44,42,39,37,36,36,36,36,35,33,31,28,25,24,24,21,21,34,33,34,35,36,36,39,43,45,47,51,56,57,58,55,48,46,46,44,43,41,39,36,35,35,35,36,35,34,32,30,27,25,24,24,23,24,36,35,36,38,40,42,47,51,52,53,57,61,59,57,51,44,41,41,39,38,37,35,34,34,34,35,36,35,33,32,30,27,25,24,24,24,25,38,37,39,41,47,53,57,60,60,59,61,64,59,53,46,40,37,36,35,34,33,32,33,34,35,36,36,35,33,32,30,28,26,25,24,24,25,42,43,45,46,54,61,62,63,62,60,61,62,56,48,42,36,34,32,31,31,31,30,32,34,35,36,35,34,33,31,30,28,28,28,27,25,25,49,53,55,55,60,65,63,61,58,56,55,54,50,44,38,33,30,29,29,31,31,30,31,34,35,35,34,32,31,30,29,29,29,32,33,28,24,57,63,63,61,62,64,59,54,51,49,47,45,42,40,35,29,27,26,27,29,29,28,29,32,34,33,32,31,30,29,28,28,30,33,35,29,24,64,70,67,62,59,57,51,45,42,40,38,35,35,36,33,28,25,23,24,26,26,25,26,29,31,32,32,29,28,27,27,28,30,31,32,27,24,66,71,66,59,54,48,43,37,35,33,31,29,31,33,31,27,24,22,22,24,24,23,23,26,29,31,31,28,27,26,26,27,29,29,28,26,24,63,62,59,55,47,40,37,34,33,31,29,28,30,31,30,27,23,21,22,24,25,24,25,27,29,30,30,28,27,27,27,27,28,29,29,26,24,56,51,50,48,41,34,33,31,30,29,28,28,28,29,29,27,24,21,22,24,25,25,26,28,29,30,30,28,27,28,29,28,28,28,29,27,25,47,40,40,41,36,30,27,24,24,25,25,25,25,26,27,28,25,22,22,24,25,25,26,28,30,31,30,28,27,29,29,27,25,27,29,28,26,38,31,33,34,31,27,23,18,19,21,21,21,22,24,26,28,27,24,24,25,26,25,25,28,30,31,31,28,28,29,30,26,23,26,27,27,27,33,27,28,29,28,27,21,17,18,20,20,20,21,23,26,30,29,27,26,26,26,25,26,27,27,28,29,29,28,28,27,25,23,24,26,27,27,29,25,25,24,25,27,21,17,18,20,19,19,21,23,27,31,31,30,28,27,26,26,26,26,26,26,27,28,29,27,25,23,22,23,24,26,26,26,22,21,19,21,24,20,16,18,20,19,19,21,23,27,32,32,31,30,28,27,27,27,26,26,25,26,27,27,25,23,22,22,22,23,25,27,22,18,17,15,17,20,18,16,18,20,19,19,21,23,27,32,33,32,31,29,27,27,27,26,26,25,25,26,26,23,21,21,22,22,22,25,27,16,12,12,13,14,16,18,18,19,21,20,20,21,23,26,30,31,30,29,27,26,25,24,24,24,24,24,25,25,23,21,21,21,22,23,25,27,11,6,8,12,13,13,17,20,21,21,21,21,22,23,25,28,28,28,27,26,24,23,23,22,23,23,24,25,25,23,21,21,21,23,24,26,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
