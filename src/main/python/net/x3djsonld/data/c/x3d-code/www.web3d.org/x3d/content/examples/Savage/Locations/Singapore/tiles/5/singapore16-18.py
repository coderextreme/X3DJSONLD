###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore16-18.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3519706612479037,103.84837061432235,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[14,13,12,12,12,12,13,13,12,12,12,13,14,13,10,10,11,11,11,10,10,11,13,15,17,20,22,24,26,27,26,26,26,25,23,20,15,13,13,13,13,13,13,13,13,14,15,14,12,11,10,10,11,12,11,11,11,13,15,16,17,18,19,21,23,24,25,25,26,25,24,22,15,14,14,14,14,13,13,13,13,15,16,14,11,9,9,10,11,12,12,12,14,15,17,17,16,16,18,19,22,23,24,25,26,26,25,24,16,15,14,14,15,14,14,13,13,14,14,13,10,9,9,10,11,12,12,13,17,19,20,19,16,16,18,19,22,23,25,26,26,26,26,26,18,16,14,14,15,15,15,13,12,12,13,12,9,9,9,10,11,12,12,14,19,22,22,20,17,17,18,20,22,23,25,25,26,26,26,27,19,17,15,15,15,15,16,15,13,11,11,10,9,10,11,12,11,11,12,15,20,22,23,21,19,18,19,20,21,22,23,24,25,25,26,26,21,18,15,14,14,15,16,15,13,11,9,9,9,11,13,13,11,11,13,17,21,23,24,23,20,20,20,20,20,20,21,22,23,24,25,25,21,18,15,14,12,13,14,13,12,10,9,8,9,11,12,12,11,12,15,19,23,24,25,23,21,19,18,18,19,19,19,20,21,22,23,23,21,19,16,13,11,11,12,11,10,9,8,8,9,10,12,12,12,15,19,22,26,27,26,24,21,18,17,17,17,18,19,19,20,21,21,22,21,19,17,14,12,10,9,9,9,8,8,8,9,10,11,13,15,19,23,26,29,29,29,26,22,19,17,17,17,18,19,20,20,21,21,22,21,20,19,16,13,10,8,8,8,8,8,8,9,10,11,14,18,23,27,29,31,30,29,27,23,19,17,17,17,18,19,21,21,22,22,23,23,22,21,17,14,11,10,9,9,8,8,8,9,11,12,15,20,23,26,28,28,28,28,26,23,20,17,16,17,18,20,22,22,23,23,24,26,24,21,18,14,13,13,12,11,9,8,9,10,12,14,16,19,21,24,25,24,25,26,25,22,20,17,16,17,19,21,23,23,24,25,25,26,24,20,17,14,14,14,14,13,11,9,10,11,14,16,17,19,21,23,23,22,22,24,24,22,19,16,15,17,19,22,23,25,25,27,28,24,21,18,15,13,13,14,15,15,12,10,11,13,15,17,19,20,21,23,22,21,21,23,23,21,19,16,15,17,19,22,24,25,26,28,31,19,16,14,13,13,13,14,15,16,14,12,13,14,16,18,19,20,22,23,22,21,21,23,23,21,19,16,15,17,19,22,24,25,27,30,32,13,11,11,11,12,13,14,16,17,16,15,15,15,16,17,19,21,23,24,23,22,22,24,24,21,19,16,15,17,19,21,23,25,27,30,31,9,8,9,11,12,14,15,16,17,17,16,16,16,17,18,20,22,24,25,24,23,24,26,25,22,19,15,14,16,18,20,22,24,26,28,30,8,8,8,11,13,15,16,17,17,17,17,17,17,18,19,21,24,25,26,26,25,26,28,27,24,20,15,14,15,16,19,21,23,24,26,28,8,8,8,11,14,16,18,18,18,18,18,18,18,19,20,23,26,27,27,27,27,27,28,27,25,22,17,14,15,16,18,20,22,24,26,28,8,8,8,11,14,17,20,20,20,19,19,19,19,20,21,25,29,30,29,28,28,27,27,26,26,24,19,17,16,16,18,20,22,24,26,28,9,8,9,12,15,18,20,20,20,20,19,19,20,21,22,25,29,30,29,28,27,26,25,25,26,25,21,19,17,17,18,20,22,24,26,28,11,10,11,13,15,17,19,19,20,19,19,19,21,22,23,24,27,27,27,26,25,24,23,24,25,25,22,20,18,17,18,20,22,24,25,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
