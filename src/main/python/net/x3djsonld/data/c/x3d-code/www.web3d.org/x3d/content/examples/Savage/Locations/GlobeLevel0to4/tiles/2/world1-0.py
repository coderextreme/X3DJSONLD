###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_2_10',geoSystem=['GDC'],position=(-22.541664655043235,-135.0416653255955,7492500.2232939005),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-22.541664655043235,-135.0416653255955,0.0),range=8991000.0,child1Url=['../../tiles/3/world2-0.x3d'],child2Url=['../../tiles/3/world2-1.x3d'],child3Url=['../../tiles/3/world3-0.x3d'],child4Url=['../../tiles/3/world3-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/2/world1-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=4.5,zDimension=21,zSpacing=2.25,height=[-1460,-4995,-5259,-5308,-5014,-4837,-4538,-4849,-5020,-5173,-4875,-4495,-4233,-3914,-3327,-2811,-3442,-4128,-4275,-4566,-3949,-1852,-2496,-4762,-5335,-5169,-5098,-5110,-5108,-5145,-5080,-5027,-5102,-4449,-4213,-3574,-2682,-3144,-3742,-4120,-4266,-4185,-1294,-1605,-1834,-4980,-3968,-4828,-5121,-5156,-5358,-5684,-5133,-4922,-4570,-3953,-3780,-2896,-3216,-3799,-4282,-4270,-3854,-2690,-4423,-4433,-4974,-5212,-4701,-4845,-5452,-5307,-5355,-4925,-4900,-4536,-4253,-3899,-2987,-3525,-3955,-4725,-3658,-3534,-3575,-4889,-4654,-5323,-5320,-5176,-5402,-5473,-5465,-5197,-4981,-4669,-3663,-4019,-3835,-3139,-3466,-4099,-3196,-3033,-3333,-2449,-5715,-5373,-5151,-5373,-5277,-5453,-4916,-4949,-4842,-4783,-4138,-3658,-4267,-4030,-3088,-3403,-3443,-3172,-3585,-3911,-1961,-5585,-5220,-4847,-5545,-5393,-5207,-4647,-5265,-4730,-4667,-3611,-3338,-4438,-3297,-2412,-2957,-3231,-3646,-3652,-3540,-3101,-5461,-6123,-5181,-5498,-5033,-5151,-4744,-4929,-4122,-4064,-3943,-3649,-3538,-3430,-2705,-3186,-3535,-3775,-3594,-3402,-1754,-5946,-5428,-5367,-4023,-4679,-5274,-4709,-4517,-3985,-4262,-4171,-3921,-3608,-3340,-2889,-2520,-3567,-3683,-3687,-3330,-2914,-8276,-3056,-5477,-5399,-4950,-4542,-4519,-3141,-4323,-4315,-3894,-3832,-3452,-3264,-2743,-2942,-3884,-3403,-3809,-3643,-2415,-5065,-5631,-5758,-5144,-4976,-4792,-4151,-4622,-4462,-4041,-3693,-2358,-3202,-2915,-3161,-3750,-3733,-3443,-3918,-3597,-2924,-886,-5655,-5643,-4929,-4816,-2466,-4740,-3680,-4113,-4049,-3489,-3802,-3425,-3212,-3368,-3869,-3931,-3969,-3967,-4109,-2955,-2078,-5449,-5360,-4928,-3158,-4554,-4696,-4345,-3083,-3998,-3914,-4133,-3414,-3310,-3360,-3899,-4050,-4208,-3798,-4116,-2442,-2504,-4789,-5418,-4722,-4750,-4447,-3841,-4091,-3643,-4173,-4243,-3916,-3681,-3191,-3075,-3780,-4015,-4044,-4266,-4455,-542,-2200,-4534,-5213,-5365,-4499,-4254,-3936,-3172,-2884,-4448,-3988,-3640,-3623,-3431,-3066,-3707,-4053,-2685,-3834,-4460,-1417,-4232,-4803,-5441,-2834,-5207,-5140,-4645,-4591,-4021,-4328,-4140,-3897,-3611,-3604,-3012,-3542,-4065,-3892,-3673,-3574,-3770,-3759,-3852,-5373,-2540,-5325,-5211,-4748,-4804,-3964,-3977,-3942,-3643,-3826,-3853,-3072,-3587,-4044,-4074,-3692,-4210,-4740,-5221,-4167,-3873,-4345,-5026,-4940,-4912,-4869,95,-4468,-4645,-4333,-4236,-4217,-3387,-2510,-3931,-4073,-3832,-4217,-5547,-5944,-5361,-4500,-4789,-5497,-4919,-5331,-4598,-4159,-4442,-4636,-4237,-4341,-4251,-3805,-3113,-3763,-3817,-3876,-4134,-6029,-5684,-5394,-5265,-4761,-5338,-5002,-4638,-4668,-4542,-4660,-4594,-4454,-4245,-4256,-4139,-3522,-3306,-3734,-3709,-3686,-6005,-5590,-5375,-5301,-4338,-5292,-5124,-4729,-4669,-4534,-4611,-4641,-4415,-4231,-4255,-4118,-3609,-3290,-3424,-3711,-3629],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
