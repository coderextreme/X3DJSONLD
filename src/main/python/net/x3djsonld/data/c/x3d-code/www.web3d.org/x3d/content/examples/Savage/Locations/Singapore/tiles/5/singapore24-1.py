###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore24-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4218243602718554,103.60419903412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[18,16,17,18,18,18,22,27,30,33,31,29,27,25,24,24,23,21,22,27,29,32,32,31,31,34,34,30,27,26,26,26,27,31,34,34,32,20,19,20,20,19,18,19,22,24,27,27,26,25,23,21,21,21,22,23,26,29,33,34,34,33,32,31,29,27,27,27,27,28,31,34,35,36,21,23,23,24,22,18,18,18,19,21,23,25,23,20,19,19,21,23,25,26,29,33,34,34,33,31,29,28,28,29,29,29,30,31,33,36,38,22,25,28,30,27,24,21,19,18,19,21,23,21,17,17,19,22,26,28,28,29,31,31,31,31,31,31,31,31,31,31,32,32,32,34,37,39,25,28,31,35,32,28,24,19,18,17,19,21,19,15,15,18,23,28,30,30,30,29,29,29,28,30,31,32,33,33,33,34,34,34,34,37,39,28,32,36,40,36,31,26,19,17,15,16,16,14,13,14,18,22,27,30,32,32,29,28,27,28,30,31,31,31,32,34,36,37,35,34,36,37,32,37,40,43,39,33,26,20,17,14,13,13,12,11,13,17,21,25,29,33,33,29,27,25,26,29,30,29,30,33,35,38,40,37,34,34,34,33,38,39,40,35,30,25,19,17,14,13,12,12,12,13,15,19,22,25,30,30,27,25,24,24,26,28,27,28,32,36,41,43,41,36,34,31,33,40,39,37,32,27,23,19,17,14,13,12,12,12,13,14,16,18,22,26,27,26,24,22,22,24,26,26,27,31,35,43,47,44,38,33,28,34,39,39,36,32,28,24,21,18,15,14,13,13,13,14,15,16,18,21,24,24,23,22,22,22,26,28,27,27,29,33,42,47,45,41,34,29,34,39,38,36,33,29,25,22,19,16,15,13,13,14,15,16,17,18,20,21,22,21,21,21,23,28,29,29,28,28,32,40,47,46,42,35,29,35,40,43,43,40,34,29,25,21,18,17,16,15,15,15,15,17,19,21,23,24,23,23,23,24,27,29,29,29,29,31,38,42,41,38,32,27,35,41,46,50,45,38,33,27,24,21,19,18,17,15,15,15,17,20,22,24,25,25,24,23,24,27,28,29,29,30,31,35,39,37,34,29,26,35,40,44,46,42,36,32,28,28,27,25,23,19,16,15,14,16,20,22,24,24,25,25,25,25,27,28,28,29,30,31,34,35,35,32,29,26,35,38,40,41,37,32,31,30,31,34,31,29,23,17,15,14,16,19,21,23,24,24,25,26,26,27,28,28,30,31,32,33,33,33,31,28,27,33,36,38,39,35,31,30,30,33,37,35,32,26,19,15,14,15,18,20,22,23,24,25,26,27,27,28,30,32,34,34,33,33,33,33,29,27,32,33,35,37,34,29,29,30,35,40,38,34,28,21,16,14,14,16,18,20,22,24,25,26,27,27,30,33,35,36,37,34,33,34,34,30,27,30,29,31,33,31,28,27,28,32,37,36,33,27,21,16,13,13,15,17,20,22,24,25,25,26,27,30,34,37,38,37,34,32,33,33,29,27,28,26,27,29,28,26,25,25,29,33,32,30,26,21,16,12,12,15,17,21,23,24,25,25,26,27,31,35,39,39,38,34,31,31,31,28,27,26,24,24,25,24,23,22,22,24,26,26,25,23,19,16,13,13,15,18,20,22,24,25,26,26,26,29,32,35,35,33,32,30,30,30,27,26,23,22,21,21,20,20,19,19,19,19,19,19,18,17,15,14,14,17,18,20,22,24,25,26,26,25,26,28,29,28,28,28,28,28,28,26,25,21,21,21,20,19,18,17,17,17,17,16,16,16,15,15,15,15,17,19,20,22,24,25,25,25,25,24,26,26,26,25,26,26,26,26,24,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
