###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world14-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(67.45833802716578,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[2587,2585,2288,1700,514,104,-324,-488,-41,-118,-349,-855,-1652,-1670,-1545,-1561,-1022,-247,-154,-126,-24,-3,2580,2633,2405,2034,1202,865,466,276,0,-214,-236,-385,-317,-292,-468,-748,-929,-416,-127,-63,523,313,2368,2463,2402,2118,1588,1484,1201,224,877,649,-195,-390,-357,-414,-525,-313,-453,-602,-322,-78,-58,-28,2176,2286,2302,2231,1992,1966,1945,1548,1522,1220,925,-289,-477,-522,-548,-382,-329,-450,-677,-429,-101,-73,2161,2349,2438,2539,2433,2268,2280,2413,2856,2515,2022,394,-361,-409,-338,-317,-251,-278,-736,-1174,-425,-251,2231,2435,2542,2640,2702,2736,2774,2862,2870,2594,1720,693,-28,-211,-80,-150,-249,-355,-340,-1426,-1049,-668,2298,2439,2545,2768,2901,2928,2952,2947,2953,2631,2075,1682,534,281,575,-114,-2,-131,-332,-1131,-1444,-1293,2309,2468,2596,2745,2869,2933,3012,3032,3007,3000,2472,1232,1170,1820,877,2052,360,499,-45,-413,-567,-1495,2268,2449,2591,2706,2804,2920,3021,3063,3057,2917,2476,2262,1970,2397,2105,2135,2134,2117,1030,-109,-370,-403,2340,2447,2578,2682,2783,2896,3014,3069,3072,3049,2936,2804,2727,2579,2580,2440,2137,1725,1085,1073,880,-117,2324,2465,2590,2726,2826,2916,3023,3061,3065,3050,3022,2930,2869,2433,1498,1552,421,576,679,891,-43,-293,2444,2577,2693,2795,2896,2957,3042,3063,3074,3065,3015,2908,2757,2448,1685,905,224,1861,615,-423,55,394,2452,2617,2722,2825,2916,2984,3045,3067,3091,3098,3060,2938,2841,2624,2156,1564,1149,1963,1819,-205,223,360,2521,2621,2730,2817,2898,2975,3038,3070,3087,3068,3007,2854,2672,2461,2049,1585,318,861,1737,396,287,-117,2596,2699,2767,2881,2946,3027,3065,3114,3114,3055,2961,2763,2590,2362,2098,1616,2182,1756,2083,1557,1,-386,2745,2811,2880,2981,3066,3093,3160,3204,3167,3084,3027,2838,2785,2548,2375,2153,1579,967,1241,1108,689,450,2754,2835,2897,2974,3044,3062,3113,3142,3083,2988,2892,2824,2789,2636,2501,1906,1559,-414,569,835,1050,104,2752,2841,2890,2922,2969,3002,3023,3005,2941,2889,2791,2736,2631,2507,2410,2071,1941,929,1529,917,992,604,2810,2872,2897,2912,2928,2941,2934,2905,2864,2781,2667,2513,2421,2317,2263,2165,2013,1378,1114,841,554,722,2721,2828,2882,2894,2896,2867,2831,2784,2746,2650,2548,2427,2349,2253,2128,2028,1941,1851,1862,1720,1404,1270,2589,2723,2765,2798,2771,2743,2720,2652,2583,2577,2537,2486,2448,2407,2288,2167,2024,1829,1856,1968,1976,1499,2566,2670,2756,2791,2769,2707,2621,2589,2551,2521,2506,2496,2484,2486,2441,2299,2132,1999,1943,1775,1465,1261,2527,2594,2653,2697,2657,2586,2539,2516,2503,2473,2437,2402,2417,2448,2361,2252,2174,2174,2213,1772,871,405,2493,2585,2604,2648,2613,2562,2518,2500,2494,2465,2423,2371,2379,2414,2313,2218,2161,2219,2328,1783,635,310],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
