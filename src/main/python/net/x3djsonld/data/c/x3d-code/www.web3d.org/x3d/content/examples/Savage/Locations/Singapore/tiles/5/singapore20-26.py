###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-26.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.9632748873545,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[0,0,0,0,0,0,0,0,0,-1,-2,-4,-8,-16,-27,-34,-38,-30,-14,-5,-2,-2,-6,-4,1,6,6,6,6,7,8,9,9,9,11,12,0,0,0,0,0,0,0,-1,-3,-6,-10,-14,-17,-26,-38,-42,-41,-32,-17,-9,-7,-9,-14,-11,0,6,6,8,9,12,13,13,13,13,15,16,0,0,0,0,0,0,-1,-4,-9,-14,-19,-24,-29,-38,-46,-46,-41,-32,-19,-13,-12,-14,-19,-15,-1,6,8,11,15,18,19,19,19,19,20,22,0,0,0,0,0,-2,-4,-11,-17,-22,-27,-32,-37,-43,-48,-48,-44,-34,-21,-15,-14,-13,-13,-8,1,7,11,15,20,24,24,24,22,22,23,25,0,0,0,0,-1,-6,-12,-19,-25,-29,-32,-36,-40,-43,-46,-48,-48,-38,-23,-14,-10,-5,0,3,6,9,14,20,25,28,28,28,25,23,24,25,0,0,0,-2,-5,-12,-20,-26,-31,-33,-36,-39,-41,-43,-46,-47,-47,-38,-22,-11,-4,2,8,10,9,11,16,22,27,30,30,29,25,22,23,24,0,0,-1,-7,-13,-20,-28,-31,-34,-35,-37,-39,-41,-43,-45,-44,-42,-32,-19,-6,2,8,10,11,11,13,17,21,25,28,28,27,24,22,22,22,0,-2,-5,-13,-21,-27,-32,-35,-36,-37,-38,-39,-41,-42,-44,-41,-35,-24,-11,0,8,12,12,12,12,13,16,18,21,23,24,25,24,23,21,20,-1,-7,-13,-21,-29,-32,-34,-35,-36,-37,-38,-39,-40,-41,-42,-36,-26,-13,0,7,10,12,12,12,12,12,12,12,13,15,20,24,25,25,21,19,-5,-13,-21,-28,-33,-35,-36,-36,-36,-37,-38,-39,-39,-39,-36,-27,-15,-3,6,12,12,11,11,11,11,10,9,8,8,9,16,22,24,24,20,17,-13,-22,-29,-32,-35,-36,-36,-36,-36,-37,-38,-38,-39,-34,-27,-15,-2,5,10,12,11,11,10,9,8,7,6,5,4,6,13,20,21,21,17,13,-22,-29,-35,-36,-36,-36,-36,-36,-36,-37,-37,-37,-35,-26,-15,-3,6,12,12,11,11,10,8,6,5,4,3,2,1,2,8,15,16,17,12,9,-30,-33,-35,-36,-36,-36,-36,-36,-36,-36,-37,-32,-26,-14,-1,5,10,12,11,11,9,8,6,4,4,3,2,0,-1,-1,3,7,9,10,6,3,-35,-36,-36,-36,-36,-36,-36,-36,-35,-34,-33,-25,-14,-3,7,12,12,11,11,9,7,5,4,3,3,2,0,-1,-3,-3,0,2,4,5,2,0,-36,-36,-36,-36,-36,-36,-36,-35,-35,-30,-24,-13,-1,5,10,12,12,11,9,7,5,4,3,2,1,0,-1,-3,-2,-1,0,1,2,3,2,1,-36,-36,-36,-36,-36,-36,-35,-34,-32,-23,-13,-2,8,12,12,12,12,9,7,5,4,3,3,1,0,-1,-4,-4,-2,0,0,1,2,2,3,3,-36,-36,-36,-36,-36,-35,-35,-30,-23,-11,0,5,10,12,12,11,9,7,5,4,3,2,1,0,-2,-3,-3,-3,-1,0,0,2,2,3,4,5,-36,-36,-36,-36,-35,-34,-31,-23,-13,-1,8,12,12,12,12,9,7,5,4,3,3,1,0,-1,-4,-4,-3,-1,0,0,1,2,3,3,5,6,-36,-36,-36,-36,-35,-30,-23,-11,0,5,10,12,12,11,9,7,5,4,3,2,1,0,-2,-3,-4,-3,-2,0,0,1,2,3,4,5,5,6,-36,-36,-35,-34,-32,-23,-14,-1,9,12,12,12,12,9,7,5,4,3,3,1,0,-1,-4,-5,-4,-3,-1,0,1,2,3,3,5,6,6,6,-36,-36,-35,-30,-23,-11,0,5,11,12,12,11,9,7,5,4,3,2,1,0,-2,-4,-4,-4,-2,-1,0,0,2,3,4,5,5,6,6,6,-35,-34,-32,-23,-13,0,9,12,12,12,12,10,7,5,4,3,3,2,0,-1,-4,-5,-4,-3,-1,0,1,2,3,3,5,6,6,6,6,6,-35,-30,-23,-11,0,5,11,12,12,11,9,7,5,4,3,2,1,0,-1,-3,-4,-4,-3,-2,0,0,2,3,4,5,5,6,6,6,6,6],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
