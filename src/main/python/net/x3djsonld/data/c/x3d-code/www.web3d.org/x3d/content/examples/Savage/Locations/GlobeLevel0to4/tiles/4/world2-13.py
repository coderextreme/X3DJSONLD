###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1305,1161,1040,1009,1091,1098,1048,1066,1136,1305,1386,1530,1678,1677,1578,1486,1396,1446,1602,1538,1891,1940,706,708,497,188,153,576,502,273,578,599,957,974,1086,1260,1028,893,726,869,1293,1206,1580,1559,535,1179,1170,595,-40,28,-37,-120,-17,-8,-11,333,342,650,384,-3,-152,69,1086,1007,1292,1064,773,1157,804,-4,-31,-435,-799,-820,-675,-406,-364,-555,-292,0,-3,-3,-973,-217,653,400,856,589,-335,-15,-93,-850,-482,-770,-924,-942,-703,-891,-1097,-714,-467,-358,-102,-533,-395,-1098,-636,-394,-276,-164,-1173,-1136,-755,-538,-264,-656,-1021,-1027,-2712,-2597,-2508,-2401,-2039,-403,-666,-905,-506,-801,-852,-574,-799,-581,-2553,-1567,-1481,-1859,-1778,-1971,-2959,-3025,-3008,-2825,-2835,-2557,-2429,-2664,-2692,-2229,-2124,-1000,-370,-684,-522,-347,-2827,-2665,-2703,-2261,-2238,-2564,-3180,-3281,-3347,-3346,-3246,-3201,-3299,-3524,-3384,-3262,-2871,-2430,-2687,-1993,-2389,-2528,-3132,-3119,-3117,-2643,-2487,-2775,-3427,-3471,-3582,-3593,-3563,-3564,-3801,-3872,-4034,-3978,-3677,-3711,-3564,-3353,-3384,-3665,-3660,-3534,-3418,-3318,-3259,-3230,-3409,-3540,-3703,-3758,-3792,-3889,-3968,-3956,-4021,-4084,-4037,-4245,-4147,-4191,-4173,-4145,-3991,-3840,-3837,-3752,-3706,-3666,-3750,-3852,-3920,-3898,-4028,-4102,-4164,-4189,-4191,-4255,-4309,-4365,-4416,-4378,-4442,-4476,-4072,-4087,-4072,-4061,-4055,-4005,-4247,-4116,-4071,-4082,-4118,-4168,-4196,-4242,-4235,-4310,-4354,-4396,-4422,-4444,-4424,-4396,-4138,-4306,-4316,-4200,-4263,-4224,-4208,-4140,-4229,-4248,-4257,-4287,-4292,-4324,-4365,-4414,-4409,-4491,-4546,-4496,-4424,-4377,-4188,-4325,-4370,-4304,-4348,-4328,-4259,-4300,-4233,-4313,-4378,-4440,-4415,-4411,-4435,-4432,-4488,-4525,-4582,-4555,-4499,-4503,-4237,-4288,-4358,-4375,-4410,-4382,-4319,-4301,-4329,-4360,-4396,-4469,-4527,-4485,-4455,-4477,-4526,-4590,-4599,-4606,-4574,-4582,-4291,-4331,-4389,-4587,-4542,-4486,-4409,-4414,-4402,-4427,-4427,-4495,-4577,-4574,-4509,-4546,-4594,-4623,-4648,-4639,-4619,-4642,-4383,-4430,-4432,-4470,-4618,-4562,-4523,-4482,-4493,-4501,-4489,-4538,-4591,-4612,-4659,-4627,-4635,-4660,-4656,-4672,-4622,-4655,-4545,-4573,-4569,-4507,-4689,-4682,-4654,-4606,-4516,-4525,-4532,-4560,-4627,-4635,-4688,-4708,-4681,-4710,-4682,-4705,-4537,-4668,-4568,-4646,-4641,-4587,-4667,-4687,-4735,-4681,-4580,-4556,-4574,-4589,-4598,-4613,-4663,-4681,-4762,-4770,-4707,-4673,-4644,-4683,-4569,-4587,-4541,-4506,-4616,-4699,-4592,-4735,-4674,-4665,-4651,-4643,-4626,-4623,-4653,-4666,-4696,-4743,-4682,-4708,-4691,-4724,-4599,-4617,-4529,-4592,-4632,-4588,-4651,-4722,-4613,-4772,-4774,-4770,-4730,-4663,-4667,-4684,-4694,-4701,-4749,-4635,-4564,-4463,-4466,-4486,-4515,-4537,-4613,-4537,-4732,-4640,-4657,-4725,-4808,-4843,-4821,-4679,-4703,-4700,-4712,-4701,-4716,-4567,-4509,-3925,-4484,-4421,-4538,-4497,-4517,-4488,-4509,-4556,-4650,-4758,-4831,-4851,-4829,-4830,-4862,-4740,-4700,-4689,-4616,-4613,-4508,-4363,-4467,-4507,-4511,-4470,-4488,-4486,-4496,-4540,-4670,-4751,-4789,-4815,-4789,-4783,-4855,-4759,-4691,-4660,-4606,-4330,-4355,-4210],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
