###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca14-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(4.979361030700214,101.29356261898111,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[481,593,753,846,970,947,995,1092,1439,1256,863,851,848,954,1018,685,468,401,400,344,564,395,563,765,1105,1125,1329,1027,1289,1413,1289,1111,1067,838,1023,801,685,445,450,315,355,340,343,413,881,871,857,1169,1350,1319,1344,1581,1366,1422,1237,1052,680,523,494,480,327,352,343,270,293,365,662,601,992,1230,1242,1340,1248,1379,1784,1549,1347,775,518,434,383,464,355,345,253,272,282,275,352,755,1136,1076,1085,1115,1066,1396,1985,1313,1052,659,778,649,676,599,255,256,445,308,351,282,592,825,977,993,1155,928,1314,1752,1630,1198,791,904,987,1057,727,497,313,252,214,197,274,197,573,943,934,1267,914,1141,1459,1635,1445,1121,778,1119,1149,1051,549,550,402,443,317,335,301,331,701,834,990,1018,889,1196,1636,1418,1451,1024,886,1185,924,633,421,408,428,411,282,216,419,471,875,722,809,867,1072,1270,1582,1249,1209,1356,1101,1110,992,652,802,645,526,332,295,307,297,370,610,781,834,920,1038,1287,1706,1245,977,1319,1584,1155,770,993,1038,657,393,245,424,352,458,454,593,765,1030,985,1033,1338,1166,1049,1172,1273,1519,1149,1203,1450,887,814,392,364,551,244,237,377,895,787,1020,1191,1084,1093,1090,945,1116,1331,1559,1459,1513,1462,1078,805,546,521,281,355,341,378,1047,826,1305,1255,1156,1151,957,1266,992,1394,2050,1845,1625,1319,942,584,645,351,279,390,290,242,1050,1085,1098,1316,1039,974,847,852,1008,1740,1833,1643,1464,1123,894,897,864,461,477,250,309,487,1341,1202,1059,940,938,911,606,734,1279,1535,1707,1742,1283,1007,1251,1416,1108,682,547,236,316,449,1570,1451,1067,835,557,494,513,679,987,1323,1935,1422,1142,1205,1312,1407,1070,691,479,261,387,643,1293,1462,1155,796,511,404,391,588,1038,1464,1666,1327,1461,1525,1543,1516,1053,739,416,245,429,1024,1156,1156,964,533,466,331,423,830,1251,1458,1188,1469,1655,1481,1630,1773,1056,723,356,507,441,935,828,924,851,688,363,279,374,783,1067,873,1202,1444,1479,1639,1740,1564,1314,999,384,369,621,516,667,785,906,783,427,297,514,745,674,825,1531,1711,1430,1531,1940,1486,1391,1130,477,381,664,790,657,661,1037,630,391,308,603,543,600,999,1460,1337,1529,1570,1672,1545,1408,823,417,341,596,748,597,612,826,629,360,270,350,435,946,1369,1292,1366,1510,1671,1528,1569,1066,812,404,547,881,530,583,628,831,585,361,270,358,423,984,1403,1267,1367,1539,1697,1520,1627,1076,789,414,565,870,494],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
