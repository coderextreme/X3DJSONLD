###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1099,1249,955,889,910,755,320,-1416,-4426,-4546,-4633,-3733,-3721,-3653,-4062,-4250,-4495,-4501,-4446,-4458,-4423,-4470,241,349,546,1354,1116,479,282,-777,-4189,-4330,-4360,-868,-3927,-3760,-4143,-4401,-4485,-4470,-4441,-4422,-4405,-4381,-537,-996,-48,1945,926,575,283,-983,-3617,-4274,-3075,-5085,-4146,-2549,-4397,-4499,-4480,-4425,-4381,-4364,-4344,-4343,-655,-1594,-1808,-405,35,617,579,-1136,-1409,-3759,-3674,-4230,-3453,-3920,-4200,-4491,-4400,-4363,-4321,-4294,-4321,-4287,-673,-1268,-1764,-2166,-2008,-1629,90,-378,-141,-2562,-2229,-4225,-3947,-3866,-4469,-4416,-4357,-4324,-4273,-4240,-4256,-4247,-481,-1081,-1658,-2056,-2120,-2370,-2251,-717,-1169,-62,-2773,-4131,-4068,-4574,-4458,-4316,-4340,-4278,-4222,-4195,-4196,-4192,411,-358,-1671,-1769,-3182,-2132,-2284,-2107,-2178,-734,-3264,-4131,-3197,-4487,-4371,-4334,-4282,-4229,-4191,-4154,-4149,-4148,1829,80,-291,-1843,-2020,-2237,-3029,-2283,-2572,-3115,-3627,-3554,-2459,-3485,-3122,-4306,-4240,-4165,-4130,-4096,-4078,-4076,1580,2053,514,60,-1267,-2081,-2515,-3013,-2337,-2726,-2948,-3536,-3435,-3800,-4230,-4247,-4180,-4102,-4086,-4038,-4010,-4021,1591,1975,1894,776,381,-1511,-2331,-1451,-1734,-2127,-2425,-2985,-2836,-3601,-4310,-4283,-4112,-4093,-4024,-3981,-3937,-3994,2286,1782,1115,1353,1598,3,-982,-1416,-1828,-2518,-2821,-2356,-3135,-4052,-3946,-4181,-4075,-4026,-3954,-3901,-3895,-3940,2799,1180,902,1470,1207,1360,276,-148,-2288,-2524,-2304,-2596,-3506,-3696,-4281,-4118,-4064,-3964,-3904,-3841,-3828,-3882,2744,1047,886,776,886,810,995,309,-2311,-2678,-2826,-2982,-3503,-4089,-3606,-4111,-4025,-3934,-3852,-3771,-3777,-3885,1604,1207,949,1156,1111,754,618,167,-1707,-2484,-3076,-3212,-3932,-3590,-3409,-4031,-3972,-3883,-3779,-3703,-3683,-3761,2298,1264,909,1007,945,922,891,779,1210,-432,-1265,-3076,-3906,-3528,-3532,-4008,-3932,-3847,-3716,-3644,-3613,-3687,1765,1035,848,850,774,730,785,820,699,766,1446,-3048,-3757,-2884,-3641,-3952,-3866,-3802,-3668,-3557,-3511,-3597,1478,971,764,708,597,495,704,626,506,415,457,-47,-150,-3317,-3615,-3878,-3819,-3762,-3648,-3522,-3401,-3494,1390,987,744,627,530,392,453,405,367,282,250,245,-92,-3255,-3579,-3822,-3723,-3649,-3579,-3474,-3246,-3355,1259,1047,767,540,470,369,303,304,257,198,209,177,-155,-3155,-3496,-3320,-3698,-3609,-3561,-3443,-3203,-3192,1241,905,702,527,409,321,275,243,234,174,177,172,136,-383,-3388,-3174,-3673,-3543,-3365,-3207,-3144,-3187,1161,800,635,503,380,312,248,213,157,118,105,148,166,-3,-3062,-3498,-3526,-3493,-3365,-3205,-2985,-2830,871,840,543,423,357,296,225,168,147,93,85,143,147,-18,-2731,-3473,-3771,-3481,-3340,-3081,-3095,-2629,746,625,585,408,321,275,209,149,121,77,82,101,129,34,-162,-3412,-2604,-3484,-3375,-3156,-2711,-2349,822,635,607,410,324,276,204,148,114,77,82,98,126,34,-106,-3319,-2825,-3482,-3379,-3163,-2585,-2393],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
