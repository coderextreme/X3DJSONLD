###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore7-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.273385249845958,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[11,11,13,16,20,21,23,23,24,29,35,34,31,32,33,33,34,38,43,42,38,37,38,44,54,65,78,83,81,80,81,81,78,72,64,54,45,14,15,17,21,25,26,27,27,28,32,35,35,35,35,36,35,35,38,42,43,40,38,37,41,48,59,73,80,79,78,77,75,70,62,53,44,37,18,19,22,27,31,31,32,32,32,33,34,36,39,39,39,37,36,37,39,41,42,40,37,38,41,50,63,71,73,73,72,68,62,54,44,36,32,25,26,27,31,34,36,37,37,36,37,37,39,41,41,41,39,37,36,37,39,41,42,41,41,42,47,57,65,72,75,70,63,56,48,40,33,31,32,33,33,33,34,38,42,42,41,41,42,42,42,42,42,40,38,37,37,38,40,44,46,47,47,48,53,62,75,78,70,60,51,43,36,31,31,35,36,36,34,33,40,49,51,51,47,44,43,42,42,42,41,39,39,40,42,44,48,53,56,55,54,52,56,67,70,63,53,45,37,31,28,29,34,37,38,34,31,43,57,61,63,54,45,42,40,40,40,39,39,41,43,46,48,54,62,65,66,61,53,51,54,55,52,46,37,30,25,23,26,29,33,35,32,29,43,59,64,66,57,47,43,41,42,43,42,41,44,49,53,54,60,67,70,70,65,55,49,48,46,43,39,32,26,21,19,24,22,26,29,28,27,40,56,60,62,57,51,48,46,47,48,48,46,50,58,61,61,64,69,71,70,65,56,51,47,43,38,33,29,25,19,16,22,19,22,26,26,26,38,50,54,56,55,54,53,53,55,58,57,54,57,64,67,67,69,70,69,67,63,57,53,51,47,41,36,32,28,23,21,25,22,23,25,26,29,35,42,46,50,53,56,58,61,66,70,69,66,67,72,73,74,72,68,66,64,62,57,56,58,57,51,45,41,36,33,31,31,26,27,29,31,34,38,42,47,51,56,61,65,70,74,79,77,73,73,74,75,76,73,68,65,64,61,56,57,65,67,62,54,47,40,37,35,34,33,35,37,40,44,47,50,55,60,65,70,74,79,81,82,80,76,73,71,73,75,73,70,67,66,61,53,55,70,78,72,62,50,40,36,34,31,39,43,46,50,54,58,61,64,68,71,74,78,81,80,79,77,74,71,68,68,71,72,71,69,65,58,49,51,66,74,69,61,51,42,36,32,30,45,50,54,59,64,68,73,73,73,73,73,73,73,72,69,68,68,65,61,62,66,69,72,67,57,49,43,43,49,53,50,49,49,48,40,33,31,49,55,61,65,70,73,77,75,73,70,67,65,64,62,60,60,61,59,56,58,61,65,68,62,49,40,38,36,36,36,35,38,45,47,41,34,32,51,57,63,66,69,70,70,68,65,61,58,56,55,53,52,53,54,54,53,55,57,57,56,50,41,36,34,32,30,29,29,31,36,38,36,33,33,51,55,61,63,65,63,61,58,55,52,49,48,47,45,44,45,47,48,48,49,50,48,44,39,34,31,30,28,26,24,24,25,28,31,33,34,34,48,50,53,55,58,55,52,49,46,46,46,44,42,38,35,35,38,39,39,39,38,36,35,32,29,27,25,24,23,22,22,23,26,30,33,36,38,44,45,45,48,50,47,44,42,41,41,43,40,37,32,28,28,31,31,31,30,28,27,28,27,25,23,22,20,20,21,21,22,27,31,36,40,41,39,40,41,42,43,42,40,40,41,41,39,37,32,29,24,25,27,27,28,26,25,24,24,23,22,21,20,19,19,19,20,23,29,34,39,43,41,36,36,37,37,37,37,37,39,42,40,37,33,29,26,23,23,24,25,26,25,24,23,23,22,22,21,19,18,18,18,20,25,30,35,40,43,39],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
