###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[34,34,32,31,30,30,30,29,31,33,33,32,28,24,25,27,26,23,25,28,27,23,21,19,18,18,17,16,15,14,14,17,20,22,25,24,24,34,33,31,30,28,27,27,26,28,29,29,28,25,21,22,25,24,21,21,23,23,21,20,19,18,18,18,17,16,15,16,18,21,24,27,27,26,34,32,31,29,27,25,24,24,25,27,27,25,23,20,21,24,24,21,21,21,22,21,20,20,19,18,18,18,17,17,18,21,24,27,29,29,27,35,32,31,29,26,24,22,21,23,26,26,24,22,21,23,26,26,23,23,22,22,22,21,22,21,19,18,18,18,18,20,23,27,30,32,31,28,35,32,31,29,26,22,21,21,23,25,24,23,23,22,24,27,26,25,24,24,24,23,23,23,23,21,19,19,19,19,20,24,28,32,34,32,29,35,32,30,28,24,21,21,21,22,22,22,21,22,24,25,27,26,25,25,26,26,25,25,25,24,22,21,19,19,19,20,24,28,32,34,32,30,33,29,28,27,24,22,23,23,22,20,20,20,22,25,26,26,26,25,26,28,28,27,26,26,25,23,22,20,19,19,21,24,28,32,34,32,30,29,25,25,25,26,26,27,26,24,21,20,20,22,25,25,25,25,26,28,30,30,28,27,27,25,22,21,20,20,20,21,25,29,31,34,32,30,25,22,23,24,27,29,29,28,25,22,21,20,22,23,24,25,26,28,30,32,31,29,28,27,25,22,21,21,21,21,21,25,29,31,33,31,30,23,21,23,24,27,30,29,28,26,24,22,21,22,22,23,25,28,32,33,34,32,29,27,26,26,24,22,21,20,20,21,26,30,31,32,30,29,22,21,23,25,27,29,29,28,26,24,23,22,22,22,23,25,29,34,35,35,32,28,27,26,26,25,24,21,20,20,21,27,31,32,32,30,29,21,20,23,27,28,29,28,28,26,24,24,23,23,22,23,25,29,34,35,34,31,28,27,27,27,27,26,22,20,20,22,27,32,33,34,32,30,21,21,25,29,29,29,28,28,26,25,25,25,24,23,23,25,28,32,33,33,31,28,27,28,29,28,27,23,21,21,22,27,32,34,35,34,32,23,25,27,30,30,30,29,29,27,25,25,25,24,23,24,25,27,30,31,33,32,30,30,31,31,29,27,23,21,21,22,27,32,34,36,36,35,27,30,30,30,30,31,31,31,29,27,27,27,26,24,24,25,27,29,31,33,33,33,33,33,32,30,26,22,20,21,23,27,31,34,36,37,37,33,38,34,29,31,33,34,34,32,30,30,30,28,26,26,26,28,30,32,34,35,34,34,34,33,30,26,22,20,22,24,28,32,34,36,37,38,38,44,37,29,33,36,37,37,35,33,33,34,32,30,29,29,30,32,34,36,36,35,34,34,33,30,26,22,20,23,26,29,33,35,37,38,39,37,42,37,31,35,39,39,39,38,37,37,37,36,34,34,34,34,35,36,37,37,37,36,34,33,30,27,23,22,23,26,30,34,37,40,41,41,35,37,36,34,38,41,41,40,40,40,41,40,39,39,39,40,40,39,39,38,38,38,37,35,33,30,27,25,24,24,26,31,35,40,44,44,43,33,34,36,37,40,42,41,39,40,42,42,41,41,41,43,46,46,45,43,40,39,39,38,36,34,30,29,28,28,27,27,32,38,43,48,47,45,31,31,36,40,42,43,40,37,39,42,42,42,42,42,46,53,54,51,48,44,41,40,39,36,34,31,31,31,31,29,29,34,40,46,50,49,48,31,32,38,44,45,46,41,37,39,42,42,43,43,43,49,58,59,57,53,48,44,42,40,36,34,33,34,35,35,33,32,36,41,46,50,49,49],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
