###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4791,-4761,-4721,-4697,-4678,-4814,-4878,-4688,-4659,-4575,-4426,-4575,-4425,-3821,-2613,-4893,-4798,-4320,-4059,-3880,-4087,-3868,-4532,-4553,-4471,-4591,-4643,-4761,-4286,-4556,-4695,-4304,-4081,-3839,-3831,-2727,-3003,-3228,-4732,-4351,-4073,-3966,-4245,-3964,-4057,-4200,-4305,-4499,-4581,-4560,-4214,-4520,-4515,-4450,-4284,-4501,-3664,-3867,-2381,-3262,-3957,-4779,-4359,-4498,-4207,-4088,-4090,-4215,-4349,-4495,-4479,-4744,-4544,-4536,-4567,-3579,-4013,-4179,-3606,-3926,-3470,-3133,-4007,-4230,-4436,-4477,-4323,-4131,-4137,-4151,-4152,-4194,-4445,-4405,-4485,-4582,-4051,-3025,-3538,-3877,-4043,-3860,-2884,-2939,-3939,-4079,-4369,-4293,-4250,-4126,-3887,-3783,-3813,-3842,-4163,-3990,-4212,-3666,-3556,-2712,-3157,-2936,-3867,-3831,-3691,-3048,-4359,-4532,-4508,-4340,-4323,-4249,-3648,-3600,-3670,-3725,-3814,-3664,-3961,-3873,-3395,-2004,-1487,-1881,-2920,-4163,-3953,-2972,-4390,-4639,-4770,-4162,-4491,-4349,-3522,-3500,-3594,-3698,-3979,-3650,-4179,-2919,-2077,-971,-2039,-1236,-1902,-3938,-3787,-3249,-4413,-4866,-4704,-4548,-4401,-4451,-3462,-3421,-3797,-3848,-3868,-4161,-4085,-2869,-1768,-627,-1162,-1673,-3426,-3946,-3641,-2844,-4384,-4543,-4818,-4573,-4493,-4496,-3520,-3529,-3898,-3886,-3690,-3508,-4223,-3665,-1860,-1848,-1303,-2857,-3706,-3508,-3586,-3275,-4484,-4846,-5045,-5055,-5000,-4779,-3447,-3615,-3991,-3977,-3917,-3439,-4267,-4246,-2625,-2975,-2057,-3556,-3649,-3999,-3102,-3154,-4255,-4964,-5101,-5191,-4746,-4557,-3323,-3789,-4013,-3933,-3742,-3951,-4550,-4370,-3426,-3823,-3131,-3190,-2172,-2190,-2556,-2971,-4576,-5232,-5057,-5147,-4894,-4581,-3019,-3669,-3824,-3247,-3893,-3981,-3978,-4296,-4336,-4302,-4210,-3477,-3257,-2606,-3208,-3177,-5058,-5019,-4888,-4997,-4642,-4533,-2947,-3455,-3598,-2679,-3122,-3268,-4236,-4681,-4518,-4424,-4580,-4232,-3910,-4521,-4553,-4687,-4545,-5037,-5310,-5249,-4916,-4785,-2440,-2847,-2779,-2957,-3152,-3380,-4337,-4466,-4674,-4218,-4445,-4563,-4308,-4684,-5137,-4902,-4517,-5282,-5090,-4679,-4633,-4638,-2220,-2739,-2533,-2576,-3112,-3748,-3819,-4776,-4589,-4520,-4058,-4267,-4488,-5136,-5454,-5706,-5442,-4580,-4705,-4457,-4779,-4794,-1931,-2540,-2413,-2350,-2556,-2923,-4117,-4196,-4391,-4489,-4506,-4519,-4424,-5124,-5530,-5231,-4690,-4804,-4764,-4677,-4579,-4695,-900,-2234,-2213,-2522,-2707,-3825,-4010,-4237,-4298,-4270,-4467,-4529,-4691,-5062,-5011,-4970,-4813,-4902,-4949,-4905,-4873,-4242,-138,-1982,-2175,-2311,-2665,-3256,-4003,-4156,-4220,-4159,-4492,-4765,-4812,-5125,-5302,-5297,-5360,-5002,-5016,-4946,-4844,-4447,-105,-1533,-2091,-2219,-2739,-3047,-3776,-3984,-4176,-4118,-4508,-4744,-4851,-5217,-5165,-5364,-5939,-5624,-4984,-5101,-5032,-4645,-49,-356,-1479,-1953,-2670,-3031,-3559,-3925,-4126,-4096,-4394,-4752,-4966,-5321,-5111,-5287,-5554,-5211,-5616,-5083,-4721,-5055,-44,-130,-239,-1179,-2271,-2983,-3415,-3726,-4054,-4140,-4318,-4630,-4969,-5191,-5300,-5435,-5485,-5652,-5498,-5025,-4938,-5064,786,-60,-115,-163,-882,-2918,-3158,-3723,-4114,-4109,-4275,-4539,-4942,-5178,-5299,-5382,-5447,-5404,-5443,-5470,-5400,-5196,753,-62,-117,-141,-464,-2850,-3144,-3730,-4058,-4147,-4276,-4550,-4930,-5224,-5285,-5442,-5468,-5563,-5608,-5070,-5592,-5012],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
