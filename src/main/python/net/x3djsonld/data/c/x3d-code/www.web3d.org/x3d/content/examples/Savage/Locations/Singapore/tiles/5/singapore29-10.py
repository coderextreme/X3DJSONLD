###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore29-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4654829221618253,103.7334663412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[17,15,13,11,9,9,10,11,12,14,16,20,23,27,30,33,33,33,33,32,30,28,27,26,23,20,17,16,20,23,26,28,28,29,30,31,16,14,12,11,10,9,10,11,12,14,16,18,22,26,30,34,36,37,36,35,33,30,28,25,23,20,18,18,22,27,29,32,30,30,30,30,18,16,14,13,12,11,10,11,13,15,17,20,24,28,33,37,40,41,40,38,35,31,28,26,23,22,22,23,26,30,33,35,34,33,31,30,20,19,16,15,15,13,11,11,12,15,17,21,25,30,34,39,42,43,42,40,36,32,28,26,24,23,24,26,30,33,36,38,37,36,33,30,24,21,19,17,16,14,10,10,11,14,17,21,25,30,34,38,42,43,40,37,33,30,28,26,23,23,25,27,32,36,38,40,39,39,34,30,28,25,22,19,17,14,11,9,9,13,17,21,25,29,33,37,41,42,39,35,32,28,27,25,23,22,25,28,33,38,40,41,41,40,36,31,30,27,24,21,18,14,11,10,10,13,17,22,26,29,32,36,39,40,38,36,32,28,26,24,23,23,25,27,33,37,38,40,40,40,36,32,33,29,25,21,18,14,11,10,11,13,18,22,27,29,30,33,36,38,38,36,32,28,26,24,23,23,25,27,32,36,37,38,39,39,36,33,34,30,26,22,18,14,11,11,11,14,18,23,27,30,31,32,34,36,36,35,32,29,27,26,25,24,25,26,32,37,38,38,38,37,34,31,34,31,27,22,18,14,11,11,11,14,19,23,27,30,31,32,33,34,35,34,32,30,29,28,27,25,25,27,32,37,39,39,37,35,32,29,35,31,27,23,18,14,11,10,11,15,20,24,26,29,30,32,33,34,35,34,33,32,32,32,29,27,28,29,34,38,40,40,37,33,30,28,35,31,27,23,19,14,10,10,11,16,21,24,25,27,30,33,34,34,35,34,34,34,35,35,32,29,30,32,37,40,40,40,36,32,29,26,33,29,26,22,18,14,11,11,12,15,19,22,24,26,29,31,33,35,35,36,36,37,38,37,34,32,32,34,38,41,41,41,37,32,29,26,30,27,25,20,16,13,11,12,13,14,17,19,22,25,28,30,32,34,35,37,40,41,41,40,37,34,34,35,39,42,42,41,37,32,29,26,29,26,24,20,17,14,12,12,12,14,16,19,22,25,26,28,29,31,32,34,37,39,41,41,38,36,36,37,41,43,43,42,38,33,29,25,28,26,24,20,17,15,14,12,12,13,16,19,22,24,25,26,27,28,30,32,34,37,40,41,39,38,38,39,42,44,43,43,39,34,29,24,29,26,24,21,18,16,14,13,13,14,16,18,21,22,23,24,24,25,27,30,33,36,39,41,40,39,39,40,42,43,42,41,37,33,28,23,30,27,24,21,20,17,15,14,14,15,16,18,19,20,21,21,22,23,25,28,32,35,38,41,40,40,40,41,43,43,41,38,35,31,26,22,30,26,23,21,18,16,14,14,14,14,16,17,19,20,20,21,22,24,27,30,33,36,39,42,42,43,42,42,41,40,38,35,32,28,25,22,29,26,23,20,17,14,13,12,13,14,15,17,18,19,20,21,23,25,28,32,34,37,40,42,45,46,45,43,39,36,34,31,28,26,23,21,30,27,25,23,20,17,15,13,14,15,16,18,20,21,22,23,25,27,30,33,35,38,41,44,47,48,46,44,40,36,34,32,29,26,23,21,31,29,27,26,24,21,18,16,15,16,17,20,24,25,25,26,26,28,31,34,36,39,43,46,49,50,48,46,41,38,36,34,31,27,24,21],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
