###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world14-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(67.45833802716578,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[602,823,1294,1330,1618,1261,611,145,39,69,284,156,156,314,195,230,275,312,375,535,389,447,316,583,553,742,564,156,19,314,552,365,277,297,156,156,156,305,304,416,518,497,454,469,604,75,205,212,125,69,66,109,193,305,156,156,544,156,156,156,156,337,537,306,331,428,319,163,63,138,114,142,82,183,265,304,305,304,280,156,156,310,304,387,345,426,492,544,30,98,97,180,304,304,213,360,288,354,272,312,269,275,275,304,398,508,265,487,420,359,1,18,160,148,194,198,181,358,300,301,232,377,355,444,407,382,517,213,96,136,178,60,1,1,201,269,309,288,99,256,292,288,450,426,487,568,642,322,179,240,213,-26,-2,8,0,167,61,139,212,193,216,213,189,195,373,471,464,671,615,584,198,122,72,31,-52,71,1,20,16,38,7,74,129,269,208,183,274,216,553,676,628,113,-64,-71,-52,-34,32,100,-14,-4,-14,13,6,7,51,77,-59,-3,15,-25,356,18,-191,-334,-212,38,244,303,298,239,-41,-33,-36,-23,-4,1,-12,30,-70,-57,-10,-309,-313,-255,-302,-340,-149,-50,295,303,199,96,-85,-65,-50,-44,-29,-23,-20,-132,-261,-274,-376,-545,-566,-250,-204,-169,-27,165,59,62,1,91,-851,-587,-278,-94,-52,-60,-90,-134,-395,-344,-311,510,-70,-147,-147,-87,-2,152,307,349,221,230,-1681,-1453,-1210,-943,-419,-310,-390,-433,-312,-149,-84,207,393,331,-125,1,0,309,297,216,304,341,-2240,-1957,-1737,-1409,-990,-368,-378,-322,-28,51,152,169,152,169,-30,-78,160,173,141,161,236,152,-2530,-2342,-2129,-1959,-1594,-995,-269,-151,-30,-14,102,219,276,152,227,-46,84,90,179,32,0,161,-2809,-2663,-2545,-2439,-2273,-1159,-432,-197,-103,-33,63,181,151,274,119,152,152,-73,1,151,-130,-209,-3038,-2880,-2806,-2707,-2443,-1221,-330,-160,-96,-38,-4,58,126,150,47,413,294,191,1,-331,-342,-245,-3124,-3052,-2978,-2775,-2403,-1088,-369,-346,-238,-41,8,115,212,188,1,-14,304,-321,-482,-502,-496,-483,-3399,-3450,-3160,-3029,-2329,-1579,-379,-362,-355,-382,-422,-444,-483,-510,-490,-369,-414,-457,-425,-204,175,155,-3356,-3409,-3328,-2875,-1968,-711,-378,-370,-368,-415,-473,-474,-502,-459,-416,-384,-347,163,121,283,269,260,-3451,-3437,-3290,-2562,-2178,-1235,-612,-384,-375,-388,-375,-390,-379,-364,-290,152,-48,276,236,595,384,304,-3473,-3384,-3091,-2775,-2499,-1982,-1450,-807,-358,-300,-227,-31,8,56,151,2,-171,-159,142,101,70,13,-3467,-3314,-3074,-2813,-2588,-1927,-1624,-1024,-333,-278,-179,-62,4,93,208,16,-167,-204,11,47,-10,-9],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
