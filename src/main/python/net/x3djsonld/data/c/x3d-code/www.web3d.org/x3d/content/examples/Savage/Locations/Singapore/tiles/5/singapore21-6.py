###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore21-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3956292231378735,103.67601420477412,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[27,27,27,26,26,26,27,32,41,47,51,50,44,41,42,41,38,35,30,28,31,34,40,43,44,43,41,38,35,32,30,29,30,32,36,42,27,27,26,26,25,25,26,32,40,46,51,50,46,44,44,41,38,34,30,29,30,33,38,42,45,45,44,41,36,32,31,29,28,29,32,35,26,26,25,25,24,24,26,30,36,40,42,42,40,40,42,41,38,34,31,30,31,32,36,39,42,43,42,40,35,31,31,30,28,28,29,30,26,25,24,24,23,24,26,29,32,34,34,33,33,36,39,40,38,35,33,31,31,32,35,37,39,39,40,38,33,30,30,29,28,26,26,26,25,24,24,23,22,23,24,26,29,30,30,29,29,32,37,39,38,36,34,33,33,34,36,37,37,36,35,33,30,28,27,26,25,24,25,26,25,24,23,22,21,21,22,23,26,26,26,26,27,30,35,37,38,36,34,34,35,36,37,36,35,33,31,29,27,25,24,24,23,23,25,27,26,25,24,23,21,20,20,21,22,23,23,24,27,30,33,34,34,33,33,33,33,34,35,35,33,31,29,26,25,24,23,22,22,23,26,29,28,27,26,24,22,20,20,20,20,20,20,23,28,30,30,30,30,30,31,32,32,32,33,33,32,30,27,25,24,23,22,21,22,23,27,31,29,28,27,26,24,22,21,21,22,22,22,24,27,29,28,27,27,27,29,30,31,32,32,32,31,29,26,23,22,21,21,21,22,25,29,33,30,30,29,28,26,25,23,23,24,24,25,26,27,27,26,25,24,24,26,28,30,31,31,31,30,28,25,23,21,20,20,20,23,26,31,35,30,30,31,30,28,27,26,26,27,27,27,28,29,29,27,25,24,24,26,27,29,30,31,31,29,27,25,23,21,20,19,20,22,25,29,33,30,31,32,31,30,29,28,28,29,29,29,30,31,31,29,27,26,26,26,28,29,30,30,30,29,27,25,23,22,21,20,19,21,24,28,30,32,33,33,33,32,31,30,30,29,29,29,30,32,33,33,31,29,28,28,28,29,29,30,30,29,29,28,27,26,25,22,20,21,23,25,26,35,34,34,34,33,31,30,30,29,29,29,30,33,35,36,35,33,31,29,29,29,29,30,31,31,32,33,33,31,29,25,22,22,21,21,21,34,33,33,32,32,31,30,30,30,29,29,31,34,37,39,39,36,33,31,30,30,30,31,31,32,34,37,37,35,31,27,24,22,21,20,19,32,31,30,30,30,30,29,30,30,31,32,33,35,38,41,41,37,34,32,32,33,33,33,33,34,36,39,39,37,32,28,26,24,23,20,18,30,29,28,28,28,28,28,29,31,33,36,38,41,42,43,41,38,36,35,36,38,39,40,39,37,36,38,38,36,32,29,26,25,24,22,20,29,28,27,26,26,26,27,29,32,36,40,44,47,46,43,41,38,37,39,41,44,47,48,46,41,37,36,35,34,31,29,27,27,26,24,22,28,27,26,25,24,24,24,27,31,35,39,44,47,46,42,39,38,40,43,46,49,51,54,52,44,39,37,35,35,33,31,28,28,27,25,23,27,26,26,25,23,22,22,24,27,31,35,39,42,42,38,36,38,42,47,51,52,54,56,54,48,42,39,37,37,36,33,30,28,27,26,24,28,29,29,28,25,23,22,23,26,28,30,33,37,36,34,34,36,41,48,53,54,55,56,54,49,44,41,39,39,37,34,31,29,28,26,25,32,34,35,33,30,26,23,23,25,27,28,29,30,30,30,30,32,37,45,51,54,56,55,53,49,45,42,41,40,38,35,32,30,29,27,26,33,36,38,38,35,30,25,24,25,26,26,26,27,27,28,28,28,33,40,47,53,56,55,53,49,45,43,41,40,39,36,33,32,31,29,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
