###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[141,159,141,36,-1059,-2940,-2622,-1720,-89,-72,-423,-864,15,947,535,637,888,723,563,290,208,34,515,200,-733,-1675,-2956,-3186,-2968,-2277,-1430,-1119,-1071,-1306,-48,1020,1198,676,901,788,534,319,102,38,152,-311,-2320,-2292,-2560,-2897,-3107,-2714,-2291,-1753,-1405,-1615,-1081,574,848,667,786,706,526,309,48,38,-2220,-1690,-1904,-2247,-2550,-2632,-3070,-2937,-2610,-2231,-1500,-1984,-1559,2449,742,704,716,649,462,256,47,33,-2236,-2028,-1739,-2432,-3011,-2585,-2671,-2984,-2834,-2583,-1980,-2238,-1913,1855,867,836,688,486,415,191,44,44,-2450,-2771,-2100,-1917,-4377,-2897,-2398,-2804,-2521,-2444,-2231,-605,-1933,65,879,616,454,379,178,184,117,69,-3150,-3050,-395,-547,-660,-1696,-2822,-2558,-2428,-2264,422,-28,-1359,-31,489,1137,432,239,160,250,143,161,-3517,-4278,258,87,-650,-63,-2295,-2737,-2078,-2507,-1206,-266,-965,-100,427,427,506,215,241,210,180,244,-3700,-1004,-1051,-1638,-1206,-478,-2919,-2258,-2432,-2610,-1102,-1038,-656,-66,289,360,238,310,326,253,216,409,-3065,-829,-980,-543,-499,-519,-19,59,540,-2071,2084,231,-164,-33,522,490,306,586,436,443,366,1117,171,342,-1110,-63,-80,-1,249,1998,996,207,1206,1619,181,58,852,336,373,415,399,442,1313,1205,211,-201,-387,-61,-579,-80,820,1074,781,1335,1063,1138,2193,81,484,596,760,698,936,1146,1720,2058,985,48,77,-125,-500,-52,148,838,1095,1130,1004,1029,1823,1206,1496,1891,827,710,933,1589,2126,2412,262,314,149,-583,522,126,530,744,1993,972,1068,913,1427,1367,1239,1129,1650,789,835,2297,2042,2336,1082,4,-248,-266,-380,431,661,971,1103,1104,1271,1056,1285,1409,1945,1467,955,1507,1300,1962,1645,2272,164,202,-1192,-143,-173,762,493,1104,1539,989,1221,1078,974,1772,1472,1488,2885,1926,2399,1832,2481,2316,721,-82,-111,-79,-7,503,649,1158,1162,1342,918,877,1370,1114,1535,1672,2706,1531,1840,1937,2979,973,736,5,-22,-348,-435,86,-4,196,558,1114,1357,685,813,1289,927,1626,2588,1665,2734,2008,1892,2466,1898,154,220,-47,92,185,-520,102,16,951,928,895,1095,998,900,589,1139,44,2686,2244,2170,2162,524,206,676,824,193,54,300,-685,-117,-3,732,1011,772,178,-79,-1690,-1888,-1864,-255,1541,1730,1261,679,718,1327,420,167,474,-170,-2002,-2029,-2039,-554,735,269,-796,-868,-2128,-2075,-1868,-1333,1257,1259,1238,533,927,956,330,250,78,-199,-2153,-2158,-2161,-2182,-2134,-2146,-1949,-2094,-2119,-2039,-1740,-744,174,1244,2671,374,631,529,502,458,146,-117,-2031,-2064,-2041,-2159,-2205,-2180,-2170,-2188,-2120,-2035,-736,94,2615,3135,1072,289,507,298,356,525,139,-110,-1915,-1965,-2006,-2150,-2205,-2187,-2170,-2162,-2122,-2036,-477,778,1827,3054,813],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
