###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world15-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(78.7083383624419,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3467,-3314,-3074,-2813,-2588,-1927,-1624,-1024,-333,-278,-179,-62,4,93,208,16,-167,-204,11,47,-10,-9,-3467,-3399,-3297,-2991,-2838,-2689,-2376,-1827,-808,-400,-327,-238,-108,0,26,167,-29,78,-110,6,-5,-374,-3484,-3438,-3399,-3394,-3199,-3201,-2916,-2288,-1579,-677,-428,-308,-228,-190,-157,10,16,9,-10,-104,-273,-434,-3503,-3469,-3431,-3403,-3284,-3048,-2732,-2616,-1988,-1411,-703,-396,-327,-295,-211,-216,-189,-177,0,-7,-74,35,-3547,-3500,-3468,-3421,-3363,-3164,-2948,-2686,-2381,-2111,-1822,-1250,-521,-292,-395,-391,-280,-306,-145,-343,-15,-48,-3540,-3504,-3479,-3438,-3405,-3314,-3204,-2998,-2915,-2830,-2368,-2241,-2182,-1842,-1340,-616,-306,-546,-343,-326,-318,-95,-3554,-3534,-3505,-3486,-3464,-3418,-3399,-3256,-3056,-2947,-2966,-2723,-2603,-2403,-2197,-2049,-1631,-1026,-663,-559,-524,-549,-3583,-3568,-3533,-3495,-3461,-3402,-2937,-2869,-3164,-2878,-2659,-2581,-2609,-2397,-2141,-1904,-1691,-1219,-962,-582,-565,-557,-3677,-3655,-3629,-3583,-3414,-3410,-3166,-2195,-2977,-2698,-3078,-3176,-2681,-2315,-2321,-2193,-1983,-1784,-1520,-1214,-878,-738,-3686,-3666,-3639,-3614,-3598,-3577,-3509,-2979,-2883,-3166,-2818,-3217,-3108,-2984,-2834,-3006,-2683,-2302,-2117,-2016,-1772,-1383,-3676,-3668,-3659,-3605,-3509,-3565,-3595,-3563,-3462,-3400,-3335,-3239,-3175,-3052,-2887,-2855,-2796,-2624,-2591,-2539,-2397,-2395,-3650,-3599,-3580,-3583,-3596,-3600,-3590,-3493,-3410,-3398,-3356,-3258,-3199,-3064,-2952,-2399,-2636,-2793,-2803,-2819,-2798,-2770,-3601,-3594,-3578,-3545,-3520,-3598,-3459,-3408,-3368,-3292,-3201,-3196,-3215,-3134,-3219,-3217,-3246,-3208,-3168,-3129,-3093,-3077,-3415,-3436,-3442,-3438,-3474,-3506,-3509,-3452,-3360,-3360,-3305,-3325,-3392,-3292,-3252,-3233,-3222,-3213,-3203,-3191,-3162,-3140,-3027,-3184,-3385,-3409,-3429,-3434,-3421,-3400,-3365,-3198,-3093,-3191,-3194,-2978,-3192,-3200,-3202,-3005,-2998,-2957,-2986,-2942,-2736,-2935,-3105,-3277,-3337,-3325,-3315,-3294,-3259,-3221,-2821,-2817,-2916,-3020,-2936,-2605,-2687,-2793,-2753,-2615,-2576,-2523,-2570,-2598,-2428,-2645,-2817,-2801,-2704,-2444,-2417,-2612,-2756,-2825,-2776,-2654,-2386,-2383,-2364,-2428,-2275,-2080,-1862,-1766,-2134,-2009,-2190,-2313,-2445,-2460,-2339,-2336,-2477,-2324,-2331,-2290,-2333,-2285,-2179,-2024,-1942,-1972,-1997,-1971,-1935,-1882,-1807,-1797,-1778,-1741,-1778,-1762,-1824,-1981,-1833,-1871,-1863,-1303,-1148,-1142,-1138,-1125,-1187,-1320,-1253,-1182,-1144,-1213,-1316,-1414,-1445,-1448,-1431,-1359,-1231,-1261,-1396,-1502,-1624,-1624,-1385,-1588,-1852,-2127,-1919,-2154,-2266,-2499,-2538,-2447,-1816,-1830,-1839,-1864,-1951,-1981,-2061,-2214,-2195,-2114,-1991,-1683,-1326,-1390,-1359,-1294,-1160,-1189,-1212,-1214,-1173,-1098,-2591,-2580,-2495,-2475,-2449,-2420,-2339,-2212,-2192,-2097,-2163,-2232,-2281,-2360,-2404,-2329,-2146,-2136,-2158,-2250,-2307,-2270,-2897,-2889,-2869,-2658,-2634,-2778,-2805,-2801,-2798,-2758,-2787,-2854,-2708,-2344,-1976,-1584,-1273,-1215,-1236,-1424,-1890,-2273,-2958,-2949,-2913,-2782,-2684,-2853,-2934,-2946,-2940,-2862,-2858,-2890,-2945,-2976,-2985,-2732,-2395,-2275,-2355,-2697,-2937,-3069],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
