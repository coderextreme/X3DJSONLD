###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(translation=(81168.42,0.0,108224.56),
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/5/PanamaCity3-3.jpg'],repeatS=False,repeatT=False)),
          geometry=ElevationGrid(xDimension=22,xSpacing=1288.3877,zDimension=22,zSpacing=1717.8502,height=[-88,-83,-79,-81,-79,-80,-80,-78,-78,-77,-78,-76,-75,-73,-72,-70,-68,-65,-63,-60,-57,-55,-87,-94,-92,-91,-89,-85,-85,-82,-82,-81,-80,-78,-77,-75,-74,-72,-70,-67,-64,-62,-58,-55,-99,-98,-90,-92,-96,-90,-84,-83,-84,-83,-83,-81,-79,-77,-75,-73,-71,-69,-66,-63,-60,-56,-98,-93,-95,-98,-99,-96,-95,-92,-90,-86,-84,-83,-81,-79,-77,-75,-73,-70,-67,-64,-61,-57,-108,-107,-105,-104,-102,-100,-99,-96,-94,-90,-86,-85,-84,-81,-79,-77,-75,-72,-69,-66,-61,-57,-114,-112,-109,-108,-106,-104,-102,-100,-98,-95,-93,-89,-87,-84,-82,-79,-76,-74,-71,-66,-61,-57,-118,-116,-113,-111,-110,-108,-106,-103,-102,-99,-97,-94,-90,-87,-84,-81,-78,-74,-71,-66,-61,-57,-121,-119,-117,-115,-113,-111,-109,-107,-104,-102,-100,-97,-93,-89,-86,-83,-80,-74,-70,-66,-61,-56,-124,-122,-120,-118,-117,-114,-112,-110,-108,-105,-102,-99,-96,-93,-89,-85,-82,-74,-68,-63,-60,-57,-129,-126,-123,-121,-119,-117,-115,-113,-110,-108,-106,-102,-99,-96,-92,-85,-78,-73,-67,-62,-59,-57,-132,-129,-126,-124,-122,-120,-117,-115,-113,-111,-108,-105,-102,-99,-95,-84,-74,-70,-66,-61,-59,-58,-135,-133,-130,-127,-125,-122,-120,-118,-116,-113,-111,-108,-106,-103,-98,-85,-74,-69,-66,-63,-61,-59,-139,-136,-133,-131,-128,-125,-123,-121,-118,-116,-113,-111,-110,-106,-94,-84,-73,-70,-68,-66,-63,-62,-143,-140,-137,-134,-132,-129,-126,-124,-121,-118,-116,-113,-112,-110,-100,-87,-72,-70,-68,-66,-64,-62,-148,-145,-141,-138,-136,-133,-130,-127,-124,-122,-119,-116,-115,-114,-114,-98,-78,-73,-69,-68,-66,-65,-153,-150,-147,-143,-141,-137,-135,-132,-129,-126,-123,-120,-118,-117,-117,-115,-110,-83,-73,-72,-71,-70,-158,-155,-152,-148,-146,-143,-139,-136,-134,-131,-128,-124,-122,-121,-120,-120,-120,-112,-96,-97,-96,-91,-164,-160,-157,-154,-152,-147,-144,-141,-139,-136,-133,-129,-127,-124,-122,-120,-120,-118,-112,-110,-108,-103,-170,-166,-163,-159,-157,-152,-150,-146,-144,-141,-138,-134,-131,-128,-125,-123,-121,-117,-115,-112,-108,-104,-177,-172,-169,-166,-163,-158,-155,-152,-149,-146,-142,-139,-136,-132,-130,-127,-124,-120,-117,-114,-110,-107,-184,-180,-176,-172,-170,-165,-162,-157,-154,-151,-148,-144,-141,-137,-134,-131,-127,-124,-120,-117,-114,-110,-184,-180,-176,-172,-170,-166,-162,-158,-155,-152,-148,-145,-141,-137,-134,-132,-128,-124,-120,-117,-114,-111]))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
