###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,157.4583433915838,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4613,-4677,-4606,-4833,-2462,-2316,-1125,-1193,-1271,-2903,-2727,-1534,-1169,-2000,-1542,-66,-298,-1824,-1563,-2615,-2187,-2714,-4610,-4708,-4459,-3495,-2308,-1798,-747,-1171,-2421,-3000,-1362,-1490,-1986,-1802,-571,-74,-2100,-1867,-2253,-3042,-2647,-2476,-4877,-4567,-3442,-3070,-2126,-1656,-803,-1189,-3004,-2891,-1067,-2249,-2112,-1504,-2259,-1322,-2096,-2171,-3398,-3079,-2573,-3302,-388,-3740,-2514,-3298,-1383,-1535,-808,-1675,-3083,-3084,-617,-1895,-2381,-2492,-2876,-1949,-1774,-3633,-3790,-3368,-3092,-2118,-282,-3086,-4022,-3367,-1516,-1424,-1004,-2483,-3149,-2386,-1192,-2022,-2924,-4084,-3095,-1540,-2417,-3782,-3729,-3669,-3328,-1610,-4759,-3187,-3402,-2633,-1480,-1277,-1196,-2588,-2597,-2380,-1012,-725,-3929,-3713,-3443,-1729,-3290,-3959,-3909,-3698,-3573,-2551,-4660,-2993,-4014,-1703,-1481,-1377,-1154,-2250,-2765,-2757,-1007,-2240,-3839,-4173,-3194,-1212,-3042,-3926,-4128,-3850,-3885,-3121,-4080,-3252,-2679,-1650,-1456,-1414,-1137,-1609,-2961,-2864,-2382,-2802,-4042,-3733,-3084,-1458,-2457,-3826,-4131,-4179,-3903,-3396,-1538,-2919,-3434,-1670,-1479,-1300,-1178,-1576,-3234,-2954,-2314,-2995,-3761,-3825,-2783,-1445,-3105,-3945,-4146,-4269,-3997,-3641,-4811,-3301,-2801,-2574,-1581,-1224,-1199,-1791,-3311,-2773,-2441,-2334,-2500,-2677,-1642,-2194,-2970,-4063,-4265,-4313,-3938,-3648,-4865,-4227,-2212,-2879,-1653,-1357,-1218,-2072,-3421,-2840,-2951,-326,-2169,-3108,-2242,-2934,-2997,-4041,-4297,-4259,-3625,-3011,-4403,-4599,-2345,-2863,-1695,-1332,-1327,-2194,-3513,-3242,-3173,-203,-2350,-2607,-2610,-2895,-3076,-4169,-4127,-3650,-3371,-3601,-4781,-4306,-2837,-3259,-2009,-1599,-1507,-2051,-3481,-3222,-2401,-3044,-2936,-2542,-3003,-2704,-3096,-3897,-4207,-3209,-3384,-3565,-4678,-3584,-2367,-3387,-1808,-1446,-1331,-1948,-3641,-3555,-2615,-2905,-2975,-2874,-3469,-2846,-3002,-3951,-4123,-4165,-3880,-3452,-4798,-3041,-2811,-3371,-2063,-1428,-1375,-2065,-3578,-3662,-2703,-3570,-3204,-3104,-3271,-2659,-3347,-4187,-4518,-3857,-4020,-3896,-4716,-3310,-3382,-3098,-1934,-1382,-1204,-1741,-3370,-3580,-1774,-3352,-2611,-3885,-3155,-4012,-3821,-4231,-4470,-4308,-4256,-4011,-4602,-3589,-3581,-1876,-1813,-1259,-1015,-1812,-2994,-3568,-1801,-2484,-2686,-4006,-3836,-3771,-4377,-4523,-4507,-4373,-4293,-4090,-4657,-4670,-2895,-2417,-1725,-2,-1037,-1931,-2751,-3625,-1819,-2246,-3049,-2496,-3709,-3982,-4261,-4543,-4543,-4390,-4165,-4094,-4611,-4190,-3078,-843,-1864,-118,-574,-2066,-3188,-3593,-1935,-2199,-2282,-1882,-4092,-3955,-4388,-4570,-4578,-4437,-4311,-3755,-4484,-3339,-2830,-189,-1748,-1400,-1144,-2585,-3261,-3596,-2177,-2133,-1973,-3066,-3982,-4334,-4631,-4466,-4527,-4433,-4279,-3787,-2885,-2606,-2678,-1809,-1685,-1185,-1300,-2683,-3435,-3627,-1970,-1851,-1979,-3785,-3752,-4036,-4550,-4589,-4478,-4463,-4354,-3784,-2072,-2530,-2635,-52,-1833,-1067,-1744,-2787,-3359,-3498,-1251,-1625,-1920,-3958,-4075,-4580,-4277,-4471,-4531,-4374,-4277,-3869,-1811,-2175,-2546,-2495,-1965,-1195,-2145,-2481,-3648,-3098,-934,-1484,-1796,-2553,-4357,-4172,-3887,-4250,-4417,-4458,-3780,-3788,-1946,-2134,-2571,-2474,-1965,-1272,-2178,-2457,-3615,-2933,-888,-1322,-1741,-3685,-4389,-4282,-3735,-4099,-4417,-4399,-3931,-3718],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
