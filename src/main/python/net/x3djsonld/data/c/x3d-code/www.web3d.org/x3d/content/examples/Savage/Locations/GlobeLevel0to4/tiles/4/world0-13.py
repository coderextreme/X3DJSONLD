###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world0-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-90.0416666667,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2885,2886,2887,2888,2890,2891,2892,2894,2895,2896,2898,2899,2900,2901,2901,2903,2905,2907,2909,2911,2914,2915,2999,3001,3001,3001,3001,3001,3001,3000,3000,3000,2999,2998,2997,2995,2994,2992,2990,2987,2986,2984,2982,2982,3047,3046,3046,3046,3045,3045,3045,3044,3044,3044,3044,3044,3045,3046,3046,3046,3048,3049,3050,3052,3054,3055,3086,3086,3085,3085,3086,3085,3085,3086,3086,3086,3086,3087,3087,3088,3088,3089,3089,3090,3091,3092,3093,3093,3099,3098,3096,3094,3092,3089,3087,3085,3082,3080,3077,3075,3071,3069,3066,3063,3060,3058,3054,3052,3049,3047,3098,3095,3092,3089,3084,3080,3074,3069,3063,3058,3052,3047,3042,3037,3031,3026,3021,3016,3012,3008,3003,3000,3096,3093,3090,3085,3080,3074,3067,3059,3052,3044,3036,3027,3019,3010,3003,2999,2995,2989,2984,2977,2970,2966,3101,3100,3097,3091,3084,3075,3066,3057,3048,3039,3031,3023,3015,3008,3001,2996,2989,2980,2968,2956,2942,2933,3092,3088,3082,3075,3065,3055,3043,3032,3021,3012,3004,3000,2997,2989,2978,2965,2950,2936,2921,2909,2898,2889,3102,3095,3081,3064,3048,3031,3015,3003,2995,2982,2970,2957,2946,2934,2921,2907,2895,2877,2857,2836,2818,2810,3120,3107,3096,3076,3053,3031,3012,2999,2981,2959,2937,2918,2904,2897,2884,2869,2854,2835,2814,2797,2785,2776,3121,3107,3099,3084,3064,3042,3020,3002,2983,2950,2921,2901,2891,2879,2865,2851,2837,2823,2810,2798,2773,2748,3132,3113,3099,3084,3066,3047,3028,3011,2989,2954,2917,2897,2883,2867,2851,2833,2814,2797,2785,2770,2752,2737,3159,3108,3070,3029,3011,3002,2995,2981,2956,2923,2899,2885,2872,2857,2841,2827,2813,2797,2759,2719,2695,2681,3149,3085,3020,2986,2973,2964,2961,2950,2933,2912,2894,2877,2852,2825,2801,2788,2769,2744,2711,2680,2637,2613,3164,3116,3095,3072,3049,3032,3016,3001,2977,2948,2922,2899,2852,2812,2787,2758,2732,2717,2705,2686,2647,2619,3201,3177,3152,3130,3107,3090,3055,3020,2991,2960,2928,2897,2822,2780,2736,2695,2675,2660,2649,2633,2613,2600,3247,3226,3210,3200,3184,3147,3107,3067,3013,2982,2947,2909,2884,2858,2835,2802,2744,2693,2657,2630,2600,2584,3274,3245,3218,3199,3184,3148,3104,3071,3019,2987,2954,2921,2899,2883,2875,2863,2843,2810,2750,2686,2631,2604,3282,3248,3216,3196,3169,3138,3108,3079,3037,2999,2964,2928,2905,2899,2891,2879,2863,2838,2800,2729,2641,2593,3317,3289,3250,3214,3187,3160,3132,3104,3062,3011,2982,2950,2927,2913,2900,2877,2841,2805,2777,2721,2645,2599,3346,3326,3301,3244,3194,3170,3146,3117,3079,3004,2976,2957,2940,2927,2913,2899,2869,2834,2803,2742,2685,2637,3352,3334,3308,3252,3194,3169,3145,3117,3080,3006,2976,2957,2942,2929,2917,2900,2874,2837,2801,2742,2687,2644],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
