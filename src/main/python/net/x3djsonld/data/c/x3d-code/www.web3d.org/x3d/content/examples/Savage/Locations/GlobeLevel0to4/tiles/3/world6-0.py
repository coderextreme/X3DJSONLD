###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_60',geoSystem=['GDC'],position=(56.20833769188965,-157.54166599614774,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(56.20833769188965,-157.54166599614774,0.0),range=4495500.0,child1Url=['../../tiles/4/world12-0.x3d'],child2Url=['../../tiles/4/world12-1.x3d'],child3Url=['../../tiles/4/world13-0.x3d'],child4Url=['../../tiles/4/world13-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world6-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(44.95833735661353,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-5207,-5609,-6107,-5828,-5660,-5623,-5523,-5241,-5459,-5254,-5364,-5350,-4726,-4714,-4814,-4622,-4810,-4645,-4338,-4284,-4326,-5531,-5813,-6112,-5884,-5640,-5947,-5544,-5354,-5174,-5200,-4939,-5339,-5137,-5098,-5151,-4703,-4698,-4544,-4285,-4102,-3956,-5816,-5187,-6267,-5537,-5554,-5957,-5503,-5336,-5463,-5177,-5620,-5360,-5140,-5200,-5024,-4665,-4465,-3189,-4191,-4141,-3907,-5703,-5656,-5738,-5922,-5731,-5758,-5696,-5365,-5577,-5501,-5466,-5438,-5178,-5302,-5137,-4863,-4578,-4244,-4226,-4125,-3968,-5619,-5689,-5847,-6131,-6540,-5744,-5489,-5392,-5326,-5244,-5278,-5374,-5282,-5227,-5062,-4928,-4656,-4495,-4343,-4178,-3992,-5685,-5604,-5662,-5838,-5614,-5752,-5394,-5174,-5026,-5237,-5213,-5213,-5203,-5181,-5091,-4797,-4635,-4476,-4332,-4239,-3381,-5592,-5343,-5592,-5482,-5469,-5491,-5365,-5197,-4975,-5033,-5095,-5175,-5096,-5199,-4966,-4913,-4643,-4459,-4267,-4165,-3941,-5128,-5532,-5515,-5374,-5347,-5483,-5281,-4995,-4993,-5044,-5101,-5066,-5202,-4704,-4824,-4604,-4467,-4378,-4178,-4001,-3966,-4909,-4897,-5197,-5032,-5022,-5390,-5280,-4938,-4947,-4874,-5012,-4922,-4967,-4891,-4733,-4328,-4261,-4115,-3278,-3893,-3870,-7173,-6729,-5755,-4997,-5019,-5088,-5138,-4751,-4802,-4896,-4769,-4637,-4994,-4847,-4608,-4403,-4024,-3668,-3894,-3847,-3647,-1849,-1924,-4225,-4323,-5465,-5823,-4738,-4676,-4665,-4809,-4846,-4687,-4685,-4829,-4511,-4234,-4570,-3692,-3688,-3643,-3465,-171,-3564,-3019,-859,-571,-3033,-5200,-5463,-4684,-4549,-4532,-4455,-4469,-4195,-3620,-4340,-3864,-3826,-3712,-3541,-3264,-731,-3837,-3765,-3534,-2927,-1337,-73,-2524,-4400,-5881,-4724,-4473,-4598,-4479,-4252,-4065,-3836,-3846,-3553,-3333,-2941,-3600,-3781,-3678,-3687,-3012,-1495,-406,1,-71,-88,-1962,-5544,-4297,-3332,-4044,-4142,-3959,-3658,-3259,-3171,-2669,-3807,-3835,-3691,-3405,-3014,-324,-125,-95,168,-57,-98,-350,-4709,-4671,-4459,-4076,-4006,-2862,-3392,-2746,-412,-3780,-3721,-3611,-133,-97,-96,-78,-72,-69,-60,-42,-145,-85,-2388,-4343,-3921,-3400,-3536,-3425,-2244,245,-3765,-3580,-2532,-129,-93,-101,-56,-29,-43,-60,5,162,109,-81,-2186,-4456,-3735,-3633,-3102,-245,96,-3573,-178,-103,-95,-80,-40,-33,-25,-59,42,64,502,-153,-173,-257,-3632,-3709,-2143,-144,1321,1325,-2636,-150,-143,-71,-64,-35,145,-18,4,459,86,589,1012,103,2,-65,-3,52,1,679,1496,-130,-147,-110,-63,-55,-30,-23,8,5,225,91,574,1579,-51,908,213,1581,792,1883,873,628,-9,-108,-85,-48,-46,-35,-18,45,19,10,104,426,742,304,1894,836,2072,1645,899,1477,604,-11,-110,-83,-46,-46,-36,-21,16,45,17,243,243,1580,343,1706,669,1767,1082,868,1294,933],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
