###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-90.04166398449098,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[6,-1040,-1083,-2042,-2399,-2010,-1630,-1432,-2013,327,49,2395,363,233,199,158,169,158,94,89,120,98,-132,-490,-1358,-1944,-2321,-2086,-2010,-1406,-1655,-62,99,3953,359,241,227,181,191,172,147,118,128,96,-177,-1494,-2226,-2724,-2834,-2124,-3053,-1773,-1228,-167,211,2610,454,240,225,192,197,184,134,156,121,105,-955,-2244,-2444,-2723,-2952,-3347,-2896,-2831,-1889,-799,124,2375,973,261,215,188,237,173,323,134,131,81,-1594,-2308,-2204,-2685,-2663,-3157,-3395,-3310,-2982,-2802,107,1893,2471,260,221,228,277,199,265,184,122,109,-1875,-2302,-2541,-2692,-2737,-2886,-3442,-3117,-3244,-3506,-3,364,3164,447,219,246,240,212,207,173,134,105,-2044,-2368,-2626,-2768,-2799,-2851,-3268,-3140,-3796,-2677,-855,95,702,2262,294,309,277,235,218,208,156,129,-2050,-2312,-2330,-2846,-2840,-2957,-3396,-3632,-2729,-2147,-1855,20,2414,2244,925,271,350,187,162,216,151,130,-1939,-1803,-1677,-2823,-3055,-3036,-3187,-3342,-2813,-2735,-3592,-20,401,3628,2132,310,215,230,188,193,150,131,-2205,-1467,-1433,-2533,-2935,-3030,-2941,-2998,-2773,-2857,-3515,-1321,30,1154,460,1215,211,211,230,182,140,107,-2515,-2389,-1816,-1441,-2887,-3220,-2686,-2873,-1385,-2447,-2942,-1829,-3,1068,463,2018,247,180,180,131,112,97,-3009,-2394,-1849,-1479,-1874,-3108,-3153,-2845,-2128,-1926,-3076,-3910,25,925,717,3264,176,216,144,155,118,106,-3143,-3064,-2827,-1733,-1671,-2160,-3039,-3445,-3885,-1297,-3063,-3766,0,1644,2418,2551,276,147,153,135,91,111,-3289,-3103,-2880,-1941,-1489,-2731,-3214,-3234,-4218,-2821,-3291,-3252,24,1313,1900,2494,1442,172,113,115,113,91,-3548,-3160,-2352,-1622,-1694,-2795,-3254,-3374,-869,-2910,-4230,-3480,-6,1254,1543,1224,2506,211,118,107,91,85,-3625,-3722,-3062,-2424,-2023,-1421,-2326,-2627,-1307,-3336,-3235,-3536,255,1642,2148,193,2257,411,122,98,74,71,-3640,-3549,-3198,-3017,-2650,-1530,-1994,-3177,-1325,-3446,-3302,-4179,239,1808,1038,95,1801,1031,120,94,85,72,-3564,-3489,-3369,-3170,-3010,-1984,-1748,-3563,-418,-819,-2078,-2574,29,2135,1271,86,2016,282,133,96,68,54,-3445,-3401,-3450,-3250,-1622,-1621,-1510,-1839,49,120,-181,-75,17,398,166,230,3106,315,127,91,66,54,-3421,-3480,-3427,-3298,-2976,-2496,-1582,-95,437,3,-96,-31,1351,104,48,565,2250,2683,212,98,72,54,-3423,-3456,-3412,-3348,-3030,-2723,-32,738,842,689,-34,35,-97,250,20,207,260,17,3102,125,74,67,-3485,-3475,-3360,-3318,-3282,-1895,82,1750,-243,-126,241,150,-1410,-12,107,19,104,9,1670,194,81,84,-3684,-3494,-3224,-3084,-2867,-86,2603,-2,-2502,-544,-196,-1549,-2516,-71,274,107,1293,-82,22,1299,172,259,-3695,-3472,-3286,-3154,-2298,20,1590,-606,-2462,-1578,-661,-1856,-3053,-214,251,117,1881,-81,25,892,299,505],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
