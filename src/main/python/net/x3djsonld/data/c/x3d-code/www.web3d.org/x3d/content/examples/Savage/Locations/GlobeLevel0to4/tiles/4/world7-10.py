###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2968,-2331,-867,-3436,-71,-69,-3876,-4441,-4815,-4658,-4405,-4259,-4371,-4288,-3919,-2482,-1952,-3670,-3934,-3645,-3384,-2481,-3148,-3399,-3551,-3701,-2712,-1816,-4134,-4435,-4661,-4605,-4425,-4486,-4296,-4185,-3613,-2516,-388,-2963,-4074,-3618,-3543,-3080,-3317,-3389,-3702,-996,-3608,-1670,-4168,-4430,-4752,-4645,-4337,-4321,-4249,-4177,-3180,-2602,-25,-2072,-3478,-3636,-3880,-3132,-3416,-3499,-3789,-3896,-3988,-3650,-2210,-4414,-4219,-4759,-4366,-4060,-4117,-4036,-3095,-95,-57,-1582,-3430,-3924,-3489,-3451,-3489,-3707,-4041,-4031,-4380,-4330,-1400,-4440,-4499,-4517,-4177,-3988,-3868,-3849,-2835,-288,-196,-1739,-3409,-3927,-3464,-1911,-3688,-3836,-4025,-3864,-4348,-4493,-2050,-4067,-4521,-4209,-4091,-3465,-4047,-3703,-2312,-1082,-26,-2175,-3696,-3898,-3300,-2653,-3835,-3995,-11,-4328,-4557,-4788,-2062,-1744,-4471,-3839,-3983,-3497,-4165,-3275,-1909,-965,-2110,-2681,-3745,-3788,-3629,-3975,-3987,-3995,-4163,-3774,-4428,-4189,-2990,-2841,-4557,-3869,-4128,-3529,-3633,-2806,-1174,-1293,-2244,-2958,-3911,-3650,-3715,-3856,-4016,-4206,-3286,-3718,-4492,-4473,-4178,-4454,-5100,-4172,-4002,-3332,-3314,-2820,-1297,-2092,-2787,-3200,-3931,-3584,-3945,-4069,-4064,-4301,-4290,-3217,-4556,-3722,-4336,-4732,-3161,-3896,-3435,-3389,-1904,-2785,-1330,-3079,-3573,-3485,-3846,-3795,-3505,-3955,-4101,-4417,-2414,-4281,-4638,-3349,-4456,-4355,-2928,-3835,-3756,-3143,-2786,-1456,-2302,-3640,-3821,-3731,-4072,-3713,-3462,-4175,-4160,-4403,-4471,-4628,-4528,-2985,-4565,-4450,-1559,-3628,-3613,-2455,-2743,-1591,-3417,-3916,-3942,-3933,-4026,-3872,-3923,-3698,-4323,-4411,-4526,-4587,-4906,-3533,-4828,-4578,-1853,-3735,-3656,-2227,-778,-1068,-3908,-4054,-4055,-4013,-4109,-4072,-3778,-3658,-4283,-4431,-4549,-4682,-4938,-3744,-4858,-4738,-1485,-3271,-3263,-2971,-1428,-2012,-3916,-4065,-3989,-4084,-3609,-4190,-4351,-4421,-4304,-4496,-4605,-4713,-4866,-4303,-4975,-4833,-4352,-3284,-3325,-1051,-1004,-3627,-4087,-4057,-3727,-4202,-4384,-4013,-4314,-4254,-4334,-4563,-4648,-4767,-4902,-4964,-5090,-5039,-3476,-3050,-53,-91,-2052,-4022,-4121,-3941,-3371,-4193,-4064,-4090,-4040,-3767,-4366,-4644,-4706,-4806,-4942,-5028,-5102,-4781,-3651,-2057,-132,-47,-3246,-4069,-4141,-3575,-3649,-4372,-4287,-3907,-3894,-3749,-4339,-4651,-4755,-4842,-4935,-5061,-5100,-5072,-4077,-2427,-4,2,-3928,-3713,-4168,-3112,-4151,-4070,-4331,-4091,-3915,-3316,-4061,-4537,-4765,-4884,-4946,-5027,-5052,-5040,-4318,-3046,-2105,-3606,-4146,-4244,-4282,-3596,-4236,-3960,-4555,-4129,-3909,-3651,-3911,-4363,-4746,-4859,-4929,-5058,-5118,-5218,-4841,-4137,-3109,-4135,-4330,-4305,-4260,-4378,-4553,-4253,-4327,-4273,-3812,-3690,-3845,-4287,-4702,-4822,-4898,-5029,-5068,-4845,-4723,-4367,-4236,-4403,-4415,-4371,-4369,-4429,-4652,-4608,-4271,-3896,-3658,-3442,-3752,-4244,-4618,-4795,-4876,-4970,-5053,-4949,-4842,-4683,-4306,-4493,-4451,-4439,-4332,-4523,-4621,-4549,-4211,-4118,-4046,-3711,-3496,-4216,-4608,-4758,-4896,-5010,-5118,-5089,-4780,-4638,-4551,-4581,-4234,-4441,-4404,-4533,-4640,-4708,-4634,-3992,-3248,-3485,-3462,-4144,-4594,-4761,-4906,-5020,-5098,-5105,-4713,-4651,-4569,-4601,-4421,-4564,-4538,-4634,-4635,-4513,-4760,-4117,-3450,-2960],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
