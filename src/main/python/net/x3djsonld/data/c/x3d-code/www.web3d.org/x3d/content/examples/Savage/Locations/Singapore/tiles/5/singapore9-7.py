###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore9-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2908486746019459,103.69037723890314,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[6,5,5,5,5,5,5,4,2,1,2,2,2,2,2,2,2,2,2,2,2,1,-1,-3,-5,-6,-7,-7,-7,-7,-8,-8,-8,-9,-11,-12,-11,5,5,6,6,7,7,7,5,2,1,2,2,2,2,2,2,2,2,2,2,2,1,-1,-3,-6,-8,-9,-9,-10,-10,-11,-11,-12,-13,-15,-16,-14,4,5,7,8,9,10,9,8,5,3,2,2,3,3,3,3,3,3,2,2,2,1,-1,-5,-8,-11,-11,-11,-12,-13,-13,-14,-15,-16,-16,-16,-13,4,7,10,11,12,13,13,11,7,5,4,3,4,4,4,4,4,3,3,3,3,1,-1,-4,-10,-13,-13,-13,-14,-15,-15,-15,-17,-17,-16,-14,-11,4,8,12,14,15,16,16,13,9,6,6,5,5,5,5,5,4,4,4,4,3,2,0,-3,-10,-15,-15,-15,-16,-16,-17,-17,-17,-17,-15,-12,-9,5,10,14,16,17,17,17,13,9,8,8,7,7,6,6,5,5,5,5,4,4,4,3,0,-8,-13,-15,-16,-17,-17,-18,-18,-17,-15,-12,-9,-6,7,11,16,18,18,17,15,13,10,9,8,8,7,7,6,6,6,5,5,6,6,7,8,4,-3,-9,-14,-17,-17,-18,-18,-17,-15,-13,-10,-6,-4,9,12,16,18,18,16,14,12,11,9,8,8,8,8,7,7,6,6,6,7,8,10,11,9,2,-4,-12,-17,-18,-18,-17,-16,-13,-10,-7,-4,-1,8,11,14,16,17,16,14,12,11,9,8,8,8,8,7,7,7,8,8,9,10,11,12,11,8,1,-9,-17,-18,-17,-16,-14,-10,-7,-4,-1,0,7,9,11,12,14,13,12,11,11,10,10,10,9,9,10,9,9,9,10,11,12,12,13,14,17,16,7,2,3,5,4,4,5,4,1,0,1,7,7,7,7,7,7,7,8,10,11,13,13,13,13,13,13,13,13,13,13,13,13,13,18,31,42,49,54,59,60,55,48,40,29,15,4,1,6,5,4,3,2,2,2,5,10,14,17,19,18,18,17,17,16,15,15,14,13,13,16,25,46,65,83,97,105,107,99,89,76,60,41,24,17,6,4,3,2,1,1,1,5,11,17,23,24,24,22,21,20,18,17,15,14,13,16,24,37,58,78,96,109,117,120,117,112,104,95,84,71,57,5,4,2,1,1,1,2,6,12,19,26,28,27,26,24,22,19,17,16,14,14,19,31,47,68,87,101,112,119,123,124,124,123,121,119,112,95,5,4,2,1,1,2,4,8,13,19,25,28,29,28,25,23,20,17,15,14,15,22,36,52,72,90,104,115,121,125,127,128,128,128,127,123,113,5,3,2,1,2,4,7,10,14,18,22,25,29,28,26,23,20,17,15,14,16,24,38,54,75,92,107,118,123,127,127,128,128,128,127,125,122,3,2,2,3,5,8,11,13,14,15,18,21,25,27,27,24,18,15,15,14,15,22,37,54,76,95,111,121,125,127,128,128,127,127,126,125,124,2,2,3,5,8,12,15,14,12,13,14,17,21,25,28,25,18,14,15,15,13,18,33,52,79,100,115,125,127,128,128,128,127,125,124,123,122,3,4,6,9,12,14,14,12,10,10,11,13,17,21,25,24,19,17,17,16,12,14,23,44,84,110,121,127,128,128,127,127,126,125,124,121,112,4,5,8,12,15,14,12,10,8,8,9,10,13,17,21,23,21,20,19,16,11,10,14,37,86,118,124,127,128,128,127,125,124,124,123,116,99,5,6,8,11,13,12,10,8,7,7,7,8,10,13,17,18,18,17,15,13,9,9,16,36,75,103,116,124,127,128,126,124,124,122,114,102,83,6,6,6,8,10,9,8,8,7,6,6,6,8,10,13,14,13,12,10,8,7,10,20,35,57,79,101,117,124,127,125,123,122,117,102,85,67],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
