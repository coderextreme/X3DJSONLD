###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore11-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3083120993579338,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[22,22,23,25,27,31,36,38,40,43,46,41,36,32,29,27,26,24,20,21,25,29,34,39,43,46,44,41,36,32,30,29,29,29,28,27,23,24,25,27,29,33,37,39,41,42,45,40,34,29,26,26,26,25,21,22,24,29,34,39,45,47,46,42,36,30,27,26,26,26,25,24,25,26,27,29,29,31,33,35,37,36,35,33,31,29,26,25,25,25,23,24,25,28,32,37,42,45,44,41,36,31,27,24,23,23,23,23,26,28,30,30,30,30,30,31,33,31,27,28,30,28,25,25,25,25,25,26,26,28,30,33,37,39,39,37,33,30,26,23,22,21,22,23,27,29,31,30,29,29,29,30,31,28,25,26,28,27,25,25,26,26,26,26,27,27,27,28,29,30,30,29,28,26,23,21,20,19,21,22,27,29,31,30,30,29,29,29,30,28,25,26,27,27,25,26,28,28,27,27,27,26,25,25,23,22,23,22,23,23,21,19,18,18,20,23,25,27,29,30,32,32,31,30,29,28,27,28,29,29,29,29,30,30,28,27,25,25,25,23,20,19,20,20,22,22,21,19,18,19,22,25,24,26,28,31,34,34,33,31,29,29,29,30,32,32,32,32,32,31,28,26,24,24,24,23,20,19,21,22,23,23,21,19,19,21,25,28,23,26,29,31,33,34,36,33,31,31,32,33,33,33,33,33,32,30,27,25,24,23,23,23,23,23,25,26,25,23,22,21,21,22,27,32,24,28,31,31,32,34,36,34,32,34,35,34,33,33,34,33,32,30,27,25,24,23,23,23,25,26,29,30,27,24,23,22,22,23,29,34,28,30,33,32,30,32,32,33,33,34,36,35,34,34,35,35,35,32,28,26,24,24,23,24,26,28,32,33,29,25,24,23,23,23,28,33,33,33,34,32,29,29,28,30,33,34,34,35,35,35,35,36,37,34,30,27,26,26,25,25,26,29,33,33,30,26,24,23,23,24,27,31,34,34,34,31,28,27,25,27,30,30,30,31,33,33,33,34,34,32,28,28,28,28,28,27,27,29,31,32,29,27,27,27,26,25,26,28,33,33,32,30,28,25,23,25,26,25,25,27,30,31,32,31,31,29,27,28,30,31,30,29,28,28,30,29,28,27,30,30,29,27,26,26,32,31,30,29,27,25,22,23,24,24,24,26,28,29,31,31,30,30,29,30,32,33,33,31,29,29,30,30,28,28,30,33,34,34,29,26,32,30,29,28,27,24,21,22,23,24,24,25,27,28,30,30,32,32,31,32,35,35,34,32,30,30,31,31,29,29,30,33,39,42,33,27,31,29,27,27,27,24,21,22,25,25,26,27,27,28,30,32,34,33,31,31,33,34,33,32,31,31,31,32,31,30,31,33,37,39,34,28,30,27,25,26,27,24,21,23,26,27,28,28,28,29,30,33,36,34,30,29,31,31,31,31,31,31,31,32,32,32,32,31,32,32,31,29,30,28,26,26,27,23,19,23,26,28,30,29,28,29,30,32,33,32,29,29,29,30,30,30,31,31,31,31,32,33,30,29,28,27,26,24,31,29,27,27,27,23,18,22,26,28,31,30,27,28,29,29,28,29,29,29,29,30,28,29,30,30,30,30,32,32,29,26,25,23,21,18,32,31,30,30,29,24,17,21,26,28,30,28,25,25,25,25,25,27,28,30,31,30,28,27,27,27,28,29,30,30,27,24,22,21,19,18,34,33,33,33,32,26,18,21,25,26,28,25,22,21,20,22,23,26,29,31,32,31,28,25,23,22,24,26,28,28,25,23,21,20,20,20,33,33,33,33,32,26,19,21,23,25,27,24,21,20,20,22,24,27,29,31,32,31,28,25,22,21,23,25,26,27,26,24,23,21,22,22],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
