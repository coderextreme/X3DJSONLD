###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[31,32,38,44,45,46,41,37,39,42,42,43,43,43,49,58,59,57,53,48,44,42,40,36,34,33,34,35,35,33,32,36,41,46,50,49,49,31,34,40,47,48,49,43,39,39,41,43,45,45,46,52,61,63,62,57,51,47,44,41,36,35,37,38,39,39,36,35,38,41,45,48,49,49,32,36,43,50,50,50,45,41,39,39,42,47,48,51,57,64,64,62,57,52,47,44,41,38,38,41,43,43,42,38,36,37,40,44,47,48,48,33,38,44,51,51,50,47,45,40,35,40,47,52,57,61,65,63,58,54,50,46,42,41,40,42,46,48,47,45,39,36,36,38,43,47,48,48,33,37,43,48,49,49,48,47,41,35,39,45,51,58,62,64,62,56,52,49,45,42,40,41,44,48,50,49,46,41,37,36,38,43,48,48,48,32,35,39,44,46,47,48,48,43,37,39,41,47,54,58,62,60,55,51,48,45,42,40,41,43,47,49,50,47,43,39,38,38,44,49,49,51,33,36,38,42,45,48,50,52,47,41,40,40,46,52,56,60,58,54,51,47,45,43,43,44,45,48,49,50,48,44,40,39,39,45,50,52,55,35,37,39,42,47,51,55,58,52,45,43,42,46,51,55,58,57,54,51,47,46,46,47,49,50,49,50,50,49,45,41,39,39,46,52,56,59,37,39,41,45,50,55,59,63,57,49,46,43,46,51,55,59,58,56,53,49,48,49,52,54,55,52,51,51,50,46,42,40,40,46,52,57,61,39,41,45,49,54,60,64,68,62,54,49,43,47,53,58,62,62,62,58,52,51,53,56,59,59,56,54,53,51,46,42,40,40,45,50,56,61,44,45,49,53,60,66,71,75,68,58,51,44,46,52,58,64,67,69,64,56,54,56,58,61,62,59,56,55,51,45,41,40,40,44,49,55,60,52,51,54,58,67,75,80,84,74,62,52,43,44,47,56,66,72,75,69,59,55,57,58,61,63,61,59,55,50,44,39,38,39,42,47,53,58,60,60,62,64,74,82,87,90,80,68,57,45,43,44,53,67,75,79,73,62,57,57,58,61,63,63,60,57,51,45,40,38,38,41,46,51,56,68,71,72,74,81,87,91,94,86,77,64,50,45,42,51,66,75,80,75,64,58,56,57,60,62,62,62,59,54,48,43,41,39,41,45,49,52,75,79,81,83,88,93,95,97,90,83,70,56,48,42,50,64,73,80,76,66,60,57,57,59,61,63,63,61,58,51,46,43,41,43,45,48,50,79,85,88,92,96,99,99,98,92,84,74,61,54,46,52,62,71,79,76,67,62,61,61,61,62,65,65,63,60,54,49,47,45,46,48,49,50,83,91,96,100,102,103,100,97,90,82,73,63,56,49,52,59,68,76,74,66,62,63,63,62,62,65,66,65,63,58,54,51,49,49,50,50,52,86,97,102,108,107,107,98,90,83,75,68,60,55,49,51,56,64,72,70,62,60,61,62,61,62,65,66,67,66,63,59,54,51,51,51,52,55,95,107,114,121,118,115,101,88,78,70,64,58,54,49,51,54,60,67,66,60,58,59,60,61,62,64,66,69,69,66,63,58,53,52,52,53,56,112,121,132,143,136,129,110,91,79,68,63,58,55,51,52,53,57,62,62,58,58,58,60,62,63,65,66,70,71,68,65,60,55,53,51,53,57,125,135,147,159,149,140,117,96,82,70,65,61,58,54,53,52,54,58,58,57,57,58,60,63,64,65,66,70,71,68,65,60,55,52,51,53,56,133,149,155,162,152,143,121,101,88,77,72,68,63,58,54,51,51,53,54,55,56,59,61,63,64,65,66,69,69,67,63,58,53,52,51,50,51,139,157,159,162,153,144,125,107,96,86,80,74,68,62,57,52,50,51,53,54,57,60,62,64,65,66,67,68,66,64,60,57,53,54,53,51,50],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
