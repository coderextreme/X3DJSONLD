###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5867,-6138,-5912,-5479,-5737,-5854,-5796,-5800,-4141,-5008,-4851,-5137,-5198,-4834,-2101,-4502,-4928,-5130,-5036,-4629,-5045,-5397,-6192,-6053,-5904,-5583,-5849,-5475,-5682,-5645,-4582,-4566,-4658,-4021,-4347,-4226,-4653,-4598,-4758,-5125,-5277,-5241,-5110,-5211,-5909,-5954,-5819,-5756,-5749,-4751,-5583,-5475,-5443,-2428,-2993,-5459,-5142,-4489,-4808,-4899,-4553,-5166,-5425,-4428,-5232,-5260,-5641,-5902,-5751,-5298,-5533,-5010,-5585,-5582,-4980,-4865,-5175,-5400,-4820,-4884,-4740,-4756,-5327,-5263,-5271,-5154,-5205,-5315,-5711,-5608,-4923,-4950,-5335,-5439,-5534,-4479,-5119,-5678,-5439,-5277,-5234,-4656,-4631,-5145,-5241,-5493,-5425,-5308,-5217,-5505,-5071,-5820,-4144,-4593,-5135,-5568,-5459,-5198,-5335,-5289,-5451,-5508,-5283,-4925,-4976,-5395,-5481,-5459,-5562,-5242,-5395,-5543,-6418,-5649,-4684,-4791,-5166,-5523,-5445,-5582,-5360,-5531,-5565,-2658,-5020,-5047,-5455,-5354,-5374,-5706,-5408,-5301,-4311,-5613,-5710,-5545,-4876,-4129,-5314,-5316,-5692,-5437,-5667,-5806,-5926,-4750,-4317,-4758,-5497,-5411,-5603,-5496,-5381,-5446,-5533,-5506,-5813,-5375,-4931,-5168,-5583,-5634,-5496,-5781,-5819,-5971,-5775,-5423,-4633,-5301,-5523,-5442,-5596,-5708,-5674,-5516,-5469,-5530,-5632,-5469,-5352,-5293,-5624,-5800,-5821,-5774,-5987,-5235,-5347,-3745,-5346,-1882,-5200,-5741,-5664,-5707,-5642,-5653,-5593,-5648,-5760,-5663,-5064,-5286,-5559,-5551,-5588,-5811,-5921,-5783,-5408,-4948,-5363,-4590,-5529,-5534,-5619,-5612,-5740,-5644,-5600,-5609,-5393,-5539,-4953,-5188,-5640,-5562,-5693,-5874,-3795,-5729,-5320,-2513,-3924,-5376,-5492,-5588,-5621,-5426,-5601,-5597,-5759,-5529,-5381,-4962,-4766,-5608,-5530,-2313,-5537,-5744,-4583,-3854,-1935,-5214,-5526,-5325,-5382,-5542,-5722,-5595,-5622,-5618,-5670,-5452,-5121,-4843,-5022,-5084,-3163,-5479,-5378,-5794,-5063,-4778,-5177,-4406,-5308,-5241,-5427,-5349,-5397,-5439,-5687,-5554,-5535,-5217,-5110,-4879,-5028,-4969,-5069,-5277,-5491,-5244,-5048,-5235,-4892,-3265,-5236,-5374,-5574,-5840,-3560,-5548,-5592,-5509,-5379,-5288,-4893,-5298,-4729,-2498,-4393,-3867,-5012,-5219,-5203,-5262,-5139,-5236,-5280,-5354,-5455,-5579,-5373,-5534,-5490,-5427,-5061,-4492,-4849,-4921,-3985,-3532,-2246,-3330,-5047,-5068,-4842,-5072,-4917,-5157,-5351,-5443,-5521,-5423,-5576,-5509,-5403,-5155,-4880,-4650,-4034,-2731,-3587,-3057,-2032,-1499,-3827,-5093,-4572,-5043,-4770,-5176,-5228,-5491,-5600,-5436,-5499,-5485,-5271,-4918,-4518,-4270,-4899,-3274,-4828,-5051,-4593,-3395,-2501,-4945,-2514,-3953,-4869,-4904,-5380,-5525,-5488,-5490,-5400,-5283,-5118,-4869,-1988,-4445,-4706,-4793,-4821,-5098,-4937,-4827,-2427,-3919,-2744,-4857,-1587,-5113,-5339,-5413,-5362,-5411,-5085,-5140,-4897,-4682,-4276,-3076,-3585,-4145,-4895,-4882,-5390,-5247,-3907,-3169,-2699,-4854,-4939,-2880,-5157,-5226,-4938,-5359,-5154,-4986,-4833,-4105,-4325,-4030,-3892,-5081,-5025,-5288,-5486,-5418,-5378,-3497,-3997,-4307,-5133,-4954,-5063,-5119,-4967,-4904,-4836,-4699,-4627,-4507,-4437,-4326,-4513,-4892,-5198,-5535,-5583,-5399,-5342,-4722,-2900,-3950,-4920,-4869,-4915,-4953,-5007,-4914,-4772,-4784,-4691,-4641,-4136,-2445,-4773,-5075,-4993,-5551,-5528,-5390,-5092,-4834,-3240,-3048,-5077,-4837,-4991,-4909,-4867,-4872,-4693,-4671,-4672,-4674,-4121,-1896],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
