###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[37,35,33,32,31,30,30,33,36,36,35,32,30,31,34,37,41,43,44,47,50,55,59,63,65,65,64,62,59,56,52,50,48,47,44,41,39,39,37,36,33,32,31,30,32,34,33,32,30,29,32,36,39,42,43,44,46,49,53,58,61,61,60,57,57,57,55,53,50,47,44,42,41,39,41,39,38,35,33,32,31,31,33,31,29,28,28,33,38,41,43,43,42,44,47,50,55,56,55,53,49,50,53,55,54,51,48,45,44,44,42,42,41,40,37,34,33,31,31,31,29,27,27,28,33,40,42,43,42,40,42,45,48,52,53,50,47,44,45,51,54,54,52,48,46,47,47,45,42,41,40,38,36,33,31,30,29,28,27,27,28,33,39,40,40,40,38,40,43,47,50,50,45,42,41,42,49,52,52,50,48,47,49,51,49,41,40,39,37,35,33,30,29,28,28,27,28,29,33,37,39,38,38,38,39,42,46,49,47,42,38,37,39,45,48,48,48,46,47,51,53,51,38,37,36,34,32,31,30,28,27,28,30,30,30,33,36,36,36,36,37,40,43,45,47,44,40,36,35,36,40,43,43,44,45,47,51,53,50,35,34,33,32,31,30,29,28,27,28,30,30,29,30,33,34,34,35,36,39,42,44,44,42,38,34,33,33,36,38,38,40,42,44,48,49,48,34,33,32,31,30,29,28,28,28,28,29,28,27,28,30,31,32,33,35,38,40,42,41,39,36,33,31,31,32,33,34,35,37,39,41,43,43,34,33,32,31,29,28,27,27,27,27,28,26,25,26,28,29,31,32,33,36,38,39,38,36,33,31,31,31,30,30,32,33,34,34,35,37,39,36,35,33,31,28,27,26,26,26,27,27,26,24,26,28,29,30,31,32,34,36,37,36,34,31,29,30,30,31,31,32,33,32,31,31,33,38,36,35,33,30,27,26,24,25,27,27,27,26,24,25,27,29,29,30,31,33,34,34,34,31,28,28,29,30,31,31,32,32,30,29,29,30,37,35,34,32,27,23,22,22,25,28,28,28,26,25,25,27,27,28,29,30,31,31,31,31,29,27,27,29,30,31,31,31,30,29,27,28,30,36,34,32,30,26,21,20,19,23,27,28,27,26,25,25,26,26,26,26,27,27,27,27,27,26,25,26,28,30,30,30,30,29,28,26,27,28,33,32,31,29,26,22,20,18,21,23,25,25,25,25,25,24,23,22,22,22,23,24,24,22,22,22,23,26,28,27,27,28,28,27,25,24,24,26,30,30,28,26,24,20,18,19,21,22,22,24,24,24,24,22,20,20,20,21,21,20,18,18,19,22,24,25,25,26,27,27,26,24,22,21,22,30,29,28,26,24,22,20,21,21,20,19,21,23,24,24,23,21,22,22,22,20,19,17,17,18,20,22,23,24,24,26,25,24,22,22,22,22,30,28,27,25,24,23,22,22,21,19,17,19,23,23,24,24,23,23,23,22,20,18,16,16,18,19,21,22,23,24,24,24,23,21,21,22,22,29,27,26,24,23,24,25,24,23,21,20,21,21,23,25,25,24,24,24,22,20,18,17,18,19,21,21,22,23,24,23,22,22,22,22,21,22,29,27,26,24,22,24,26,26,25,24,23,22,20,22,25,25,24,24,24,22,19,18,17,18,20,21,21,23,24,24,22,21,21,22,21,20,21,32,29,27,24,22,23,25,26,26,26,25,23,21,21,23,23,23,22,21,19,17,16,16,17,18,20,22,23,26,26,23,22,21,20,18,18,19,33,31,27,24,21,22,24,26,27,27,27,25,22,22,21,22,23,21,19,17,15,15,14,15,16,19,22,24,27,27,24,22,20,19,16,15,17,32,30,28,25,23,22,21,23,25,25,26,25,24,23,23,24,24,22,20,17,15,13,13,14,15,18,22,25,26,26,24,21,18,16,14,13,15],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
