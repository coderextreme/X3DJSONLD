###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore7-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.273385249845958,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[7,6,6,7,9,9,10,9,7,8,10,10,10,7,5,6,7,9,10,11,13,14,14,15,16,16,16,16,17,18,18,17,16,14,12,11,8,7,7,8,8,9,10,9,7,7,9,10,11,10,8,8,9,11,12,15,19,21,21,21,19,17,16,15,17,18,17,16,15,14,13,14,9,9,9,9,9,9,10,9,7,8,10,12,14,12,10,10,11,12,13,18,25,28,28,27,23,19,15,14,15,17,15,13,13,13,16,18,9,9,9,9,9,10,10,9,9,11,13,14,14,13,11,12,13,15,17,24,33,37,39,34,27,21,18,17,18,18,16,14,13,14,20,25,7,8,8,8,9,9,10,10,11,14,17,16,15,14,12,13,16,19,22,31,43,49,50,43,30,23,23,22,23,22,18,15,15,17,25,32,6,7,8,8,9,9,10,12,14,15,17,16,15,14,14,16,19,21,24,33,47,53,54,47,35,30,33,34,29,25,20,17,16,17,26,35,6,7,9,9,9,9,11,14,18,16,16,15,15,15,16,19,22,23,24,33,47,53,54,49,41,41,48,48,36,26,21,17,16,17,26,34,6,8,9,9,8,9,11,15,19,17,15,14,13,14,16,19,23,24,25,31,43,47,49,46,43,45,55,54,38,25,20,17,17,18,24,29,7,8,10,9,8,9,12,15,19,18,15,13,10,12,14,18,23,25,26,30,35,38,41,41,40,44,55,54,37,23,18,16,18,19,20,22,8,9,10,9,8,11,14,19,23,21,17,14,10,12,16,20,24,25,26,26,27,29,33,34,35,41,51,52,40,29,21,17,19,20,19,19,8,9,11,11,11,14,18,24,31,27,21,16,11,15,21,24,26,26,25,22,19,20,25,28,29,34,44,49,47,41,29,21,21,21,21,22,9,9,11,12,14,18,22,29,37,33,27,20,14,15,20,22,23,22,21,19,16,18,22,25,26,31,38,43,46,43,31,23,23,24,25,26,9,9,10,14,18,22,27,34,41,39,34,25,16,13,13,14,15,16,16,17,18,21,25,27,27,29,32,35,36,34,27,23,26,29,31,33,10,10,11,17,24,29,34,39,45,42,39,28,16,11,9,10,11,13,14,18,22,26,29,30,29,29,30,30,30,28,25,24,29,33,36,39,12,14,16,25,32,37,42,44,48,44,41,27,13,11,11,13,14,16,19,23,29,33,35,35,32,31,32,33,31,30,29,29,32,37,40,45,14,18,22,32,41,44,47,47,47,42,38,25,12,12,15,18,19,22,24,29,34,37,40,39,35,34,35,34,33,31,32,33,35,38,43,49,18,23,27,38,47,49,51,46,40,35,30,21,13,16,22,26,28,30,31,34,36,39,41,41,40,38,37,35,33,32,33,34,36,39,45,51,22,29,35,45,53,53,52,43,33,27,21,17,14,20,29,34,37,37,37,37,38,40,42,42,42,41,39,36,34,32,34,36,38,40,45,51,27,38,47,53,59,55,50,39,27,21,15,13,13,22,34,39,42,42,40,40,40,41,42,43,42,42,42,41,38,36,37,39,41,43,45,48,34,47,59,61,63,56,48,36,23,17,11,12,12,23,35,41,44,44,43,42,42,42,42,42,40,41,43,44,41,39,40,41,43,44,44,44,44,55,65,64,62,54,44,35,25,18,12,13,14,22,32,37,42,43,43,43,43,42,42,41,39,40,43,44,41,40,41,42,43,42,41,39,53,61,68,64,59,50,39,33,27,21,14,15,17,22,29,34,39,42,44,44,44,43,42,40,38,39,42,44,41,40,41,42,41,39,37,36],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
