###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-19.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.86273364845137,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[9,8,8,8,9,12,15,18,21,24,26,23,17,15,16,18,22,25,27,24,18,13,8,6,7,8,10,11,13,14,14,14,14,15,14,14,12,10,9,8,8,10,12,15,19,22,25,27,25,20,18,18,20,22,24,26,24,17,12,8,6,6,8,9,10,11,12,12,12,13,14,14,14,13,12,11,10,9,10,13,17,21,24,27,28,25,21,21,21,22,24,25,27,23,15,10,6,5,6,7,9,10,10,10,10,10,12,13,13,14,13,13,12,11,10,10,13,16,21,25,28,28,27,24,24,25,26,26,26,27,23,15,10,6,5,5,6,8,9,10,10,10,10,12,13,13,14,13,15,13,12,10,10,12,15,20,25,28,29,29,27,28,29,29,29,29,27,22,14,9,6,5,5,6,7,8,10,10,10,11,12,13,13,13,12,16,14,13,11,10,12,16,21,26,28,29,29,28,28,29,28,27,26,24,19,13,9,7,5,5,6,7,8,10,11,11,12,13,14,14,14,13,16,15,14,12,12,14,17,22,27,28,29,28,27,26,26,25,23,21,20,17,12,9,7,6,6,7,8,9,10,11,12,13,15,16,16,16,14,16,15,15,15,14,16,18,22,27,28,28,27,25,24,23,21,19,17,15,13,11,9,8,7,7,8,8,9,10,11,12,13,14,15,15,14,13,15,16,16,16,16,17,19,23,27,27,26,25,23,22,20,18,15,13,11,10,8,8,8,8,8,9,9,10,11,11,12,13,12,12,12,11,10,15,17,18,18,18,18,19,23,27,28,27,26,24,22,20,18,15,13,10,8,7,7,8,9,10,10,10,10,11,12,12,11,10,10,10,9,8,15,18,20,21,21,20,19,23,26,28,29,28,28,26,23,20,18,15,12,9,8,8,9,10,11,12,11,11,11,11,11,10,9,9,9,9,8,16,19,21,23,24,23,22,24,27,29,30,30,30,28,25,22,19,16,13,10,9,9,9,11,12,13,12,12,12,11,11,10,9,9,9,9,9,18,20,23,25,27,27,27,27,28,29,30,30,31,28,25,22,20,17,14,11,10,10,10,11,13,13,12,12,12,12,11,11,10,10,11,11,11,20,22,24,28,32,33,32,31,30,29,30,30,30,28,25,22,20,17,14,12,11,11,11,12,14,14,13,13,12,12,12,11,11,11,12,12,12,22,23,27,32,36,38,38,35,31,30,29,28,27,26,24,22,19,17,14,12,12,12,12,13,14,15,13,12,11,10,11,12,12,12,12,13,12,24,25,28,34,40,43,43,39,34,30,28,27,26,25,23,21,19,17,14,13,13,13,13,13,15,15,13,11,10,9,10,11,12,13,13,13,13,24,25,28,35,42,46,48,43,36,31,29,27,26,25,23,21,18,16,13,12,12,12,12,13,15,15,13,11,9,9,10,11,13,13,13,14,14,24,25,28,35,43,48,50,45,37,33,30,28,26,24,22,20,18,15,13,12,11,11,11,12,14,14,13,11,9,9,10,11,13,14,14,14,15,25,26,29,35,42,47,48,43,36,32,29,27,25,23,21,19,17,16,15,13,12,11,11,11,13,13,11,10,9,9,10,11,13,14,14,14,15,25,26,29,34,40,44,45,41,34,30,28,26,24,22,20,18,16,16,15,14,12,11,11,11,11,11,10,9,8,8,9,11,13,14,14,14,15,24,25,28,32,36,39,40,37,32,30,28,26,24,22,19,17,15,15,15,14,12,11,10,9,9,9,9,9,8,8,9,11,13,15,15,16,16,23,24,26,29,32,35,36,34,31,29,27,25,23,20,17,15,14,13,14,13,12,11,9,8,7,7,8,8,8,8,9,11,14,16,17,17,17,23,23,24,27,29,32,33,33,30,28,26,24,21,19,16,14,12,12,12,13,12,11,9,8,6,6,7,8,8,9,10,12,15,17,17,18,17],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
