###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore23-30.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4130926478938615,104.02072702387058,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[13,15,16,19,21,21,20,19,18,16,14,13,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,19,22,25,28,27,26,23,20,18,16,15,15,15,14,13,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,19,24,29,32,35,33,30,26,22,20,19,18,17,15,14,13,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,21,30,36,39,40,37,33,28,23,22,22,20,19,16,13,13,13,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,24,32,39,40,40,37,33,29,24,24,24,22,20,16,13,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,25,33,39,39,38,36,32,28,25,26,26,24,21,17,13,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,23,32,38,38,36,35,32,30,28,29,29,25,21,17,13,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,20,29,36,35,34,33,34,33,32,33,33,27,21,17,13,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,19,26,32,32,32,33,34,34,35,35,34,28,21,17,14,13,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,17,22,27,30,32,33,34,35,36,35,34,27,20,17,16,14,13,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,16,21,25,28,30,31,32,34,35,33,30,24,18,16,15,14,13,13,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,16,19,23,25,27,28,29,31,33,29,25,20,15,14,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,15,18,20,22,24,25,26,27,29,25,20,16,13,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,15,17,18,19,20,21,22,23,24,20,15,13,11,10,10,9,9,9,10,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,15,16,18,20,20,20,20,20,20,17,12,10,9,8,8,8,7,8,8,9,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,15,17,19,21,22,21,20,19,19,16,12,9,6,6,6,6,6,6,6,7,8,10,11,11,12,12,12,12,12,12,12,12,12,12,11,11,15,17,19,22,23,21,19,18,18,15,12,8,5,5,5,5,5,5,5,5,6,8,10,11,11,12,12,12,12,12,12,12,12,12,11,11,13,15,17,19,21,20,18,18,17,14,11,9,6,6,5,4,4,5,5,5,5,6,7,9,11,11,12,12,12,12,12,12,12,12,12,12,13,14,15,17,19,19,18,18,17,14,11,9,7,6,4,4,4,4,4,4,4,4,5,7,10,11,11,12,12,12,12,12,12,12,12,12,14,13,13,15,17,17,18,18,17,15,12,10,7,6,5,5,4,4,4,4,4,4,4,5,7,9,11,11,12,12,12,12,12,12,12,12,14,13,12,13,15,16,18,18,18,16,14,11,8,6,5,5,4,4,4,4,4,4,4,4,5,7,10,11,11,12,12,12,12,12,12,12,13,13,13,13,13,15,16,17,17,17,16,13,10,7,5,5,4,4,4,4,4,4,4,4,4,5,7,9,11,11,12,12,12,12,12,12,13,13,13,13,12,13,15,16,17,17,17,15,12,9,6,5,4,4,4,4,4,4,4,4,4,4,5,7,10,11,11,12,12,12,12,12],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
