###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-27.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.97763792148352,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[12,15,18,18,18,22,25,25,25,23,22,21,21,20,18,16,15,15,17,16,16,15,14,14,14,14,13,11,9,8,8,8,8,8,6,5,6,16,19,22,23,23,26,29,28,26,24,22,22,22,23,22,20,17,17,17,16,16,15,15,16,16,16,14,12,11,9,9,9,10,9,7,6,6,22,24,26,28,30,33,34,31,27,25,23,24,25,26,28,24,21,18,18,16,15,16,17,18,19,19,16,13,12,11,11,12,11,11,9,7,7,25,26,28,31,35,37,38,35,31,29,26,26,28,29,31,28,25,22,19,17,15,16,18,19,20,19,16,13,13,12,13,13,13,12,10,8,8,25,26,27,32,36,39,42,40,37,33,29,29,30,32,34,32,29,25,21,18,17,17,18,19,19,18,16,14,13,13,14,14,14,13,11,9,9,24,25,26,30,34,39,45,43,41,36,31,31,32,34,36,36,33,28,23,20,18,18,18,19,19,18,16,14,14,13,14,13,13,12,10,9,10,22,23,23,27,30,37,45,44,43,37,31,31,34,37,39,39,37,32,26,22,20,19,19,19,19,18,16,14,13,12,13,12,11,9,9,9,9,20,20,19,23,26,34,42,42,41,36,30,30,33,36,39,39,38,33,27,22,20,19,19,18,18,17,15,14,12,11,11,11,9,8,8,8,9,19,18,16,19,22,29,35,36,36,32,28,28,29,32,36,37,37,33,26,22,19,18,17,17,16,15,14,12,11,9,9,9,8,8,8,8,8,17,15,13,16,19,23,28,29,30,28,26,25,25,29,32,33,33,30,24,21,19,17,16,15,14,13,12,11,9,9,9,8,8,7,7,8,8,13,12,10,13,15,19,22,23,23,23,24,24,24,25,27,27,26,24,21,19,17,16,16,14,12,10,9,8,9,10,10,9,7,6,7,8,8,9,8,8,10,12,15,17,17,17,19,21,21,22,22,23,21,19,18,17,16,15,14,15,13,10,9,8,8,9,10,11,12,8,6,7,7,8,3,5,7,8,9,11,13,12,12,15,18,19,20,20,20,17,14,13,13,13,12,12,13,12,10,9,8,8,9,10,13,15,11,8,7,7,7,0,3,7,7,7,9,10,9,9,12,15,17,19,18,17,13,9,8,10,10,11,11,12,11,10,9,8,8,9,11,14,17,14,11,8,7,7,1,4,7,8,8,8,8,9,10,12,15,16,18,16,13,8,3,3,7,9,10,11,11,11,10,9,9,9,10,11,13,15,16,15,11,9,8,3,5,6,7,8,8,8,9,10,12,14,15,15,13,9,4,0,0,3,6,9,10,10,10,10,9,9,9,10,11,13,14,16,17,14,12,9,5,6,6,7,8,8,8,8,9,11,13,13,11,7,3,0,-1,-1,0,2,6,8,9,10,10,9,9,9,10,11,13,14,15,16,16,15,12,6,6,6,7,7,8,8,8,8,10,12,10,7,3,0,-2,-2,-2,-1,0,3,6,8,9,9,9,9,9,10,11,13,14,15,16,17,18,15,6,6,6,7,7,7,8,8,8,8,9,5,2,0,-1,-2,-2,-2,-1,-1,0,2,5,7,8,9,9,9,10,11,12,13,15,16,17,17,16,6,6,6,7,7,7,7,8,7,7,6,2,-1,-2,-2,-2,-2,-2,-2,-2,-1,0,2,5,7,8,8,9,10,11,12,13,15,16,16,17,17,6,6,6,7,7,7,7,7,7,6,5,1,-1,-2,-2,-2,-2,-2,-2,-2,-1,-1,0,1,4,6,7,9,10,11,12,13,14,15,16,17,17,6,6,6,6,7,7,7,7,7,6,4,1,0,-1,-2,-2,-2,-2,-2,-2,-2,-2,-1,0,1,4,6,8,10,11,12,13,14,15,16,17,17,6,6,6,6,6,6,7,7,7,6,6,3,0,0,-1,-2,-2,-2,-2,-2,-2,-2,-1,-1,0,1,4,6,9,11,12,13,14,15,16,16,17],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
