###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1435,-1690,-2521,-3503,-3979,-4139,-4011,-4784,-3854,-2987,-3011,-2745,-4365,-3977,-4697,-5011,-4794,-4592,-4661,-4560,-4600,-4512,-1691,-1172,-2164,-3626,-4316,-4290,-3942,-4666,-4123,-2609,-3166,-2095,-4255,-4295,-4818,-4978,-4817,-4487,-4555,-4644,-4549,-4652,-1017,-1143,-2530,-3545,-4051,-4206,-4130,-4436,-4866,-3695,-3801,-2678,-2598,-4952,-5031,-4986,-5032,-4676,-4754,-4618,-4544,-4665,-810,-1282,-2488,-3464,-3943,-4214,-4182,-4715,-4929,-4785,-4270,-2875,-3600,-5544,-3464,-5015,-5196,-4479,-4935,-4800,-4915,-4697,-954,-1357,-2686,-3375,-3685,-3974,-4329,-4532,-4924,-4798,-4732,-2592,-3492,-4586,-4364,-5242,-4680,-4619,-4799,-4778,-5004,-4649,-1586,-1870,-2683,-3452,-3682,-3771,-3793,-4350,-4453,-5008,-3897,-3875,-2412,-3831,-3664,-5244,-4533,-4610,-4725,-4541,-4486,-4241,-2064,-1840,-2694,-3696,-4171,-4464,-4664,-4688,-4558,-4967,-4087,-4517,-4250,-4664,-3795,-4115,-5364,-5008,-4580,-5005,-4893,-4401,-2290,-2195,-2276,-3744,-4567,-4831,-4865,-4894,-4906,-4503,-4312,-4574,-4640,-1787,-3294,-3899,-4982,-4720,-4792,-4713,-5097,-4663,-2451,-1998,-1779,-2889,-4486,-4730,-4944,-4818,-4841,-4026,-4020,-4565,-3980,-3028,-3813,-3837,-4240,-5151,-4820,-4532,-4570,-4933,-1908,-2408,-2002,-3169,-4410,-4616,-4807,-5022,-4560,-4488,-4248,-4589,-3971,-3684,-3458,-3493,-3373,-4092,-4976,-4844,-4594,-4485,-2511,-2613,-2367,-3452,-3415,-3756,-4769,-5059,-4994,-4585,-4685,-4709,-4941,-4284,-4210,-2352,-3769,-4301,-4895,-4458,-4395,-4416,-2026,-2731,-2739,-3013,-2635,-4575,-4873,-4990,-4801,-4775,-4989,-4925,-4842,-5390,-4386,-3919,-2809,-3933,-4551,-4498,-4565,-4609,-2615,-2911,-3144,-2897,-2399,-4704,-5086,-5077,-5012,-5034,-4957,-5060,-4784,-4737,-4620,-3767,-2736,-4062,-4512,-3758,-4895,-3720,-3530,-2239,-2021,-2668,-2220,-4699,-5141,-5194,-5260,-5157,-5005,-5005,-5337,-4913,-4767,-4514,-4380,-3208,-4249,-4242,-3264,-4378,-3460,-1912,-1519,-2505,-2947,-5098,-5257,-5302,-5343,-5283,-5146,-5124,-5264,-5337,-4603,-5354,-3438,-4026,-3829,-2660,-5059,-3286,-3295,-1191,-1491,-2037,-4021,-5051,-5312,-5364,-5354,-5169,-5086,-4927,-5179,-5593,-4721,-5063,-4658,-4623,-2795,-4292,-3250,-4018,-3026,-1346,-2040,-2550,-4614,-5024,-5284,-5290,-5359,-5356,-5176,-5124,-5247,-5337,-5377,-5321,-5763,-4420,-4330,-4242,-4031,-3903,-2313,-111,-1732,-2911,-4644,-4980,-5205,-5206,-5289,-5285,-5110,-5223,-5244,-5230,-5239,-5148,-5046,-4807,-4868,-4508,-4465,-3997,-1566,33,-22,-2732,-4636,-4930,-5117,-5126,-5186,-5102,-5333,-5047,-5137,-5297,-5189,-4999,-5162,-4629,-4709,-4604,-4115,-4476,-8,158,106,-804,-4446,-4860,-4999,-5034,-5034,-5009,-4937,-4937,-4922,-5185,-4912,-5040,-4579,-4296,-4889,-4405,-3896,-3929,173,299,342,-3,-4236,-4772,-4869,-4774,-5093,-4673,-4829,-4666,-4964,-4981,-4905,-4824,-4531,-4943,-4183,-3834,-4141,-4242,251,456,284,11,-3930,-4477,-4882,-5003,-4966,-4613,-4340,-4627,-4352,-4918,-5016,-4769,-4543,-4418,-4106,-4484,-4020,-4047,262,489,1082,56,-3507,-3609,-4254,-4989,-4526,-4574,-4051,-4518,-4465,-4765,-4449,-4654,-3997,-4493,-4000,-4250,-3925,-3900,268,424,1345,50,-3582,-3787,-4223,-5014,-4521,-4403,-4218,-4414,-4485,-4820,-4584,-4323,-3914,-4394,-4047,-3763,-4010,-4021],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
