###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world13-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(56.20833769188965,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3449,-3727,-3581,-3449,-3621,-3186,-2868,-2828,-2973,-1814,-2278,-2680,-2673,-2974,-3102,-3083,-3220,-3574,-3153,-3482,-3411,-3759,-3322,-3426,-3352,-3330,-3214,-2932,-2801,-3074,-2945,-1850,-2099,-2261,-2834,-2802,-3001,-3080,-2875,-3223,-3343,-2923,-3229,-3328,-3535,-3487,-3273,-3487,-3233,-2989,-3051,-2752,-2793,-2044,-2091,-2665,-2669,-2814,-2961,-3122,-2952,-3359,-3359,-2892,-2966,-3005,-3321,-3346,-3384,-3369,-3218,-3074,-3007,-2862,-2497,-2071,-1418,-2247,-2534,-2493,-2762,-3016,-2903,-3014,-3326,-2902,-2046,-2078,-3398,-3306,-3409,-3597,-3264,-3418,-3329,-2740,-2438,-1995,-1331,-1977,-2166,-2587,-2749,-2710,-2772,-2834,-3286,-3263,-2394,-2287,-3515,-3503,-3314,-3303,-3354,-3064,-2954,-2558,-2328,-2264,-1666,-1668,-2203,-2664,-2749,-2940,-2816,-2814,-2905,-3145,-3268,-2590,-3586,-3562,-3478,-3347,-3104,-3147,-3082,-2602,-2625,-2468,-1398,-2247,-1307,-2370,-2321,-2550,-2827,-2774,-2740,-2847,-3013,-3201,-3066,-3355,-3409,-3369,-3249,-3288,-3211,-3242,-2738,-2511,-2327,-1582,-1603,-2048,-2196,-2468,-2295,-2681,-2780,-2800,-2928,-3018,-2109,-2780,-3137,-3119,-3258,-3186,-2926,-2665,-2545,-2331,-2364,-1639,-1605,-1578,-2399,-2198,-2377,-2527,-2831,-2799,-2965,-3093,-2341,-1638,-2252,-2688,-3049,-3103,-3229,-3236,-2840,-2699,-2695,-2310,-1770,-1436,-1659,-2339,-2116,-2206,-2553,-2664,-2805,-2922,-2264,-2033,-1779,-2276,-2746,-3047,-3099,-3141,-3020,-2619,-2364,-2287,-1934,-1709,-1418,-1804,-1958,-2406,-2495,-2479,-2579,-2678,-128,-573,-195,-1755,-2283,-2781,-2960,-3135,-3098,-2730,-2649,-2688,-2306,-1823,-1297,-1397,-1871,-1935,-2398,-2453,-2467,-2332,-3,360,30,-189,-2039,-2445,-2794,-3085,-3051,-3050,-2956,-2688,-2280,-1906,-1458,-978,-1430,-1924,-2230,-2302,-2202,-2423,140,15,9,-235,-2041,-2429,-2789,-2961,-3027,-3046,-2906,-2497,-2424,-2231,-1707,-1506,-1350,-1639,-2168,-2131,-2083,-2126,28,1921,524,-183,-1743,-2236,-2610,-2774,-2906,-2924,-2965,-2826,-2495,-2403,-1900,-1588,-943,-1596,-1575,-1839,-1867,-1917,1456,2139,1218,-3,-476,-2035,-2321,-2556,-2738,-2970,-2959,-2871,-2443,-2391,-2081,-1715,-1536,-794,-1237,-1488,-1658,-1790,2330,2379,1811,-1,-365,-1232,-2005,-2426,-2584,-2774,-2937,-2909,-2527,-2489,-2136,-1920,-1587,-1474,-922,-1392,-1426,-1577,2436,2166,1801,-1,-325,-1499,-2151,-2235,-2353,-2661,-2805,-2927,-2831,-2370,-2296,-1921,-1549,-1503,-829,-829,-1280,-1189,2623,2540,1739,718,-82,-1096,-1987,-1881,-2358,-2475,-2704,-2839,-2908,-2599,-2108,-1886,-1796,-1397,-1181,-363,-500,-919,2636,2776,2453,1238,1,-407,-225,-216,-1788,-2274,-2420,-2681,-2785,-2634,-2248,-1866,-1525,-1158,-366,-344,-148,-175,2591,2757,2542,1985,838,-291,-354,-523,-409,-1552,-2039,-2273,-2630,-2647,-2232,-1691,-1285,-819,-320,-200,-142,-94,2590,2642,2514,1952,1021,-46,-536,-569,-669,-325,-1377,-1618,-2257,-2363,-2345,-1498,-1102,-458,-259,-254,-149,-82,2588,2591,2289,1714,530,2,-281,-419,-102,-172,-369,-1090,-1689,-1802,-1728,-1584,-962,-300,-68,-115,-37,-4,2587,2585,2288,1700,514,104,-324,-488,-41,-118,-349,-855,-1652,-1670,-1545,-1561,-1022,-247,-154,-126,-24,-3],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
