###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    meta(content='One.x3d',name='title'),
    meta(content='3D Hull Number',name='description'),
    meta(content='Patrick Sullivan',name='creator'),
    meta(content='20 February 2006',name='created'),
    meta(content='14 January 2014',name='modified'),
    meta(content='1.0',name='version'),
    meta(content='Hull Numbers, ship markings',name='subject'),
    meta(content='https://savage.nps.edu/Savage/ModelDetailing/HullNumbers/One.x3d',name='identifier'),
    meta(content='../../license.html',name='license')]),
  Scene=Scene(
    children=[
    Group(DEF='One',
      children=[
      Transform(DEF='dad_HullNumber1_copy12',
        children=[
        Shape(DEF='HullNumber1_copy12',
          appearance=Appearance(
            material=Material(DEF='white2_mat',ambientIntensity=1,diffuseColor=(1,1,1),shininess=0,specularColor=(1,1,1))),
          geometry=IndexedFaceSet(coordIndex=[0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,1,-1,1,7,8,-1,1,8,9,-1,1,9,2,-1,1,6,10,-1,1,10,7,-1,7,10,11,-1,7,11,8,-1,8,11,12,-1,8,12,9,-1,9,13,14,-1,9,14,2,-1,9,12,15,-1,9,15,13,-1,13,16,17,-1,13,17,18,-1,13,18,14,-1,13,15,19,-1,13,19,16,-1,16,19,20,-1,16,20,17,-1,17,21,22,-1,17,22,18,-1,17,20,23,-1,17,23,21,-1,21,23,24,-1,21,24,22,-1,22,24,25,-1,22,25,18,-1,18,25,26,-1,18,26,14,-1,14,26,27,-1,14,27,2,-1,2,28,3,-1,2,27,29,-1,2,29,28,-1,28,30,31,-1,28,31,32,-1,28,32,3,-1,28,29,33,-1,28,33,30,-1,30,33,34,-1,30,34,31,-1,31,34,35,-1,31,35,32,-1,32,35,4,-1,32,4,3,-1,5,4,27,-1,5,27,6,-1,6,11,10,-1,6,27,12,-1,6,12,11,-1,12,27,26,-1,12,26,15,-1,15,25,20,-1,15,20,19,-1,15,26,25,-1,20,25,24,-1,20,24,23,-1,27,4,29,-1,29,34,33,-1,29,4,35,-1,29,35,34,-1],creaseAngle=0.524,
            coord=Coordinate(point=[(.12879,1.47398,-.04102),(-.03576,1.47398,-.04102),(-.27355,.97203,-.04102),(.12879,.74596,-.04102),(.11877,.74277,-.2),(.11877,1.4708,-.2),(-.04578,1.4708,-.2),(-.20031,1.47398,-.04102),(-.27599,1.34996,-.04102),(-.37609,1.24742,-.04102),(-.21033,1.4708,-.2),(-.28602,1.34678,-.2),(-.38611,1.24424,-.2),(-.5111,1.16222,-.04102),(-.36962,.90489,-.04102),(-.52112,1.15903,-.2),(-.69152,1.09019,-.04102),(-.69152,.92711,-.04102),(-.46252,.85191,-.04102),(-.70154,1.08701,-.2),(-.70154,.92393,-.2),(-.69152,.76402,-.04102),(-.56542,.80699,-.04102),(-.70154,.76084,-.2),(-.57545,.80381,-.2),(-.47254,.84873,-.2),(-.37965,.90171,-.2),(-.28358,.96885,-.2),(-.27355,.49498,-.04102),(-.28358,.4918,-.2),(-.27355,.01793,-.04102),(-.07238,.01793,-.04102),(.12879,.01793,-.04102),(-.28358,.01475,-.2),(-.0824,.01475,-.2),(.11877,.01475,-.2)])))]),
      Transform(DEF='dad_HullNumber1',
        children=[
        Shape(DEF='HullNumber1',
          appearance=Appearance(
            material=Material(DEF='main_mat',ambientIntensity=0.001,diffuseColor=(.001,.001,.001),shininess=0,specularColor=(.001,.001,.001))),
          geometry=IndexedFaceSet(coordIndex=[0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,1,-1,1,7,8,-1,1,8,9,-1,1,9,2,-1,1,6,10,-1,1,10,7,-1,7,10,11,-1,7,11,8,-1,8,11,12,-1,8,12,9,-1,9,13,14,-1,9,14,2,-1,9,12,15,-1,9,15,13,-1,13,16,17,-1,13,17,18,-1,13,18,14,-1,13,15,19,-1,13,19,16,-1,16,19,20,-1,16,20,17,-1,17,21,22,-1,17,22,18,-1,17,20,23,-1,17,23,21,-1,21,23,24,-1,21,24,22,-1,22,24,25,-1,22,25,18,-1,18,25,26,-1,18,26,14,-1,14,26,27,-1,14,27,2,-1,2,28,3,-1,2,27,29,-1,2,29,28,-1,28,30,31,-1,28,31,32,-1,28,32,3,-1,28,29,33,-1,28,33,30,-1,30,33,34,-1,30,34,31,-1,31,34,35,-1,31,35,32,-1,32,35,4,-1,32,4,3,-1,5,4,27,-1,5,27,6,-1,6,11,10,-1,6,27,12,-1,6,12,11,-1,12,27,26,-1,12,26,15,-1,15,25,20,-1,15,20,19,-1,15,26,25,-1,20,25,24,-1,20,24,23,-1,27,4,29,-1,29,34,33,-1,29,4,35,-1,29,35,34,-1],creaseAngle=0.524,
            coord=Coordinate(point=[(.27415,1.45924,-.08798),(.1096,1.45924,-.08798),(-.12819,.95729,-.08798),(.27415,.73121,-.08798),(.26413,.72803,-.24696),(.26413,1.45605,-.24696),(.09958,1.45605,-.24696),(-.05495,1.45924,-.08798),(-.13063,1.33521,-.08798),(-.23073,1.23268,-.08798),(-.06497,1.45605,-.24696),(-.14066,1.33203,-.24696),(-.24075,1.22949,-.24696),(-.36574,1.14747,-.08798),(-.22426,.89015,-.08798),(-.37576,1.14429,-.24696),(-.54616,1.07545,-.08798),(-.54616,.91236,-.08798),(-.31716,.83717,-.08798),(-.55618,1.07227,-.24696),(-.55618,.90918,-.24696),(-.54616,.74928,-.08798),(-.42006,.79225,-.08798),(-.55618,.74609,-.24696),(-.43009,.78906,-.24696),(-.32718,.83398,-.24696),(-.23428,.88696,-.24696),(-.13821,.9541,-.24696),(-.12819,.48023,-.08798),(-.13821,.47705,-.24696),(-.12819,.00318,-.08798),(.07298,.00318,-.08798),(.27415,.00318,-.08798),(-.13821,0,-.24696),(.06296,0,-.24696),(.26413,0,-.24696)])))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful for One.py")
