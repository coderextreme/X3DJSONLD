###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore29-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4654829221618253,103.63292510238706,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[55,62,68,64,57,49,42,42,44,48,53,52,47,44,41,39,37,36,34,31,28,28,27,28,28,28,26,26,29,31,32,32,32,31,29,26,24,51,60,67,64,59,51,44,44,47,53,59,56,51,46,42,38,35,32,30,27,26,25,24,24,25,25,24,25,28,30,31,32,32,31,30,28,27,49,57,64,63,58,51,44,46,51,57,63,61,57,52,46,42,38,33,29,26,24,23,21,21,22,23,23,24,26,27,28,28,28,28,28,28,27,49,55,61,61,58,52,47,49,55,61,68,67,63,58,52,46,40,34,28,25,24,22,20,19,20,21,22,23,25,26,25,25,25,25,26,27,28,50,54,59,61,61,57,53,55,61,67,73,72,68,62,56,49,41,34,29,26,25,23,20,19,21,21,22,23,23,24,23,23,23,23,24,25,26,54,55,58,62,65,62,58,60,65,70,76,74,70,63,57,48,40,34,30,27,26,24,22,21,22,22,22,23,23,23,22,22,22,22,23,24,25,61,61,63,66,68,64,59,60,64,68,72,69,64,57,49,42,35,31,28,27,27,27,25,24,25,25,23,22,22,22,21,21,21,21,22,22,23,69,69,69,70,70,64,58,59,62,64,66,63,56,49,43,37,31,28,27,27,28,28,28,28,28,27,24,23,22,22,21,21,21,21,22,22,22,73,75,75,72,68,61,54,52,53,55,57,54,49,44,38,34,30,28,27,27,29,31,33,34,34,32,28,26,25,24,25,25,25,24,24,23,21,76,79,80,75,67,58,49,46,45,46,48,46,42,38,35,32,31,29,27,28,30,34,38,40,39,36,32,29,27,27,28,29,28,28,26,24,21,71,77,81,76,68,58,48,43,39,40,41,40,39,37,34,33,32,31,29,29,31,35,40,41,41,38,34,31,30,30,31,31,30,29,27,25,24,66,74,80,76,68,59,48,41,35,34,35,36,37,36,34,34,34,33,31,31,33,36,41,42,41,38,35,33,32,32,33,33,31,29,27,26,26,64,70,77,74,68,59,49,41,34,33,32,33,34,34,33,34,36,35,33,32,32,35,39,40,39,37,35,33,33,33,32,30,27,25,25,25,27,60,67,73,72,68,59,49,41,34,31,30,30,31,31,32,35,37,37,34,33,31,32,36,37,37,35,33,33,33,33,31,27,24,22,22,25,27,57,61,65,63,60,53,46,39,34,31,29,29,30,32,33,35,37,36,34,31,29,30,31,32,32,30,29,28,28,28,26,25,24,23,24,25,27,53,54,57,55,52,47,42,38,34,31,28,28,29,32,34,35,36,34,32,30,28,27,28,27,26,25,23,23,22,21,22,23,24,25,26,26,26,50,48,49,46,44,41,38,35,32,31,30,31,33,35,35,36,36,35,33,31,28,27,27,27,25,24,23,22,21,21,21,23,25,27,28,28,28,46,42,40,38,35,34,34,32,29,30,32,34,38,38,37,36,37,36,34,32,29,28,27,27,25,23,22,21,20,20,21,23,25,28,29,30,31,45,41,38,35,33,31,31,29,29,30,33,35,39,37,35,35,36,35,34,32,29,28,28,28,27,26,25,24,22,21,23,25,27,30,31,31,32,45,41,38,34,31,28,27,27,28,30,33,36,39,37,33,33,34,35,34,32,29,29,29,30,31,30,29,27,24,23,25,27,29,31,32,32,33,44,41,38,35,31,30,29,29,30,32,34,36,39,37,33,32,32,33,34,33,31,30,31,32,33,33,31,29,27,26,26,28,29,30,31,32,32,42,40,39,35,33,32,31,32,33,34,35,37,39,37,32,31,31,31,33,33,33,33,33,33,34,34,32,30,29,28,28,28,29,30,30,31,30],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
