###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_2_12',geoSystem=['GDC'],position=(-22.541664655043235,44.95834003882254,7492500.2232939005),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-22.541664655043235,44.95834003882254,0.0),range=8991000.0,child1Url=['../../tiles/3/world2-4.x3d'],child2Url=['../../tiles/3/world2-5.x3d'],child3Url=['../../tiles/3/world3-4.x3d'],child4Url=['../../tiles/3/world3-5.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/2/world1-2.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=4.5,zDimension=21,zSpacing=2.25,height=[-3596,-4682,-3544,-4747,-5671,-4924,-5206,-4388,-3384,-3679,-3420,-3753,-3754,-4359,-3886,-331,-977,-2517,-3494,-3537,-3534,-3976,-2385,-4526,-4741,-4416,-4759,-5518,-4910,-1872,-2206,-1422,-2555,-3607,-4586,-4888,-3874,-3809,-3659,-3521,-3500,-3193,-3402,-4628,-4264,-4571,-4931,-4664,-4816,-5232,-4708,-2647,-2952,-2789,-4015,-4783,-5143,-4313,-3831,-3182,-2840,-3013,-2859,-4477,-4938,-4967,-5031,-4870,-5119,-2495,-4454,-4542,-3426,-3214,-3339,-4116,-5124,-5081,-4214,-4137,-2725,-3087,-3255,-3224,-5323,-4997,-5052,-5126,-4740,-5080,-2949,-4017,-5788,-4507,-3248,-1928,-3729,-5216,-5151,-4342,-4505,-3213,-3496,-3668,-3627,-5072,-5311,-5035,-4842,-3294,-702,-4647,-4452,-5001,-5040,-2830,-3618,-2863,-5145,-4530,-4288,-4049,-3282,-2460,-3998,-3984,-4211,-4992,-5053,-4404,-194,399,-24,-3911,-2292,-5000,-918,-4162,-3844,-4143,-5004,-4681,-4516,-3445,-3376,-3765,-3862,-4157,-4799,-4929,-3283,-62,1397,1872,-3151,-2578,-4913,-2148,-4708,-4336,-3368,-5044,-4196,-4236,-2506,-4020,-3340,-3464,-4655,-5119,-5101,-2792,924,1077,1517,61,-2014,-4804,-2097,-3965,-4890,-4665,-4224,-4332,-3940,-2938,-4097,-3858,-3649,-5160,-2840,-4880,-1841,724,1004,1317,982,-1664,-4481,-1581,-4900,-5590,-5774,-5021,-3713,-3282,-4106,-4206,-4257,-4697,-5349,-4711,-4697,-819,1134,1068,1006,437,-1238,-3533,226,-4642,-5122,-4959,-4772,-4154,-3136,-4248,-4224,-4615,-4887,-5499,-4783,-4380,-231,1609,1024,1047,201,-401,-1094,711,-4044,-4343,-4072,-3747,-3268,-3936,-4158,-4334,-4678,-4936,-5224,-5472,-2098,258,1397,943,999,994,-78,-2781,164,-3062,-4842,-4484,-3345,-3064,-4114,-4575,-5054,-4792,-4236,-5162,-5588,-4724,931,1143,1012,622,1558,29,-2422,220,61,-4855,-3801,-3573,-2924,-3856,-4806,-5169,-4744,-4894,-5637,-5495,-4532,786,1274,1032,983,318,649,72,-1159,868,-4718,-3888,-3865,-2158,-4527,-5006,-5015,-4983,-5243,-5391,-5540,-4508,700,1412,1080,1281,538,741,193,-3482,792,-4585,-4195,-3947,-3731,-4696,-5454,-5236,-5019,-5270,-5629,-5531,-4764,-1010,1127,1125,1168,1328,657,54,-3413,-3749,-4753,-4051,-2291,-3302,-3870,-5397,-5055,-5439,-5399,-4929,-5431,-4525,105,932,956,1148,1714,298,-2625,-4101,-4742,-3951,-2782,-3247,-3208,-2751,-5367,-5180,-5230,-5253,-3851,-5189,-3967,277,883,803,664,1049,893,-1508,-4336,-2647,-3794,-1438,-4013,-3465,-358,-5315,-5151,-4921,-3170,-5114,-4979,-3679,269,435,506,636,1077,1425,-1051,-4569,-5012,-2399,-4150,-4213,-3076,-3620,-5108,-5059,-4938,-4009,-4705,-4762,-3674,200,381,566,585,1075,1241,-964,-4572,-5007,-2524,-4127,-4350,-2752,-3728,-5112,-5076,-4947,-3944],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
