###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4988,-4282,-4923,-4584,-4118,-1008,-325,-25,-94,186,115,464,481,537,416,415,339,248,383,324,191,146,-5110,-5156,-5332,-4662,-4308,-820,-168,-141,22,466,631,487,457,416,413,374,359,298,367,332,164,135,-5096,-5116,-5074,-4697,-4318,-1865,-18,-44,20,299,1105,536,432,416,406,335,339,314,313,309,201,184,-5109,-5141,-5010,-4793,-4276,-2551,-5,-4,166,363,1130,481,406,379,378,333,411,345,318,287,317,255,-5098,-4981,-4983,-4818,-4261,-2005,-3,7,58,273,821,661,467,402,382,342,339,349,286,277,312,292,-4957,-4880,-4847,-4736,-4250,-2246,-15,7,68,75,291,224,499,334,387,321,316,341,290,318,298,308,-4827,-4800,-4731,-4598,-4247,-223,2,41,60,107,138,409,249,368,400,326,320,314,261,291,323,333,-4623,-4677,-4603,-4483,-4059,-1022,23,25,51,22,125,253,297,384,434,293,280,294,255,326,322,292,-4423,-4538,-4454,-4265,-3768,-1457,4,39,52,52,76,153,180,288,465,318,273,271,275,372,341,298,-4239,-4233,-4322,-4016,-3306,-987,1,43,53,63,41,92,215,236,338,282,279,267,462,281,308,324,-3297,-4021,-4215,-3958,-3156,-540,19,45,52,73,27,75,267,289,289,283,275,267,490,292,270,303,-317,-3620,-4206,-3722,-3155,-1705,46,42,28,75,69,161,319,283,287,283,286,265,349,276,308,258,-4,-3612,-3870,-3524,-3321,-1639,-16,32,37,17,47,223,176,201,288,289,269,262,263,289,307,316,-490,-3574,-3794,-3629,-3259,-2587,-383,24,32,31,50,148,163,193,208,318,271,290,265,271,309,327,-980,-3462,-3581,-3430,-3252,-2527,-60,15,11,104,68,119,240,179,220,340,275,270,295,261,264,294,-3397,-964,-3429,-3361,-3235,-2529,-116,47,41,66,78,159,242,211,230,308,283,284,279,271,275,294,-3469,-3359,-3184,-3249,-3189,-2633,-290,38,62,66,171,271,241,240,155,311,292,302,277,278,297,314,-3620,-3281,-3089,-3197,-3019,-2573,-313,17,46,80,209,538,292,240,335,314,315,314,281,276,315,365,-3728,-3366,-3200,-3207,-2978,-2441,-218,4,44,81,121,457,363,372,342,343,318,300,276,286,340,387,-3903,-3555,-3392,-3279,-2883,-2119,-84,22,67,102,169,358,408,370,347,334,322,300,271,274,318,351,-4106,-3764,-3632,-3383,-2884,-1663,-2,61,116,303,290,341,399,390,344,297,312,300,282,289,342,339,-4393,-4037,-3848,-3540,-2854,-441,-497,74,143,135,478,401,392,394,364,327,291,283,285,298,336,356,-4505,-4259,-4046,-3700,-2779,-364,39,117,155,188,560,420,386,381,334,328,277,268,288,319,300,316,-4558,-4296,-4120,-3757,-2811,-213,13,110,183,190,535,428,381,300,335,328,284,270,293,308,281,334],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
