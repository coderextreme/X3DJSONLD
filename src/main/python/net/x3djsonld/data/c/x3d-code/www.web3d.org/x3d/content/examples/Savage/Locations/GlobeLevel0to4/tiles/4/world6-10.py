###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[268,424,1345,50,-3582,-3787,-4223,-5014,-4521,-4403,-4218,-4414,-4485,-4820,-4584,-4323,-3914,-4394,-4047,-3763,-4010,-4021,400,622,1158,90,-3311,-4281,-4685,-4759,-4639,-4205,-4230,-4321,-4568,-4513,-3751,-4830,-4163,-4068,-3577,-4138,-4185,-4001,812,1064,723,178,-2729,-4288,-4910,-4972,-4296,-4366,-4189,-4157,-4910,-4203,-4588,-4293,-4008,-4466,-4265,-3670,-3699,-3442,173,368,776,260,-1570,-4481,-4910,-4984,-4156,-4364,-4136,-4052,-4380,-4522,-4410,-4391,-4249,-3991,-3754,-3724,-3841,-3448,306,302,812,908,-936,-4371,-4985,-4966,-4942,-4255,-3150,-3044,-4558,-4372,-4272,-3956,-4036,-3819,-3693,-3352,-3387,-3309,127,493,665,1192,-127,-4101,-4839,-4953,-4944,-4353,-1334,-2923,-4162,-4317,-4425,-3812,-3671,-3723,-3297,-3339,-3411,-3216,14,261,1098,1340,6,-4153,-4818,-4879,-4947,-4313,-3787,-4099,-2231,-4447,-4293,-4061,-3817,-3506,-2740,-3282,-3241,-2841,-230,368,1310,1806,227,-3610,-4772,-4935,-4928,-4868,-4444,-4381,-4193,-3017,-4066,-4120,-4289,-3337,-3174,-2805,-2643,-2516,-212,507,880,1555,299,-3512,-4704,-4925,-4674,-4884,-4676,-4381,-3546,-2530,-3768,-4115,-1653,-3510,-2620,-2833,-2525,-2805,-50,120,860,1280,1120,-2852,-4633,-4893,-4931,-4804,-4180,-4427,-2247,-2751,-2362,-3993,-3183,-3874,-2757,-2790,-2490,-2681,36,164,1106,1281,1256,-1874,-4455,-4770,-4910,-4730,-4211,-4369,-3802,-972,-1503,-4056,-4329,-3788,-3805,-2827,-2881,-2945,32,373,839,936,999,-62,-4310,-4911,-4888,-4667,-4575,-4017,-4324,-3502,-2501,-3890,-3807,-3455,-3621,-3005,-2899,-3069,39,458,370,722,752,-4,-4226,-4966,-4752,-4874,-4731,-4614,-4119,-3933,-338,-3836,-3354,-3788,-3781,-3801,-3014,-3200,-3,337,158,1112,925,-2,-3860,-4739,-4664,-4712,-4423,-4496,-4314,-3313,-249,-1139,-3604,-3317,-3649,-3578,-3239,-2202,-108,137,244,147,860,460,-3162,-4513,-4599,-4688,-4537,-4523,-4211,-3492,-51,-929,-3269,-3664,-3558,-3458,-3118,-3354,-860,48,8,118,328,232,-2909,-4353,-4613,-4380,-4622,-4313,-4326,-3515,-182,-339,-3442,-3958,-3682,-3124,-3225,-3218,-2489,-2295,-154,37,295,80,-910,-4185,-4590,-4651,-4493,-4211,-4436,-3775,-3311,-48,-1208,-3952,-3848,-3399,-3067,-2824,-3459,-3093,-2042,-4,253,1053,-1981,-4076,-4646,-4491,-4222,-4330,-4274,-4091,-3933,-227,-2861,-3760,-3616,-3609,-2949,-2126,-3581,-3390,-2863,-311,1529,530,-2741,-4139,-4792,-4392,-4140,-3742,-3556,-4187,-3927,-391,-2505,-3774,-3656,-2678,-2519,-2157,-3486,-3538,-3108,-1887,1096,514,-2894,-4189,-4474,-4362,-4507,-4251,-4045,-4351,-3985,-491,-2403,-3717,-3505,-3465,-3410,-2756,-3556,-3461,-3375,-2724,-8,561,-3507,-4167,-4694,-4466,-4462,-4228,-4323,-4201,-3939,-910,-2429,-3922,-3961,-3315,-2641,-3044,-3483,-132,-3649,-3095,-3,206,-3623,-4280,-4669,-4674,-4247,-4350,-4377,-4294,-3978,-2526,-2317,-3706,-3972,-3302,-2755,-3112,-3362,-1789,-2007,-3557,-128,-31,-3947,-4446,-4585,-4666,-4301,-4289,-4383,-4280,-3914,-2718,-2335,-3353,-3593,-3407,-3200,-2763,-2968,-2331,-867,-3436,-71,-69,-3876,-4441,-4815,-4658,-4405,-4259,-4371,-4288,-3919,-2482,-1952,-3670,-3934,-3645,-3384,-2481],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
