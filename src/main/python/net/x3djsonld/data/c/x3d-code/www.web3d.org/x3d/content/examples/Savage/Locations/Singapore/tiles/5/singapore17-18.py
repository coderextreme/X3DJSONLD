###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-18.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.84837061432235,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[11,10,11,13,15,17,19,19,20,19,19,19,21,22,23,24,27,27,27,26,25,24,23,24,25,25,22,20,18,17,18,20,22,24,25,27,13,12,13,14,16,18,19,20,20,19,19,20,21,22,23,24,25,25,25,25,25,24,24,24,26,26,23,20,18,17,18,20,22,23,25,26,15,15,15,16,17,19,20,21,21,20,19,20,22,23,23,24,24,24,24,25,26,26,26,27,29,28,25,21,18,17,18,19,21,23,24,26,16,16,16,18,19,20,21,23,23,22,20,21,22,23,24,24,23,24,25,26,28,28,28,28,31,30,26,22,19,17,18,19,21,22,24,24,16,16,17,19,22,23,25,26,27,26,23,23,24,24,24,24,24,25,26,27,29,30,29,29,31,29,27,24,20,18,18,19,20,21,22,23,17,17,18,21,24,27,30,31,31,28,25,25,25,26,26,26,26,26,27,29,31,32,30,30,31,30,27,25,21,19,19,19,19,20,21,22,19,18,19,22,26,32,36,36,34,30,26,25,27,28,30,30,29,29,29,31,33,33,32,31,32,31,28,25,22,20,19,19,19,20,22,23,21,19,19,22,26,31,36,35,33,29,26,26,27,29,31,32,31,31,31,33,35,35,33,32,32,31,29,27,24,22,21,20,20,21,22,23,23,20,19,19,21,24,27,28,27,26,25,25,27,28,30,31,33,33,34,35,38,36,33,32,32,31,30,29,28,26,23,22,21,22,23,23,23,21,19,18,18,20,22,22,22,23,24,25,26,28,29,31,33,34,35,36,38,36,34,33,33,33,32,31,30,28,25,23,23,23,23,22,23,22,22,20,19,20,21,21,21,22,24,25,27,28,29,30,31,32,34,35,35,34,34,34,34,34,36,35,32,29,25,23,22,22,22,21,23,23,24,22,20,19,20,20,21,22,24,25,27,28,29,30,30,31,34,33,32,33,35,35,35,36,38,38,34,29,26,23,22,21,20,20,23,24,24,23,21,19,19,20,21,23,25,26,28,29,29,30,30,32,33,33,31,32,34,35,36,37,40,40,35,31,27,25,22,21,20,19,23,24,25,23,21,20,20,21,23,24,26,27,28,29,30,30,31,32,33,32,30,31,34,35,36,37,40,40,36,32,29,26,23,21,20,19,24,24,24,23,22,22,22,24,25,26,27,28,28,29,30,32,34,34,33,31,30,31,33,34,34,35,36,36,34,32,31,29,26,23,21,20,24,24,24,22,22,24,26,27,28,29,29,29,29,30,32,34,36,35,32,30,29,30,33,34,33,33,33,33,33,33,32,31,28,25,22,20,24,23,23,23,23,26,30,31,31,31,31,31,31,33,34,35,35,33,30,28,27,29,32,33,32,31,30,31,33,34,34,32,29,26,22,19,24,23,22,22,24,28,32,33,33,33,33,33,33,35,36,36,35,32,29,28,27,29,32,33,32,31,29,29,32,34,34,33,29,25,21,18,24,23,22,22,24,28,32,33,34,34,34,34,35,36,38,37,35,33,31,30,30,31,32,33,33,32,29,28,30,31,31,30,27,23,19,17,24,22,21,22,24,29,33,34,34,34,34,35,37,38,38,37,36,35,34,34,34,33,31,32,35,34,31,29,29,29,29,27,24,21,17,15,24,22,21,22,25,31,36,36,35,35,35,37,39,39,38,38,38,39,39,37,35,33,30,31,35,36,34,32,31,30,29,26,23,19,17,15,23,21,21,23,28,35,40,39,37,36,36,38,40,40,38,39,40,41,42,40,36,32,29,30,34,36,37,35,32,30,28,26,22,18,16,14],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
