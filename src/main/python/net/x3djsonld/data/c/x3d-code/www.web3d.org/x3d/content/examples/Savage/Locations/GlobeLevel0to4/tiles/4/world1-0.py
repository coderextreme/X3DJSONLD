###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,72,4,1,1,0,1,1,1,1,1,1,0,0,1,0,-2,0,1,0,0,0,-435,0,0,1,1,0,0,2,-19,-129,-424,-483,-595,-266,-528,-586,-598,-532,-603,-574,-214,-504,-599,-477,-713,-702,-17,-22,145,-703,-584,-531,-630,-600,-598,-553,-601,-512,-556,-576,-531,-420,-401,-498,-600,-785,-661,-353,-309,-326,305,-620,-607,-600,-566,-587,-578,-529,-495,-476,-491,-550,-504,-412,-399,-480,-567,-591,-607,-553,-586,-189,-213,-408,-640,-598,-575,-579,-555,-498,-490,-499,-528,-581,-499,-410,-419,-502,-510,-613,-479,-488,-619,-351,-315,-441,-466,-598,-599,-584,-515,-499,-496,-613,-863,-1065,-504,-667,-1155,-1154,-1720,-2546,-2666,-3040,-3317,-3514,-3473,-516,-505,-540,-591,-534,-770,-1354,-1540,-1984,-2088,-1687,-2032,-2475,-2275,-3028,-2980,-3461,-3402,-3401,-3484,-3588,-3606,-430,-500,-650,-1413,-1898,-2095,-2081,-2111,-2365,-2501,-2587,-2814,-3013,-3424,-3395,-3570,-3600,-3574,-3527,-3557,-3600,-3658,-395,-391,-516,-975,-1674,-2154,-2399,-2609,-2876,-3063,-3111,-3114,-3132,-3514,-3535,-3580,-3611,-3713,-3647,-3625,-3663,-3784,-398,-406,-600,-888,-1893,-2605,-2722,-2736,-3367,-3512,-3551,-3573,-3771,-4038,-3828,-3598,-3662,-3756,-3829,-3752,-3995,-3793,-401,-446,-690,-1650,-2376,-3150,-3208,-2985,-3354,-3847,-3874,-3888,-3965,-4099,-4036,-3863,-3776,-3827,-4023,-3933,-3963,-4145,-720,-494,-597,-825,-1615,-2775,-2948,-3452,-3805,-3831,-3941,-3999,-4106,-4175,-4124,-4074,-4089,-4104,-4167,-4114,-4181,-4206,-1921,-576,-586,-602,-1040,-2387,-3491,-3863,-3806,-3800,-3984,-4026,-4205,-4199,-4202,-4204,-4221,-4257,-4241,-4253,-4219,-4203,-2223,-615,-691,-1252,-2064,-3322,-3381,-3694,-3895,-3979,-4043,-4156,-4230,-4296,-4232,-4251,-4209,-4199,-4177,-4255,-4322,-4287,-1707,-1251,-1394,-2061,-3098,-3226,-3734,-3936,-4031,-3987,-4072,-4113,-4178,-4282,-4223,-4180,-4189,-4244,-4246,-4319,-4315,-4307,-1521,-1883,-1550,-3295,-3691,-3826,-4128,-4009,-4018,-3845,-4177,-4038,-4108,-4233,-4246,-4205,-4108,-4111,-4129,-4272,-4295,-4313,-3225,-2401,-3191,-3818,-4010,-4011,-4061,-4090,-4070,-4100,-4057,-4197,-4107,-4189,-4196,-4202,-4177,-4292,-4195,-4268,-4247,-4222,-3745,-3652,-3731,-4050,-4156,-4142,-4094,-4099,-4066,-4027,-4121,-4145,-4149,-4157,-4219,-4158,-4126,-4153,-3950,-4068,-4082,-4163,-3783,-1804,-3893,-4006,-4050,-4040,-4136,-4168,-4186,-3841,-3979,-3941,-3976,-4025,-3985,-3908,-3831,-3927,-4047,-4029,-4010,-4020,-3570,-2867,-3394,-3794,-3975,-3524,-4055,-4186,-4101,-4124,-3776,-3821,-3797,-3944,-3841,-3908,-3945,-4114,-3965,-3868,-3897,-3597,-2813,-3028,-3436,-3598,-3784,-4099,-4137,-4006,-4115,-3903,-3546,-3545,-3799,-3738,-3686,-3824,-3812,-3455,-3740,-3992,-4011,-4502,-590,-2998,-3353,-3689,-4015,-4170,-3993,-3817,-3805,-3423,-3646,-3625,-3674,-3802,-3686,-3465,-3631,-3593,-3730,-4035,-3799,-3896,-1659,-3226,-2899,-3577,-4093,-4031,-3738,-3802,-3791,-3264,-3668,-3622,-3603,-3730,-3604,-3637,-3472,-3634,-3876,-4001,-3775,-3929],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
