###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_53',geoSystem=['GDC'],position=(33.7083370213374,-22.54166197283422,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(33.7083370213374,-22.54166197283422,0.0),range=4495500.0,child1Url=['../../tiles/4/world10-6.x3d'],child2Url=['../../tiles/4/world10-7.x3d'],child3Url=['../../tiles/4/world11-6.x3d'],child4Url=['../../tiles/4/world11-7.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world5-3.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-3197,-4165,-4796,-5357,-5696,-5247,-4221,-4869,-4426,-3941,-3619,-3231,-2730,-1,72,432,374,347,303,286,420,-3099,-3921,-5081,-5382,-5674,-5154,-4862,-4819,-4832,-4415,-4063,-3592,-2219,32,91,319,348,320,299,294,385,-3497,-4480,-4916,-6010,-5348,-5079,-4807,-4529,-5134,-4822,-4535,-4031,-2119,92,170,452,374,336,270,321,340,-3437,-4497,-4780,-5828,-5441,-4952,-5046,-5197,-5393,-5145,-4715,-4148,-2460,131,256,344,335,320,314,339,349,-2691,-3656,-5072,-5528,-5056,-5537,-5591,-5716,-5545,-5222,-4780,-4174,-2746,61,299,270,233,323,314,316,335,-3937,-4248,-5051,-5381,-5490,-5843,-5812,-5707,-5446,-5245,-4871,-3996,-2607,-45,307,248,239,357,339,269,303,-2332,-3671,-4630,-5257,-5730,-5643,-5919,-5698,-5394,-5165,-4891,-3774,-3043,-148,249,390,316,371,261,275,282,-3508,-4146,-4444,-4699,-5024,-5620,-5752,-5493,-5058,-5194,-4955,-4464,-3583,-3297,98,262,458,373,436,308,228,-3258,-3539,-4360,-4729,-5315,-5272,-5194,-5232,-5054,-5252,-4933,-4596,-3567,-3255,-1025,250,477,421,378,310,184,-3572,-3243,-3560,-4450,-4606,-4761,-4699,-4832,-5169,-5289,-4971,-4677,-3219,-2651,-1028,-3,218,505,440,346,221,-3775,-2329,-3318,-3753,-4578,-4327,-4516,-4386,-5052,-5457,-5078,-4753,-4377,-3621,-2660,-1592,1151,419,580,540,399,-4334,-3874,-2845,-3341,-4009,-4122,-4721,-4336,-4435,-5420,-5175,-4852,-4527,-3880,-2764,-2486,808,1442,645,568,583,-4366,-3628,-3449,-3508,-3788,-4125,-3975,-4054,-4571,-5450,-5313,-4697,-4665,-4428,-3789,-2793,495,962,1128,864,786,-4143,-4105,-3120,-3156,-3454,-3925,-3681,-3217,-4538,-4422,-5221,-4978,-3281,-3993,-4280,-3473,-91,744,1390,1338,1063,-4731,-4591,-3763,-3004,-3279,-3227,-3422,-3336,-4460,-5108,-5384,-5220,-4434,-3856,-4447,-4441,-3918,-12,710,1121,986,-4536,-4182,-3731,-3381,-1848,-2747,-3024,-3515,-4106,-4686,-4847,-5090,-4591,-2739,-4152,-2361,-3756,-738,1284,119,601,-4775,-4305,-4196,-3476,-2720,-2622,-2370,-3230,-3466,-4038,-4089,-5209,-5499,-3616,-4737,-3994,-4048,-750,-1000,-1845,-1986,-4968,-4777,-4607,-3923,-3690,-2379,-1747,-2184,-2633,-1783,-3837,-4404,-4880,-4461,-3060,-5126,-711,-7,431,1083,-2680,-5282,-5077,-4642,-3948,-4149,-2486,-1896,-855,-1655,-3128,-3962,-4615,-4515,-5422,-4043,-5049,-1210,282,674,1546,-113,-4441,-4783,-4865,-4330,-4248,-3419,-1499,-2123,-1431,-3333,-3741,-5136,-5092,-5608,-3525,-4822,110,345,534,704,-2,-4581,-4815,-4889,-4634,-4254,-3844,-2261,-2394,-2188,-3289,-4284,-4444,-5161,-4585,-5257,-5155,-137,802,811,731,1470,-4618,-4836,-4917,-4559,-4274,-3785,-2309,-2766,-2364,-3424,-4037,-4397,-5011,-4332,-5267,-5120,-144,755,1555,835,1362],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
