###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_63',geoSystem=['GDC'],position=(56.20833769188965,-22.54166197283422,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(56.20833769188965,-22.54166197283422,0.0),range=4495500.0,child1Url=['../../tiles/4/world12-6.x3d'],child2Url=['../../tiles/4/world12-7.x3d'],child3Url=['../../tiles/4/world13-6.x3d'],child4Url=['../../tiles/4/world13-7.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world6-3.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(44.95833735661353,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4618,-4836,-4917,-4559,-4274,-3785,-2309,-2766,-2364,-3424,-4037,-4397,-5011,-4332,-5267,-5120,-144,755,1555,835,1362,-4827,-4935,-4767,-4423,-4437,-4188,-2834,-1475,-2771,-3494,-4088,-3904,-5199,-5277,-5320,-2977,-691,783,706,1063,402,-4828,-4852,-4880,-4263,-4127,-3866,-3233,-1859,-3102,-3650,-3544,-4320,-4174,-4835,-5332,-1678,-96,855,1081,771,1235,-4664,-4867,-4868,-3914,-4108,-3678,-3281,-2475,-2791,-3323,-2834,-4239,-4057,-4913,-4178,-5018,-1638,-142,-493,-1916,70,-4220,-4841,-3919,-4371,-4150,-3204,-3317,-3003,-2085,-2782,-3465,-4275,-4845,-2922,-3569,-4166,-4969,-4851,-4523,-2280,64,-3132,-4680,-4619,-4479,-4477,-4069,-3561,-3117,-2139,-3116,-3768,-4808,-4187,-4452,-4885,-4868,-4836,-4809,-3564,-99,61,-176,-3624,-4659,-4597,-4343,-4338,-3723,-3212,-2674,-3262,-3277,-4219,-4196,-4440,-4812,-4770,-4392,-4325,-144,-15,97,-353,-3634,-4514,-4515,-4430,-4135,-3810,-3182,-2907,-3960,-4074,-4157,-4543,-4926,-4570,-3945,-1765,-139,-22,106,135,-2219,-4029,-4404,-4369,-4174,-3483,-4010,-2390,-2830,-3821,-4153,-3902,-4235,-4838,-4384,-626,-147,-100,-69,-31,21,-3939,-4265,-4427,-4089,-4208,-3795,-3284,-2363,-3304,-3902,-4207,-3771,-4763,-4612,-3075,-1519,-122,-108,-43,-49,-41,-4097,-4248,-4213,-3645,-3620,-3906,-3243,-2457,-3166,-3847,-3454,-4260,-4712,-4393,-682,-359,-91,-83,-58,154,73,-4053,-3997,-3454,-3784,-3614,-3120,-3393,-3805,-3769,-3625,-3991,-3298,-4322,-3352,-351,-146,194,71,-146,136,41,-3721,-3511,-3534,-2948,-2620,-2827,-2858,-3254,-3663,-3544,-3903,-2308,-2413,-3153,-207,-185,9,73,-38,25,51,-3334,-3288,-3166,-3099,-2502,-2316,-2584,-3100,-3062,-2948,-3537,-2769,-1355,-2373,-2900,-2570,-79,160,-16,138,-50,-3273,-3428,-3160,-2970,-1928,-1804,-2474,-2983,-2940,-3106,-1966,-1694,-1395,-480,-2606,-2758,-128,-37,56,149,-62,-3545,-3378,-3107,-2867,-2489,-2402,-2280,-2790,-2748,-3019,-2771,-1537,-1301,-738,-678,-2385,-1247,-123,779,70,-67,-2736,-3323,-3209,-3248,-3071,-2236,-1703,-2339,-2561,-2766,-3000,-2189,-870,-1112,-120,-2028,-147,61,625,-44,-113,-2469,-1923,-2891,-3121,-2662,-2444,-1566,-1886,-2208,-2589,-2800,-2859,-966,-1158,-548,-1856,-1710,-268,-78,-45,-126,7,-65,-2257,-2945,-3076,-2576,-2006,-950,-1887,-2268,-2546,-2822,-2653,-2181,-996,-918,-1328,-456,-220,-105,-125,90,2,-2092,-2719,-2885,-2973,-2285,-1657,-1485,-1840,-1887,-2344,-2541,-2487,-1725,-1111,-343,-224,-939,-609,-128,2377,1636,-410,-2190,-2676,-2926,-2614,-1904,-1420,-1280,-1547,-1662,-1649,-2235,-1483,-1059,-495,424,-224,-1665,-662,2387,1102,-567,-2237,-2674,-2920,-2519,-2029,-1359,-1329,-1473,-1616,-1554,-2203,-1429,-984,-537,384,-274,-1701,-847],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
