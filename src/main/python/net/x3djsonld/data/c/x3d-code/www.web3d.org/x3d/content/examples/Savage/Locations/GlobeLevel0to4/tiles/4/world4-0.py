###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2807,-3283,-4278,-3911,-4103,-4340,-4513,-4970,-5176,-5113,-5329,-5309,-5401,-5457,-5317,-5428,-5253,-5076,-4916,-4925,-4901,-4404,-2665,-2494,-2475,-2430,-3588,-3955,-4400,-4770,-4862,-5169,-5340,-5182,-5347,-5542,-5565,-5296,-5165,-5181,-5131,-5021,-4960,-3682,-1263,-1254,-1182,-907,-1421,-2662,-3387,-4336,-4186,-5139,-5037,-5307,-5263,-5326,-5465,-5298,-5087,-4909,-4648,-4900,-5059,-5263,-693,-433,-495,-100,-211,-1102,-2579,-3751,-3550,-4991,-4843,-4962,-5281,-5338,-5309,-5137,-5173,-5013,-4220,-5020,-5133,-5000,-407,-435,-380,-38,-357,-941,-1729,-2035,-2556,-4691,-3969,-4833,-5494,-5419,-5177,-5159,-5015,-3815,-4607,-5296,-4910,-5015,-518,-490,-374,-404,-667,-931,-1643,-1947,-2381,-3037,-2503,-4456,-5242,-5174,-5011,-5099,-5234,-4650,-5126,-5010,-4987,-5040,-1294,-388,-1228,-1385,-1620,-1755,-2121,-1435,-1710,-2656,-2849,-3265,-4985,-5029,-5023,-4922,-4756,-4810,-5286,-5040,-4772,-4882,-2702,-2601,-2364,-2769,-2724,-2653,-2702,-2291,-2388,-3351,-3579,-3874,-4801,-4881,-5106,-4787,-3932,-5249,-5280,-5120,-4930,-4870,-2808,-2591,-2754,-2935,-3094,-3059,-3199,-3399,-3380,-3822,-4412,-4536,-4677,-4889,-5181,-4229,-5119,-5116,-5218,-5340,-5273,-4870,-2691,-2737,-3206,-3147,-3368,-3510,-3537,-4176,-4022,-3987,-4431,-4772,-4734,-5134,-4270,-5021,-5226,-5207,-5199,-5236,-5159,-4777,-2536,-2907,-3573,-3798,-4187,-3705,-4273,-4441,-4295,-4339,-4793,-4551,-4866,-3072,-4365,-5041,-5127,-5301,-5151,-5111,-4864,-4753,-2667,-3387,-3887,-3888,-4332,-4057,-4738,-4567,-4529,-4508,-4635,-4427,-5002,-4814,-5187,-5052,-5066,-5160,-5370,-4909,-4778,-4834,-3444,-3447,-3714,-3935,-4532,-4883,-4878,-4697,-4603,-4638,-4677,-4909,-4631,-4659,-3731,-5048,-5202,-5095,-4902,-4581,-4782,-4690,-3586,-3579,-3871,-4064,-4748,-5039,-5051,-4869,-4650,-4634,-4698,-4189,-3797,-4955,-4410,-4424,-5268,-5089,-5043,-4717,-4584,-4821,-3585,-3551,-3753,-4024,-4753,-5130,-5385,-5067,-4690,-4636,-4881,-2293,-5405,-5363,-4895,-4954,-5221,-5134,-4918,-4736,-4673,-5093,-3575,-3517,-3307,-4215,-4810,-5212,-5145,-5197,-4456,-4881,-4869,-2314,-5061,-5229,-5378,-5014,-5327,-5297,-4904,-4475,-5191,-5070,-4206,-3563,-3854,-4767,-5128,-5346,-5248,-5270,-5016,-5191,-1822,-4596,-4583,-4867,-5365,-5143,-5298,-5232,-4857,-4834,-5320,-5322,-3568,-3507,-3387,-5682,-5403,-5536,-5425,-5318,-4824,-5247,-4639,-4733,-3999,-4787,-5414,-5200,-5308,-5137,-4821,-5304,-5132,-5346,-2940,-4182,-4089,-5560,-5634,-5672,-5518,-5128,-5089,-5021,-5028,-4841,-4706,-4937,-5249,-4883,-5316,-5148,-5103,-5100,-5129,-5345,-2780,-5719,-5728,-5546,-5609,-5693,-5462,-5384,-5194,-5280,-4934,-4835,-4922,-4859,-5345,-5191,-5317,-5323,-5119,-5108,-5363,-5289,-2699,-7329,-6134,-5614,-5621,-5621,-5354,-5168,-5268,-2522,-5128,-4813,-5221,-5156,-5337,-5362,-5316,-5385,-5594,-5098,-5341,-5291,-3100,-5931,-6068,-5510,-5382,-5574,-5611,-5585,-4547,-4919,-5129,-5096,-5224,-5220,-5302,-5113,-5444,-5213,-5132,-5376,-5263,-5456,-3115,-5420,-6240,-5218,-5526,-5609,-5499,-5585,-5776,-4919,-5227,-5183,-5427,-5114,-5392,-5306,-5453,-5316,-5129,-5011,-5323,-5398,-3037,-5029,-6371,-5560,-5507,-5739,-5480,-5503,-5569,-5200,-5259,-5161,-5433,-5039,-5405,-5458,-5449,-5331,-5027,-5074,-5277,-5318],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
