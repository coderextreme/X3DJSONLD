###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-25.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.94891185322548,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[17,18,20,21,22,22,22,20,16,10,5,1,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,2,3,4,4,3,3,3,1,0,18,17,19,20,21,23,23,23,19,16,10,5,1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,1,3,3,4,4,3,2,2,0,0,20,17,18,19,21,22,23,22,22,20,16,10,5,1,0,0,0,0,0,0,0,-1,-1,0,0,0,0,2,4,4,4,3,3,1,0,0,0,23,19,18,18,20,21,22,23,23,23,19,16,10,5,1,0,0,0,0,0,0,0,0,0,0,0,1,3,4,4,3,3,2,0,0,0,0,27,23,20,17,19,20,21,22,23,22,22,21,16,10,5,1,0,0,0,0,0,0,0,0,0,2,3,4,4,3,3,1,0,0,0,0,0,29,27,23,19,18,19,20,21,22,23,23,23,20,15,10,5,1,0,0,0,0,0,0,0,1,3,4,4,3,3,2,0,0,0,0,0,0,27,31,27,23,20,18,19,20,21,22,23,22,22,20,16,10,5,1,0,0,0,0,1,2,3,4,4,3,3,1,0,0,0,0,0,0,0,22,29,29,27,23,19,18,19,20,21,22,23,23,23,20,15,10,5,1,0,0,1,2,3,4,4,3,3,2,0,0,0,0,0,0,0,0,13,21,27,31,27,23,20,18,18,20,21,22,23,22,22,20,16,10,5,1,0,2,3,4,4,3,3,1,0,0,0,0,0,0,0,0,-1,7,13,22,29,29,27,23,19,18,19,20,21,22,23,23,23,20,16,10,4,2,3,4,4,3,3,2,0,0,0,0,0,0,0,0,-2,-5,2,5,13,21,26,30,27,23,20,18,18,20,21,22,23,22,22,20,15,8,4,4,4,3,3,1,0,0,0,0,0,0,0,0,-1,-7,-13,0,1,7,13,22,29,29,27,23,19,18,19,20,21,22,23,23,23,18,11,6,4,3,3,2,0,0,0,0,0,0,0,0,-2,-5,-13,-22,0,0,2,5,13,21,26,30,27,23,20,18,19,20,21,22,22,22,18,11,6,4,3,1,0,0,0,0,0,0,0,0,-1,-7,-13,-22,-30,0,0,0,1,6,13,22,29,29,27,23,19,18,19,20,21,22,20,16,10,6,4,2,0,0,0,0,0,0,0,0,-1,-5,-13,-22,-29,-35,1,0,0,0,2,5,13,21,26,30,28,23,20,18,18,19,19,17,13,7,4,2,0,0,0,0,0,0,0,0,-1,-7,-14,-22,-30,-32,-36,2,1,0,0,0,1,6,13,22,29,30,27,23,19,17,18,16,13,9,4,2,0,0,0,0,0,0,0,0,-1,-4,-13,-22,-29,-35,-36,-36,2,2,1,0,0,0,2,6,13,21,26,30,28,23,20,17,13,9,5,2,0,0,0,0,0,0,0,0,-1,-7,-13,-22,-29,-32,-36,-36,-36,3,2,2,1,0,0,0,0,6,13,22,29,30,27,23,17,12,6,2,0,0,0,0,0,0,0,0,-1,-4,-13,-22,-29,-35,-36,-36,-36,-36,3,3,2,2,1,0,0,0,2,6,13,21,27,30,27,20,14,6,1,0,0,0,0,0,0,0,-1,-7,-13,-22,-29,-33,-36,-36,-36,-36,-36,3,3,3,2,2,1,0,0,0,0,6,13,22,29,29,23,16,6,1,0,0,0,0,0,0,-1,-4,-13,-22,-29,-35,-36,-36,-36,-36,-36,-36,4,3,3,3,2,2,1,0,0,0,2,6,13,21,26,27,20,6,0,0,0,0,0,0,-2,-7,-13,-22,-29,-33,-36,-36,-36,-36,-36,-36,-36,4,4,3,3,3,2,2,1,0,0,0,0,6,13,21,28,21,6,0,0,0,0,0,-1,-5,-14,-22,-29,-35,-35,-36,-36,-36,-36,-36,-36,-35,4,5,4,3,3,3,2,2,1,0,0,0,2,6,12,17,13,3,0,0,0,0,-2,-7,-13,-22,-29,-33,-36,-36,-36,-36,-36,-36,-36,-36,-35],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
