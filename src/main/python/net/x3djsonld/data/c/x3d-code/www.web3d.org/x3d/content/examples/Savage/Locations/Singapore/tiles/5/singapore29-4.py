###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore29-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4654829221618253,103.64728813651608,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[24,21,18,15,13,13,15,18,24,31,33,33,27,20,15,11,10,10,11,11,11,12,13,15,16,16,17,17,17,17,16,14,13,12,12,12,27,24,21,17,14,13,13,16,21,27,29,30,26,18,13,10,9,10,10,11,12,12,12,14,15,16,16,16,16,16,15,13,12,11,11,12,27,27,24,21,18,15,14,14,17,21,23,24,20,14,11,9,9,10,11,12,12,10,11,13,14,15,16,16,15,14,13,12,11,10,10,11,28,27,26,24,21,18,15,13,14,16,17,17,14,10,9,10,11,12,13,13,12,10,11,13,15,16,16,16,14,13,12,11,10,10,10,11,26,27,25,24,22,20,17,14,14,14,14,14,12,10,11,13,15,17,17,17,15,12,12,14,16,18,18,16,14,12,11,10,10,11,12,12,25,25,24,23,22,21,18,15,13,13,12,11,11,10,13,17,19,21,21,20,17,14,14,16,18,20,20,18,15,13,10,10,10,12,13,13,23,24,23,22,21,20,18,15,13,13,12,11,11,10,13,18,21,23,24,23,20,17,15,17,19,22,23,20,17,14,12,11,11,13,15,15,22,22,21,20,20,18,17,15,14,13,13,12,12,12,14,18,21,25,26,25,22,18,16,18,20,24,25,22,19,15,13,12,12,14,16,16,21,20,20,20,19,18,17,16,15,15,16,16,15,15,16,17,20,24,25,23,21,18,17,19,21,24,24,22,19,17,16,15,16,17,19,19,21,20,20,20,19,18,18,17,17,17,18,20,20,18,18,17,19,23,23,22,20,18,18,20,22,24,23,21,20,19,18,19,19,20,21,21,24,23,24,24,24,24,22,20,19,19,21,23,23,22,19,17,18,22,22,21,20,18,19,22,24,24,23,21,19,18,18,18,19,19,20,19,26,27,28,29,30,29,27,24,22,21,24,27,27,25,22,18,18,20,21,20,20,19,21,23,25,25,23,20,18,17,17,17,18,18,19,18,27,29,31,33,34,33,31,27,24,22,25,29,29,28,24,19,19,20,21,22,23,22,23,26,27,26,24,21,18,17,17,17,17,17,17,16,27,31,34,36,37,36,34,31,27,23,26,30,31,30,26,21,19,20,22,25,26,26,27,28,29,27,25,21,18,17,16,16,16,16,16,15,27,29,32,34,36,37,35,33,30,26,26,29,31,31,28,22,19,20,22,26,28,28,29,29,28,27,25,22,19,17,16,16,16,16,16,16,26,26,29,32,34,36,36,35,32,28,28,30,31,31,28,23,20,20,23,27,29,30,31,30,28,26,24,21,19,18,17,16,16,16,17,17,28,29,29,30,32,33,34,35,32,28,27,27,28,30,28,24,23,23,24,27,29,31,31,31,29,26,24,21,20,18,17,17,16,17,17,17,31,31,30,29,29,31,32,33,32,28,25,24,26,28,28,27,26,25,26,28,30,32,32,31,29,27,24,22,20,19,18,17,17,17,17,17,32,32,31,28,28,28,29,31,30,27,25,24,25,27,28,28,28,28,27,28,29,31,31,30,29,28,26,24,22,21,20,18,17,17,18,19,33,33,30,27,25,25,26,27,27,27,25,24,25,27,29,30,31,30,29,28,29,31,30,29,29,29,28,25,23,22,21,19,18,18,19,20,32,31,29,27,26,25,26,27,27,28,27,26,27,28,30,31,31,31,30,30,30,31,31,30,29,29,28,26,24,23,22,21,20,20,20,20,30,28,28,27,27,26,26,27,28,30,29,28,28,30,30,31,32,32,32,31,31,31,31,31,30,29,27,26,25,25,24,23,22,21,21,21],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
