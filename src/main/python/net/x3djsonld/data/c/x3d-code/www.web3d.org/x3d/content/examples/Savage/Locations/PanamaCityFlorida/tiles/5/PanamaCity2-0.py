###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(translation=(0.0,0.0,72149.71),
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/5/PanamaCity2-0.jpg'],repeatS=False,repeatT=False)),
          geometry=ElevationGrid(xDimension=22,xSpacing=1288.3877,zDimension=22,zSpacing=1717.8502,height=[-29,-29,-31,-29,-26,-28,-27,-27,-29,-30,-33,-31,-28,-27,-25,-25,-25,-26,-27,-28,-30,-31,-30,-29,-29,-31,-30,-29,-31,-31,-32,-32,-29,-26,-23,-24,-25,-25,-27,-29,-29,-31,-29,-33,-28,-29,-32,-29,-29,-31,-32,-29,-28,-27,-23,-24,-25,-27,-26,-28,-30,-31,-33,-32,-33,-33,-28,-31,-29,-32,-29,-30,-28,-27,-25,-25,-26,-27,-28,-28,-31,-31,-32,-32,-33,-35,-36,-39,-28,-29,-30,-27,-25,-26,-26,-26,-28,-28,-29,-30,-31,-32,-32,-33,-35,-36,-38,-42,-46,-50,-28,-27,-26,-27,-28,-27,-27,-29,-29,-30,-31,-31,-32,-33,-35,-38,-41,-45,-48,-54,-70,-88,-29,-29,-27,-28,-29,-29,-29,-30,-30,-31,-32,-34,-35,-38,-41,-45,-50,-55,-63,-81,-90,-94,-29,-31,-29,-28,-29,-29,-30,-31,-32,-34,-36,-38,-41,-45,-48,-52,-57,-64,-71,-79,-99,-100,-38,-31,-31,-30,-30,-31,-33,-34,-35,-38,-41,-45,-47,-50,-53,-58,-64,-69,-70,-74,-99,-110,-34,-34,-33,-31,-32,-34,-36,-38,-40,-43,-46,-49,-50,-52,-57,-62,-66,-68,-72,-77,-90,-118,-31,-32,-34,-34,-34,-36,-39,-42,-46,-47,-50,-51,-52,-55,-60,-65,-67,-71,-75,-79,-96,-132,-32,-34,-36,-38,-41,-44,-45,-48,-50,-52,-53,-53,-54,-56,-63,-67,-70,-74,-78,-89,-124,-147,-36,-38,-41,-45,-47,-49,-53,-54,-57,-58,-59,-59,-59,-63,-75,-75,-77,-82,-108,-133,-151,-152,-43,-46,-49,-52,-53,-54,-55,-56,-58,-59,-62,-64,-67,-85,-111,-121,-131,-138,-145,-154,-157,-153,-54,-55,-55,-56,-57,-57,-58,-59,-62,-63,-65,-74,-81,-117,-133,-141,-152,-156,-156,-158,-158,-156,-55,-58,-66,-71,-74,-75,-77,-81,-88,-92,-97,-109,-124,-144,-151,-157,-160,-160,-161,-161,-161,-159,-65,-78,-87,-82,-88,-100,-104,-108,-115,-122,-132,-142,-151,-159,-163,-164,-165,-164,-164,-164,-164,-163,-79,-78,-76,-76,-82,-107,-119,-125,-134,-142,-150,-158,-164,-168,-170,-169,-169,-168,-168,-168,-167,-166,-77,-77,-75,-76,-81,-101,-127,-140,-150,-157,-165,-172,-174,-174,-175,-174,-174,-173,-172,-172,-171,-170,-77,-76,-75,-77,-82,-107,-132,-150,-163,-170,-175,-180,-182,-181,-180,-179,-178,-178,-177,-176,-175,-174,-80,-79,-77,-80,-96,-122,-137,-155,-169,-177,-182,-186,-187,-186,-185,-184,-182,-181,-180,-180,-179,-178,-81,-79,-77,-81,-97,-123,-138,-155,-170,-178,-183,-186,-187,-186,-185,-184,-183,-182,-181,-180,-179,-178]))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
