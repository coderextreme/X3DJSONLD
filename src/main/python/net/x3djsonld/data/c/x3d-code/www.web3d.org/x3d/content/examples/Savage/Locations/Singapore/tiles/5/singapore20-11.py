###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[26,30,34,37,40,43,45,45,44,41,37,31,23,18,16,14,12,10,11,10,10,11,15,17,18,20,26,31,31,31,33,35,39,43,47,51,55,26,30,34,38,41,42,43,42,41,38,35,29,21,16,13,11,10,10,11,11,11,13,16,18,16,18,24,30,32,34,35,37,41,45,51,56,60,27,30,33,36,39,39,39,38,36,34,31,27,20,16,13,12,10,10,12,13,13,15,17,18,16,16,22,27,32,36,37,38,42,46,54,60,62,25,27,29,32,35,35,35,33,32,30,28,24,20,17,15,13,12,12,13,15,16,18,19,20,18,17,22,26,30,35,36,38,42,46,53,59,60,23,24,24,27,29,29,29,29,29,28,26,23,19,17,17,16,15,14,15,17,20,21,22,23,22,22,24,26,29,32,35,37,41,44,50,55,55,22,21,22,23,25,25,25,26,27,26,24,22,19,18,17,16,16,16,17,19,23,25,26,27,27,27,28,29,32,35,36,38,40,41,46,50,50,23,22,21,22,22,22,23,23,24,24,23,22,20,18,16,15,15,16,18,21,25,28,29,30,30,31,32,34,37,40,40,41,39,39,42,45,45,24,24,23,22,21,22,22,23,23,23,23,22,20,18,15,13,14,15,19,22,27,30,31,32,33,34,35,37,39,42,42,43,40,39,42,43,44,27,28,28,26,23,23,24,24,24,24,23,22,20,16,13,11,11,14,18,22,27,30,32,33,35,36,36,36,37,39,41,43,42,41,44,46,48,28,29,31,28,25,24,25,25,24,24,23,21,19,16,12,10,10,12,17,22,26,29,31,32,34,36,35,35,35,35,39,41,40,40,44,47,49,26,28,29,27,25,25,25,24,24,23,22,21,18,16,13,11,10,11,16,20,25,28,29,31,33,35,34,33,32,31,34,36,35,34,39,43,46,27,28,29,27,25,25,24,24,23,22,21,20,18,16,14,12,11,11,15,19,23,26,29,31,33,34,32,31,30,30,32,33,30,28,34,39,40,31,31,30,28,25,25,24,23,21,20,20,19,18,16,15,13,11,12,15,18,21,24,28,31,34,34,32,30,31,32,32,32,25,21,28,34,31,33,32,30,28,26,25,25,22,20,18,18,18,17,16,15,13,11,12,15,17,20,23,27,31,33,34,31,30,32,33,32,31,23,17,24,29,23,32,28,24,26,29,28,27,23,20,17,16,15,15,14,13,11,10,11,14,17,20,23,27,30,32,33,32,31,33,35,33,31,26,21,24,25,19,30,25,21,25,29,30,28,25,21,18,15,13,13,13,12,11,10,11,14,17,20,23,27,30,32,33,33,33,35,37,35,33,30,26,25,24,19,27,25,23,25,26,27,28,26,24,20,15,13,12,12,12,12,12,12,15,18,21,25,28,31,32,33,34,36,39,41,41,39,36,34,32,30,26,26,26,26,25,25,26,27,27,25,21,16,14,12,12,13,13,13,14,17,19,23,27,30,32,33,35,37,39,42,45,45,45,42,40,37,35,33,26,28,30,28,26,26,27,26,24,21,16,14,13,13,13,13,13,14,17,21,27,30,32,34,36,38,41,43,44,46,48,49,46,44,41,39,37,26,30,33,30,27,27,27,25,23,20,17,15,13,13,14,14,13,15,18,22,28,32,33,35,37,41,44,46,47,48,51,53,50,47,44,41,40,27,29,31,32,33,31,30,26,22,20,18,16,13,13,14,15,15,15,18,21,24,28,30,33,36,40,45,50,51,52,56,57,55,52,44,37,36,27,29,31,34,36,35,31,27,22,20,19,16,13,13,14,15,15,15,17,19,21,24,28,32,35,39,46,52,54,55,58,60,57,54,44,36,35,29,31,33,35,36,33,29,25,22,19,17,14,11,12,13,14,14,15,17,18,20,23,27,31,33,37,43,48,50,51,52,54,52,50,47,45,41],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
