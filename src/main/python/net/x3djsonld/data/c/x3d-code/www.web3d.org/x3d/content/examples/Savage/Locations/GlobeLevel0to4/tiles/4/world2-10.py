###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-10.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3,505,303,648,129,824,1417,1616,1637,1765,1422,1189,1514,1369,1095,1043,866,763,685,560,416,292,-395,-456,48,-87,-95,318,620,851,1223,1298,1088,201,725,449,-2,-53,-274,-317,-212,-157,-537,-369,-2160,-2068,-1041,-403,-61,-370,31,1081,1323,1991,1651,195,-208,-820,-340,-41,-412,-270,-335,-1350,-641,-718,-2842,-3165,-1866,-1537,-1262,-399,201,640,1025,906,970,49,-332,-397,-2186,-2178,-2637,-2713,-2962,-2457,-2723,-2244,-3249,-2921,-3104,-2650,-2401,-2584,-855,-328,-262,-16,-173,-379,-1560,-2453,-3013,-3361,-3591,-3389,-3459,-3215,-2919,-3279,-4025,-3573,-3094,-2669,-2176,-2678,-2741,-2433,-2523,-1672,-3212,-2921,-3200,-3684,-3688,-3889,-3921,-3853,-3260,-2670,-3183,-3423,-4155,-3742,-3242,-3417,-3389,-3003,-3112,-2573,-3610,-3089,-4005,-3682,-3448,-3917,-3752,-3845,-3957,-3655,-3320,-3474,-3804,-3445,-4253,-4087,-4005,-3362,-4142,-3920,-3035,-2906,-4191,-4034,-4307,-4239,-4207,-4105,-3985,-4233,-3997,-3621,-3842,-3831,-3789,-3732,-4579,-4392,-4215,-4213,-4541,-4530,-4438,-4591,-4413,-4695,-4560,-4708,-4519,-4376,-4242,-4368,-4263,-3976,-4008,-4060,-3896,-3858,-4751,-4531,-4262,-4606,-4794,-4850,-4842,-4835,-4768,-5027,-4902,-4830,-4725,-4575,-4390,-4492,-4420,-4084,-4180,-4196,-4082,-4095,-4843,-4661,-4501,-4574,-4933,-4940,-4959,-4956,-4984,-4986,-4970,-4836,-4732,-4634,-4513,-4567,-4530,-4323,-4250,-4297,-4259,-4344,-4966,-4836,-4820,-4914,-5075,-5078,-5049,-5102,-5088,-5090,-4976,-4889,-4803,-4694,-4617,-4616,-4570,-4541,-4321,-4331,-4357,-4416,-5098,-5054,-5062,-5045,-5101,-5149,-5148,-5145,-5121,-5086,-4998,-4994,-4897,-4798,-4732,-4647,-4597,-4456,-4178,-4434,-4338,-4391,-5205,-5162,-5179,-5197,-5176,-5211,-5207,-5193,-5156,-5121,-5062,-4973,-4931,-4854,-4735,-4689,-4577,-4439,-4311,-4432,-4484,-4413,-5248,-5250,-5255,-5252,-5259,-5265,-5249,-5232,-5207,-5144,-5111,-5043,-4910,-4882,-4825,-4662,-4680,-4574,-4677,-4483,-4510,-4465,-5273,-5288,-5281,-5310,-5319,-5300,-5258,-5245,-5198,-5164,-5114,-5069,-4979,-4926,-4859,-4736,-4717,-4806,-4736,-4676,-4620,-4533,-5287,-5312,-5293,-5318,-5326,-5282,-5270,-5255,-5208,-5165,-5125,-5082,-5025,-4949,-4902,-4808,-4730,-4723,-4720,-4765,-4691,-4712,-5304,-5317,-5321,-5323,-5331,-5382,-5270,-5264,-5226,-5181,-5158,-5087,-5052,-4968,-4908,-4865,-4818,-4707,-4738,-4789,-4964,-4747,-5321,-5334,-5323,-5329,-5345,-5327,-5244,-5312,-5312,-5205,-5178,-5102,-5073,-4979,-4937,-4897,-4840,-4828,-4700,-4617,-4755,-4772,-5281,-5323,-5303,-5349,-5356,-5347,-5294,-5207,-5293,-5209,-5184,-5152,-5093,-5015,-4996,-4932,-4911,-4798,-4682,-4674,-4157,-4570,-5222,-5268,-5272,-5337,-5371,-5376,-5315,-5322,-5264,-5204,-5198,-5081,-5091,-5080,-4930,-4797,-4769,-4502,-4615,-4549,-4734,-2368,-5168,-5124,-5207,-5366,-5392,-5464,-5352,-5330,-5278,-5085,-5194,-4898,-5072,-4947,-4911,-4884,-4826,-4646,-4570,-4234,-4172,-4154,-5025,-5101,-5217,-5256,-5371,-5446,-5406,-5362,-5341,-4949,-4880,-4825,-4815,-4971,-4938,-4904,-4799,-4817,-4653,-4325,-2847,-2499,-4956,-5079,-5119,-5214,-5335,-5522,-5400,-5363,-5360,-5025,-4887,-4658,-4729,-4963,-4843,-4914,-4786,-4802,-4689,-4246,-2788,-2224],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
