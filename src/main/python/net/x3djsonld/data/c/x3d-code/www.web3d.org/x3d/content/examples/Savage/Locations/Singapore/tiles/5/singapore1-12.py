###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore1-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.220994975577994,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[27,26,28,30,32,35,37,40,42,43,43,43,42,42,41,40,40,40,40,42,47,55,61,61,59,57,55,51,48,43,40,39,39,40,41,39,30,26,28,29,32,35,38,41,42,43,42,42,42,41,40,40,40,40,39,40,45,54,61,61,60,58,56,52,48,43,40,37,36,39,41,40,36,31,29,27,31,36,39,42,42,42,42,42,41,41,40,40,40,39,39,38,41,48,54,59,61,59,56,53,49,44,39,36,33,35,36,39,40,35,31,27,31,37,40,42,42,42,42,42,41,40,40,40,39,39,38,36,38,41,49,56,61,60,57,54,50,44,39,35,31,31,31,37,42,40,36,32,35,39,41,41,41,42,42,42,41,40,40,40,39,37,36,34,35,37,43,50,57,59,59,54,50,45,40,34,29,28,28,32,42,44,41,37,38,40,40,40,41,42,43,42,41,40,39,39,38,34,33,34,34,35,38,45,52,58,60,55,51,45,40,34,29,26,25,28,36,38,36,34,35,35,36,39,42,45,44,41,40,40,38,36,34,32,32,33,34,35,38,40,44,50,55,57,55,45,38,34,30,25,21,26,31,32,32,32,31,31,32,35,40,46,44,40,39,39,37,32,30,31,32,33,35,35,36,35,37,43,49,56,58,44,34,33,30,24,19,24,26,24,25,27,25,23,24,27,31,35,35,33,32,32,31,29,29,30,32,34,34,32,30,28,29,34,38,40,40,28,21,20,19,17,15,19,21,17,20,22,19,16,17,19,21,23,24,25,25,24,25,26,28,29,31,34,33,28,24,22,22,25,27,26,22,14,8,7,8,11,13,14,17,17,17,17,16,16,17,18,18,18,18,17,17,16,17,20,22,22,22,23,23,21,19,18,20,22,22,18,14,9,6,6,7,9,11,13,14,17,15,14,14,16,17,17,15,12,11,10,8,8,10,15,16,15,14,12,12,13,14,16,18,20,18,10,5,5,5,6,6,8,10,12,14,15,15,15,16,17,17,16,14,11,10,10,10,10,11,14,14,12,10,9,8,9,12,15,18,20,19,12,7,6,5,6,7,7,9,16,14,13,15,17,18,18,17,15,13,11,10,11,11,12,13,13,12,9,7,6,6,6,9,14,19,20,20,14,9,6,5,6,7,7,8,21,12,12,15,19,17,16,14,13,12,13,11,10,11,13,12,12,10,6,5,5,6,8,12,16,19,18,17,12,8,8,7,8,8,8,9,19,10,10,15,20,17,13,11,11,12,14,12,10,11,12,12,10,8,4,4,4,6,10,16,18,19,16,13,10,8,9,9,9,9,9,10,15,11,12,16,19,16,12,10,10,13,15,14,10,10,10,10,8,6,4,4,4,7,9,13,14,15,14,13,11,10,10,9,9,8,8,9,11,13,14,17,18,15,11,11,10,13,16,15,11,9,8,7,7,5,5,4,5,7,9,11,11,12,14,14,13,12,11,9,8,6,7,7,6,12,13,13,14,13,13,13,12,14,15,14,11,9,7,6,5,6,8,9,11,13,14,14,11,11,13,15,15,14,11,9,7,5,6,6,5,11,11,10,10,12,14,14,13,13,12,12,12,10,7,6,5,7,11,15,18,19,19,17,12,11,13,15,16,16,11,7,6,5,6,6,4,9,11,10,10,11,12,12,11,11,11,10,10,9,9,8,8,11,16,19,17,16,16,15,12,11,12,12,13,13,9,6,6,6,5,5,2,7,11,11,11,10,9,8,8,9,10,9,8,9,11,12,13,16,21,20,14,10,9,10,10,10,10,10,10,9,7,6,6,5,4,3,0,5,8,10,11,10,8,7,7,7,7,7,7,8,10,11,12,14,17,16,11,7,7,7,8,8,8,7,7,6,6,6,5,4,3,1,0],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
