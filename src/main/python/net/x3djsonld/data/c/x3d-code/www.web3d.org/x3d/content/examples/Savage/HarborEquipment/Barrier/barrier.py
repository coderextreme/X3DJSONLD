###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    meta(content='Barrier.x3d',name='title'),
    meta(content='A barrier commonly used for force protection by US Navy ships',name='description'),
    meta(content='LT Patrick Sullivan',name='creator'),
    meta(content='23 March 2005',name='created'),
    meta(content='31 January 2010',name='modified'),
    meta(content='https://savage.nps.edu/Savage/HarborEquipment/Barrier/Barrier.x3d',name='identifier'),
    meta(content='X3D-Edit 3.2, https://savage.nps.edu/X3D-Edit',name='generator'),
    meta(content='VizX3D, http://www.vivaty.com/downloads/studio',name='generator'),
    meta(content='Wings3D, http://www.wings3d.com',name='generator'),
    meta(content='../../license.html',name='license')]),
  Scene=Scene(
    children=[
    Transform(DEF='barrier',
      children=[
      Shape(DEF='cube1',
        appearance=Appearance(
          material=Material(DEF='yellowPlastic_mat',ambientIntensity=0.624,diffuseColor=(1,.87333,0),shininess=0.000)),
        geometry=IndexedFaceSet(coordIndex=[0,1,2,-1,0,2,3,-1,0,3,4,-1,0,4,5,-1,0,5,6,-1,0,6,7,-1,0,7,8,-1,0,8,9,-1,0,9,10,-1,0,10,11,-1,0,12,13,-1,0,13,1,-1,16,12,0,-1,16,0,14,-1,16,14,15,-1,0,11,17,-1,0,17,15,-1,0,15,14,-1,1,13,18,-1,1,18,2,-1,13,12,19,-1,13,19,20,-1,13,20,21,-1,13,21,22,-1,13,22,23,-1,13,23,24,-1,13,24,25,-1,13,25,26,-1,13,26,27,-1,13,27,18,-1,12,16,28,-1,12,28,19,-1,3,2,18,-1,3,18,27,-1,29,30,31,-1,29,31,3,-1,29,3,27,-1,3,31,30,-1,3,30,32,-1,3,32,4,-1,27,26,33,-1,27,33,29,-1,16,15,34,-1,16,34,35,-1,16,35,36,-1,16,36,37,-1,16,37,38,-1,16,38,39,-1,16,39,40,-1,16,40,41,-1,16,41,42,-1,16,42,29,-1,16,29,33,-1,16,33,43,-1,16,43,44,-1,16,44,45,-1,16,45,46,-1,16,46,47,-1,16,47,48,-1,16,48,28,-1,15,17,49,-1,15,49,50,-1,15,50,51,-1,15,51,52,-1,15,52,53,-1,15,53,54,-1,15,54,32,-1,15,32,30,-1,15,30,55,-1,15,55,56,-1,15,56,57,-1,15,57,58,-1,15,58,59,-1,15,59,60,-1,15,60,61,-1,15,61,34,-1,30,29,42,-1,30,42,55,-1,35,34,62,-1,35,62,63,-1,35,63,64,-1,35,64,36,-1,34,61,65,-1,34,65,62,-1,55,42,66,-1,55,66,67,-1,55,67,68,-1,55,68,56,-1,42,41,69,-1,42,69,66,-1,11,10,70,-1,11,70,71,-1,11,71,72,-1,11,72,17,-1,10,9,50,-1,10,50,49,-1,10,49,73,-1,10,73,70,-1,9,8,74,-1,9,74,75,-1,9,75,76,-1,9,76,50,-1,8,7,52,-1,8,52,51,-1,8,51,77,-1,8,77,74,-1,7,6,78,-1,7,78,79,-1,7,79,80,-1,7,80,52,-1,6,5,54,-1,6,54,53,-1,6,53,81,-1,6,81,78,-1,5,4,82,-1,5,82,83,-1,5,83,84,-1,5,84,54,-1,4,32,85,-1,4,85,82,-1,87,19,28,-1,87,28,86,-1,19,87,88,-1,19,88,20,-1,20,48,47,-1,20,47,21,-1,48,20,88,-1,48,88,89,-1,91,21,47,-1,91,47,90,-1,21,91,92,-1,21,92,22,-1,22,46,45,-1,22,45,23,-1,46,22,92,-1,46,92,93,-1,95,23,45,-1,95,45,94,-1,23,95,96,-1,23,96,24,-1,24,44,43,-1,24,43,25,-1,44,24,96,-1,44,96,97,-1,99,25,43,-1,99,43,98,-1,25,99,100,-1,25,100,26,-1,33,26,100,-1,33,100,101,-1,32,54,84,-1,32,84,85,-1,53,52,80,-1,53,80,81,-1,51,50,76,-1,51,76,77,-1,49,17,72,-1,49,72,73,-1,28,48,89,-1,28,89,86,-1,47,46,93,-1,47,93,90,-1,45,44,97,-1,45,97,94,-1,43,33,101,-1,43,101,98,-1,88,87,86,-1,88,86,89,-1,92,91,90,-1,92,90,93,-1,96,95,94,-1,96,94,97,-1,100,99,98,-1,100,98,101,-1,83,82,85,-1,83,85,84,-1,79,78,81,-1,79,81,80,-1,75,74,77,-1,75,77,76,-1,71,70,73,-1,71,73,72,-1,56,41,40,-1,56,40,57,-1,56,68,69,-1,56,69,41,-1,57,40,102,-1,57,102,103,-1,57,103,104,-1,57,104,58,-1,58,39,38,-1,58,38,59,-1,58,104,105,-1,58,105,39,-1,59,38,106,-1,59,106,107,-1,59,107,108,-1,59,108,60,-1,60,37,36,-1,60,36,61,-1,60,108,109,-1,60,109,37,-1,61,36,64,-1,61,64,65,-1,37,109,106,-1,37,106,38,-1,39,105,102,-1,39,102,40,-1,63,62,65,-1,63,65,64,-1,108,107,106,-1,108,106,109,-1,104,103,102,-1,104,102,105,-1,68,67,66,-1,68,66,69,-1],creaseAngle=0.524,
          coord=Coordinate(point=[(-.094,.552,1),(-.094,1,1),(-.094,1,-1),(-.094,.552,-1),(-.094,.552,-.69511),(-.094,.552,-.49511),(-.094,.552,-.29511),(-.094,.552,-.09511),(-.094,.552,.10489),(-.094,.552,.30489),(-.094,.552,.50489),(-.094,.552,.70489),(.094,.552,1),(.094,1,1),(-.1488,.38933,1),(-.2036,.22667,1),(.2036,.22667,1),(-.2036,.22667,.70489),(.094,1,-1),(.094,.552,.70489),(.094,.552,.50489),(.094,.552,.30489),(.094,.552,.10489),(.094,.552,-.09511),(.094,.552,-.29511),(.094,.552,-.49511),(.094,.552,-.69511),(.094,.552,-1),(.2036,.22667,.70489),(.2036,.22667,-1),(-.2036,.22667,-1),(-.1488,.38933,-1),(-.2036,.22667,-.69511),(.2036,.22667,-.69511),(-.2036,.05067,1),(.2036,.05067,1),(.2036,.05067,.89067),(.2036,.05067,.53422),(.2036,.05067,.10311),(.2036,.05067,-.05067),(.2036,.05067,-.56978),(.2036,.05067,-.87467),(.2036,.05067,-1),(.2036,.22667,-.49511),(.2036,.22667,-.29511),(.2036,.22667,-.09511),(.2036,.22667,.10489),(.2036,.22667,.30489),(.2036,.22667,.50489),(-.2036,.22667,.50489),(-.2036,.22667,.30489),(-.2036,.22667,.10489),(-.2036,.22667,-.09511),(-.2036,.22667,-.29511),(-.2036,.22667,-.49511),(-.2036,.05067,-1),(-.2036,.05067,-.87467),(-.2036,.05067,-.56978),(-.2036,.05067,-.05067),(-.2036,.05067,.10311),(-.2036,.05067,.53422),(-.2036,.05067,.89067),(-.2036,-.05956,1),(.2036,-.05956,1),(.2036,-.05956,.89067),(-.2036,-.05956,.89067),(.2036,-.05956,-1),(-.2036,-.05956,-1),(-.2036,-.05956,-.87467),(.2036,-.05956,-.87467),(-.02568,.50978,.52309),(-.02568,.50978,.68669),(-.12367,.21894,.68669),(-.12367,.21894,.52309),(-.02568,.50978,.12309),(-.02568,.50978,.28669),(-.12367,.21894,.28669),(-.12367,.21894,.12309),(-.02568,.50978,-.27691),(-.02568,.50978,-.11331),(-.12367,.21894,-.11331),(-.12367,.21894,-.27691),(-.02568,.50978,-.67691),(-.02568,.50978,-.51331),(-.12367,.21894,-.51331),(-.12367,.21894,-.67691),(.12367,.21894,.68669),(.1039,.50978,.68669),(.1039,.50978,.52309),(.12367,.21894,.52309),(.12367,.21894,.28669),(.1039,.50978,.28669),(.1039,.50978,.12309),(.12367,.21894,.12309),(.12367,.21894,-.11331),(.1039,.50978,-.11331),(.1039,.50978,-.27691),(.12367,.21894,-.27691),(.12367,.21894,-.51331),(.1039,.50978,-.51331),(.1039,.50978,-.67691),(.12367,.21894,-.67691),(.2036,-.05956,-.56978),(-.2036,-.05956,-.56978),(-.2036,-.05956,-.05067),(.2036,-.05956,-.05067),(.2036,-.05956,.10311),(-.2036,-.05956,.10311),(-.2036,-.05956,.53422),(.2036,-.05956,.53422)])))])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful for Barrier.py")
