###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world15-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(78.7083383624419,67.4583407093748,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[300,89,-122,-155,-146,-139,-96,-97,-80,-89,-76,-76,-50,-58,-55,-51,-43,-39,-40,-51,-47,-50,174,639,110,-354,-336,-222,-155,-142,-139,-115,-103,-100,-59,-59,-54,-39,-51,-25,-37,-15,-34,-14,-181,-258,-450,-453,-290,-239,-226,-200,-202,-173,-141,-110,-81,-48,-39,-47,-36,-30,-73,-63,-39,-14,-353,-436,-439,-338,-301,-286,-282,-292,-296,-289,-202,-107,-68,-53,-54,-118,-46,-84,-101,-123,-46,-46,-339,-385,-396,-429,-429,-428,-424,-377,-289,-219,-165,-129,-88,-38,-33,-39,-54,-55,-101,-84,-137,-101,-358,-345,-390,-414,-458,-476,-419,-358,-277,-198,-141,-91,-73,-89,-13,-96,-126,-99,-99,-195,-219,-142,-466,-499,-516,-494,-529,-481,-428,-357,-249,-180,-157,-125,-32,-50,-50,-86,-179,-152,-169,-277,-235,-168,-484,-476,-537,-528,-543,-513,-451,-291,-55,-106,-118,-113,-65,-48,-42,-92,-201,-222,-241,-104,-99,-105,-366,-382,-462,-549,-565,-529,-430,-195,-52,-45,-42,-49,-91,-92,-102,-203,-245,-314,-235,-193,-185,-204,-451,-532,-568,-550,-590,-561,-451,-147,-46,-23,-50,-148,-110,-107,-173,-238,-347,-350,-340,-317,-263,-205,-511,-561,-609,-589,-575,-559,-505,-260,-55,-34,-106,-169,-169,-174,-230,-326,-352,-353,-439,-336,-185,-111,-527,-570,-615,-627,-642,-659,-618,-593,-456,-321,-279,-244,-289,-403,-583,-497,-580,-602,-421,-349,-282,-158,-593,-632,-673,-720,-722,-697,-733,-759,-745,-1105,-1320,-1477,-1297,-996,-903,-797,-682,-774,-785,-1085,-1296,-1580,-1630,-1583,-1402,-1519,-1459,-1577,-1647,-1780,-1582,-1818,-2003,-2165,-2327,-2404,-2306,-2309,-2202,-2294,-2346,-2334,-2512,-2624,-2707,-2603,-2420,-2599,-2434,-2599,-2589,-2652,-2791,-2808,-2774,-2909,-3006,-3010,-3007,-3035,-3025,-3102,-2962,-3129,-3203,-3153,-3211,-3210,-3194,-3203,-3199,-3229,-3235,-3234,-3250,-3259,-3284,-3307,-3345,-3390,-3388,-3398,-3415,-3437,-3468,-3508,-3560,-3590,-3462,-3501,-3453,-3448,-3452,-3456,-3462,-3468,-3475,-3482,-3486,-3501,-3518,-3535,-3555,-3577,-3598,-3599,-3593,-3585,-3578,-3576,-3676,-3689,-3702,-3690,-3669,-3649,-3633,-3620,-3615,-3616,-3618,-3622,-3626,-3619,-3617,-3610,-3598,-3579,-3555,-3526,-3493,-3466,-3732,-3745,-3756,-3766,-3773,-3744,-3689,-3673,-3693,-3711,-3721,-3721,-3709,-3685,-3649,-3610,-3580,-3537,-3494,-3570,-3708,-3840,-3776,-3784,-3777,-3746,-3721,-3754,-3794,-3810,-3769,-3632,-3484,-3376,-3534,-3859,-4017,-4029,-3944,-3830,-3809,-3491,-3627,-3806,-3420,-3180,-3309,-3643,-3722,-3769,-3917,-4006,-3960,-3648,-3569,-3371,-3630,-3794,-3750,-3779,-3875,-3841,-3807,-3806,-3962,-4077,-4556,-4212,-3731,-3542,-3171,-2689,-3190,-3279,-3291,-3392,-3621,-3566,-3799,-4202,-4349,-4352,-4311,-4287,-4260,-4245,-4255,-4273,-3441,-3845,-4226,-4216,-4162,-3863,-3804,-3823,-3946,-4274,-4436,-4434,-4434,-4427,-4417,-4410,-4404,-4397,-4397,-4388,-4349,-4313,-3391,-4246,-4396,-4255,-4173,-3864,-3785,-3790,-3831,-4008,-4208,-4414,-4431,-4415,-4403,-4394,-4384,-4374,-4362,-4345,-4317,-4295],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
