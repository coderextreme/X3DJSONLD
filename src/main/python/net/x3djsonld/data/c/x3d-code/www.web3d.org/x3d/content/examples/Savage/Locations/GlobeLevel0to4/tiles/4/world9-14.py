###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4972,-2225,-4132,-4545,-1510,-3433,-1478,-2621,-4475,-4687,-4009,-3644,-2719,-3836,-5364,-5494,-5459,-5405,-5515,-5558,-5479,-5358,-5069,-3333,-5452,-5042,-3609,-4985,-1644,-3838,-4622,-4744,-3380,-3700,-5031,-5326,-5505,-5566,-5662,-5542,-5652,-5616,-5516,-5672,-5461,-3531,-4332,-4797,-4238,-5650,-4260,-5613,-5557,-4981,-3889,-4432,-4911,-4486,-5809,-5830,-5809,-5781,-5690,-5714,-5717,-5652,-5621,-4230,-5198,-4985,-3497,-3621,-5056,-7591,-9085,-6672,-4184,-3987,-3993,-5760,-5819,-5886,-5866,-5866,-5827,-5845,-5973,-5846,-5855,-3634,-4359,-4874,-4430,-5019,-3879,-3823,-5372,-6682,-6141,-5555,-5757,-5645,-5896,-5881,-5928,-5925,-6056,-5818,-6065,-5989,-5273,-3625,-5291,-4642,-4664,-3889,-3854,-4631,-3925,-3756,-8653,-6142,-4175,-3530,-5848,-5806,-6078,-5942,-5969,-6105,-5907,-3252,-5303,-4279,-4883,-4446,-4997,-4313,-4369,-1768,-3082,-3115,-4485,-9051,-5853,-4051,-5767,-6019,-5785,-5922,-5972,-6070,-6111,-5582,-5278,-4680,-5105,-4771,-4629,-4605,-4928,-4058,-2993,-3167,80,-4510,-7863,-3291,-5988,-6088,-5654,-6000,-6008,-6007,-6034,-6251,-4831,-4370,-4859,-5932,-5301,-4932,-4913,-4591,-2518,-3669,-1406,-3848,-8609,-5684,-5981,-6028,-6082,-6054,-6009,-6067,-6092,-6048,-5171,-4909,-4994,-4921,-4644,-4491,-4906,-4826,-3585,-3858,-3096,-3526,-6593,-2623,-4388,-5986,-6039,-5987,-6035,-5164,-5923,-3304,-4386,-4463,-5172,-4724,-4815,-4113,-4898,-4731,-4141,-3876,-3626,-2299,-5098,-4248,-5287,-5878,-6002,-6017,-5981,-4610,-6174,-6175,-3976,-4265,-4915,-5245,-5011,-5889,-4928,-4604,-4105,-3475,-3595,1,-5244,-4309,-5723,-5627,-6136,-5734,-5793,-4063,-5676,-6123,-4220,-4299,-4817,-4964,-5204,-5417,-4970,-4617,-4048,-3459,-4164,-2028,-5625,-6333,-4217,-5666,-5926,-3613,-5618,-5649,-3313,-6060,-5375,-3199,-5060,-5397,-5354,-4292,-5107,-4647,-3807,-3376,-3328,-2115,-4732,-5470,-4866,-5780,-6008,-5914,-5799,-5618,-5741,-6023,-5345,-3586,-5415,-4862,-5083,-6171,-4803,-4706,-4014,-3307,-3102,-1099,-3797,-7514,-5221,-4430,-5951,-3557,-5840,-1860,-5838,-5854,-5184,-3815,-4883,-4796,-5268,-5144,-4854,-4749,-4164,-2694,-3672,-2120,-3871,-7972,-5485,-3556,-3711,-4392,-4842,-3429,-5689,-5770,-5895,-3954,-5302,-4474,-4912,-4757,-4831,-4727,-4081,-4302,-2925,-2176,-3722,-7851,-5608,-5135,-2612,-5527,-4837,-5268,-5648,-5768,-5876,-5515,-4766,-5136,-5311,-5185,-4792,-4607,-4029,-3446,-3853,-1878,-3657,-6987,-5616,-5632,-4144,-5413,-5614,-5569,-5653,-5686,-6069,-5810,-4842,-4749,-5131,-4395,-4935,-4702,-3359,-4399,-4244,-1155,-3361,-6380,-5038,-5296,-5516,-5592,-5674,-5707,-5680,-5657,-5637,-5839,-5327,-4709,-4847,-4300,-4870,-4568,-3471,-4090,-3844,-2226,-3604,-5117,-5069,-5406,-5555,-5371,-5465,-5820,-5649,-5577,-5928,-5730,-3853,-4828,-4600,-4516,-4904,-4440,-3034,-3924,-3389,-2003,-3686,-4662,-1743,-3383,-5200,-5822,-2286,-5763,-5800,-5188,-5918,-5797,-4203,-4566,-4678,-4801,-4614,-4435,-1796,-3631,-3408,-3105,-4004,-2776,-3187,-2851,-5559,-5858,-5940,-5986,-5743,-3483,-5941,-5790,-5328,-4588,-4566,-4938,-4649,-4490,-2067,-4164,-2036,-2418,-4919,-3381,-4963,-4460,-5873,-5855,-5962,-5801,-5949,-3027,-5879,-5839,-5373,-4632,-4484,-4848,-4683,-4453,-1832,-3769,-2151,-2690,-6038,-4119,-4978,-4910,-5958,-5695,-5983,-5603,-5940,-2050],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
