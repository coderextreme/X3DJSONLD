###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore27-18.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4480194974058374,103.84837061432235,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[6,7,8,6,5,5,7,8,9,11,13,16,20,24,27,25,20,17,14,12,11,11,11,11,10,9,8,4,-1,-9,-17,-21,-22,-22,-21,-21,6,8,9,9,8,7,7,8,9,12,14,17,21,25,29,28,24,21,17,14,12,11,11,11,11,10,10,8,3,-2,-10,-17,-20,-21,-22,-21,11,11,11,11,11,10,9,8,9,12,14,17,21,24,27,28,28,25,21,17,14,12,11,11,11,11,10,9,8,4,-1,-9,-16,-21,-22,-22,13,12,12,12,11,10,9,9,9,10,11,14,18,22,26,28,30,28,25,21,17,14,12,11,11,11,11,10,10,8,4,-1,-10,-17,-20,-21,10,10,10,10,10,9,8,7,6,6,6,9,14,20,25,27,29,29,28,26,21,17,14,12,11,11,11,11,10,9,7,3,-1,-9,-16,-20,10,9,9,9,9,8,7,5,4,3,2,5,10,16,22,26,28,29,31,29,25,21,17,14,12,11,11,11,11,10,10,8,4,-1,-9,-13,15,13,10,9,9,7,4,3,2,2,2,4,7,12,18,22,27,29,30,30,29,26,21,18,14,12,11,11,11,11,10,9,7,4,1,0,19,17,13,11,9,6,4,3,2,3,4,4,5,8,13,19,24,28,29,30,31,29,25,21,16,14,12,11,11,11,11,10,11,11,11,12,21,19,16,14,11,8,6,5,5,6,6,6,7,8,11,15,20,24,28,30,31,30,29,26,21,17,14,12,11,11,11,12,14,16,19,21,21,20,18,16,13,10,9,9,9,9,9,9,9,9,10,12,16,21,26,29,30,30,31,29,25,21,16,14,12,11,11,12,17,21,26,29,17,17,17,16,15,14,14,13,14,14,13,12,12,11,11,12,14,18,22,26,29,31,31,30,29,26,21,17,15,12,11,14,20,25,28,29,14,14,15,15,16,17,17,17,17,17,16,15,14,13,13,12,13,15,19,23,27,29,30,30,31,29,25,21,16,13,12,15,21,26,28,29,11,12,14,16,17,18,18,19,19,19,18,17,16,15,15,14,14,15,16,19,24,27,29,31,31,30,29,26,21,17,13,13,18,23,26,29,8,11,14,15,17,18,19,19,20,19,19,18,18,17,17,16,16,15,15,17,21,24,28,30,31,30,31,29,25,20,13,11,14,19,24,27,8,11,14,15,16,16,17,16,16,17,19,19,19,18,18,17,17,16,16,17,18,21,25,28,30,31,31,29,25,20,14,10,10,13,18,23,9,12,14,15,14,14,13,11,11,14,18,20,19,19,19,18,18,17,17,17,17,19,22,25,28,30,30,28,25,20,14,9,6,8,13,19,10,12,13,12,10,4,0,0,3,7,11,15,19,20,19,19,18,18,18,18,17,18,19,22,25,27,26,24,20,17,14,11,9,7,10,13,11,12,12,10,6,-2,-11,-8,-3,0,3,10,17,20,20,19,19,19,19,18,18,18,18,19,22,23,22,20,16,14,14,13,11,8,6,8,11,12,12,10,6,-1,-8,-9,-9,-6,-3,2,9,14,19,20,20,20,19,19,19,19,18,19,20,19,18,16,15,14,14,13,13,11,9,7,10,12,13,10,5,0,-4,-10,-13,-12,-9,-5,0,7,17,20,20,20,20,19,19,19,19,19,18,16,14,13,13,14,14,14,14,13,11,9,9,11,12,12,9,3,-1,-7,-11,-13,-12,-10,-6,0,7,13,18,20,20,20,19,19,19,19,18,17,14,13,13,13,14,14,14,13,13,11,9,10,12,13,13,7,0,-5,-9,-13,-15,-14,-12,-7,-1,6,17,20,20,20,20,19,19,19,19,17,15,13,13,13,13,14,14,14,14,13],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
