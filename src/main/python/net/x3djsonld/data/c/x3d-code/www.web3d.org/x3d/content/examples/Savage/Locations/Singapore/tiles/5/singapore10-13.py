###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore10-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2995803869799398,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[11,6,8,12,13,13,17,20,21,21,21,21,22,23,25,28,28,28,27,26,24,23,23,22,23,23,24,25,25,23,21,21,21,23,24,26,27,11,7,10,12,13,14,17,20,22,22,22,22,23,22,23,25,25,26,26,25,24,23,23,22,23,24,25,25,25,25,25,24,24,25,25,26,26,14,11,12,13,14,16,18,19,21,23,23,23,22,21,21,22,23,24,25,24,24,23,23,23,23,25,26,26,26,29,30,29,28,27,26,25,24,14,13,13,14,14,14,15,16,19,22,22,22,21,20,19,19,21,23,24,24,24,23,22,22,22,23,25,26,29,32,34,33,31,29,27,25,24,15,14,15,15,13,12,13,13,16,20,21,20,19,18,18,17,19,23,24,25,24,23,22,20,20,21,23,26,31,35,37,36,35,32,29,27,25,17,16,18,19,16,14,13,12,15,20,20,19,18,17,17,18,20,23,24,25,25,25,22,18,17,18,20,26,31,34,36,35,33,31,29,28,27,19,18,21,23,20,18,14,11,14,19,19,19,17,16,17,19,21,23,24,25,26,27,24,16,13,15,18,25,30,33,34,31,29,29,29,29,30,21,19,22,25,23,20,16,12,15,19,20,19,17,16,18,22,24,26,27,28,29,28,25,17,14,16,18,23,27,29,30,28,26,29,32,34,35,23,20,23,27,25,23,19,15,17,20,20,19,18,17,21,26,28,30,31,32,31,28,25,20,18,19,19,21,23,25,25,24,24,30,36,40,41,25,21,23,25,24,24,21,18,19,20,20,20,20,19,22,26,31,36,36,33,30,26,25,23,22,22,22,23,23,22,22,22,24,31,37,41,44,27,23,22,20,21,22,22,22,22,21,21,21,21,21,22,25,32,42,40,32,27,25,25,26,26,26,26,25,23,21,20,22,25,31,37,41,44,27,24,22,19,21,22,24,25,24,22,22,22,22,22,24,26,33,43,41,32,27,27,28,30,32,32,30,27,24,20,19,21,25,31,38,41,43,28,26,23,21,22,23,26,29,26,23,22,21,22,23,25,28,34,41,39,32,29,31,34,36,38,38,35,29,24,20,18,19,23,31,39,41,41,27,24,23,21,24,26,29,32,29,25,24,23,24,26,28,30,34,39,38,32,30,32,35,38,40,40,38,30,24,20,18,18,22,31,37,37,36,25,22,21,20,26,31,33,34,31,27,27,28,28,29,30,32,35,38,36,33,31,31,33,38,40,41,39,32,25,20,18,19,22,29,34,32,28,25,22,21,21,27,33,34,34,31,28,29,30,30,30,31,33,34,35,35,33,31,31,32,37,39,40,38,32,26,23,20,21,23,27,30,26,23,26,24,23,22,28,33,33,33,31,29,29,31,31,31,32,33,33,32,32,33,32,31,32,36,38,37,35,30,27,26,24,24,24,25,26,22,19,29,29,27,25,29,33,33,32,31,30,31,31,31,31,32,31,33,34,34,33,31,29,30,32,33,32,31,28,26,26,25,24,22,23,23,20,17,33,34,32,30,31,33,33,33,33,33,33,33,33,33,31,30,33,40,38,33,29,27,26,26,27,26,26,26,24,24,23,22,20,22,22,20,17,35,36,34,32,32,33,34,35,35,35,35,35,34,33,31,29,32,39,37,30,26,24,23,22,21,21,21,21,21,21,21,20,20,21,23,20,18,33,36,34,31,33,33,35,36,36,36,36,36,34,33,31,29,30,32,29,25,23,22,20,19,17,16,16,16,17,19,20,20,20,22,23,22,20,31,34,32,29,31,32,34,37,37,38,37,36,34,32,31,30,29,27,25,22,21,22,20,18,16,14,13,14,15,19,21,21,21,23,23,23,21,28,31,29,27,28,28,32,37,38,38,38,36,34,33,32,33,32,29,26,23,22,23,22,21,19,14,12,14,17,22,26,25,25,24,24,23,22],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
