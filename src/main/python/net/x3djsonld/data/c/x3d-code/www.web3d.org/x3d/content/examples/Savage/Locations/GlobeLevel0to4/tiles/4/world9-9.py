###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world9-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(11.208336350785146,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[456,586,580,521,458,417,405,398,402,402,393,443,1431,1474,1830,1725,2601,754,848,1191,1606,1099,433,466,521,474,439,419,416,410,425,411,389,480,1310,1563,1431,2434,2553,1089,742,795,903,241,446,562,526,482,445,429,436,450,515,452,390,497,776,982,2133,3023,2088,1062,471,730,168,-537,465,547,585,490,463,446,517,526,790,497,393,545,611,891,2015,1621,2805,989,367,455,18,-655,518,652,684,595,499,475,532,686,723,602,389,549,520,744,1624,2289,3190,825,370,20,-310,-673,543,633,875,728,544,490,531,602,554,544,390,483,485,636,1753,2296,2179,726,726,641,-36,-481,701,709,1090,822,593,523,545,612,522,440,392,479,457,551,1080,1574,1515,376,145,426,-39,411,733,804,1152,828,649,543,539,662,550,436,385,432,447,572,796,2245,1771,762,-3,10,106,1829,787,812,1013,787,732,648,622,594,481,426,386,421,468,613,767,1013,1679,199,711,-31,78,1580,883,880,956,1054,850,645,538,564,511,399,394,412,503,515,705,1107,2172,167,304,-319,169,1591,904,868,904,1053,983,769,549,549,487,435,393,455,525,488,800,998,1513,5,-86,-770,208,2286,762,819,971,958,863,768,532,646,585,443,388,420,532,439,677,833,1960,-19,-23,-28,488,2799,698,829,741,732,863,730,482,523,523,420,382,531,445,436,661,1212,158,-1,-58,10,383,2744,581,1051,751,695,818,778,474,418,510,450,384,470,390,410,627,1061,112,4,-1096,0,824,1604,537,1016,697,639,637,659,436,579,355,367,446,381,387,395,589,960,13,-64,-630,-15,2198,2298,695,1112,792,621,559,564,408,400,306,344,465,360,368,445,509,1764,-319,-1026,-62,3,2399,1765,592,686,895,600,575,665,411,348,346,328,401,405,382,486,571,864,-455,-1420,-7,144,2531,1478,476,610,694,577,562,727,448,329,286,302,432,393,397,527,993,22,-466,-900,-30,2097,2011,1390,479,649,846,561,562,660,420,299,252,291,365,357,428,612,956,14,-485,-328,6,2337,1774,1259,539,810,778,594,532,685,415,276,235,355,335,342,404,591,669,-1,-1750,-27,65,1982,1350,1241,619,754,731,630,566,597,379,306,242,358,351,350,430,647,325,-517,-614,-2,666,1428,1107,1161,554,634,677,716,582,562,472,326,267,347,385,352,519,477,406,-882,-575,6,1777,1255,963,871,586,605,708,725,612,498,424,380,237,445,481,344,585,388,774,-1249,-643,889,1361,1142,910,746,571,601,721,701,611,502,412,356,195,417,487,360,617,386,914,-1352,-572,864,1416,1078,902,822],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
