###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(translation=(54112.28,0.0,72149.71),
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/5/PanamaCity2-2.jpg'],repeatS=False,repeatT=False)),
          geometry=ElevationGrid(xDimension=22,xSpacing=1288.3877,zDimension=22,zSpacing=1717.8502,height=[-32,-33,-30,-30,-28,-29,-29,-30,-31,-32,-36,-31,-31,-32,-32,-33,-32,-33,-31,-31,-33,-30,-36,-35,-34,-33,-34,-32,-31,-32,-31,-32,-32,-31,-32,-32,-32,-31,-31,-32,-32,-32,-32,-32,-41,-40,-40,-39,-38,-38,-38,-37,-38,-35,-38,-37,-36,-36,-36,-37,-36,-36,-37,-37,-38,-37,-45,-45,-45,-45,-45,-44,-43,-42,-40,-41,-39,-42,-41,-39,-39,-39,-40,-39,-39,-41,-40,-41,-49,-49,-49,-50,-52,-51,-50,-48,-45,-44,-44,-42,-42,-44,-43,-43,-44,-45,-43,-43,-42,-42,-56,-57,-55,-52,-50,-52,-53,-53,-51,-47,-45,-45,-45,-44,-46,-48,-47,-50,-49,-46,-45,-44,-68,-68,-67,-63,-57,-52,-52,-52,-51,-50,-49,-48,-48,-47,-47,-47,-46,-45,-46,-48,-51,-50,-75,-74,-72,-70,-68,-56,-53,-52,-50,-50,-49,-49,-49,-47,-46,-45,-45,-45,-45,-47,-47,-47,-78,-76,-76,-77,-74,-67,-57,-55,-53,-52,-52,-51,-50,-49,-49,-48,-47,-47,-47,-47,-47,-47,-98,-94,-92,-85,-87,-82,-64,-60,-58,-58,-54,-53,-54,-54,-55,-53,-52,-50,-50,-49,-48,-48,-103,-101,-101,-96,-95,-89,-70,-64,-61,-61,-62,-62,-62,-61,-59,-58,-58,-57,-55,-53,-52,-50,-108,-106,-104,-102,-99,-97,-87,-74,-72,-73,-74,-74,-74,-73,-71,-69,-69,-68,-66,-63,-60,-55,-111,-109,-107,-105,-103,-102,-101,-99,-91,-88,-84,-81,-80,-80,-77,-75,-75,-74,-73,-72,-69,-66,-114,-113,-110,-108,-106,-105,-104,-102,-98,-89,-88,-93,-87,-86,-81,-77,-77,-77,-75,-74,-72,-70,-118,-116,-114,-112,-110,-109,-107,-104,-102,-100,-99,-96,-88,-91,-89,-82,-78,-81,-78,-76,-76,-75,-121,-119,-117,-115,-113,-112,-109,-108,-106,-103,-101,-99,-97,-95,-93,-85,-79,-80,-79,-78,-77,-77,-124,-121,-120,-118,-116,-115,-111,-111,-108,-105,-101,-99,-98,-96,-92,-86,-82,-79,-80,-80,-78,-77,-127,-125,-123,-121,-119,-118,-115,-114,-110,-100,-94,-92,-97,-95,-90,-82,-82,-81,-78,-76,-76,-76,-130,-128,-126,-123,-121,-119,-117,-114,-110,-101,-95,-92,-87,-86,-85,-83,-77,-79,-78,-76,-77,-77,-133,-131,-129,-126,-124,-121,-119,-117,-114,-110,-109,-110,-102,-99,-101,-95,-93,-93,-86,-83,-81,-77,-136,-134,-132,-129,-127,-125,-122,-120,-118,-113,-113,-114,-112,-110,-107,-104,-103,-97,-96,-96,-92,-88,-136,-134,-132,-129,-127,-125,-122,-120,-118,-114,-114,-114,-112,-110,-107,-104,-103,-97,-96,-96,-92,-88]))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
