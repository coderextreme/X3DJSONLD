###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-8.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4519,-4502,-4487,-4513,-4326,-4369,-4410,-4182,-3843,-3504,-2788,-2014,-2544,-3182,-3756,-3866,-4107,-4300,-4063,-4096,-4104,-4310,-4659,-4635,-4541,-3573,-2878,-4095,-4366,-4277,-4166,-3868,-3460,-2251,-3274,-3410,-3407,-4116,-4344,-4507,-4371,-4254,-4387,-4513,-4751,-4385,-4487,-4024,-3461,-4130,-4262,-4212,-4160,-3649,-3432,-3479,-3318,-3235,-3843,-4161,-4527,-4672,-4515,-4421,-4423,-4606,-4180,-3758,-3828,-3511,-3686,-4082,-4192,-4286,-4324,-4276,-3920,-3512,-2870,-3196,-3598,-4143,-4365,-4689,-4693,-4684,-4687,-4553,-4248,-3316,-2973,-3391,-3762,-3780,-4211,-4205,-4159,-4303,-4151,-3453,-2914,-2211,-3315,-2877,-3955,-4701,-4846,-4758,-4923,-4703,-4372,-2870,-2932,-1861,-2980,-3565,-4291,-4536,-4633,-4406,-4235,-4154,-3884,-3908,-3248,-3773,-4516,-4647,-4866,-4967,-4807,-4835,-4901,-3470,-2516,-2057,-2601,-2921,-3076,-4764,-4780,-5024,-4891,-4715,-4286,-4302,-4408,-4263,-4867,-4929,-4960,-5138,-4939,-4919,-5143,-4420,-2775,-2144,-2480,-2961,-4016,-4769,-4106,-3822,-4520,-4943,-4960,-4918,-4952,-5020,-5117,-5169,-5026,-4980,-4918,-4984,-5199,-5188,-4427,-3179,-4180,-3788,-4271,-4536,-4712,-2971,-5283,-5606,-5345,-4816,-4995,-5034,-5040,-5196,-5155,-4321,-5104,-5025,-5219,-5237,-5339,-5044,-4822,-4965,-4919,-5096,-5162,-5097,-5176,-5381,-5034,-5409,-5169,-4945,-5087,-4824,-4258,-5072,-5066,-5108,-5273,-5313,-5362,-5419,-5444,-5314,-5248,-5146,-5218,-5162,-5052,-5213,-5463,-5317,-5138,-5019,-5115,-5124,-5188,-4890,-5080,-5072,-5347,-5342,-5348,-5431,-5192,-5317,-5321,-5241,-5176,-4942,-5184,-4711,-5301,-5288,-5103,-4983,-5101,-5032,-5229,-5148,-5177,-5117,-5412,-5325,-5318,-5370,-5334,-5347,-5269,-5211,-5166,-5109,-5056,-4895,-5175,-5291,-5162,-5159,-5067,-5055,-5133,-5086,-5260,-5201,-5369,-5369,-5401,-5401,-5368,-5291,-5260,-5302,-5307,-4652,-5082,-4891,-4949,-5240,-5235,-5230,-4831,-4916,-5059,-5201,-5165,-5401,-5387,-5393,-5366,-5433,-5353,-5283,-5358,-5079,-5345,-5165,-5106,-5052,-5002,-5162,-5198,-5120,-5032,-4903,-5063,-5148,-5278,-5218,-5466,-5376,-5243,-5332,-5410,-5277,-5361,-5370,-5248,-5301,-5320,-4979,-5070,-5237,-5180,-5220,-5069,-5104,-4942,-5101,-5172,-5314,-5456,-5357,-5079,-4912,-4922,-5370,-5147,-5288,-5169,-5301,-5176,-5162,-5119,-5153,-5281,-5183,-5020,-4558,-4901,-4998,-5211,-5170,-5294,-4963,-5023,-5291,-5104,-5155,-5106,-5286,-5451,-5066,-5201,-5338,-5220,-5407,-4967,-5212,-5091,-4868,-5154,-5154,-5131,-5191,-4582,-4670,-4712,-4613,-5211,-5392,-5169,-5324,-4921,-4996,-5206,-5360,-5339,-5387,-5206,-5474,-5143,-5107,-5063,-5258,-5336,-5169,-4803,-4242,-4718,-4300,-4979,-4747,-5116,-5229,-4640,-4529,-5014,-5589,-5741,-5573,-5576,-5204,-5356,-5029,-5030,-5255,-5300,-4824,-4092,-3970,-3935,-4481,-4767,-5022,-4934,-5019,-4802,-5045,-5498,-5607,-5669,-5599,-5296,-5513,-5401,-5102,-4757,-4532,-4714,-4595,-3376,-3833,-4311,-4202,-4195,-4521,-4721,-4882,-5158,-5077,-5296,-5560,-5692,-5170,-5654,-5647,-5468,-4595,-4884,-4177,-4690,-4596,-3562,-3407,-4117,-4388,-3771,-4316,-4261,-4819,-5221,-5058,-5507,-5320,-5285,-5468,-5539,-5263,-5324,-5251,-5070,-4338,-4855,-5029,-3295,-4528,-4255,-3862,-4196,-4681,-4069,-4501,-4885,-5147,-5072,-5234,-5291,-5158,-5634,-5147,-5100,-5409,-4757,-4640,-4836,-4788],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
