###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca13-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(4.661298515593056,101.29356261898111,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[701,803,865,1221,1844,1685,1322,1107,1012,949,1177,1166,1303,1133,879,499,573,379,670,504,422,403,799,978,1136,1552,1996,1476,1296,1207,1065,879,944,1027,1062,734,568,474,291,487,441,439,441,375,1099,1494,1416,1683,1485,1276,1148,999,867,815,750,713,910,617,498,278,289,321,286,412,369,303,1496,1850,1807,1638,1299,1038,1013,1033,1064,680,618,555,467,346,622,311,303,343,368,326,276,294,1282,1705,1617,1453,1253,1418,1276,1151,895,940,948,849,585,428,307,355,401,245,245,235,273,256,1438,1456,1378,1840,1526,1531,1213,1097,1069,1279,940,742,674,450,285,339,273,397,315,316,257,363,979,1398,1467,1771,1460,1800,1340,1145,1262,874,572,507,485,301,427,454,296,258,406,370,305,421,1354,1411,1297,1433,1714,1674,1283,1197,1317,791,460,560,584,653,425,353,368,301,360,503,322,244,1071,1261,1308,1164,1783,1549,1491,1245,889,615,693,890,1015,812,420,508,538,481,347,311,445,408,734,896,1278,1181,1623,1532,1184,966,836,532,917,1018,1157,1050,622,728,594,445,398,391,401,367,1082,977,1456,1062,1231,1349,1114,814,690,662,1002,1293,1336,1252,1243,625,474,493,555,461,395,439,1171,1136,1085,923,1204,1078,1290,864,796,777,1356,1258,1263,1319,833,739,613,399,493,390,360,466,1052,972,928,1144,987,958,1302,1052,887,939,1325,1218,1165,822,758,533,351,371,396,283,301,484,851,881,942,758,883,1241,1320,1120,1151,973,1299,1132,997,1322,1185,563,423,310,293,237,251,425,850,939,623,924,1086,1183,1584,1233,1443,1056,1261,1343,1275,1354,1182,776,556,459,465,318,279,372,807,905,730,817,947,1107,1233,1304,1312,1188,1391,1295,1437,1194,888,652,397,291,293,322,278,319,584,669,605,854,1268,1001,948,1261,1295,1372,1522,1304,1484,1017,1063,917,507,402,384,305,201,248,456,688,697,1119,913,676,1057,1013,1315,1384,1763,1505,1352,1515,1218,1029,388,351,266,296,321,355,401,524,747,698,558,932,1131,1312,1574,1459,1366,1242,1132,986,860,674,362,363,269,327,443,340,441,537,470,528,796,696,1187,1117,1483,1387,1085,1225,858,896,545,416,344,409,323,413,422,419,270,324,668,799,780,921,866,1211,1715,1271,1007,1090,701,680,684,681,497,410,381,470,607,511,454,585,750,868,973,960,996,1099,1448,1317,879,869,835,958,1019,672,463,399,390,340,596,419,481,593,753,846,970,947,995,1092,1439,1256,863,851,848,954,1018,685,468,401,400,344,564,395],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
