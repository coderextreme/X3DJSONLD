###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.60419903412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[18,19,20,19,18,16,17,17,17,17,16,15,16,18,19,21,23,25,27,28,30,31,33,34,34,33,32,30,29,29,28,26,24,24,24,25,26,18,19,20,20,20,18,17,17,17,17,16,15,16,18,19,21,23,25,27,29,30,32,33,34,34,34,34,34,35,35,34,31,28,26,26,25,26,20,20,21,22,21,19,18,17,17,17,16,16,16,18,19,20,22,24,26,29,31,32,33,33,33,33,34,37,40,42,42,37,32,29,27,26,26,20,19,19,20,19,19,18,17,17,17,16,16,17,18,19,20,22,24,25,27,29,31,32,32,31,31,32,37,41,44,43,38,32,28,26,26,26,18,16,15,15,16,17,17,16,16,17,17,18,18,19,20,21,22,24,25,26,27,29,30,30,30,28,30,35,40,42,42,36,31,27,26,26,28,18,16,15,15,15,16,17,16,17,18,19,20,19,19,20,22,24,25,25,25,27,29,30,30,30,29,30,32,35,37,37,34,29,27,26,28,30,18,17,16,15,15,16,16,18,18,19,21,22,21,20,21,24,26,27,27,27,29,31,32,32,32,31,31,30,29,30,30,30,29,28,27,30,32,18,18,18,17,17,16,17,18,19,20,22,24,23,22,24,27,29,30,31,32,33,35,36,37,37,37,34,31,28,28,28,29,30,29,29,31,33,19,19,19,18,18,18,19,19,20,21,24,27,25,24,26,30,33,34,35,36,38,40,42,43,43,43,39,34,30,28,28,31,32,31,30,31,34,20,20,20,20,19,19,19,20,20,21,24,27,27,24,27,32,34,36,38,42,44,46,47,47,46,44,40,35,31,29,30,33,35,33,31,32,35,21,21,21,21,20,20,20,21,21,22,24,26,25,23,25,30,34,37,42,48,50,52,50,48,44,41,38,34,32,31,33,36,39,36,33,33,36,22,23,24,24,22,21,22,22,23,23,24,26,25,22,24,27,31,36,42,49,53,54,52,48,43,39,35,35,36,37,40,43,45,42,38,37,39,24,26,26,27,26,26,25,25,25,24,25,26,24,22,23,24,28,33,40,47,52,55,53,48,42,37,35,39,43,47,50,53,55,50,46,44,44,25,26,28,29,30,31,29,27,28,28,29,30,27,24,23,23,28,33,39,47,52,55,52,46,40,35,36,41,48,55,60,63,64,60,55,51,49,25,25,28,31,33,36,33,30,32,33,35,38,34,29,27,27,30,34,42,50,54,54,51,44,39,35,36,42,50,61,69,72,73,70,64,59,54,24,24,27,32,36,41,38,35,36,39,43,46,41,35,31,29,32,37,45,53,55,52,48,42,38,36,37,42,49,61,70,74,75,71,66,59,52,23,23,26,30,37,45,44,42,44,45,50,54,49,42,36,31,34,40,47,56,56,50,45,41,39,39,40,41,45,54,62,66,67,63,56,50,43,23,23,25,29,37,47,49,51,52,54,58,62,57,47,39,32,35,41,49,58,57,49,43,41,40,42,42,41,42,47,52,56,57,52,45,40,34,25,24,25,28,37,48,54,60,62,65,68,71,62,51,42,34,35,40,47,56,56,49,44,42,41,42,43,41,40,41,41,44,45,42,38,33,29,29,27,26,27,36,46,55,64,69,73,75,76,66,53,44,35,36,41,47,55,56,50,46,43,42,42,42,41,39,35,34,35,36,35,33,30,27,33,29,28,27,33,40,49,58,66,75,75,74,64,52,43,37,39,45,51,56,56,51,46,44,42,41,40,39,37,34,33,33,34,32,31,29,27,37,33,30,29,32,36,43,51,62,74,75,72,62,51,44,39,42,50,54,57,55,50,45,43,41,39,37,37,36,34,33,33,34,33,32,30,29,43,38,36,34,36,39,43,48,58,71,74,75,66,55,48,43,47,55,58,56,52,45,41,39,37,36,35,35,35,34,35,36,36,35,34,33,32],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
