###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_13',geoSystem=['GDC'],position=(-56.291665660871615,-22.54166197283422,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-56.291665660871615,-22.54166197283422,0.0),range=4495500.0,child1Url=['../../tiles/4/world2-6.x3d'],child2Url=['../../tiles/4/world2-7.x3d'],child3Url=['../../tiles/4/world3-6.x3d'],child4Url=['../../tiles/4/world3-7.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world1-3.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-3779,-4205,-4280,-4337,-4441,-4474,-4536,-4630,-4710,-4767,-4820,-4846,-4827,-4808,-4856,-4915,-4574,-4085,-4096,-4120,-4359,-4134,-4281,-4410,-4491,-4541,-4629,-4642,-4675,-4769,-4819,-4883,-4918,-4908,-4952,-4931,-4967,-4868,-4852,-4771,-4438,-4699,-4297,-4460,-4549,-4600,-4693,-4745,-4750,-4829,-4888,-4928,-4957,-4937,-5000,-5022,-5016,-5020,-4976,-4921,-4830,-4652,-3970,-4433,-4616,-4764,-4604,-4787,-4829,-4877,-4905,-4924,-4941,-5032,-4931,-5015,-5079,-5057,-5055,-5067,-5080,-5081,-5004,-4107,-4457,-4511,-4551,-4665,-4608,-4764,-4942,-4923,-4845,-4908,-4965,-4951,-5009,-5100,-5088,-5079,-5228,-5192,-5180,-5121,-5197,-2629,-3475,-2679,-4622,-4629,-4784,-4292,-4131,-4630,-4564,-4819,-4995,-4988,-5120,-5148,-5157,-5152,-5268,-5233,-5246,-5345,-376,-562,-3598,-3145,-2747,-3884,-3802,-4862,-3736,-4826,-3949,-4775,-5162,-4546,-5175,-4821,-5096,-5019,-5191,-5283,-5417,366,-1359,-3994,-3302,-1167,-2467,-2091,-1862,-3135,-2086,-3097,-2663,-4001,-4716,-4117,-4543,-4850,-5434,-5246,-5333,-5305,-1905,-4048,-2550,-2833,-2457,-2617,-2308,-3482,-1290,-3836,-3827,-4170,-3365,-3647,-4818,-4158,-4359,-5073,-5253,-5193,-5247,-2843,-2802,-3188,-3090,-2061,-2799,-3013,-3290,-2988,-2435,-4983,-3863,-4231,-5022,-3704,-4659,-4176,-4495,-4234,-4598,-4272,-3197,-3179,-3354,-3124,-3371,-3197,-3595,-3174,-3050,-3574,-4412,-4554,-4682,-4545,-4752,-3512,-3582,-3944,-2792,-3679,-3832,-4084,-2534,-3288,-2603,-3802,-3251,-3234,-3240,-1082,-7197,-4228,-4732,-4640,-4573,-4534,-4193,-4090,-3563,-3566,-3601,-3375,-3876,-3252,-3368,-3781,-731,-2783,-2825,-6325,-7621,-4553,-4061,-5365,-4884,-4016,-4172,-4005,-3343,-3551,-3026,-2375,-2848,-3542,-2460,-2269,-196,-220,-3392,-4387,-4893,-5667,-4612,-4786,-4534,-4480,-4027,-3994,-3798,-3044,-3104,-2520,-3133,-2582,-2344,-1723,-3133,-3635,-3031,-3028,-3319,-3585,-4468,-4245,-4087,-4436,-4377,-4175,-3827,-3662,-3262,-3023,-2168,-2194,-2604,-2842,-2887,-3753,-3573,-4295,-3001,-3179,-3318,-4621,-3608,-4720,-4488,-4524,-4136,-3798,-3610,-2869,-2739,-2224,-2557,-2847,-1955,-1382,-2864,-4676,-4927,-2565,-4257,-4465,-3631,-4215,-4515,-4426,-4254,-4132,-3715,-3601,-3217,-2440,-2395,-2852,-2824,-3349,-1991,-1872,-4949,-4598,-5039,-5014,-4855,-4224,-4396,-4338,-4167,-4248,-4100,-4054,-3193,-3064,-3059,-3024,-3140,-3396,-5803,-5836,-5734,-5346,-5339,-3503,-2976,-3679,-4698,-4549,-4238,-4078,-3932,-3820,-3471,-2822,-2756,-3546,-3595,-3695,-3863,-5985,-5602,-5827,-5878,-5857,-5389,-5006,-4802,-4662,-4298,-4384,-4255,-3671,-3198,-3400,-2288,-2668,-3320,-3857,-4058,-3653,-5354,-5518,-5648,-5572,-5716,-5454,-5261,-4837,-4599,-4535,-4124,-3930,-3474,-3270,-2007,-3090,-3115,-3478,-3856,-4124,-4084,-5330,-5498,-5615,-5547,-5680,-5429,-5249,-4880,-4633,-4749,-4172,-3955,-3655,-3195,-2044,-3177,-3590,-3075,-3630,-4317,-3893],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
