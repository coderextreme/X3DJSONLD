###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(version='3.0',profile='Interchange',
  head=head(
    children=[
    component(name='NURBS',level=1),
    meta(content='Vincent Marchetti',name='creator'),
    meta(content='10 February 2012',name='created'),
    meta(content='../license.html',name='license'),
    meta(content='Demonstrates of NurbsPatchSurface with solid attribute set to TRUE.',name='description')]),
  Scene=Scene(
    children=[
    Background(skyColor=[(0.8,0.8,0.8)]),
    Shape(
      #  
    Assignment of u,v parameters to the following NURBS surface.
    This surface was generated by rotating the line segment (1,0,0) to (1,0,1) by 90 degrees
    about the z axis
    
    The v parameter goes along this line segment from (1,0,0) to (1,0,1) 
    The spline for the v parameter will have two knot values, at 0 and 1 
    It will be a linear function (vOrder=2, polynomial of degree 1) and
    the spline will require 2 control points.
    
    The u parameter wraps around the z axis , counterclockwise as seen from the +z viewpoint
    The uOrder is 3, the spline functions are of second degree (quadratic) and the weights are chosen
    to generate circular arcs around the z axis
    
    The control points follow the ordering as specified in the NURBS X3D specification
    https://www.web3d.org/x3d/specifications/ISO-IEC-19775-1.2-X3D-AbstractSpecification/Part01/components/nurbs.html
    Section 27.3.2
    
    There are 10 control points = uDimension (5) * vDimension (2) in the
    'point' attribute of the Coordinate subelement of the NurbsTrimmedSurface element.
    
    the first 5 control points are correspond to the v=0 contour
    and define a circular arc in the x-y plane, at z=0
 
      geometry=NurbsPatchSurface(vOrder=2,vKnot=[0.0,0.0,1.0,1.0],vDimension=2,uDimension=5,uKnot=[0.0,0.0,0.0,0.5,0.5,1.0,1.0,1.0],weight=[1.0,0.923879181092,1.0,0.923879181092,1.0,1.0,0.923879181092,1.0,0.923879181092,1.0],
        controlPoint=Coordinate(point=[(1.0000e+00,0.0000e+00,0.0000e+00),(9.2388e-01,3.8268e-01,0.0000e+00),(7.0711e-01,7.0711e-01,0.0000e+00),(3.8268e-01,9.2388e-01,0.0000e+00),(0.0000e+00,1.0000e+00,0.0000e+00),(1.0000e+00,0.0000e+00,1.0000e+00),(9.2388e-01,3.8268e-01,9.2388e-01),(7.0711e-01,7.0711e-01,1.0000e+00),(3.8268e-01,9.2388e-01,9.2388e-01),(0.0000e+00,1.0000e+00,1.0000e+00)])),
      appearance=Appearance(
        material=Material(diffuseColor=(1.000000,1.000000,0.000000),transparency=0.2))),
    Group(
      children=[
      Shape(
        geometry=LineSet(vertexCount=[2],
          coord=Coordinate(point=[(0.0,0.0,0.0),(1.0,0.0,0.0)])),
        appearance=Appearance(
          material=Material(emissiveColor=(1.000000,0.000000,0.000000)),
          lineProperties=LineProperties(linewidthScaleFactor=2))),
      Shape(
        geometry=LineSet(vertexCount=[2],
          coord=Coordinate(point=[(0.0,0.0,0.0),(0.0,1.0,0.0)])),
        appearance=Appearance(
          material=Material(emissiveColor=(0.000000,1.000000,0.000000)),
          lineProperties=LineProperties(linewidthScaleFactor=2))),
      Shape(
        geometry=LineSet(vertexCount=[2],
          coord=Coordinate(point=[(0.0,0.0,0.0),(0.0,0.0,1.0)])),
        appearance=Appearance(
          material=Material(emissiveColor=(0.000000,0.000000,1.000000)),
          lineProperties=LineProperties(linewidthScaleFactor=2)))])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
