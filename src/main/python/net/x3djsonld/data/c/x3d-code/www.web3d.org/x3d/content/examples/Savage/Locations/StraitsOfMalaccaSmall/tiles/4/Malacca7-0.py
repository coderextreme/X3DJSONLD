###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca7-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(2.752923424950107,98.7885625,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[910,904,906,905,1090,1302,1226,1204,1162,1066,1094,1001,958,864,799,747,696,649,571,511,464,413,899,905,908,1326,1391,1235,1175,1173,1211,1077,1022,1000,907,778,750,710,653,605,526,470,399,386,897,936,1023,1229,1255,1174,1138,1092,1116,1027,985,910,880,694,671,652,605,552,490,444,379,274,902,1098,1322,1246,1173,1151,1113,1021,1015,967,935,877,798,746,666,637,546,487,461,422,371,346,936,1248,1195,1179,1127,1113,1024,1012,964,951,858,801,750,695,637,581,507,447,423,379,328,313,1225,1188,1190,1150,1108,1038,1005,944,895,848,746,772,707,652,565,509,467,427,376,349,319,285,1219,1189,1150,1109,1070,1007,958,906,850,794,750,713,664,593,527,471,415,397,352,323,293,288,1201,1157,1120,1082,1047,1007,919,868,824,761,702,654,617,557,497,440,403,363,334,306,282,261,1218,1138,1097,1069,1012,953,883,837,784,737,691,606,568,538,471,429,388,351,319,290,263,249,1147,1102,1056,1038,991,923,867,809,752,707,663,610,558,515,461,417,380,340,302,277,254,233,1130,1082,1052,1015,965,909,846,788,727,675,642,603,556,516,433,402,358,329,293,268,238,218,1145,1087,1024,970,956,899,851,786,734,699,620,565,528,478,436,386,346,326,281,253,237,215,1111,1068,1017,971,942,899,846,783,728,694,629,561,513,455,421,380,349,313,275,243,226,207,1084,1060,1012,981,951,910,854,806,738,677,608,561,489,438,419,354,325,291,267,252,218,201,1040,1052,1023,1000,966,929,879,826,754,632,589,540,486,416,392,351,322,274,253,236,218,200,1038,987,1025,1008,987,968,959,864,622,659,569,529,468,409,380,353,290,267,244,223,205,198,1011,941,996,993,1009,1019,1016,1089,890,629,556,496,459,391,361,328,286,261,238,214,186,183,918,945,921,945,968,1034,1270,1130,967,661,518,428,428,385,327,314,276,246,225,209,194,185,842,876,894,918,952,1158,1064,828,1062,794,499,453,393,360,318,281,268,225,213,195,189,179,785,852,854,905,922,937,1001,789,881,723,401,388,354,348,308,269,237,219,202,176,168,171,773,795,855,866,626,582,700,844,594,703,493,332,315,303,293,265,219,199,190,167,154,150,698,759,861,846,581,542,722,839,468,506,350,281,277,273,250,248,210,199,184,161,148,135,672,759,863,763,578,567,663,819,430,491,319,282,272,268,248,245,209,198,182,160,149,132],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
