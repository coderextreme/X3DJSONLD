###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(translation=(108224.56,0.0,72149.71),
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/5/PanamaCity2-4.jpg'],repeatS=False,repeatT=False)),
          geometry=ElevationGrid(xDimension=22,xSpacing=1288.3877,zDimension=22,zSpacing=1717.8502,height=[-31,-31,-32,-33,-32,-32,-30,-30,-29,-30,-29,-28,-28,-27,-27,-27,-27,-26,-24,-26,-25,-26,-33,-32,-31,-33,-33,-32,-31,-31,-31,-30,-31,-29,-27,-29,-27,-26,-28,-27,-27,-26,-25,-25,-34,-32,-32,-32,-33,-32,-31,-32,-32,-31,-31,-31,-30,-28,-27,-28,-27,-27,-27,-27,-26,-27,-34,-33,-32,-33,-33,-32,-33,-33,-33,-31,-30,-29,-31,-28,-28,-28,-28,-28,-28,-27,-27,-27,-34,-34,-33,-34,-33,-34,-33,-32,-32,-34,-32,-31,-30,-30,-30,-29,-29,-27,-28,-29,-28,-27,-35,-34,-34,-35,-34,-34,-34,-33,-32,-32,-32,-32,-30,-31,-29,-29,-29,-29,-28,-29,-30,-29,-37,-35,-32,-34,-33,-34,-34,-34,-33,-33,-33,-31,-30,-30,-31,-30,-29,-29,-29,-30,-31,-29,-38,-37,-36,-35,-34,-34,-34,-33,-32,-31,-32,-32,-30,-30,-29,-30,-30,-29,-28,-31,-31,-30,-38,-37,-37,-37,-36,-36,-36,-35,-34,-33,-32,-32,-29,-31,-31,-31,-30,-30,-31,-31,-31,-32,-40,-39,-39,-38,-37,-37,-37,-36,-34,-36,-34,-33,-31,-30,-30,-30,-30,-30,-30,-31,-31,-32,-43,-42,-40,-39,-38,-38,-38,-37,-37,-36,-36,-35,-34,-32,-31,-31,-31,-31,-30,-31,-32,-33,-45,-46,-42,-41,-39,-38,-37,-36,-36,-37,-36,-35,-32,-32,-31,-31,-31,-31,-31,-31,-31,-33,-46,-46,-44,-43,-42,-39,-38,-37,-37,-38,-38,-36,-35,-34,-33,-32,-32,-33,-31,-31,-31,-33,-49,-47,-46,-44,-43,-41,-39,-38,-39,-39,-39,-37,-38,-36,-35,-34,-33,-33,-32,-32,-32,-32,-51,-50,-48,-45,-43,-42,-41,-39,-39,-39,-38,-38,-38,-37,-36,-35,-35,-35,-36,-35,-35,-35,-53,-51,-50,-47,-45,-42,-41,-40,-39,-38,-38,-38,-39,-38,-37,-37,-36,-36,-37,-37,-36,-37,-54,-52,-51,-48,-46,-44,-43,-41,-40,-39,-38,-38,-38,-38,-37,-38,-39,-40,-38,-37,-37,-36,-54,-53,-52,-49,-45,-44,-44,-41,-40,-39,-39,-39,-39,-39,-38,-39,-39,-40,-39,-38,-37,-37,-55,-53,-52,-50,-47,-45,-44,-42,-41,-41,-39,-39,-39,-40,-40,-40,-40,-39,-39,-37,-38,-37,-54,-53,-52,-49,-46,-45,-44,-42,-42,-41,-40,-40,-39,-39,-40,-40,-40,-39,-39,-39,-38,-38,-55,-52,-51,-49,-47,-45,-44,-43,-42,-42,-40,-40,-40,-40,-40,-40,-40,-40,-40,-39,-39,-38,-55,-52,-51,-49,-47,-45,-44,-43,-42,-42,-40,-40,-40,-40,-40,-40,-40,-40,-40,-39,-40,-39]))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
