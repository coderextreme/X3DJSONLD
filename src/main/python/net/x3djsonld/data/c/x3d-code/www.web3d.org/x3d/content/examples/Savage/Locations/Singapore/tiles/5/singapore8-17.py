###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore8-17.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2821169622239519,103.83400758019333,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[19,20,19,18,16,15,13,12,13,15,16,19,21,23,24,25,25,24,20,14,13,14,16,19,20,20,18,15,13,12,11,11,11,13,13,13,14,18,19,18,15,14,13,13,12,14,16,20,23,25,27,29,33,31,28,24,19,16,15,15,15,16,17,16,14,12,10,9,9,9,10,11,13,16,17,18,16,14,12,12,12,14,15,17,22,26,29,30,33,39,37,32,30,29,25,18,14,13,12,13,13,12,11,9,7,7,7,8,10,13,16,15,15,14,13,13,13,14,15,16,17,22,27,30,32,35,38,38,38,42,50,43,29,19,14,11,11,12,12,11,9,6,5,5,6,8,12,16,11,12,12,12,14,15,16,17,17,18,23,29,33,36,36,36,39,44,54,68,59,38,24,15,12,11,11,13,12,9,6,4,4,4,7,10,15,10,11,12,13,15,16,18,19,20,23,29,38,41,42,41,40,44,49,54,59,51,34,23,17,14,13,14,15,15,13,10,8,7,9,12,17,21,10,11,13,15,16,17,19,22,25,28,37,47,49,48,47,44,47,52,50,45,37,27,21,19,17,16,16,18,18,16,13,12,12,14,18,24,28,11,13,15,17,19,20,23,28,31,34,39,45,50,55,50,42,41,41,38,33,27,23,21,20,20,19,19,19,18,15,13,11,11,13,17,24,27,12,14,18,21,22,23,28,34,38,40,40,40,48,60,52,38,31,27,24,22,21,21,21,22,22,22,22,21,18,14,11,9,9,11,15,21,23,15,17,19,21,23,26,31,37,39,41,38,35,41,50,43,30,24,22,21,20,19,19,20,21,22,21,20,18,16,14,12,10,10,12,15,18,18,18,20,20,20,24,29,34,39,40,39,34,29,31,37,31,22,19,20,20,20,19,17,18,21,20,17,16,15,15,15,14,13,13,14,15,14,13,28,28,22,18,23,31,33,35,36,37,34,28,28,31,27,22,20,20,20,20,19,18,18,20,19,17,15,15,15,15,14,13,13,15,15,13,11,39,37,25,16,22,31,30,28,31,36,34,30,28,26,26,25,23,20,19,19,19,20,19,18,18,17,16,15,14,13,12,11,11,14,15,12,10,43,39,26,15,19,26,26,25,26,29,28,27,25,23,24,26,24,19,18,20,21,22,21,18,18,19,19,17,15,15,14,11,10,12,14,13,13,45,40,26,14,15,19,21,21,20,20,21,22,21,20,23,26,23,18,18,21,23,24,22,19,19,22,22,20,18,18,15,11,8,10,12,15,18,40,37,27,18,18,20,19,16,14,12,14,17,18,17,19,22,20,18,19,22,22,22,19,16,17,21,20,17,14,13,11,6,5,6,10,15,19,32,33,28,24,23,22,17,10,6,4,8,13,14,14,15,15,16,18,20,21,20,18,15,13,14,17,16,12,7,5,3,1,0,1,6,15,21,28,33,32,29,26,22,16,9,5,3,8,14,16,17,15,12,14,18,18,18,16,14,12,11,14,18,17,11,6,3,2,0,0,1,5,13,19,26,34,36,33,27,20,15,10,7,6,11,18,21,22,18,12,13,17,17,14,11,10,10,10,15,21,21,13,7,5,3,2,0,2,5,12,17,24,30,32,32,27,21,17,13,11,10,15,20,22,22,18,12,13,16,15,12,11,10,12,15,23,34,33,23,13,9,6,5,5,6,9,14,18,23,23,25,27,27,25,20,15,14,15,17,20,20,19,16,12,12,14,14,13,12,11,16,24,36,50,49,35,22,14,10,10,11,12,15,19,22,23,22,21,22,24,25,23,20,18,17,18,19,18,17,14,11,11,12,13,13,14,16,23,32,44,57,55,40,26,16,13,15,17,19,21,23,24,27,27,21,16,19,23,25,25,22,18,18,19,17,14,12,10,10,11,12,14,18,22,31,41,50,57,52,37,25,17,15,19,24,27,29,27,26],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
