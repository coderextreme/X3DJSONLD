###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore27-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4480194974058374,103.63292510238706,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[20,20,21,20,20,19,18,18,18,17,16,16,18,22,27,31,33,31,27,25,25,24,22,21,19,17,14,13,13,14,13,12,11,11,11,12,13,20,21,21,21,21,21,21,21,21,19,17,17,17,20,24,28,32,30,27,26,26,26,25,23,21,18,15,13,13,14,13,12,11,11,12,13,13,21,22,22,23,24,24,25,25,24,22,18,17,16,17,19,22,26,28,28,28,30,30,30,28,25,22,18,15,14,14,13,13,14,14,14,15,15,22,23,25,27,28,28,29,28,27,23,19,17,15,15,16,19,23,26,28,31,34,35,34,31,28,24,19,16,15,15,17,18,19,19,19,19,19,23,26,28,31,34,34,33,30,27,24,20,17,16,16,17,20,22,25,29,33,39,39,36,32,29,25,20,17,17,19,22,25,26,27,27,26,26,24,27,30,34,38,37,35,32,28,24,19,17,16,17,19,22,25,29,32,37,42,41,36,32,28,24,20,18,18,21,27,32,34,34,34,33,34,25,28,32,35,38,36,34,30,26,22,18,17,16,19,23,29,34,38,41,44,45,41,34,29,26,22,18,17,18,23,31,39,43,43,41,40,41,26,29,32,35,36,34,32,28,23,19,16,16,17,21,26,32,39,44,49,50,50,44,35,29,26,23,17,16,19,25,35,44,48,49,46,43,44,25,28,30,31,32,29,27,23,20,18,17,16,17,19,23,29,36,44,51,55,56,51,41,34,31,26,20,18,19,26,36,45,49,49,45,40,39,25,27,29,29,29,26,22,19,17,17,17,17,16,18,21,26,33,41,50,55,58,54,45,38,34,29,22,19,20,26,36,45,49,48,43,38,36,25,26,27,27,26,23,19,18,17,17,18,18,17,18,20,23,28,33,38,45,51,50,45,40,35,29,23,19,19,24,33,41,46,46,42,37,34,25,25,26,25,23,20,17,17,17,19,20,20,19,19,20,22,24,27,30,36,43,45,43,40,34,29,23,19,19,24,31,38,42,44,42,38,34,24,23,22,21,19,17,16,17,20,23,25,26,25,24,24,26,27,29,31,34,37,37,35,32,29,25,21,19,21,25,30,35,39,42,42,42,39,24,22,20,18,16,16,16,18,21,26,31,32,32,31,30,30,31,31,32,33,33,31,29,26,24,21,19,20,22,26,30,34,38,41,43,45,44,25,23,21,18,16,16,17,20,24,31,38,40,39,39,38,39,39,40,40,39,36,33,30,27,23,21,20,21,25,30,35,38,39,41,44,47,47,25,23,21,18,16,17,18,22,27,35,44,46,47,47,47,47,48,48,47,44,41,37,33,28,23,21,20,23,28,33,39,42,41,41,44,47,50,25,23,22,19,17,17,17,22,28,35,42,44,44,47,51,53,53,51,47,44,43,41,38,32,26,22,21,24,28,34,39,43,42,40,41,43,46,24,23,22,19,17,16,16,22,28,34,38,40,41,47,54,57,57,53,46,44,46,45,42,36,28,23,23,25,29,34,40,43,41,38,38,38,41,20,20,21,19,18,17,16,19,24,27,31,34,37,43,51,52,51,47,41,40,43,42,39,34,27,25,27,28,29,32,37,40,40,38,36,35,36,17,17,18,19,18,18,17,17,18,20,22,26,32,39,47,47,45,40,36,36,39,38,36,32,27,27,30,31,30,30,33,37,39,39,35,32,31,18,20,22,22,22,22,21,19,18,18,20,24,29,34,38,38,36,34,34,36,39,38,35,31,29,30,35,37,35,34,36,39,41,40,36,32,31,19,22,25,27,27,26,24,21,17,17,18,22,26,28,29,28,27,28,31,35,39,38,34,32,31,35,42,44,41,39,39,41,42,41,36,32,30],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
