###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore24-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4218243602718554,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[22,27,31,34,27,19,16,14,13,13,14,16,17,16,15,14,14,15,16,18,20,21,23,23,24,28,32,35,39,44,51,62,72,74,76,75,19,24,28,31,25,18,16,14,12,12,14,17,17,17,16,14,14,15,15,17,19,20,21,21,22,26,30,34,37,41,46,57,67,70,73,71,16,21,24,26,22,17,15,13,13,12,14,16,17,17,16,15,14,15,15,16,18,19,20,20,21,25,28,32,35,37,42,52,60,64,67,67,15,17,18,18,16,13,13,14,13,13,13,14,15,15,16,15,15,15,15,16,17,18,18,19,21,23,25,28,31,34,37,44,50,54,59,61,13,14,13,11,11,11,12,14,13,13,12,12,13,14,15,15,15,15,15,16,16,18,18,19,20,22,23,25,27,31,34,38,41,45,50,55,13,13,11,9,10,11,13,15,13,12,11,12,13,14,14,15,15,15,15,15,16,18,19,20,20,21,22,23,25,30,33,36,39,42,45,49,12,12,10,8,10,12,13,15,13,12,11,12,12,14,14,14,14,16,16,15,16,18,19,20,20,21,22,23,24,29,32,35,37,38,40,42,10,10,9,9,10,11,13,15,15,14,13,12,12,13,13,13,14,16,17,17,18,20,21,21,22,23,23,23,24,28,31,33,35,35,36,38,9,9,9,10,10,11,13,16,16,15,13,12,12,13,13,12,13,16,18,18,20,22,23,23,23,24,24,24,25,28,30,32,33,33,33,33,9,9,11,12,13,14,15,17,17,17,14,12,12,13,14,14,15,18,20,20,22,24,26,26,26,27,27,27,27,29,30,32,33,31,31,31,9,10,12,14,15,17,17,17,18,18,15,12,12,13,15,16,17,20,22,22,23,26,28,28,29,30,30,30,29,30,30,32,33,30,28,29,10,12,15,19,20,21,21,20,20,21,19,17,17,19,21,22,24,26,26,25,25,27,28,28,28,30,31,32,32,32,32,32,31,29,27,27,11,15,19,24,25,26,25,23,23,23,22,22,23,25,27,29,30,32,31,27,26,28,29,27,28,30,31,33,34,33,32,31,30,27,25,26,15,19,23,28,29,29,28,26,26,25,25,25,27,29,32,35,36,36,34,31,29,30,29,27,27,28,30,32,34,33,33,31,29,26,24,25,20,24,28,32,32,32,31,29,28,27,27,28,31,34,37,41,41,39,36,33,32,31,29,27,26,27,29,31,32,33,33,31,29,26,24,25,21,25,29,32,33,32,31,30,28,28,28,29,32,35,39,44,43,39,37,34,32,31,28,26,26,27,29,31,31,31,30,28,26,26,26,27,22,26,29,31,32,33,32,30,28,28,28,29,32,36,41,46,46,40,36,35,33,30,27,26,25,27,29,30,31,28,26,25,24,26,28,30,21,24,27,29,30,31,30,29,28,28,28,29,32,36,40,45,44,38,34,33,31,28,26,25,25,27,28,28,27,25,23,23,23,25,27,29,20,22,24,26,27,28,28,28,29,29,29,29,31,35,39,43,41,35,31,30,28,26,24,24,24,26,27,25,24,22,21,21,22,25,27,29,19,21,22,23,24,26,27,28,28,29,29,29,31,32,34,36,34,30,28,28,27,26,24,24,24,25,25,23,22,21,21,21,22,25,28,29,19,20,20,20,22,24,26,27,28,28,29,30,30,30,29,27,25,24,24,26,26,25,24,23,22,23,23,22,21,22,22,22,22,26,29,29,19,21,21,20,22,24,25,26,27,28,29,30,31,31,29,25,23,21,21,22,23,23,22,20,19,19,19,20,21,22,22,22,23,26,29,30],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
