###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[32,36,32,28,31,35,36,36,34,33,31,30,28,27,27,28,27,25,24,23,24,25,27,27,27,26,25,24,23,21,19,17,16,15,14,13,35,39,37,33,34,36,37,36,35,34,34,34,32,28,27,29,29,27,26,26,26,27,28,28,27,26,25,23,21,19,18,17,16,16,15,15,37,44,42,39,39,38,37,36,36,36,37,39,36,31,29,31,31,30,29,29,29,29,29,28,27,26,25,22,19,18,16,16,15,15,15,17,39,45,45,44,41,37,35,33,34,36,38,38,35,31,30,31,31,31,31,30,30,30,28,28,27,25,24,21,18,17,16,16,16,17,17,19,40,46,47,48,41,33,30,29,32,36,37,36,33,29,28,29,30,32,32,31,30,30,28,27,25,23,21,20,18,17,16,17,19,19,20,21,44,52,54,55,45,33,30,30,33,36,35,34,31,28,28,29,30,32,32,31,30,30,28,26,24,22,20,19,19,18,18,20,21,22,22,23,49,62,62,61,49,36,33,33,34,35,34,32,31,29,29,29,30,31,31,30,30,30,28,27,25,23,21,20,20,21,21,23,24,24,24,25,49,60,59,57,47,36,34,34,35,35,33,31,30,30,31,31,31,31,31,30,30,30,29,27,26,24,23,22,22,23,24,25,26,26,27,27,44,50,49,47,41,35,34,34,34,34,33,31,31,32,33,33,33,33,33,32,32,31,30,28,26,25,24,24,24,25,26,27,28,29,29,30,42,45,43,40,38,34,35,36,36,35,34,33,33,34,34,35,36,36,35,35,34,32,30,28,27,26,25,25,25,27,28,29,30,30,30,31,43,43,41,39,37,35,36,38,39,40,38,36,35,35,36,37,38,38,38,37,36,33,31,28,27,26,26,26,26,28,30,30,31,31,31,30,44,44,41,38,38,37,38,39,40,41,40,38,37,37,37,39,39,39,39,38,37,34,31,28,27,27,27,27,27,30,31,31,31,31,30,30,45,46,43,40,39,39,39,39,39,40,40,40,39,38,38,40,40,40,40,39,36,34,30,28,27,27,27,27,28,31,32,32,31,31,30,29,49,49,45,41,40,39,39,38,38,38,39,40,39,39,39,40,41,41,40,39,36,33,30,28,27,27,27,28,29,31,32,32,31,30,30,29,54,52,47,42,39,38,38,38,38,38,38,38,39,39,40,41,41,41,40,38,35,32,29,27,26,27,28,29,30,32,33,33,32,30,27,26,54,51,46,41,38,36,37,38,37,36,35,36,37,39,40,40,40,40,40,38,35,32,28,26,26,27,28,30,31,33,33,33,32,29,25,24,48,45,43,40,37,35,35,37,35,32,32,34,35,37,38,39,39,39,39,37,35,32,28,26,26,28,30,30,32,32,32,32,30,27,23,23,41,40,39,38,35,33,34,34,32,29,30,32,34,35,36,38,38,38,38,37,34,32,29,27,28,30,31,31,31,31,31,30,29,26,22,22,38,39,38,36,34,31,31,31,29,27,28,31,33,34,35,37,38,37,37,35,33,31,29,29,29,31,31,31,31,30,30,29,28,25,22,22,35,37,36,35,32,30,29,28,27,26,27,29,31,33,35,36,37,37,36,34,32,31,30,30,30,31,30,30,30,30,30,29,28,25,22,22,34,35,34,34,31,29,28,26,26,26,27,28,30,32,34,34,35,36,35,33,32,32,32,32,32,30,30,29,29,30,30,30,29,25,23,22,32,33,32,32,31,29,27,26,26,26,26,27,29,32,33,33,34,35,34,33,33,33,33,34,33,30,29,28,28,30,31,31,30,26,23,23,31,31,31,31,30,29,27,26,26,26,26,26,28,31,32,33,34,34,33,32,32,33,34,34,33,31,29,28,28,31,33,31,30,26,23,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
