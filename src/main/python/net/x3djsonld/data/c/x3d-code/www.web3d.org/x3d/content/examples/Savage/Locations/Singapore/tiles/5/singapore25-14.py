###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore25-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4305560726498494,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[33,33,34,34,34,34,33,33,32,31,30,31,33,33,32,33,33,30,24,22,22,22,23,22,22,22,21,21,23,25,26,27,26,25,26,27,39,37,36,35,34,34,33,33,33,33,32,32,32,32,32,32,32,29,24,23,22,22,21,21,21,22,20,20,20,21,23,23,22,22,25,28,41,41,40,37,34,34,34,34,35,34,34,34,33,32,31,32,32,30,26,24,23,22,21,21,21,22,21,20,20,21,20,20,20,20,23,26,43,44,45,39,34,35,36,36,36,36,36,35,34,33,31,31,32,31,27,26,25,24,23,22,22,22,22,21,21,21,20,19,19,19,20,22,42,43,45,40,35,36,37,37,37,37,36,36,35,33,32,32,32,32,31,30,29,28,27,26,25,24,23,23,22,21,20,19,19,19,19,21,37,41,43,40,36,37,39,38,37,36,35,35,35,34,34,33,32,33,36,36,35,34,33,32,31,28,26,24,22,21,21,21,21,20,20,20,35,39,42,40,38,39,39,38,37,35,34,34,34,35,35,34,32,34,38,39,39,38,38,36,35,32,30,27,23,21,20,21,21,21,19,19,33,37,40,40,40,39,38,37,35,34,33,33,34,34,35,35,33,34,38,39,40,40,40,39,37,36,35,31,25,20,20,19,20,20,18,17,34,36,39,39,39,37,35,34,33,34,33,34,34,34,36,36,33,34,37,39,40,41,40,38,36,35,35,33,27,22,20,19,19,20,18,16,35,36,38,38,38,35,30,30,32,33,35,35,34,35,37,37,34,34,36,38,40,40,39,36,34,32,32,32,29,26,22,20,20,20,18,17,35,36,36,36,37,33,28,30,31,33,36,36,35,35,38,37,35,35,36,37,40,40,37,34,31,29,29,30,31,30,25,22,21,20,19,17,34,33,34,34,34,34,32,33,33,34,35,36,35,36,38,38,36,36,36,37,39,39,36,32,29,28,27,28,31,33,31,28,25,22,20,18,34,32,31,32,33,33,34,33,32,33,34,35,35,36,38,38,37,37,38,38,39,38,34,31,29,27,26,27,32,34,34,32,27,23,20,18,35,32,30,30,32,32,33,32,30,31,32,33,35,36,37,38,37,38,39,40,39,38,34,32,30,29,29,29,30,31,32,32,27,23,18,15,37,33,29,29,31,31,32,31,29,29,30,32,33,35,37,37,37,38,40,40,39,37,33,31,30,31,31,31,30,30,31,31,27,23,17,14,40,35,31,30,29,29,29,28,27,27,27,28,30,33,37,37,36,36,38,37,36,34,30,29,29,30,32,33,31,30,31,31,27,23,19,15,40,36,32,30,29,28,27,27,26,26,26,26,27,31,36,37,35,35,36,36,35,32,28,28,29,31,34,35,32,30,30,30,27,24,19,16,36,34,32,30,28,28,27,26,25,25,26,26,27,30,35,36,36,35,34,34,34,33,31,30,30,32,34,34,32,31,30,29,26,23,20,17,35,33,32,30,28,28,28,27,26,26,26,27,27,30,34,35,36,35,33,32,33,33,32,31,31,32,33,33,32,30,29,28,25,23,20,18,37,36,35,33,32,31,30,30,29,29,29,29,29,30,32,33,34,34,32,31,32,32,31,30,30,30,31,31,30,29,29,29,26,24,22,20,39,38,37,36,35,34,32,32,32,32,31,31,30,31,32,33,34,33,31,30,31,31,30,29,28,28,30,30,29,29,29,29,27,25,23,21,38,37,36,36,37,36,35,35,34,34,33,33,33,34,35,36,36,34,30,29,28,27,27,27,27,27,28,29,30,30,30,30,28,26,24,22,36,36,35,36,37,37,36,35,35,34,34,34,34,35,37,37,38,34,29,27,26,26,26,27,26,25,26,28,30,31,31,31,29,28,25,22],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
