###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore18-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3694340860038916,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[46,47,48,50,52,52,52,52,52,45,40,39,38,39,40,40,41,42,44,46,46,44,42,41,40,38,37,35,33,34,39,42,44,43,39,35,35,48,49,50,51,52,53,52,53,54,48,41,39,38,38,39,39,39,40,42,43,43,42,40,40,40,40,38,36,34,35,39,41,41,40,38,34,33,51,51,52,52,52,52,52,54,57,50,43,40,37,37,37,37,37,37,38,39,39,38,38,39,40,40,38,36,35,35,38,40,39,37,36,35,33,51,51,52,52,51,52,53,57,61,54,47,41,36,35,35,35,34,34,34,33,33,34,36,37,39,38,36,35,34,34,36,38,38,37,35,34,32,50,51,52,51,51,53,56,61,65,58,49,43,36,34,33,33,32,31,30,29,29,31,34,36,39,37,34,32,31,32,34,36,37,36,35,33,32,49,48,49,50,52,56,60,63,65,58,50,44,37,34,33,33,32,30,27,27,28,31,34,38,44,41,33,29,29,30,31,33,34,35,34,33,32,47,47,47,50,54,59,64,64,63,57,50,45,40,37,34,33,33,30,27,28,30,33,35,41,49,46,33,26,27,28,29,31,32,33,34,34,34,48,48,49,54,59,62,64,62,59,54,48,46,44,41,37,36,34,32,29,29,31,34,37,41,47,44,33,27,27,28,29,29,31,33,34,36,36,52,52,52,57,63,62,60,57,53,50,46,46,47,45,41,39,37,35,32,31,32,34,37,40,41,39,33,30,29,29,29,29,31,33,35,37,39,56,54,54,57,60,58,56,52,48,46,44,46,48,47,45,43,41,39,36,34,33,34,39,41,41,39,35,33,32,31,30,30,31,32,35,37,41,58,55,53,53,53,52,51,48,43,43,43,45,47,48,48,47,45,43,40,36,33,35,40,43,43,42,37,35,34,34,32,32,31,31,34,38,43,57,54,52,50,49,48,46,44,42,42,43,45,46,48,50,49,48,45,42,38,33,35,41,44,45,44,40,38,37,36,35,33,32,32,36,40,46,54,52,50,49,49,46,43,43,43,43,43,44,44,47,51,51,49,46,42,38,35,37,42,45,46,45,44,42,40,39,37,35,33,33,37,42,47,50,49,49,49,49,45,43,43,44,44,44,44,44,47,51,50,48,45,41,38,37,39,43,45,46,46,45,44,42,40,36,34,33,33,36,41,46,47,47,47,48,48,46,45,45,45,45,44,45,45,47,50,48,46,43,40,39,39,41,43,45,46,46,46,45,42,39,34,30,31,32,35,38,41,44,45,46,47,48,48,48,48,48,47,46,46,46,48,49,47,44,41,39,39,41,44,46,47,46,47,47,46,42,38,33,30,32,33,34,35,37,43,44,44,46,48,49,51,51,51,50,49,49,48,48,48,45,42,40,37,39,44,47,50,51,49,49,50,48,42,38,35,34,36,36,34,33,35,42,42,43,46,49,52,55,55,55,54,52,51,49,47,45,43,40,38,37,41,45,49,52,53,50,50,49,47,41,37,38,39,40,40,37,34,35,39,41,43,46,50,55,59,59,58,56,54,51,47,44,41,39,37,37,38,42,47,50,52,53,51,49,47,44,39,38,41,45,46,45,40,37,38,37,39,43,47,52,56,61,61,60,58,56,51,46,43,41,39,38,38,39,43,48,51,52,52,51,48,44,41,38,38,44,49,50,48,43,39,39,37,39,42,47,53,56,59,60,60,58,55,50,45,44,45,44,43,42,40,43,49,51,52,51,49,45,41,39,39,41,46,50,51,49,45,42,40,37,38,41,47,53,55,57,58,59,57,55,51,46,47,49,49,48,46,43,46,50,52,52,50,46,43,39,38,40,42,48,51,52,51,47,43,41,37,38,40,44,49,51,53,54,55,55,55,52,50,51,53,53,52,50,50,51,53,54,53,50,45,41,39,39,40,43,48,51,51,51,47,44,44],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
