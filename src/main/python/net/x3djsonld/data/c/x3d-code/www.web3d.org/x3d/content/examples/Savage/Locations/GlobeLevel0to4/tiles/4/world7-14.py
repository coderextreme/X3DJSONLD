###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[138,95,11,-6,-48,-58,-62,-46,42,-3,-3085,-3318,-3450,-3887,-4264,-4460,-4494,-4396,-4110,-3675,-2000,-2043,8,-12,-3,-10,-32,-36,-46,-33,75,-2,-2692,-2346,-3504,-3568,-3544,-3970,-4189,-3795,-1984,-2636,-3136,-2582,-26,-36,-25,-23,-49,-85,-45,-51,105,-2,-1878,-1710,-2353,-2285,-2405,-2278,-2374,-2273,58,-210,-3719,-3232,-57,-50,-53,-41,-64,-53,-46,-18,9,-3,-1544,-1360,-1857,-2285,-2135,-1689,1,-677,-1861,-1801,-1660,-3797,-57,-46,-31,-49,-55,-45,-40,-17,-13,-2,-1168,-1306,-2076,-2133,-1209,28,-54,-2086,-2583,-3396,-3215,-3021,-50,-54,-4,-42,-44,-53,-39,-8,-3,-3,-431,-1581,-2298,112,656,-1337,-42,-2903,-2954,-3345,-3558,-3572,-67,-83,-42,-33,-48,-36,-34,-9,-6,-33,-69,-1774,-129,1216,52,-362,-1197,-1263,-1638,-3597,-3150,-2967,-120,-93,-70,-53,-44,-40,-33,9,42,-4,-93,-1261,13,205,-23,-411,-257,-479,-3595,-2553,-3528,-3341,-56,-105,-44,-30,-2,-29,9,27,10,23,-81,-211,1077,30,-12,-3,-516,-3231,-4000,-1937,-3973,-3636,-64,-88,-74,-32,5,13,34,19,9,26,-41,14,2530,-237,-4187,-4012,-4831,-4442,-4463,-4327,-3805,-3782,-41,-48,-103,-32,-10,11,20,14,48,25,10,724,1911,-3627,-5979,-4878,-4691,-4342,-4666,-4154,-184,-1189,-52,-13,-76,-34,-32,19,49,36,133,207,807,2594,403,-1533,-4598,-6692,-5266,-4816,-4380,-7966,6,-466,-243,-4,-34,-29,-39,25,24,76,294,1425,786,2242,1156,-1167,-3329,-1598,-6414,-5227,-5148,-5919,483,-959,-2802,-1,-35,-36,-14,14,36,52,1032,2725,1789,297,520,-302,86,555,181,-7556,-7800,-907,-1435,-2463,-3523,-3,-22,-10,20,15,71,1245,1332,2532,2073,-47,-1603,-1499,-389,-17,1169,-2319,-3258,-1856,-3139,-1721,-2809,-22,-177,22,21,53,1997,1030,820,506,43,42,-1875,-1830,-1442,-1388,415,100,-4680,-967,-2215,-1634,-1298,-42,34,206,569,2473,1781,191,41,27,35,-1151,-1889,-1975,-1345,-2218,-2244,174,-3787,-2086,-1883,-1614,-40,480,1974,3086,3375,1742,257,62,55,53,-576,-2087,-1996,-1338,-1828,-2328,-1951,-1584,-2888,-3741,-1972,-1760,423,745,769,723,742,57,387,171,506,56,-1839,-2154,-1957,-1085,-2281,-2653,-2051,-213,-12,-1802,-1940,-1857,99,-220,7,336,59,157,493,84,-1619,-2010,-1781,-2122,-1006,-1365,-2336,-1726,-20,-2016,-2973,-2636,-1819,-1799,25,-3,-60,473,286,186,-3,-2141,-3429,-2030,-1316,-1227,-106,-1511,-2214,19,-1459,-2056,-3661,-2575,-2037,-1703,104,-284,-4,0,47,-638,-2954,-3774,-2600,-1986,-741,-1124,4,-1079,-1464,-1295,-1856,-4065,24,-2746,-1957,-1700,2491,-4,-216,-214,-201,-4141,-3308,-3663,-4189,-1775,-735,-2223,-1692,-1770,-1709,-2060,-3513,-5520,-3888,-3358,-2168,-1805,2197,-4,-317,-419,-722,-4273,-3304,-3705,-4178,-343,-680,-2249,-1930,-1751,-1515,-2725,-4950,-5587,-4130,-3560,-2224,-1881],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
