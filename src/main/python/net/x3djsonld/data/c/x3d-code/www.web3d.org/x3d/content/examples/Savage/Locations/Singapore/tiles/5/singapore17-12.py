###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[27,27,28,28,27,27,30,35,39,42,39,32,29,29,32,35,38,40,44,51,55,55,57,60,63,65,68,72,74,74,75,76,77,80,81,77,30,29,31,31,30,29,31,34,37,40,36,31,29,28,29,32,34,36,40,46,49,49,52,58,63,69,71,72,72,71,71,71,72,74,76,74,35,32,34,35,34,32,32,32,33,34,33,31,29,28,28,31,33,35,38,43,46,48,53,60,68,75,79,79,79,77,75,73,71,71,71,71,38,33,35,37,36,33,32,31,31,32,32,31,29,28,28,29,31,35,38,41,45,48,54,61,68,75,79,80,80,78,76,73,70,67,65,66,39,33,34,36,35,34,32,30,30,32,32,31,29,27,27,27,30,35,39,41,45,48,53,59,64,68,70,71,72,74,75,72,67,62,58,59,40,33,34,35,35,37,35,31,31,32,32,31,29,28,27,27,30,35,39,42,45,47,51,55,59,61,63,64,65,68,69,67,64,57,52,53,42,33,33,34,38,43,41,37,34,32,31,31,29,28,28,28,30,35,39,43,45,45,47,49,53,55,57,57,58,59,60,59,58,52,48,49,45,34,33,34,39,45,43,40,36,32,31,30,29,28,28,27,29,34,38,43,45,43,43,44,47,49,51,52,52,52,52,53,52,48,44,46,49,36,35,36,38,41,40,38,35,32,30,29,27,26,26,25,28,33,38,42,44,42,41,41,42,44,45,48,49,48,48,47,46,44,41,41,52,39,38,37,37,37,37,36,33,30,28,27,25,25,24,24,27,32,37,41,42,41,40,40,40,41,42,46,48,47,47,44,43,41,39,38,54,44,41,39,36,34,32,31,28,26,25,25,25,25,25,25,27,31,35,39,41,40,40,40,41,41,43,47,49,50,50,47,44,42,39,37,55,46,42,38,34,30,28,27,24,22,22,23,24,25,26,27,28,29,32,36,38,38,38,39,40,41,43,48,51,51,51,48,44,42,39,37,53,43,38,33,30,26,25,24,23,20,20,22,23,24,26,28,29,29,29,32,33,34,35,36,38,40,43,48,51,50,50,46,43,41,40,37,51,38,34,30,26,23,23,22,21,20,20,21,22,24,27,29,30,29,28,29,29,31,32,34,36,39,43,48,51,49,48,44,41,40,39,37,48,33,30,28,25,22,22,23,21,19,20,21,24,26,28,31,31,31,30,29,29,30,31,32,34,40,44,48,50,48,46,42,38,37,36,36,47,30,28,27,25,22,22,24,22,20,21,23,26,29,31,32,33,33,32,30,29,30,31,32,34,39,44,47,49,47,44,39,35,34,34,35,49,31,29,27,26,23,23,25,24,23,24,26,29,32,34,35,35,35,34,32,32,32,32,32,34,38,43,44,45,43,41,36,32,32,33,35,50,34,30,27,26,24,24,25,25,26,27,29,31,34,36,37,37,37,36,35,34,34,34,33,34,37,40,41,41,39,37,34,31,32,33,36,50,37,30,26,24,22,22,23,24,27,29,31,33,36,38,39,39,38,37,37,37,37,36,35,35,36,36,35,34,34,33,32,32,33,34,36,48,38,30,24,22,20,20,21,24,27,30,33,35,38,39,40,39,39,39,39,39,39,38,37,36,35,34,31,30,31,32,33,34,36,37,38,45,35,28,22,20,19,20,21,24,27,30,33,36,38,39,39,39,39,39,40,40,40,40,39,38,36,35,33,32,33,33,34,36,39,41,41,41,32,26,20,19,19,20,22,25,27,30,33,35,37,38,39,39,39,39,40,41,42,42,42,41,39,38,36,36,36,36,37,39,42,45,45],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
