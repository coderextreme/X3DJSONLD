###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,-112.54166465504323,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[483,1090,1328,1471,1434,1285,1223,1109,959,901,819,791,597,450,277,121,109,90,35,55,76,128,502,588,1122,1118,1694,1398,1232,1286,956,1045,825,646,535,446,286,101,145,83,84,31,28,86,236,427,960,1088,1806,1348,1210,1633,1118,1103,930,709,479,340,243,135,137,97,104,36,33,55,289,441,990,1669,2373,1640,1324,1701,1166,1172,986,683,465,362,279,219,112,103,108,56,44,35,767,564,1633,2918,2263,1958,1941,1612,1212,1226,1037,765,456,301,229,214,139,101,93,77,53,44,1170,1280,2021,1836,2306,1795,2166,1794,1237,1267,1088,672,450,344,333,214,168,351,171,110,54,48,1495,1941,1563,1862,2243,1731,2135,1765,1526,1324,1098,823,542,497,332,249,202,196,336,92,62,66,1893,2319,1570,1910,2257,2530,1820,1971,1367,1098,961,882,650,489,386,276,208,122,224,186,66,66,1769,2117,1726,1834,1830,2015,2067,2073,1743,1312,1089,808,689,582,323,295,166,472,610,154,74,69,1725,1833,2024,1719,1746,2063,2488,2986,1896,1427,1076,902,725,397,349,294,250,401,408,226,155,143,1537,1347,2037,1617,1915,2021,3043,2667,2299,1318,1106,841,640,436,354,342,244,350,365,316,260,142,2369,1800,1322,1532,2207,2789,2818,3034,1627,1508,1075,883,733,528,411,395,292,295,378,399,370,256,1911,2385,1493,2480,2955,3043,2469,2637,1433,1242,1065,873,732,580,432,406,289,242,298,248,254,276,1999,2201,1486,1657,2767,2600,3674,1592,1529,1332,1147,906,666,562,468,380,318,251,255,209,220,158,1457,2226,2029,1384,1547,2172,3360,2838,1864,1408,1107,890,695,510,402,434,280,300,247,237,212,132,1398,1791,1765,2213,1874,2544,3197,1962,1724,1452,1156,929,672,479,484,436,314,267,200,241,197,148,1970,2486,2454,1635,1996,3217,3150,1757,1480,1366,1055,850,684,609,501,426,296,259,238,246,218,177,1405,3204,2611,1600,2020,2024,2922,1552,1365,1343,1056,844,720,610,492,408,299,278,313,222,189,145,1288,1952,3049,1948,2249,2407,2529,1855,1672,1269,1069,933,784,602,496,355,339,385,295,225,208,231,1282,2309,2023,2023,2139,2373,3243,1982,1611,1309,1106,955,795,580,468,360,386,371,266,249,167,219,1394,2817,2207,2031,2020,2270,2001,1601,1242,1266,1185,952,746,661,523,381,380,317,294,270,255,225,1856,1808,2498,2116,2248,1874,2203,1624,1471,1243,1156,934,796,607,513,332,401,343,342,280,309,242,1324,1947,2861,3076,1581,1969,1636,1521,1361,995,1051,865,698,509,495,373,410,341,333,338,291,329,1324,1903,2988,3329,1508,1895,1645,1484,1226,1022,1050,873,653,546,401,357,423,349,346,350,192,355],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
