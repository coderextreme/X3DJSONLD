###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-22.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.90582275083842,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[35,38,40,38,37,37,38,37,37,38,40,42,43,41,36,32,29,27,27,26,25,23,22,20,18,18,20,22,23,24,25,25,23,21,22,23,33,36,38,37,37,39,40,39,37,37,39,40,41,39,36,33,31,29,28,26,25,23,20,18,16,16,18,21,22,23,24,24,22,21,25,26,32,34,36,37,39,41,42,41,39,37,38,37,37,36,35,34,33,31,28,27,25,22,19,16,13,13,17,20,21,22,22,22,21,21,23,22,31,33,35,39,42,44,44,42,40,38,37,34,32,32,34,35,35,33,29,26,25,22,18,14,10,10,15,18,19,20,20,20,20,20,18,15,29,32,34,39,43,45,44,41,38,36,36,33,31,31,33,35,35,32,28,25,24,22,18,14,11,11,14,16,17,18,18,18,18,17,15,13,27,30,34,38,42,44,43,38,33,33,35,34,31,31,33,34,33,30,25,22,23,23,20,17,15,14,14,14,16,17,17,17,16,16,16,15,26,30,34,38,41,43,42,37,32,31,33,31,29,29,30,31,31,28,23,21,23,23,21,19,18,16,15,15,17,18,18,17,16,16,16,17,24,28,32,37,40,41,39,36,33,31,30,28,25,25,25,26,26,25,22,22,23,23,23,22,19,17,18,19,21,22,21,20,18,17,18,18,23,26,30,35,38,40,39,36,34,32,30,27,24,23,24,24,24,24,23,22,22,23,23,23,20,19,20,21,23,25,25,23,22,21,20,20,22,25,28,32,35,38,39,38,36,34,32,28,25,25,25,25,25,24,23,22,21,21,23,23,21,21,22,23,26,27,27,27,26,25,24,22,20,23,26,28,31,34,36,36,35,34,32,29,27,26,26,26,25,24,23,22,20,20,22,23,23,22,23,24,26,28,29,30,31,30,29,26,18,21,23,25,26,29,31,32,32,32,31,30,28,27,27,26,24,23,23,21,20,20,22,24,23,23,23,24,25,27,30,33,35,36,34,31,17,20,21,22,24,26,28,29,30,31,30,30,29,28,27,25,24,23,23,22,21,21,23,24,24,24,24,24,24,26,31,35,37,38,36,33,18,19,21,22,23,25,26,28,29,30,30,30,29,28,26,25,24,24,23,23,22,22,23,23,23,23,24,23,23,25,31,36,38,37,34,30,18,19,20,21,22,23,24,26,28,29,30,30,30,28,26,25,25,24,23,23,23,23,23,23,23,23,24,23,22,24,32,37,38,37,32,28,18,18,19,21,22,22,22,24,27,29,31,31,31,30,28,26,25,24,23,22,22,22,22,22,23,23,24,23,23,25,32,37,37,35,31,27,17,17,18,19,21,21,21,22,25,27,30,31,32,31,30,28,26,24,23,22,22,22,22,22,23,23,24,24,23,25,31,36,35,34,29,26,17,16,16,17,19,20,20,21,22,24,27,29,30,31,32,31,27,25,23,23,23,23,23,23,23,23,24,24,23,23,28,31,33,32,28,24,16,15,15,16,18,19,19,20,21,23,25,28,30,33,35,34,30,26,24,23,23,23,24,24,23,24,25,25,23,23,25,28,30,31,27,24,15,15,15,16,18,18,18,20,21,24,27,30,33,36,39,37,32,28,25,23,23,24,25,25,24,24,25,26,25,24,25,26,29,30,27,24,15,14,14,16,18,18,18,19,21,24,27,31,35,38,41,40,35,30,26,24,24,25,26,27,27,26,27,27,26,25,25,26,28,29,27,24,15,14,15,16,18,18,18,19,20,22,25,30,34,39,42,41,37,33,28,26,26,27,29,31,32,32,30,29,27,26,26,26,28,28,27,25,15,14,14,15,17,17,18,18,19,21,24,28,33,38,41,42,40,37,32,30,29,30,32,35,36,36,33,30,27,26,26,26,27,28,27,26],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
