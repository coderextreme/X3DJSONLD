###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  head=head(
    children=[
    meta(content='SoccerBall.x3d',name='title'),
    meta(content='Soccer Ball',name='description'),
    meta(content='LT Christos Kalogrias - Hellenic Navy',name='creator'),
    meta(content='5 September 2003',name='created'),
    meta(content='12 November 2003',name='modified'),
    meta(content='http://www.scienceu.com/geometry/facts/solids/L-tr_icosa.html',name='reference'),
    meta(content='https://savage.nps.edu/Savage/Buildings/SoccerStadium/SoccerBall.x3d',name='identifier'),
    meta(content='http://www.web3d.org/x3d/content/README.X3D-Edit.html',name='generator'),
    meta(content='../../license.html',name='license')]),
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(DEF='Ball',
        children=[
        Shape(DEF='Hexagon',
          appearance=Appearance(
            material=Material(diffuseColor=(0.9,0.9,0.9))),
          geometry=IndexedFaceSet(coordIndex=[7,0,54,23,13,30,-1,51,25,42,18,16,44,-1,31,32,3,24,21,49,-1,28,1,53,12,47,57,-1,45,38,43,3,24,40,-1,37,17,33,52,15,20,-1,18,59,39,38,43,42,-1,28,1,58,4,6,36,-1,25,51,52,15,31,32,-1,11,26,7,0,50,27,-1,34,19,30,13,12,53,-1,10,14,45,40,4,58,-1,41,22,56,35,47,57,-1,2,36,6,21,49,29,-1,44,9,8,50,27,16,-1,20,37,22,41,2,29,-1,26,11,59,39,5,55,-1,5,55,19,34,10,14,-1,48,46,54,23,35,56,-1,9,8,46,48,17,33,-1,0,7,26,11,27,50,-1,57,47,35,56,22,41,-1],
            coord=Coordinate(point=[(-0.265,0.328,-0.695),(-0.164,-0.796,0.000),(0.594,-0.531,0.164),(0.0,0.164,0.796),(-0.164,-0.594,0.531),(-0.796,0.0,0.164),(0.164,-0.594,0.531),(-0.531,0.164,-0.594),(0.164,0.594,-0.531),(0.328,0.695,-0.265),(-0.594,-0.531,0.164),(-0.594,0.531,-0.164),(-0.164,-0.594,-0.531),(-0.265,-0.328,-0.695),(-0.695,-0.265,0.328),(0.695,0.265,0.328),(-0.164,0.796,0.000),(0.695,0.265,-0.328),(-0.328,0.695,0.265),(-0.695,-0.265,-0.328),(0.796,0.0,0.164),(0.265,-0.328,0.695),(0.695,-0.265,-0.328),(0.0,-0.164,-0.796),(0.0,-0.164,0.796),(0.164,0.594,0.531),(-0.695,0.265,-0.328),(-0.328,0.695,-0.265),(0.164,-0.796,0.000),(0.695,-0.265,0.328),(-0.531,-0.164,-0.594),(0.531,0.164,0.594),(0.265,0.328,0.695),(0.594,0.531,-0.164),(-0.594,-0.531,-0.164),(0.265,-0.328,-0.695),(0.328,-0.695,0.265),(0.796,0.0,-0.164),(-0.531,0.164,0.594),(-0.695,0.265,0.328),(-0.265,-0.328,0.695),(0.594,-0.531,-0.164),(-0.164,0.594,0.531),(-0.265,0.328,0.695),(0.164,0.796,0.000),(-0.531,-0.164,0.594),(0.265,0.328,-0.695),(0.164,-0.594,-0.531),(0.531,0.164,-0.594),(0.531,-0.164,0.594),(-0.164,0.594,-0.531),(0.328,0.695,0.265),(0.594,0.531,0.164),(-0.328,-0.695,-0.265),(0.0,0.164,-0.796),(-0.796,0.0,-0.164),(0.531,-0.164,-0.594),(0.328,-0.695,-0.265),(-0.328,-0.695,0.265),(-0.594,0.531,0.164)]))),
        Shape(DEF='Pentagon',
          appearance=Appearance(
            material=Material(diffuseColor=(0.1,0.1,0.1))),
          geometry=IndexedFaceSet(coordIndex=[18,59,11,27,16,-1,48,17,37,22,56,-1,21,24,40,4,6,-1,44,9,33,52,51,-1,5,39,38,45,14,-1,43,3,32,25,42,-1,13,23,35,47,12,-1,49,31,15,20,29,-1,19,30,7,26,55,-1,57,28,36,2,41,-1,46,54,0,50,8,-1,53,1,58,10,34,-1,7,30,19,55,26,-1,52,33,9,44,51,-1],
            coord=Coordinate(point=[(-0.265,0.328,-0.695),(-0.164,-0.796,0.000),(0.594,-0.531,0.164),(0.0,0.164,0.796),(-0.164,-0.594,0.531),(-0.796,0.0,0.164),(0.164,-0.594,0.531),(-0.531,0.164,-0.594),(0.164,0.594,-0.531),(0.328,0.695,-0.265),(-0.594,-0.531,0.164),(-0.594,0.531,-0.164),(-0.164,-0.594,-0.531),(-0.265,-0.328,-0.695),(-0.695,-0.265,0.328),(0.695,0.265,0.328),(-0.164,0.796,0.000),(0.695,0.265,-0.328),(-0.328,0.695,0.265),(-0.695,-0.265,-0.328),(0.796,0.0,0.164),(0.265,-0.328,0.695),(0.695,-0.265,-0.328),(0.0,-0.164,-0.796),(0.0,-0.164,0.796),(0.164,0.594,0.531),(-0.695,0.265,-0.328),(-0.328,0.695,-0.265),(0.164,-0.796,0.000),(0.695,-0.265,0.328),(-0.531,-0.164,-0.594),(0.531,0.164,0.594),(0.265,0.328,0.695),(0.594,0.531,-0.164),(-0.594,-0.531,-0.164),(0.265,-0.328,-0.695),(0.328,-0.695,0.265),(0.796,0.0,-0.164),(-0.531,0.164,0.594),(-0.695,0.265,0.328),(-0.265,-0.328,0.695),(0.594,-0.531,-0.164),(-0.164,0.594,0.531),(-0.265,0.328,0.695),(0.164,0.796,0.000),(-0.531,-0.164,0.594),(0.265,0.328,-0.695),(0.164,-0.594,-0.531),(0.531,0.164,-0.594),(0.531,-0.164,0.594),(-0.164,0.594,-0.531),(0.328,0.695,0.265),(0.594,0.531,0.164),(-0.328,-0.695,-0.265),(0.0,0.164,-0.796),(-0.796,0.0,-0.164),(0.531,-0.164,-0.594),(0.328,-0.695,-0.265),(-0.328,-0.695,0.265),(-0.594,0.531,0.164)])))]),
      Transform(rotation=(1,0,0,3.14),
        children=[
        Transform(USE='Ball')]),
      Transform(rotation=(0,1,0,3.14),
        children=[
        Transform(USE='Ball')]),
      Transform(rotation=(1,0,0,3.14),
        children=[
        Transform(USE='Ball')])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful for SoccerBall.py")
