###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore3-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.238458400333982,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[8,10,9,8,7,6,4,2,0,0,0,0,0,0,0,-1,-3,-7,-11,-16,-17,-16,-7,4,15,22,28,29,28,23,18,12,7,6,4,3,8,8,8,7,7,6,4,2,0,-1,-1,-1,0,0,0,0,-2,-5,-9,-14,-13,-7,2,12,19,21,24,28,29,25,21,15,10,8,6,4,4,4,4,5,5,4,3,2,-1,-5,-5,-4,-3,-1,0,0,0,-2,-4,-6,-4,2,10,15,18,20,21,23,23,19,16,12,9,7,5,4,1,0,1,2,3,3,2,1,-3,-10,-10,-8,-6,-4,-2,0,0,0,0,0,4,11,17,17,18,18,18,17,16,14,12,10,8,6,5,4,-8,-9,-5,0,1,2,1,0,-3,-8,-10,-9,-8,-7,-5,-2,0,0,1,5,9,13,18,18,18,18,17,17,16,14,12,10,8,6,5,3,-20,-20,-11,-2,0,0,0,-1,-3,-5,-8,-11,-11,-10,-8,-5,-2,0,3,9,14,15,18,18,18,18,17,16,15,13,12,10,8,6,5,3,-24,-26,-19,-10,-5,0,0,-1,-3,-5,-8,-11,-11,-10,-9,-8,-4,0,4,11,16,16,18,18,18,17,16,15,14,13,11,9,8,6,3,1,-27,-31,-25,-17,-10,-2,-1,-1,-3,-5,-7,-9,-11,-11,-11,-10,-6,0,5,13,17,17,18,18,17,17,16,15,14,12,11,9,7,5,2,0,-27,-30,-27,-24,-17,-9,-5,-2,-3,-5,-7,-9,-10,-12,-12,-11,-7,0,6,14,18,18,18,17,17,16,15,14,13,12,11,8,6,3,1,1,-26,-28,-30,-31,-25,-17,-10,-3,-3,-4,-6,-8,-10,-11,-12,-11,-8,0,6,14,18,18,17,17,16,16,15,14,13,12,10,8,5,1,0,1,-26,-28,-30,-31,-27,-23,-17,-9,-5,-4,-5,-7,-9,-10,-11,-11,-8,0,6,14,16,15,12,11,9,9,9,8,8,7,7,6,4,3,2,3,-26,-28,-29,-30,-30,-30,-25,-17,-10,-4,-4,-5,-8,-10,-11,-11,-7,0,6,14,15,12,7,3,0,0,0,0,0,1,1,2,4,6,7,7,-26,-28,-29,-30,-31,-31,-28,-23,-17,-9,-6,-5,-6,-8,-10,-9,-6,0,4,10,10,7,2,0,0,0,0,0,0,0,0,1,3,5,7,8,-26,-27,-28,-30,-31,-31,-30,-30,-24,-17,-10,-4,-4,-7,-8,-7,-4,0,3,5,4,2,0,0,-1,-1,0,0,0,0,0,1,2,4,6,7,-26,-27,-28,-29,-30,-31,-31,-31,-28,-24,-17,-10,-6,-5,-5,-5,-3,0,1,2,1,0,0,-1,-1,-1,-1,0,0,0,0,1,1,3,5,7,-25,-27,-28,-29,-30,-31,-31,-31,-31,-30,-24,-17,-10,-4,-3,-2,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,1,1,3,4,7,-25,-27,-28,-29,-30,-31,-31,-32,-32,-32,-28,-23,-17,-9,-5,-3,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,1,2,3,3,6,-25,-26,-27,-29,-29,-30,-31,-32,-32,-32,-31,-30,-24,-16,-10,-4,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,1,2,2,2,4,-25,-26,-27,-29,-29,-30,-31,-31,-32,-32,-32,-32,-28,-23,-16,-7,-3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,1,1,4,-25,-26,-27,-28,-29,-30,-30,-31,-31,-32,-32,-31,-30,-29,-22,-12,-6,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2,-1,0,1,1,1,3,-21,-22,-23,-24,-25,-26,-26,-27,-27,-28,-28,-29,-29,-29,-24,-13,-7,-3,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,0,1,2,3,4,-14,-16,-17,-18,-18,-19,-19,-20,-20,-21,-22,-23,-24,-24,-20,-12,-7,-3,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3,-3,-3,-2,0,2,6,9,8,-9,-10,-11,-12,-12,-13,-13,-14,-14,-14,-15,-17,-18,-19,-15,-9,-6,-3,-3,-3,-3,-3,-3,-3,-4,-4,-4,-4,-4,-3,-3,0,3,8,11,10],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
