###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world3-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-56.291665660871615,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4467,-4507,-4511,-4470,-4488,-4486,-4496,-4540,-4670,-4751,-4789,-4815,-4789,-4783,-4855,-4759,-4691,-4660,-4606,-4330,-4355,-4210,-4359,-4443,-4427,-4522,-4427,-4375,-4456,-4422,-4599,-4641,-4775,-4750,-4674,-4744,-4819,-4775,-4541,-4434,-4440,-4341,-4379,-4237,-4264,-4237,-4463,-4477,-4395,-4347,-4386,-4350,-4469,-4522,-4733,-4755,-4599,-4602,-4705,-4896,-4491,-4428,-4369,-4357,-4137,-4018,-4075,-4271,-4457,-4376,-4397,-4101,-4263,-4250,-4436,-4596,-4598,-4620,-4572,-4610,-4541,-4497,-4403,-4437,-4318,-4195,-4178,-3987,-4020,-4121,-4305,-4331,-4308,-4356,-4193,-4110,-4342,-4307,-4412,-4408,-4545,-4644,-4459,-4469,-4397,-4347,-4367,-4160,-4120,-3729,-3768,-3947,-4066,-3968,-4217,-4399,-4244,-4278,-4301,-4262,-4522,-4332,-4572,-4547,-4434,-4260,-4390,-4187,-4201,-4203,-3948,-3991,-3578,-3850,-3980,-4030,-4164,-4069,-3768,-4175,-4387,-4353,-4184,-4628,-4612,-4583,-4415,-4237,-4217,-4128,-3969,-3889,-4049,-3808,-3711,-3812,-3843,-4077,-3987,-4315,-4122,-4129,-4363,-4561,-4457,-4565,-4142,-4573,-4545,-4048,-4104,-3976,-3845,-3844,-3742,-3665,-3550,-3780,-3816,-3869,-3864,-4048,-4252,-4133,-4110,-4454,-4256,-4443,-4657,-4564,-4414,-4116,-3987,-3831,-3788,-3697,-3622,-3626,-3554,-3706,-3573,-3656,-3696,-3782,-3962,-4171,-3891,-4281,-4109,-3926,-4387,-4452,-4173,-3818,-3756,-3838,-3686,-3639,-3516,-3471,-3637,-3618,-3567,-3447,-3461,-3820,-3792,-3755,-3684,-4238,-4065,-4478,-4354,-4222,-3917,-3865,-3695,-3613,-3620,-3484,-3541,-3403,-3743,-3555,-3634,-3712,-3686,-3693,-3624,-3646,-3868,-4146,-4246,-4507,-4050,-4480,-4141,-3631,-3392,-3587,-3474,-3364,-3178,-3278,-3351,-3295,-3461,-3491,-4154,-3745,-3419,-3652,-3611,-3741,-3875,-4192,-3889,-4124,-4238,-3295,-3416,-3414,-3363,-3400,-3232,-3030,-3039,-3182,-3400,-3200,-3700,-3821,-3496,-3467,-4238,-3464,-3473,-4143,-3760,-3665,-4182,-3314,-3267,-3188,-3443,-3123,-2821,-3021,-3209,-3580,-3313,-3077,-3714,-3934,-3475,-3324,-3157,-3597,-3586,-3822,-3380,-4178,-4234,-3611,-3584,-3572,-3598,-3637,-3329,-3304,-3385,-3635,-3657,-3469,-3761,-3944,-3680,-3752,-3968,-3702,-3770,-3626,-4365,-3794,-4493,-3543,-3770,-3785,-3736,-3562,-3533,-3482,-3506,-3581,-3692,-3503,-3674,-4079,-3615,-3836,-3682,-4571,-4107,-4389,-3598,-4308,-3964,-3952,-3893,-3926,-3804,-3732,-3672,-3585,-3600,-3582,-3356,-3639,-3709,-3248,-3545,-3926,-3998,-4427,-4092,-3713,-3945,-4175,-3958,-4451,-3935,-4079,-3898,-3965,-3851,-3785,-3721,-3724,-3890,-3707,-3842,-3813,-3868,-3983,-3989,-3849,-3582,-4268,-4135,-4298,-4478,-4146,-4142,-4096,-4100,-4073,-3910,-3942,-3843,-3753,-3948,-4007,-4036,-3758,-3700,-4009,-3869,-4201,-4385,-4077,-4315,-4160,-3559,-4005,-4202,-4139,-4176,-4201,-4108,-4096,-3931,-3983,-3917,-3960,-4054,-3973,-3927,-4170,-4146,-4271,-4532,-4135,-4606,-4123,-3883,-4287,-4248,-4369,-4296,-4230,-4229,-4206,-4008,-3968,-3939,-4032,-4018,-3971,-4041,-4197,-4354,-4222,-4388,-4252,-4132,-4823,-4175,-4094,-4340,-4380,-4412,-4343,-4323,-4279,-4089,-3955,-3928,-4164,-4100,-4042,-4159,-4080,-4299,-4556,-4107,-4517,-4008,-4229,-4247,-4191,-4473,-4477,-4524,-4519,-4459,-4473,-4056,-4031,-3994,-4192,-4057,-4065,-4164,-4089,-4313,-4475,-4198,-4483,-4507,-4414,-4614,-4516,-4271,-4506,-4606,-4526,-4478,-4465],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
