###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[30,29,29,29,29,31,34,34,34,34,35,40,47,53,58,61,64,70,79,89,103,112,116,117,111,105,97,90,81,73,65,58,51,45,35,28,27,30,30,29,30,30,32,33,34,34,34,35,40,48,53,57,61,65,72,80,91,104,114,119,120,116,110,104,97,89,80,71,63,57,50,40,31,30,31,31,31,32,33,33,32,32,32,32,34,40,50,56,60,66,73,81,89,98,108,116,120,122,118,115,110,104,97,89,78,68,63,57,47,38,35,31,32,33,33,34,32,30,31,32,32,33,39,48,54,58,66,76,85,94,101,110,117,121,123,121,118,115,110,103,95,84,74,68,62,52,43,38,30,31,32,32,31,30,29,31,33,33,33,36,40,46,51,61,72,83,91,100,109,116,121,124,124,122,119,115,107,99,89,80,72,65,55,46,39,28,29,30,30,29,29,28,30,31,32,32,33,35,39,47,56,68,79,89,98,108,116,123,127,127,125,122,119,111,103,95,87,78,69,58,49,40,26,26,27,26,26,27,27,28,29,30,30,31,32,36,44,54,65,76,87,96,107,116,125,130,130,128,125,122,115,107,101,94,85,76,64,52,42,24,24,24,25,25,26,27,27,28,29,30,30,31,35,41,50,61,72,82,92,103,114,124,131,132,131,128,125,118,112,106,99,90,81,69,57,45,24,23,23,24,25,26,27,27,28,29,30,31,33,35,40,47,57,67,75,85,97,108,122,130,133,133,131,128,122,116,108,100,92,84,73,62,49,24,24,23,24,26,26,27,27,28,29,29,31,33,35,38,44,53,62,71,80,92,104,118,128,132,135,133,131,126,120,110,101,93,85,75,65,52,26,25,25,25,26,27,29,29,29,29,29,30,32,33,35,41,50,59,68,77,89,101,113,123,129,133,133,132,129,123,113,103,94,85,75,65,54,29,27,26,26,26,28,29,30,30,29,29,30,32,33,34,39,47,56,64,74,86,97,109,118,125,130,132,132,129,124,115,106,95,86,75,64,55,30,27,25,25,26,27,28,29,29,30,31,32,33,34,34,38,45,52,61,71,83,95,105,113,119,123,127,129,127,124,116,108,97,87,75,64,53,31,28,25,25,26,26,27,28,29,31,33,34,36,36,37,40,44,50,59,69,81,92,101,108,114,119,124,127,126,122,116,109,98,89,76,64,51,30,28,25,25,25,26,26,28,31,33,34,37,39,42,43,45,48,52,60,68,79,88,97,104,111,118,123,126,125,121,114,108,99,91,78,64,48,28,27,26,25,25,26,26,28,31,33,34,37,40,45,48,50,52,56,61,69,78,86,93,101,109,117,122,125,123,118,112,105,98,91,78,65,47,27,26,26,25,25,26,27,29,30,31,32,35,38,43,47,53,57,62,67,73,81,87,94,101,108,116,120,123,118,112,106,100,94,88,78,67,49,26,26,26,25,25,27,29,28,28,29,30,33,36,40,47,54,62,69,73,79,85,90,96,102,108,114,117,118,112,106,100,95,89,83,76,68,50,26,26,26,25,25,27,28,28,27,28,29,32,36,41,47,57,68,76,82,88,92,97,100,104,108,111,111,109,105,100,95,90,82,76,70,64,50,26,26,26,25,25,26,28,27,27,28,29,32,36,41,48,58,71,81,90,95,99,103,106,108,108,108,104,100,97,94,90,85,76,69,64,59,48,25,25,25,24,24,25,26,26,27,28,29,31,36,41,48,58,71,83,93,100,104,107,110,110,107,103,97,92,90,87,83,78,71,66,60,55,45,23,23,23,23,23,23,24,25,27,28,29,31,35,40,47,57,70,82,93,100,105,109,112,112,106,99,92,85,83,81,77,72,67,63,57,50,41],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
