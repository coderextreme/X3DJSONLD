###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoLOD(center=(41.45218369329644,-71.21962002677857,0.0),range=12300.69,child1Url=['../../tiles/4/newport6-12.x3d'],child2Url=['../../tiles/4/newport6-13.x3d'],child3Url=['../../tiles/4/newport7-12.x3d'],child4Url=['../../tiles/4/newport7-13.x3d'],
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(41.5,-71.5,0),geoSystem=['GDC']),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/newport3-6.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(41.40380382238266,-71.26358768093407,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=55,xSpacing=0.0016284316,zDimension=52,zSpacing=0.0018972498,height=[-26,-25,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-25,-25,-24,-24,-24,-24,-24,-23,-22,-22,-22,-22,-23,-23,-23,-24,-24,-24,-24,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-22,-22,-25,-25,-25,-26,-26,-25,-26,-26,-26,-26,-26,-26,-26,-26,-25,-25,-25,-25,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-24,-24,-24,-24,-24,-24,-24,-24,-25,-24,-23,-24,-23,-23,-23,-23,-23,-22,-22,-22,-22,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-26,-26,-26,-25,-25,-25,-24,-24,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-22,-23,-23,-23,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-23,-23,-22,-22,-22,-22,-22,-22,-22,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-26,-25,-25,-25,-24,-24,-23,-22,-21,-21,-21,-21,-21,-22,-22,-22,-22,-22,-22,-22,-22,-23,-23,-23,-24,-24,-23,-23,-23,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-22,-22,-22,-25,-25,-25,-25,-25,-25,-24,-25,-25,-25,-25,-25,-25,-25,-25,-25,-24,-23,-23,-20,-18,-19,-22,-22,-22,-21,-22,-22,-22,-21,-21,-21,-21,-22,-22,-22,-22,-21,-20,-18,-20,-22,-22,-21,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-25,-24,-25,-25,-25,-25,-24,-24,-24,-24,-25,-25,-25,-25,-24,-24,-24,-23,-23,-22,-18,-19,-21,-22,-22,-22,-22,-22,-22,-22,-22,-22,-21,-21,-21,-21,-21,-21,-22,-23,-22,-22,-21,-20,-21,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-25,-24,-24,-25,-25,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-23,-23,-23,-22,-23,-22,-22,-21,-21,-21,-22,-22,-22,-22,-22,-22,-21,-21,-21,-21,-21,-21,-22,-22,-23,-22,-20,-20,-20,-21,-21,-21,-22,-22,-22,-22,-22,-22,-22,-22,-25,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-22,-22,-22,-23,-22,-21,-21,-21,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-21,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-20,-20,-24,-24,-24,-24,-24,-24,-24,-24,-23,-24,-24,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-21,-21,-22,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-22,-22,-22,-22,-22,-22,-22,-23,-23,-23,-22,-22,-22,-22,-22,-22,-22,-23,-23,-24,-24,-24,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-22,-22,-23,-23,-23,-22,-22,-22,-22,-22,-22,-23,-23,-24,-24,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-23,-23,-22,-22,-23,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-20,-20,-20,-21,-21,-21,-21,-21,-20,-20,-21,-21,-21,-22,-22,-22,-22,-22,-22,-23,-22,-22,-23,-23,-24,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-20,-20,-19,-20,-21,-21,-20,-20,-20,-21,-21,-20,-21,-21,-21,-22,-22,-22,-22,-22,-23,-23,-23,-23,-23,-24,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-23,-23,-22,-22,-21,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-18,-18,-19,-20,-21,-21,-21,-22,-22,-22,-22,-22,-22,-22,-22,-22,-24,-24,-23,-23,-24,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-22,-22,-23,-22,-22,-22,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-19,-19,-17,-16,-18,-19,-20,-20,-21,-21,-21,-21,-22,-21,-22,-22,-22,-22,-22,-22,-24,-24,-23,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-19,-19,-20,-20,-20,-21,-20,-20,-20,-20,-21,-20,-20,-21,-22,-22,-22,-22,-22,-24,-23,-23,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-22,-21,-21,-22,-22,-22,-22,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-20,-20,-20,-20,-20,-20,-19,-19,-20,-19,-15,-16,-16,-20,-21,-21,-21,-21,-23,-23,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-19,-20,-20,-20,-19,-19,-19,-19,-19,-18,-20,-20,-19,-20,-19,-20,-20,-20,-23,-23,-23,-23,-23,-23,-23,-23,-23,-22,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-19,-19,-19,-18,-17,-17,-18,-18,-20,-20,-20,-20,-19,-20,-20,-19,-19,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-22,-22,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-19,-20,-20,-19,-20,-19,-19,-20,-19,-19,-18,-17,-17,-15,-14,-16,-17,-19,-20,-20,-20,-20,-20,-20,-18,-18,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-21,-20,-20,-20,-20,-20,-19,-19,-19,-19,-19,-19,-18,-15,-12,-13,-13,-10,-13,-15,-18,-19,-19,-20,-20,-20,-20,-20,-20,-17,-18,-21,-22,-22,-22,-22,-22,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-18,-19,-19,-19,-19,-18,-15,-14,-9,-8,-7,-11,-14,-13,-16,-17,-18,-19,-19,-19,-19,-19,-19,-16,-17,-18,-20,-21,-21,-21,-21,-21,-21,-21,-21,-20,-18,-19,-19,-19,-19,-20,-20,-20,-19,-19,-20,-19,-19,-19,-20,-19,-20,-19,-19,-19,-19,-19,-18,-18,-17,-15,-15,-13,-11,-9,-10,-12,-13,-16,-16,-15,-18,-19,-19,-19,-19,-19,-14,-14,-17,-19,-20,-20,-21,-21,-21,-20,-20,-20,-19,-17,-18,-18,-18,-19,-19,-19,-19,-19,-20,-20,-20,-20,-20,-19,-19,-19,-19,-19,-18,-18,-19,-19,-18,-17,-17,-16,-15,-14,-12,-9,-14,-15,-16,-16,-17,-17,-17,-17,-18,-19,-19,-11,-12,-15,-19,-20,-21,-21,-21,-20,-20,-19,-19,-18,-18,-18,-18,-17,-17,-18,-19,-19,-19,-19,-19,-18,-19,-19,-20,-19,-19,-18,-18,-18,-18,-18,-18,-18,-17,-16,-13,-8,-8,-9,-8,-13,-13,-14,-15,-16,-16,-16,-14,-13,-17,-17,-12,-11,-12,-15,-18,-19,-20,-19,-19,-19,-19,-19,-19,-19,-18,-18,-17,-16,-17,-18,-18,-19,-18,-19,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-18,-17,-16,-12,-9,-1,-4,-1,-1,-7,-10,-13,-14,-15,-15,-16,-17,-16,-18,-18,-13,-10,-11,-14,-18,-19,-19,-18,-19,-19,-19,-19,-19,-19,-18,-17,-16,-13,-15,-17,-18,-18,-18,-18,-17,-16,-17,-18,-18,-18,-18,-18,-18,-18,-17,-17,-16,-13,-8,-3,0,-1,-2,-1,-1,-5,-13,-13,-14,-14,-15,-16,-15,-17,-17,-13,-11,-10,-12,-16,-17,-18,-18,-19,-19,-19,-19,-19,-19,-19,-18,-17,-16,-15,-16,-17,-17,-18,-18,-18,-18,-19,-19,-18,-18,-18,-18,-18,-17,-17,-16,-15,-8,-5,-3,-2,-1,-1,-2,-4,-8,-10,-11,-11,-14,-14,-15,-16,-16,-16,-13,-11,-9,-9,-15,-17,-17,-18,-18,-18,-18,-18,-18,-18,-19,-18,-18,-17,-17,-16,-17,-17,-17,-18,-18,-19,-18,-18,-18,-18,-17,-17,-17,-17,-16,-15,-13,-7,-3,-2,-1,0,0,0,-2,-6,-8,-9,-11,-12,-13,-14,-14,-14,-14,-15,-12,-7,-7,-16,-17,-17,-17,-17,-17,-3,-17,-18,-18,-18,-18,-18,-18,-17,-16,-17,-17,-17,-17,-18,-18,-18,-18,-18,-18,-18,-17,-17,-16,-16,-15,-11,-6,-3,-3,-1,-2,-1,0,0,-5,-6,-7,-8,-9,-10,-11,-11,-11,-11,-17,-11,-5,-7,-14,-15,-17,-17,-16,-13,-8,-16,-17,-18,-18,-18,-18,-19,-18,-17,-17,-17,-17,-17,-17,-18,-18,-17,-17,-17,-17,-17,-16,-16,-15,-14,-12,-8,-6,-5,-5,-4,-1,0,0,0,-1,-2,-3,-5,-5,-5,-5,-6,-5,-17,-14,-4,-7,-13,-10,-15,-15,-15,-12,-7,-11,-15,-16,-18,-18,-18,-18,-18,-18,-17,-17,-17,-17,-17,-17,-17,-17,-17,-17,-16,-17,-16,-15,-15,-14,-12,-11,-10,-10,-7,-3,0,0,0,0,0,0,0,0,0,0,-2,0,0,-16,-12,-6,-7,-11,-10,-14,-14,-14,-12,-11,-14,-16,-16,-17,-17,-18,-18,-18,-18,-17,-16,-17,-17,-17,-17,-16,-17,-17,-16,-16,-16,-16,-15,-15,-14,-13,-12,-11,-10,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-16,-12,-6,-7,-12,-14,-14,-13,-13,-12,-13,-15,-16,-16,-17,-17,-17,-18,-18,-18,-17,-17,-17,-16,-17,-17,-16,-16,-16,-16,-16,-16,-15,-15,-14,-14,-13,-12,-11,-10,-8,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-16,-15,-7,-8,-13,-15,-15,-13,-13,-13,-13,-14,-16,-17,-16,-16,-17,-17,-17,-17,-17,-17,-17,-16,-16,-17,-16,-16,-16,-16,-16,-15,-15,-15,-14,-14,-13,-12,-11,-10,-9,-4,-4,-2,0,0,0,0,0,0,0,0,0,0,0,-16,-17,-9,-8,-13,-14,-15,-12,-12,-12,-12,-12,-14,-15,-16,-16,-16,-17,-17,-17,-17,-17,-16,-16,-16,-16,-16,-16,-16,-16,-15,-15,-15,-15,-14,-14,-13,-12,-9,-10,-9,-7,-6,-2,0,0,0,0,0,0,0,0,0,0,0,-16,-16,-14,-7,-11,-14,-14,-13,-12,-12,-10,-11,-12,-14,-15,-15,-15,-16,-16,-16,-17,-17,-16,-16,-16,-16,-16,-16,-15,-15,-15,-15,-15,-14,-14,-13,-13,-12,-12,-11,-10,-10,-7,0,0,0,0,0,0,0,0,0,0,0,0,-15,-15,-15,-12,-8,-11,-11,-9,-9,-9,0,-4,-9,-12,-14,-14,-15,-15,-16,-16,-16,-16,-16,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-14,-14,-13,-13,-12,-12,-11,-10,-9,-7,-3,0,0,0,0,0,0,0,0,0,0,0,-14,-14,-14,-14,-7,-9,-9,-6,-4,-6,0,0,-3,-6,-7,-12,-14,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-14,-14,-14,-13,-13,-13,-12,-12,-11,-10,-7,-4,-1,0,0,0,0,0,0,0,0,0,0,0,-13,-13,-13,-13,-11,-8,-7,-4,-2,-3,-1,0,0,0,-1,-5,-12,-13,-14,-14,-14,-14,-14,-14,-15,-14,-14,-14,-14,-14,-14,-14,-14,-14,-13,-13,-12,-12,-11,-10,-9,-6,-5,-2,0,0,0,0,0,0,0,0,0,0,0,-11,-12,-11,-11,-11,-10,-7,-6,-1,-2,-1,0,0,0,0,-1,-10,-12,-13,-13,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-13,-13,-13,-12,-12,-11,-11,-10,-7,-6,-3,-1,0,0,0,0,0,0,0,0,0,0,-10,-10,-10,-10,-9,-7,-7,-6,-3,-2,-2,-1,0,0,0,-1,-4,-9,-12,-12,-13,-13,-13,-13,-13,-13,-14,-14,-13,-13,-13,-13,-13,-13,-13,-12,-12,-11,-11,-10,-9,-8,-7,-4,0,0,0,0,0,0,0,0,0,0,0,-8,-8,-8,-7,-7,-6,-5,-5,-4,-2,-1,0,0,0,0,0,0,-1,-4,-10,-12,-12,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-12,-12,-11,-11,-10,-9,-9,-8,-5,-4,0,0,0,0,0,0,0,0,0,0,0,-6,-6,-6,-6,-5,-4,-4,-2,-1,0,0,0,0,0,0,0,0,-1,-2,-5,-10,-11,-12,-12,-13,-13,-13,-12,-13,-12,-12,-12,-12,-12,-12,-11,-11,-9,-8,-9,-8,-7,-6,-4,-3,0,0,0,0,0,0,0,0,0,0,-5,-4,-4,-3,-3,-2,-1,0,0,0,0,0,0,0,0,0,0,-1,-3,-6,-9,-11,-12,-12,-12,-12,-12,-12,-12,-12,-12,-11,-11,-11,-11,-11,-10,-8,-7,-5,-5,-4,-3,-2,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-1,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-2,-3,-5,-7,-5,-10,-11,-12,-12,-12,-12,-12,-12,-11,-11,-11,-11,-11,-10,-10,-9,-8,-6,-5,-3,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-3,-3,-4,-5,-6,-8,-10,-10,-11,-11,-11,-11,-11,-11,-11,-11,-11,-10,-10,-10,-9,-9,-9,-7,-5,-2,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2,-3,-4,-4,-5,-6,-7,-7,-8,-10,-10,-11,-11,-11,-11,-11,-11,-11,-11,-10,-10,-9,-6,-7,-7,-6,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-3,-4,-4,-5,-6,-6,-6,-6,-9,-9,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-9,-4,-3,-5,-5,-4,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,-4,-5,-5,-6,-7,-8,-8,-8,-9,-9,-9,-10,-10,-10,-10,-10,-10,-10,-10,-8,-4,-3,-2,-2,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,-5,-6,-6,-6,-7,-7,-8,-8,-8,-9,-9,-9,-10,-10,-9,-10,-10,-9,-8,-5,-2,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-6,-6,-6,-6,-7,-7,-8,-8,-8,-9,-9,-9,-9,-9,-9,-9,-9,-8,-7,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-6,-6,-6,-6,-7,-7,-8,-8,-8,-9,-9,-9,-9,-9,-9,-9,-9,-8,-7,-3,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
