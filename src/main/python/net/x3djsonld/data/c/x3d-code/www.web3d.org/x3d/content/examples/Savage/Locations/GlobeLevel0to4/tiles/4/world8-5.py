###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[98,84,79,53,46,24,52,169,184,190,71,33,332,138,118,15,15,22,11,52,32,-1,96,120,70,53,40,33,52,81,147,205,143,135,414,287,122,-1,24,15,-10,20,-3,-23,105,430,38,71,36,54,38,77,117,268,197,219,537,155,115,19,16,4,3,-29,-18,-48,81,91,77,79,56,40,38,137,143,162,219,238,524,289,240,39,24,-4,-7,-43,-32,-69,109,99,159,84,64,62,51,112,155,244,266,340,356,220,489,106,4,-7,-29,-22,-30,-985,105,91,550,134,210,90,51,92,209,594,257,336,343,449,164,157,5,-27,-32,-46,-1136,-3213,129,105,120,561,120,550,68,131,262,405,286,336,364,288,174,165,8,-24,-31,-27,-2505,-3388,130,101,150,370,607,209,102,140,267,257,290,361,366,316,171,220,-4,-23,-63,-923,-3198,-3643,131,89,136,315,844,302,104,108,194,244,221,621,206,191,154,97,-38,-69,-83,-1497,-3349,-3749,107,109,127,1046,520,329,98,85,421,212,221,259,379,164,238,105,-42,-104,-115,-1606,-3312,-3701,97,115,1382,808,645,278,107,101,86,113,237,195,153,132,135,50,-76,-102,-552,-2059,-3442,-3831,106,100,450,1136,484,541,230,648,227,119,208,136,145,147,119,16,-180,-285,-1232,-2396,-3515,-3863,111,1216,217,607,458,594,895,714,483,87,77,141,56,91,64,-4,-80,-2175,-2435,-2807,-3679,-3860,91,469,242,345,326,610,861,949,360,31,21,54,46,118,33,0,-209,-3137,-3228,-3385,-3723,-4043,85,1090,339,303,495,581,1322,702,128,59,7,17,8,10,-74,-88,-2794,-3440,-3626,-3746,-3817,-4013,71,527,576,150,472,549,197,108,138,47,-28,-72,-4,-88,-4,-2125,-3434,-3711,-3825,-3985,-3962,-4197,72,55,325,69,299,406,171,168,121,4,-100,-86,-117,-41,-130,-3316,-3896,-3981,-4010,-4073,-4137,-4268,54,40,46,124,273,252,157,162,145,-68,-95,-107,-114,-64,-699,-3911,-4214,-4143,-4193,-4218,-4292,-4346,54,36,40,57,149,254,296,72,19,-4,-197,-1524,-1252,-593,-1133,-4041,-4332,-4386,-4425,-4356,-4455,-4473,54,47,61,129,38,251,136,12,-4,-73,-1818,-2406,-1731,-1178,-2265,-4587,-4452,-4420,-4468,-4568,-4529,-4262,67,114,165,218,164,37,15,-5,-58,-1994,-2473,-3035,-2932,-1295,-4608,-4650,-4585,-4628,-4672,-4587,-4648,-4698,84,141,117,177,173,3,6,-30,-332,-2443,-3035,-3354,-3421,-4551,-4658,-4819,-4738,-4797,-4699,-4804,-4776,-4783,259,209,190,123,202,14,12,-63,-1147,-2774,-3385,-3589,-3938,-4607,-4860,-4856,-4815,-4799,-4787,-4892,-4990,-4721,505,244,233,125,192,15,32,-43,-1310,-2812,-3450,-3705,-4009,-4555,-4819,-4868,-4857,-4804,-4824,-4848,-5032,-4709],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
