###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore28-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4567512097838313,103.61856206825804,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[55,59,61,58,53,45,37,33,31,29,27,30,33,37,40,38,32,27,22,21,20,21,24,26,27,27,26,26,29,33,36,37,32,26,22,19,46,50,53,49,45,39,34,31,30,29,28,28,31,33,36,34,29,25,21,21,20,21,24,26,28,28,28,28,30,32,34,34,29,25,22,21,37,40,43,40,36,33,30,30,29,29,28,28,28,29,31,29,26,23,21,20,20,22,24,27,29,30,30,29,30,31,31,30,26,22,22,23,31,33,35,33,30,30,30,30,29,28,26,26,25,25,26,25,23,22,21,21,22,23,24,26,28,29,30,30,30,29,29,27,24,23,25,29,26,27,28,26,24,26,28,29,30,28,25,23,22,21,21,21,21,21,22,23,24,24,24,25,27,28,29,30,29,27,26,24,23,25,30,35,27,27,27,25,23,24,27,28,28,26,23,22,21,21,21,21,22,23,23,25,27,27,26,26,28,29,29,30,29,28,27,26,25,28,34,41,29,29,28,25,21,23,25,26,26,24,22,22,21,21,22,23,25,25,25,27,29,29,27,27,30,30,30,30,29,28,28,28,28,31,38,47,30,30,29,25,21,22,23,24,24,23,22,22,22,23,25,27,29,29,27,28,30,30,29,29,32,32,32,31,29,28,28,29,30,33,41,48,30,31,30,26,22,21,21,22,22,22,22,23,24,26,29,31,33,32,29,29,32,32,32,32,34,34,34,32,29,28,28,29,32,36,42,47,27,28,27,24,21,21,21,23,24,26,28,29,31,32,34,35,36,34,32,33,35,37,37,38,38,37,34,32,29,28,29,31,34,39,45,49,23,22,22,21,20,21,23,25,28,31,35,37,38,39,40,39,38,37,35,37,39,42,44,44,43,39,35,32,30,29,30,33,37,43,48,51,21,20,20,22,24,25,26,29,32,37,43,46,48,47,47,44,40,39,38,40,44,47,50,50,47,43,37,33,32,32,34,38,43,49,53,54,19,19,21,26,31,31,29,32,35,43,51,56,59,57,54,49,42,40,41,44,48,52,56,56,51,46,40,36,35,36,40,46,52,57,59,58,19,21,23,29,36,35,33,34,37,45,54,60,64,61,56,51,44,43,45,48,51,54,57,58,55,50,43,38,36,38,44,52,59,64,66,65,21,23,26,32,39,38,36,36,37,44,54,60,65,62,55,50,46,47,49,51,51,53,57,58,58,53,46,41,38,40,48,57,65,71,73,71,24,26,29,33,38,38,36,36,36,42,50,56,62,59,53,50,48,50,54,55,54,55,58,59,59,55,47,41,38,39,46,54,63,71,75,77,26,28,31,34,38,36,33,33,34,38,43,49,55,54,49,48,49,53,58,60,59,59,60,60,60,55,46,40,36,36,41,47,56,65,75,81,27,29,31,33,35,34,32,32,33,36,39,44,50,49,45,45,47,53,60,63,62,62,63,63,61,56,47,41,37,36,39,45,53,64,75,83,27,28,30,31,31,32,32,32,33,35,38,41,44,43,41,41,43,51,60,64,64,65,66,65,62,58,50,43,38,36,39,46,56,68,78,85,27,28,29,30,30,32,34,34,35,36,37,40,44,43,41,41,41,47,56,59,61,62,65,65,64,60,52,45,39,37,40,47,57,67,75,81,28,28,29,30,32,35,38,39,40,39,39,42,46,46,45,43,40,42,46,49,50,54,60,63,64,61,54,47,40,37,40,46,53,60,65,69,28,29,29,32,34,37,41,43,45,44,42,45,50,51,51,47,40,38,40,41,42,47,53,58,60,59,52,45,40,38,40,45,49,53,57,61,28,28,29,32,35,39,42,45,48,49,49,51,54,56,56,50,41,37,36,37,38,41,47,50,51,49,44,40,38,38,41,44,45,47,50,55],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
