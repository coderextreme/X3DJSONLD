###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-90.04166398449098,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4174,-4055,-4114,-3979,-4236,-4088,-3993,-4053,-3897,-4110,-4139,-4072,-3809,-2753,-2968,-435,-403,-298,-562,-769,-123,-453,-4399,-4258,-4316,-4178,-4193,-4246,-4292,-4218,-4124,-4190,-4062,-3747,-3553,-3515,-3027,-3079,-355,-440,-517,-349,487,-346,-4429,-4509,-4493,-4481,-4411,-4449,-4255,-4314,-4222,-4097,-4071,-3918,-3893,-3229,-3154,-3464,-3424,-433,-512,-396,-294,-2,-4368,-4531,-4490,-4452,-4408,-4471,-4453,-4329,-4215,-4258,-4116,-3963,-3783,-3451,-3696,-3856,-3620,-2807,-493,-427,-540,-506,-4063,-4588,-4501,-4450,-4458,-4542,-4489,-4394,-4370,-4230,-4107,-3948,-3800,-4237,-4027,-3641,-3278,-3357,-3030,-356,-288,-467,-530,-4591,-4614,-4600,-4532,-4500,-4473,-4430,-4340,-4203,-4147,-4055,-4111,-4029,-3961,-3767,-3735,-3423,-3172,-2756,-392,-309,-4578,-4451,-4742,-4661,-4615,-4556,-4545,-4531,-4335,-4197,-4314,-4184,-3983,-3845,-3960,-3870,-3705,-3587,-3447,-2805,-2673,-321,-4468,-4688,-4749,-4709,-4683,-4635,-4596,-4506,-4391,-4231,-4211,-4105,-4042,-4019,-3951,-3736,-3829,-3740,-3420,-3479,-3223,-2687,-4737,-4753,-4705,-4787,-4720,-4664,-4656,-4562,-4422,-4308,-4149,-4334,-4136,-4079,-3962,-3791,-3803,-3730,-3633,-3402,-3190,-3178,-4618,-4781,-4765,-4768,-4781,-4723,-4734,-4659,-4575,-4510,-4436,-4188,-4457,-4334,-4146,-4010,-3865,-3887,-3853,-3767,-3613,-3595,-4730,-4713,-4738,-4814,-4760,-4760,-4743,-4724,-4654,-4601,-4652,-4653,-3969,-4473,-4342,-3997,-4088,-4035,-4016,-3963,-3970,-3752,-4774,-4844,-4804,-4851,-4854,-4848,-4779,-4718,-4736,-4744,-4789,-4823,-4539,-4533,-4385,-4165,-4267,-4208,-4107,-4078,-3782,-3797,-4776,-4798,-4840,-4804,-4817,-4864,-4755,-4896,-4765,-4836,-4852,-4773,-4859,-4462,-4588,-4512,-4339,-4260,-4166,-4086,-3961,-3889,-4851,-4903,-4840,-4800,-4895,-4785,-4904,-4856,-4861,-4885,-4945,-4742,-4831,-4521,-4646,-4352,-4348,-4330,-4177,-4175,-4192,-3939,-4906,-4948,-4594,-4851,-4568,-4892,-4362,-4918,-4950,-4949,-4949,-4890,-4845,-4668,-4511,-4394,-4449,-4224,-3988,-4229,-3889,-4069,-5092,-5240,-4865,-3571,-5271,-5166,-5024,-4955,-4948,-5003,-5013,-4909,-4838,-4666,-4564,-4472,-4458,-4074,-4229,-4345,-3993,-3336,-5136,-4724,-4930,-4577,-5031,-5005,-5017,-5061,-5102,-5064,-5022,-4931,-4871,-4767,-4694,-4779,-4649,-4188,-4276,-3992,-3755,-3539,-4818,-4951,-4960,-5264,-5058,-5058,-5101,-5061,-5084,-5388,-5026,-4960,-4831,-4959,-4827,-4594,-4709,-4256,-3872,-3820,-3537,-2892,-5013,-4737,-4871,-5068,-4980,-5113,-5089,-5130,-4947,-4895,-4936,-4904,-5025,-4941,-4901,-4398,-4353,-4324,-3927,-3743,-3771,-3819,-4851,-4878,-5178,-5072,-5166,-5118,-5177,-4960,-4582,-4888,-4888,-5116,-4808,-4692,-4763,-4669,-4620,-4114,-3992,-3767,-3799,-3686,-4640,-4872,-5231,-5184,-5278,-5144,-5389,-5088,-4836,-4906,-4741,-4525,-4587,-4717,-4528,-4725,-4144,-4061,-3936,-3921,-3838,-3908,-5103,-5083,-5081,-5019,-5214,-4936,-4530,-5058,-5088,-4324,-4897,-4633,-4574,-4458,-4658,-4227,-4151,-3607,-3854,-3844,-3861,-4385,-4959,-5219,-5279,-5335,-5475,-5059,-4729,-4912,-4709,-4205,-4739,-4568,-4531,-4397,-3918,-4057,-4131,-3668,-3509,-4406,-3954,-40,-4996,-5244,-5471,-5251,-5472,-5169,-4954,-4731,-4764,-4069,-4777,-4593,-4516,-4305,-4323,-4154,-4133,-3557,-3701,-4335,-1568,-211],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
