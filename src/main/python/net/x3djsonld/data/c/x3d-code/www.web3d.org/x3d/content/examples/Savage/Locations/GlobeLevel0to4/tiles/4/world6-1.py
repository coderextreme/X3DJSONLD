###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4554,-4852,-4876,-4564,-4751,-4584,-4677,-4572,-4584,-4357,-4367,-4419,-4446,-4802,-4768,-4690,-4268,-4346,-4051,-4111,-3173,-3817,-5002,-4402,-4676,-4904,-4107,-4880,-4126,-4607,-4710,-4595,-4893,-4388,-3992,-4697,-4944,-4582,-4304,-4249,-4322,-2855,-4207,-3887,-4924,-4921,-4810,-4434,-4273,-4680,-2758,-4549,-4623,-4936,-4613,-4711,-4277,-4552,-4107,-4547,-4302,-4014,-3992,-4085,-3980,-3831,-4835,-4908,-4651,-4231,-4583,-4483,-4240,-4785,-4810,-4749,-4910,-3497,-4250,-4344,-4604,-4289,-3741,-2296,-3971,-3770,-2415,-2550,-4914,-4820,-2611,-4810,-4824,-4464,-4522,-4445,-4850,-4599,-4736,-4445,-4288,-4584,-4148,-4345,-3209,-4173,-4085,-2280,-1341,-3322,-4748,-4432,-4773,-4740,-4560,-4406,-4589,-4118,-4725,-4554,-4283,-4433,-4259,-4478,-4404,-4438,-4198,-4381,-4483,-2168,-3976,-4115,-3770,-4184,-4703,-4708,-4642,-4503,-3810,-3860,-4570,-4583,-4429,-4568,-3668,-1657,-4274,-4536,-4568,-2978,-4304,-3923,-4005,-3899,-2885,-4795,-4634,-4657,-4621,-4736,-4326,-4683,-3055,-3521,-4401,-4372,-4285,-3448,-4360,-4082,-3866,-4012,-2719,-3962,-4292,-4094,-4729,-4589,-4715,-4717,-4649,-4198,-4020,-4392,-3464,-3507,-4430,-4268,-4703,-4453,-4304,-4554,-3109,-2409,-4068,-3303,-3540,-3491,-4029,-4540,-4530,-4678,-4613,-4328,-3944,-4167,-3951,-4290,-4348,-4339,-4401,-4397,-4499,-1971,-4170,-4156,-3962,-3333,-2891,-2579,-4632,-4772,-4715,-4490,-4550,-4261,-3789,-4115,-4111,-4242,-4347,-4230,-4536,-4319,-4491,-4101,-3502,-1566,-3672,-2509,-2830,-3553,-4655,-4679,-4783,-3829,-4575,-4431,-3820,-3324,-3357,-3822,-4195,-4266,-3969,-4019,-588,-3171,-2641,-3283,-3030,-2911,-3274,-4018,-4895,-4822,-4861,-4714,-4385,-4207,-3826,-2277,-3223,-3882,-3158,-3985,-4025,-522,-1811,-3221,-3620,-2861,-2472,-3249,-3729,-4409,-4949,-4757,-5102,-4397,-4333,-3648,-2709,-3737,-4013,-4207,-4395,-2721,-448,-1602,-2649,-3262,-2845,-2357,-3113,-3726,-4319,-4363,-4679,-4913,-3317,-4415,-4437,-2994,-3407,-4213,-4278,-4240,-1501,-415,-978,-2010,-2361,-2139,-2049,-2637,-3476,-4233,-4498,-4390,-4971,-4739,-4343,-3668,-4329,-4211,-4067,-4275,-4312,-4177,-1145,-1193,-1331,-2265,-2,-1319,-550,-3223,-3769,-4258,-4413,-4259,-5430,-4747,-4726,-3641,-4409,-4440,-4281,-4364,-4322,-2074,-121,-1551,-3427,-3939,-3025,-2107,-2046,-3508,-4164,-4338,-4510,-4266,-4279,-4946,-4701,-4645,-4687,-4748,-4289,-4392,-2582,-10,-2687,-2758,-548,-3940,-2863,-2285,-2708,-3691,-4261,-3401,-3802,-4475,-4822,-4979,-5019,-4836,-5001,-4678,-4426,-1251,-1858,-2374,-2954,-2855,-2598,-3644,-3989,-3037,-2511,-3922,-4183,-4209,-4248,-4311,-5203,-5050,-5106,-5043,-5065,-4721,-4492,-2579,-4115,-4096,-4631,-4583,-3784,-3735,-4379,-3658,-3870,-4020,-4142,-4207,-3714,-4166,-5221,-5200,-5136,-5228,-5157,-4977,-4722,-3074,-4612,-3443,-4779,-4399,-4403,-4506,-4502,-4332,-3985,-4028,-4173,-4192,-4398,-4291,-5242,-5124,-5124,-5360,-5047,-4976,-4492,-3596,-4734,-4065,-4807,-4884,-4884,-3974,-4614,-4274,-4095,-3845,-4146,-4138,-4358,-4383,-5200,-5159,-4843,-5269,-5247,-4957,-5252,-3932,-4861,-5107,-4757,-4887,-4753,-5037,-5271,-4026,-4209,-4074,-4162,-4188,-4257,-4395,-5186,-5126,-4958,-5287,-5233,-5011,-4998,-4381,-4777,-4950,-4977,-4822,-4814,-4858,-5104,-3989,-4305,-4056,-4086,-3734,-4330,-4412],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
