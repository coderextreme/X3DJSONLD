###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoLOD(center=(41.40380382238266,-71.17565237262308,0.0),range=24601.38,child1Url=['../../tiles/3/newport2-6.x3d'],child2Url=['../../tiles/3/newport2-7.x3d'],child3Url=['../../tiles/3/newport3-6.x3d'],child4Url=['../../tiles/3/newport3-7.x3d'],
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(41.5,-71.5,0),geoSystem=['GDC']),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/2/newport1-3.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(41.30704408055511,-71.26358768093407,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=53,xSpacing=0.0033821273,zDimension=52,zSpacing=0.0037944997,height=[-34,-35,-34,-33,-33,-32,-32,-32,-31,-31,-31,-31,-32,-33,-33,-34,-34,-33,-34,-34,-33,-32,-31,-31,-32,-30,-28,-28,-28,-28,-29,-30,-31,-29,-29,-30,-30,-31,-31,-32,-32,-30,-30,-31,-30,-31,-30,-30,-29,0,0,0,0,-34,-35,-34,-34,-33,-32,-32,-32,-32,-31,-31,-31,-31,-32,-32,-32,-33,-33,-33,-33,-33,-32,-31,-31,-31,-28,-27,-27,-27,-28,-29,-30,-30,-30,-30,-30,-31,-31,-31,-32,-31,-30,-30,-30,-30,-30,-29,-30,-29,0,0,0,0,-35,-35,-35,-34,-33,-32,-32,-31,-31,-31,-31,-31,-31,-31,-31,-31,-32,-33,-33,-34,-33,-32,-32,-33,-33,-31,-29,-29,-28,-28,-29,-30,-30,-30,-30,-30,-31,-31,-31,-31,-31,-29,-25,-26,-24,-24,-25,-25,-24,0,0,0,0,-35,-35,-35,-34,-33,-32,-31,-31,-31,-31,-31,-31,-31,-31,-30,-31,-32,-32,-34,-35,-35,-35,-34,-34,-35,-35,-35,-33,-31,-29,-29,-29,-29,-29,-30,-30,-31,-31,-30,-30,-29,-27,-27,-25,-23,-22,-23,-22,-23,0,0,0,0,-35,-35,-35,-35,-35,-34,-33,-32,-31,-31,-31,-31,-31,-31,-30,-30,-30,-32,-34,-35,-36,-36,-36,-36,-36,-36,-35,-34,-33,-31,-30,-29,-29,-29,-29,-29,-30,-30,-29,-28,-27,-25,-24,-25,-22,-20,-21,-20,-22,0,0,0,0,-34,-34,-34,-34,-34,-34,-34,-34,-33,-33,-33,-32,-32,-32,-32,-31,-31,-31,-32,-33,-35,-35,-35,-35,-35,-35,-35,-34,-34,-33,-32,-30,-30,-29,-29,-29,-30,-30,-29,-28,-27,-24,-24,-25,-25,-22,-20,-18,-19,0,0,0,0,-32,-33,-33,-33,-33,-34,-34,-35,-35,-35,-36,-36,-36,-35,-34,-32,-31,-31,-31,-31,-31,-32,-33,-34,-34,-34,-34,-33,-32,-31,-29,-26,-27,-29,-31,-31,-30,-29,-29,-28,-27,-28,-26,-26,-27,-24,-22,-18,-17,0,0,0,0,-31,-31,-31,-31,-32,-33,-34,-34,-35,-34,-34,-35,-35,-36,-36,-35,-33,-32,-31,-31,-31,-31,-32,-31,-31,-31,-31,-31,-31,-31,-31,-32,-30,-28,-26,-27,-29,-30,-29,-28,-27,-28,-27,-26,-25,-21,-27,-26,-19,0,0,0,0,-30,-30,-30,-30,-30,-31,-32,-33,-32,-33,-34,-34,-34,-35,-35,-35,-35,-35,-34,-33,-33,-33,-32,-31,-31,-30,-30,-30,-29,-29,-30,-30,-30,-30,-30,-30,-30,-30,-27,-26,-27,-27,-27,-27,-26,-26,-27,-22,-28,0,0,0,0,-29,-29,-29,-29,-30,-30,-30,-30,-30,-31,-31,-32,-32,-33,-33,-33,-33,-33,-34,-34,-34,-34,-34,-34,-32,-31,-30,-30,-29,-29,-29,-29,-29,-29,-29,-28,-28,-27,-24,-26,-27,-26,-26,-27,-28,-28,-27,-26,-27,0,0,0,0,-28,-28,-29,-29,-29,-29,-29,-29,-29,-29,-29,-30,-30,-30,-30,-30,-31,-31,-30,-30,-31,-31,-32,-32,-33,-32,-31,-30,-29,-28,-28,-28,-28,-28,-28,-28,-28,-28,-27,-26,-26,-26,-26,-26,-27,-27,-28,-29,-30,0,0,0,0,-29,-28,-28,-29,-28,-28,-25,-28,-29,-29,-29,-28,-29,-29,-29,-29,-29,-29,-28,-27,-27,-29,-30,-30,-31,-30,-31,-31,-30,-30,-29,-28,-28,-28,-27,-26,-26,-28,-27,-26,-25,-25,-25,-26,-26,-27,-27,-28,-29,0,0,0,0,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-27,-28,-28,-27,-27,-27,-25,-24,-26,-28,-28,-29,-29,-29,-29,-29,-30,-30,-30,-29,-29,-29,-29,-27,-27,-27,-27,-26,-25,-25,-25,-25,-26,-26,-26,-27,-27,0,0,0,0,-29,-28,-28,-28,-28,-28,-28,-28,-28,-27,-28,-27,-27,-27,-27,-27,-27,-27,-26,-26,-26,-27,-27,-27,-27,-28,-27,-28,-29,-30,-30,-30,-30,-30,-30,-29,-28,-28,-27,-27,-27,-26,-25,-24,-24,-23,-23,-24,-24,0,0,0,0,-29,-29,-28,-28,-28,-27,-27,-27,-27,-27,-27,-27,-27,-26,-26,-26,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-27,-28,-28,-29,-30,-30,-30,-30,-30,-30,-30,-30,-29,-28,-27,-25,-24,-23,-23,-22,-23,-23,-24,0,0,0,0,-29,-28,-28,-28,-28,-28,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-26,-27,-27,-27,-27,-26,-26,-25,-25,-25,-26,-27,-28,-29,-30,-30,-30,-30,-30,-30,-30,-30,-30,-28,-27,-25,-24,-23,-23,-22,-23,-23,-23,0,0,0,0,-28,-28,-28,-28,-28,-28,-27,-27,-27,-27,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-25,-25,-25,-25,-26,-27,-28,-29,-30,-30,-30,-30,-30,-30,-29,-29,-28,-27,-25,-24,-24,-23,-23,-23,-23,-23,0,0,0,0,-28,-28,-28,-28,-28,-28,-27,-27,-27,-26,-26,-26,-26,-26,-26,-26,-26,-25,-26,-25,-26,-26,-26,-25,-25,-25,-24,-25,-25,-27,-28,-27,-27,-27,-27,-27,-28,-28,-27,-26,-26,-25,-25,-24,-24,-23,-23,-23,-23,0,0,0,0,-28,-28,-28,-27,-28,-28,-27,-27,-27,-26,-26,-26,-26,-26,-26,-26,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-24,-24,-24,-24,-25,-25,-25,-26,-26,-26,-26,-26,-26,-25,-25,-25,-25,-25,-24,-23,-23,-24,-24,0,0,0,0,-28,-27,-27,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-25,-25,-25,-25,-25,-25,-25,-24,-24,-24,-24,-24,-24,-24,-24,-23,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-23,-24,-24,-24,0,0,0,0,-28,-27,-27,-27,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-25,-25,-25,-25,-24,-24,-24,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-24,-24,-23,-24,-24,-25,-25,0,0,0,0,-27,-27,-27,-27,-27,-27,-27,-28,-28,-27,-27,-26,-26,-26,-25,-25,-25,-25,-25,-25,-24,-24,-24,-24,-23,-22,-22,-23,-23,-22,-22,-17,-21,-21,-22,-22,-23,-23,-23,-23,-23,-23,-24,-24,-24,-24,-25,-25,-26,0,0,0,0,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-25,-25,-25,-24,-23,-24,-24,-23,-23,-22,-22,-22,-21,-20,-21,-21,-22,-23,-22,-21,-22,-22,-22,-22,-22,-22,-23,-23,-23,-24,-24,-23,-23,-24,0,0,0,0,-27,-27,-27,-27,-27,-27,-26,-26,-26,-26,-26,-25,-25,-25,-25,-25,-25,-25,-24,-24,-23,-22,-22,-23,-23,-23,-23,-23,-22,-22,-22,-22,-22,-21,-21,-22,-22,-22,-22,-22,-22,-23,-24,-23,-23,-23,-23,-22,-22,0,0,0,0,-27,-26,-27,-27,-27,-26,-26,-26,-26,-25,-25,-25,-23,-24,-24,-25,-25,-25,-24,-23,-22,-20,-22,-23,-24,-23,-23,-23,-22,-22,-22,-22,-21,-21,-21,-21,-21,-22,-22,-22,-22,-21,-23,-23,-23,-23,-22,-22,-22,0,0,0,0,-26,-26,-26,-26,-26,-26,-26,-26,-25,-24,-24,-24,-22,-22,-23,-24,-24,-24,-24,-24,-23,-23,-23,-23,-23,-23,-22,-22,-22,-22,-21,-21,-21,-19,-18,-21,-21,-21,-21,-21,-21,-19,-19,-22,-21,-22,-23,-22,-22,0,0,0,0,-25,-25,-25,-26,-25,-25,-26,-25,-24,-23,-23,-23,-22,-22,-22,-23,-23,-24,-24,-24,-24,-24,-23,-23,-23,-22,-22,-22,-22,-22,-21,-20,-21,-21,-22,-21,-21,-21,-21,-21,-20,-20,-22,-21,-21,-22,-21,-22,-22,0,0,0,0,-25,-25,-25,-24,-25,-25,-25,-25,-24,-20,-20,-22,-21,-21,-21,-21,-22,-22,-20,-20,-22,-22,-22,-22,-22,-22,-22,-23,-23,-22,-21,-21,-21,-20,-20,-21,-20,-20,-20,-20,-20,-21,-21,-21,-21,-20,-18,-19,-21,0,0,0,0,-25,-25,-25,-24,-24,-24,-24,-24,-23,-23,-22,-21,-22,-22,-22,-21,-21,-21,-22,-22,-20,-21,-22,-22,-22,-22,-20,-21,-23,-23,-23,-22,-22,-21,-20,-19,-16,-18,-19,-20,-21,-21,-21,-21,-21,-18,-20,-20,-20,0,0,0,0,-24,-24,-24,-24,-24,-23,-23,-23,-22,-22,-21,-21,-21,-21,-21,-21,-21,-22,-22,-22,-22,-23,-22,-22,-22,-22,-24,-24,-24,-24,-24,-24,-23,-21,-20,-18,-16,-19,-19,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,0,0,0,0,-24,-24,-24,-23,-23,-23,-23,-22,-22,-21,-21,-21,-21,-21,-21,-20,-21,-21,-21,-19,-21,-22,-22,-22,-22,-23,-23,-23,-23,-23,-24,-24,-23,-22,-21,-21,-20,-20,-19,-19,-19,-20,-20,-20,-20,-19,-20,-19,-19,0,0,0,0,-24,-24,-24,-23,-23,-23,-22,-22,-23,-22,-21,-21,-21,-21,-20,-20,-19,-20,-19,-18,-20,-21,-22,-22,-22,-22,-22,-22,-22,-22,-23,-23,-23,-23,-23,-22,-22,-20,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,0,0,0,0,-24,-23,-23,-23,-23,-22,-22,-22,-22,-22,-21,-21,-21,-20,-20,-20,-19,-19,-20,-20,-20,-20,-21,-21,-22,-22,-22,-21,-21,-21,-22,-22,-22,-22,-22,-22,-19,-20,-19,-19,-19,-18,-19,-19,-19,-17,-17,-18,-18,0,0,0,0,-24,-23,-23,-23,-21,-22,-22,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-20,-20,-20,-20,-20,-20,-20,-20,-21,-22,-22,-22,-22,-20,-18,-18,-18,-18,-18,-18,-18,-18,-17,-17,-17,-18,0,0,0,0,-23,-23,-23,-22,-22,-22,-21,-21,-21,-21,-21,-21,-20,-20,-20,-20,-20,-20,-19,-18,-15,-16,-19,-20,-20,-20,-16,-20,-20,-18,-19,-20,-22,-21,-21,-21,-22,-21,-20,-19,-18,-18,-17,-18,-18,-17,-16,-18,-18,0,0,0,0,-17,-22,-22,-22,-21,-21,-21,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-19,-17,-8,-7,-12,-17,-19,-19,-19,-20,-19,-20,-20,-20,-19,-21,-21,-20,-20,-21,-21,-20,-19,-18,-18,-17,-17,-17,-17,-18,-18,-18,0,0,0,0,-14,-18,-20,-21,-21,-20,-18,-18,-19,-19,-19,-20,-18,-19,-19,-18,-19,-18,-17,-14,-12,-14,-16,-17,-17,-18,-19,-19,-19,-19,-18,-16,-19,-20,-19,-20,-21,-20,-20,-20,-19,-18,-18,-17,-17,-17,-18,-18,-18,0,0,0,0,-12,-14,-19,-20,-19,-19,-18,-18,-17,-18,-19,-19,-19,-19,-19,-18,-18,-17,-14,-4,-1,-8,-14,-15,-17,-17,-18,-18,-18,-17,-17,-20,-19,-19,-19,-20,-20,-20,-20,-20,-19,-19,-18,-18,-18,-18,-18,-18,-17,0,0,0,0,-11,-9,-17,-18,-19,-19,-19,-18,-15,-16,-17,-18,-19,-19,-18,-18,-17,-15,-1,-2,-1,-3,-10,-12,-15,-16,-17,-17,-17,-16,-16,-19,-19,-19,-19,-19,-19,-20,-20,-20,-20,-19,-19,-19,-18,-18,-18,-18,-16,0,0,0,0,-14,-6,-16,-17,-17,-15,-18,-18,-18,-16,-17,-17,-18,-18,-17,-17,-16,-13,-4,-2,-1,0,-7,-9,-11,-12,-12,-13,-12,-11,-18,-17,-17,-17,-18,-18,-18,-19,-19,-20,-20,-19,-19,-19,-19,-19,-18,-18,-14,0,0,0,0,-17,-4,-13,-15,-13,-12,-16,-18,-18,-18,-17,-17,-17,-17,-17,-16,-15,-13,-10,-7,0,0,0,0,0,-2,-4,-1,0,-9,-12,-16,-16,-14,-17,-17,-17,-18,-19,-19,-19,-19,-20,-19,-19,-18,-18,-17,-13,0,0,0,0,-15,-5,-11,-14,-13,-14,-16,-17,-18,-18,-17,-16,-17,-16,-16,-15,-15,-13,-11,-8,0,0,0,0,0,0,0,0,-4,-10,-12,-14,-15,-16,-16,-17,-17,-18,-18,-18,-18,-19,-19,-19,-20,-19,-19,-18,-12,0,0,0,0,-16,-7,-14,-14,-13,-11,-15,-16,-17,-17,-17,-16,-16,-16,-16,-15,-14,-13,-12,-10,-6,0,0,0,0,0,0,0,-4,-7,-9,-10,-13,-14,-14,-16,-16,-16,-16,-17,-18,-18,-18,-18,-19,-19,-19,-18,-11,0,0,0,0,-15,-14,-10,-11,-11,-4,-12,-14,-16,-16,-16,-16,-15,-15,-15,-15,-14,-13,-12,-10,-7,0,0,0,0,0,0,0,0,-1,0,-7,-10,-12,-10,-12,-14,-16,-14,-15,-15,-17,-17,-17,-18,-18,-19,-16,-10,0,0,0,0,-13,-13,-9,-5,-3,0,0,-5,-13,-14,-14,-15,-14,-15,-14,-14,-13,-12,-12,-9,-5,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-3,-7,-13,-12,-13,-14,-16,-16,-16,-16,-16,-17,-17,-15,-9,0,0,0,0,-10,-10,-8,-6,-2,-1,0,0,-10,-12,-13,-14,-13,-13,-13,-13,-13,-12,-11,-9,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,-5,-6,-14,-14,-13,-13,-15,-16,-16,-16,-15,-14,-8,0,0,0,0,-7,-6,-5,-3,0,0,0,0,-1,-7,-12,-13,-13,-13,-12,-12,-12,-11,-9,-8,-6,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,-11,-12,-13,-14,-13,-14,-15,-14,-14,-13,-7,0,0,0,0,-3,-1,0,0,0,0,0,-1,-3,-7,-11,-12,-12,-11,-11,-11,-10,-10,-6,-4,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,-9,-10,-12,-13,-13,-13,-12,-12,-12,-11,-6,0,0,0,0,0,0,0,0,0,0,-3,-4,-6,-7,-10,-11,-11,-11,-11,-10,-8,-7,-3,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-3,-6,-7,-10,-11,-11,-10,-6,-10,-9,-10,-4,0,0,0,0,0,0,0,0,0,0,-4,-5,-7,-8,-9,-9,-10,-10,-10,-10,-4,-3,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,-5,-6,-7,-3,-2,-5,-6,-9,-3,0,0,0,0,0,0,0,0,0,0,0,-6,-6,-7,-8,-8,-9,-9,-9,-9,-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-4,-3,-8,-2,0,0,0,0,0,0,0,0,0,0,0,-6,-6,-7,-8,-8,-9,-9,-9,-9,-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-4,-4,-8,-2,0,0,0,0],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
