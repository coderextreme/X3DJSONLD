###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore18-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3694340860038916,103.60419903412902,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[17,15,16,17,20,25,31,38,42,47,52,56,62,68,64,56,47,37,32,29,26,22,20,18,18,20,20,19,17,15,14,13,13,12,11,11,11,19,18,18,20,22,24,30,38,45,52,55,57,60,63,61,56,47,37,30,25,22,20,18,18,18,18,17,16,15,15,15,16,16,17,16,16,15,21,20,21,23,24,25,31,38,46,54,54,53,53,54,55,55,48,37,29,23,20,19,18,18,17,16,15,14,15,16,18,19,20,22,22,22,21,23,22,24,25,26,27,34,41,45,49,47,44,45,46,47,48,43,33,27,22,20,19,19,18,17,16,17,17,17,18,20,21,22,25,27,28,27,25,24,24,26,28,30,36,44,44,44,40,35,36,39,40,40,35,29,25,22,22,22,21,20,19,19,20,21,21,22,22,22,24,27,30,32,32,24,23,24,25,28,31,38,48,46,44,38,32,32,34,34,34,30,26,24,24,25,28,28,26,24,25,25,26,27,27,26,25,25,26,29,32,33,22,22,23,24,27,31,40,51,50,47,40,33,30,30,30,30,28,25,25,27,31,36,37,34,32,31,32,32,32,31,30,27,25,24,25,28,30,21,22,23,23,27,31,41,52,52,50,43,33,30,29,29,31,31,30,30,33,37,44,46,44,42,40,38,36,34,32,30,27,24,22,22,24,26,21,22,22,22,25,29,39,49,51,52,43,33,30,28,31,35,37,38,39,40,44,50,52,51,50,48,44,38,33,30,27,25,23,20,19,19,20,21,21,21,21,23,27,34,41,44,46,39,32,29,28,33,40,44,46,47,48,50,52,52,50,48,48,44,39,34,28,24,23,21,18,16,17,17,19,20,19,19,20,23,27,32,34,36,33,30,29,29,34,42,49,54,55,55,54,51,48,44,41,42,40,37,33,27,23,21,20,17,15,15,16,18,18,17,17,18,20,22,26,29,32,32,32,31,29,33,41,48,55,57,58,55,50,44,39,36,35,34,33,30,26,22,21,19,16,14,15,16,16,17,16,16,17,18,20,22,28,35,37,38,35,30,31,36,42,49,53,56,54,48,42,37,32,28,26,26,26,24,22,20,18,16,14,15,16,16,16,15,15,15,16,20,22,31,41,44,45,40,32,31,32,36,42,48,52,52,48,42,37,31,25,21,21,21,20,20,18,16,14,14,15,15,15,14,14,14,15,17,21,26,36,48,52,54,47,37,32,28,30,34,40,46,48,47,43,38,32,25,20,17,15,15,15,14,13,13,13,13,13,14,13,13,14,15,18,22,28,39,52,58,61,53,42,34,28,26,27,32,39,42,43,41,37,31,24,18,14,11,11,11,11,11,11,11,11,11,13,12,12,13,15,18,24,30,40,52,59,64,57,46,37,29,24,23,26,31,34,35,34,32,27,22,17,13,10,9,9,9,9,9,9,9,9,13,12,12,13,14,17,22,28,38,50,57,63,57,47,37,28,23,19,20,24,27,29,28,27,24,20,16,12,10,8,7,7,7,8,8,8,9,14,13,13,12,13,14,18,22,32,44,51,56,51,42,34,26,20,15,16,19,21,23,23,22,20,17,15,13,11,9,8,7,7,8,9,10,11,16,14,14,13,13,13,15,17,25,36,43,48,44,37,30,24,18,12,13,15,17,19,18,17,16,15,14,14,12,10,8,8,8,9,10,11,11,17,16,16,16,15,14,13,12,18,26,32,38,36,32,26,22,17,12,11,11,13,14,13,12,12,14,14,13,12,11,10,11,11,12,12,12,10,19,18,20,21,20,19,15,11,14,18,23,28,28,26,23,20,16,12,11,10,10,12,11,10,11,12,13,13,12,11,11,12,13,13,13,12,10,23,22,26,29,29,28,21,15,13,13,16,19,20,20,20,18,16,13,12,11,11,12,12,12,12,14,14,12,11,9,9,9,10,11,11,10,9],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
