###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/Malacca5-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(2.116798394735791,99.20606251983018,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=0.019880954,zDimension=23,zSpacing=0.014457387,height=[1471,1354,1179,1131,1097,1007,909,1059,988,1308,1275,1447,1337,1235,1226,927,1096,1670,1111,871,1098,804,1334,1255,1194,1139,1311,1321,971,1289,924,1445,1467,1296,801,896,1057,788,907,1330,759,638,1215,901,1354,1265,1194,1158,1201,1373,1310,1397,1245,1536,1294,909,874,1212,757,686,1099,1056,835,566,1044,682,1345,1298,1259,1228,1221,1396,1339,1496,1484,1713,1381,1069,816,703,676,589,522,695,824,496,1013,587,1346,1290,1254,1291,1417,1302,1306,1643,1926,1710,1542,1114,1041,924,836,511,580,487,746,545,738,504,1350,1322,1333,1419,1260,1269,1319,1729,1707,1468,1806,1022,876,907,807,551,656,592,487,348,599,474,1395,1338,1371,1242,1218,1217,1283,1608,1671,1686,1580,1062,909,711,577,552,503,469,395,290,333,380,1566,1426,1599,1392,1216,1191,1321,1202,1483,1132,1226,988,800,677,650,487,433,367,425,365,287,297,1532,1413,1308,1267,1204,1192,1153,1134,1158,1080,1112,1066,991,952,670,619,593,581,385,308,294,227,1440,1328,1273,1241,1188,1167,1142,1095,1077,1014,1187,759,1100,951,680,753,606,922,454,284,233,187,1359,1317,1283,1233,1159,1158,1104,1061,1011,973,821,744,1129,1070,970,702,774,506,779,632,197,206,1359,1319,1290,1237,1162,1110,1044,1040,965,911,777,701,721,547,674,418,585,432,768,345,190,132,1351,1286,1258,1218,1158,1116,1034,1003,937,838,747,679,581,520,486,399,556,378,642,174,140,138,1358,1294,1267,1239,1179,1137,1067,999,950,958,879,833,655,539,337,402,449,367,291,277,177,141,1321,1262,1280,1264,1218,1134,1038,1018,994,975,661,767,492,386,523,342,354,442,437,198,483,248,961,1177,1294,1226,1175,1177,1110,1044,1075,1005,619,533,466,375,346,347,295,380,270,210,340,192,960,1162,1321,1283,1226,1232,1140,1292,1303,853,686,520,605,412,378,254,273,249,257,234,121,121,942,1069,1338,1391,1292,1152,1194,1223,1047,798,853,499,475,421,605,263,246,235,574,228,168,97,948,969,1489,1611,1332,1319,1336,1337,1213,912,512,454,467,339,354,256,186,197,364,232,103,221,934,959,1523,1796,1631,1687,1300,1327,1339,1306,728,423,294,327,272,254,173,188,460,146,261,170,919,972,1510,1847,1989,1563,1336,1289,1396,910,500,699,283,357,296,171,192,218,201,260,263,60,937,982,1749,1340,1651,1519,1461,1435,1726,1330,1151,693,406,232,197,196,124,196,294,191,92,69,924,967,1688,1306,1635,1480,1470,1444,1715,1360,1150,701,408,280,221,182,131,157,256,200,93,78],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(3.070985940057265,102.12856265864148,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
