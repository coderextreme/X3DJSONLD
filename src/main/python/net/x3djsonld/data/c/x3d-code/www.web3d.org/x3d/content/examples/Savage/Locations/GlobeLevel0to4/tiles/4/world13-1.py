###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world13-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(56.20833769188965,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5732,-5260,-4618,-4588,-4526,-4386,-4231,-3925,-3583,-2919,-3917,-4079,-3859,-3880,-3796,-3755,-3453,-3382,-3310,-3225,-2729,-2668,-1929,-4450,-5466,-4800,-4243,-4424,-3842,-3292,-3681,-4132,-4088,-4136,-4033,-4002,-3766,-3670,-3403,-3171,-3121,-1649,-2817,-2683,-97,-999,-2491,-5304,-4602,-4026,-4001,-3484,-4080,-4137,-4090,-4027,-4013,-3881,-3609,-3493,-1753,-3169,-3015,-2958,-2774,-2582,-47,-245,-591,-681,-4479,-5182,-4802,-4425,-4402,-4255,-4128,-4095,-3961,-3810,-3560,-3527,-3434,-3284,-2944,-2695,-2567,-1055,-2,-117,-37,-120,-1381,-4901,-5291,-4800,-4392,-4035,-4092,-3905,-3217,-3890,-3598,-3631,-3484,-3283,-2789,-2548,-1931,-392,-16,-201,-100,11,-109,-72,-4049,-5171,-4210,-4067,-3950,-3886,-3859,-3807,-3666,-3596,-3557,-3308,-3010,-2295,-874,-57,302,74,-261,11,366,-67,-562,-2266,-5051,-4710,-4187,-3890,-3831,-3859,-3630,-3459,-3419,-3307,-2974,-2412,-51,99,9,92,-305,130,263,-5,-77,-491,-2811,-4754,-4642,-3957,-3824,-3812,-3684,-3544,-3296,-3216,-2617,-1590,126,345,4,102,296,4,279,-70,-108,-289,-105,-1925,-4823,-4153,-3752,-3645,-3700,-3577,-3421,-2488,-153,-348,515,77,-17,38,258,524,-176,-78,-173,-124,-114,-1863,-4369,-4223,-3759,-3542,-3179,-3476,-1432,-143,-212,1210,4,15,36,10,352,68,-70,-156,-154,-191,-149,-247,-2558,-4357,-4088,-3836,-2648,-279,-99,-84,404,1069,938,772,148,158,13,392,-59,-66,525,-60,-175,-109,-123,-148,-138,-152,-323,-92,-132,194,1149,1411,825,627,129,113,121,764,1158,-82,529,1300,1207,-32,-108,-88,-98,19,281,-7,730,1980,744,617,828,1611,352,232,251,980,1358,1,27,671,1598,-7,-420,84,1060,1437,1187,2197,2783,2614,760,1278,1442,1520,89,121,607,304,1645,61,-10,-86,1361,24,660,1098,1158,1358,444,2269,3514,2181,1186,850,937,628,245,105,212,670,1818,1435,546,53,973,2889,1638,911,1131,1566,1179,1535,1162,1533,1636,1285,970,703,89,305,304,1371,1719,535,303,113,1753,1545,787,405,1644,1668,2326,2336,1387,897,1219,1219,860,908,492,253,487,276,520,884,712,487,906,1276,826,598,622,920,621,592,913,614,1199,795,633,820,97,367,120,134,300,590,4536,1366,1706,1068,975,1155,1402,730,530,730,943,645,608,849,903,918,42,205,266,532,185,273,495,1217,1280,1036,2072,1036,1158,541,845,730,749,886,912,1240,578,1023,120,292,245,111,242,294,197,276,893,1060,599,354,610,1220,660,682,1344,760,852,825,911,1479,63,94,120,99,241,490,255,120,111,145,498,730,932,1007,855,838,1111,1271,1648,1090,1374,1524,38,116,364,490,150,89,258,186,97,203,390,980,1273,1391,556,365,860,935,1067,1057,979,810,38,75,245,666,52,60,274,453,104,339,855,855,1220,873,391,730,1199,906,1284,983,1141,602],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
