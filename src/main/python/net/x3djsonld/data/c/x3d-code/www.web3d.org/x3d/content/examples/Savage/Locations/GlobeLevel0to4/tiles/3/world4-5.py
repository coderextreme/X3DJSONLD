###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_45',geoSystem=['GDC'],position=(11.208336350785146,67.4583407093748,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(11.208336350785146,67.4583407093748,0.0),range=4495500.0,child1Url=['../../tiles/4/world8-10.x3d'],child2Url=['../../tiles/4/world8-11.x3d'],child3Url=['../../tiles/4/world9-10.x3d'],child4Url=['../../tiles/4/world9-11.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world4-5.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,44.95834003882254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4112,-4805,-5006,-5110,-3847,-3628,-3691,-4376,-4168,-3106,-3473,-3401,-4397,-3427,-4937,-4884,-4948,-3220,-4813,-4857,-3206,-3925,-4744,-4770,-5085,-4327,-4505,-4358,-4512,-4549,-3890,-3590,-3526,-3937,-2863,-4534,-4965,-4862,-4795,-4722,-4745,-3371,-3547,-4568,-4857,-5083,-4788,-4642,-4607,-4521,-4484,-4418,-2182,-3813,-4043,-2904,-4684,-4761,-4580,-4656,-4636,-4663,-2482,-3063,-4222,-4774,-5105,-4947,-3581,-4761,-4425,-4290,-3787,-3080,-3675,-4132,-2277,-4366,-4745,-4620,-4491,-4535,-4519,-3190,-657,-3732,-4712,-5106,-5115,-4722,-4620,-4947,-4220,-3614,-2952,-4047,-3959,-2311,-3953,-4648,-4542,-4452,-4443,-4400,-3069,86,-2522,-4192,-5077,-5117,-5098,-4533,-4618,-4134,-3959,-2837,-3947,-3788,-2262,-3609,-3724,-4458,-4338,-4273,-4280,-2472,389,12,-3476,-5080,-4869,-4892,-4132,-4350,-3182,-2282,-3468,-4021,-4036,-2057,-3305,-3326,-4377,-4245,-4206,-4154,-3368,407,132,-2316,-4962,-4989,-4679,-4117,-3767,-2962,-3845,-3763,-3747,-3972,-2393,-2682,-3710,-4326,-4194,-4063,-4039,-3441,320,244,-855,-5025,-5111,-5246,-4086,-3111,-3937,-4104,-4144,-4109,-3685,-1870,-2190,-3650,-2697,-4064,-3986,-3932,-3206,544,360,34,-4982,-5116,-5223,-4004,-2537,-3957,-4812,-4547,-4876,-4224,-2379,-1836,-2531,1053,-3948,-3855,-3844,-3286,917,555,486,-4759,-5082,-3504,-3313,-2808,-4212,-4566,-4655,-4643,-3577,-2623,-1549,-1289,190,-3836,-3765,-3683,-3565,1164,631,733,-2358,-4870,-3726,-2581,-3613,-4477,-4539,-4549,-4619,-3628,-2445,-96,-48,87,-3742,-3671,-3587,-3432,761,1103,947,-127,-4362,-3429,-2894,-4255,-4498,-4439,-4439,-4499,-2798,-2294,-2,137,-164,-3769,-3551,-3481,-3337,-1062,-1480,127,-349,-4006,-4072,-3657,-4492,-4406,-4321,-4322,-4389,-1553,-2209,91,378,-1668,-3522,-3458,-3328,-3247,-779,-1961,-2291,-403,-8,-4048,-4463,-4331,-4278,-4200,-4210,-4306,-1474,-1621,816,438,-2583,-3437,-3310,-3202,-3163,514,-938,-2164,-3120,-2824,-3963,-3527,-4322,-4165,-4099,-4094,-4207,-1620,-87,867,829,-90,-3364,-3192,-3093,-2976,2544,1376,-381,-1754,-3056,-2735,-3591,-4266,-4088,-3985,-3985,-4075,-1793,-54,667,342,-1939,-3237,-3173,-2937,-2834,2796,799,1002,678,-2376,-2902,-4074,-4235,-3959,-3815,-3937,-3815,-1831,5,558,204,-53,-2943,-2969,-2773,-2712,2035,941,1007,460,-1678,-3247,-3370,-4029,-3887,-3656,-3686,-3652,-1763,336,563,450,26,-1880,-2825,-2632,-2478,1154,718,585,722,472,-28,-2713,-3878,-3757,-3515,-3237,-3420,-189,1107,475,582,113,52,-2755,-2442,-2240,1030,675,411,313,247,205,-1603,-2845,-3626,-3414,-3315,-3039,-85,599,668,368,259,873,-301,-2228,-1989,1031,680,375,294,243,221,-1506,-3010,-3609,-3417,-3304,-3019,-41,652,720,359,127,872,-258,-2231,-1950],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
