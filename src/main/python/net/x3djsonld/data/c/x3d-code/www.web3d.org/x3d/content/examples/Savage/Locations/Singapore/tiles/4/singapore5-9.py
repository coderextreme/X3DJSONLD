###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_59',geoSystem=['GDC'],position=(1.3083120993579338,103.86273364845137,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.3083120993579338,103.86273364845137,0.0),range=4101.627,child1Url=['../../tiles/5/singapore10-18.x3d'],child2Url=['../../tiles/5/singapore10-19.x3d'],child3Url=['../../tiles/5/singapore11-18.x3d'],child4Url=['../../tiles/5/singapore11-19.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore5-9.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2995803869799398,103.84837061432235,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=45,zSpacing=3.96896E-4,height=[27,24,15,19,27,32,14,2,12,21,16,6,6,12,17,20,21,27,30,21,14,13,8,6,6,7,11,11,9,6,4,5,12,14,10,7,6,30,27,17,22,31,29,16,8,13,18,17,11,8,11,15,17,20,30,33,23,15,13,8,6,6,6,8,8,7,6,5,8,16,15,10,9,8,31,28,19,25,34,25,19,17,14,14,20,17,10,11,14,15,21,33,34,25,17,12,8,6,6,6,6,5,5,7,6,11,20,16,10,11,11,28,26,19,21,30,24,18,19,17,13,19,21,15,12,12,13,19,29,29,26,22,15,8,5,6,5,5,5,4,5,7,11,17,14,12,13,12,25,22,17,15,22,24,16,19,20,13,17,22,18,13,10,11,16,20,21,27,28,18,8,4,6,5,4,5,3,2,6,9,12,11,14,15,13,23,19,16,13,18,22,17,18,21,14,15,20,17,12,10,10,15,16,15,22,25,18,8,4,5,5,6,6,3,3,7,10,11,12,16,16,13,23,16,15,12,15,19,21,16,22,16,13,16,14,11,10,10,16,15,12,16,19,15,9,5,4,5,8,8,5,6,8,11,13,15,18,17,13,24,14,13,13,16,15,19,15,21,16,12,14,13,11,11,11,18,16,13,14,16,14,9,5,5,7,11,8,5,7,9,12,14,15,17,16,13,25,14,11,15,18,12,14,14,19,15,11,11,14,13,12,14,21,19,16,15,14,14,9,6,7,10,13,8,5,6,10,12,15,13,14,14,12,25,14,10,16,19,10,12,13,16,12,10,11,14,14,12,15,21,21,18,14,14,14,9,6,8,10,13,8,6,6,10,13,16,12,13,12,11,24,15,10,16,19,8,10,11,12,7,10,12,16,16,12,14,19,22,19,14,14,13,8,6,7,8,10,8,7,7,10,15,15,10,11,11,10,22,13,9,13,15,8,10,11,10,3,8,12,16,14,12,14,18,22,19,15,14,12,9,7,6,8,10,8,7,8,9,13,15,12,11,10,9,19,11,9,8,10,9,10,12,9,1,6,12,14,11,11,14,16,20,19,16,14,12,10,8,6,9,10,8,6,7,6,11,15,15,12,9,7,16,8,9,7,8,9,10,13,11,2,7,14,15,10,10,12,14,18,19,17,14,11,11,10,7,10,10,9,7,7,6,10,14,15,12,7,7,12,5,9,8,8,10,10,14,15,7,9,16,18,12,7,9,12,16,18,17,14,11,11,13,10,10,10,9,9,8,6,10,12,11,12,6,6,10,5,10,9,9,10,11,13,17,11,11,17,19,13,8,10,14,18,18,16,12,10,11,13,12,10,10,10,10,7,7,10,10,9,11,7,7,10,6,9,10,10,11,11,12,18,15,12,15,20,15,12,16,19,21,19,14,10,8,10,11,12,11,10,10,10,7,7,9,9,9,11,9,9,10,7,9,10,11,11,11,11,17,16,12,13,18,15,14,18,21,21,18,13,9,7,9,11,11,12,11,10,9,7,7,8,9,9,11,10,11,11,7,6,10,12,12,10,9,14,15,11,11,14,13,13,16,19,19,15,12,8,7,10,11,10,11,11,10,9,7,8,8,8,9,12,11,12,11,7,6,9,12,14,11,9,11,14,10,10,12,11,12,13,17,16,13,11,9,8,10,11,9,10,12,9,9,8,8,8,8,9,11,11,12,8,7,6,9,13,17,13,10,9,12,9,11,13,9,10,12,15,14,13,11,9,10,11,10,9,10,12,8,9,8,9,8,7,9,9,9,9,7,7,6,8,12,17,14,10,8,10,9,11,14,10,8,11,13,13,12,10,10,11,11,10,8,10,11,7,9,9,10,8,8,10,9,8,7,8,7,7,7,10,15,14,10,8,10,10,12,16,12,9,10,11,12,11,9,9,11,11,9,8,9,11,7,11,12,13,10,9,11,10,8,7,8,8,8,6,8,12,13,10,8,11,12,13,15,13,9,9,10,12,10,9,9,11,11,10,8,10,10,6,12,14,14,11,10,10,10,8,9,9,9,8,5,6,10,11,10,9,13,14,12,13,11,9,8,9,12,10,9,10,12,13,13,11,11,10,7,11,13,13,10,8,9,9,10,11,9,9,8,5,5,8,10,10,11,15,15,10,10,10,10,9,10,12,11,9,10,13,15,15,12,11,9,7,10,11,12,10,9,8,9,10,12,10,10,8,5,5,5,8,9,13,15,15,10,9,10,11,11,11,12,12,9,9,12,15,14,11,10,7,7,10,11,12,11,10,8,8,10,11,11,10,8,6,5,4,7,8,13,14,14,10,9,10,12,12,12,13,12,10,9,12,14,13,11,8,6,7,10,12,11,12,13,9,8,10,10,11,9,9,6,5,4,6,7,13,12,11,11,10,10,11,12,12,12,13,11,9,11,13,13,10,8,6,8,11,11,11,14,16,12,9,10,10,10,9,10,7,6,4,4,7,11,10,9,12,11,10,10,12,11,11,13,12,11,11,12,14,10,8,7,9,11,11,12,14,18,13,10,10,10,10,10,12,9,6,4,4,5,9,8,9,12,10,9,10,11,9,10,13,14,13,11,15,18,11,7,6,9,11,11,11,14,16,12,11,11,11,11,11,13,11,7,5,4,4,7,8,10,12,9,8,10,11,8,8,13,16,15,11,16,20,11,7,6,9,12,11,11,13,13,11,11,11,11,11,11,12,13,11,9,7,5,7,9,11,12,9,10,11,11,8,8,13,16,15,11,14,17,12,8,7,10,11,10,10,12,11,10,11,12,11,10,11,11,15,16,13,10,6,7,11,12,11,11,12,12,12,8,8,12,15,15,11,11,13,12,9,8,11,11,8,10,11,10,9,11,12,11,9,10,10,17,19,14,11,8,8,13,14,12,11,13,12,10,8,8,11,14,14,12,10,11,10,8,9,13,10,8,10,11,11,9,12,12,11,8,10,11,19,21,15,11,9,9,14,16,12,11,12,11,10,8,8,10,12,13,12,10,10,9,7,8,14,10,7,9,12,12,9,12,13,12,7,9,11,17,19,15,11,10,10,13,16,12,11,12,11,11,9,9,9,11,12,11,9,10,9,7,7,12,11,7,9,12,12,10,11,13,12,7,10,11,14,16,13,11,10,10,12,14,12,11,11,12,13,11,9,9,11,13,10,9,11,11,8,6,9,12,8,8,10,12,11,10,12,13,12,13,11,13,14,14,12,10,9,10,13,12,11,11,14,14,11,10,11,12,12,9,10,13,13,10,6,8,14,10,8,9,11,10,10,12,13,19,18,12,13,14,15,14,11,8,8,12,12,12,12,16,16,11,11,13,14,12,9,11,14,14,12,6,8,14,11,8,9,11,10,9,12,12,23,20,13,13,14,14,13,11,7,8,11,11,11,12,16,17,12,11,13,14,13,10,12,16,16,13,7,8,12,11,8,9,10,9,9,12,11,23,22,14,12,14,13,11,10,7,8,10,10,10,12,15,19,14,11,12,13,13,11,13,18,17,14,9,8,10,10,9,9,8,7,9,13,11,20,18,13,12,15,12,11,9,7,9,10,10,9,11,13,17,14,12,12,13,13,12,13,16,15,13,10,9,9,10,9,8,7,7,9,13,12,15,11,10,12,15,12,11,8,8,10,10,9,8,10,11,14,12,12,13,14,14,12,12,12,12,11,10,10,8,9,8,7,6,8,9,14,13,13,9,10,13,15,12,11,8,8,10,10,9,8,9,10,11,10,11,13,14,15,13,12,10,9,9,10,10,9,8,6,6,7,10,11,14,13],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
