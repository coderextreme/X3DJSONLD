###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-21.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.8914597167094,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[18,17,17,17,17,18,18,19,20,21,22,23,23,24,25,25,26,28,31,35,37,39,38,37,38,41,43,45,46,47,46,44,43,43,43,46,48,20,19,18,17,17,18,18,19,20,21,22,22,23,24,25,26,27,29,33,37,39,41,40,39,39,41,43,45,46,47,47,45,43,43,44,46,48,20,19,18,18,18,18,18,18,20,21,21,21,22,24,25,27,29,32,35,39,42,43,43,42,41,42,43,44,46,47,47,44,43,44,46,47,48,20,20,19,19,18,18,18,18,19,21,21,21,22,23,25,26,29,32,36,40,42,44,45,44,43,42,43,44,46,47,48,46,45,46,46,47,46,21,20,20,19,18,18,17,17,19,21,21,21,21,23,24,26,28,32,35,39,42,45,46,45,44,43,43,44,46,48,49,49,49,47,46,45,44,20,20,19,19,18,18,17,17,18,19,20,20,21,22,24,25,28,32,35,38,42,45,46,45,45,44,44,45,47,50,52,52,51,49,48,47,46,20,19,18,18,18,18,17,16,16,17,18,20,21,22,24,26,29,32,35,38,41,44,46,46,45,45,45,46,48,51,54,54,54,52,51,50,49,19,18,17,16,17,17,16,16,16,17,18,20,21,22,24,25,28,31,34,37,40,43,45,45,46,46,46,47,49,52,54,55,55,54,53,53,52,19,18,16,15,15,16,16,16,16,18,20,22,22,22,23,25,27,30,33,35,38,41,43,44,45,46,46,48,50,52,54,55,55,56,56,56,55,18,17,15,14,14,15,16,16,17,18,20,22,23,23,23,24,26,29,31,34,36,39,40,41,42,43,45,47,50,52,53,54,55,56,58,58,56,16,15,14,14,14,15,16,17,18,19,20,21,22,23,23,23,24,26,28,31,34,36,37,38,39,40,41,43,46,49,52,53,54,56,58,57,56,14,14,14,14,14,15,16,18,19,19,20,21,21,22,22,22,22,24,26,28,31,33,34,35,35,36,38,41,44,47,50,52,53,55,57,56,55,12,12,13,15,15,16,17,18,19,20,20,21,21,21,21,21,21,22,23,25,27,29,31,33,34,35,37,40,43,45,49,51,52,53,54,55,54,12,12,14,16,16,16,17,18,19,20,20,21,20,20,20,20,20,21,22,22,24,27,29,32,33,35,36,39,41,44,47,49,50,51,52,52,52,12,13,15,16,16,16,16,17,18,18,18,18,19,19,19,19,19,20,21,22,24,27,29,32,34,35,37,38,40,43,46,47,48,49,49,50,50,13,15,15,16,16,16,16,17,17,17,17,17,18,19,19,19,19,20,21,22,24,26,29,31,33,35,36,37,39,42,44,45,46,47,48,48,47,15,15,16,16,16,16,16,16,16,16,16,17,18,19,19,19,20,21,21,22,23,25,27,30,31,32,34,35,37,40,42,44,45,47,48,48,46,17,16,17,17,16,15,15,16,16,16,16,16,17,18,18,19,20,21,21,22,23,24,26,28,29,30,32,34,36,38,41,42,44,48,49,48,46,19,19,19,19,17,16,15,15,16,16,16,16,16,16,16,16,17,18,19,20,21,22,24,27,28,29,30,33,35,38,40,41,43,47,49,48,46,20,21,21,20,18,16,15,15,15,16,16,15,15,15,15,15,15,16,18,19,20,21,23,25,26,27,29,32,34,37,39,41,43,46,48,48,48,20,20,21,21,19,17,15,15,15,15,16,15,15,15,15,15,15,16,17,19,20,21,22,23,25,26,28,31,34,36,39,40,43,45,47,48,49,19,20,21,21,19,17,15,14,14,14,15,16,16,16,16,15,16,17,18,19,21,21,22,22,23,25,27,30,33,35,37,40,42,44,46,48,50,18,20,21,20,18,15,13,13,13,13,14,15,15,16,16,16,17,17,18,19,20,21,21,21,22,24,26,29,32,34,36,39,42,43,45,47,49],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
