###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.80528151193529,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[19,20,21,22,24,21,18,21,25,28,32,32,32,33,33,32,31,30,28,28,29,30,30,29,28,27,27,28,29,30,32,34,34,35,37,40,43,19,19,19,20,21,20,17,21,25,28,30,31,32,32,33,33,33,31,27,27,27,29,31,29,27,27,28,30,31,33,34,35,35,35,37,39,40,19,19,20,20,21,20,18,21,25,27,28,29,31,33,34,35,35,32,29,28,28,29,32,31,28,27,29,31,33,34,34,34,34,35,37,38,38,19,20,21,23,24,22,20,21,23,24,24,27,31,34,36,36,35,34,32,31,31,32,33,32,29,28,29,31,34,34,33,32,34,36,37,38,36,19,20,22,26,29,26,23,23,23,23,23,27,30,34,36,36,36,35,34,33,33,34,35,34,31,30,30,31,33,33,32,32,35,38,38,37,35,19,20,22,28,34,31,27,25,24,24,25,28,30,32,34,35,35,35,33,33,33,34,36,35,33,31,31,30,29,30,31,34,38,41,39,37,34,21,21,22,28,35,32,29,28,26,27,28,29,29,31,32,33,35,35,34,34,34,34,36,36,34,32,31,29,27,27,30,34,40,42,40,38,34,26,24,23,27,31,31,29,29,30,30,31,31,30,29,29,31,34,35,36,36,34,34,35,35,35,33,31,29,27,27,29,33,38,42,41,39,34,31,27,24,26,28,29,29,31,32,32,33,32,30,29,29,31,33,36,38,37,35,34,33,33,34,34,32,31,29,29,29,32,37,41,41,40,35,33,29,25,25,26,29,32,32,33,34,35,33,31,30,30,32,34,37,38,37,34,31,30,30,32,33,34,34,34,33,31,32,35,38,39,39,36,33,30,26,26,26,29,33,34,34,34,36,35,33,32,32,33,35,37,37,35,32,28,26,27,30,34,35,37,38,37,34,32,34,36,37,38,36,33,29,26,26,26,29,33,34,34,35,37,37,37,36,35,35,35,35,35,32,28,26,24,26,30,34,38,40,41,40,36,33,33,33,35,37,37,32,30,27,27,27,30,33,34,34,36,38,39,40,38,36,35,34,33,32,29,27,25,24,26,30,35,39,42,42,41,37,34,32,31,33,35,36,32,32,32,31,31,32,34,34,34,37,41,41,42,39,35,34,33,31,30,29,28,27,25,26,29,34,38,41,42,41,37,33,30,29,31,32,34,33,34,36,35,35,35,35,35,35,38,42,43,42,39,35,33,31,30,29,29,30,29,26,26,29,32,37,40,41,40,36,32,29,27,28,29,31,35,36,37,37,36,36,36,36,36,38,41,41,41,38,35,33,31,29,27,28,30,29,26,26,28,31,36,39,40,39,35,31,28,26,26,26,29,37,37,37,36,36,36,35,35,36,37,39,39,39,37,36,34,31,29,27,27,28,28,25,26,27,30,35,37,38,37,34,30,28,25,24,24,26,35,34,34,33,33,33,33,34,34,35,37,37,37,36,35,33,31,29,27,27,26,26,25,25,26,29,33,35,36,35,32,29,27,24,21,19,23,32,32,32,31,31,31,31,31,31,33,35,34,34,33,33,32,31,30,29,27,26,25,25,25,25,28,31,34,33,32,30,28,26,23,18,16,21,33,33,33,32,31,30,30,29,29,30,31,31,29,29,31,31,32,32,31,29,27,26,26,26,26,28,31,33,31,29,27,25,24,22,19,18,24,36,36,36,35,33,31,30,29,28,28,28,27,25,26,28,30,34,34,33,31,28,27,27,27,27,29,32,32,29,26,25,23,23,22,22,22,27,39,40,40,37,35,33,33,31,30,29,29,27,24,24,24,27,31,32,32,31,28,27,26,26,26,28,30,30,28,25,24,23,22,22,23,25,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
