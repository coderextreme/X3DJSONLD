###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore26-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4392877850278434,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[34,33,35,36,33,31,29,26,25,23,22,21,21,22,21,21,22,22,22,22,19,14,14,18,22,27,31,33,33,32,31,32,32,33,34,36,36,32,32,32,33,31,29,28,27,25,24,22,21,21,20,21,22,22,22,22,22,20,17,17,20,23,26,29,31,31,30,30,31,32,33,34,34,33,29,30,30,30,29,28,27,27,26,24,22,21,20,20,20,21,22,21,21,21,21,19,20,21,24,26,27,29,30,30,29,30,32,33,34,33,31,28,29,28,28,28,27,26,25,23,21,20,20,20,20,20,20,20,18,19,20,21,20,21,21,23,24,26,28,29,29,28,29,31,32,33,32,31,26,28,27,27,27,27,25,23,21,19,19,19,19,19,20,20,18,17,17,18,20,22,22,22,22,23,24,27,29,29,28,29,30,31,33,32,30,22,23,24,26,26,26,24,21,20,19,19,19,19,18,19,20,19,17,17,18,19,23,24,23,24,25,26,26,27,27,28,29,30,32,33,31,29,19,19,22,24,25,25,22,20,19,19,19,18,18,18,19,21,19,17,17,18,20,24,25,24,25,27,27,26,26,26,28,29,31,33,34,31,28,18,19,21,22,22,22,20,20,19,19,18,17,17,17,19,20,20,18,18,20,23,27,28,28,28,30,30,28,27,27,27,29,31,31,31,30,29,18,18,20,20,19,19,20,20,19,19,18,17,17,17,18,20,20,19,20,22,25,28,30,30,31,33,34,31,28,28,28,29,31,30,28,28,29,18,18,20,21,20,20,21,20,20,20,19,18,18,19,20,22,22,22,23,25,27,27,28,28,29,32,33,33,32,31,30,30,29,29,28,29,31,18,18,20,22,22,22,22,21,20,20,19,17,19,21,22,23,24,25,26,28,28,27,26,26,26,30,33,35,36,35,33,30,28,28,28,31,34,20,20,21,21,21,21,21,21,19,18,16,15,18,23,25,27,28,30,30,31,29,25,24,24,25,28,31,32,33,33,33,31,30,29,29,31,34,22,22,21,20,21,21,20,20,18,16,14,12,17,25,28,31,33,34,34,33,29,23,22,24,26,27,29,29,30,31,33,32,32,32,32,32,32,22,21,20,20,20,20,20,19,17,15,15,15,20,28,31,33,35,36,36,34,30,26,25,27,29,31,32,32,32,32,33,34,35,34,33,33,32,21,19,19,19,20,20,19,18,16,15,17,20,25,31,33,34,35,37,36,34,32,29,29,30,32,35,37,36,36,35,35,36,37,37,35,33,32,19,18,18,18,19,20,18,16,15,14,18,23,27,32,34,34,35,37,36,33,31,30,31,34,37,39,40,40,38,37,36,36,37,36,34,33,31,16,16,16,16,18,19,17,15,15,15,19,24,29,33,34,34,35,36,34,32,31,31,33,38,41,42,43,43,41,38,36,36,36,34,32,31,30,14,14,15,16,18,19,17,15,16,17,20,24,28,32,33,34,34,35,33,29,29,29,33,39,42,43,44,45,45,43,41,39,38,34,31,30,29,14,13,15,17,18,19,17,17,18,19,21,23,26,30,32,33,34,34,31,26,26,27,31,38,42,43,45,49,50,50,47,45,41,36,31,30,28,14,13,14,15,17,18,17,16,18,21,22,24,27,30,33,34,35,35,32,27,26,27,31,37,41,43,46,51,54,52,50,48,45,39,33,30,27,14,13,13,13,15,16,15,15,18,22,24,25,28,31,35,37,38,38,35,30,28,30,32,37,40,44,48,54,55,53,50,49,48,42,36,31,26,15,13,13,13,14,15,14,14,18,22,24,25,27,29,32,35,36,37,34,30,29,30,33,38,41,46,49,53,54,51,49,49,49,45,40,32,26,16,15,14,13,14,14,15,15,18,21,23,24,24,24,25,27,29,30,29,26,27,30,34,40,44,47,49,50,49,47,47,49,51,48,43,34,27],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
