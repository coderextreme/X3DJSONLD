###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore5-17.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.25592182508997,103.83400758019333,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[5,5,7,10,13,15,17,17,16,13,10,7,8,11,11,10,11,13,15,18,18,17,15,14,12,12,11,11,11,13,14,16,17,17,16,16,17,3,3,7,10,13,15,18,21,20,17,13,10,12,15,13,9,10,13,16,19,19,17,14,12,10,10,10,9,11,16,22,27,30,30,30,29,30,7,9,11,12,14,16,17,18,18,16,13,9,10,12,10,8,10,12,13,14,13,11,9,9,8,8,9,11,16,23,27,30,32,32,31,31,32,12,15,15,14,15,17,17,16,15,14,11,8,7,7,7,7,9,12,11,7,5,4,5,6,7,6,9,15,22,29,32,33,32,32,32,32,32,18,20,18,16,15,15,14,12,12,12,10,8,7,7,7,7,10,13,14,13,10,5,4,4,6,8,14,22,28,32,33,33,33,32,32,32,33,26,25,21,17,14,12,10,9,9,10,10,9,9,10,9,8,11,16,19,21,17,8,3,2,5,12,20,30,35,35,34,33,33,32,32,33,34,30,29,24,18,14,11,10,9,9,9,9,8,8,9,9,8,12,17,19,18,13,5,1,1,7,19,28,35,37,36,35,33,32,30,31,34,36,34,34,26,18,13,11,10,9,9,9,8,7,7,8,9,8,12,18,17,12,6,1,0,0,11,28,37,38,37,36,35,32,30,29,30,35,39,35,34,26,17,12,10,9,9,9,9,8,7,8,10,11,11,12,14,13,9,5,1,0,0,10,29,40,41,38,35,33,30,27,25,27,36,43,35,33,25,16,12,9,9,8,8,8,8,7,10,12,14,16,13,8,7,8,6,4,1,0,9,28,39,42,40,35,30,25,22,18,23,37,48,28,27,20,14,11,9,8,8,8,8,8,9,12,15,14,11,9,6,6,7,7,6,4,4,13,29,39,41,38,32,26,21,18,15,20,35,48,19,17,14,11,10,9,8,8,8,8,10,12,15,19,13,3,2,5,6,7,7,7,9,12,20,32,38,39,36,27,21,17,14,12,18,33,46,14,13,11,10,9,9,8,8,9,11,13,15,16,17,10,2,2,5,6,7,8,10,13,17,23,31,35,37,33,23,16,13,12,12,17,30,42,12,11,11,10,9,8,8,9,11,14,16,19,16,12,8,5,4,4,5,7,9,11,15,19,23,28,31,34,29,17,10,9,10,12,17,27,36,11,11,10,10,9,8,10,12,14,16,17,18,15,10,8,7,6,6,7,10,12,15,17,19,22,24,26,29,24,13,8,8,10,12,17,24,30,11,11,11,10,9,9,12,14,17,18,16,15,12,10,9,8,8,9,12,16,18,19,19,19,19,22,22,22,18,10,7,9,11,12,15,22,27,13,14,13,12,11,12,14,16,17,16,14,11,10,10,9,8,10,12,15,19,20,20,20,19,18,18,17,15,12,9,8,10,11,9,12,20,25,17,19,17,15,15,16,17,17,15,12,9,7,7,8,8,9,12,16,18,19,20,21,21,20,17,14,12,9,8,8,8,9,8,4,7,17,23,19,20,17,16,16,17,18,18,15,12,8,6,6,6,8,11,14,17,19,19,20,20,20,19,16,12,9,8,8,8,9,8,6,2,4,13,20,17,17,15,14,15,16,19,20,19,16,12,9,7,6,8,12,15,17,18,19,20,20,19,17,15,11,10,10,10,9,8,7,6,3,3,9,13,15,14,13,13,14,16,19,21,20,18,15,12,10,8,11,14,16,17,17,18,18,18,16,14,12,10,10,11,11,8,7,7,6,4,3,7,9,13,12,12,12,14,16,19,20,20,18,17,15,15,16,17,19,18,18,17,16,16,16,14,11,9,8,8,9,9,7,7,8,8,6,5,6,7,14,13,11,11,13,15,17,19,18,17,17,18,19,20,21,21,21,19,17,15,14,13,11,8,6,6,7,8,8,7,7,8,8,7,6,6,6],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
