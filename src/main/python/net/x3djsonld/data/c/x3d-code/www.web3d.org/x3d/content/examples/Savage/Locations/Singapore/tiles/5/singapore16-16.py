###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore16-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3519706612479037,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[59,65,68,69,68,66,64,61,61,62,62,62,60,56,53,51,48,44,43,43,42,40,39,39,39,37,36,35,32,28,24,22,20,20,19,20,62,68,69,69,67,63,61,58,60,62,61,61,58,54,52,49,47,44,44,43,43,41,40,40,38,36,35,33,32,28,25,21,19,18,17,17,66,70,70,69,65,60,57,56,58,61,60,59,56,52,50,47,45,43,42,41,42,41,40,39,37,35,33,32,30,28,25,21,18,16,15,15,70,73,71,69,63,56,55,55,57,60,60,58,55,51,48,46,43,40,39,38,39,40,39,37,35,33,31,29,28,26,23,20,17,16,15,15,71,73,71,68,61,54,53,54,57,59,59,57,53,49,47,44,41,37,35,34,36,38,38,36,33,31,29,27,25,23,22,19,16,16,16,16,67,69,67,64,58,52,52,54,56,57,56,55,51,48,45,43,39,34,32,30,33,36,36,34,31,28,25,24,23,22,20,18,17,17,17,17,63,63,62,59,54,49,51,53,54,53,53,51,49,47,45,43,39,33,30,28,30,32,33,32,29,26,23,22,22,21,20,19,19,19,19,18,60,58,56,54,50,47,48,50,50,49,48,48,47,47,45,43,39,34,30,28,28,28,28,27,26,24,23,22,22,21,21,21,22,23,23,20,58,54,52,50,47,45,45,47,46,44,44,44,45,47,45,43,39,34,31,29,27,25,24,24,24,25,25,24,24,23,24,24,25,26,26,21,58,54,53,51,48,45,44,44,42,40,40,42,44,46,44,41,37,33,31,29,26,24,23,22,23,26,27,29,29,28,27,27,27,27,26,21,58,56,55,54,52,48,45,42,40,38,40,42,43,44,42,39,35,31,30,28,26,24,23,22,24,27,30,32,33,32,31,29,28,26,24,20,58,57,58,58,56,54,48,42,41,39,41,43,43,43,39,36,32,29,27,26,24,23,23,24,26,30,32,32,33,33,32,30,28,25,22,18,56,58,60,61,60,58,52,45,43,41,43,44,43,41,38,33,29,26,24,23,22,22,23,25,28,32,33,31,31,33,33,30,27,23,20,16,54,56,58,60,60,59,53,47,44,42,43,44,42,40,36,31,28,25,23,21,20,21,23,26,29,33,34,32,32,35,35,31,26,22,19,15,53,54,55,56,57,57,53,48,45,43,42,43,42,40,36,32,29,26,22,20,19,20,22,26,30,34,36,34,34,36,36,31,26,22,19,16,53,53,52,52,53,53,50,47,44,40,41,42,42,41,37,34,30,27,23,20,19,19,21,26,29,33,34,33,33,34,34,31,28,23,20,17,54,53,50,48,48,48,46,44,41,37,39,41,42,42,40,36,33,29,25,21,19,19,21,25,29,31,31,32,31,30,29,30,29,24,20,19,54,53,49,46,45,44,43,42,38,35,36,38,40,41,40,37,33,29,25,23,21,21,23,27,28,28,28,29,29,26,25,28,28,24,20,20,52,53,49,44,43,42,40,39,36,33,33,35,36,39,38,35,31,27,25,24,24,25,27,30,29,26,25,27,26,23,22,24,25,23,20,19,49,49,46,42,40,39,38,37,35,32,32,32,33,35,34,32,29,26,25,26,28,30,32,34,32,26,23,23,23,20,20,22,23,22,21,19,43,43,41,39,38,37,36,34,33,33,32,31,32,32,30,29,27,26,26,27,30,35,37,37,34,26,21,20,18,18,19,21,23,23,21,19,39,39,38,37,37,37,35,33,33,33,32,31,31,30,29,28,28,28,28,28,31,35,36,36,32,25,20,18,17,17,18,20,23,22,22,20,36,37,37,37,37,37,35,34,34,33,33,32,31,30,30,31,31,31,30,28,29,31,30,28,26,23,20,19,18,17,17,19,21,22,22,20],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
