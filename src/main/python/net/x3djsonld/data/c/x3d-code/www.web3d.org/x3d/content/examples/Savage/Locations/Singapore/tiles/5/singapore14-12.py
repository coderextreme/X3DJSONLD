###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[33,39,43,46,48,48,44,40,37,36,37,40,41,41,40,39,38,37,38,39,41,42,39,35,32,30,30,31,33,35,36,36,35,35,35,34,36,42,46,49,49,48,44,40,37,36,38,41,43,44,43,40,39,39,39,41,42,42,39,35,32,31,31,31,31,33,35,35,35,35,34,34,37,42,45,49,48,46,43,39,37,36,38,41,44,45,44,40,40,40,40,41,42,42,40,36,34,34,34,32,31,33,35,35,35,35,36,34,35,39,42,45,45,44,41,37,35,34,36,40,43,44,43,40,39,40,41,41,41,42,41,37,36,38,37,35,33,34,35,35,35,37,38,35,34,37,39,41,42,43,40,36,34,34,36,40,43,43,43,40,40,42,42,41,41,42,42,40,39,41,40,37,35,36,36,36,37,38,39,35,36,36,36,37,39,42,39,36,36,36,39,42,43,44,44,43,43,44,44,43,43,44,43,41,41,43,42,39,37,38,38,40,40,40,39,35,36,35,35,34,38,41,40,38,38,39,42,44,45,46,45,45,45,45,45,44,44,43,43,42,42,44,44,40,38,39,40,42,41,39,36,33,34,35,34,34,37,41,41,40,41,42,44,46,47,48,48,47,46,45,44,43,42,41,41,42,43,45,44,41,39,40,41,41,40,36,32,29,33,36,35,35,37,41,42,42,43,44,45,47,48,50,49,47,46,44,42,41,40,39,40,42,43,45,44,41,39,39,40,39,38,33,29,25,34,38,38,37,38,41,42,42,44,45,46,48,49,49,48,46,44,42,41,39,38,37,38,41,43,44,44,40,37,36,36,35,34,30,26,23,36,41,40,39,40,41,42,42,44,46,47,48,49,48,47,45,43,41,39,37,36,35,36,40,42,42,42,38,34,33,31,31,30,27,24,22,38,43,43,42,42,43,44,44,46,48,48,48,48,48,46,44,41,40,38,36,35,33,34,37,38,39,38,34,32,30,28,27,26,24,21,21,37,43,43,43,43,44,45,46,47,49,48,48,48,48,46,43,41,39,37,35,33,31,31,34,34,34,34,31,30,28,27,24,23,22,21,21,34,37,38,39,41,44,46,48,49,49,48,48,48,49,47,44,42,38,36,33,31,29,29,30,30,31,31,30,29,27,26,23,21,22,22,23,32,33,34,35,39,44,46,50,50,49,48,47,48,50,49,46,44,40,37,33,30,28,27,28,28,29,30,30,30,28,26,23,20,23,25,27,34,35,35,35,39,44,48,51,51,49,48,47,48,51,51,49,48,45,42,37,32,28,26,27,28,29,30,31,31,30,29,25,23,25,28,33,38,39,38,37,40,44,48,51,50,47,46,46,47,50,51,51,51,49,46,40,34,29,26,27,29,30,32,32,33,33,32,28,26,28,31,38,41,43,41,41,41,42,44,46,45,45,44,45,46,48,49,49,49,49,46,39,33,30,28,29,31,32,34,35,36,36,35,31,28,29,32,37,44,46,46,46,43,41,40,41,42,43,44,44,45,46,45,45,46,45,43,36,32,30,30,31,33,35,37,38,38,38,37,33,30,30,32,35,46,47,49,50,48,45,42,42,42,44,45,45,45,44,44,43,42,41,39,34,31,31,32,34,36,38,39,40,40,38,37,33,31,31,32,33,46,48,50,53,52,51,48,45,46,47,47,47,46,45,44,42,40,38,36,31,31,32,34,37,39,40,40,41,40,38,36,32,30,31,31,31,44,47,51,55,55,54,52,49,49,50,50,49,48,46,45,42,40,36,33,31,31,34,37,39,40,41,41,41,40,38,35,32,29,29,30,31],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
