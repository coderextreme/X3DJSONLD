###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5012,-5082,-4823,-4441,-4238,-4959,-4386,-3778,-3527,-3008,-3924,-3886,-4193,-4688,-4532,-4716,-4943,-5285,-4839,-5345,-5162,-5181,-5215,-5154,-4905,-4824,-4558,-4662,-3904,-4371,-4106,-3007,-3294,-3621,-3989,-4254,-4400,-4988,-4902,-4590,-5458,-4967,-5011,-4910,-5115,-5561,-5040,-4872,-4878,-4390,-3802,-4290,-3452,-3506,-3653,-3512,-3845,-4408,-4563,-4578,-4689,-4856,-4632,-5184,-5084,-5316,-4715,-5006,-4825,-4682,-4625,-4341,-4047,-4260,-4208,-3915,-2155,-3209,-4132,-4358,-4601,-4622,-4626,-5111,-4597,-5374,-5403,-5401,-4983,-4939,-5049,-4746,-4650,-4454,-4239,-4157,-4075,-4234,-3528,-3110,-3627,-4170,-4304,-4879,-4701,-4647,-5412,-4935,-5751,-5172,-4976,-5091,-5155,-4860,-4901,-4485,-4405,-3884,-4596,-3308,-3362,-2971,-3466,-3906,-4251,-4165,-4504,-5743,-5148,-5200,-4867,-5467,-5062,-5175,-5222,-5267,-4960,-4232,-4239,-4126,-4175,-3337,-2772,-3259,-3753,-3671,-3997,-4391,-4857,-4756,-4745,-5585,-5754,-5097,-5086,-5124,-5000,-4828,-4634,-4337,-4177,-3968,-3992,-3362,-2682,-3062,-3817,-3939,-4219,-4121,-4343,-4597,-5161,-5056,-5182,-5038,-5358,-5212,-5015,-4972,-4554,-4413,-4008,-3787,-3480,-3048,-3071,-2900,-3993,-4111,-4582,-4458,-4535,-4758,-4852,-5308,-4180,-5056,-5266,-5139,-4889,-4807,-4427,-3986,-3580,-3524,-3569,-3613,-3088,-3350,-3509,-4157,-4341,-4180,-4560,-4918,-5134,-4761,-4783,-4597,-4962,-5128,-5008,-4626,-3983,-3960,-3836,-3087,-3666,-3001,-2606,-3482,-3503,-3617,-4128,-4324,-4505,-4603,-4837,-4704,-4876,-4684,-5552,-4043,-4730,-4776,-4296,-3766,-3853,-3033,-3305,-3448,-2541,-3462,-3747,-3822,-4019,-4391,-4474,-4884,-4908,-4780,-4987,-5273,-5088,-4822,-4884,-4607,-3906,-3641,-3520,-3108,-2721,-2101,-3560,-3237,-3703,-3026,-4040,-4028,-4337,-4668,-4616,-4637,-5603,-5281,-4345,-4653,-4931,-4603,-4161,-4117,-3563,-3663,-2607,-3364,-3239,-3617,-4465,-3975,-4489,-4068,-4305,-4754,-4852,-5109,-5252,-4920,-4938,-5097,-4613,-4699,-4022,-3716,-3503,-3328,-2978,-3226,-4106,-3558,-3754,-1750,-3762,-3770,-4214,-4580,-5123,-5385,-5335,-5361,-5405,-4847,-4876,-4473,-4398,-3357,-3747,-3407,-3201,-2163,-3808,-3724,-3693,-4097,-4268,-4017,493,-4670,-4617,-4532,-5043,-5267,-4759,-4895,-5309,-4478,-4202,-3974,-3850,-3508,-3258,-2572,-2951,-3405,-3797,-3902,-4146,-3876,-4148,-4786,-4718,-5199,-5314,-5245,-5467,-5332,-5339,-4341,-4418,-3992,-3870,-3543,-3260,-1965,-2789,-3217,-3467,-2954,-3862,-4410,-4324,-4443,-4993,-4995,-5096,-5315,-5256,-5323,-4902,-4837,-4539,-4316,-3896,-3390,-3000,-2299,-3188,-2811,-3440,-3686,-4118,-4074,-4405,-4556,-5087,-4894,-5235,-5284,-5318,-5344,-4859,-4707,-4309,-3984,-3707,-3182,-3441,-2533,-3352,-3508,-3396,-3907,-3945,-4056,-4522,-4216,-4486,-4957,-5449,-5492,-5134,-5199,-4610,-4407,-4201,-4299,-3824,-3475,-3271,-3739,-3184,-3986,-3743,-3922,-3764,-3900,-4116,-4177,-4335,-5385,-5578,-5498,-5456,-5244,-4804,-4308,-4321,-4473,-3759,-3292,-2419,-3417,-3328,-3804,-3855,-4216,-3871,-3566,-931,-4292,-4671,-4208,-5494,-5463,-5079,-5045,-4961,-4820,-4457,-4088,-3522,-3838,-2887,-3683,-3980,-3819,-4260,-3797,-4181,-4124,-3874,-3906,-4647,-4091,-5172,-5287,-5130,-5188,-4959,-4733,-4327,-4423,-3680,-3657,-2864,-3480,-3528,-3826,-4194,-4496,-4235,-3937,-3934,-4061,-4843,-4792,-5294,-5358],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
