###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    meta(content='RadarsatPrototype.x3d',name='title'),
    meta(content='Radarsat 2 Remote Sensing Satellite',name='description'),
    meta(content='Derek Sebalj',name='creator'),
    meta(content='10 January 2007',name='created'),
    meta(content='14 February 2016',name='modified'),
    meta(content='http://www.radarsat2.info',name='reference'),
    meta(content='https://savage.nps.edu/Savage/Space/Satellites/RadarsatPrototype.x3d',name='identifier'),
    meta(content='X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit',name='generator'),
    meta(content='../../license.html',name='license')]),
  Scene=Scene(
    children=[
    WorldInfo(title='SavageVehicleMetadataTemplate',
      metadata=MetadataSet(name='SMAL',reference='https://savage.nps.edu/Savage/Tools/SMAL/SMAL.html',
        value=[
        MetadataString(name='version',value=["1.0"],
          metadata=MetadataString(name='appinfo',value=["This is the version of SMAL employed, not of the model."])),
        MetadataSet(name='EntityDefinition',
          #  Identifying metadata for the current simulation of interest 
          value=[
          MetadataSet(name='Classification',
            value=[
            MetadataString(name='level',value=["UNCLASSIFIED"],
              metadata=MetadataString(name='appinfo',value=["UNCLASSIFIED","FOUO","CONFIDENTIAL","SECRET"])),
            MetadataString(name='reference',value=["http://www.radarsat2.info"],
              metadata=MetadataString(name='appinfo',value=["The published source of classified information, if any, contained in the Metadata."]))],
            metadata=MetadataString(name='rationale',value=["not applicable"],
              metadata=MetadataString(name='appinfo',value=["The specific element which contains the information classifying this document."]))),
          MetadataSet(name='IdentificationParameters',
            value=[
            MetadataString(name='name',value=["Radarsat2"],
              metadata=MetadataString(name='appinfo',value=["The plain language name of the vehicle this model represents, i.e. the base class (DDG-51), or vehicle designation (M1A2)."]))]),
          MetadataSet(name='X3DArchiveModel',
            metadata=MetadataString(name='appinfo',value=["This is a placeholder element which ensures the proper validation of autogenerated SMAL code."])),
          MetadataSet(name='PhysicalParameters',
            value=[
            MetadataSet(name='PhysicalConstraints',
              value=[
              MetadataFloat(name='height',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum structural height of the object in meters. This may be used for clearance checking or other calculations."])),
              MetadataFloat(name='width',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum width, beam, or wingspan of the vehicle in meters. This may be used for clearance checking or other calculations."])),
              MetadataFloat(name='length',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum structural length of the object in meters. This may be used for clearance checking or other calculations."])),
              MetadataFloat(name='draft',value=[0],
                metadata=MetadataString(name='appinfo',value=["The vertical distance in meters from the deepest point (keel or other structure) to the waterline of a vehicle at its stated displacement or gross weight."])),
              MetadataFloat(name='wheelbase',value=[0],
                metadata=MetadataString(name='appinfo',value=["The longitudinal distance in meters from the center of the forwardmost roadwheel axle to the center of the rearmost roadwheel axle on this vehicle."])),
              MetadataFloat(name='trackWidth',value=[0],
                metadata=MetadataString(name='appinfo',value=["The horizontal distance in meters from the rightmost edge of the right wheel or track to the leftmost edge of the left wheel or track on this vehicle."])),
              MetadataFloat(name='grossWeight',value=[0],
                metadata=MetadataString(name='appinfo',value=["The standard operational weight of the vehicle in pounds or kilograms. This may be used in physics calculations."]))]),
            MetadataSet(name='DynamicResponseConstraints',
              value=[
              MetadataFloat(name='centerOfGravity',value=[0,0,0],
                metadata=MetadataString(name='appinfo',value=["Sets the Center of Gravity of the object as an (x, y, z) distance in meters from the physical center of the object, which is located at (0, 0, 0)."])),
              MetadataFloat(name='aerodynamicCenter',value=[0,0,0],
                metadata=MetadataString(name='appinfo',value=["Sets the Aerodynamic Center of the object as an (x, y, z) distance in meters from the physical center of the object, which is located at (0, 0, 0)."])),
              MetadataFloat(name='centerOfBuoyancy',value=[0,0,0],
                metadata=MetadataString(name='appinfo',value=["Sets the Center of Buoyancy of the object as an (x, y, z) distance in meters from the physical center of the object, which is located at (0, 0, 0)."])),
              MetadataFloat(name='maximumSpeed',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum rated speed for this vehicle in mph or kph."])),
              MetadataFloat(name='cruiseSpeed',value=[0],
                metadata=MetadataString(name='appinfo',value=["The published cruise speed for this vehicle in mph or kph."])),
              MetadataFloat(name='maximumAltitude',value=[0],
                metadata=MetadataString(name='appinfo',value=["The absolute ceiling for this aircraft in feet or meters."])),
              MetadataFloat(name='cruiseAltitude',value=[0],
                metadata=MetadataString(name='appinfo',value=["The cruise ceiling for this aircraft in feet or meters."])),
              MetadataFloat(name='maximumDepth',value=[0],
                metadata=MetadataString(name='appinfo',value=["The absolute depth for this submersible in feet or meters."])),
              MetadataFloat(name='cruiseDepth',value=[0],
                metadata=MetadataString(name='appinfo',value=["The cruise depth for this submersible in feet or meters."])),
              MetadataFloat(name='maximumAcceleration',value=[0],
                metadata=MetadataString(name='appinfo',value=["The ideal maximum acceleration achievable by this vehicle in feet or meters per second squared, as in at maximum Power excess for aircraft."])),
              MetadataFloat(name='maximumDeceleration',value=[0],
                metadata=MetadataString(name='appinfo',value=["The ideal best braking performance achievable by this vehicle in feet or meters per second squared."])),
              MetadataFloat(name='minimumTurnRadius',value=[0],
                metadata=MetadataString(name='appinfo',value=["The minimum turning radius for this vehicle in feet or meters, as in at best cornering speed for aircraft."])),
              MetadataFloat(name='maximumTurnRate',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum turning rate for this vehicle in degrees per second, as in at best cornering speed for aircraft."])),
              MetadataFloat(name='maximumFuelCapacity',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum usable internal fuel capacity of this vehicle in liters."]))]),
            MetadataSet(name='TacticalConstraints',
              value=[
              MetadataFloat(name='maximumAirThreatRange',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum effective range in miles or kilometers of the longest-range anti-aircraft weapon on this platform."])),
              MetadataFloat(name='maximumSurfaceThreatRange',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum effective range in miles or kilometers of the longest-range anti-surface weapon on this platform."])),
              MetadataFloat(name='maximumSubsurfaceThreatRange',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum effective range in miles or kilometers of the longest-range anti-submarine weapon on this platform."])),
              MetadataFloat(name='maximumAirDetectionRange',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum detection range of the longest-range air detection sensor on this platform."])),
              MetadataFloat(name='maximumSurfaceDetectionRange',value=[0],
                metadata=MetadataString(name='appinfo',value=["The DIS enumeration for the overall type of this object (for vehicles this value should be 1)."])),
              MetadataFloat(name='maximumSubsurfaceDetectionRange',value=[0],
                metadata=MetadataString(name='appinfo',value=["The maximum detection range of the longest-range subsurface detection sensor on this platform."]))])]),
          MetadataSet(name='CurrentConditionParameters',
            #  <MetadataString name="appinfo" value="This is a placeholder element which ensures the proper validation of autogenerated SMAL code."/> 
            ),
          MetadataSet(name='NetworkedCommunicationParameterSet',
            value=[
            MetadataSet(name='DisConfiguration',
              value=[
              MetadataInteger(name='entityKind',value=[1],
                metadata=MetadataString(name='appinfo',value=["The DIS enumeration for the overall type of this object (for vehicles this value should be 1)."])),
              MetadataInteger(name='entityDomain',value=[1],
                metadata=MetadataString(name='appinfo',value=["The DIS enumeration for the domain of operations of this object (air, surface, sub-surface, etc.)."])),
              MetadataInteger(name='entityCountry',value=[225],
                metadata=MetadataString(name='appinfo',value=["The DIS enumeration for the country of origin of this object (the value for United States is 225)."])),
              MetadataInteger(name='entityCategory',value=[1],
                metadata=MetadataString(name='appinfo',value=["The DIS enumeration for the type of this vehicle (cruiser or destroyer, tank or truck, bomber or fighter, etc.)."])),
              metadata=MetadataInteger(name='entitySubCategory',value=[1],
                metadata=MetadataString(name='appinfo',value=["The DIS enumeration for the class designation of this vehicle (CG-47 Ticonderoga, DDG-51 Arleigh Burke, M1A2, M880, B-52, F-22."])),
              MetadataInteger(name='entitySpecific',value=[1],
                metadata=MetadataString(name='appinfo',value=["The DIS enumeration for the specific unit or variant of this object (CG-68, DDG-77, HMMVW w/TOW package, etc.)."])),
              MetadataInteger(name='entityExtra',value=[1],
                metadata=MetadataString(name='appinfo',value=["The DIS enumeration for optional equipment or configurations for this vehicle."]))])])])])),
    #  TODO: replace Protos with DEF/USE if they are not going to be reused externally 
    ProtoDeclare(name='SolarPanel',
      ProtoBody=ProtoBody(
        children=[
        Shape(
          appearance=Appearance(
            texture=ImageTexture(url=["grill.png","https://savage.nps.edu/Savage/Space/Satellites/grill.png","http://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Chapter18-TextureMapping/grill.png"]),
            textureTransform=TextureTransform(center=(0.5,0.5),scale=(16,16))),
          geometry=IndexedFaceSet(coordIndex=[0,1,2,3,-1,7,6,5,4,-1,0,4,5,1,-1,1,5,6,2,-1,2,6,7,3,-1,3,7,4,0],texCoordIndex=[0,1,2,3,4,5,6,7],
            coord=Coordinate(point=[(-.9,-.9,0.05),(.9,-.9,0.05),(.9,.9,0.05),(-.9,.9,0.05),(-.9,-.9,-0.05),(.9,-.9,-0.05),(.9,.9,-0.05),(-.9,.9,-0.05)])))])),
    ProtoDeclare(name='SolarPanelHinge',
      ProtoBody=ProtoBody(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(),),
          geometry=Cylinder(height=.75,radius=.05))])),
    ProtoDeclare(name='SARHinge',
      ProtoBody=ProtoBody(
        children=[
        Shape(
          geometry=Box(size=(.1,.25,1.5)),
          appearance=Appearance(
            material=Material(diffuseColor=(.05,.05,.05))))])),
    ProtoDeclare(name='ShortSARPanel',
      ProtoBody=ProtoBody(
        children=[
        Shape(
          geometry=Box(size=(4.2,.25,1.5)),
          appearance=Appearance(
            material=Material(diffuseColor=(.1,.1,.1),shininess=1)))])),
    ProtoDeclare(name='LongSARPanel',
      ProtoBody=ProtoBody(
        children=[
        Shape(
          geometry=Box(size=(5,.25,1.5)),
          appearance=Appearance(
            material=Material(diffuseColor=(.1,.1,.1),shininess=1)))])),
    Group(DEF='Spacecraft',
      children=[
      Transform(DEF='Satellite',rotation=(0,1,0,1.57),translation=(0,20,0),
        children=[
        Transform(rotation=(0,1,0,1.57),
          children=[
          Shape(DEF='SatBus',
            geometry=Box(DEF='SatelliteStructure',size=(1.36,3.7,1.36)),
            appearance=Appearance(
              material=Material(diffuseColor=(.95,.65,.11),emissiveColor=(1,1,0),shininess=1))),
          Transform(rotation=(0,0,1,1.57),
            children=[
            Shape(
              geometry=Cylinder(height=10.5,radius=.025),
              appearance=Appearance(
                material=Material(diffuseColor=(.1,.1,.1),shininess=1)))]),
          Transform(translation=(0,1.9,0),
            children=[
            Shape(
              geometry=Cylinder(DEF='DockingRing',height=.2,radius=.68),
              appearance=Appearance(
                material=Material(diffuseColor=(1,1,1)))),
            Shape(
              appearance=Appearance(
                material=Material(diffuseColor=(0,0,0))),
              geometry=Cylinder(height=.205,radius=.65))]),
          Transform(translation=(0,-1.9,.75),
            children=[
            Transform(rotation=(1,0,0,1.57),
              children=[
              Shape(
                appearance=Appearance(
                  material=Material(),),
                geometry=Cylinder(height=.5,radius=.1)),
              Transform(translation=(0,.2,0),
                children=[
                Shape(
                  appearance=Appearance(
                    material=Material(),),
                  geometry=Sphere(radius=.15)),
                Transform(translation=(0,.3,0),
                  children=[
                  Transform(rotation=(1,0,0,1.0),
                    children=[
                    Shape(
                      geometry=Cylinder(height=.1,radius=.35),
                      appearance=Appearance(
                        material=Material(),))])])])])]),
          Group(DEF='InnerVertESSTPosX',
            children=[
            Transform(DEF='InnerVertESSTBackPosX',rotation=(1,0,0,.32),translation=(.85,-1,-.325),
              children=[
              Shape(
                appearance=Appearance(
                  material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                geometry=Cylinder(DEF='ESSTruss',height=2.2,radius=.025))]),
            Transform(DEF='InnerVertESSTFrontPosX',rotation=(1,0,0,-.32),translation=(.85,-1,.325),
              children=[
              Shape(
                appearance=Appearance(
                  material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                geometry=Cylinder(USE='ESSTruss'))])]),
          Group(DEF='InnerVertESSTNegX',
            children=[
            Transform(DEF='InnerVertESSTBackNegX',rotation=(1,0,0,.32),translation=(-.85,-1,-.325),
              children=[
              Shape(
                appearance=Appearance(
                  material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                geometry=Cylinder(USE='ESSTruss'))]),
            Transform(DEF='InnerVertESSTFrontNegX',rotation=(1,0,0,-.32),translation=(-.85,-1,.325),
              children=[
              Shape(
                appearance=Appearance(
                  material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                geometry=Cylinder(USE='ESSTruss'))])]),
          Transform(translation=(6.1,0,0),
            children=[
            Group(
              children=[
              Transform(DEF='OuterVertESSTBackPosX',rotation=(1,0,0,.32),translation=(-.85,-1,-.325),
                children=[
                Shape(
                  appearance=Appearance(
                    material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                  geometry=Cylinder(USE='ESSTruss'))]),
              Transform(DEF='ESSTConnectPosX',translation=(-.85,0,0),
                children=[
                Shape(
                  appearance=Appearance(
                    material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                  geometry=Sphere(radius=.05)),
                Transform(rotation=(0,.10,1,-2.01),
                  children=[
                  Transform(center=(0,-2.5,0),translation=(0,2.4,0),
                    children=[
                    Shape(DEF='OuterTruss',
                      appearance=Appearance(
                        material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                      geometry=Cylinder(height=4.7,radius=.025))])]),
                Transform(rotation=(0,-.10,1,-2.01),
                  children=[
                  Transform(center=(0,-2.5,0),translation=(0,2.4,0),
                    children=[
                    Shape(
                      appearance=Appearance(
                        material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                      geometry=Cylinder(height=4.7,radius=.025))])]),
                Transform(rotation=(0,-0.1,1,2.01),
                  children=[
                  Transform(center=(0,-2.5,0),translation=(0,2.4,0),
                    children=[
                    Shape(
                      appearance=Appearance(
                        material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                      geometry=Cylinder(height=4.7,radius=.025))])]),
                Transform(rotation=(0,.10,1,2.01),
                  children=[
                  Transform(center=(0,-2.5,0),translation=(0,2.4,0),
                    children=[
                    Shape(
                      appearance=Appearance(
                        material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                      geometry=Cylinder(height=4.7,radius=.025))])])]),
              Transform(rotation=(1,0,0,-.32),translation=(-.85,-1,.325),
                children=[
                Shape(
                  appearance=Appearance(
                    material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                  geometry=Cylinder(USE='ESSTruss'))])])]),
          Transform(translation=(-4.4,0,0),
            children=[
            Group(
              children=[
              Transform(rotation=(1,0,0,.32),translation=(-.85,-1,-.325),
                children=[
                Shape(
                  appearance=Appearance(
                    material=Material(diffuseColor=(.1,.1,.1))),
                  geometry=Cylinder(USE='ESSTruss'))]),
              Transform(translation=(-.85,0,0),
                children=[
                Shape(
                  appearance=Appearance(
                    material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                  geometry=Sphere(radius=.05)),
                Transform(rotation=(0,-0.1,1,2.01),
                  children=[
                  Transform(center=(0,-2.5,0),translation=(0,2.4,0),
                    children=[
                    Shape(
                      appearance=Appearance(
                        material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                      geometry=Cylinder(height=4.7,radius=.025))])]),
                Transform(rotation=(0,.10,1,2.01),
                  children=[
                  Transform(center=(0,-2.5,0),translation=(0,2.4,0),
                    children=[
                    Shape(
                      appearance=Appearance(
                        material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                      geometry=Cylinder(height=4.7,radius=.025))])]),
                Transform(rotation=(0,.10,1,-2.01),
                  children=[
                  Transform(center=(0,-2.5,0),translation=(0,2.4,0),
                    children=[
                    Shape(
                      appearance=Appearance(
                        material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                      geometry=Cylinder(height=4.7,radius=.025))])]),
                Transform(rotation=(0,-0.1,1,-2.01),
                  children=[
                  Transform(center=(0,-2.5,0),translation=(0,2.4,0),
                    children=[
                    Shape(
                      appearance=Appearance(
                        material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),shininess=1,specularColor=(.1,.1,.1))),
                      geometry=Cylinder(height=4.7,radius=.025))])])]),
              Transform(rotation=(1,0,0,-.32),translation=(-.85,-1,.325),
                children=[
                Shape(
                  appearance=Appearance(
                    material=Material(ambientIntensity=1,diffuseColor=(.1,.1,.1),emissiveColor=(.1,.1,.1),shininess=1)),
                  geometry=Cylinder(USE='ESSTruss'))])])]),
          Transform(translation=(0,-2,0),
            children=[
            Shape(
              geometry=Box(size=(1.5,.25,1.5)),
              appearance=Appearance(
                material=Material(diffuseColor=(.1,.1,.1),shininess=1)))]),
          Viewpoint(description='TopOfSat',orientation=(1,0,0,-0.8),position=(0,10,10)),
          Group(DEF='SolarPanelPosX',
            children=[
            Transform(DEF='SolarPanelRHS',translation=(.7,1,.6),
              children=[
              Transform(rotation=(1,0,0,.75),
                children=[
                Shape(
                  appearance=Appearance(
                    material=Material(diffuseColor=(.8,.8,.8),shininess=1)),
                  geometry=Extrusion(creaseAngle=3.1416,crossSection=[(0,0),(0,.25),(1.5,.9),(1.5,-.9),(0,-.25),(0,0),(.4,0),(.4,.2),(.425,.25),(.475,.28),(.5,.3),(1.2,.6),(1.225,.575),(1.25,.55),(1.275,.525),(1.3,.5),(1.3,-.5),(1.275,-.525),(1.25,-.55),(1.225,-.58),(1.2,-.6),(.5,-.3),(.475,-.28),(.425,-.25),(.4,-.2),(.4,0)],spine=[(0,0,0),(0,0,.1)])),
                Transform(translation=(1.55,0,.05),
                  children=[
                  ProtoInstance(name='SolarPanelHinge'),
                  Transform(translation=(.95,0,0),
                    children=[
                    ProtoInstance(name='SolarPanel'),
                    Transform(translation=(.95,0,0),
                      children=[
                      ProtoInstance(name='SolarPanelHinge'),
                      Transform(translation=(.95,0,0),
                        children=[
                        ProtoInstance(name='SolarPanel'),
                        Transform(translation=(.95,0,0),
                          children=[
                          ProtoInstance(name='SolarPanelHinge'),
                          Transform(translation=(.95,0,0),
                            children=[
                            ProtoInstance(name='SolarPanel')])])])])])])])]),
            TimeSensor(DEF='Clock',cycleInterval=30.0,loop=True),
            OrientationInterpolator(DEF='SolarPanelRHSPath',key=[0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0],keyValue=[(1.0,0.0,0.0,0.0),(1.0,0.0,0.0,0.628),(1.0,0.0,0.0,1.256),(1.0,0.0,0.0,1.884),(1.0,0.0,0.0,2.512),(1.0,0.0,0.0,3.14),(1.0,0.0,0.0,3.768),(1.0,0.0,0.0,4.396),(1.0,0.0,0.0,4.924),(1.0,0.0,0.0,5.552),(1.0,0.0,0.0,6.28)]),
            ROUTE(fromField='fraction_changed',fromNode='Clock',toField='set_fraction',toNode='SolarPanelRHSPath'),
            ROUTE(fromField='value_changed',fromNode='SolarPanelRHSPath',toField='set_rotation',toNode='SolarPanelRHS')]),
          Group(DEF='SolarPanelNegX',
            children=[
            Transform(DEF='SolarPanelLHS',translation=(-.7,1,-.6),
              children=[
              Transform(rotation=(1,0,0,.75),
                children=[
                Shape(
                  appearance=Appearance(
                    material=Material(diffuseColor=(.8,.8,.8))),
                  geometry=Extrusion(creaseAngle=2.0,crossSection=[(0,0),(0,.25),(-1.5,.9),(-1.5,-.9),(0,-.25),(0,0),(-.4,0),(-.4,.2),(-.425,.25),(-.475,.28),(-.5,.3),(-1.2,.6),(-1.225,.575),(-1.25,.55),(-1.275,.525),(-1.3,.5),(-1.3,-.5),(-1.275,-.525),(-1.25,-.55),(-1.225,-.58),(-1.2,-.6),(-.5,-.3),(-.475,-.28),(-.425,-.25),(-.4,-.2),(-.4,0)],spine=[(0,0,0),(0,0,.1)])),
                Transform(translation=(-1.55,0,.05),
                  children=[
                  ProtoInstance(name='SolarPanelHinge'),
                  Transform(translation=(-.95,0,0),
                    children=[
                    ProtoInstance(name='SolarPanel'),
                    Transform(translation=(-.95,0,0),
                      children=[
                      ProtoInstance(name='SolarPanelHinge'),
                      Transform(translation=(-.95,0,0),
                        children=[
                        ProtoInstance(name='SolarPanel'),
                        Transform(translation=(-.95,0,0),
                          children=[
                          ProtoInstance(name='SolarPanelHinge'),
                          Transform(translation=(-.95,0,0),
                            children=[
                            ProtoInstance(name='SolarPanel')])])])])])])])]),
            OrientationInterpolator(DEF='SolarPanelLHSPath',key=[0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0],keyValue=[(1.0,0.0,0.0,0.0),(1.0,0.0,0.0,0.628),(1.0,0.0,0.0,1.256),(1.0,0.0,0.0,1.884),(1.0,0.0,0.0,2.512),(1.0,0.0,0.0,3.14),(1.0,0.0,0.0,3.768),(1.0,0.0,0.0,4.396),(1.0,0.0,0.0,4.924),(1.0,0.0,0.0,5.552),(1.0,0.0,0.0,6.28)]),
            ROUTE(fromField='fraction_changed',fromNode='Clock',toField='set_fraction',toNode='SolarPanelLHSPath'),
            ROUTE(fromField='value_changed',fromNode='SolarPanelLHSPath',toField='set_rotation',toNode='SolarPanelLHS')]),
          Group(DEF='TRMod1NegX',
            children=[
            Transform(translation=(-.85,-2,0),
              children=[
              ProtoInstance(name='SARHinge'),
              Transform(translation=(-2.2,0,0),
                children=[
                ProtoInstance(name='ShortSARPanel')])]),
            Group(DEF='TRMod2NegX',
              children=[
              Transform(translation=(-5.25,-2,0),
                children=[
                ProtoInstance(name='SARHinge'),
                Transform(translation=(-2.6,0,0),
                  children=[
                  ProtoInstance(name='LongSARPanel')])])])]),
          Group(DEF='TRMod1PosX',
            children=[
            Transform(translation=(.85,-2,0),
              children=[
              ProtoInstance(name='SARHinge'),
              Transform(translation=(2.2,0,0),
                children=[
                ProtoInstance(name='ShortSARPanel')])])]),
          Group(DEF='TRMod2PosX',
            children=[
            Transform(translation=(5.25,-2,0),
              children=[
              ProtoInstance(name='SARHinge'),
              Transform(translation=(2.6,0,0),
                children=[
                ProtoInstance(name='LongSARPanel')])])]),
          Transform(DEF='RadarBeam',translation=(0,-2.2,0),
            children=[
            Shape(
              geometry=Box(size=(20.5,.4,1.5)),
              appearance=Appearance(
                material=Material(emissiveColor=(1,1,0),transparency=.8)))]),
          TimeSensor(DEF='RadarClock',loop=True),
          PositionInterpolator(DEF='RadarBeamPath',key=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],keyValue=[(0.0,-2.20,0),(0.0,-5,0),(0.0,-9,0),(0.0,-12,0),(0.0,-17,0),(0.0,-20,0),(0.0,-22,0),(0.0,-26,0),(0.0,-28,0),(0.0,-30,0)]),
          ROUTE(fromField='fraction_changed',fromNode='RadarClock',toField='set_fraction',toNode='RadarBeamPath'),
          ROUTE(fromField='value_changed',fromNode='RadarBeamPath',toField='set_translation',toNode='RadarBeam'),
          PositionInterpolator(DEF='SatellitePath',key=[0.002463054,0.004926108,0.007389163,0.009852217,0.012315271,0.014778325,0.017241379,0.019704433,0.022167488,0.024630542,0.027093596,0.02955665,0.032019704,0.034482759,0.036945813,0.039408867,0.041871921,0.044334975,0.04679803,0.049261084,0.051724138,0.054187192,0.056650246,0.0591133,0.061576355,0.064039409,0.066502463,0.068965517,0.071428571,0.073891626,0.07635468,0.078817734,0.081280788,0.083743842,0.086206897,0.088669951,0.091133005,0.093596059,0.096059113,0.098522167,0.100985222,0.103448276,0.10591133,0.108374384,0.110837438,0.113300493,0.115763547,0.118226601,0.120689655,0.123152709,0.125615764,0.128078818,0.130541872,0.133004926,0.13546798,0.137931034,0.140394089,0.142857143,0.145320197,0.147783251,0.150246305,0.15270936,0.155172414,0.157635468,0.160098522,0.162561576,0.165024631,0.167487685,0.169950739,0.172413793,0.174876847,0.177339901,0.179802956,0.18226601,0.184729064,0.187192118,0.189655172,0.192118227,0.194581281,0.197044335,0.199507389,0.201970443,0.204433498,0.206896552,0.209359606,0.21182266,0.214285714,0.216748768,0.219211823,0.221674877,0.224137931,0.226600985,0.229064039,0.231527094,0.233990148,0.236453202,0.238916256,0.24137931,0.243842365,0.246305419,0.248768473,0.251231527,0.253694581,0.256157635,0.25862069,0.261083744,0.263546798,0.266009852,0.268472906,0.270935961,0.273399015,0.275862069,0.278325123,0.280788177,0.283251232,0.285714286,0.28817734,0.290640394,0.293103448,0.295566502,0.298029557,0.300492611,0.302955665,0.305418719,0.307881773,0.310344828,0.312807882,0.315270936,0.31773399,0.320197044,0.322660099,0.325123153,0.327586207,0.330049261,0.332512315,0.334975369,0.337438424,0.339901478,0.342364532,0.344827586,0.34729064,0.349753695,0.352216749,0.354679803,0.357142857,0.359605911,0.362068966,0.36453202,0.366995074,0.369458128,0.371921182,0.374384236,0.376847291,0.379310345,0.381773399,0.384236453,0.386699507,0.389162562,0.391625616,0.39408867,0.396551724,0.399014778,0.401477833,0.403940887,0.406403941,0.408866995,0.411330049,0.413793103,0.416256158,0.418719212,0.421182266,0.42364532,0.426108374,0.428571429,0.431034483,0.433497537,0.435960591,0.438423645,0.4408867,0.443349754,0.445812808,0.448275862,0.450738916,0.45320197,0.455665025,0.458128079,0.460591133,0.463054187,0.465517241,0.467980296,0.47044335,0.472906404,0.475369458,0.477832512,0.480295567,0.482758621,0.485221675,0.487684729,0.490147783,0.492610837,0.495073892,0.497536946,0.5,0.502463054,0.504926108,0.507389163,0.509852217,0.512315271,0.514778325,0.517241379,0.519704433,0.522167488,0.524630542,0.527093596,0.52955665,0.532019704,0.534482759,0.536945813,0.539408867,0.541871921,0.544334975,0.54679803,0.549261084,0.551724138,0.554187192,0.556650246,0.5591133,0.561576355,0.564039409,0.566502463,0.568965517,0.571428571,0.573891626,0.57635468,0.578817734,0.581280788,0.583743842,0.586206897,0.588669951,0.591133005,0.593596059,0.596059113,0.598522167,0.600985222,0.603448276,0.60591133,0.608374384,0.610837438,0.613300493,0.615763547,0.618226601,0.620689655,0.623152709,0.625615764,0.628078818,0.630541872,0.633004926,0.63546798,0.637931034,0.640394089,0.642857143,0.645320197,0.647783251,0.650246305,0.65270936,0.655172414,0.657635468,0.660098522,0.662561576,0.665024631,0.667487685,0.669950739,0.672413793,0.674876847,0.677339901,0.679802956,0.68226601,0.684729064,0.687192118,0.689655172,0.692118227,0.694581281,0.697044335,0.699507389,0.701970443,0.704433498,0.706896552,0.709359606,0.71182266,0.714285714,0.716748768,0.719211823,0.721674877,0.724137931,0.726600985,0.729064039,0.731527094,0.733990148,0.736453202,0.738916256,0.74137931,0.743842365,0.746305419,0.748768473,0.751231527,0.753694581,0.756157635,0.75862069,0.761083744,0.763546798,0.766009852,0.768472906,0.770935961,0.773399015,0.775862069,0.778325123,0.780788177,0.783251232,0.785714286,0.78817734,0.790640394,0.793103448,0.795566502,0.798029557,0.800492611,0.802955665,0.805418719,0.807881773,0.810344828,0.812807882,0.815270936,0.81773399,0.820197044,0.822660099,0.825123153,0.827586207,0.830049261,0.832512315,0.834975369,0.837438424,0.839901478,0.842364532,0.844827586,0.84729064,0.849753695,0.852216749,0.854679803,0.857142857,0.859605911,0.862068966,0.86453202,0.866995074,0.869458128,0.871921182,0.874384236,0.876847291,0.879310345,0.881773399,0.884236453,0.886699507,0.889162562,0.891625616,0.89408867,0.896551724,0.899014778,0.901477833,0.903940887,0.906403941,0.908866995,0.911330049,0.913793103,0.916256158,0.918719212,0.921182266,0.92364532,0.926108374,0.928571429,0.931034483,0.933497537,0.935960591,0.938423645,0.9408867,0.943349754,0.945812808,0.948275862,0.950738916,0.95320197,0.955665025,0.958128079,0.960591133,0.963054187,0.965517241,0.967980296,0.97044335,0.972906404,0.975369458,0.977832512,0.980295567,0.982758621,0.985221675,0.987684729,0.990147783,0.992610837,0.995073892,0.997536946,1],keyValue=[(0.00,100.00,0.00),(0.00,99.98,2.24),(0.00,99.90,4.47),(0.00,99.80,6.32),(0.00,99.60,8.94),(0.00,99.40,10.94),(0.00,99.20,12.62),(0.00,99.00,14.11),(0.00,98.00,19.90),(0.00,97.00,24.31),(0.00,96.00,28.00),(0.00,95.00,31.22),(0.00,94.00,34.12),(0.00,93.00,36.76),(0.00,92.00,39.19),(0.00,91.00,41.46),(0.00,90.00,43.59),(0.00,89.00,45.60),(0.00,88.00,47.50),(0.00,87.00,49.31),(0.00,86.00,51.03),(0.00,85.00,52.68),(0.00,84.00,54.26),(0.00,83.00,55.78),(0.00,82.00,57.24),(0.00,81.00,58.64),(0.00,80.00,60.00),(0.00,79.00,61.31),(0.00,78.00,62.58),(0.00,77.00,63.80),(0.00,76.00,64.99),(0.00,75.00,66.14),(0.00,74.00,67.26),(0.00,73.00,68.34),(0.00,72.00,69.40),(0.00,71.00,70.42),(0.00,70.00,71.41),(0.00,69.00,72.38),(0.00,68.00,73.32),(0.00,67.00,74.24),(0.00,66.00,75.13),(0.00,65.00,75.99),(0.00,64.00,76.84),(0.00,63.00,77.66),(0.00,62.00,78.46),(0.00,61.00,79.24),(0.00,60.00,80.00),(0.00,59.00,80.74),(0.00,58.00,81.46),(0.00,57.00,82.16),(0.00,56.00,82.85),(0.00,55.00,83.52),(0.00,54.00,84.17),(0.00,53.00,84.80),(0.00,52.00,85.42),(0.00,51.00,86.02),(0.00,50.00,86.60),(0.00,49.00,87.17),(0.00,48.00,87.73),(0.00,47.00,88.27),(0.00,46.00,88.79),(0.00,45.00,89.30),(0.00,44.00,89.80),(0.00,43.00,90.28),(0.00,42.00,90.75),(0.00,41.00,91.21),(0.00,40.00,91.65),(0.00,39.00,92.08),(0.00,38.00,92.50),(0.00,37.00,92.90),(0.00,36.00,93.30),(0.00,35.00,93.67),(0.00,34.00,94.04),(0.00,33.00,94.40),(0.00,32.00,94.74),(0.00,31.00,95.07),(0.00,30.00,95.39),(0.00,29.00,95.70),(0.00,28.00,96.00),(0.00,27.00,96.29),(0.00,26.00,96.56),(0.00,25.00,96.82),(0.00,24.00,97.08),(0.00,23.00,97.32),(0.00,22.00,97.55),(0.00,21.00,97.77),(0.00,20.00,97.98),(0.00,19.00,98.18),(0.00,18.00,98.37),(0.00,17.00,98.54),(0.00,16.00,98.71),(0.00,15.00,98.87),(0.00,14.00,99.02),(0.00,12.00,99.28),(0.00,11.00,99.39),(0.00,9.00,99.59),(0.00,8.00,99.68),(0.00,6.00,99.82),(0.00,4.00,99.92),(0.00,3.00,99.95),(0.00,1.00,99.99),(0.00,0.00,100.00),(0.00,-1.00,99.99),(0.00,-3.00,99.95),(0.00,-4.00,99.92),(0.00,-6.00,99.82),(0.00,-8.00,99.68),(0.00,-9.00,99.59),(0.00,-11.00,99.39),(0.00,-12.00,99.28),(0.00,-14.00,99.02),(0.00,-15.00,98.87),(0.00,-16.00,98.71),(0.00,-17.00,98.54),(0.00,-18.00,98.37),(0.00,-19.00,98.18),(0.00,-20.00,97.98),(0.00,-21.00,97.77),(0.00,-22.00,97.55),(0.00,-23.00,97.32),(0.00,-24.00,97.08),(0.00,-25.00,96.82),(0.00,-26.00,96.56),(0.00,-27.00,96.29),(0.00,-28.00,96.00),(0.00,-29.00,95.70),(0.00,-30.00,95.39),(0.00,-31.00,95.07),(0.00,-32.00,94.74),(0.00,-33.00,94.40),(0.00,-34.00,94.04),(0.00,-35.00,93.67),(0.00,-36.00,93.30),(0.00,-37.00,92.90),(0.00,-38.00,92.50),(0.00,-39.00,92.08),(0.00,-40.00,91.65),(0.00,-41.00,91.21),(0.00,-42.00,90.75),(0.00,-43.00,90.28),(0.00,-44.00,89.80),(0.00,-45.00,89.30),(0.00,-46.00,88.79),(0.00,-47.00,88.27),(0.00,-48.00,87.73),(0.00,-49.00,87.17),(0.00,-50.00,86.60),(0.00,-51.00,86.02),(0.00,-52.00,85.42),(0.00,-53.00,84.80),(0.00,-54.00,84.17),(0.00,-55.00,83.52),(0.00,-56.00,82.85),(0.00,-57.00,82.16),(0.00,-58.00,81.46),(0.00,-59.00,80.74),(0.00,-60.00,80.00),(0.00,-61.00,79.24),(0.00,-62.00,78.46),(0.00,-63.00,77.66),(0.00,-64.00,76.84),(0.00,-65.00,75.99),(0.00,-66.00,75.13),(0.00,-67.00,74.24),(0.00,-68.00,73.32),(0.00,-69.00,72.38),(0.00,-70.00,71.41),(0.00,-71.00,70.42),(0.00,-72.00,69.40),(0.00,-73.00,68.34),(0.00,-74.00,67.26),(0.00,-75.00,66.14),(0.00,-76.00,64.99),(0.00,-77.00,63.80),(0.00,-78.00,62.58),(0.00,-79.00,61.31),(0.00,-80.00,60.00),(0.00,-81.00,58.64),(0.00,-82.00,57.24),(0.00,-83.00,55.78),(0.00,-84.00,54.26),(0.00,-85.00,52.68),(0.00,-86.00,51.03),(0.00,-87.00,49.31),(0.00,-88.00,47.50),(0.00,-89.00,45.60),(0.00,-90.00,43.59),(0.00,-91.00,41.46),(0.00,-92.00,39.19),(0.00,-93.00,36.76),(0.00,-94.00,34.12),(0.00,-95.00,31.22),(0.00,-96.00,28.00),(0.00,-97.00,24.31),(0.00,-98.00,19.90),(0.00,-99.00,14.11),(0.00,-99.20,12.62),(0.00,-99.40,10.94),(0.00,-99.60,8.94),(0.00,-99.80,6.32),(0.00,-99.90,4.47),(0.00,-99.98,2.24),(0.00,-100.00,0.00),(0.00,-99.98,-2.24),(0.00,-99.90,-4.47),(0.00,-99.80,-6.32),(0.00,-99.60,-8.94),(0.00,-99.40,-10.94),(0.00,-99.20,-12.62),(0.00,-99.00,-14.11),(0.00,-98.50,-17.26),(0.00,-98.00,-19.90),(0.00,-97.00,-24.31),(0.00,-96.00,-28.00),(0.00,-95.00,-31.22),(0.00,-94.00,-34.12),(0.00,-93.00,-36.76),(0.00,-92.00,-39.19),(0.00,-91.00,-41.46),(0.00,-90.00,-43.59),(0.00,-89.00,-45.60),(0.00,-88.00,-47.50),(0.00,-87.00,-49.31),(0.00,-86.00,-51.03),(0.00,-85.00,-52.68),(0.00,-84.00,-54.26),(0.00,-83.00,-55.78),(0.00,-82.00,-57.24),(0.00,-81.00,-58.64),(0.00,-80.00,-60.00),(0.00,-79.00,-61.31),(0.00,-78.00,-62.58),(0.00,-77.00,-63.80),(0.00,-76.00,-64.99),(0.00,-75.00,-66.14),(0.00,-74.00,-67.26),(0.00,-73.00,-68.34),(0.00,-72.00,-69.40),(0.00,-71.00,-70.42),(0.00,-70.00,-71.41),(0.00,-69.00,-72.38),(0.00,-68.00,-73.32),(0.00,-67.00,-74.24),(0.00,-66.00,-75.13),(0.00,-65.00,-75.99),(0.00,-64.00,-76.84),(0.00,-63.00,-77.66),(0.00,-62.00,-78.46),(0.00,-61.00,-79.24),(0.00,-60.00,-80.00),(0.00,-59.00,-80.74),(0.00,-58.00,-81.46),(0.00,-57.00,-82.16),(0.00,-56.00,-82.85),(0.00,-55.00,-83.52),(0.00,-54.00,-84.17),(0.00,-53.00,-84.80),(0.00,-52.00,-85.42),(0.00,-51.00,-86.02),(0.00,-50.00,-86.60),(0.00,-49.00,-87.17),(0.00,-48.00,-87.73),(0.00,-47.00,-88.27),(0.00,-46.00,-88.79),(0.00,-45.00,-89.30),(0.00,-44.00,-89.80),(0.00,-43.00,-90.28),(0.00,-42.00,-90.75),(0.00,-41.00,-91.21),(0.00,-40.00,-91.65),(0.00,-39.00,-92.08),(0.00,-38.00,-92.50),(0.00,-37.00,-92.90),(0.00,-36.00,-93.30),(0.00,-35.00,-93.67),(0.00,-34.00,-94.04),(0.00,-33.00,-94.40),(0.00,-32.00,-94.74),(0.00,-31.00,-95.07),(0.00,-30.00,-95.39),(0.00,-29.00,-95.70),(0.00,-28.00,-96.00),(0.00,-27.00,-96.29),(0.00,-26.00,-96.56),(0.00,-25.00,-96.82),(0.00,-24.00,-97.08),(0.00,-23.00,-97.32),(0.00,-22.00,-97.55),(0.00,-21.00,-97.77),(0.00,-20.00,-97.98),(0.00,-19.00,-98.18),(0.00,-18.00,-98.37),(0.00,-17.00,-98.54),(0.00,-16.00,-98.71),(0.00,-15.00,-98.87),(0.00,-14.00,-99.02),(0.00,-12.00,-99.28),(0.00,-11.00,-99.39),(0.00,-9.00,-99.59),(0.00,-8.00,-99.68),(0.00,-6.00,-99.82),(0.00,-4.00,-99.92),(0.00,-3.00,-99.95),(0.00,-1.00,-99.99),(0.00,0.00,-100.00),(0.00,1.00,-99.99),(0.00,3.00,-99.95),(0.00,4.00,-99.92),(0.00,6.00,-99.82),(0.00,8.00,-99.68),(0.00,9.00,-99.59),(0.00,11.00,-99.39),(0.00,12.00,-99.28),(0.00,14.00,-99.02),(0.00,15.00,-98.87),(0.00,16.00,-98.71),(0.00,17.00,-98.54),(0.00,18.00,-98.37),(0.00,19.00,-98.18),(0.00,20.00,-97.98),(0.00,21.00,-97.77),(0.00,22.00,-97.55),(0.00,23.00,-97.32),(0.00,24.00,-97.08),(0.00,25.00,-96.82),(0.00,26.00,-96.56),(0.00,27.00,-96.29),(0.00,28.00,-96.00),(0.00,29.00,-95.70),(0.00,30.00,-95.39),(0.00,31.00,-95.07),(0.00,32.00,-94.74),(0.00,33.00,-94.40),(0.00,34.00,-94.04),(0.00,35.00,-93.67),(0.00,36.00,-93.30),(0.00,37.00,-92.90),(0.00,38.00,-92.50),(0.00,39.00,-92.08),(0.00,40.00,-91.65),(0.00,41.00,-91.21),(0.00,42.00,-90.75),(0.00,43.00,-90.28),(0.00,44.00,-89.80),(0.00,45.00,-89.30),(0.00,46.00,-88.79),(0.00,47.00,-88.27),(0.00,48.00,-87.73),(0.00,49.00,-87.17),(0.00,50.00,-86.60),(0.00,51.00,-86.02),(0.00,52.00,-85.42),(0.00,53.00,-84.80),(0.00,54.00,-84.17),(0.00,55.00,-83.52),(0.00,56.00,-82.85),(0.00,57.00,-82.16),(0.00,58.00,-81.46),(0.00,59.00,-80.74),(0.00,60.00,-80.00),(0.00,61.00,-79.24),(0.00,62.00,-78.46),(0.00,63.00,-77.66),(0.00,64.00,-76.84),(0.00,65.00,-75.99),(0.00,66.00,-75.13),(0.00,67.00,-74.24),(0.00,68.00,-73.32),(0.00,69.00,-72.38),(0.00,70.00,-71.41),(0.00,71.00,-70.42),(0.00,72.00,-69.40),(0.00,73.00,-68.34),(0.00,74.00,-67.26),(0.00,75.00,-66.14),(0.00,76.00,-64.99),(0.00,77.00,-63.80),(0.00,78.00,-62.58),(0.00,79.00,-61.31),(0.00,80.00,-60.00),(0.00,81.00,-58.64),(0.00,82.00,-57.24),(0.00,83.00,-55.78),(0.00,84.00,-54.26),(0.00,85.00,-52.68),(0.00,86.00,-51.03),(0.00,87.00,-49.31),(0.00,88.00,-47.50),(0.00,89.00,-45.60),(0.00,90.00,-43.59),(0.00,91.00,-41.46),(0.00,92.00,-39.19),(0.00,93.00,-36.76),(0.00,94.00,-34.12),(0.00,95.00,-31.22),(0.00,96.00,-28.00),(0.00,97.00,-24.31),(0.00,98.00,-19.90),(0.00,99.00,-14.11),(0.00,99.20,-12.62),(0.00,99.40,-10.94),(0.00,99.60,-8.94),(0.00,99.80,-6.32),(0.00,99.90,-4.47),(0.00,99.98,-2.24),(0.00,100.00,0.00)]),
          ROUTE(fromField='fraction_changed',fromNode='Clock',toField='set_fraction',toNode='SatellitePath'),
          ROUTE(fromField='value_changed',fromNode='SatellitePath',toField='set_translation',toNode='Satellite'),
          OrientationInterpolator(DEF='SatellitePointingPath',key=[0.0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1.0],keyValue=[(1.0,0.0,0.0,0.0),(1.0,0.0,0.0,0.314),(1.0,0.0,0.0,0.628),(1.0,0.0,0.0,0.942),(1.0,0.0,0.0,1.256),(1.0,0.0,0.0,1.570),(1.0,0.0,0.0,1.884),(1.0,0.0,0.0,2.198),(1.0,0.0,0.0,2.512),(1.0,0.0,0.0,2.826),(1.0,0.0,0.0,3.14),(1.0,0.0,0.0,3.454),(1.0,0.0,0.0,3.768),(1.0,0.0,0.0,4.082),(1.0,0.0,0.0,4.396),(1.0,0.0,0.0,4.710),(1.0,0.0,0.0,4.924),(1.0,0.0,0.0,5.238),(1.0,0.0,0.0,5.552),(1.0,0.0,0.0,5.866),(1.0,0.0,0.0,6.28)]),
          ROUTE(fromField='fraction_changed',fromNode='Clock',toField='set_fraction',toNode='SatellitePointingPath'),
          ROUTE(fromField='value_changed',fromNode='SatellitePointingPath',toField='set_rotation',toNode='Satellite')]),
        Viewpoint(description='AlongXAxis',orientation=(-0.787,-0.467,0.402,1.6876),position=(-19.4,23.4,-0.9))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful for RadarsatPrototype.py")
