###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world4-1.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-45.04166532559549,-157.54166599614774,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4404,-4534,-5008,-4773,-5137,-4961,-5075,-5148,-5059,-4963,-5106,-5101,-5081,-5228,-5105,-5056,-5111,-4950,-5061,-5208,-5174,-4710,-3682,-4962,-3188,-4956,-5131,-5210,-5144,-4983,-5101,-5011,-5189,-5175,-5162,-5110,-5194,-5050,-5065,-5084,-4984,-5336,-5730,-4897,-5263,-4528,-3773,-5132,-5233,-5149,-5077,-5107,-5332,-5202,-5125,-5133,-5137,-5146,-5165,-5249,-5007,-5045,-5174,-5184,-5278,-5295,-5000,-4903,-3732,-5251,-5114,-5107,-4973,-5000,-5298,-5291,-5174,-5198,-5180,-5322,-5403,-5265,-5076,-5155,-5215,-4748,-4744,-5088,-5015,-4945,-4834,-5367,-5088,-5107,-5189,-5312,-5333,-5262,-5412,-5293,-5221,-5429,-5390,-5302,-5369,-5147,-5345,-4654,-5027,-4735,-5040,-4790,-5013,-5125,-5100,-5182,-5301,-5279,-5271,-5277,-5351,-5376,-5313,-5270,-5374,-5392,-5463,-5610,-5507,-4974,-4826,-5105,-4882,-5024,-4946,-5134,-5130,-5235,-5110,-4436,-5226,-5293,-5417,-5476,-5478,-5327,-5321,-5302,-5628,-5576,-5142,-5177,-5298,-5111,-4870,-4767,-4987,-5044,-5090,-5168,-5128,-5125,-5294,-5060,-5463,-5645,-5513,-5027,-5303,-5308,-5389,-5360,-5061,-5299,-5283,-5098,-4870,-4850,-4932,-4995,-5072,-5128,-4680,-5224,-5318,-5460,-5556,-5659,-5409,-5251,-5303,-5499,-5541,-5257,-5460,-4841,-5165,-5031,-4777,-4937,-5005,-4984,-5021,-5088,-5026,-5224,-5281,-5434,-5552,-5679,-5465,-5270,-5523,-5570,-5402,-5165,-4976,-5160,-5209,-5003,-4753,-4878,-4898,-5061,-4956,-5052,-5039,-5148,-5376,-5506,-5497,-5484,-5663,-5292,-5454,-5351,-4970,-5420,-4938,-5094,-5231,-4996,-4834,-4853,-4864,-4976,-4843,-4982,-5109,-5238,-5467,-5420,-5749,-5279,-5335,-5301,-5348,-5528,-5453,-5522,-4791,-5088,-5220,-5044,-4690,-4742,-4896,-4884,-4953,-5007,-5186,-5299,-5398,-5319,-5370,-5279,-5374,-5454,-5448,-5278,-5337,-5080,-5025,-5337,-5049,-4969,-4821,-4884,-4774,-4962,-5005,-5066,-5189,-5466,-5328,-4919,-5082,-5075,-5423,-5397,-5273,-5182,-5348,-5132,-5104,-4994,-4944,-4875,-5093,-5196,-4928,-5033,-5181,-5007,-5231,-5273,-5484,-5113,-4926,-4985,-5518,-5466,-5153,-5267,-5249,-4953,-5159,-5208,-5033,-4815,-5070,-5200,-5156,-5228,-5576,-5172,-5159,-5426,-5572,-5288,-5034,-5435,-5538,-5280,-5261,-5301,-5151,-5110,-5006,-4951,-4897,-4902,-5322,-5369,-5429,-5260,-5357,-5128,-5489,-5650,-5543,-5276,-5350,-5531,-5123,-4951,-4979,-5139,-5178,-5060,-5040,-4907,-4948,-4817,-5346,-5459,-5475,-5425,-5475,-5388,-5630,-5577,-5511,-5295,-5402,-5264,-4936,-4701,-4800,-5221,-5045,-5049,-5048,-4873,-4859,-4768,-5345,-5408,-5262,-5406,-5413,-5506,-5651,-5571,-5347,-5289,-5403,-5183,-4937,-4763,-4964,-4985,-4994,-4887,-4806,-4692,-4741,-4818,-5289,-5371,-5539,-5324,-5402,-5522,-5440,-5374,-5125,-5563,-5176,-5126,-4871,-4855,-5034,-5117,-4964,-4949,-4667,-4682,-4671,-4717,-5291,-5385,-5475,-5501,-5490,-5542,-5358,-4911,-4959,-5428,-4316,-5210,-5029,-5233,-5072,-4743,-3464,-4892,-4806,-4658,-4536,-4697,-5456,-5387,-5524,-5503,-5422,-5621,-5348,-5187,-4898,-5458,-5198,-5044,-4976,-5073,-5271,-4771,-4799,-4689,-4399,-4788,-4507,-4571,-5398,-5385,-5366,-5370,-5367,-5310,-5241,-5218,-5059,-5224,-5106,-4973,-5159,-5119,-5042,-5029,-4933,-4785,-4753,-4741,-4550,-4494,-5318,-5432,-5339,-5350,-5344,-5291,-5316,-5081,-5238,-5183,-4988,-5047,-5129,-5058,-5185,-5255,-4848,-4764,-5093,-4721,-4509,-4643],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
