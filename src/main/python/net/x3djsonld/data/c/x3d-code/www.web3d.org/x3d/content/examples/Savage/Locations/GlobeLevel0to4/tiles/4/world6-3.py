###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-112.54166465504323,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3359,-3575,-3509,-3817,-3696,-3718,-3882,-3804,-3860,-3859,-3813,-3905,-3753,-3916,-4130,-3931,-3946,-3927,-3733,-4074,-4001,-4263,-3621,-3664,-3616,-3698,-3838,-3794,-3882,-3867,-3931,-3950,-3892,-4025,-3972,-3877,-3828,-3882,-3923,-3975,-3784,-3946,-4230,-4346,-3315,-3453,-3599,-3742,-3806,-3900,-3887,-3887,-3901,-4025,-3965,-4076,-4028,-3906,-4039,-4118,-4013,-3844,-3905,-4038,-4310,-4198,-3587,-3505,-3589,-3695,-3722,-3840,-3795,-3813,-3994,-4008,-4080,-4062,-4224,-4022,-3824,-4175,-3986,-4120,-3983,-4014,-3988,-4035,-3397,-3482,-3422,-3574,-3827,-3874,-3863,-3914,-3920,-4010,-4007,-4037,-3883,-4024,-3814,-4142,-4026,-3850,-4035,-4405,-4026,-4266,-3274,-3490,-3579,-3644,-3737,-3830,-3744,-3880,-4028,-4025,-4013,-4020,-4151,-3913,-4058,-4464,-4109,-3669,-3821,-4235,-3872,-4195,-3340,-3521,-3499,-3647,-3847,-3809,-3913,-3907,-3976,-4010,-4032,-4038,-4114,-4037,-4030,-4226,-4215,-3799,-3578,-3998,-3784,-4144,-3260,-3403,-3495,-3627,-3847,-3901,-4002,-3985,-4041,-4106,-4145,-4054,-4273,-4091,-4131,-4257,-4191,-3538,-4282,-4326,-4232,-4460,-3255,-3388,-3543,-3658,-3846,-3890,-3958,-4029,-4049,-4042,-4068,-4165,-4274,-4206,-4123,-4295,-3553,-4045,-4235,-4294,-4247,-4266,-3138,-3294,-3392,-3616,-3779,-3950,-4024,-3998,-4002,-4045,-4033,-4153,-4240,-4217,-4250,-4267,-4191,-4300,-4068,-4198,-4359,-3916,-3149,-3183,-3435,-3578,-3771,-3976,-3944,-4015,-3962,-4043,-4227,-4178,-4187,-4217,-4162,-4184,-4099,-2301,-4315,-4232,-4467,-4300,-3038,-2679,-3424,-3659,-3838,-3819,-4020,-4017,-4067,-4132,-4086,-4153,-4200,-4150,-4353,-4186,-4027,-4264,-4439,-4249,-4380,-4445,-3072,-3386,-3419,-3687,-3860,-4103,-3928,-4003,-3967,-3946,-4218,-4147,-4115,-4287,-4108,-4249,-4013,-4194,-4107,-4383,-4365,-4519,-3102,-3247,-3489,-3653,-3696,-3719,-3828,-3554,-4031,-3943,-3859,-3939,-4011,-3986,-4182,-4195,-4003,-3900,-4475,-4252,-4352,-4589,-3014,-3327,-3471,-3647,-3697,-3712,-3661,-4407,-4083,-3174,-3433,-3649,-3569,-3841,-4120,-3736,-4039,-3937,-4305,-4033,-4420,-4546,-3151,-3353,-3438,-3678,-3712,-3651,-3946,-3752,-4016,-3829,-3583,-3895,-3454,-3498,-3676,-3579,-4183,-4098,-4161,-4292,-4403,-4483,-2942,-3498,-3536,-3581,-3670,-3658,-3978,-3835,-4150,-3883,-3565,-3676,-3367,-3617,-3277,-3666,-3798,-3466,-3779,-4426,-3996,-4270,-2704,-3203,-3370,-3473,-3568,-3670,-3794,-3828,-3983,-4156,-4161,-3720,-3864,-3647,-2786,-3465,-3671,-3962,-3846,-4108,-4155,-4321,-3102,-3183,-3329,-3417,-3644,-3589,-3852,-4006,-3808,-4380,-4089,-4777,-3704,-3622,-3536,-3775,-3818,-3767,-3976,-3903,-3901,-4041,-3150,-3115,-3312,-3494,-3455,-3604,-3712,-3689,-3832,-4116,-3996,-3486,-3678,-3693,-3955,-3285,-3705,-3648,-3810,-4114,-3862,-3860,-3105,-3234,-3025,-3367,-3647,-3576,-3760,-3797,-4082,-4182,-4123,-3973,-3982,-3880,-3661,-3557,-3739,-3544,-3770,-3315,-3930,-3882,-3202,-3294,-3036,-3333,-3462,-3620,-3617,-3914,-4251,-4320,-4271,-3694,-4063,-3866,-3836,-3762,-3760,-3755,-3920,-3788,-3850,-4160,-3052,-3023,-3022,-3300,-3497,-3596,-3818,-3947,-4246,-4073,-4238,-4074,-4179,-3984,-3905,-3874,-3227,-3653,-3784,-4092,-4042,-4075,-3209,-2996,-3040,-3255,-3553,-3594,-3692,-3974,-4288,-4065,-4263,-4292,-4193,-3997,-3911,-4058,-3211,-3573,-3756,-3999,-4050,-4006],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
