###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore29-22.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4654829221618253,103.90582275083842,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[25,25,27,29,31,33,34,35,37,37,37,37,38,41,43,44,44,44,43,41,38,36,34,32,31,30,29,28,27,26,25,25,25,24,24,24,26,27,28,30,31,32,33,34,36,37,37,37,39,42,44,44,43,42,41,39,38,36,34,32,32,31,29,27,26,25,24,23,23,23,23,23,29,30,31,31,31,32,33,34,35,36,37,40,43,45,45,43,41,39,38,37,36,35,34,33,32,31,29,27,26,25,24,23,22,22,22,22,31,32,32,32,32,32,33,34,34,36,38,41,44,45,45,43,39,36,35,35,35,34,34,33,32,31,29,27,26,25,24,22,21,21,21,21,32,33,34,34,34,34,33,34,34,35,38,41,43,45,44,41,36,33,32,32,33,34,34,33,33,32,30,28,27,26,23,21,20,19,20,21,33,34,35,36,37,36,35,34,34,35,37,39,41,43,42,39,34,31,30,30,32,33,34,34,33,32,30,28,27,26,23,21,19,19,20,21,36,36,36,38,40,40,38,37,36,37,38,40,41,40,38,36,33,30,29,30,32,34,35,35,34,32,30,28,27,26,25,23,21,21,21,22,38,38,38,41,44,43,41,39,38,38,39,40,39,38,36,33,31,29,29,30,33,35,35,35,34,32,30,28,27,26,25,24,23,22,22,23,39,39,39,42,46,45,44,42,40,39,39,38,37,35,34,33,32,31,30,31,32,34,35,34,32,31,29,28,27,27,26,25,23,23,23,23,40,39,40,43,47,47,46,44,42,40,39,37,34,34,34,33,33,33,32,32,32,33,33,33,31,30,28,28,28,28,27,25,24,23,24,24,40,39,40,43,46,46,45,42,40,38,37,35,34,33,33,33,33,32,32,32,32,32,33,32,30,29,28,28,29,28,26,25,24,25,26,26,40,39,39,42,45,45,44,41,38,36,35,34,33,33,33,32,32,32,32,32,32,32,32,31,29,28,29,29,29,27,25,24,25,26,27,27,40,40,41,44,48,48,46,42,38,36,35,34,33,33,32,31,30,30,30,30,31,31,31,30,27,26,27,27,26,25,24,24,25,26,27,28,41,41,43,46,50,50,48,43,39,36,35,34,33,33,32,31,29,29,29,29,30,31,31,29,25,23,25,26,24,22,23,23,24,26,28,29,42,42,43,46,49,50,48,44,39,35,33,33,33,33,32,32,30,29,28,28,28,29,31,32,28,25,25,25,24,23,24,25,27,28,29,30,42,43,44,45,47,48,48,44,39,34,32,31,32,33,33,33,31,30,28,26,25,27,32,34,31,27,26,25,23,23,25,27,29,30,30,31,42,43,44,44,44,45,45,42,37,34,32,31,32,32,33,32,31,30,28,27,25,27,32,33,29,26,25,24,23,24,26,28,30,31,32,33,42,43,43,42,41,41,41,39,36,33,31,31,31,31,32,31,31,30,29,28,27,28,31,31,28,25,23,23,24,25,27,30,31,33,34,35,45,45,44,42,39,39,38,37,35,33,32,31,31,31,32,31,30,30,29,28,27,27,28,27,25,23,23,23,24,26,28,30,31,32,34,37,47,47,46,42,38,36,36,35,35,34,33,33,32,32,32,31,30,30,29,29,27,26,25,23,21,20,21,23,25,27,28,30,31,32,36,38,47,47,45,42,38,36,34,34,34,34,33,33,32,31,31,30,30,29,29,28,27,26,25,25,22,22,24,26,27,28,29,30,31,33,36,38,48,47,45,42,38,35,33,33,33,33,33,32,32,31,29,29,30,29,28,27,26,26,27,27,26,26,28,29,29,29,29,30,32,34,36,37],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
