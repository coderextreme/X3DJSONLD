###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore7-16.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.273385249845958,103.81964454606431,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[45,37,33,30,29,28,27,27,26,25,24,22,20,20,20,21,21,21,23,25,23,19,16,11,8,8,7,7,7,8,10,13,18,26,30,26,37,32,32,33,30,28,27,27,26,25,24,23,22,21,21,21,21,20,22,26,24,20,15,12,9,8,7,6,6,9,11,12,15,22,26,25,32,30,33,36,32,28,27,27,27,26,25,25,24,22,21,20,20,19,21,24,23,19,16,14,11,9,8,7,8,10,12,11,11,14,17,19,31,30,34,36,33,29,28,28,27,25,25,26,26,26,24,22,21,20,21,22,21,19,17,15,14,11,10,7,7,11,12,12,11,12,14,16,31,32,34,36,34,31,30,29,27,24,25,27,29,33,30,27,24,23,21,19,18,18,17,17,16,15,12,8,7,10,12,13,13,13,14,15,29,32,34,36,35,33,32,31,27,23,26,29,31,33,31,28,26,25,22,19,19,22,22,20,18,17,13,8,7,8,11,14,15,15,14,15,26,31,34,36,35,33,32,32,28,23,26,30,31,31,30,28,27,25,22,19,22,28,28,23,20,18,14,9,7,7,10,14,16,16,15,15,24,30,33,35,34,32,32,33,29,25,27,30,31,30,28,26,26,25,24,21,24,30,30,25,22,20,17,12,9,9,11,14,16,16,15,16,22,29,32,34,32,30,31,33,31,28,27,29,29,29,26,24,24,26,26,25,26,29,28,25,23,23,20,16,13,12,12,13,15,16,17,17,25,30,32,33,30,27,28,30,29,27,26,26,26,25,24,21,23,27,30,32,33,33,30,25,22,23,21,17,15,16,16,15,15,17,18,19,31,32,32,31,26,21,23,25,25,23,22,22,22,21,19,17,22,27,35,44,45,42,35,24,19,18,18,17,18,20,21,19,17,18,19,20,34,32,31,29,23,17,19,21,22,22,21,20,19,17,17,17,21,26,36,46,48,45,37,25,19,16,16,17,20,24,25,24,23,23,23,23,31,29,28,26,20,15,16,18,20,23,22,21,19,18,18,19,21,24,30,38,41,41,36,27,20,16,15,18,22,27,30,31,31,30,29,28,30,29,28,26,20,16,15,16,20,24,24,22,20,19,20,21,21,22,26,30,34,37,34,28,23,18,17,19,23,29,33,36,37,36,34,32,31,30,30,28,24,19,19,18,20,22,23,24,23,21,21,21,21,21,23,25,28,31,31,29,26,23,20,20,23,30,35,38,40,39,37,35,32,31,31,30,27,23,21,20,20,21,22,24,24,23,23,22,22,21,24,26,28,29,30,30,29,27,24,20,22,29,35,37,38,38,37,35,33,32,32,30,27,24,22,21,21,21,22,23,24,24,24,24,24,25,29,34,35,33,33,33,34,31,28,22,22,27,31,31,32,33,33,33,34,34,31,28,27,26,24,22,22,22,22,22,23,24,26,27,28,30,36,43,43,38,35,36,35,34,29,24,23,25,27,26,26,29,31,31,38,38,32,26,28,29,28,25,24,22,21,19,21,24,28,32,35,38,43,48,47,42,38,34,32,31,29,26,24,24,24,23,24,29,32,31,41,40,31,24,29,34,31,27,25,23,21,19,21,24,29,34,39,43,47,51,50,44,39,33,30,28,27,26,24,23,22,21,22,28,31,29,41,38,30,23,30,38,33,27,26,27,26,24,24,24,25,27,33,40,45,49,48,42,38,35,31,27,25,23,23,23,21,19,19,22,24,24,39,34,27,23,31,40,33,26,26,29,29,29,27,23,21,19,25,34,40,45,44,40,37,36,32,26,23,21,21,21,20,18,17,17,18,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
