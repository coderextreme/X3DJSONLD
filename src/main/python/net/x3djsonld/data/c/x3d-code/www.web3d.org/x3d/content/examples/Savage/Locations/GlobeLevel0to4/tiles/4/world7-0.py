###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2286,-2124,-2490,-1378,-3804,-3888,-4570,-4789,-4946,-5021,-5184,-5324,-5174,-5568,-5330,-3799,-2474,-2673,-5023,-5018,-5233,-5186,-2124,-2601,-2868,-3663,-4078,-4464,-4554,-4764,-4836,-4726,-5267,-5470,-5523,-5597,-4618,-3831,-2627,-2644,-4974,-5127,-5345,-5250,-2200,-1132,-2867,-3270,-4072,-4629,-4648,-4683,-4741,-5010,-5242,-5490,-5565,-5053,-3860,-3709,-2674,-2793,-4818,-5043,-3919,-5293,-2481,-3019,-4161,-3360,-3562,-4344,-4697,-4003,-4735,-5108,-4385,-4590,-4926,-956,-4246,-4235,-2572,-3031,-4324,-5033,-5432,-5205,-3215,-3798,-4395,-4342,-3621,-4062,-4446,-4473,-4543,-5071,-4620,-4403,-3310,-3935,-4501,-3076,-2731,-2974,-4232,-5278,-4969,-5436,-3098,-4092,-4544,-4741,-4138,-3928,-4024,-3609,-3706,-4741,-4986,-4086,-3706,-3630,-4847,-3619,-2805,-3403,-3634,-4712,-5500,-5549,-3400,-5062,-4947,-4879,-4878,-4080,-4115,-3917,-2410,-4059,-4034,-3673,-3803,-3686,-4105,-3712,-2977,-3960,-3904,-5646,-5505,-5428,-4740,-5000,-5143,-5466,-5340,-4651,-4539,-3929,-4248,-5010,-4396,-4139,-4131,-3810,-3510,-3727,-3073,-4350,-4494,-5333,-4205,-4582,-4988,-5265,-5347,-5554,-5387,-4930,-4893,-3321,-4569,-5345,-4103,-4243,-3957,-3838,-3662,-3228,-3544,-3727,-4243,-5384,-5542,-5424,-5559,-5530,-5363,-5571,-5301,-5390,-5029,-4818,-4821,-5244,-4974,-4261,-4286,-4041,-3856,-4838,-4157,-4127,-5184,-4856,-5669,-5456,-4659,-4973,-5993,-5706,-5641,-5436,-5013,-5361,-5097,-4617,-5540,-5311,-4721,-4190,-3589,-3375,-4068,-4400,-4250,-5411,-5308,-5530,-4803,-5181,-5648,-5705,-6100,-5523,-5222,-5258,-5532,-5004,-5687,-5396,-5061,-4072,-3697,-4441,-4153,-4159,-5359,-5453,-5381,-5505,-5035,-2749,-5317,-5526,-5975,-5684,-4665,-5436,-5542,-5097,-5713,-5429,-4675,-3828,-3990,-4997,-4354,-5134,-5017,-5128,-5269,-5239,-5306,-5699,-5685,-5301,-5581,-5918,-5600,-5546,-5479,-4224,-5591,-5568,-5196,-3773,-4383,-4877,-3559,-5255,-5425,-5287,-5383,-5481,-5199,-5948,-5637,-5333,-5472,-5548,-5407,-5800,-5697,-3953,-5673,-5588,-5279,-4336,-2734,-5007,-4566,-5351,-5196,-4002,-5228,-4161,-5701,-5661,-5522,-5600,-5473,-4645,-5573,-5468,-5831,-5566,-5331,-5473,-5199,-4589,-2602,-3250,-4780,-4801,-5002,-5334,-5434,-5273,-6029,-6031,-5973,-5753,-5579,-4517,-5397,-4618,-1858,-5750,-5237,-5579,-5380,-4338,-2710,-4576,-5285,-5152,-5205,-5123,-5084,-5367,-5721,-5804,-6038,-5922,-5636,-4224,-5398,-5774,-5395,-5188,-5088,-5579,-5580,-4571,-3359,-4675,-5126,-5192,-5367,-4811,-5248,-5303,-5561,-5496,-5958,-6078,-5891,-4646,-5512,-5632,-4954,-5215,-4714,-5647,-5494,-4920,-4872,-5294,-5341,-5260,-5419,-5438,-5249,-5271,-5211,-5484,-5599,-5987,-5459,-5821,-5418,-5346,-3954,-5451,-5158,-5435,-5640,-5303,-5016,-5350,-5255,-5305,-5236,-5328,-5238,-5158,-5504,-4832,-5606,-5519,-5441,-5476,-5229,-5560,-5375,-4777,-5414,-5458,-5672,-5350,-5292,-5247,-5320,-5348,-5245,-5211,-5236,-5248,-5192,-5512,-5363,-5764,-4849,-4546,-5299,-5304,-5451,-5560,-4669,-5532,-5470,-5454,-5466,-5309,-5300,-5370,-5079,-5098,-5067,-5224,-5253,-5244,-5198,-5503,-5049,-4838,-5321,-5271,-5490,-5645,-5982,-5172,-5257,-5405,-5431,-5382,-5285,-5325,-5274,-3512,-5133,-4969,-5316,-5211,-5072,-5454,-5392,-4957,-5354,-5478,-5438,-5318,-5879,-4632,-5564,-5506,-5301,-5370,-5357,-5296,-5253,-4960,-5032,-4975],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
