###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_52',geoSystem=['GDC'],position=(33.7083370213374,-67.54166331393873,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(33.7083370213374,-67.54166331393873,0.0),range=4495500.0,child1Url=['../../tiles/4/world10-4.x3d'],child2Url=['../../tiles/4/world10-5.x3d'],child3Url=['../../tiles/4/world11-4.x3d'],child4Url=['../../tiles/4/world11-5.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world5-2.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-90.04166398449098,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[61,1,-4567,-1521,-3965,-4935,-3603,-1985,441,45,-1454,-1688,-4929,-6935,-5535,-5631,-4951,-4782,-4375,-3269,-3197,42,16,-4599,-3974,-2684,-1106,-2910,-2174,-422,-2630,-7209,-7634,-6992,-5036,-5063,-4921,-5080,-4628,-4518,-3644,-3099,7,22,-4126,-4590,-4033,-4,134,-2832,-4230,-772,-5150,-5354,-5381,-5568,-5373,-5272,-4933,-4932,-4293,-4212,-3497,-44,-25,-2004,-3,-21,157,-1233,-1234,-1896,-5480,-5205,-5766,-5695,-5480,-5533,-5338,-5214,-5471,-4407,-4035,-3437,-1121,-72,-948,-1265,-2,-514,-35,-2627,-5118,-5535,-5753,-5828,-5852,-5997,-5715,-5453,-5108,-5419,-5003,-3888,-2691,-3672,-346,-3246,-903,-961,-194,-3,-1136,-5451,-5500,-5770,-5799,-5897,-5896,-5812,-5938,-5514,-5336,-5054,-3431,-3937,-3505,-3414,-3287,-69,7,-3,3,-4885,-5477,-5545,-5465,-5703,-5540,-5898,-5885,-5905,-5007,-4570,-4645,-3766,-2332,-3120,-2860,-3268,-58,16,-530,-4791,-4653,-5246,-5448,-5352,-5569,-5587,-6038,-6096,-5646,-5678,-5034,-4512,-4410,-3508,-1289,-2645,-3256,-42,14,-219,-1318,-4563,-5048,-5586,-5049,-5345,-5598,-5606,-6001,-5701,-5352,-5285,-4950,-4344,-3258,-57,-2358,-249,-20,23,-846,-3540,-4742,-4887,-5509,-4876,-5447,-5312,-5481,-5455,-5888,-5299,-5777,-5053,-4644,-3572,0,-39,-27,0,-12,-801,-3709,-4587,-5015,-5409,-5182,-5053,-5065,-5511,-5584,-5541,-5511,-5308,-5054,-4459,-3775,57,31,13,55,-19,-810,-3138,-3352,-5518,-5347,-5152,-4816,-4579,-5101,-5490,-5532,-5619,-5390,-5490,-4521,-4334,76,60,139,107,-3,-511,-2592,-4836,-5394,-5396,-5114,-4719,-4578,-5011,-5296,-5548,-5574,-5413,-5201,-4816,-4366,88,55,212,125,38,-29,-776,-4654,-5354,-5387,-5078,-4786,-4534,-4750,-5134,-5540,-5342,-4971,-5164,-4867,-4143,39,195,236,191,63,12,-40,-4042,-4981,-5366,-5220,-4996,-4896,-4728,-4939,-5456,-5496,-5380,-5327,-5033,-4731,62,262,211,868,223,60,-2,-3117,-4430,-5125,-5205,-4904,-4877,-4539,-5061,-5527,-5523,-5519,-4761,-4711,-4536,72,168,317,428,394,115,7,-2058,-3919,-4524,-4887,-4948,-5093,-4703,-4980,-5210,-5564,-5021,-5129,-5003,-4775,128,168,227,459,903,161,0,-1291,-3357,-4327,-4943,-4947,-5038,-4991,-5057,-5300,-5413,-5416,-5398,-5259,-4968,206,113,167,357,283,362,3,-38,-2938,-3619,-4415,-4814,-4604,-4606,-5128,-5252,-5352,-5372,-5414,-5338,-5282,173,188,243,276,310,238,115,-10,-500,-2577,-3544,-1845,-5012,-5105,-5297,-5334,-5262,-5295,-5393,-5266,-4441,177,228,268,303,336,640,312,39,-60,-76,-520,-3865,-4645,-4914,-5088,-5195,-5149,-5208,-4235,-3763,-4581,196,215,261,301,343,491,228,22,-56,-69,-142,-3806,-4601,-4891,-5075,-5219,-5141,-5226,-4148,-3713,-4618],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
