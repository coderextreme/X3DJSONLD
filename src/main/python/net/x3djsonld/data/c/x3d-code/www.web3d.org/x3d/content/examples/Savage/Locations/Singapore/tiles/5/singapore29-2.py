###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore29-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4654829221618253,103.61856206825804,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[28,28,29,32,35,39,42,45,48,49,49,51,54,56,56,50,41,37,36,37,38,41,47,50,51,49,44,40,38,38,41,44,45,47,50,55,28,29,31,34,37,40,43,47,50,53,55,57,60,60,60,53,42,37,34,33,34,36,39,42,43,42,39,37,38,40,44,46,45,45,46,51,31,33,35,37,39,40,41,46,50,56,62,64,66,65,62,54,42,37,35,33,31,32,34,35,37,38,38,40,42,46,51,54,52,49,48,49,35,37,40,42,43,42,42,45,50,57,65,68,68,65,60,52,41,36,35,32,29,28,29,30,33,37,41,45,48,53,58,61,60,55,51,49,39,44,48,49,50,48,45,48,53,58,62,62,59,56,51,45,38,34,33,31,29,28,28,30,36,42,47,52,55,59,65,68,66,61,55,50,42,49,54,55,55,51,47,51,57,58,59,55,51,46,42,39,36,34,33,32,30,29,28,31,38,45,52,56,59,62,68,71,71,66,59,54,43,49,54,54,52,49,47,52,59,60,58,52,45,41,37,36,35,34,34,34,32,31,28,31,38,45,51,55,55,56,60,65,68,69,65,61,43,49,53,51,47,46,46,52,60,60,59,51,41,37,34,34,36,37,38,37,36,34,30,31,36,42,48,51,50,50,53,59,66,70,70,69,39,43,44,43,41,41,42,47,54,57,59,52,43,38,36,38,43,45,46,45,43,39,34,31,31,34,39,42,42,44,48,55,63,70,72,73,35,36,36,36,35,37,39,45,50,55,60,54,45,41,39,43,50,53,54,52,50,44,38,32,27,27,30,34,36,39,45,52,61,69,73,76,35,36,37,38,38,40,43,47,51,58,64,58,48,45,43,48,57,61,62,59,54,47,41,35,29,27,30,34,37,41,46,53,60,66,69,71,35,38,40,41,43,45,48,52,55,61,68,62,52,49,48,54,64,68,69,64,56,48,43,36,30,28,31,35,40,44,48,54,59,64,64,66,36,39,43,45,47,53,59,63,66,69,73,65,53,51,52,58,66,67,64,56,48,42,37,32,28,28,31,36,42,47,53,59,63,65,63,64,36,41,45,48,52,60,69,73,76,77,78,68,55,53,56,62,69,65,57,48,40,34,30,28,26,27,32,37,43,49,58,65,67,67,63,60,35,39,44,47,51,60,69,77,84,83,82,70,56,55,59,63,68,61,50,41,35,31,27,25,25,27,33,39,43,48,57,64,66,66,61,57,33,37,41,45,50,58,68,80,92,90,84,72,58,57,61,65,67,58,43,34,30,27,25,24,24,27,36,42,44,48,55,62,65,65,59,53,36,42,48,54,59,67,75,85,95,93,88,77,64,64,68,70,72,62,47,36,29,25,24,24,24,29,41,49,51,54,60,64,65,64,56,50,39,48,57,64,71,77,82,90,98,95,91,82,71,71,75,76,77,67,52,39,29,24,23,23,24,32,46,56,60,62,65,67,66,62,54,46,36,46,55,61,66,73,80,90,101,100,96,89,79,78,80,79,76,68,57,46,36,30,27,25,25,32,46,57,62,65,67,67,65,60,53,45,33,42,51,56,60,67,74,89,104,105,102,96,89,86,84,80,74,68,62,54,44,36,31,27,26,32,46,57,64,68,69,67,63,58,52,45,29,37,44,48,52,59,67,83,99,101,99,91,81,76,73,69,64,60,57,51,44,37,31,27,26,31,43,53,62,67,68,66,61,55,49,44,26,31,36,40,44,50,58,74,92,95,93,82,68,61,58,54,50,50,50,47,43,37,31,27,26,30,39,49,58,65,66,65,60,54,47,42],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
