###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore23-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4130926478938615,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[23,25,29,32,36,40,45,49,51,52,53,53,52,50,47,44,40,36,36,38,38,36,33,30,27,28,27,23,21,19,19,19,20,22,25,25,23,24,27,30,33,38,42,46,48,49,50,50,49,47,44,40,36,31,30,34,34,33,30,26,23,24,23,21,20,20,19,19,20,22,25,25,25,25,27,29,33,36,39,42,44,46,47,47,45,43,40,37,32,27,26,29,29,28,26,22,20,20,20,20,21,21,21,21,23,26,28,28,27,26,28,30,32,34,36,38,41,43,43,42,40,38,35,33,29,24,22,23,24,23,22,19,17,18,18,20,22,22,23,25,26,29,32,31,29,27,27,29,30,32,34,35,38,40,40,38,36,33,31,29,26,22,20,19,19,19,18,17,16,18,20,23,25,24,24,24,24,27,30,31,30,26,26,27,28,29,31,33,34,36,35,34,32,29,27,26,23,20,17,15,14,15,15,15,16,20,24,27,29,27,25,23,22,24,27,30,29,24,24,24,25,26,27,27,29,29,30,30,28,25,23,22,20,18,16,13,12,14,15,16,18,25,30,32,33,30,27,24,22,24,25,28,26,21,21,21,21,22,21,21,22,23,24,25,24,21,20,19,17,16,14,12,12,14,16,18,23,30,35,37,38,34,30,25,22,24,25,26,24,21,21,20,20,19,19,18,18,19,20,21,20,19,18,17,16,15,14,13,13,15,18,21,27,35,40,41,41,36,32,30,29,28,28,26,23,22,21,20,19,19,18,18,18,18,18,18,17,17,16,16,15,14,14,14,15,17,21,25,31,39,44,44,43,38,35,35,36,34,32,28,25,23,22,21,19,17,17,17,18,18,17,16,15,15,14,13,13,13,13,14,15,19,23,28,34,41,46,47,46,41,38,41,43,40,37,32,26,25,23,21,19,17,17,17,17,17,17,16,15,12,11,10,10,11,12,14,16,19,24,29,35,42,47,50,51,46,43,46,49,46,43,37,27,25,23,21,18,17,17,17,16,16,16,16,14,11,9,7,7,8,10,13,17,20,25,30,35,42,47,50,52,49,46,50,52,49,45,39,28,26,23,20,18,18,18,18,16,15,15,15,13,10,7,4,3,5,8,13,18,22,26,30,36,42,46,48,50,50,50,53,53,49,44,41,27,25,23,20,19,18,18,18,16,14,13,13,12,9,7,4,3,4,7,14,19,23,27,30,35,41,45,48,50,52,53,55,54,50,46,43,26,24,22,21,19,17,17,18,16,14,12,11,11,10,8,7,6,6,9,16,20,23,26,29,33,38,43,48,52,55,57,56,55,52,49,47,24,22,21,20,18,16,16,17,16,14,12,11,11,10,10,9,9,9,12,17,21,24,26,29,32,37,41,46,50,54,58,58,57,55,52,51,22,20,19,18,16,13,14,14,14,13,12,11,11,11,11,10,11,13,15,19,22,24,27,29,32,35,38,42,46,52,58,59,60,58,56,56,21,21,20,18,15,13,13,14,14,14,13,12,12,12,12,12,13,15,18,20,23,25,27,29,31,33,36,39,43,51,58,62,64,62,60,60,22,23,22,21,17,14,14,14,15,14,14,13,13,13,13,14,15,16,18,21,23,24,26,28,29,31,33,35,40,50,59,65,70,67,64,65,23,24,25,25,20,16,15,14,14,14,14,14,14,14,14,14,15,17,19,20,22,23,25,26,28,30,32,34,38,49,58,67,73,71,69,70,23,26,29,30,24,18,16,14,13,13,14,15,16,15,14,14,15,16,17,19,21,22,24,24,26,30,32,35,39,47,54,65,73,74,74,74,22,27,31,34,27,19,16,14,13,13,14,16,17,16,15,14,14,15,16,18,20,21,23,23,24,28,32,35,39,44,51,62,72,74,76,75],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
