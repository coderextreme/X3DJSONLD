###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2865,-3751,-4635,-4675,-4639,-4641,-4407,-4544,-5350,99,-1673,1275,92,44,28,-5,-31,-34,-22,-17,70,168,-2933,-3102,-4530,-4632,-4616,-4637,-4354,-4351,-4030,-18,-664,391,180,4,-14,-21,-32,-41,-33,19,124,111,-4150,-3334,-4682,-4557,-4545,-4512,-4408,-4586,-2342,-86,-17,572,73,4,-2,-33,-35,-57,-41,6,80,90,-4318,-4285,-4488,-4507,-4485,-4484,-4021,-5090,-436,1,87,365,18,7,-3,-33,-44,-37,-31,26,208,33,-4091,-3365,-4439,-4441,-4467,-4412,-4335,-5319,41,-62,1125,41,15,0,-4,-38,-49,-12,-25,100,118,59,-3893,-2183,-4672,-4415,-4354,-4349,-4474,-4351,202,-74,202,39,25,-6,-27,-36,-43,-18,-34,20,20,21,-3631,-2229,-4411,-4299,-4281,-4622,-4871,-1581,-673,-149,120,19,-13,-17,28,-52,-34,-57,-40,36,-27,45,-2891,-2700,-3902,-4270,-4205,-4574,-3257,-208,-40,1317,50,25,-44,26,-12,-37,-61,-81,-34,-19,-64,9,-3452,-2301,-3676,-4185,-4343,-3500,-833,-737,30,1400,6,-34,57,119,-22,-44,-3,-73,-31,-35,-38,0,-3850,-2452,-4057,-4160,-4604,-1194,-1102,-1077,1282,454,-6,-14,251,52,-47,-70,0,-42,-74,-66,-45,-36,-3762,-2235,-3671,-4153,-4479,-1746,-982,-170,367,9,-59,-19,99,41,-46,-70,-68,-56,-77,-82,-95,-49,-3470,-2638,-3265,-4137,-2699,-1668,-681,682,261,-27,-51,15,123,52,-58,-73,-83,-40,-20,-96,-93,-76,-4008,-3769,-3171,-4103,-1280,-1879,-1,941,183,-57,-66,43,150,103,-64,-73,-92,-108,-77,-118,-105,-92,-3411,-3272,-3072,-4119,-1370,-2731,718,102,-41,-88,-59,603,115,19,-66,-68,-81,-71,-92,-121,-131,-151,-3785,-2826,-3732,-4153,-890,-2252,-186,-1117,-107,-86,-48,91,128,-1,-67,-59,-55,-71,-96,-139,-562,-1161,-3832,-2911,-2727,-4204,-1404,-1730,-1418,-1337,-253,-97,8,146,9,-52,-58,-60,-47,-59,-100,-162,-1213,-1688,-3733,-2911,-2935,-4214,-1517,-1759,-1378,-1208,-461,-91,0,22,-37,-48,-58,-45,-42,-50,-112,-1178,-1536,-1823,-3730,-2859,-3551,-4141,-1124,-2686,-1439,-1076,-427,-69,182,-42,-33,-54,-52,-43,-34,-68,-68,-1053,-1762,-1934,-3713,-2882,-3294,-2713,-445,-2087,-1579,-852,-412,0,92,-75,-74,-61,-39,-37,-30,-56,-94,-653,-1573,-1498,-3581,-3073,-3766,-1676,-5,-2300,-2206,-599,-169,113,48,-51,-80,-68,-23,-25,-26,-79,-108,-460,-397,-1800,-3504,-3039,-3660,-1290,-905,-2157,-2354,-502,-2,146,25,-36,-82,-54,-19,-7,-19,-44,-138,-1090,-1526,-1591,-3455,-2903,-3562,-1153,-1868,-1593,-2478,-434,-56,329,38,-52,-71,-42,-19,3,-20,-49,-109,-1525,-2711,-1527,-3428,-3343,-3532,-857,-2093,-2028,-2619,-419,-32,286,-8,-75,-69,-39,-17,1,3,-28,-33,-1380,-3017,-2852,-3414,-3345,-3377,-928,-2243,-2504,-2684,-389,-41,127,-6,-78,-71,-34,-11,1,0,-26,-8,-1344,-3059,-3223],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
