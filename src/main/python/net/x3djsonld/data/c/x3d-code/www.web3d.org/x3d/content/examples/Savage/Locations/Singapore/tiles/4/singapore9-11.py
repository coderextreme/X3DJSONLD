###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_911',geoSystem=['GDC'],position=(1.3781657983818856,103.92018578496744,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.3781657983818856,103.92018578496744,0.0),range=4101.627,child1Url=['../../tiles/5/singapore18-22.x3d'],child2Url=['../../tiles/5/singapore18-23.x3d'],child3Url=['../../tiles/5/singapore19-22.x3d'],child4Url=['../../tiles/5/singapore19-23.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore9-11.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3694340860038916,103.90582275083842,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[13,14,15,15,14,14,17,21,21,21,19,20,22,27,31,32,34,32,30,30,28,24,20,19,22,21,18,17,19,17,15,12,15,14,13,14,14,12,13,14,14,12,12,15,20,21,21,20,20,21,25,30,33,33,31,31,32,29,25,20,19,22,22,19,19,23,20,16,12,14,13,11,13,13,11,12,13,14,11,11,13,19,21,21,21,21,20,24,30,34,33,31,33,35,30,24,19,18,22,22,20,21,27,23,16,12,13,12,11,11,12,11,12,10,12,10,10,12,18,20,20,21,22,20,21,29,34,35,34,35,37,30,21,17,18,22,23,20,20,27,23,15,12,13,13,11,11,11,11,12,7,10,10,10,11,16,19,20,21,22,20,19,28,35,37,37,38,38,29,19,15,17,22,24,19,18,25,21,14,12,15,14,11,11,11,10,10,7,10,10,9,10,14,18,22,22,21,19,20,28,35,38,38,39,39,31,18,12,15,21,23,19,16,20,19,15,13,16,15,12,12,12,9,9,7,10,9,8,9,12,18,24,22,19,19,22,28,34,37,37,38,39,33,18,10,13,19,21,18,15,16,17,15,14,16,15,15,14,14,8,9,7,9,9,8,8,10,18,24,23,20,19,25,28,31,34,34,36,38,34,21,11,12,17,19,17,14,14,16,16,14,16,16,17,15,15,8,9,8,8,8,7,7,9,16,23,23,21,19,27,29,28,30,31,34,36,34,25,16,13,15,17,16,14,13,16,15,14,16,17,18,16,16,8,9,8,9,8,7,6,8,14,20,23,21,19,26,26,24,25,28,31,33,32,27,19,14,15,16,15,15,13,15,14,14,16,17,19,16,17,9,10,8,10,11,9,8,9,12,18,21,20,20,23,22,20,21,24,27,30,29,25,21,17,16,16,16,15,14,15,13,14,16,18,19,17,17,10,11,9,11,13,11,11,11,12,16,19,19,20,21,20,19,19,22,24,26,25,23,22,19,17,16,16,15,14,14,13,14,16,19,19,18,18,11,12,10,13,14,14,13,13,14,16,17,18,21,21,19,19,19,21,22,22,21,22,23,20,16,16,15,15,13,12,14,13,14,18,18,19,20,12,13,10,12,14,15,16,15,15,16,16,17,21,20,18,19,18,20,20,19,18,21,24,21,16,16,16,14,13,12,13,12,12,18,19,22,23,12,12,9,10,13,15,17,16,15,17,16,18,21,19,19,19,18,19,20,17,17,21,23,20,17,17,16,14,13,13,13,10,10,17,23,26,24,10,12,9,9,12,14,16,17,16,18,17,19,21,19,19,18,16,17,19,17,16,20,23,20,18,18,17,14,14,16,14,10,9,17,26,29,26,9,10,9,10,12,13,14,16,17,18,18,19,22,20,20,17,14,15,18,18,17,19,21,20,19,18,16,15,16,18,16,11,10,18,28,29,27,8,9,9,11,12,12,13,16,18,18,18,20,22,20,20,16,13,14,17,18,16,18,19,19,19,17,16,16,17,18,16,11,10,17,29,30,29,9,8,9,12,12,13,13,17,18,17,18,21,21,20,21,17,13,13,16,17,16,17,19,18,18,17,17,16,16,16,15,10,8,14,29,32,31,9,8,11,13,13,14,13,17,18,16,17,21,21,21,22,18,14,14,15,16,15,16,17,17,17,17,16,16,16,15,13,11,7,14,28,33,32,10,11,13,14,15,14,14,16,18,15,15,19,20,22,23,19,16,14,14,15,15,16,15,14,15,16,15,15,17,16,13,15,7,15,24,32,32,10,13,15,15,16,15,15,15,17,15,13,17,19,22,22,20,17,15,13,13,14,14,14,13,15,15,15,15,17,16,12,18,8,17,20,29,29,9,15,17,17,17,17,16,15,17,16,12,15,18,20,21,19,16,14,12,12,12,12,13,14,14,13,14,15,15,14,13,16,10,20,17,24,24,9,16,19,18,18,18,16,15,16,16,12,13,17,19,19,18,15,14,12,11,11,11,13,14,13,12,14,14,13,12,11,14,14,22,15,20,20,9,16,19,19,19,18,16,15,15,15,12,13,17,18,17,15,14,12,11,11,13,13,13,13,13,13,15,13,9,9,6,11,18,25,16,17,17,9,15,19,19,20,19,18,15,14,14,12,12,16,17,15,13,12,11,10,12,15,16,13,13,13,14,15,12,8,8,4,10,21,24,16,16,15,9,13,18,21,20,19,19,15,13,13,11,11,13,15,13,10,10,10,11,13,17,17,13,13,14,15,16,13,11,10,7,12,18,19,15,16,16,9,12,17,22,21,20,21,16,12,13,11,10,12,14,11,9,8,9,11,15,19,18,13,13,15,16,17,14,13,12,10,13,15,15,14,16,16,9,12,17,23,20,22,21,16,12,12,10,10,13,13,10,8,7,8,11,15,19,18,14,13,16,19,18,14,11,12,12,13,12,13,14,18,18,9,12,17,22,20,23,21,17,13,12,10,10,13,13,10,8,6,7,9,14,18,18,15,14,17,20,18,13,10,12,14,13,9,11,14,19,19,9,11,15,21,20,21,20,18,15,14,12,11,13,13,12,10,6,5,7,11,16,17,16,16,17,17,14,12,11,12,13,12,8,11,14,19,20,10,11,13,21,20,19,19,19,17,15,13,11,12,12,13,12,7,5,6,9,13,15,16,17,18,16,11,10,10,11,13,11,8,10,14,19,20,11,11,14,20,19,18,17,17,16,15,13,11,12,11,12,12,7,5,5,8,11,13,14,16,18,16,12,10,9,9,11,11,9,10,13,18,19,12,12,15,19,18,16,15,15,15,15,13,11,11,10,11,12,8,5,5,8,10,12,14,15,17,17,14,11,8,7,10,11,11,11,12,17,18,14,11,14,17,16,14,13,13,13,14,12,11,11,10,11,13,10,7,7,8,8,11,13,15,16,15,14,12,8,6,8,10,10,11,11,14,15,16,10,11,14,14,11,11,10,11,13,12,10,10,11,12,13,12,10,10,9,8,10,13,14,14,14,14,12,9,5,7,8,8,11,10,10,12,16,12,10,11,11,8,9,7,6,9,10,9,10,12,15,16,15,13,13,11,8,9,12,15,14,13,15,13,8,5,7,7,7,10,9,10,11,15,13,9,9,8,6,8,5,3,6,8,8,9,14,18,20,19,18,18,14,8,7,11,15,15,13,14,13,7,5,9,7,7,10,9,9,11,15,14,9,9,8,6,8,5,3,7,7,6,9,16,21,23,24,24,23,17,10,7,10,14,14,12,12,11,7,5,8,7,7,9,10,9,10,16,14,9,9,9,7,8,5,5,8,6,5,8,18,25,27,29,30,29,22,11,8,9,12,13,10,8,9,8,6,8,8,7,8,10,9,10,22,17,11,9,9,8,9,6,7,9,6,5,8,17,25,30,34,35,35,25,12,7,8,10,11,9,7,8,7,6,7,7,6,7,10,9,9,28,20,13,10,9,9,10,7,9,10,6,6,7,16,25,33,38,40,38,27,13,6,7,9,9,7,7,7,6,6,7,7,6,6,9,8,8,27,22,15,12,9,10,11,9,10,9,6,5,6,14,25,35,41,42,40,27,12,5,6,7,7,6,7,7,6,6,6,7,6,6,8,7,7,24,21,16,14,10,10,11,10,9,8,6,5,5,11,24,37,42,44,40,27,11,5,6,6,6,6,7,7,6,6,6,7,6,6,6,6,6],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
