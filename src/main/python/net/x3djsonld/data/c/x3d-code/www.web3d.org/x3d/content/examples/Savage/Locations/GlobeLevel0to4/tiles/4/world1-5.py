###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-5.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,-67.54166331393873,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,400,504,572,527,449,-2,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,228,299,307,299,262,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,0,0,1,0,38,29,6,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,-231,-249,-260,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,-7,-263,-300,-301,-299,-305,1,0,1,0,1,0,1,1,0,0,1,0,0,0,-304,-360,-345,-327,-300,-300,-305,-316,1136,421,3,0,0,1,1,1,1,1,1,2,-513,-500,-500,-481,-462,-430,-367,-299,-316,-325,1334,1265,830,9,200,0,1,1,0,-418,-476,-399,-449,-449,-470,-489,-498,-481,-434,-376,-337,-310,1758,1819,1459,928,1,257,5,-264,-595,-548,-508,-470,-450,-449,-439,-440,-463,-511,-550,-517,-467,-440,1975,2029,1766,687,773,5,305,-609,-599,-572,-536,-492,-449,-422,-405,-388,-377,-395,-453,-479,-500,-500,1618,1747,1816,1724,1167,624,2,-487,-600,-585,-556,-520,-466,-416,-389,-370,-354,-352,-403,-439,-483,-515,1044,1491,1555,1772,1238,1114,-21,-50,-525,-518,-517,-501,-500,-475,-427,-402,-400,-386,-352,-363,-407,-465,88,621,1165,1488,1516,1248,1013,1,-421,-499,-499,-500,-511,-525,-498,-448,-388,-350,-350,-350,-496,-749,0,585,1253,1696,2050,1467,7,0,-117,-448,-525,-545,-560,-573,-586,-570,-471,-390,-345,-769,-1395,-1654,-28,0,1116,1488,1287,42,-63,-120,-299,-456,-606,-588,-683,-826,-1141,-1601,-1535,-1614,-1935,-2054,-2139,-2279,-90,990,1348,1662,1900,993,498,-52,-274,-457,-582,-659,-998,-1501,-1914,-2159,-2467,-2370,-2506,-2693,-2920,-3026,-133,768,1484,1933,2019,956,294,-69,-227,-475,-600,-849,-1401,-2127,-2488,-2608,-2692,-2936,-3101,-3225,-3345,-3386,60,1132,1678,1996,1369,360,-61,-46,-296,-535,-578,-977,-1649,-2562,-2884,-3024,-2974,-3223,-3342,-3498,-3588,-3597,582,1237,1789,2222,1629,181,31,-136,-337,-470,-488,-944,-1748,-2876,-3126,-3235,-3302,-3380,-3604,-3717,-3786,-3804,317,480,1236,1589,762,-1,-38,-290,-386,-396,-452,-1007,-1826,-2608,-2983,-3179,-3346,-3503,-3668,-3820,-3978,-3968,-42,262,1183,1206,383,-88,-20,-73,-249,-346,-380,-1028,-1865,-2588,-2870,-3024,-3190,-3336,-3444,-3577,-3815,-3944,-282,740,1522,-102,85,-16,-76,-122,-354,-424,-429,-867,-1854,-2577,-2849,-3098,-3274,-3407,-3452,-3503,-3643,-3779,-221,293,737,-66,-120,-91,-157,-281,-489,-500,-398,-749,-1904,-2655,-3032,-3222,-3302,-3560,-3627,-3598,-3701,-3804,-453,630,606,-73,-130,-109,-157,-301,-493,-513,-399,-759,-1907,-2680,-3068,-3259,-3342,-3490,-3663,-3634,-3724,-3812],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
