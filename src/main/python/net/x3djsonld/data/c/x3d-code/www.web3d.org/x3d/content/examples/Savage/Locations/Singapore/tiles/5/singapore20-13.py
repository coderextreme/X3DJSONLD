###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore20-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3868975107598795,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[58,63,62,61,54,49,50,52,55,58,55,51,46,41,38,37,37,39,41,44,47,51,52,49,46,41,40,41,44,47,49,51,53,58,62,64,66,57,61,60,58,52,46,48,51,54,57,54,51,46,41,38,36,36,38,41,44,47,51,52,49,45,41,40,44,48,51,53,54,56,61,65,67,68,56,60,58,55,50,44,47,50,52,54,52,49,44,39,37,35,35,36,40,44,48,51,52,49,45,41,41,47,52,54,56,57,59,62,65,67,68,54,57,56,53,47,42,45,48,50,52,50,47,43,38,35,34,34,35,39,44,49,52,52,49,45,40,40,47,52,55,57,58,59,62,65,64,64,51,54,53,51,45,40,42,45,48,51,49,45,41,37,34,32,32,33,38,45,50,54,54,49,44,39,39,46,51,54,57,57,58,60,61,59,58,50,52,51,50,45,40,41,42,46,50,49,46,42,39,35,32,32,33,38,45,50,54,53,48,43,39,38,44,48,51,54,55,56,57,57,55,54,49,51,51,50,46,42,41,40,45,50,50,48,45,43,38,33,32,34,38,45,50,52,51,46,43,39,38,42,45,48,51,52,53,54,54,52,51,48,50,50,50,46,43,41,40,45,51,50,50,47,44,39,33,33,34,39,45,50,51,50,46,43,40,39,41,44,47,50,52,53,53,53,52,50,46,48,48,49,46,43,41,39,44,50,50,50,47,42,37,32,33,36,40,45,49,51,49,45,42,41,41,42,45,49,52,54,55,56,56,53,50,44,46,46,47,45,42,40,38,42,47,48,49,46,41,37,32,33,37,40,43,46,49,48,44,41,41,41,42,45,49,52,54,55,56,57,54,52,42,43,43,44,42,40,38,35,38,41,43,44,43,40,37,34,35,37,38,40,42,45,45,41,39,38,39,41,44,48,51,53,55,56,57,57,55,42,42,41,41,39,38,36,35,36,38,39,41,40,38,37,37,37,37,37,37,39,41,41,39,38,38,38,40,43,46,50,52,54,56,57,57,57,44,44,42,40,39,38,37,35,36,38,38,39,39,38,38,37,37,37,36,36,36,35,35,37,37,38,38,38,40,43,47,50,52,53,55,56,56,44,44,43,41,41,40,39,38,38,39,39,40,40,40,40,39,37,36,35,35,34,31,31,34,36,37,37,37,39,42,45,48,51,51,52,54,56,43,43,44,43,45,46,45,43,43,44,45,47,47,46,45,43,39,36,34,34,33,31,30,32,33,34,35,37,40,43,46,48,50,50,51,52,53,43,43,45,46,48,50,48,46,47,47,50,53,52,52,50,47,42,37,35,34,33,30,29,30,30,31,33,37,41,44,47,49,50,50,50,50,51,42,43,44,45,47,48,47,47,48,50,52,55,55,55,54,50,46,41,38,37,34,28,26,28,29,29,32,36,41,45,48,50,51,51,51,50,50,41,42,42,43,45,45,46,47,49,51,52,54,55,56,55,53,48,45,42,39,34,27,25,27,28,29,30,35,40,45,48,50,51,50,50,49,49,40,37,37,37,38,40,42,44,45,47,48,49,50,52,51,50,49,48,45,41,36,29,27,27,28,30,31,33,36,43,47,48,49,47,46,46,46,39,34,34,33,34,35,38,40,42,43,44,45,46,48,48,47,47,49,47,42,36,31,29,28,29,30,31,31,34,40,45,46,45,44,42,42,43,39,35,34,34,33,33,35,36,38,40,40,40,42,45,44,42,42,44,42,38,34,32,31,31,31,31,31,33,36,39,40,40,39,40,40,41,42,40,36,35,35,34,33,33,33,35,38,37,36,38,41,40,38,38,40,38,36,34,33,33,33,33,32,32,35,36,37,37,36,36,36,37,39,42,40,38,38,37,37,37,37,36,37,37,36,35,36,38,37,35,36,37,37,36,35,35,36,36,36,36,36,37,37,37,36,36,36,36,37,38,39],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
