###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore15-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3432389488699097,103.64728813651608,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[5,6,8,11,12,12,12,11,10,8,7,5,5,5,6,7,10,12,13,13,12,11,12,16,24,34,43,49,53,55,54,48,43,38,34,32,5,6,8,9,11,12,11,10,9,8,6,5,4,3,5,7,11,16,18,20,18,15,14,16,23,33,41,47,50,52,50,43,36,31,27,25,6,7,8,9,10,11,10,9,8,7,6,5,4,4,5,7,12,19,24,28,26,20,16,16,20,29,36,41,43,45,43,36,30,25,22,21,7,8,9,9,10,10,9,7,7,7,6,6,5,5,7,9,14,22,28,35,34,26,19,15,17,23,29,32,34,35,34,29,23,19,17,17,10,10,10,10,10,10,9,7,6,5,5,5,7,8,10,13,17,23,30,38,37,29,22,15,14,17,21,23,24,25,24,21,18,16,14,15,15,14,13,12,10,10,9,8,6,3,3,5,8,12,15,19,21,23,29,38,38,30,23,16,13,13,13,14,15,16,16,15,14,13,13,16,18,16,14,12,11,10,10,9,7,4,4,5,9,15,20,26,28,27,32,39,39,32,25,17,13,11,10,10,10,10,11,11,11,12,14,18,20,17,15,13,12,11,10,9,8,7,7,8,12,17,25,34,36,35,36,41,40,34,27,20,15,13,12,10,9,9,9,9,10,12,16,21,21,19,16,13,11,10,9,9,10,13,14,15,17,20,27,36,39,39,39,40,38,33,27,20,16,15,14,11,10,9,10,10,12,14,18,23,20,21,17,11,9,8,8,10,15,21,24,25,25,23,27,34,38,40,39,36,33,29,25,19,17,17,16,13,11,12,14,15,16,17,19,22,17,18,15,10,8,7,8,11,18,27,33,35,34,31,31,34,36,37,36,32,29,25,22,19,18,18,17,14,13,15,17,19,19,19,20,21,11,11,10,8,7,8,9,12,21,32,40,45,45,42,38,34,32,31,30,27,25,22,20,19,19,19,18,15,15,17,20,21,22,21,19,19,8,8,7,8,10,12,13,13,21,31,40,48,49,47,42,34,30,27,26,24,23,21,20,20,20,19,18,17,17,19,22,24,24,22,20,19,7,7,9,11,16,19,17,14,17,24,33,42,45,44,40,33,29,26,24,24,23,22,21,20,20,19,18,18,19,21,24,25,26,24,22,21,7,8,11,16,22,26,23,18,17,20,27,37,40,40,37,31,27,24,23,23,22,22,21,20,19,19,19,19,19,21,23,25,26,25,24,24,8,10,16,23,30,34,31,25,20,19,25,34,36,35,32,27,24,23,22,22,21,21,21,20,19,18,18,18,18,19,21,23,24,25,26,27,9,12,20,29,36,39,35,28,23,20,24,31,32,30,27,24,22,21,21,21,22,23,22,21,21,21,21,20,20,20,21,23,24,26,27,29,11,13,23,33,39,41,36,28,24,22,25,28,28,25,23,21,20,20,21,23,24,26,25,24,25,28,28,26,25,25,25,25,26,26,28,32,14,15,24,33,39,41,36,28,25,24,24,26,24,21,20,20,21,21,23,25,27,30,30,29,31,35,37,33,30,29,29,30,31,29,30,35,20,18,22,30,36,41,37,29,25,23,22,23,21,18,19,22,24,26,27,28,31,36,37,36,39,45,46,40,35,34,35,38,38,35,33,38,26,22,23,28,35,41,38,32,27,24,23,22,20,17,19,23,27,31,32,32,35,41,43,43,46,53,53,45,39,37,39,43,44,40,37,40,31,27,27,30,37,43,41,35,31,28,25,24,21,17,19,24,29,34,36,36,39,45,48,50,53,57,56,48,41,37,39,45,48,44,41,41,34,32,31,31,36,41,40,37,35,33,30,27,23,18,19,24,29,36,39,40,44,49,52,54,55,57,54,47,41,37,38,45,50,48,45,44],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
