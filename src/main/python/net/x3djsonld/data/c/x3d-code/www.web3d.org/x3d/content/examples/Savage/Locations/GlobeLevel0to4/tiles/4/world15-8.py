###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world15-8.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(78.7083383624419,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-1972,-2590,-3176,-3230,-3216,-2838,-2447,-2956,-2317,-2227,-2101,-2110,-1748,-1239,-493,-292,-196,-292,-247,-216,-199,-143,-3196,-3187,-3246,-3160,-3172,-2871,-2500,-2313,-2241,-2203,-2220,-1639,-1234,-236,-89,-26,280,-69,-81,-162,-31,-74,-3171,-3209,-3190,-3196,-2791,-2459,-2496,-2793,-2456,-2139,-1642,-787,-194,-97,110,692,450,-83,-116,-138,-75,-24,-3074,-3142,-2979,-3062,-3025,-2750,-2430,-2239,-2579,-1529,-612,-208,-109,-43,2,48,589,518,-100,-74,-25,250,-2990,-2971,-1706,-2625,-1930,-2418,-1571,-2791,-2449,-990,-286,-246,-240,172,-185,-13,686,25,31,-48,330,0,-2486,-2504,-2455,-2523,-2316,-2342,-2210,-1456,-967,-245,-75,-7,470,720,324,40,200,982,484,347,414,-40,-2703,-2784,-3051,-4637,-3463,-1959,-1538,-1309,-711,-119,-120,150,650,825,750,327,1210,931,-18,-11,-48,-59,-2749,-2772,-2427,-4034,-3325,-2404,-1289,-922,-668,-415,-237,312,11,71,300,-12,600,242,63,82,-41,14,-2579,-2920,-2360,-2000,-1382,-1043,-669,-555,-586,-552,-562,-168,-181,-68,-54,-153,-264,-55,-12,227,-6,254,-2770,-3011,-1816,-1240,-912,-665,-712,-795,-933,-1132,-1243,-1323,-1512,-1103,-506,-1305,-529,-160,-134,-158,-31,-139,-2827,-2236,-1569,-1044,-737,-720,-703,-867,-851,-1103,-1836,-1644,-2108,-2202,-2213,-2197,-1561,-620,-446,-475,-933,-202,-1740,-1748,-2377,-2028,-823,-759,-758,-770,-765,-837,-1020,-1393,-1667,-1997,-2245,-1955,-2786,-3033,-3129,-3164,-3280,-3417,-3203,-3326,-3217,-2648,-2391,-2620,-2267,-1040,-782,-791,-669,-923,-1092,-1584,-2026,-2210,-1987,-2240,-3357,-3786,-3706,-3737,-3578,-3540,-3416,-3627,-3827,-3787,-3780,-3641,-3142,-2923,-2590,-2085,-2186,-2008,-1578,-1395,-1635,-2669,-3915,-4056,-4067,-4058,-3158,-3554,-3580,-3446,-2417,-3979,-3999,-3968,-4018,-4006,-3894,-3831,-3800,-3631,-3334,-3926,-3953,-3959,-4007,-4053,-4056,-4036,-2688,-2733,-2807,-3319,-3640,-3526,-3069,-3710,-3180,-3528,-3934,-3709,-3883,-3938,-3918,-3909,-3926,-3963,-3991,-3975,-3975,-3979,-2552,-2974,-3243,-2851,-3312,-3724,-3386,-3472,-3407,-3312,-3381,-3475,-3788,-3593,-3852,-3863,-3906,-3927,-3960,-3927,-3946,-3930,-3584,-3504,-3535,-3711,-4399,-4419,-3238,-3297,-3530,-3465,-3931,-3423,-3689,-3575,-3554,-3634,-3801,-3693,-3830,-3881,-3865,-3974,-4288,-3930,-3933,-3806,-3555,-3355,-3362,-3317,-2949,-3800,-4076,-4394,-4864,-4159,-3574,-2602,-3294,-3888,-3492,-3446,-3844,-3839,-4207,-4209,-4180,-3784,-3345,-3912,-3461,-3927,-3925,-3946,-3807,-4470,-3692,-3374,-3040,-3159,-3225,-2867,-3857,-3765,-4006,-3239,-4202,-4203,-4204,-4204,-4199,-4197,-4091,-3887,-3884,-3760,-3684,-3823,-3854,-3442,-3474,-3496,-3480,-3606,-3483,-3475,-3390,-3269,-4202,-4200,-4201,-4209,-4204,-4043,-4143,-4209,-4279,-4306,-4378,-4369,-4365,-4383,-4399,-4403,-4416,-4426,-4376,-4170,-4057,-3971,-4243,-4228,-4215,-4204,-4200,-4186,-4197,-4213,-4212,-4206,-4225,-4255,-4269,-4274,-4275,-4272,-4266,-4252,-4238,-4215,-4176,-4152,-4254,-4238,-4223,-4212,-4205,-4199,-4201,-4206,-4210,-4216,-4236,-4269,-4296,-4307,-4304,-4294,-4283,-4269,-4250,-4206,-4046,-3865],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
