###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore28-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4567512097838313,103.64728813651608,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[30,30,30,31,29,28,29,31,30,28,24,18,15,14,17,22,26,29,30,31,29,27,25,23,21,20,19,17,16,15,14,13,13,14,16,19,33,35,36,36,34,33,35,38,37,34,27,20,17,15,17,20,22,23,24,25,25,23,22,22,21,20,19,18,16,14,14,13,13,14,16,19,37,40,41,41,38,37,41,46,44,39,31,22,18,17,18,19,19,18,18,19,20,21,21,21,21,20,19,18,16,14,13,13,14,15,17,19,44,48,49,48,46,44,47,51,48,42,34,25,22,22,22,22,22,21,21,22,23,24,24,24,23,23,22,20,18,15,13,14,14,15,16,18,52,55,57,57,54,52,53,55,52,44,36,27,26,27,28,27,26,25,24,25,27,28,28,28,27,26,25,23,19,15,13,14,15,15,15,17,52,55,57,58,55,52,52,51,46,39,32,26,24,26,27,27,27,28,29,30,30,30,29,28,27,27,26,23,19,15,13,13,14,14,15,16,51,54,55,56,54,51,48,44,39,34,29,23,22,22,24,26,28,31,33,35,34,32,29,28,28,28,27,23,19,15,12,12,12,13,14,15,48,48,49,48,47,46,43,40,37,34,30,26,23,20,22,26,30,35,38,39,37,32,29,27,25,25,23,20,17,15,13,12,12,12,13,14,44,42,40,39,39,39,38,37,36,35,32,28,24,19,21,26,32,39,42,43,40,34,29,25,22,21,19,17,16,15,14,12,12,12,13,13,45,39,38,38,39,40,41,41,40,38,35,30,24,18,19,24,30,38,41,42,39,33,28,25,22,19,17,16,15,15,15,13,12,12,13,13,46,40,38,39,41,44,46,47,46,43,37,31,24,17,17,21,26,34,38,39,37,32,27,24,21,19,17,16,15,15,14,13,12,13,13,14,43,39,39,43,47,51,51,49,45,41,35,30,23,17,16,18,23,29,33,36,34,30,27,24,22,19,18,17,16,15,15,14,13,14,14,14,38,37,42,49,55,58,55,49,43,36,31,27,21,16,15,15,19,25,29,31,31,28,26,25,23,21,19,17,16,16,15,15,15,15,15,14,35,35,41,50,56,59,55,47,41,35,31,28,24,18,16,15,17,21,25,28,28,26,25,25,24,23,22,20,19,18,17,16,16,16,16,16,34,34,39,46,52,55,51,44,39,35,33,32,27,21,17,15,16,18,21,24,25,25,25,25,26,26,25,25,22,20,18,17,16,17,17,17,34,33,36,41,45,47,44,39,36,33,32,32,28,22,18,15,14,16,18,21,22,23,24,26,26,27,27,27,25,22,19,18,17,17,17,16,34,31,32,34,35,35,34,32,30,29,29,29,26,21,18,15,14,14,16,18,19,21,23,25,27,28,28,27,25,23,20,18,17,16,16,15,32,29,29,29,28,28,28,28,28,28,28,28,24,20,17,14,13,13,14,15,17,19,21,24,25,26,27,25,24,22,19,17,16,16,15,15,29,26,26,25,24,23,24,27,28,30,29,28,24,18,15,12,12,12,12,14,15,17,20,22,23,24,24,23,21,20,17,16,16,16,15,14,25,23,22,21,20,20,22,25,28,31,31,29,25,19,15,12,11,11,12,13,14,15,17,19,20,21,21,20,19,18,17,15,15,15,15,14,21,18,17,17,17,17,20,24,29,33,33,31,26,20,16,12,11,11,12,12,12,13,15,17,18,19,19,18,18,18,17,15,14,14,14,13,21,18,16,15,15,15,18,22,27,33,34,33,27,21,16,12,11,11,11,11,11,12,13,15,16,17,17,17,17,17,17,15,14,13,13,13,24,21,18,15,13,13,15,18,24,31,33,33,27,20,15,11,10,10,11,11,11,12,13,15,16,16,17,17,17,17,16,14,13,12,12,12],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
