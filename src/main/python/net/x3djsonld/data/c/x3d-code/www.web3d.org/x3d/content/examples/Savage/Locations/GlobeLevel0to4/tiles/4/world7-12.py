###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,89.95834137992705,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-2957,-5263,-5467,-5764,-5482,-5014,-3528,-4477,-4501,-5171,-5829,-4810,-3282,-5026,-5144,-5745,-5393,-5271,-5005,-4502,-3513,-2677,-2570,-5246,-5198,-5951,-5453,-5345,-4649,-2976,-4629,-5346,-5363,-4161,-3706,-5202,-4817,-5088,-5666,-5228,-5386,-4370,-4062,-3261,-2395,-5739,-4494,-5571,-5304,-5257,-5161,-4197,-4883,-4932,-3605,-4898,-5089,-4882,-3419,-4124,-3734,-5558,-5203,-4684,-4671,-4295,-2528,-5600,-5664,-5070,-5377,-4856,-5442,-4542,-4757,-5538,-3381,-5147,-5139,-5342,-4963,-4500,-5975,-6015,-5202,-5396,-4953,-5032,-4050,-5622,-4646,-5183,-5314,-5189,-4837,-4928,-5035,-5454,-4844,-5410,-5440,-5259,-5165,-4808,-5978,-6186,-5739,-6385,-6087,-5531,-3738,-5438,-4904,-5046,-5402,-5363,-4682,-5499,-5365,-5485,-5408,-5282,-5492,-5559,-4983,-4537,-5536,-6796,-4669,-3718,-3160,-3694,-3237,-5446,-4811,-5250,-5246,-5312,-4576,-5370,-5446,-5529,-5461,-5367,-5542,-5437,-5631,-5353,-6541,-4333,-2685,-1672,-1564,-3372,-3063,-5449,-4959,-4830,-5349,-5091,-4791,-5472,-4863,-5283,-5690,-5412,-5350,-5395,-5753,-6223,-4115,-2165,-3470,-3287,-1546,-1333,-2711,-5199,-4908,-5352,-5287,-4881,-5241,-5363,-4978,-5233,-5646,-5536,-5483,-5407,-5878,-5633,-2467,-3567,-3282,-843,-210,-258,-2554,-5006,-5214,-5242,-5094,-5028,-5208,-5250,-5121,-5284,-5438,-5453,-5395,-5973,-6446,-3259,-3003,-1918,-94,-253,175,156,-3005,-5142,-5177,-5092,-4950,-5147,-5217,-5265,-5838,-5217,-5136,-5348,-5528,-5558,-4003,-2321,-171,369,56,176,239,49,-2999,-4340,-5134,-5139,-4742,-5181,-4650,-5335,-5446,-5284,-4938,-5356,-6044,-2481,-1965,-740,326,647,537,9,7,111,-2869,-4197,-5062,-5178,-4922,-5129,-4675,-5262,-5268,-5258,-4854,-5435,-4967,-1654,-2181,-290,93,59,-6,-63,-3,-31,-2952,-3700,-5031,-5180,-5064,-5071,-5082,-4964,-5320,-5555,-4816,-5745,-3072,-1501,-1254,-143,-10,-19,-40,-48,-40,-53,-3310,-4427,-4952,-5029,-5054,-5020,-4602,-4964,-4719,-5249,-5313,-5823,-365,-1976,31,111,-31,-39,-24,-63,-56,-69,-3223,-4641,-4976,-4995,-5046,-4972,-4998,-5252,-4972,-4881,-5638,-3015,-1729,-577,1429,37,-20,-19,-26,-48,-53,-47,-3122,-4311,-4925,-4950,-4756,-4929,-4899,-5122,-4630,-4674,-5490,-1728,-1201,139,125,29,-19,-26,-40,-41,-44,-58,-2661,-3356,-5000,-4885,-4223,-4858,-4988,-5478,-4389,-4965,-5241,-2,-378,818,85,10,-17,-24,-30,-41,-28,-40,-3020,-3753,-4857,-4820,-4649,-4845,-4917,-4960,-4295,-5105,-3503,-882,47,105,36,11,-12,-37,-12,-38,-25,-27,-3561,-3199,-4795,-4735,-4797,-4765,-4811,-4720,-4045,-5669,-1440,-883,1021,42,19,5,2,7,-2,-28,2,0,-3740,-3784,-4737,-4686,-4743,-4820,-4578,-4766,-5120,-3814,-6,-146,581,71,27,4,-2,-29,-3,-36,28,25,-3021,-4726,-4739,-4702,-4689,-4714,-4768,-4653,-5228,-1476,-1574,28,196,68,26,23,-11,-27,-35,-28,83,28,-2922,-4035,-4668,-4648,-4643,-4667,-4604,-4620,-5589,66,-1745,1805,59,143,22,-10,-27,-33,-25,-12,112,116,-2865,-3751,-4635,-4675,-4639,-4641,-4407,-4544,-5350,99,-1673,1275,92,44,28,-5,-31,-34,-22,-17,70,168],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
