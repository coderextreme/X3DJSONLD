###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore19-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3781657983818856,103.71910330716118,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[10,12,13,14,15,17,17,17,17,17,17,17,18,20,21,22,23,24,25,24,24,24,26,28,29,28,27,23,19,15,13,12,12,11,11,10,10,9,10,11,12,13,14,15,16,16,17,17,17,18,21,23,24,25,26,26,26,27,28,30,32,32,31,29,25,21,16,13,12,11,10,10,10,10,9,10,10,10,11,11,12,13,15,16,16,17,18,21,24,26,28,29,29,29,30,32,33,33,32,30,27,23,19,17,13,12,10,9,8,9,10,9,9,9,9,9,9,10,12,14,16,16,17,19,23,26,29,31,33,33,33,33,35,35,33,31,28,25,22,18,16,14,11,9,8,7,9,11,9,9,9,9,8,8,10,12,14,15,17,19,22,25,29,34,37,39,39,37,36,36,34,32,29,26,22,19,16,14,12,10,8,7,7,8,10,10,9,9,9,8,8,10,12,14,15,18,21,24,28,32,38,41,43,43,39,36,35,32,29,26,23,19,17,15,13,11,9,7,7,7,8,9,11,9,8,8,8,8,10,12,14,16,19,23,27,31,36,40,42,42,40,37,33,30,27,24,22,20,17,15,13,12,10,8,6,6,7,7,7,12,10,8,8,8,9,10,13,15,17,20,25,29,33,37,40,41,40,38,34,30,25,21,20,18,16,15,13,12,11,9,7,6,6,7,6,7,12,9,8,8,8,9,10,12,14,16,19,23,27,30,34,36,37,37,35,32,28,23,19,17,15,14,13,12,11,10,9,7,7,7,7,7,8,11,9,8,8,8,9,10,11,13,15,18,22,25,27,30,32,33,33,32,29,25,21,16,15,13,12,11,11,10,9,8,8,7,7,7,8,9,10,8,8,8,9,9,10,11,13,15,17,20,22,24,26,28,29,29,28,26,23,19,15,14,13,12,11,10,10,9,9,8,8,8,9,10,11,9,8,8,8,9,9,10,11,13,15,17,19,20,22,23,25,25,25,24,23,21,17,14,14,13,12,11,11,10,10,10,9,9,9,10,11,12,9,7,7,8,9,10,11,13,15,17,19,21,21,21,21,21,21,20,20,19,18,15,14,13,13,12,12,12,12,12,12,11,10,10,10,12,13,10,8,7,8,9,11,12,14,17,20,22,23,22,20,19,18,17,17,16,16,15,14,14,13,13,13,13,14,15,15,14,12,11,11,11,12,12,12,9,8,8,9,11,12,14,17,21,23,24,23,21,19,17,16,15,14,14,13,13,13,14,14,14,14,16,17,17,16,14,12,11,10,10,10,14,12,9,8,8,10,11,13,17,21,23,24,24,21,20,18,17,16,14,13,12,13,13,14,15,15,15,17,18,18,17,15,13,11,10,9,8,18,14,11,9,8,9,10,12,15,18,21,22,23,22,21,20,19,18,16,14,13,13,14,15,16,16,17,18,19,18,17,15,13,11,10,10,9,21,17,14,10,8,7,9,11,13,16,18,20,22,23,23,22,22,20,19,17,15,16,16,17,17,17,18,19,19,18,16,14,12,10,9,10,11,23,19,14,11,8,6,6,8,11,13,16,19,21,23,24,24,24,23,22,20,18,18,19,19,19,19,19,18,18,17,16,13,10,9,8,7,7,23,19,15,11,7,4,4,6,8,11,14,17,20,23,25,26,27,26,25,23,22,21,21,22,22,21,20,19,18,17,16,12,9,8,7,4,2,23,19,15,10,6,3,3,6,9,12,15,18,20,23,27,29,30,29,28,26,25,24,23,24,24,23,22,20,19,18,16,13,10,9,7,4,2,20,18,14,10,6,4,4,6,10,14,16,18,21,24,28,31,33,32,31,29,28,27,26,25,25,25,23,21,19,18,17,14,11,9,8,6,4],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
