###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore17-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3607023736258976,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[77,71,62,54,52,51,51,52,53,55,58,60,61,64,64,62,59,56,56,57,60,64,64,60,58,57,59,64,65,61,56,53,51,51,51,51,52,74,71,63,55,53,50,50,50,52,54,57,60,64,67,67,64,60,57,55,56,58,62,63,59,57,56,58,64,66,62,58,55,53,53,53,52,51,71,71,65,58,54,50,49,48,50,52,57,62,66,69,67,63,59,55,54,55,58,63,63,60,57,57,58,63,65,63,59,57,56,57,57,54,52,66,67,63,59,54,50,49,48,49,51,57,63,65,67,65,61,57,53,53,54,58,64,64,60,57,57,58,62,64,63,61,59,58,58,59,56,53,59,60,59,58,54,50,50,50,51,51,56,62,62,60,58,56,54,51,51,52,57,64,65,59,56,56,57,60,62,62,61,60,58,58,59,57,54,53,54,55,57,53,49,50,51,52,52,56,60,59,56,55,54,52,50,50,52,56,63,64,59,56,54,55,58,60,61,61,59,57,57,57,57,56,49,51,52,55,52,48,49,49,52,53,56,58,58,57,57,56,54,52,52,54,56,59,60,60,58,54,52,55,58,59,59,57,56,54,53,55,57,46,46,48,51,48,46,46,47,50,54,56,58,58,59,59,59,57,55,54,55,55,55,56,59,58,54,51,53,55,56,57,56,54,52,51,55,58,41,40,42,44,44,43,43,43,46,51,56,61,62,63,63,63,61,58,55,54,53,52,53,55,55,54,52,53,53,54,54,53,53,51,51,55,59,38,37,38,39,41,42,42,41,45,49,55,62,65,67,67,66,63,60,56,54,53,52,52,54,54,54,54,52,51,51,51,51,51,51,51,54,57,37,36,37,38,41,44,45,44,46,48,54,61,66,69,69,66,63,60,57,57,56,56,56,57,56,55,54,50,49,49,49,50,50,50,50,50,50,37,36,37,39,43,47,48,48,48,48,54,60,66,71,70,67,64,61,59,60,60,61,61,59,58,57,55,52,50,49,49,51,51,50,50,48,47,37,36,38,42,47,52,52,52,51,50,54,59,65,72,72,70,67,64,63,64,64,64,64,62,61,61,60,58,56,55,54,54,52,51,50,49,48,37,36,40,44,50,56,55,54,52,52,55,59,65,71,72,71,69,67,66,66,66,66,65,63,62,63,63,62,61,60,58,56,54,52,50,50,50,36,35,40,44,51,58,56,53,52,52,56,60,66,70,71,69,67,66,65,65,65,64,63,62,61,62,63,64,64,62,60,57,54,52,50,50,49,35,35,40,44,51,57,55,53,52,52,56,61,65,68,68,66,65,64,63,63,63,63,62,60,60,61,63,65,66,64,61,58,54,53,51,49,48,35,37,40,43,48,53,52,52,53,53,57,61,63,65,65,63,63,62,62,62,62,63,62,59,58,59,61,65,67,66,64,59,55,53,51,49,47,36,38,40,42,46,50,51,52,53,54,57,59,60,61,61,60,60,60,60,60,61,63,62,58,56,57,60,65,68,68,66,60,55,53,51,49,47,36,37,41,43,47,50,51,51,53,55,56,56,56,55,55,56,57,58,59,59,60,62,61,57,55,56,59,65,68,68,65,61,56,54,52,49,47,38,38,41,44,48,52,51,51,54,55,55,53,52,50,51,53,55,56,57,57,58,61,61,57,55,55,58,64,67,66,63,61,57,55,52,49,47,41,41,44,46,49,52,52,52,54,54,53,51,50,48,50,53,55,56,56,56,57,60,60,58,56,55,56,61,63,62,60,58,55,54,53,50,47,45,44,46,48,50,51,52,53,53,53,51,50,48,47,49,52,54,55,55,55,56,58,58,56,55,54,54,57,58,58,57,55,53,53,53,50,47],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
