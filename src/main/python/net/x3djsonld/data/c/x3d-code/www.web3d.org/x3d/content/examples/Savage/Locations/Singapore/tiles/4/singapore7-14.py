###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_714',geoSystem=['GDC'],position=(1.3432389488699097,104.00636398974156,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.3432389488699097,104.00636398974156,0.0),range=4101.627,child1Url=['../../tiles/5/singapore14-28.x3d'],child2Url=['../../tiles/5/singapore14-29.x3d'],child3Url=['../../tiles/5/singapore15-28.x3d'],child4Url=['../../tiles/5/singapore15-29.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore7-14.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.99200095561254,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[7,9,9,9,-3,-51,-64,-13,4,5,8,7,5,7,7,7,5,5,0,1,1,1,6,1,0,-1,6,6,4,3,4,2,0,0,1,3,4,8,9,8,7,2,-36,-57,-14,3,6,9,9,6,7,6,7,7,6,2,6,2,2,3,0,0,0,4,3,3,3,3,1,5,3,1,3,5,8,7,7,7,5,-19,-39,-10,5,8,9,9,8,8,7,7,7,5,4,8,3,2,0,0,0,0,2,3,3,3,2,1,7,5,1,2,5,7,6,6,7,6,-5,-14,-1,8,11,7,7,10,10,9,8,6,3,3,8,3,1,0,0,0,0,2,4,4,4,2,0,6,3,0,2,5,7,6,6,7,7,2,0,4,10,12,7,6,10,10,10,8,5,2,3,8,4,1,0,0,0,0,2,4,4,4,3,0,4,2,1,3,4,7,6,7,9,8,6,5,6,10,10,7,7,9,8,8,8,5,3,4,6,5,3,1,2,1,0,3,5,5,5,5,1,2,2,2,5,5,8,7,7,10,9,7,7,7,10,9,7,8,9,8,8,8,6,4,5,6,6,4,3,3,1,0,4,6,5,5,6,2,2,3,4,6,7,9,7,7,10,10,8,8,8,8,9,8,9,9,9,8,9,7,5,5,6,7,4,4,4,1,1,6,7,6,4,8,4,3,4,6,8,8,9,8,7,9,10,8,9,9,8,9,9,11,8,8,8,8,8,6,4,6,7,3,3,5,1,2,7,7,7,3,7,3,4,5,7,9,7,8,8,6,8,10,9,10,12,10,9,9,13,8,5,6,8,7,6,4,7,6,1,3,7,3,3,5,8,6,2,5,1,3,5,7,8,6,8,8,5,7,10,10,10,13,12,10,9,14,8,5,5,7,7,6,4,7,5,0,2,8,6,4,4,7,4,1,3,0,3,5,7,6,5,8,8,6,7,9,9,10,13,11,10,10,13,10,8,6,7,7,5,5,7,4,0,2,9,7,5,3,3,1,1,3,0,4,6,7,6,5,8,9,7,6,8,8,10,12,11,11,10,11,11,12,7,8,7,5,6,8,4,1,3,9,8,5,3,1,0,2,4,0,5,7,7,6,5,7,10,7,6,7,9,11,11,13,13,11,9,10,14,11,8,6,6,6,8,4,3,6,6,7,5,3,3,2,2,5,2,5,7,7,6,5,6,9,8,6,7,9,11,11,14,15,11,7,8,14,14,9,6,6,7,8,5,5,8,4,7,5,4,4,4,3,5,4,3,6,8,6,6,6,9,9,7,7,9,11,11,13,13,10,4,3,10,11,10,6,6,7,8,4,6,8,5,8,6,4,1,3,2,3,3,1,4,6,5,5,5,8,10,8,8,9,10,11,12,11,8,2,0,5,8,10,7,6,7,8,4,7,8,7,9,7,4,-2,1,2,1,1,0,2,4,5,5,5,9,11,9,8,8,10,10,11,8,7,3,0,4,8,10,7,6,7,8,4,7,8,8,9,7,4,0,1,1,0,0,0,2,4,4,4,5,9,12,10,8,9,9,10,9,6,6,4,1,6,10,10,7,7,7,8,5,7,8,8,8,7,5,3,3,0,0,0,0,3,4,4,4,6,8,11,10,8,9,8,10,9,5,5,5,3,7,10,9,6,7,7,8,6,7,7,7,5,6,5,5,5,2,2,0,1,3,4,4,4,7,8,10,10,8,9,8,10,9,5,5,6,5,9,9,7,6,7,7,7,7,6,6,6,2,4,4,6,6,3,4,2,3,4,4,4,5,7,7,9,11,9,9,8,10,9,4,5,7,7,9,9,5,6,7,6,7,7,6,5,4,0,2,4,6,6,4,4,4,4,5,4,4,4,6,7,8,11,11,9,8,10,9,4,4,7,9,10,9,4,5,6,6,7,7,7,5,2,0,0,5,6,6,5,5,5,5,5,4,3,3,7,7,7,11,12,8,7,10,9,6,6,7,9,9,9,3,6,6,6,7,6,6,5,2,1,3,7,7,7,6,5,5,6,6,4,3,3,8,7,7,11,11,7,7,9,8,9,10,8,8,8,8,3,6,5,6,7,6,5,5,3,5,9,9,8,8,6,5,5,6,6,5,4,4,9,8,7,9,10,7,6,8,8,10,10,7,5,6,5,3,7,6,6,6,6,5,4,4,8,12,9,7,8,7,5,5,6,5,5,4,4,9,8,6,6,9,8,6,7,8,10,8,5,2,3,1,4,7,7,5,5,6,6,4,5,10,12,7,6,8,7,6,6,6,5,4,4,3,9,9,6,5,8,8,6,6,8,9,9,7,2,2,0,6,7,7,5,5,5,6,4,5,10,11,5,5,8,8,6,5,6,5,4,4,3,8,9,6,4,7,8,6,6,6,7,11,11,5,3,2,7,6,5,4,6,5,6,5,6,9,9,3,5,7,8,6,4,6,6,4,4,5,8,8,6,5,8,8,6,6,5,7,10,14,8,5,3,7,5,4,4,6,6,7,6,6,8,8,4,4,6,7,5,4,6,6,4,4,5,6,7,6,5,8,10,8,7,6,8,9,13,11,8,2,7,5,4,4,5,7,7,7,7,7,7,7,5,6,5,3,5,7,5,4,4,5,5,7,6,5,8,12,10,8,7,8,8,13,12,9,3,7,5,5,4,5,8,7,7,7,7,7,8,5,6,5,3,6,7,5,4,5,6,4,6,6,4,7,12,12,11,9,10,8,10,10,9,4,7,5,4,6,6,7,6,7,7,8,9,9,5,6,5,5,6,7,6,5,6,6,3,6,6,4,7,12,14,12,10,12,9,8,8,8,6,9,5,6,8,7,7,6,7,7,8,9,9,6,6,5,6,7,7,7,7,7,7,5,7,8,5,6,11,15,12,10,13,11,8,7,8,8,12,6,9,9,6,6,7,7,7,7,8,8,7,7,5,6,7,7,8,8,8,9,6,8,8,5,5,11,15,12,10,13,11,8,7,8,8,13,7,10,10,6,5,7,8,7,7,8,8,8,7,5,6,7,7,8,8,9,9,9,9,6,4,5,10,15,11,9,10,10,9,8,8,8,12,8,9,9,6,4,7,8,7,6,7,8,8,6,5,6,6,6,7,8,9,10,10,9,6,4,6,10,14,11,7,8,9,10,9,8,8,11,9,8,9,7,4,7,8,7,6,7,8,8,6,5,5,6,6,7,8,9,10,7,7,6,6,6,9,13,12,6,7,8,9,8,9,9,10,10,9,8,7,5,7,7,7,6,6,7,7,7,6,6,8,7,8,9,9,10,6,5,7,7,7,7,11,11,6,7,7,8,8,10,8,8,10,10,8,7,6,7,7,7,6,6,6,7,6,6,6,9,7,9,9,9,10,7,6,7,8,8,6,10,10,7,7,7,7,7,11,7,8,10,11,9,7,5,7,7,8,7,7,7,6,5,5,6,9,7,8,8,9,10,8,6,7,9,8,6,8,9,8,8,7,6,8,12,7,7,9,11,10,8,6,7,8,8,8,8,8,6,5,5,6,8,7,9,9,9,9,10,8,6,7,8,6,6,8,9,8,9,7,9,12,8,6,5,9,10,11,9,8,8,7,8,7,8,7,6,6,6,8,9,10,11,7,6,10,9,5,5,8,6,6,8,10,9,11,8,10,11,9,6,3,7,11,12,9,9,8,7,8,7,8,8,8,7,5,8,10,11,11,6,3],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
