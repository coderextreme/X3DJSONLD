###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore22-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.589836,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[41,36,35,33,36,38,40,42,44,47,48,47,41,34,28,23,20,17,15,14,14,14,14,15,15,14,13,13,14,19,24,27,31,31,31,29,42,37,35,33,36,39,43,46,47,48,47,46,42,34,29,24,20,17,15,15,14,13,13,13,13,13,13,14,15,18,22,26,29,30,31,28,42,39,37,35,38,41,45,48,48,47,46,44,39,33,29,25,21,17,16,14,14,13,13,12,12,13,14,15,15,17,20,24,27,29,30,28,42,42,41,40,41,43,46,49,47,44,42,39,35,30,27,25,22,18,16,14,14,14,13,13,13,14,16,16,16,16,18,22,25,28,29,29,42,46,45,45,45,45,46,49,46,42,38,34,30,27,25,24,21,18,16,14,14,14,14,14,14,15,16,16,16,16,17,20,23,26,29,28,43,48,49,50,47,45,44,45,42,39,35,30,27,23,22,21,19,18,16,15,15,15,15,14,15,16,16,16,16,16,16,19,21,25,27,26,44,49,52,54,50,47,44,42,40,37,33,28,25,22,20,19,18,17,16,15,15,16,16,16,16,16,17,16,16,16,16,17,20,23,25,24,45,49,52,56,53,50,46,41,38,36,32,27,24,21,19,18,18,17,17,16,16,17,17,17,17,17,17,17,17,17,17,17,19,20,21,21,46,50,54,59,56,54,47,40,37,35,31,27,24,21,19,18,18,17,17,16,17,18,18,18,18,17,17,16,16,16,17,17,18,18,18,19,50,54,58,62,59,55,49,42,38,34,32,29,26,23,21,19,19,19,18,18,18,19,20,19,19,18,17,16,16,16,17,18,18,18,17,18,53,58,62,65,61,56,50,44,39,34,32,30,28,24,22,20,19,20,20,19,20,21,21,20,19,18,16,15,15,16,17,18,18,17,17,18,60,64,66,67,61,55,50,45,40,35,32,30,27,24,22,21,21,21,22,23,23,24,23,22,20,18,16,15,15,15,16,16,16,16,17,18,66,70,70,68,61,53,49,45,41,36,32,28,26,24,22,21,21,22,23,25,26,27,26,23,21,18,16,15,15,15,16,16,16,16,17,18,73,74,71,67,59,51,46,43,39,35,31,27,25,23,22,22,22,22,24,25,27,29,28,26,23,19,16,16,16,16,16,15,15,16,17,19,78,77,71,65,57,49,45,41,38,34,30,26,24,22,22,22,23,23,24,26,28,31,31,28,25,20,17,16,16,16,16,15,15,16,17,19,73,72,66,61,55,48,43,39,36,33,30,26,24,22,22,22,23,24,25,27,29,32,33,30,26,22,19,18,17,17,16,16,16,16,17,20,68,66,62,57,51,46,41,38,35,32,29,26,24,22,22,22,23,24,25,27,30,33,34,31,28,24,21,20,19,18,17,16,16,16,17,20,60,58,55,52,47,43,39,36,33,30,28,25,24,24,23,23,23,24,26,28,30,33,34,32,29,26,23,21,20,19,18,16,15,15,16,19,54,51,49,47,43,40,37,34,31,28,27,25,25,25,25,24,24,24,26,28,30,33,34,33,31,28,25,23,21,20,18,16,15,15,15,19,51,48,45,43,40,38,35,32,29,26,26,26,25,25,25,25,24,23,25,27,30,33,34,34,33,30,27,24,21,20,18,16,15,15,16,19,49,45,43,40,37,35,32,30,28,25,26,26,26,25,25,25,24,23,24,26,29,33,35,36,35,32,28,25,22,20,18,16,15,16,17,19,46,42,40,38,35,33,31,29,28,27,27,28,27,26,26,25,25,24,25,26,29,33,35,36,35,32,28,25,22,20,17,17,17,17,18,19],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
