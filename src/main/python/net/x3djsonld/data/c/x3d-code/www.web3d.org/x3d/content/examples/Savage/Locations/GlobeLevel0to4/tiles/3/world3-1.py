###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_31',geoSystem=['GDC'],position=(-11.291664319767108,-112.54166465504323,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-11.291664319767108,-112.54166465504323,0.0),range=4495500.0,child1Url=['../../tiles/4/world6-2.x3d'],child2Url=['../../tiles/4/world6-3.x3d'],child3Url=['../../tiles/4/world7-2.x3d'],child4Url=['../../tiles/4/world7-3.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world3-1.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4021,-3940,-3396,-3687,-3492,-2823,-1297,-2094,-2889,-2822,-3209,-3575,-3616,-3575,-3615,-3526,-3612,-3601,-3335,-4106,-2649,-4317,-3824,-3674,-3324,-3662,-3423,-3359,-3436,-3217,-3012,-3612,-3574,-3903,-3814,-3846,-3848,-3879,-3863,-3453,-3615,-4190,-3857,-2879,-3565,-3679,-3844,-3654,-3271,-3267,-3214,-3130,-3594,-3570,-3832,-3923,-3929,-3988,-3930,-3827,-4085,-3723,-4123,-3581,-3813,-3922,-3751,-3881,-3770,-3547,-3522,-3320,-3146,-3489,-3540,-3870,-3802,-3983,-4037,-3991,-4119,-4112,-3959,-4051,-3870,-4214,-3755,-4343,-3790,-3651,-3429,-3438,-3153,-3159,-3308,-3530,-3882,-3890,-4044,-4024,-4092,-4433,-4044,-4161,-4159,-3252,-3613,-3974,-4059,-3979,-3617,-3762,-3601,-3451,-3297,-3037,-3597,-3858,-3994,-4005,-4174,-4288,-4364,-4261,-4178,-4271,-4081,-4243,-4189,-4086,-3754,-3823,-3721,-3622,-3361,-3050,-3223,-3619,-3857,-4055,-4036,-4154,-4000,-4184,-4377,-4266,-4341,-4368,-4333,-4262,-3881,-3797,-3663,-3642,-3802,-3279,-3150,-3074,-3560,-3585,-3429,-3791,-4129,-4127,-4218,-4280,-4412,-4416,-4348,-3928,-4101,-3947,-3395,-3686,-3598,-3945,-3522,-2742,-3151,-3568,-3738,-3667,-3753,-3324,-3608,-3385,-4069,-4294,-4452,-4400,-4198,-3917,-4085,-3806,-3792,-3626,-3638,-3517,-3269,-3059,-3397,-3590,-3877,-4206,-3538,-3345,-3513,-3815,-4086,-4243,-4148,-4349,-3931,-4044,-3726,-3595,-3683,-3559,-3409,-3262,-2894,-3358,-3616,-3882,-4017,-4117,-3699,-3761,-3751,-4084,-4036,-4348,-4198,-4069,-3984,-4001,-3820,-3545,-3504,-3609,-3141,-3215,-3132,-3538,-3784,-4300,-4119,-4100,-3863,-3716,-3828,-4053,-4319,-4087,-3991,-4091,-3926,-3883,-3931,-3783,-3542,-3600,-3197,-3109,-3650,-3869,-4315,-3924,-4030,-3852,-3689,-3921,-4305,-3447,-4105,-4032,-4029,-4047,-3534,-3672,-4123,-4012,-3716,-3372,-2753,-3457,-3803,-4481,-4304,-4156,-3868,-3625,-3970,-4208,-4455,-4563,-4499,-4155,-3791,-3944,-4329,-4410,-4227,-3838,-3414,-3013,-3363,-3616,-4746,-4490,-4211,-3920,-3475,-4327,-4184,-4474,-4632,-4602,-4708,-4496,-4349,-4241,-4374,-4402,-3900,-3539,-3289,-3118,-3650,-4125,-4114,-4050,-3918,-4083,-4147,-4147,-4431,-4652,-4604,-4463,-4541,-4526,-4403,-4222,-4468,-4039,-3833,-3415,-3140,-3462,-3709,-3536,-3857,-4020,-3970,-4116,-4111,-4502,-4740,-4690,-4681,-4253,-4575,-4339,-4284,-4280,-4164,-4009,-3543,-3174,-3380,-3654,-4033,-3960,-3752,-3883,-4023,-4043,-4620,-4676,-4602,-4499,-4288,-4486,-4259,-4230,-4202,-4199,-3984,-3323,-3371,-3043,-3390,-3728,-3779,-3743,-3834,-3982,-3847,-4613,-4513,-4724,-4621,-4418,-4427,-4251,-4253,-4242,-4264,-4067,-3709,-3289,-3277,-3300,-3244,-3572,-3636,-3721,-3764,-3602,-4537,-4509,-4645,-4423,-4622,-4511,-4331,-4282,-4201,-4250,-3982,-3845,-3792,-3663,-3608,-3342,-3485,-3611,-3384,-3340,-3217,-4511,-4494,-4630,-4381,-4679,-4487,-4329,-4383,-4192,-4194,-3995,-3911,-3889,-3713,-3524,-3292,-3511,-3579,-3174,-3454,-3133],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
