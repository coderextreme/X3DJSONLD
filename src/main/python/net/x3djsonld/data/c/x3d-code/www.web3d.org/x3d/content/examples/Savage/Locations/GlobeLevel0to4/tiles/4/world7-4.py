###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-4.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,-90.04166398449098,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4006,-4060,-4188,-4124,-4285,-4415,-4485,-4969,-4682,-4700,-4816,-3507,-207,2734,3351,1583,733,2427,319,290,202,202,-4104,-4210,-4191,-4316,-4307,-4278,-4411,-4585,-4783,-4622,-5091,-2283,-112,4869,4428,573,495,465,379,305,219,218,-4174,-4316,-4183,-4343,-4373,-4356,-4669,-4447,-4474,-4589,-5768,-1436,183,4518,2830,628,322,443,406,306,284,180,-4176,-4158,-4220,-4389,-4281,-4338,-4731,-4643,-4370,-4333,-4487,-593,1634,4081,883,1135,325,387,425,299,224,191,-4210,-4266,-4252,-4519,-4324,-4578,-4510,-4439,-4544,-4587,-2712,-252,4122,3599,961,235,309,408,296,254,250,188,-4113,-4445,-4364,-4320,-4441,-4432,-4491,-4848,-4657,-5290,-1319,-87,4221,1996,258,176,342,334,278,255,213,156,-4051,-4212,-4171,-4347,-4416,-4397,-4427,-4399,-4585,-6204,-274,79,4758,3493,255,183,289,345,287,249,188,179,-4166,-4143,-4285,-4365,-4333,-4424,-4359,-4280,-4274,-4293,-105,373,3073,873,256,167,292,313,244,218,148,121,-4145,-4166,-4151,-4206,-4207,-4338,-4338,-4266,-4867,-1696,-77,2998,3145,632,188,173,239,295,191,226,192,164,-4147,-4114,-4174,-4174,-4232,-4268,-4379,-4275,-4593,-986,-81,3684,3779,955,180,233,232,233,218,205,217,173,-4067,-4215,-4102,-4100,-4266,-4283,-4298,-4280,-4854,-174,53,3395,2082,969,131,262,204,214,233,192,196,150,-4136,-4000,-4108,-4146,-4072,-4117,-4258,-4250,-5741,-4,103,3996,1977,305,129,202,217,209,162,134,161,122,-4070,-3990,-4041,-3969,-4085,-4054,-4135,-4112,-4602,-2,303,2474,1883,446,129,156,196,220,169,173,164,120,-4057,-3714,-4186,-3942,-4005,-4012,-3945,-4421,-4005,3,1568,2549,873,160,126,118,159,169,146,136,161,110,-3923,-4116,-3960,-3899,-3835,-3985,-4012,-4016,-3526,48,2449,1023,995,181,128,113,154,172,149,162,146,128,-3819,-3849,-3774,-3705,-3761,-4002,-3824,-3352,-3119,106,2707,1164,190,125,119,117,161,153,112,140,92,132,-3714,-3702,-3666,-3499,-3594,-3390,-3874,-3235,-2587,302,1188,413,190,144,118,114,145,122,107,95,147,74,-3579,-3491,-3601,-3453,-3523,-3390,-3004,-3539,-2811,163,1557,1127,183,170,141,148,129,111,87,119,124,102,-3326,-3566,-3463,-3329,-3332,-3340,-3132,-2747,-4391,-27,2227,1913,210,195,148,156,108,87,127,91,100,84,-3101,-3122,-3151,-3027,-3187,-3209,-3120,-3022,-4193,-41,1956,1230,237,254,170,143,149,145,112,98,66,103,-3272,-3323,-3135,-3181,-3175,-2942,-2792,-2798,-1994,26,32,3632,312,233,187,153,129,134,130,171,125,111,-2980,-2982,-2982,-2795,-2619,-2372,-2079,-2306,-2842,145,10,3607,429,197,232,178,167,133,131,103,116,60,-359,-992,-1576,-2107,-2494,-2102,-1430,-1535,-2178,326,25,2462,387,250,205,194,168,144,90,112,89,98,6,-1040,-1083,-2042,-2399,-2010,-1630,-1432,-2013,327,49,2395,363,233,199,158,169,158,94,89,120,98],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
