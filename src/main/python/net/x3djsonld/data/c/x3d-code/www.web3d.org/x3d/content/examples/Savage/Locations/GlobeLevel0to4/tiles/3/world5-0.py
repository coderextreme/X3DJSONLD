###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_50',geoSystem=['GDC'],position=(33.7083370213374,-157.54166599614774,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(33.7083370213374,-157.54166599614774,0.0),range=4495500.0,child1Url=['../../tiles/4/world10-0.x3d'],child2Url=['../../tiles/4/world10-1.x3d'],child3Url=['../../tiles/4/world11-0.x3d'],child4Url=['../../tiles/4/world11-1.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world5-0.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4899,-4843,-4554,-2685,-2634,-4999,-5278,-5427,-5073,-4950,-4460,-4604,-5097,-5385,-5394,-5360,-5512,-5521,-5410,-5137,-5163,-3981,-4463,-5126,-2975,-3362,-4930,-5131,-5259,-5133,-4573,-4214,1210,-5025,-5286,-5432,-5387,-5519,-5394,-5214,-5296,-5160,-4795,-5406,-5512,-5306,-3544,-3726,-5017,-4969,-4601,-4676,-996,-5070,-4970,-5370,-5363,-5418,-5567,-5423,-5096,-5312,-5270,-5334,-5641,-5436,-5225,-4989,-4787,-4699,-4783,-4573,3,-4523,-4696,-5045,-5727,-5262,-5451,-5489,-5431,-5132,-5016,-5240,-5581,-5650,-5309,-4984,-4734,-4659,-4705,-3327,-8,-4871,-4446,-4254,-5139,-5554,-5055,-5459,-5124,-5496,-5074,-4841,-4986,-5663,-5435,-5114,-3643,-4690,-3366,-3053,-4852,-4701,-4742,-4359,-4606,-5187,-5331,-5335,-5258,-5043,-4681,-5206,-4844,-4749,-5530,-5240,-5034,-5024,-3017,-2513,-5049,-4935,-3042,-4830,-4794,-4712,-5368,-5532,-5363,-5149,-5125,-4637,-4807,-4675,-4727,-5333,-4674,-5308,-3417,-4661,-3814,-4433,-4674,-4875,-5168,-5227,-5410,-5278,-5647,-5454,-5203,-4948,-4707,-4628,-4730,-4700,-5181,-4771,-4859,-5115,-4738,-4438,-4688,-4994,-5173,-5349,-5448,-5557,-5406,-5429,-5266,-5115,-4508,-4940,-4562,-4744,-4525,-5184,-4530,-4645,-5199,-4778,-4842,-4949,-5230,-5542,-5288,-5646,-5571,-5519,-5443,-5335,-4855,-5139,-4902,-4785,-4593,-3601,-5259,-5463,-5258,-5237,-5119,-5264,-5267,-5431,-5565,-5622,-5963,-6177,-5308,-5669,-5042,-5168,-4990,-4962,-4772,-4452,-4434,-5322,-5326,-5165,-4985,-5499,-5538,-5619,-5579,-5614,-5608,-5787,-5683,-5419,-5238,-5729,-6120,-5048,-4677,-4467,-4615,-4814,-4867,-5130,-5462,-5501,-5569,-5672,-5754,-5547,-5086,-4965,-5803,-5615,-5389,-5396,-5466,-5625,-5250,-5492,-4669,-4883,-4728,-4605,-5456,-5081,-5494,-5668,-5739,-5597,-5079,-5575,-5572,-5701,-5699,-5441,-5387,-5553,-5620,-5539,-4631,-4997,-4922,-5125,-4405,-3940,-5511,-5650,-5835,-5676,-3612,-5668,-5650,-5892,-5772,-5692,-5583,-5569,-5638,-5349,-5669,-5196,-5112,-5025,-5025,-3828,-3874,-5328,-5762,-5936,-5900,-5803,-5714,-5908,-5734,-5730,-5795,-5801,-5706,-5482,-5530,-5164,-5341,-5119,-4975,-5109,-4870,-4692,-4768,-5561,-5397,-5947,-5648,-5698,-5978,-5726,-6116,-5825,-5821,-5493,-5556,-5366,-5513,-5375,-5339,-5054,-5154,-5305,-5163,-4484,-4981,-5462,-5887,-5475,-5288,-5708,-5569,-5693,-5940,-5640,-5380,-5753,-5196,-5402,-5355,-5406,-5345,-4985,-5506,-5431,-5483,-5253,-5120,-5767,-5537,-5132,-5092,-5625,-5139,-5707,-5087,-5401,-5341,-4879,-5270,-5446,-5884,-5132,-5296,-5166,-5062,-6010,-5624,-4610,-5591,-5482,-5287,-5570,-5492,-5110,-5841,-5408,-4894,-5213,-3173,-5275,-5402,-5261,-5048,-4841,-6974,-5704,-6094,-5811,-5643,-5684,-5564,-5377,-5528,-5304,-5245,-5606,-5048,-4573,-4830,-4649,-4801,-4671,-4286,-4344,-4304,-5207,-5609,-6107,-5828,-5660,-5623,-5523,-5241,-5459,-5254,-5364,-5350,-4726,-4714,-4814,-4622,-4810,-4645,-4338,-4284,-4326],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
