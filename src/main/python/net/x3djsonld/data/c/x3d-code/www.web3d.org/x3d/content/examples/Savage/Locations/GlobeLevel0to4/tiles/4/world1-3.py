###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,-112.54166465504323,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1757,1718,1695,1733,1769,1787,1797,1808,1832,1859,1882,1885,1885,1890,1892,1894,1887,1874,1874,1897,1927,1961,1589,1567,1563,1574,1589,1601,1624,1654,1673,1691,1699,1717,1734,1748,1755,1759,1756,1749,1737,1731,1746,1756,1500,1470,1440,1427,1423,1425,1433,1453,1465,1471,1481,1491,1527,1582,1599,1600,1588,1588,1597,1599,1601,1611,1382,1326,1299,1286,1280,1280,1287,1300,1312,1331,1361,1397,1413,1436,1462,1496,1506,1509,1507,1498,1475,1479,1273,1213,1212,1203,1184,1168,1174,1193,1219,1237,1255,1265,1272,1276,1290,1301,1314,1337,1357,1371,1388,1397,1207,1319,1191,1121,1066,1016,1008,1043,1085,1099,1099,1066,1020,1003,1028,1061,1107,1141,1173,1205,1236,1248,1184,1031,959,827,764,725,817,870,901,903,854,777,701,704,736,761,820,898,950,1001,1053,1102,638,444,1186,424,327,191,235,352,385,349,251,228,250,403,598,671,746,781,801,852,908,957,210,25,-6,1,-14,0,1,1,0,-4,-6,0,29,475,771,868,859,833,838,874,967,1044,1,70,282,-105,-125,-51,-26,-6,-7,1,0,243,297,647,854,958,987,927,941,1081,1218,1249,-143,-165,-209,-324,-304,-188,-85,-5,-3,3,221,323,388,566,701,841,1081,1233,1183,1142,1203,1214,-500,-543,-574,-609,-532,-345,-169,-11,-19,-6,0,0,225,340,379,307,368,442,845,486,347,342,-904,-949,-960,-941,-809,-521,-289,-61,-71,292,1,1,1,-3,1,1,0,-3,0,0,228,23,-1335,-1376,-1366,-1312,-1146,-720,-449,-423,-207,0,1,1,-7,241,402,498,-74,-232,-398,-441,-131,-44,-777,-1109,-1053,-1161,-1167,-1053,-749,-772,-897,-589,-115,72,-1,489,39,390,-630,-550,-546,-549,-507,-649,-351,-781,-871,-969,-603,-794,-423,-548,-695,-880,-431,-428,-567,-284,-445,-689,-492,-415,-510,-440,-324,-594,-2692,-2545,-2393,-1974,-1834,-1770,-1569,-1732,-1689,-1955,-2044,-2366,-1261,-1206,-1087,-880,-649,-520,-625,-736,-706,-474,-3297,-3083,-3039,-3003,-3243,-3335,-3244,-3245,-3458,-3748,-3591,-3596,-3815,-3874,-3524,-2538,-1649,-1165,-1862,-2506,-2529,-2211,-3668,-3514,-3543,-3597,-3680,-3946,-3698,-3843,-3836,-3815,-4078,-4033,-4149,-4187,-4232,-4213,-4130,-3250,-3246,-3568,-3636,-3387,-3817,-3663,-3656,-3869,-3928,-4012,-4087,-3948,-4114,-4080,-4168,-4077,-4212,-4347,-4416,-4386,-4354,-3784,-3940,-4031,-3662,-3646,-4043,-3805,-3852,-3946,-4119,-4032,-4305,-4019,-4227,-4060,-4104,-4336,-4455,-4479,-4546,-4544,-4444,-4228,-4061,-4177,-2628,-929,-4137,-4059,-3944,-3946,-4219,-4058,-4340,-4423,-4321,-4346,-4377,-4509,-4488,-4519,-4337,-4463,-4452,-4378,-4305,-4307,-4039,-3716,-4222,-4207,-4165,-4118,-4331,-4284,-4445,-4556,-4515,-4511,-4526,-4568,-4578,-4568,-4513,-4558,-4492,-4426,-4535,-4255,-4314,-4097,-4251,-4239,-4186,-4152,-4350,-4390,-4443,-4553,-4586,-4522,-4585,-4580,-4638,-4572,-4556,-4555,-4504,-4452,-4607,-4449,-4459,-4174],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
