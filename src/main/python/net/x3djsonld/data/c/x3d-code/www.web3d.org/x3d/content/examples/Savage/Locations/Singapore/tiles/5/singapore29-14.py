###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore29-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4654829221618253,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[8,8,9,9,9,10,11,12,13,13,13,13,13,11,8,7,6,7,8,9,10,11,12,14,17,17,14,11,11,11,11,12,12,12,12,13,9,9,9,10,11,11,12,13,14,14,13,13,12,10,8,7,6,6,7,8,8,8,8,11,15,17,14,12,11,11,11,12,11,11,12,13,9,9,9,11,12,13,13,14,14,13,13,12,11,10,8,7,6,6,7,7,7,6,5,7,11,13,12,12,12,12,12,12,11,11,11,12,9,10,11,12,13,14,14,14,13,13,13,12,10,9,8,7,6,6,6,6,6,5,3,4,7,10,11,11,12,13,13,12,11,10,11,11,9,11,12,13,14,14,14,13,13,12,12,11,10,9,8,7,6,6,6,5,4,4,3,5,7,9,9,10,11,13,12,11,9,8,8,9,10,12,13,14,14,14,13,13,13,12,11,11,10,9,8,7,6,5,5,4,3,3,5,6,7,8,7,7,9,11,10,9,7,6,7,8,11,13,14,14,14,13,13,13,12,12,11,10,10,9,8,7,6,5,3,3,3,4,6,6,5,3,0,0,3,5,5,5,4,4,6,9,12,13,14,14,13,13,13,12,12,12,11,10,9,8,8,7,5,4,3,3,4,5,7,6,3,0,-2,-3,0,1,0,0,0,0,4,8,12,13,13,13,13,13,12,12,12,11,11,10,9,8,7,5,4,3,3,4,6,6,5,2,0,-2,-2,-3,-1,0,-1,-4,-9,-11,-5,0,11,11,12,12,12,12,12,12,12,11,10,9,9,7,5,4,3,3,4,5,7,6,2,0,-4,-5,-4,-3,-2,-2,-5,-9,-18,-22,-16,-10,10,9,9,10,11,11,11,12,11,11,10,9,8,6,4,3,3,4,6,6,5,2,0,-5,-9,-12,-13,-13,-14,-15,-15,-17,-21,-24,-23,-21,9,7,6,7,9,10,11,11,11,10,10,8,6,4,3,3,4,5,7,6,2,0,-5,-10,-16,-21,-24,-26,-27,-28,-27,-26,-25,-25,-28,-29,7,5,4,5,5,7,9,10,10,10,8,6,4,4,3,4,6,6,5,2,0,-6,-15,-24,-33,-39,-40,-42,-42,-42,-41,-40,-37,-35,-34,-32,5,3,2,2,2,5,7,8,9,9,7,5,3,3,4,5,7,6,2,0,-4,-13,-26,-39,-50,-56,-57,-57,-56,-55,-54,-53,-49,-46,-40,-33,3,3,2,2,2,4,7,7,9,7,5,4,3,4,6,6,5,2,0,-6,-16,-26,-39,-49,-55,-58,-59,-59,-58,-57,-56,-55,-52,-50,-45,-39,2,2,2,2,3,5,7,8,8,5,2,3,4,6,7,6,2,0,-4,-14,-29,-41,-51,-57,-58,-58,-59,-59,-58,-58,-56,-55,-55,-54,-50,-44,2,2,2,4,5,6,7,8,8,7,6,6,6,6,5,2,0,-7,-16,-27,-40,-49,-56,-58,-59,-59,-59,-59,-58,-58,-56,-55,-52,-48,-47,-45,2,2,3,5,7,7,7,8,8,9,11,10,8,6,2,0,-4,-15,-30,-42,-52,-57,-58,-58,-59,-59,-59,-59,-58,-57,-57,-56,-47,-41,-43,-44,2,4,5,6,7,8,8,8,9,10,11,13,15,9,0,-7,-16,-28,-41,-50,-56,-58,-59,-59,-59,-59,-58,-58,-57,-57,-57,-55,-49,-44,-43,-44,3,5,7,7,7,8,8,9,11,11,11,16,22,12,0,-15,-30,-42,-52,-56,-58,-58,-59,-59,-59,-59,-58,-57,-57,-57,-56,-55,-51,-48,-45,-43,5,6,7,8,8,8,9,10,11,16,21,31,42,37,28,4,-24,-41,-54,-58,-58,-59,-59,-59,-58,-58,-57,-57,-57,-56,-55,-54,-51,-49,-46,-44,7,7,7,8,8,9,11,11,11,22,36,51,65,67,65,32,-13,-37,-53,-58,-59,-59,-59,-58,-58,-57,-56,-56,-56,-56,-54,-53,-50,-49,-46,-44],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
