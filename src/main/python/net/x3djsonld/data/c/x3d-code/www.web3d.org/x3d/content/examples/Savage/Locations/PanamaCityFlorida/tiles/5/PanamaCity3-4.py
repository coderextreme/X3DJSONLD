###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.0',
  Scene=Scene(
    children=[
    Group(
      children=[
      Transform(translation=(108224.56,0.0,108224.56),
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/5/PanamaCity3-4.jpg'],repeatS=False,repeatT=False)),
          geometry=ElevationGrid(xDimension=22,xSpacing=1288.3877,zDimension=22,zSpacing=1717.8502,height=[-55,-52,-51,-49,-47,-45,-44,-43,-42,-42,-40,-40,-40,-40,-40,-40,-40,-40,-40,-39,-40,-39,-55,-52,-50,-48,-46,-45,-44,-43,-43,-43,-42,-41,-41,-41,-40,-41,-41,-40,-40,-40,-40,-40,-56,-53,-51,-49,-46,-45,-44,-44,-44,-44,-42,-42,-42,-41,-41,-41,-41,-40,-40,-40,-40,-40,-57,-53,-52,-49,-47,-46,-45,-45,-45,-44,-42,-44,-42,-42,-42,-42,-41,-40,-41,-41,-41,-40,-57,-54,-51,-49,-48,-47,-46,-45,-45,-44,-43,-44,-43,-43,-43,-42,-42,-41,-42,-42,-42,-41,-57,-54,-52,-50,-48,-48,-47,-47,-45,-43,-44,-46,-45,-44,-43,-43,-43,-42,-42,-42,-42,-42,-57,-54,-52,-51,-49,-49,-48,-48,-47,-46,-46,-46,-45,-45,-44,-44,-43,-43,-43,-43,-42,-42,-56,-54,-53,-51,-49,-48,-48,-48,-48,-47,-47,-47,-47,-45,-45,-44,-43,-43,-43,-43,-42,-42,-57,-55,-53,-51,-49,-48,-47,-47,-47,-47,-48,-47,-47,-46,-45,-44,-44,-43,-43,-43,-42,-42,-57,-56,-54,-52,-50,-48,-47,-47,-47,-47,-47,-47,-46,-46,-45,-45,-44,-43,-42,-42,-42,-42,-58,-57,-55,-54,-53,-50,-49,-48,-47,-46,-46,-47,-46,-46,-45,-44,-44,-44,-43,-43,-42,-42,-59,-59,-58,-57,-55,-54,-52,-51,-50,-48,-47,-46,-46,-46,-45,-44,-43,-43,-43,-43,-42,-42,-62,-60,-60,-59,-58,-58,-57,-56,-54,-52,-51,-48,-46,-44,-44,-44,-43,-43,-43,-43,-42,-42,-62,-62,-62,-62,-61,-63,-64,-63,-61,-60,-58,-56,-52,-49,-45,-44,-43,-42,-42,-43,-43,-43,-65,-66,-67,-68,-69,-72,-73,-72,-71,-68,-65,-61,-59,-55,-51,-47,-44,-42,-42,-43,-43,-43,-70,-72,-74,-77,-79,-78,-78,-77,-75,-73,-71,-68,-63,-60,-57,-52,-46,-44,-42,-43,-43,-43,-91,-89,-92,-87,-83,-82,-80,-78,-77,-76,-74,-72,-69,-65,-61,-57,-53,-49,-45,-44,-42,-42,-103,-99,-95,-91,-87,-85,-82,-80,-79,-77,-76,-74,-72,-69,-65,-61,-57,-54,-51,-46,-42,-42,-104,-102,-98,-94,-90,-87,-84,-82,-80,-77,-77,-76,-74,-72,-68,-64,-61,-57,-54,-50,-46,-42,-107,-104,-101,-97,-93,-89,-86,-84,-81,-78,-78,-77,-76,-74,-70,-67,-63,-60,-56,-53,-50,-46,-110,-107,-104,-101,-95,-92,-88,-84,-83,-79,-79,-78,-77,-74,-72,-69,-66,-62,-58,-55,-52,-49,-111,-108,-105,-101,-96,-92,-88,-84,-83,-79,-79,-78,-77,-74,-72,-69,-66,-62,-58,-55,-52,-49]))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
