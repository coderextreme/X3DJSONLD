###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-8.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-0.04166130228196607,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4655,-4777,-4631,-4393,-4133,-3709,-3214,-3077,-1990,19,104,571,372,300,462,439,290,314,331,341,379,410,-4852,-4496,-4667,-4442,-4081,-3827,-3433,-2952,-1940,17,27,414,449,320,518,343,300,316,375,342,376,414,-4969,-4864,-4589,-2832,-4079,-3878,-3052,-3000,-2218,-22,50,313,231,574,455,341,325,313,349,335,371,409,-4983,-4753,-4747,-4263,-4134,-3922,-3335,-2512,-2459,-47,16,190,419,560,415,412,329,328,355,382,386,417,-5004,-4907,-4786,-4414,-4123,-3893,-3407,-3007,-2549,-13,589,523,506,494,532,376,334,324,366,370,401,399,-4978,-4851,-4531,-4495,-4174,-3800,-3472,-2727,-2427,-301,431,613,509,517,717,458,347,320,328,346,377,421,-5022,-4817,-4669,-4436,-4164,-3782,-3447,-2652,-2063,-1483,780,655,648,508,690,497,390,332,337,409,397,375,-5084,-4767,-4574,-4386,-4118,-3758,-3431,-2878,-2422,-1964,269,597,604,568,452,498,399,349,333,348,357,344,-4945,-4725,-4465,-4309,-3951,-3536,-2607,-2228,-1689,-1741,380,612,640,591,578,570,404,364,411,388,373,420,-4842,-4727,-4406,-4210,-3926,-3251,-1859,-1281,-1708,-1394,78,758,651,682,653,641,545,405,356,427,463,472,-4752,-4610,-4320,-4069,-3688,-2312,-613,-395,-1017,-58,100,701,697,744,630,594,582,508,380,371,430,456,-4423,-4402,-4123,-4020,-3022,-1169,-3,-10,-5,1912,170,542,706,676,626,652,675,494,383,410,461,431,-1302,-3739,-3739,-3760,-2620,-604,14,3,31,41,224,495,623,723,694,626,610,500,504,424,425,549,-58,-2877,-3202,-3556,-2150,-295,16,45,70,493,1147,692,634,705,837,709,624,722,405,401,596,514,109,-56,-2319,-2812,-1788,-91,19,78,15,125,1729,742,974,748,955,706,710,614,522,438,544,611,210,9,42,2,-241,14,66,154,73,136,890,732,892,838,905,1025,686,613,635,579,523,605,445,132,93,65,29,49,284,25,125,158,620,1643,897,867,1099,1111,591,465,562,590,651,637,145,372,108,55,129,296,235,121,113,183,253,445,1248,1042,1291,1047,538,484,451,451,586,692,138,406,171,114,204,359,421,304,131,191,141,475,565,1017,803,495,472,411,423,440,682,702,100,277,222,225,301,406,264,237,94,126,135,279,416,547,467,454,401,383,400,440,675,761,103,184,306,300,375,293,148,121,277,197,108,271,402,337,288,423,392,395,385,408,558,515,100,144,394,341,342,102,68,227,502,1077,244,140,231,205,320,483,433,520,372,389,425,490,165,118,439,352,312,241,130,429,747,1038,346,395,329,395,253,341,346,384,413,396,414,468,146,143,434,333,273,243,155,391,733,1013,427,639,455,381,323,334,342,357,377,398,408,456],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
