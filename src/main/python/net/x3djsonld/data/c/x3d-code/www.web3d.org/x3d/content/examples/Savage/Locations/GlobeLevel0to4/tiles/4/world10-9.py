###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world10-9.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,22.458339368270288,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[571,601,721,701,611,502,412,356,195,417,487,360,617,386,914,-1352,-572,864,1416,1078,902,822,546,602,634,603,675,436,355,311,280,367,578,343,586,442,68,-1667,-31,751,1239,1265,840,1051,535,535,572,696,556,416,319,291,430,320,439,387,438,324,-4,-1734,2,828,1143,1043,893,1081,530,554,555,635,577,424,298,263,248,214,388,282,476,251,-625,-1409,0,1348,988,974,934,985,574,522,493,674,830,428,287,229,156,207,179,360,458,-15,-741,-706,13,1320,1053,934,1048,955,633,456,497,552,1057,697,298,287,166,168,215,386,544,-4,-1334,-358,353,980,1098,979,934,806,517,413,440,522,888,531,332,279,112,320,198,369,480,-118,-997,-42,543,954,951,942,955,966,416,503,412,771,724,677,355,391,205,408,186,237,704,-663,-767,80,1017,751,940,928,967,940,338,384,409,500,532,512,374,276,111,452,152,303,360,-656,-410,1241,590,934,1038,859,966,829,284,317,388,508,451,410,257,186,94,458,87,436,0,-839,0,781,1051,1210,1043,773,890,739,240,283,349,352,377,304,165,448,378,335,318,429,-646,-1172,56,674,648,1289,923,783,692,675,203,231,320,280,199,285,263,330,285,332,467,489,-829,-700,398,600,1257,1276,1040,1022,725,592,164,201,253,214,257,210,129,272,221,59,512,533,-1167,-478,357,777,1087,1000,1064,970,675,548,142,157,187,179,152,128,35,271,151,153,384,18,-1044,144,1449,1126,974,930,1068,899,689,598,125,140,153,144,132,157,202,229,115,276,542,-50,-534,1161,1247,965,954,990,893,699,689,562,94,152,122,126,111,167,214,149,111,389,572,76,216,1016,814,1014,840,933,835,745,654,536,54,123,104,90,41,-30,161,191,108,252,256,978,-1061,1107,891,907,799,859,765,690,594,488,27,112,59,67,114,-103,127,255,37,379,33,714,98,839,1083,744,831,672,720,610,520,426,35,47,55,105,200,-67,35,173,184,356,-32,447,650,1187,937,781,641,595,613,504,401,407,68,79,125,155,201,181,-62,49,-13,75,107,327,769,1008,976,599,694,684,567,419,325,347,96,119,145,187,209,221,96,15,3,6,21,106,519,980,732,558,818,795,514,363,369,251,137,147,166,196,139,33,-950,-744,17,2,-22,-38,248,711,621,769,831,781,524,303,288,177,150,154,133,129,-477,-2612,-2502,-1612,-56,-65,-284,-778,48,876,510,673,882,742,542,309,216,49,141,159,141,36,-1059,-2940,-2622,-1720,-89,-72,-423,-864,15,947,535,637,888,723,563,290,208,34],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
