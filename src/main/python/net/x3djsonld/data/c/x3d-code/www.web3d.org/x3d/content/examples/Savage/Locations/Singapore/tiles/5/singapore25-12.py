###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore25-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4305560726498494,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[19,21,21,20,22,24,25,26,27,28,29,30,31,31,29,25,23,21,21,22,23,23,22,20,19,19,19,20,21,22,22,22,23,26,29,30,20,22,22,22,24,25,24,25,26,27,29,30,32,32,30,26,23,21,20,20,20,20,18,16,15,15,17,19,21,21,22,23,23,26,28,31,18,19,20,21,23,24,24,24,25,25,27,29,30,31,30,28,26,23,21,21,21,20,17,14,13,14,16,18,21,21,21,22,23,25,26,29,15,15,17,19,21,22,22,23,23,24,25,27,28,28,29,29,28,26,25,26,24,22,17,14,12,13,15,19,21,20,20,21,23,23,24,25,13,13,15,17,19,21,22,22,23,24,25,26,27,27,28,28,28,27,27,28,26,22,17,13,11,13,15,19,21,20,20,21,22,22,23,25,13,12,13,15,17,19,21,22,23,23,24,26,27,27,27,27,27,27,28,29,27,21,16,12,11,13,16,19,21,20,20,21,22,22,23,25,12,11,11,11,14,17,20,22,23,23,25,26,27,27,27,27,27,27,27,27,25,20,14,11,11,13,16,19,20,19,19,21,22,23,25,26,11,11,8,6,10,15,19,22,23,24,25,26,27,28,27,27,26,26,25,23,21,17,13,10,10,12,14,18,19,19,19,21,24,25,27,27,10,10,7,5,9,14,18,23,25,26,27,28,29,29,28,26,25,23,22,20,17,14,11,10,10,13,15,18,20,21,21,23,25,27,28,28,9,8,9,9,11,14,19,24,27,30,31,31,31,30,29,26,23,19,17,17,15,13,10,10,11,15,18,21,24,25,27,26,26,28,29,30,8,8,9,10,12,15,20,26,29,32,31,30,30,30,28,25,21,16,14,14,13,11,9,10,12,17,21,24,26,28,29,28,27,29,30,31,9,9,9,10,12,14,21,28,31,32,30,27,27,28,27,24,20,14,13,12,11,9,9,10,13,18,22,25,28,29,30,29,28,30,31,32,10,9,9,9,11,14,20,28,30,31,29,24,24,25,24,21,18,14,13,13,11,9,8,10,14,19,23,27,30,30,31,30,30,30,31,33,11,10,10,10,11,13,18,23,25,27,25,21,21,21,20,17,15,14,14,14,13,11,10,12,15,19,23,27,31,32,33,32,31,30,30,34,11,11,10,10,11,12,15,19,22,24,23,21,20,18,17,14,14,15,15,15,14,12,11,14,16,19,22,27,31,33,34,32,31,29,29,34,12,12,11,11,10,10,14,18,22,24,24,23,21,18,15,13,14,14,14,14,14,14,14,16,18,19,22,26,29,33,34,32,30,27,26,32,12,12,12,11,10,9,12,17,20,22,24,24,21,17,14,12,13,13,13,14,15,15,17,18,20,20,22,25,28,30,33,30,28,25,25,30,11,12,13,12,11,11,11,13,16,17,18,19,17,14,12,12,12,12,13,14,16,18,20,22,24,25,25,26,26,26,26,25,24,23,24,28,10,12,13,14,12,11,10,10,12,13,14,14,13,11,11,12,12,12,13,14,17,20,24,26,28,29,29,28,26,23,21,22,22,23,25,28,9,10,12,13,12,12,11,11,11,10,10,10,10,10,11,12,12,13,14,16,19,23,27,31,34,35,35,32,28,23,21,23,24,27,30,32,9,8,10,12,12,13,12,11,10,9,8,8,9,10,11,12,13,14,16,17,20,25,30,35,38,39,39,35,30,24,21,24,27,31,34,36,9,7,9,10,12,13,14,13,11,9,8,8,8,9,10,12,14,15,16,18,21,26,31,34,36,38,38,34,30,25,22,26,29,32,35,35,10,6,7,8,11,13,14,14,12,10,8,7,7,7,9,12,14,15,16,18,22,27,31,33,35,36,36,33,29,25,24,28,30,33,35,34],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
