###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-6.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[449,473,0,1,1,0,1,0,0,17,271,301,280,236,267,317,436,586,758,932,1098,1156,262,165,0,0,0,0,-2,59,0,282,518,716,842,876,796,647,544,445,434,485,811,963,6,-283,-493,-627,-847,-1011,-1156,-1150,-925,-312,181,530,851,1072,1193,1196,1174,1152,1126,1109,1122,1181,-260,-335,-418,-572,-723,-831,-985,-1072,-1101,-783,-350,248,478,663,1003,1259,1300,1327,1372,1393,1414,1420,-305,-334,-390,-453,-537,-691,-827,-915,-982,-1050,-911,-461,-390,-22,341,670,994,1242,1333,1483,1550,1588,-316,-337,-364,-394,-433,-490,-629,-725,-794,-847,-862,-820,-601,-427,-338,-209,105,473,794,1078,1210,1284,-325,-338,-360,-376,-386,-400,-418,-469,-566,-643,-691,-752,-750,-579,-478,-463,-398,-339,0,236,433,529,-310,-300,-349,-361,-382,-400,-400,-404,-436,-503,-583,-624,-688,-687,-450,-442,-390,-253,-520,0,0,1,-440,-376,-350,-350,-373,-400,-400,-399,-400,-440,-540,-581,-600,-599,-446,-400,-477,-392,-397,-97,0,0,-500,-515,-471,-349,-349,-375,-470,-544,-962,-1193,-606,-627,-654,-568,-982,-1493,-2032,-2403,-987,0,0,0,-515,-550,-561,-582,-666,-860,-1285,-1760,-2272,-2175,-2408,-2178,-2067,-2095,-2375,-2419,-2635,-2847,-2987,-2106,-665,-260,-465,-601,-893,-1284,-1721,-2063,-2427,-2558,-2739,-2920,-3093,-3000,-2946,-3083,-3262,-3284,-3279,-3186,-3447,-3072,-2620,-2465,-749,-1203,-1574,-1907,-2365,-2714,-2932,-3117,-3216,-3292,-3319,-3625,-3508,-3367,-3686,-3752,-3726,-3591,-3456,-3689,-3646,-3407,-1654,-1876,-2139,-2540,-2688,-3253,-3744,-3561,-3534,-3599,-3651,-3767,-3825,-3659,-3794,-3876,-3986,-3884,-3579,-3992,-4006,-3896,-2279,-2596,-2956,-3212,-3215,-3577,-3798,-3758,-3814,-3854,-3836,-3889,-4018,-4003,-3818,-4103,-4082,-3976,-3864,-4059,-4009,-4198,-3026,-3085,-3329,-3605,-3938,-3822,-3917,-3965,-3898,-3894,-3915,-4010,-4160,-4223,-4170,-4069,-3997,-4097,-4105,-3749,-4191,-4186,-3386,-3424,-3510,-3699,-3938,-4194,-4020,-4060,-4082,-4001,-4089,-4164,-4199,-4302,-4344,-4355,-4327,-4301,-4299,-4260,-4371,-4409,-3597,-3616,-3660,-3774,-3912,-4174,-4190,-4105,-4168,-4196,-4251,-4237,-4302,-4350,-4423,-4485,-4524,-4505,-4446,-4350,-4371,-4498,-3804,-3796,-3803,-3799,-3881,-4092,-4210,-4195,-4199,-4276,-4309,-4365,-4398,-4442,-4461,-4531,-4576,-4599,-4555,-4525,-4523,-4486,-3968,-4002,-3945,-3948,-3980,-4140,-4302,-4287,-4287,-4341,-4431,-4396,-4464,-4540,-4515,-4589,-4623,-4646,-4653,-4628,-4659,-4682,-3944,-4078,-4106,-4057,-4098,-4227,-4338,-4333,-4373,-4463,-4477,-4470,-4500,-4502,-4593,-4607,-4651,-4676,-4718,-4718,-4754,-4762,-3779,-4004,-4180,-4252,-4227,-4300,-4302,-4362,-4403,-4432,-4388,-4459,-4523,-4599,-4607,-4638,-4682,-4707,-4760,-4777,-4793,-4822,-3804,-3999,-4134,-4300,-4269,-4306,-4365,-4404,-4476,-4505,-4493,-4509,-4519,-4593,-4589,-4664,-4689,-4719,-4791,-4790,-4817,-4825,-3812,-4010,-4132,-4278,-4260,-4337,-4365,-4416,-4489,-4518,-4499,-4524,-4541,-4589,-4580,-4610,-4683,-4734,-4779,-4792,-4825,-4840],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
