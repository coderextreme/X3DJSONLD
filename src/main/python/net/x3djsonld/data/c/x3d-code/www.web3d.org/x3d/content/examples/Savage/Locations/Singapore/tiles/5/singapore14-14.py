###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore14-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3345072364919157,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[24,21,19,23,27,29,31,30,28,27,28,26,24,20,16,16,17,18,21,22,24,25,28,29,30,28,25,23,23,25,29,31,29,26,22,19,26,23,21,23,25,27,28,27,26,26,26,26,25,22,19,18,19,20,21,23,25,27,30,31,32,30,26,24,24,25,29,30,28,25,22,19,27,25,23,23,25,26,27,27,26,26,25,24,24,23,22,21,20,21,22,24,26,28,31,32,33,31,27,25,25,25,29,30,28,25,22,19,28,26,23,24,25,27,28,29,28,26,24,23,22,23,23,23,21,21,22,24,28,30,33,33,32,30,28,26,26,27,30,30,28,26,22,19,29,26,23,25,27,28,30,30,29,26,23,21,20,22,23,24,22,23,24,26,30,33,35,35,33,31,29,27,27,28,30,31,29,26,22,19,30,26,24,27,30,31,32,31,30,27,23,20,19,21,23,23,23,24,27,30,33,36,38,37,35,33,30,28,28,29,31,31,29,26,22,19,30,28,26,29,33,33,33,31,29,26,22,20,19,20,22,23,23,26,30,33,35,37,38,38,37,36,32,30,30,30,31,32,29,26,23,21,30,30,30,31,33,33,34,31,28,24,20,19,19,19,21,22,22,26,30,33,34,35,36,36,37,38,35,33,32,30,31,31,30,28,27,26,30,31,32,33,34,34,33,30,26,23,19,19,19,20,21,21,22,25,29,31,32,32,33,35,37,38,37,35,33,31,31,31,31,31,31,31,29,31,32,34,35,33,31,27,23,21,19,19,19,21,22,22,22,24,26,28,29,30,32,34,37,38,37,35,32,30,30,31,32,33,34,33,29,30,32,34,36,33,28,25,22,21,20,20,21,22,23,24,23,24,25,27,28,30,32,35,38,38,38,36,32,30,31,32,34,36,35,33,30,31,33,34,35,32,28,25,22,22,22,23,24,25,25,25,24,25,27,29,31,33,35,38,41,42,40,38,34,33,33,34,37,38,36,33,32,34,35,35,34,31,27,25,23,23,24,25,26,26,27,26,25,27,29,31,34,36,38,41,44,45,42,39,37,36,36,36,38,39,36,32,35,37,38,35,32,29,26,25,23,24,26,27,27,27,28,27,26,27,29,32,35,37,40,42,45,45,43,40,39,38,38,38,38,38,35,32,37,39,40,35,30,27,24,24,23,24,26,27,28,29,30,29,28,28,30,32,36,38,40,42,44,44,42,41,40,39,40,39,38,36,34,33,38,39,40,34,28,25,21,21,22,24,26,28,30,32,33,32,30,30,32,34,37,39,40,41,41,41,41,40,40,40,40,40,38,36,36,35,39,39,39,33,27,24,20,20,21,23,25,29,33,35,37,35,32,33,35,36,38,39,40,40,39,39,39,39,40,40,40,40,38,37,37,37,41,39,38,33,28,25,22,22,23,24,26,32,37,39,40,38,35,35,37,38,39,40,41,41,39,39,39,39,40,41,41,40,39,38,36,35,43,39,37,33,30,27,25,25,25,26,27,34,40,42,43,40,37,37,39,39,39,40,42,42,40,39,39,39,40,41,41,40,39,38,35,32,45,42,39,36,34,31,28,27,27,27,27,33,38,41,42,40,38,38,39,40,40,40,42,42,41,39,38,37,38,40,40,41,40,39,36,33,48,45,42,40,38,35,32,30,28,28,28,31,35,38,39,39,38,38,39,40,40,40,41,42,41,39,37,36,36,38,41,42,42,41,38,36,49,46,43,43,43,43,42,38,34,31,29,31,33,35,37,38,38,39,40,41,41,41,42,42,41,40,39,38,39,41,43,44,45,45,41,39],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
