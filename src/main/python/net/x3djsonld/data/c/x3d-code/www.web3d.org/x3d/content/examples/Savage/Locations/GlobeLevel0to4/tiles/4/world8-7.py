###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4796,-5642,-3878,-4677,-4129,-3748,-3529,-3339,-3507,-3263,-3581,-4181,-3621,-4346,-4631,-4813,-5151,-5001,-5117,-4958,-4751,-4655,-3281,-5135,-3101,-4812,-4302,-3915,-3786,-3508,-3648,-4576,-3564,-4031,-4100,-4399,-4458,-4754,-4948,-5014,-5125,-4939,-4899,-4852,-4168,-3683,-3717,-4092,-6959,-3674,-3225,-3294,-3869,-4041,-4377,-4086,-4131,-4527,-4603,-5148,-4920,-5138,-5095,-5116,-4952,-4969,-3766,-4103,-4738,-4346,-4495,-2769,-3275,-3483,-4066,-4034,-4393,-4677,-4776,-5427,-5129,-5047,-4958,-5193,-5114,-5088,-5007,-4983,-3662,-4428,-4269,-4805,-4997,-4671,-3009,-3961,-4734,-4134,-4100,-4307,-4996,-5065,-5182,-5152,-5170,-5068,-5118,-5101,-5086,-5004,-4110,-4602,-4979,-4347,-4422,-4990,-5410,-5448,-4386,-4308,-5157,-3447,-4262,-4496,-5078,-5111,-5130,-5120,-5148,-5102,-5088,-4978,-4050,-4376,-4782,-4767,-4326,-5168,-5383,-5113,-4661,-4955,-4415,-4523,-5091,-5280,-5111,-5010,-5147,-5084,-5069,-5112,-5066,-5022,-4391,-4815,-4588,-4888,-5036,-5167,-5357,-5025,-4441,-5039,-4263,-4748,-4553,-4768,-5051,-4791,-4951,-4908,-4944,-5119,-5061,-5084,-4531,-4404,-4738,-4691,-4984,-4879,-4763,-4758,-4623,-4554,-4732,-4848,-4685,-4845,-4927,-4774,-4744,-4644,-4838,-5011,-5273,-4945,-4364,-4513,-4519,-4644,-4930,-4825,-4890,-4785,-4749,-4731,-4483,-4576,-4499,-4467,-4621,-4542,-4445,-4358,-4600,-5069,-5017,-4842,-4278,-3942,-4018,-4593,-4956,-4981,-4940,-4863,-4770,-4590,-4399,-4350,-4499,-3942,-3887,-3975,-3966,-4006,-3850,-2379,-4764,-4752,-4181,-3183,-2887,-4554,-4914,-5016,-4981,-4930,-4813,-4635,-4335,-3988,-3297,-2035,-668,-2638,-3120,-3450,-3036,-1502,-1764,-4423,-4219,-3567,-2593,-3847,-4891,-5010,-4986,-4943,-4822,-4658,-4230,-3838,-2423,-79,31,15,-1351,-2525,-1334,-78,-40,-1302,-4226,-3451,-2483,-4106,-4834,-4992,-4973,-4947,-4855,-4567,-4077,-3505,-1254,43,209,152,47,-8,-18,91,64,-58,-4267,-3726,-2679,-2876,-4915,-4997,-4986,-4950,-4781,-4615,-3875,-2992,-59,117,223,189,179,56,97,95,102,109,-3851,-3555,-3649,-2996,-4665,-4875,-4952,-4930,-4833,-4331,-3623,-1008,60,203,245,191,247,75,163,167,151,210,-3592,-3486,-3828,-3980,-3811,-4923,-4867,-4929,-4532,-4151,-2410,10,131,255,285,250,229,84,160,204,242,445,-3981,-3481,-3803,-4300,-4711,-4844,-4781,-4681,-4089,-1535,-20,119,213,266,298,276,233,159,183,302,280,145,-4362,-2400,-1829,-4298,-4709,-4780,-4707,-4288,-2300,-337,30,149,395,492,972,344,213,303,212,260,154,138,-4654,-4514,-4169,-4035,-4358,-4795,-4634,-4028,-1376,-8,73,322,480,614,517,330,297,438,266,254,194,100,-4753,-4476,-3770,-4391,-4608,-4545,-3709,-3776,-4,-3,67,339,475,543,539,395,330,375,236,199,89,103,-4797,-4431,-4027,-4401,-4316,-2889,-1275,-317,-3,4,82,909,514,557,471,478,395,311,270,327,116,100,-4603,-4077,-4637,-4597,-4000,-1043,-389,-116,-8,25,127,418,487,564,427,434,359,252,362,355,127,165,-4988,-4282,-4923,-4584,-4118,-1008,-325,-25,-94,186,115,464,481,537,416,415,339,248,383,324,191,146],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
