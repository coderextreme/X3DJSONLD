###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_43',geoSystem=['GDC'],position=(11.208336350785146,-22.54166197283422,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(11.208336350785146,-22.54166197283422,0.0),range=4495500.0,child1Url=['../../tiles/4/world8-6.x3d'],child2Url=['../../tiles/4/world8-7.x3d'],child3Url=['../../tiles/4/world9-6.x3d'],child4Url=['../../tiles/4/world9-7.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world4-3.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-45.04166264338647,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[27,33,34,-1441,-3543,-4169,-4242,-4871,-5268,-5364,-5186,-4919,-4899,-4197,-3954,-3160,-3821,-4361,-4921,-4831,-4342,5,-37,-2898,-3370,-3778,-4289,-4574,-4954,-4944,-4927,-4922,-4834,-4383,-4469,-3432,-3899,-4255,-4708,-5170,-5002,-4917,-24,-2950,-3672,-4320,-4493,-4434,-4473,-3420,-3520,-2356,-3804,-2063,-4222,-3280,-4010,-3861,-4337,-4519,-5039,-4939,-4854,-165,-3766,-3834,-4443,-4525,-4507,-4228,-3727,-3116,-3821,-3857,-4787,-3300,-3411,-3992,-4598,-4943,-5083,-5111,-5102,-4918,-3461,-4275,-3442,-4311,-3962,-3949,-3383,-3144,-3949,-3581,-4565,-4001,-5133,-5420,-4902,-5215,-4501,-4953,-5092,-5106,-4954,-3847,-4285,-4305,-4287,-3769,-3713,-3039,-3384,-4090,-3860,-4474,-4502,-4937,-5054,-4717,-4640,-4687,-4866,-4783,-5088,-4865,-3868,-4270,-3992,-4304,-4471,-3563,-2585,-3655,-4139,-4330,-3932,-4534,-4999,-4916,-4802,-4445,-4147,-4227,-4149,-4835,-4762,-3948,-4159,-4686,-4622,-3868,-3751,-3145,-3847,-4066,-4345,-3829,-2882,-4975,-4987,-4799,-3951,-414,1,-2706,-305,-3959,-4071,-4625,-4777,-4600,-4218,-3402,-3754,-4006,-4298,-2838,-4037,-3126,-4927,-5025,-4693,-3273,82,177,39,95,38,-4303,-4564,-4509,-4588,-4293,-2987,-3812,-4118,-4593,-4369,-3338,-3672,-4878,-4794,-4281,-28,215,200,121,186,86,-4549,-4584,-4379,-4127,-4006,-4170,-5155,-4783,-4537,-4694,-4608,-3934,-4805,-4471,-5,119,444,307,215,271,150,-4792,-3887,-4126,-3990,-4385,-4991,-4682,-5244,-5159,-4947,-4864,-3938,-2074,-2961,-171,393,841,413,353,260,146,-4721,-3963,-4384,-4260,-4185,-5426,-5098,-5383,-5183,-5310,-4442,-5171,-3630,-29,36,434,414,414,289,323,160,-4682,-3604,-4052,-4859,-4663,-5388,-5389,-5751,-5248,-5299,-5167,-4935,-3941,-1,208,597,351,356,435,300,190,-4261,-3868,-4971,-4642,-5911,-6018,-5644,-5586,-5348,-5008,-4974,-4848,-3747,30,84,474,514,341,333,298,302,-3346,-4284,-4774,-5306,-5799,-6028,-5872,-5585,-5168,-4683,-4638,-4566,-3537,29,64,150,353,292,276,326,286,-2526,-4024,-4771,-5521,-5378,-5868,-6018,-5470,-4995,-4349,-4162,-4249,-2520,23,57,106,303,310,270,269,284,-3423,-4580,-4888,-5047,-5234,-5563,-5566,-5360,-4901,-4064,-2841,-3892,-2739,47,73,83,257,274,265,291,299,-3788,-4597,-4942,-5142,-5162,-5256,-5299,-5155,-4676,-2818,-1756,-3582,-2985,4,25,128,193,386,268,267,298,-4531,-4453,-4846,-5951,-5200,-4858,-4963,-4744,-4494,-3310,-3392,-3249,-3024,6,53,423,231,318,295,275,327,-3275,-4464,-4622,-5578,-5611,-5272,-4463,-4826,-4476,-3910,-3594,-3220,-2760,-1,66,397,368,340,301,271,446,-3197,-4165,-4796,-5357,-5696,-5247,-4221,-4869,-4426,-3941,-3619,-3231,-2730,-1,72,432,374,347,303,286,420],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
