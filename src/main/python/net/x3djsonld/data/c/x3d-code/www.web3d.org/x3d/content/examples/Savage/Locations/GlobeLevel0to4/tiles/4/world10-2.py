###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world10-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5400,-5022,-5095,-4910,-4611,-4688,-4699,-4440,-4430,-4551,-4379,-4326,-4271,-4055,-3934,-4082,-3980,-3891,-3708,-3799,-3798,-3609,-5189,-5086,-4884,-4914,-4735,-4704,-4710,-4558,-4606,-4424,-4343,-4293,-4013,-4040,-3351,-3911,-3875,-3808,-3995,-3830,-3761,-2913,-5132,-5056,-5063,-4672,-4730,-4875,-4685,-4495,-4531,-4365,-4107,-4212,-4149,-4136,-4053,-3989,-3966,-3938,-3748,-3772,-3774,-3485,-5124,-5049,-4924,-4961,-4896,-4647,-4617,-4399,-4404,-2404,-4340,-3569,-4073,-4066,-3988,-4043,-3954,-3985,-3810,-3792,-3722,-3559,-5022,-4879,-4736,-4807,-4901,-4804,-4581,-4441,-4008,-4064,-4434,-4179,-4098,-4110,-3955,-4055,-3959,-3983,-3927,-3746,-3656,-3182,-4869,-4899,-4688,-4531,-4730,-4555,-4549,-4247,-4148,-3914,-4035,-4114,-4215,-4032,-4072,-4006,-3963,-4071,-3869,-3798,-3754,-3384,-4648,-4986,-4788,-4937,-4467,-4603,-4448,-4228,-4399,-4230,-4257,-4185,-4244,-3889,-4090,-4124,-3915,-3876,-3785,-3717,-3742,-3153,-4340,-4798,-4788,-4652,-4659,-4496,-4435,-4330,-4298,-4325,-4223,-4332,-4188,-4341,-4091,-4164,-3920,-3312,-3825,-3757,-3534,-2159,-4487,-4635,-4560,-4476,-4634,-4641,-4282,-4368,-4690,-4405,-4168,-4168,-4257,-4026,-4010,-4154,-3816,-3986,-3441,-3485,-3595,-365,-4728,-4782,-4544,-4507,-4553,-4525,-4294,-4404,-4507,-4436,-4052,-4130,-4199,-4014,-4059,-3667,-3720,-4060,-3808,-3705,-2369,-358,-4622,-4434,-4785,-4824,-4648,-4625,-4750,-4133,-4469,-4644,-4417,-4343,-4279,-4004,-4010,-4165,-4136,-3916,-3780,-3314,-960,-118,-4619,-4505,-4467,-4482,-4771,-4780,-4539,-4435,-4641,-4242,-4180,-4201,-4100,-3653,-3937,-3907,-3805,-3784,-3751,-3492,-83,-18,-4586,-4318,-4471,-4639,-4655,-4538,-4180,-4653,-4397,-4552,-4246,-4176,-3860,-4291,-3869,-4080,-3917,-3581,-3551,-3257,4,365,-4543,-4682,-4534,-4514,-4192,-4597,-4263,-3687,-4341,-4418,-4376,-4316,-4314,-3977,-4068,-3702,-3967,-3830,-3268,-83,96,210,-4420,-4087,-4295,-4205,-4837,-4500,-4360,-4472,-4546,-4398,-4362,-4251,-4180,-4081,-3975,-3918,-3922,-3541,-2254,-4,95,2,-4395,-4363,-4578,-4196,-4434,-4763,-3665,-4568,-4405,-4248,-4300,-4364,-4264,-3845,-3951,-3930,-3654,-3748,-278,-125,503,-108,-4465,-4364,-4364,-4282,-4448,-4629,-4558,-4757,-4498,-4395,-4396,-4309,-4108,-4155,-3564,-3708,-3614,-3513,-1528,-81,248,-394,-4087,-4746,-4434,-4639,-4579,-4797,-4675,-4384,-4104,-4400,-4252,-4280,-4231,-4270,-3833,-3526,-3496,-3201,-924,580,85,-141,-4251,-4223,-4461,-4414,-4492,-4543,-4654,-3948,-4232,-4307,-4329,-4320,-4147,-3868,-3866,-3475,-3362,-1371,55,774,-192,-75,-4824,-4573,-4575,-4676,-4605,-4516,-4510,-4487,-4388,-3866,-4296,-4209,-4091,-3895,-3444,-3612,-2630,-2492,357,-40,-146,140,-4713,-4623,-4677,-4676,-4607,-4623,-4427,-4220,-4317,-4182,-4095,-3935,-4070,-3945,-3785,-3064,-1975,-2068,914,-21,-69,83,-4712,-4664,-4550,-4133,-4500,-4484,-4360,-4314,-4198,-4240,-4088,-4069,-3999,-3806,-3793,-945,-1961,-253,1163,-17,10,293,-4839,-4606,-4584,-4466,-4849,-4523,-4475,-4392,-4349,-4102,-4305,-3566,-3890,-4029,-3740,-1593,-952,-4,721,78,563,431,-4915,-4680,-4618,-4527,-4593,-4423,-4405,-4296,-4340,-4272,-4229,-3921,-3907,-4182,-2957,-1026,-1111,118,331,67,374,483],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
