###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_69',geoSystem=['GDC'],position=(1.3257755241139217,103.86273364845137,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.3257755241139217,103.86273364845137,0.0),range=4101.627,child1Url=['../../tiles/5/singapore12-18.x3d'],child2Url=['../../tiles/5/singapore12-19.x3d'],child3Url=['../../tiles/5/singapore13-18.x3d'],child4Url=['../../tiles/5/singapore13-19.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore6-9.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3170438117359278,103.84837061432235,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[13,9,10,13,15,12,11,8,8,10,10,9,8,9,10,11,10,11,13,14,15,13,12,10,9,9,10,10,9,8,6,6,7,10,11,14,13,12,11,11,14,15,15,11,8,9,11,11,9,8,8,9,9,8,10,12,15,16,13,11,10,8,8,9,9,9,6,4,5,8,13,14,13,12,12,13,12,15,16,16,11,9,10,11,12,10,8,8,9,8,7,8,11,13,15,13,12,10,8,7,8,9,10,6,4,5,8,13,15,12,11,12,14,13,15,16,16,11,13,11,11,13,11,9,8,10,9,6,6,9,11,12,13,13,11,9,8,7,10,12,7,6,6,8,12,16,11,10,15,16,15,16,17,17,13,14,11,10,13,12,10,8,9,11,7,6,9,10,10,12,12,11,10,10,8,11,13,8,7,8,9,11,15,11,9,18,19,18,17,17,19,17,15,11,8,12,13,12,9,9,13,10,7,10,10,9,10,12,11,12,13,9,12,15,11,8,10,10,10,13,10,8,20,19,20,18,19,20,20,17,12,9,12,13,13,10,9,13,12,8,10,10,9,10,12,12,13,14,10,12,14,11,9,11,11,9,11,9,8,19,18,19,19,20,21,22,20,14,10,12,12,13,11,9,13,13,8,9,10,9,10,13,13,14,14,10,10,12,10,9,11,11,8,10,9,9,18,18,18,19,21,22,21,21,16,13,12,11,12,12,10,12,12,8,8,10,10,10,13,15,14,14,11,10,11,10,9,11,11,8,9,10,10,18,18,17,19,22,23,18,19,16,16,12,9,11,13,12,11,10,8,8,10,11,10,12,15,13,14,13,12,12,12,9,9,9,9,8,9,9,20,17,16,19,22,24,16,17,15,17,12,8,9,12,13,10,8,7,7,10,11,9,12,15,13,14,15,13,13,12,9,8,9,11,10,10,10,22,17,14,18,22,24,14,12,13,16,12,10,9,10,12,9,6,7,8,10,11,10,11,14,13,14,17,15,14,12,10,8,10,15,15,12,11,24,17,14,17,20,22,13,9,11,14,13,12,8,8,12,8,6,7,9,11,11,10,11,14,13,14,17,16,15,12,11,9,13,18,18,13,12,25,19,15,16,17,18,12,8,11,14,15,13,9,8,12,8,7,8,10,12,11,9,11,14,14,13,16,15,13,11,11,12,17,20,18,15,14,26,20,15,16,15,16,12,8,11,14,15,13,10,9,12,10,8,10,11,13,12,9,11,14,13,13,14,14,12,10,11,13,20,20,17,15,14,26,21,16,16,15,16,12,7,11,13,13,12,11,10,13,12,9,10,12,13,12,10,11,13,13,12,11,14,12,10,10,13,20,19,16,14,13,27,21,16,16,15,16,14,9,12,12,11,11,13,12,13,13,9,11,11,12,13,12,11,13,13,11,10,12,12,9,9,13,19,19,16,14,13,27,19,15,17,16,15,17,12,15,12,10,11,14,12,13,12,10,10,10,11,15,15,11,11,13,12,10,10,11,9,9,14,19,19,18,15,13,25,17,14,18,17,15,19,16,17,12,10,11,15,14,12,11,9,10,10,10,15,16,11,9,13,13,10,8,10,9,11,15,19,21,20,17,14,22,15,14,19,16,16,17,20,19,13,12,13,16,16,13,11,8,8,10,10,12,13,9,9,13,13,9,7,10,12,13,16,18,23,22,18,15,18,13,13,18,15,17,16,22,19,14,13,14,17,17,14,10,7,7,10,10,9,10,8,9,12,12,9,7,11,15,14,15,18,26,24,20,16,14,13,13,17,13,19,14,22,17,16,15,15,15,17,13,9,7,7,8,8,8,9,8,9,11,11,9,7,11,15,15,14,20,31,27,23,19,14,13,14,16,12,20,14,20,15,17,15,13,13,16,13,9,7,7,8,8,8,10,9,9,10,9,9,8,11,14,16,14,20,32,28,25,22,19,15,15,15,11,20,17,15,15,15,12,10,9,16,14,9,8,8,9,9,8,9,10,10,10,9,9,10,12,15,18,15,19,27,23,21,19,24,16,16,13,11,18,19,11,15,14,8,7,7,16,15,9,9,10,11,10,8,8,10,10,10,10,9,12,13,16,20,17,18,21,18,17,16,23,14,13,12,11,15,17,12,15,13,7,7,7,18,16,9,9,11,13,11,8,9,11,11,11,10,10,13,13,16,22,19,18,18,17,15,15,19,12,11,11,13,12,15,13,14,12,7,7,9,18,15,8,9,12,13,11,9,10,13,11,12,11,11,13,13,15,21,21,18,16,18,15,15,13,9,10,11,13,9,12,11,11,11,8,8,10,16,12,8,9,13,12,9,8,12,15,13,13,11,10,12,11,13,17,19,18,16,17,16,15,7,7,11,13,13,7,10,8,8,10,10,8,11,13,9,7,10,13,11,7,8,13,17,15,14,11,9,10,10,10,12,15,17,15,15,16,15,8,8,11,12,13,7,9,8,7,10,11,9,12,14,9,7,9,11,9,7,9,15,18,16,13,10,9,9,10,10,11,12,15,15,16,16,16,11,11,12,11,13,9,9,9,9,12,11,10,13,15,11,7,7,8,7,8,11,16,18,16,12,9,8,8,10,10,11,10,12,15,17,15,17,12,12,12,11,13,10,10,11,12,14,12,12,14,15,11,8,8,8,7,8,11,16,17,15,11,8,7,8,11,10,11,9,11,13,15,14,15,12,13,12,13,14,10,11,13,14,16,14,14,14,14,10,9,8,8,8,7,10,15,15,13,10,6,7,9,11,11,11,10,11,11,11,12,13,14,13,12,15,16,11,12,15,17,18,16,15,14,13,10,10,8,8,8,7,10,13,13,12,10,6,6,9,11,11,12,10,11,10,10,11,11,17,15,13,17,17,13,13,17,19,20,18,16,15,13,10,10,7,7,8,7,9,11,10,11,11,7,5,9,11,10,12,11,11,10,10,10,11,16,14,13,17,17,14,12,17,20,21,18,16,15,12,10,10,8,7,9,9,9,9,10,11,11,9,5,9,11,10,11,11,11,11,11,11,11,11,11,13,15,16,13,11,17,20,20,17,15,16,11,9,10,9,8,11,12,9,9,11,11,11,10,7,9,12,11,11,11,11,12,11,12,11,10,11,12,14,15,13,12,17,19,20,16,16,17,12,9,10,9,9,12,12,9,8,12,12,11,10,8,9,12,11,11,11,11,13,11,11,10,12,12,13,15,14,13,14,17,18,19,15,17,18,12,9,10,10,10,12,11,8,9,14,15,12,8,9,10,13,11,11,12,12,13,12,11,10,13,14,13,17,15,14,16,19,21,24,17,18,17,12,9,9,10,11,12,10,8,8,14,16,12,10,11,11,13,12,12,12,14,13,12,11,11,14,15,14,18,18,16,18,22,28,31,22,19,16,11,10,8,10,12,11,9,7,8,13,14,14,14,13,12,14,14,14,14,16,14,13,13,12,16,17,16,20,19,16,18,23,31,32,23,18,16,12,10,8,10,12,10,9,7,9,13,14,14,16,15,13,16,16,16,16,16,14,14,14,13,20,20,18,21,20,16,17,22,30,27,22,17,16,13,10,8,9,11,9,10,8,11,15,13,14,15,16,15,19,20,19,18,15,13,15,14,13,23,21,20,23,21,17,18,21,27,23,21,16,17,15,10,8,9,10,9,9,9,12,16,14,15,17,17,16,20,22,20,18,15,14,15,14,13],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
