###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1000,1095,1186,1250,1301,1343,1413,1489,1517,1536,1540,1543,1549,1561,1588,1622,1662,1697,1719,1743,1753,1757,1258,1317,1366,1401,1463,1525,1552,1558,1561,1570,1580,1590,1597,1606,1634,1671,1697,1704,1701,1673,1611,1589,1503,1527,1570,1622,1787,1798,1785,1761,1739,1733,1744,1759,1740,1720,1708,1707,1700,1677,1631,1580,1522,1500,1734,1794,1855,1917,2021,2118,2065,1917,1906,1898,1920,1972,1961,1895,1790,1714,1672,1603,1533,1467,1408,1382,2033,2103,2120,2181,2209,2215,2203,2126,2120,2158,2324,2301,2224,2106,1952,1781,1795,2013,1510,1391,1320,1273,2067,2103,2101,2120,2138,2175,2215,2222,2181,2430,2179,2135,1926,1880,1877,1790,1596,1554,1481,1373,1288,1207,1193,1408,1634,1658,1681,1765,2143,2108,2111,1997,2034,1939,1827,1755,1688,1652,1636,1607,1535,1245,1212,1184,1060,1055,1231,1408,1165,1433,1497,1501,1540,1551,1476,1427,1416,1448,1460,1333,1178,1049,930,796,859,638,282,305,636,671,420,380,410,513,788,611,679,676,756,773,817,790,794,883,709,355,179,210,-178,-643,-385,364,0,0,1,228,0,1,1,0,-10,-1,0,119,229,0,0,625,103,1,-1084,-1326,-916,-888,-718,-382,-276,-23,0,255,207,0,143,399,1,25,-51,7,-43,8,-71,-143,-2052,-2064,-1711,-1602,-1358,-970,-697,-269,2527,33,-332,-387,-325,-318,-301,-312,-376,-356,-378,-370,-435,-500,-2903,-2890,-2437,-2273,-1979,-1565,-1187,-766,-467,-700,-944,-984,-912,-831,-763,-746,-761,-752,-775,-789,-846,-904,-3666,-3580,-3069,-2930,-2603,-2159,-1714,-1381,-1332,-1518,-1642,-1642,-1529,-1378,-1261,-1204,-1176,-1158,-1199,-1218,-1276,-1335,-4133,-3983,-3812,-3588,-3554,-3291,-3322,-2890,-3027,-2955,-2922,-2761,-3192,-2769,-1935,-1367,-802,-706,-568,-627,-697,-777,-4147,-4044,-3922,-3803,-3628,-3417,-3424,-3249,-3377,-3052,-3086,-2715,-2630,-2754,-2453,-2190,-1942,-1646,-1271,-1172,-842,-351,-4264,-4227,-4159,-4028,-3784,-3583,-3400,-3428,-3904,-3251,-3153,-3030,-2885,-2871,-2381,-2721,-2669,-2559,-2713,-2834,-2530,-2692,-4395,-4391,-4254,-4014,-3919,-3704,-3597,-3468,-3112,-3260,-3257,-3019,-3248,-2878,-2876,-2824,-2892,-3085,-3309,-3403,-3410,-3297,-4421,-4411,-4241,-4084,-3856,-1596,-2166,-3343,-3247,-3366,-3023,-3386,-3748,-2909,-2867,-2866,-2839,-3198,-3472,-3612,-3745,-3668,-4391,-4403,-4245,-4104,-2623,-2848,-3678,-3683,-3683,-3760,-3786,-3310,-3777,-1620,-2737,-3417,-3429,-3578,-3761,-3999,-4023,-3817,-4315,-4346,-4211,-4229,-3947,-4026,-3772,-3687,-3846,-3875,-3944,-4273,-4180,-4166,-4193,-3772,-3243,-4009,-3782,-3991,-4082,-4043,-4365,-4414,-4221,-4265,-4226,-4053,-4023,-3903,-3991,-4042,-4119,-4221,-4306,-4191,-4095,-4049,-3981,-4094,-4290,-4304,-4212,-4137,-4484,-4455,-4226,-4381,-4425,-4182,-4135,-4162,-4108,-4093,-4096,-4217,-2007,-4302,-4328,-4201,-4237,-4255,-4413,-4469,-4314,-4222,-4451,-4442,-4132,-4391,-4418,-4147,-4174,-4197,-4233,-4098,-4143,-4245,-3198,-4318,-4342,-4287,-4223,-4322,-4488,-4504,-4386,-4251],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
