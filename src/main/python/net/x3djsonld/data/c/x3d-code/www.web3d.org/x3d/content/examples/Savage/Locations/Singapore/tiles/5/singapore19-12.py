###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore19-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3781657983818856,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[33,38,35,32,29,27,28,29,33,37,37,34,32,28,29,30,31,31,32,32,34,35,37,39,40,38,38,40,42,48,51,50,49,49,49,50,37,43,41,37,33,28,29,31,34,38,38,37,34,29,29,31,31,30,30,31,32,33,36,40,41,40,40,42,44,49,51,48,46,49,51,53,31,35,39,41,38,33,33,34,36,39,39,37,34,29,29,31,31,31,31,32,32,32,35,40,42,41,40,42,43,48,51,48,47,49,52,53,27,28,34,40,38,36,34,33,35,39,38,35,33,30,30,31,32,32,32,32,32,32,35,40,43,42,41,42,44,48,51,48,47,50,52,54,28,25,26,28,29,30,27,24,28,33,32,29,29,32,32,32,32,32,32,33,33,34,36,41,44,44,44,45,46,49,51,48,48,50,53,55,28,24,23,23,25,27,23,17,21,27,27,24,27,32,33,33,32,32,32,34,35,36,39,41,44,45,46,47,48,49,50,48,47,50,53,56,30,26,30,35,33,30,23,15,17,20,22,23,27,32,34,34,34,34,34,36,38,40,42,43,45,45,45,46,47,48,48,46,45,49,54,58,31,28,36,44,39,32,25,17,16,16,20,24,27,31,33,36,36,36,36,38,40,43,45,45,45,45,45,46,46,46,46,45,45,49,54,59,31,30,36,42,40,37,31,24,21,19,22,27,29,30,32,36,37,38,38,40,42,45,47,46,46,46,46,46,45,44,44,46,47,51,55,60,33,33,37,41,41,41,36,31,27,23,25,30,31,30,32,35,37,38,39,41,43,46,47,48,48,46,46,45,45,43,43,45,49,53,57,60,39,42,44,46,45,42,39,35,32,28,30,34,35,32,33,34,35,37,38,40,42,44,46,49,49,47,45,44,43,42,42,45,48,53,58,60,45,49,51,51,49,45,43,40,37,33,34,37,37,34,33,34,35,36,37,40,41,43,45,47,49,47,45,42,41,42,42,44,46,52,57,59,51,55,54,54,54,53,51,47,42,36,34,34,36,37,37,35,35,36,38,40,40,40,41,43,46,47,47,42,40,42,42,42,44,48,53,55,54,56,55,54,57,60,57,53,46,38,34,31,34,39,39,36,35,36,37,39,39,38,38,40,43,47,48,43,40,42,42,42,42,46,50,53,51,50,49,49,53,56,54,50,44,36,32,30,33,38,38,35,34,35,36,38,38,37,37,38,41,46,48,45,42,42,41,41,42,46,52,55,47,44,44,44,47,50,49,46,40,34,31,30,32,36,36,33,33,33,34,36,36,36,36,37,39,44,46,45,43,42,40,41,42,48,55,58,48,45,46,48,47,46,44,42,38,34,32,31,32,33,34,33,33,32,32,33,34,34,34,35,37,40,42,42,41,40,39,41,43,51,58,61,48,49,52,54,49,43,41,40,38,36,34,34,33,32,33,35,34,31,30,31,31,33,33,33,34,36,37,38,38,37,37,40,45,53,61,64,47,49,54,58,52,43,41,40,41,40,40,38,37,35,36,37,36,33,31,30,30,33,32,31,31,33,34,37,38,37,37,40,45,54,61,65,46,49,55,59,53,44,42,41,44,46,46,43,41,39,39,39,37,35,32,29,29,32,32,30,29,31,34,37,39,36,36,39,44,52,60,64,50,53,55,56,51,44,42,40,43,46,47,46,44,41,39,39,37,35,32,28,26,28,29,28,29,31,34,38,40,36,35,38,42,50,58,62,55,59,55,51,47,43,40,37,39,43,45,46,45,41,39,38,36,34,31,25,23,25,26,27,29,32,36,40,41,36,34,36,40,47,54,58],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
