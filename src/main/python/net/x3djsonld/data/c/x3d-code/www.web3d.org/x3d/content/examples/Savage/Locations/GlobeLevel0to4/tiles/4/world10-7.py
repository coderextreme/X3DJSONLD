###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world10-7.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(22.458336686061273,-22.54166197283422,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4558,-4296,-4120,-3757,-2811,-213,13,110,183,190,535,428,381,300,335,328,284,270,293,308,281,334,-4686,-4433,-4209,-3791,-2990,-504,30,146,180,242,369,550,383,375,359,323,269,279,299,325,308,328,-4775,-4543,-4299,-3919,-3129,-1260,36,174,227,254,251,387,373,272,347,315,272,317,314,342,318,307,-4847,-4616,-4301,-3863,-3035,-1890,-44,176,273,287,298,337,319,284,336,329,304,243,194,328,332,338,-4878,-4599,-4301,-3851,-3243,-1735,-72,212,340,335,336,278,272,262,309,320,309,271,293,330,317,334,-4878,-4589,-4260,-3804,-3227,-1989,-19,174,235,355,305,249,235,234,316,327,310,279,257,294,304,318,-4910,-4623,-4362,-3732,-3074,-2258,-80,115,228,294,267,220,236,237,362,342,344,347,304,210,275,305,-4939,-4637,-4263,-3671,-2863,-2313,-575,-25,227,357,205,225,254,269,363,316,290,278,320,281,269,293,-4970,-4683,-4439,-3797,-2951,-2891,-836,-84,141,215,284,281,287,303,403,324,325,212,276,285,264,287,-4980,-4763,-4428,-3904,-3052,-3200,-1974,-12,121,165,466,352,331,347,365,386,400,294,227,311,258,262,-5003,-4806,-4504,-3965,-3220,-3438,-3353,-377,99,168,317,460,399,370,409,437,383,396,348,279,286,262,-4983,-4836,-4591,-4053,-3572,-3603,-3583,-1992,-6,112,287,304,496,442,424,385,391,426,405,308,291,250,-4971,-4869,-4623,-4125,-3745,-3689,-3624,-3176,-1550,83,128,208,404,418,356,332,408,456,449,373,287,225,-4991,-4875,-4672,-4335,-3942,-3708,-3611,-2850,-2383,-27,232,195,535,453,427,329,359,369,439,319,296,194,-4900,-4866,-4701,-4501,-4076,-3206,-2470,190,-1945,-48,129,191,500,487,416,428,453,381,374,358,303,213,-5016,-4895,-4740,-4508,-4193,-2613,1611,-3091,-1985,-1149,-24,161,167,387,515,457,447,423,403,348,291,259,-5028,-4902,-4744,-4541,-4254,-2075,-3262,-3621,-2690,-1262,-222,-251,514,361,407,598,523,456,519,512,365,303,-5131,-4939,-4776,-4624,-4415,-4029,-3770,-3625,-3456,-47,-1495,-646,283,1183,399,517,648,558,500,527,304,384,-5172,-4996,-4842,-4677,-4564,-4323,-3756,-3492,-3384,-2499,-2026,-1791,-82,1699,1036,551,541,543,581,487,490,460,-5241,-5010,-4877,-4800,-4624,-4459,-4015,-3452,-2940,-1783,-1915,-2136,-397,218,1409,862,743,730,684,576,580,555,-5261,-5018,-4908,-4801,-4662,-4558,-4322,-3993,-3201,-2733,-2287,-2229,-82,1014,1346,1218,1098,687,806,586,680,591,-5304,-5066,-4912,-4747,-4708,-4581,-4455,-4399,-3849,-3249,-3447,-1788,-40,896,1127,2461,1601,978,1029,658,760,713,-5400,-5081,-4889,-4257,-4638,-4599,-4382,-4409,-4348,-2925,-3311,-2522,-143,224,618,1059,2187,1041,1012,781,757,839,-5358,-5078,-4902,-4147,-4614,-4407,-4349,-4323,-4396,-3111,-3252,-2793,-394,356,530,1099,2737,1150,1010,821,831,805],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
