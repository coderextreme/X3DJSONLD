###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_144',geoSystem=['GDC'],position=(1.4654829221618253,103.71910330716118,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.4654829221618253,103.71910330716118,0.0),range=4101.627,child1Url=['../../tiles/5/singapore28-8.x3d'],child2Url=['../../tiles/5/singapore28-9.x3d'],child3Url=['../../tiles/5/singapore29-8.x3d'],child4Url=['../../tiles/5/singapore29-9.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore14-4.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4567512097838313,103.70474027303216,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[17,12,4,3,3,3,2,1,0,0,0,0,0,0,-3,0,0,4,5,5,5,5,5,5,6,7,8,12,12,10,10,11,11,11,13,12,12,22,10,3,3,3,3,2,1,0,0,0,0,0,-1,-2,0,2,6,6,5,5,5,5,7,7,7,8,11,12,11,10,10,11,11,12,12,12,27,7,3,3,4,2,2,1,0,0,0,0,0,-3,0,0,4,8,7,6,6,7,7,10,9,8,8,10,13,12,10,10,11,11,11,13,13,22,8,3,4,4,2,2,1,0,0,0,0,-1,-2,0,2,7,9,7,7,7,8,8,10,10,9,8,9,11,12,11,10,10,11,11,13,13,16,9,3,5,5,2,1,1,0,0,0,0,-3,0,0,4,8,8,7,7,7,8,8,10,10,9,9,8,10,13,12,10,10,11,11,13,14,12,8,6,6,5,2,1,1,0,0,0,-1,-2,0,2,7,9,7,7,7,8,8,9,9,10,10,9,8,9,11,12,11,10,10,11,13,14,8,8,8,9,5,1,0,0,1,0,0,-3,0,0,4,8,8,7,7,7,8,8,8,9,10,10,9,9,9,10,13,12,10,10,11,13,15,7,7,7,7,5,1,0,0,0,0,-1,-2,0,2,7,9,7,7,7,8,8,9,8,8,9,10,10,9,9,9,11,12,11,10,10,12,13,6,5,5,6,4,1,-1,-2,0,0,-2,0,0,4,8,8,7,7,7,8,8,9,8,8,9,10,10,9,9,9,10,13,12,10,10,11,12,6,6,6,6,4,0,0,-1,0,-1,-1,0,2,7,9,7,7,7,8,8,9,9,9,8,8,9,10,10,9,8,9,11,12,11,10,11,12,7,7,8,8,4,0,0,0,0,-2,0,0,4,8,8,7,7,7,8,8,9,9,9,8,8,9,10,10,9,8,9,10,13,12,11,12,13,9,8,8,8,6,2,0,1,0,-1,0,2,7,9,7,7,7,8,8,9,9,9,10,9,8,8,9,10,10,9,8,9,11,13,12,14,17,10,8,9,9,8,6,2,1,1,0,0,4,8,8,7,7,7,8,8,9,9,9,11,10,8,8,9,10,10,9,8,8,10,13,14,18,21,11,9,9,8,8,7,4,3,3,2,3,7,9,7,7,7,8,8,9,9,9,9,11,10,9,8,8,9,10,10,9,8,9,12,16,22,25,13,10,8,7,7,6,5,6,7,5,7,8,8,7,7,7,8,8,9,9,9,9,11,11,10,8,8,9,10,10,9,9,9,10,19,26,27,14,12,9,7,6,6,6,7,8,7,8,9,8,7,7,8,8,9,9,9,9,9,11,11,10,9,8,8,9,10,10,10,9,12,22,29,29,14,13,11,8,6,7,6,6,8,8,8,9,8,6,7,8,8,9,9,9,9,8,10,11,11,10,8,8,8,10,10,10,11,16,26,31,30,14,15,13,9,7,7,6,6,7,8,8,8,8,7,8,9,9,9,9,9,8,6,9,11,11,10,9,8,8,9,10,10,13,18,28,31,31,15,16,15,11,7,7,7,6,6,7,7,7,8,8,10,9,9,9,9,9,8,3,6,10,11,11,10,8,8,8,9,11,15,20,28,31,30,17,17,16,13,9,7,7,6,6,6,7,6,8,9,10,9,9,9,9,9,8,1,4,8,11,11,10,9,8,8,9,12,17,21,27,29,28,19,18,17,15,11,7,7,6,5,6,7,6,7,8,10,9,9,9,9,9,8,1,1,6,10,11,11,10,8,8,9,15,20,23,25,26,24,20,19,17,17,12,7,7,6,5,7,7,7,6,7,10,9,9,9,9,9,8,1,0,4,8,11,11,10,9,8,11,19,23,23,24,23,21,21,20,18,17,12,8,7,7,6,8,8,7,6,8,10,9,9,9,9,9,8,3,0,1,6,10,11,11,10,10,15,24,26,24,23,20,17,22,20,19,16,12,8,8,8,7,9,8,7,7,8,10,9,9,9,9,9,8,4,1,0,4,8,11,12,11,13,19,28,28,25,21,18,16,21,19,18,15,11,9,8,8,9,10,10,11,9,10,10,9,9,9,9,9,8,7,2,0,1,6,9,11,13,17,24,32,32,25,20,18,18,20,18,17,14,11,9,8,9,11,10,10,13,11,11,11,9,9,9,9,9,9,9,4,1,0,4,7,10,14,20,29,34,33,26,20,20,20,18,16,14,11,10,10,9,11,12,11,9,13,12,11,12,10,9,9,9,9,8,9,7,3,0,1,5,8,15,23,31,36,33,25,22,24,24,16,14,12,9,9,9,11,13,14,11,9,12,12,12,12,10,9,9,9,9,8,9,9,4,1,0,3,6,15,26,34,37,31,25,25,27,28,15,12,11,9,9,10,12,13,14,12,11,12,13,13,12,10,10,9,9,8,8,8,9,7,3,0,2,7,17,30,38,38,31,27,30,32,30,14,11,11,10,9,10,13,13,14,13,12,13,13,12,11,10,10,9,9,8,7,8,9,9,5,2,1,8,19,33,40,38,31,29,34,36,33,14,13,12,10,11,11,11,10,12,13,12,13,13,12,11,10,10,10,9,8,7,7,8,9,7,4,3,10,20,32,37,34,30,30,37,37,34,14,14,13,11,12,13,9,8,10,14,13,13,12,11,11,10,10,10,9,8,7,7,8,9,9,6,5,11,21,31,33,30,29,31,39,39,34,15,15,12,10,13,12,8,8,9,13,14,13,12,10,10,10,11,10,10,9,7,7,7,8,9,8,7,12,22,30,30,28,30,35,42,40,35,14,14,12,10,13,11,7,7,9,12,13,12,11,10,9,11,13,10,10,9,7,7,7,8,9,9,10,13,22,29,28,27,31,39,44,40,35,14,14,11,10,13,12,8,7,8,10,11,11,10,9,10,12,12,11,10,7,6,7,7,7,8,9,11,14,22,28,28,27,33,42,45,39,33,15,14,11,10,13,13,8,6,7,8,9,9,10,9,11,13,12,11,10,6,5,6,7,7,8,8,10,15,21,28,27,27,36,44,46,37,30,15,13,11,10,12,11,9,7,7,8,9,9,10,10,12,12,11,11,10,4,4,5,7,7,7,8,11,18,24,28,27,30,36,44,45,36,29,13,12,10,10,9,9,9,8,8,8,9,8,9,12,13,11,11,11,10,2,2,4,6,7,7,8,12,22,27,28,28,33,37,43,44,35,28,12,12,12,10,10,10,10,9,8,8,9,8,10,12,11,11,11,10,9,3,2,3,5,7,7,9,15,25,29,29,30,35,41,46,44,35,29,10,13,13,11,11,11,12,11,9,8,10,9,10,10,9,10,10,10,8,4,2,2,4,7,8,10,18,28,31,29,31,38,46,49,45,35,30,11,13,13,11,10,10,10,10,9,8,10,10,10,10,9,9,10,9,8,6,3,2,3,6,9,11,19,29,32,31,34,40,48,49,44,34,30,12,15,14,10,9,9,8,8,8,8,11,13,11,9,9,9,9,9,8,8,5,3,2,6,9,12,20,28,31,33,36,42,49,49,42,33,29,12,13,10,6,6,6,6,7,8,6,10,12,10,9,9,9,9,9,8,8,6,4,3,4,8,11,21,29,32,35,38,42,48,48,42,34,30,11,10,4,0,3,3,4,8,8,5,9,11,9,9,9,9,9,9,8,8,8,5,4,3,7,11,21,30,35,38,39,41,47,48,42,34,31],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
