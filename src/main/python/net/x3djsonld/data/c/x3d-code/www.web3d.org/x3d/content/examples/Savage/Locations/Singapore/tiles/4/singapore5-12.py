###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_512',geoSystem=['GDC'],position=(1.3083120993579338,103.94891185322548,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.3083120993579338,103.94891185322548,0.0),range=4101.627,child1Url=['../../tiles/5/singapore10-24.x3d'],child2Url=['../../tiles/5/singapore10-25.x3d'],child3Url=['../../tiles/5/singapore11-24.x3d'],child4Url=['../../tiles/5/singapore11-25.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore5-12.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.2995803869799398,103.93454881909646,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=45,zSpacing=3.96896E-4,height=[0,1,2,3,3,3,3,3,5,9,10,10,10,10,10,10,9,8,7,0,0,1,2,3,3,3,2,1,0,1,2,3,3,2,1,-1,-4,2,2,3,3,3,3,3,3,5,9,10,10,10,10,10,10,10,9,8,0,0,1,3,3,3,2,2,1,0,1,2,3,2,1,0,-2,-4,4,3,3,3,3,3,3,3,5,8,10,10,10,10,10,10,10,9,8,0,1,2,3,3,3,2,2,1,0,1,2,2,1,1,0,-1,-2,8,9,9,10,7,3,3,4,5,7,10,10,10,10,10,10,10,10,8,2,1,3,3,3,2,2,1,1,0,1,1,1,1,0,0,0,1,13,16,17,19,13,4,2,4,5,8,10,10,10,10,10,10,10,10,9,3,2,3,3,3,2,2,1,1,0,1,1,1,1,0,0,3,6,15,19,20,20,11,3,5,13,16,15,14,13,12,12,12,10,10,10,9,4,3,3,3,2,2,1,1,0,0,0,1,1,0,0,1,8,13,15,19,21,17,7,2,9,25,31,26,21,18,16,16,16,12,10,10,9,5,3,3,3,2,2,1,1,0,0,0,1,1,0,0,4,14,20,15,19,19,12,4,4,17,33,36,30,23,19,18,18,17,15,16,15,11,7,4,3,2,2,1,1,0,0,0,0,1,0,0,2,9,19,22,16,20,16,7,2,9,27,39,37,30,23,19,18,17,17,20,24,23,14,9,6,3,2,2,1,1,0,0,0,0,1,0,0,5,15,22,23,16,19,12,4,3,14,33,42,38,30,23,19,18,18,19,24,27,24,16,13,8,5,4,5,4,4,4,2,0,1,0,0,2,10,20,21,19,17,17,8,2,6,20,37,44,39,31,23,19,17,17,21,27,27,23,18,17,11,9,9,9,9,9,9,7,2,1,0,0,6,16,23,17,11,18,13,5,3,8,23,41,46,39,30,23,19,17,19,24,27,25,21,18,17,12,11,11,11,13,15,15,12,6,3,2,2,11,20,21,12,6,17,9,3,4,10,24,43,49,40,30,23,18,17,21,27,27,22,19,18,14,11,11,11,12,17,21,21,19,12,7,5,7,16,23,17,7,3,15,7,3,6,12,24,43,51,40,29,21,17,18,24,27,25,21,18,17,12,11,11,12,13,20,25,25,22,16,10,8,9,17,21,12,3,1,13,5,4,9,14,22,42,53,40,30,18,16,21,26,27,23,19,18,14,11,11,11,12,16,23,26,25,23,18,13,10,11,15,15,7,1,1,11,6,5,11,15,19,35,51,41,26,16,18,23,27,25,21,18,17,12,11,11,12,13,19,25,27,26,23,19,14,12,12,13,11,4,1,1,8,7,7,12,15,16,26,45,44,20,15,20,26,27,23,19,18,14,11,11,11,12,15,21,25,28,27,23,19,14,12,12,12,9,3,1,1,8,8,8,13,15,14,21,37,39,15,16,23,27,25,21,18,17,12,11,11,12,13,17,23,26,28,28,24,19,14,12,12,11,7,2,1,1,10,9,9,13,14,13,18,28,26,11,19,26,26,23,19,18,14,11,11,11,12,14,19,23,27,29,28,24,19,14,12,12,11,8,3,0,0,11,10,10,13,13,13,17,21,18,11,23,27,25,21,18,17,12,11,11,12,12,16,20,23,27,30,29,25,19,14,12,12,10,8,4,2,2,11,9,10,12,14,16,17,18,15,15,27,26,22,20,18,15,11,11,11,12,14,17,20,23,28,31,30,25,18,14,12,11,10,8,6,5,5,11,9,9,12,13,18,19,17,15,18,27,24,20,19,17,13,11,11,12,12,15,18,21,23,28,32,31,25,18,14,12,10,9,8,9,10,11,12,9,8,11,13,18,20,17,16,18,23,20,19,18,16,13,10,11,12,12,16,19,21,22,28,33,33,25,18,14,11,10,8,8,11,17,18,13,9,9,11,13,17,20,18,17,18,19,17,19,18,16,12,10,12,12,13,16,19,21,22,27,36,34,25,17,13,11,9,8,8,14,21,23,14,11,9,11,13,16,18,18,18,19,18,16,19,18,17,10,10,12,11,13,17,20,21,22,25,39,35,26,16,12,10,8,8,10,18,23,25,14,12,11,13,13,14,15,16,18,19,17,16,18,18,16,9,10,11,11,14,17,19,21,23,23,40,36,26,15,11,9,8,8,13,20,24,26,15,13,13,15,12,9,10,12,15,18,16,17,17,16,13,8,10,11,10,14,19,19,22,22,21,34,39,23,13,10,8,8,9,15,22,25,27,15,14,14,16,13,7,6,8,13,17,15,17,16,14,11,9,11,11,10,13,18,18,22,21,19,28,39,19,11,10,8,8,11,17,23,26,27,14,14,16,18,15,9,5,5,13,18,16,15,15,13,10,11,13,11,9,11,15,14,18,17,16,25,33,16,10,9,8,8,12,18,23,27,28,13,14,17,19,18,15,8,4,13,20,17,15,14,12,11,13,14,12,9,10,12,11,15,14,14,22,25,14,10,9,8,9,13,18,24,28,28,12,14,16,17,23,26,15,6,14,21,19,16,15,15,14,14,15,12,11,11,11,10,12,13,13,17,18,12,10,8,9,10,13,18,25,28,29,11,13,14,15,24,34,22,8,15,22,21,18,17,17,15,15,15,12,13,13,12,10,12,13,12,13,13,11,11,9,9,11,14,18,25,29,30,12,13,13,13,19,27,20,10,15,21,23,20,18,16,13,13,13,12,15,16,14,12,12,14,13,12,12,12,12,9,10,12,14,17,24,30,32,12,12,11,11,13,17,15,12,16,20,23,21,18,15,10,11,12,12,17,18,16,14,14,15,15,12,11,13,13,11,10,13,14,15,22,30,32,12,12,10,11,11,12,12,11,15,18,23,21,18,14,11,9,10,13,17,18,17,16,16,16,17,13,11,13,14,12,11,13,13,13,19,24,24,12,11,10,11,10,10,11,10,13,15,21,20,18,14,12,8,9,13,17,18,17,17,17,17,18,15,12,14,14,13,11,13,12,10,16,17,13,12,11,11,11,10,10,10,11,12,14,18,17,17,14,13,9,9,12,16,18,18,18,19,17,18,13,12,14,14,13,12,12,12,9,12,12,9,13,12,13,13,11,10,11,12,14,13,14,13,15,14,13,11,10,12,15,18,18,19,19,17,18,11,11,14,13,12,12,11,11,9,9,9,9,13,12,14,14,11,10,11,14,18,16,14,12,12,12,12,12,10,11,14,17,18,17,18,16,16,11,11,14,12,10,11,11,11,9,8,9,9,14,12,16,15,12,10,12,17,23,21,15,11,10,9,9,12,11,10,12,15,17,16,17,14,14,11,11,13,11,9,11,10,10,9,7,9,10,12,11,16,17,13,11,13,20,26,23,17,13,12,8,7,11,12,10,10,14,16,15,15,13,13,11,10,13,12,10,10,9,10,8,7,9,10,9,11,16,18,14,12,15,22,27,23,18,17,16,7,6,10,12,9,9,12,15,14,12,12,12,11,10,13,13,12,9,8,9,9,8,9,9,7,10,16,18,15,13,17,23,28,25,22,21,19,8,6,10,12,10,11,12,13,12,11,10,10,10,9,13,14,13,9,8,8,7,8,9,9,5,8,14,18,17,15,18,24,29,28,28,27,21,10,8,11,12,11,14,13,12,10,9,9,8,7,9,12,15,13,9,9,7,5,7,9,10,6,8,13,18,19,17,20,25,29,29,29,28,22,11,9,11,11,12,15,15,13,10,10,9,7,8,9,11,14,12,10,8,6,4,6,8,8],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
