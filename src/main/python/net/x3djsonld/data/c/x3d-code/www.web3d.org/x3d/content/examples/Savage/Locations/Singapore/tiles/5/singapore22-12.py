###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore22-12.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.76219240954823,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=22,zSpacing=4.1579583E-4,height=[29,26,24,23,27,31,33,34,36,37,39,40,44,49,53,56,56,53,46,34,29,30,39,54,64,64,62,55,50,48,48,48,50,52,54,53,27,24,21,19,22,26,30,34,36,37,39,39,43,48,52,56,59,61,59,50,45,41,44,54,60,60,60,57,54,51,48,47,47,48,50,52,25,22,19,17,20,24,29,34,36,38,39,39,42,47,51,54,59,65,66,61,55,49,47,53,56,56,57,57,56,51,47,45,43,44,45,49,24,21,20,19,21,24,30,36,39,41,42,42,43,47,50,53,57,62,64,62,59,53,50,52,54,53,53,55,55,49,44,41,39,39,40,44,24,22,21,21,22,24,30,36,40,43,44,44,45,47,49,52,55,59,61,62,60,55,51,51,51,50,50,53,53,45,39,37,35,35,36,39,26,24,24,23,23,23,27,33,38,43,44,45,46,48,50,53,53,55,57,59,58,55,51,49,48,48,48,50,48,40,34,33,32,32,33,36,26,26,25,25,24,22,26,32,38,43,45,45,46,48,50,52,52,52,53,56,56,54,50,47,45,46,46,45,43,36,30,29,29,30,31,32,27,26,26,26,25,24,29,36,42,47,46,44,44,46,47,49,49,49,51,55,55,52,48,44,42,43,43,40,37,32,28,27,27,27,28,30,26,27,27,27,26,25,31,38,43,48,46,43,42,44,45,45,45,46,48,52,53,50,45,41,38,39,38,35,33,29,26,25,25,25,26,29,25,27,27,27,26,26,30,35,40,44,43,40,40,40,40,40,40,40,42,46,47,46,42,39,36,35,33,31,29,26,24,24,24,24,25,28,25,27,27,27,26,26,28,32,35,38,38,37,37,37,36,35,35,35,37,40,41,40,39,37,34,31,28,27,25,24,23,23,23,23,23,27,26,28,26,24,24,25,27,29,30,30,31,32,32,33,33,33,33,33,34,34,34,35,34,34,32,30,28,26,25,24,23,22,22,21,21,25,25,28,25,23,24,25,26,27,26,25,27,28,30,31,32,33,33,33,32,30,30,31,31,32,32,30,29,28,27,26,25,23,22,21,20,23,23,25,24,24,26,28,29,29,29,28,29,31,33,34,36,38,39,38,36,34,33,34,34,33,33,34,36,37,37,35,32,27,23,21,20,21,21,23,24,26,28,31,32,33,33,32,33,35,37,39,41,44,44,43,41,38,36,37,36,35,34,37,40,44,46,41,37,30,24,21,20,20,20,23,28,33,36,40,42,43,41,39,40,41,44,47,49,50,49,46,44,41,39,40,39,36,34,35,37,42,44,41,37,30,23,21,19,20,20,25,32,40,45,49,51,51,48,45,45,47,50,53,55,55,53,49,46,44,42,43,40,36,33,32,34,39,42,40,36,30,23,20,19,20,23,29,36,44,49,55,56,56,54,50,50,52,55,57,57,55,52,48,45,45,44,43,40,35,32,31,31,34,34,33,31,26,21,20,20,20,25,33,40,46,52,58,60,60,58,55,55,57,58,60,59,55,51,46,44,45,44,43,40,35,32,30,29,28,27,27,26,22,20,21,21,21,24,30,36,42,47,52,55,57,56,55,56,57,57,57,55,51,48,44,43,43,43,41,38,34,31,31,29,26,24,23,23,20,20,21,22,23,23,27,31,36,40,44,48,53,54,54,55,56,55,53,51,47,44,42,41,42,41,40,37,33,31,31,30,25,22,21,19,19,20,22,24,25,23,25,29,32,36,40,45,49,51,52,53,53,52,50,47,44,40,36,36,38,38,36,33,30,27,28,27,23,21,19,19,19,20,22,25,25],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
