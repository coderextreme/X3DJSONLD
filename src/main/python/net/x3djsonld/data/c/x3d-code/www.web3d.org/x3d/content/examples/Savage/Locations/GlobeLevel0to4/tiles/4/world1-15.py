###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world1-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-78.79166633142387,157.4583433915838,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1568,1405,1095,704,1504,631,204,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1871,1846,1706,1278,1005,484,1514,1046,1501,99,-4,0,0,0,0,1,0,0,0,0,0,1,2194,2290,2312,2153,2110,1422,1559,1337,-169,14,0,0,1,0,0,1,1,0,0,1,1,1,2339,2299,2315,2423,2197,821,365,-60,-456,-637,1369,827,-229,1,0,0,0,1,11,-159,-423,-442,2312,2195,2141,1967,1629,1036,-202,-201,-497,-807,-49,-770,-872,-792,-713,-394,-548,-405,-396,-399,-576,-594,2143,2093,1972,1725,1589,1068,32,-447,-777,-649,-599,-600,-723,-717,-700,-584,-600,-447,-398,-399,-385,-353,2040,2049,1825,1592,1289,831,1,-837,-807,-581,-601,-400,-589,-603,-599,-576,-483,-507,-399,-400,-502,-505,1749,1587,1537,1245,802,451,-25,-777,-8,-494,-452,-414,-388,-516,-593,-519,-399,-379,-396,-399,-498,-508,1862,1781,1637,1359,1224,1091,-5,-251,-1005,-1045,-614,-395,-374,-389,-482,-582,-505,-395,-394,-398,-392,-430,2005,2003,1841,1800,1653,1513,868,1368,754,-402,-802,-814,-621,-343,-390,-506,-496,-537,-443,-375,-393,-397,2100,2100,2078,1981,1905,1645,3215,1751,447,-4,-399,-392,-589,-607,-560,-386,-393,-553,-602,-575,-410,-399,2231,2244,2232,2144,2201,2588,2067,2153,411,1045,1036,1,-327,-393,-599,-507,-394,-392,-457,-533,-455,-397,2292,2308,2340,2282,2124,1785,1775,2042,2322,1198,2299,461,1067,-330,-523,-515,-401,-394,-384,-931,-797,-1287,2262,2296,2327,2141,1882,1401,1348,1833,2374,2472,2056,1071,1956,32,-395,-533,-524,-515,-519,-1464,-1878,-2202,2191,2205,2197,2025,1770,1188,933,1502,1573,1796,1313,2194,2073,-1,-343,-1077,-1790,-1883,-1878,-1201,-1841,-2154,2010,2077,2176,2171,1078,555,338,1827,946,1576,1764,1485,142,596,-1205,-1900,-2132,-1,-2111,-1181,-1930,-2182,1837,1898,2026,1810,844,144,1502,81,1634,1149,952,-393,-412,-1390,-2310,-2242,-2116,-2399,-2384,-2430,-2716,-2550,1683,1632,1738,1605,619,-51,31,-173,-4,-143,-52,-696,-1836,-2512,-2344,-2183,-2089,-2899,-2913,-2989,-3497,-3301,1426,1288,1338,948,-8,-532,-3,-4,-499,-762,-2034,-2359,-2507,-2576,-2102,-2611,-2553,-2990,-3276,-3411,-3547,-3678,1031,488,605,-60,-170,-715,-1638,-1885,-1920,-2136,-2286,-2330,-2728,-2756,-2700,-1871,-2927,-3593,-3585,-3513,-3443,-3716,-114,-76,-519,-1085,-1181,-1797,-2229,-2411,-2364,-2258,-2365,-2629,-2540,-2974,-3188,-2903,-3357,-3243,-3641,-3573,-3523,-3593,-366,-331,-1105,-1628,-2008,-2164,-2412,-2665,-2608,-2626,-2359,-2564,-3245,-3090,-2843,-3288,-2822,-3480,-3404,-3298,-3541,-3444,-592,-580,-2076,-2201,-2365,-2448,-2546,-2301,-2658,-2397,-1716,-2249,-1285,-3094,-3103,-2643,-3180,-3444,-3478,-3418,-3499,-2907,-563,-483,-2143,-2253,-2452,-2503,-2573,-2422,-2318,-2278,-1266,-1787,-2196,-3133,-3194,-2393,-2636,-3444,-3426,-3459,-3444,-2648],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
