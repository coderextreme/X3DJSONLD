###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world2-15.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,157.4583433915838,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-563,-483,-2143,-2253,-2452,-2503,-2573,-2422,-2318,-2278,-1266,-1787,-2196,-3133,-3194,-2393,-2636,-3444,-3426,-3459,-3444,-2648,-556,-2235,-2542,-2533,-2573,-2608,-2481,-1770,-587,-2342,-2069,-2299,-2767,-3259,-2670,-3383,-3127,-3431,-3609,-3624,-3780,-3595,-1576,-2619,-2796,-2621,-2701,-2843,-2092,-1956,-2407,-2445,-2746,-2459,-2814,-3449,-3380,-3143,-2974,-3343,-3265,-3582,-3463,-3874,-2611,-2780,-2853,-2723,-2792,-2550,-1741,-2525,-2603,-2973,-2948,-2916,-2914,-3139,-3210,-3290,-3272,-3380,-3548,-3637,-3640,-3641,-2917,-2965,-2910,-2915,-2818,-2930,-2742,-2681,-2863,-3118,-3059,-2917,-3139,-3066,-3126,-3068,-3415,-3400,-3559,-3497,-3733,-3358,-3105,-3088,-3060,-2760,-2747,-2954,-2808,-2992,-3012,-3154,-3203,-3284,-2922,-3026,-3401,-3294,-3400,-3326,-2971,-3471,-3244,-3014,-3261,-2730,-3405,-2911,-2863,-2983,-3053,-2961,-3010,-3133,-3259,-3092,-2846,-3083,-2211,-3087,-2941,-2734,-2619,-3008,-3058,-2702,-3139,-3210,-2866,-2535,-2720,-2824,-2970,-3113,-3005,-2963,-3081,-2936,-3161,-3052,-2734,-2307,-2397,-2529,-3079,-2942,-2931,-2852,-3074,-2707,-2645,-2752,-2733,-2784,-2885,-2855,-2927,-3058,-3095,-2937,-2107,-2674,-2532,-2128,-2213,-2599,-3304,-2971,-3361,-3000,-3251,-1975,-2440,-2556,-2480,-2748,-2877,-2911,-3175,-3034,-2999,-2852,-2372,-1783,-1727,-2260,-3829,-2293,-4097,-3697,-3504,-3423,-1966,-2212,-2258,-2515,-2666,-2791,-2578,-3140,-2748,-2471,-2744,-2865,-2306,-3041,-2479,-4027,-3333,-3435,-3604,-3754,-3686,-3783,-2368,-2268,-1969,-2374,-2635,-2804,-2802,-2590,-2117,-2143,-2220,-2219,-2226,-3634,-4012,-4525,-4162,-3832,-4449,-3888,-3978,-4005,-2664,-2520,-2429,-2283,-2329,-2997,-2686,-2693,-1772,-2915,-2468,-3136,-4065,-3892,-4699,-4366,-3806,-3997,-3849,-4237,-4184,-4037,-2827,-2588,-2538,-2229,-2072,-2589,-2717,-3006,-2730,-3409,-3594,-4091,-4202,-3881,-4695,-4569,-4227,-3210,-4082,-4077,-3931,-4137,-2983,-2723,-2482,-2756,-2817,-2972,-2890,-3432,-3364,-3749,-4726,-4285,-4216,-4597,-4912,-4639,-4222,-3472,-4394,-4304,-4892,-4146,-2981,-2835,-3129,-2440,-3501,-3454,-3668,-4281,-3951,-4245,-4459,-4459,-4615,-4771,-4789,-4760,-4855,-4615,-4923,-4794,-4728,-5464,-2974,-2704,-2370,-3864,-3785,-3959,-4126,-4390,-4003,-4349,-4651,-4991,-4964,-4880,-4889,-4920,-4772,-4785,-4462,-4578,-4714,-5680,-2939,-2965,-4096,-3168,-3971,-3770,-4112,-4270,-4429,-4602,-4904,-4995,-5133,-5165,-5207,-4571,-5051,-5133,-5208,-4770,-4572,-4436,-2934,-3028,-3424,-3750,-4585,-4118,-4562,-4602,-4740,-4813,-5096,-5076,-5166,-5184,-5186,-5511,-5208,-5123,-4874,-4973,-5138,-4792,-3249,-4266,-3430,-3719,-4020,-3831,-4460,-5058,-4915,-5129,-5211,-5093,-5334,-5207,-5335,-5293,-5296,-5040,-4964,-4959,-5046,-5009,-3312,-4693,-2657,-3203,-3752,-4739,-4582,-5199,-5179,-5339,-5387,-5229,-5135,-5371,-5149,-5314,-5366,-5358,-5113,-5130,-4875,-5000,-3359,-5575,-2251,-4003,-3552,-3585,-4367,-4149,-5653,-5079,-4994,-5290,-5176,-5410,-5296,-5395,-5373,-5333,-5244,-5110,-4991,-5146,-3732,-5461,-1949,-3638,-4155,-3843,-4866,-4707,-4912,-5155,-5311,-5197,-5271,-5332,-5293,-5356,-5463,-5237,-5193,-4970,-5090,-5193,-3728,-5054,-1249,-3901,-3968,-3759,-4946,-4730,-4820,-5092,-5228,-5234,-5189,-5359,-5257,-5383,-5377,-5300,-5173,-4979,-5062,-5049],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
