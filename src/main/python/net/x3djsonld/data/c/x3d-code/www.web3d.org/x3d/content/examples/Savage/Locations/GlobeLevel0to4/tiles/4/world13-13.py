###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world13-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(56.20833769188965,112.4583420504793,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[1657,1518,1055,1009,1058,993,955,851,930,553,572,381,641,473,408,524,381,503,422,227,143,420,1149,1703,1140,1129,979,726,1212,753,638,856,792,618,757,806,519,333,365,439,816,861,789,626,1201,1158,1203,1406,911,840,814,939,804,610,685,738,693,721,494,533,627,787,878,1426,464,1040,1459,1509,1176,1624,1019,894,955,1054,919,669,548,577,845,733,784,742,957,1504,1542,950,1343,860,472,1173,1948,1302,752,1330,1568,1107,1109,1136,539,1126,1399,782,922,867,867,935,900,1076,1086,1111,1605,1362,1495,957,497,1554,883,1453,1239,611,885,1192,953,831,991,1241,997,816,871,1255,800,720,1024,1179,1263,1282,1531,1134,1776,862,800,1313,815,807,674,861,1292,1754,1155,1335,945,469,823,601,1004,374,867,1019,688,1214,1133,1131,1079,1119,1143,856,745,1031,692,1070,970,378,1010,1162,756,1021,682,1026,365,604,869,565,651,1018,798,728,823,708,783,941,1100,977,1361,1086,738,913,509,615,387,633,1041,731,832,1186,517,537,358,459,541,877,547,810,685,537,549,300,668,629,378,337,236,337,1104,1214,963,516,767,417,506,350,482,722,435,643,460,524,519,318,244,292,463,512,269,252,525,697,859,575,397,270,414,526,588,542,463,524,343,426,499,436,360,356,169,309,364,515,436,390,631,256,434,366,412,239,568,535,494,569,558,535,401,296,244,265,292,245,380,463,463,277,373,190,351,208,176,368,285,100,403,535,441,481,332,374,285,296,380,255,429,426,376,385,408,314,355,301,311,325,400,358,358,405,238,308,322,237,295,271,359,345,377,326,386,307,342,294,175,277,264,362,398,322,327,279,295,343,259,149,241,269,140,277,350,394,355,320,331,177,161,198,294,348,335,286,269,261,249,329,279,99,177,250,227,189,330,333,346,316,159,235,148,287,285,298,311,285,297,295,249,240,209,59,159,172,225,179,235,312,346,248,263,135,144,214,189,186,194,237,217,207,171,100,143,85,161,172,97,112,318,383,474,398,257,151,182,91,111,112,173,171,148,147,67,82,91,101,161,193,235,280,463,411,426,364,265,159,197,148,206,187,171,124,88,131,50,144,218,594,705,937,588,1522,495,367,327,297,261,201,245,163,122,169,164,155,156,25,166,604,983,941,1003,930,1335,1348,576,501,452,340,296,219,204,153,163,180,216,119,25,60,287,561,1521,1295,730,805,666,791,385,495,452,287,272,156,209,172,168,197,230,126,25,170,444,663,1130,1367,957,671,811,1190],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
