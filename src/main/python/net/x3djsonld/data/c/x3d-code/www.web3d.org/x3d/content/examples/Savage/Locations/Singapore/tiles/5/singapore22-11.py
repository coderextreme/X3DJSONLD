###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore22-11.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4043609355158675,103.74782937541922,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=22,zSpacing=4.1579583E-4,height=[20,22,24,24,22,19,15,14,13,12,11,12,12,12,11,10,9,9,10,10,11,13,14,16,17,19,22,25,29,32,36,38,39,38,36,33,29,16,17,17,16,15,14,12,12,11,11,11,12,13,12,12,11,9,9,10,10,11,13,15,17,18,20,24,28,32,35,35,36,35,35,33,31,27,14,14,14,13,13,12,12,11,11,11,11,11,12,13,12,11,9,9,9,10,12,14,16,18,19,21,25,29,32,35,34,34,33,32,30,29,25,15,16,16,15,14,13,13,13,13,12,11,11,11,12,12,11,10,9,9,11,14,17,18,19,19,21,24,27,30,33,33,33,32,31,29,28,24,14,15,16,15,14,13,13,13,13,12,11,11,11,12,13,12,10,9,9,11,16,17,17,18,19,21,23,26,29,32,33,34,33,31,29,27,24,13,13,13,13,12,12,13,12,12,11,11,11,11,12,14,13,11,10,11,12,15,16,16,17,19,21,24,26,29,32,34,37,35,33,29,27,26,13,12,12,11,11,12,12,12,12,11,11,12,12,13,13,13,11,10,10,11,13,14,15,18,20,22,24,27,29,31,35,38,36,34,30,27,26,12,12,12,12,12,12,12,11,11,12,13,13,12,12,12,11,10,10,9,10,11,14,18,21,23,25,26,27,28,29,33,36,34,33,29,27,27,12,11,11,11,12,12,12,11,11,11,12,13,12,12,11,11,10,9,9,9,10,13,19,24,27,28,29,28,27,27,30,33,31,30,28,26,26,12,11,10,11,12,12,12,11,11,11,11,11,12,12,11,11,10,9,9,9,10,13,19,24,28,31,32,32,27,24,26,25,24,23,24,24,25,12,11,10,11,12,12,12,11,11,11,11,11,12,12,11,11,10,9,8,9,10,13,18,23,29,32,34,33,28,23,21,20,19,19,21,23,25,13,13,13,13,13,12,12,12,12,12,12,12,12,12,11,10,10,9,8,8,11,14,19,24,28,30,31,31,27,23,21,19,19,19,21,23,26,13,13,14,13,12,12,12,12,12,12,12,12,12,12,11,11,10,9,8,8,11,15,20,24,27,28,29,28,26,23,21,19,18,19,21,23,25,12,13,13,12,12,11,11,11,12,12,12,12,12,12,12,12,11,9,8,8,12,16,20,24,26,27,27,26,23,20,19,18,18,18,19,20,23,11,12,13,12,11,11,10,10,11,11,11,11,11,11,12,12,11,10,8,9,13,17,21,23,24,25,25,23,21,18,18,18,18,18,18,19,21,12,12,13,12,11,10,9,9,10,10,11,10,10,10,10,10,10,9,9,9,13,16,18,20,20,21,21,20,18,16,18,19,19,18,17,17,20,12,12,13,12,11,9,9,9,10,10,10,10,9,9,9,9,9,9,9,10,12,14,16,17,17,16,16,16,15,15,18,20,19,18,17,16,20,11,11,11,11,11,10,9,10,10,10,10,9,9,8,8,8,8,8,8,9,11,12,13,14,14,14,14,14,13,14,18,20,18,17,17,17,23,10,10,10,11,11,10,9,10,10,10,9,9,8,8,8,8,8,8,8,9,10,11,11,11,12,12,13,13,12,12,17,21,19,16,17,18,25,10,9,9,9,10,9,9,9,10,10,9,8,7,7,8,8,8,8,9,10,10,10,10,11,12,13,13,14,13,14,18,22,21,19,19,18,24,10,9,9,9,9,9,9,9,9,10,9,8,7,7,8,9,8,9,10,10,11,11,10,11,12,13,14,15,15,17,21,23,23,23,21,19,23,9,10,10,10,9,9,8,8,9,9,10,10,9,9,10,9,8,8,9,10,11,12,12,13,14,15,16,17,20,22,26,27,27,27,24,21,23],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
