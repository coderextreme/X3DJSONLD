###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore6-21.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.264653537467964,103.8914597167094,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[-2,-6,-7,-8,-7,-7,-7,-6,-6,-5,-3,-2,0,1,4,7,8,9,9,9,9,9,9,11,13,14,15,15,16,16,16,16,15,15,14,14,14,1,-2,-5,-7,-8,-8,-7,-7,-6,-6,-5,-3,-1,0,1,4,7,8,9,8,8,10,11,13,14,15,15,16,16,16,16,15,15,14,14,13,13,4,1,-2,-6,-7,-8,-8,-7,-7,-6,-6,-5,-4,-2,0,2,5,7,9,8,9,11,13,14,15,15,16,16,16,16,15,15,14,14,14,13,13,7,5,1,-2,-5,-7,-8,-8,-7,-7,-6,-6,-5,-3,-1,0,2,6,9,10,11,13,14,15,15,16,16,16,16,15,15,14,14,13,13,13,12,9,8,4,1,-2,-6,-8,-8,-8,-7,-7,-6,-6,-5,-3,-1,1,6,9,11,13,14,15,15,16,16,16,16,15,15,14,14,14,13,13,12,10,10,9,7,5,1,-2,-5,-7,-8,-8,-7,-7,-6,-6,-4,-2,1,6,10,12,14,15,15,16,16,16,16,15,15,14,14,13,13,13,12,8,5,10,10,10,9,5,1,-2,-6,-8,-8,-8,-8,-7,-6,-5,-2,1,7,11,13,15,16,16,16,16,16,15,15,14,14,14,13,13,12,9,4,0,10,10,10,9,7,5,1,-2,-5,-7,-8,-8,-7,-7,-6,-4,1,8,13,14,15,16,16,16,16,15,15,14,14,13,13,13,12,8,5,0,-2,10,10,10,9,9,8,5,1,-2,-6,-8,-8,-8,-7,-7,-5,0,9,15,15,16,16,16,16,15,15,14,14,14,13,13,13,10,5,0,-2,-5,10,10,10,10,10,9,7,5,1,-2,-5,-7,-8,-8,-7,-6,0,10,15,16,16,16,16,15,15,14,14,13,13,13,12,9,5,0,-2,-4,-5,9,10,10,10,10,9,9,8,5,1,-2,-6,-8,-8,-8,-6,0,10,15,16,16,16,15,15,14,14,14,13,13,13,10,5,0,-2,-5,-5,-6,9,9,10,10,10,10,10,9,7,5,1,-2,-5,-7,-8,-7,-2,5,11,14,16,15,15,14,14,13,13,13,12,9,5,0,-2,-4,-5,-6,-6,9,9,9,10,10,10,10,9,9,8,5,1,-2,-6,-8,-7,-4,0,5,12,15,15,14,14,14,13,13,13,10,5,0,-2,-5,-5,-6,-6,-6,9,9,9,9,10,10,10,10,10,9,7,4,1,-2,-5,-7,-6,-3,0,6,11,13,14,13,13,13,12,9,5,0,-2,-4,-5,-6,-6,-6,-6,8,9,9,9,9,10,10,10,10,9,9,8,5,1,-2,-6,-8,-6,-4,1,6,11,13,13,13,13,11,4,0,-3,-5,-5,-6,-6,-6,-6,-6,7,8,9,9,9,9,10,10,10,10,10,9,7,5,1,-2,-5,-7,-6,-3,2,9,13,13,11,9,5,0,-2,-4,-6,-6,-6,-6,-6,-6,-6,6,7,8,9,9,9,9,10,10,10,10,9,9,8,5,1,-2,-6,-8,-6,-1,7,13,13,11,4,0,-3,-5,-5,-6,-6,-6,-6,-6,-6,-6,4,6,7,8,9,9,9,9,10,10,10,10,10,9,7,5,1,-2,-6,-7,-2,7,11,9,5,0,-2,-4,-6,-6,-6,-6,-6,-6,-6,-6,-6,2,4,6,7,8,9,9,9,9,10,10,10,10,9,9,8,5,1,-2,-6,-2,7,11,4,0,-3,-5,-5,-6,-6,-6,-6,-6,-6,-6,-6,-6,0,2,4,6,7,8,9,9,9,9,10,10,10,10,10,9,7,5,1,-2,-1,4,5,0,-2,-4,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,0,0,2,4,6,7,8,9,9,9,9,10,10,10,10,9,9,8,6,2,0,0,0,-3,-5,-5,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,0,0,0,2,4,6,7,8,9,9,9,9,10,10,10,10,10,9,8,5,2,-1,-3,-4,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-5,0,0,0,0,2,4,6,7,8,9,9,9,9,10,10,10,10,10,9,8,4,-2,-5,-5,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-4],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
