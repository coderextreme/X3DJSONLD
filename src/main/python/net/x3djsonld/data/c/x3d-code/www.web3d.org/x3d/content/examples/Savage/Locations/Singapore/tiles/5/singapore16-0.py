###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore16-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3519706612479037,103.589836,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[11,12,13,13,12,11,10,9,9,10,10,10,10,10,10,10,12,14,15,14,13,11,11,11,11,11,10,10,9,9,8,9,10,10,10,10,11,13,13,13,12,10,10,10,10,10,10,9,9,10,10,11,13,15,16,15,14,12,11,11,11,12,12,12,11,11,10,10,10,10,9,9,12,13,13,13,12,10,11,12,12,11,10,9,10,10,11,12,13,15,16,15,14,12,11,11,11,12,13,13,13,13,12,11,10,9,9,9,12,14,14,13,12,10,12,14,14,14,13,12,11,11,12,13,14,14,15,14,13,12,11,10,10,12,13,13,14,13,12,10,9,9,9,9,12,14,13,12,12,11,13,16,16,16,15,14,13,13,14,15,15,13,13,13,13,11,11,10,10,11,13,14,14,13,11,10,9,9,10,10,12,13,12,11,12,13,15,16,16,16,14,13,13,14,15,15,14,12,11,12,12,11,10,10,11,12,14,15,15,13,11,11,10,10,10,11,11,12,12,11,13,15,15,16,16,15,14,13,13,14,15,15,13,10,10,12,12,11,10,10,11,13,14,15,15,13,12,11,11,11,11,12,11,12,12,11,13,16,16,17,16,15,14,14,14,14,14,14,12,10,10,11,12,11,10,11,12,14,14,15,14,14,13,13,13,12,12,13,11,12,12,11,13,16,16,17,17,16,16,15,15,15,14,13,12,10,10,12,12,11,11,12,13,15,15,14,14,15,15,14,14,13,13,13,11,13,12,11,13,15,16,16,16,17,16,16,15,15,15,14,13,11,11,12,13,11,11,12,14,16,18,18,17,17,16,16,15,15,14,14,11,13,12,11,12,14,15,15,16,16,16,17,16,16,16,16,15,13,13,14,14,13,13,13,15,19,22,22,22,21,19,18,17,16,15,15,11,13,12,10,11,13,14,14,15,15,16,17,17,16,16,17,17,17,17,18,18,16,14,15,17,22,25,27,28,27,25,23,21,18,15,14,10,13,11,9,11,13,13,13,13,13,15,17,17,16,17,19,20,22,23,24,22,18,16,16,18,24,28,31,33,33,32,29,25,20,16,14,10,11,10,9,10,12,11,10,10,10,12,14,15,15,18,22,26,29,30,30,26,21,17,16,17,22,27,32,37,38,38,34,29,22,17,14,8,9,8,8,9,10,9,8,8,8,9,10,12,14,19,25,31,36,36,34,29,22,18,16,16,20,24,31,38,42,43,39,33,25,18,16,8,7,7,8,9,9,8,6,6,6,7,8,10,14,19,26,32,37,36,34,28,22,18,17,18,20,25,31,38,44,47,42,36,28,21,18,8,7,7,8,9,9,8,6,6,6,6,7,10,14,19,25,30,33,33,31,27,21,18,18,20,22,27,33,39,45,49,45,39,30,23,21,8,7,7,8,8,8,8,6,6,7,7,8,10,12,18,23,26,29,29,28,25,20,19,20,22,25,31,36,42,48,50,46,40,30,23,23,8,7,7,6,7,8,8,7,8,9,9,9,9,11,15,19,23,24,25,24,23,21,20,20,23,27,33,40,46,50,51,45,38,29,22,24,10,8,7,6,7,8,9,10,10,10,10,10,10,10,12,16,18,20,21,22,22,21,21,20,22,26,32,39,45,50,52,45,37,29,23,23,12,10,8,7,7,8,10,12,12,12,12,12,11,11,11,12,14,16,18,20,20,20,20,19,20,22,27,35,43,50,53,46,38,30,24,21,14,12,10,9,8,9,10,13,13,14,14,13,13,13,13,11,13,14,16,18,19,19,19,19,19,21,26,33,41,50,55,49,42,33,25,21,16,14,12,11,10,10,10,12,13,14,14,15,15,16,15,14,14,15,16,18,18,17,17,19,21,24,28,34,42,51,57,53,46,35,26,22],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
