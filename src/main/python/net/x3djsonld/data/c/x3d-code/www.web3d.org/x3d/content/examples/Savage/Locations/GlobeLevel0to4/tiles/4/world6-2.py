###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world6-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-22.541664655043235,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-3817,-3885,-3591,-3502,-3357,-3367,-3139,-3572,-3442,-3357,-3502,-3540,-3535,-3402,-3501,-3505,-3331,-3118,-2930,-3147,-3409,-3359,-3887,-4135,-3351,-2850,-3400,-3409,-3584,-3761,-3662,-3838,-3670,-3469,-3551,-3599,-3623,-3477,-3348,-3251,-3025,-3256,-1742,-3621,-3831,-3026,-3392,-3477,-3582,-3605,-3595,-3825,-3853,-3823,-3746,-3721,-3582,-3341,-3508,-3440,-3237,-2990,-3139,-3235,-3631,-3315,-2550,-3354,-3773,-3775,-3880,-3678,-3829,-3839,-3897,-3861,-3831,-3478,-3832,-3714,-3575,-3503,-3503,-3291,-3228,-3078,-3176,-3587,-3322,-3910,-3781,-3845,-3706,-3716,-4025,-3943,-3957,-3869,-3949,-3627,-3506,-3438,-3530,-3429,-3494,-3279,-3301,-3131,-3374,-3397,-4115,-3538,-4047,-4058,-3914,-3413,-4139,-4067,-4004,-3991,-3952,-3635,-3453,-3338,-3527,-3250,-3331,-3333,-3221,-3097,-3150,-3274,-3899,-4328,-3999,-3607,-3968,-4003,-4254,-4124,-3777,-3863,-3984,-3740,-3627,-3387,-3428,-3548,-3500,-3253,-3314,-3273,-3098,-3340,-4094,-3515,-3393,-3584,-3946,-3945,-4172,-3954,-3906,-4041,-3694,-3629,-3535,-3318,-3546,-3548,-3557,-3322,-3335,-3237,-3309,-3260,-3491,-3001,-3501,-3656,-3992,-4076,-3904,-4028,-4128,-3893,-3854,-3639,-3439,-3637,-3444,-3579,-3634,-3534,-3261,-3247,-3002,-3255,-2579,-2695,-3850,-4164,-4270,-4233,-3994,-4185,-4058,-3601,-3793,-3685,-3645,-3573,-3634,-3478,-3526,-3341,-3460,-3087,-2858,-3138,-3553,-3495,-4155,-4202,-4230,-4105,-4097,-4029,-4007,-3713,-3755,-3598,-3595,-3762,-3642,-3576,-3428,-3347,-3262,-3257,-3090,-3149,-4018,-4334,-4259,-4295,-4236,-4156,-4104,-4094,-3448,-4013,-3975,-3763,-3722,-3686,-3589,-3553,-3586,-3227,-3232,-3178,-2838,-3038,-4409,-4428,-4286,-4256,-4221,-4168,-4068,-3871,-3765,-3779,-3876,-3849,-3733,-3678,-3501,-3517,-3459,-3307,-3394,-3306,-3026,-3072,-4363,-4248,-4307,-4250,-4227,-3883,-4015,-3852,-3535,-3786,-3606,-3685,-3547,-3588,-3652,-3514,-3477,-3410,-3269,-3130,-3091,-3102,-4390,-4387,-4079,-4312,-3958,-3993,-3896,-4098,-3615,-3431,-3597,-3649,-3725,-3546,-3563,-3632,-3529,-3336,-3315,-3184,-2917,-3014,-4259,-3812,-4021,-4087,-4135,-4061,-4066,-3797,-3827,-3729,-3596,-3759,-3710,-3659,-3488,-3379,-3502,-3346,-3358,-3254,-3197,-3151,-4266,-4227,-3241,-4175,-4074,-4018,-3816,-3840,-3686,-3976,-3851,-3885,-3806,-3537,-3538,-3642,-3515,-3104,-3390,-3227,-3156,-2942,-4475,-4303,-4138,-4184,-3950,-4239,-4108,-3940,-3631,-3700,-3841,-3822,-3726,-3653,-3635,-3406,-3273,-3485,-3284,-3091,-3168,-2704,-4311,-4284,-4029,-4059,-3952,-4075,-4041,-3968,-3867,-3804,-3705,-3785,-3590,-3620,-3599,-3440,-3623,-3390,-2995,-3214,-3004,-3102,-4166,-4442,-4443,-4041,-4085,-4094,-4037,-3980,-4018,-3534,-3781,-3539,-3781,-3442,-3504,-3404,-3475,-3243,-3232,-3331,-2766,-3150,-4291,-4334,-4259,-4107,-4057,-3767,-3829,-3953,-3990,-3866,-3707,-3654,-3555,-3545,-3605,-3487,-3585,-3478,-2215,-2963,-2935,-3105,-4383,-4401,-4267,-3782,-4008,-4236,-3878,-3929,-4058,-4000,-3641,-3730,-3692,-3608,-3645,-3605,-3617,-3194,-2596,-3124,-3080,-3202,-4395,-4204,-4184,-4007,-4013,-3934,-4043,-4002,-3950,-4002,-3832,-3909,-3961,-3760,-3692,-3613,-3483,-2770,-2980,-3310,-3215,-3052,-4412,-4187,-4160,-4104,-4078,-3989,-4169,-3985,-3949,-4074,-3857,-3979,-3748,-3765,-3713,-3610,-3588,-3147,-3105,-3268,-3319,-3209],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
