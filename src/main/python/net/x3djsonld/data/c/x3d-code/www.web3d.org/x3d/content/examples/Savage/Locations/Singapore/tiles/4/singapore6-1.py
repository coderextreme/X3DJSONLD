###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_4_61',geoSystem=['GDC'],position=(1.3257755241139217,103.63292510238706,2563.5168622784477),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])),
    GeoLOD(center=(1.3257755241139217,103.63292510238706,0.0),range=4101.627,child1Url=['../../tiles/5/singapore12-2.x3d'],child2Url=['../../tiles/5/singapore12-3.x3d'],child3Url=['../../tiles/5/singapore13-2.x3d'],child4Url=['../../tiles/5/singapore13-3.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
            texture=ImageTexture(url=['../../images/4/singapore6-1.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3170438117359278,103.61856206825804,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=7.9794636E-4,zDimension=44,zSpacing=4.0612617E-4,height=[10,7,0,-6,-11,-7,3,10,11,14,8,4,5,7,8,7,6,9,14,7,-4,-4,4,10,13,13,11,11,10,9,8,9,10,10,10,9,9,8,3,-4,-6,-11,-1,9,12,15,12,8,5,5,8,9,9,8,9,12,3,-6,-2,5,9,11,12,12,11,11,10,9,8,9,10,9,10,9,5,0,-6,-7,-8,4,12,14,15,10,8,6,5,8,9,10,9,9,9,1,-4,0,6,9,10,10,11,11,11,10,8,8,9,9,9,10,9,1,-4,-6,-7,-2,10,14,16,13,9,8,7,6,8,9,11,10,8,5,0,0,2,7,9,10,9,11,10,10,9,7,9,8,8,9,9,8,-1,-6,-7,-7,0,13,15,15,11,8,8,7,6,8,8,10,9,8,5,1,2,5,8,9,10,9,11,10,10,8,8,9,8,8,9,8,7,-5,-6,-7,-7,2,14,16,13,9,8,7,6,6,7,8,8,8,9,7,4,6,8,10,10,10,9,11,10,10,9,9,10,9,9,8,6,6,-6,-7,-7,-7,2,14,15,11,8,8,7,6,6,7,8,8,8,9,8,7,8,10,10,11,11,10,11,10,9,9,10,11,10,9,8,6,6,-6,-7,-7,-7,1,14,13,9,8,7,7,7,6,6,8,8,7,9,10,8,8,9,9,11,13,11,11,9,8,9,9,11,10,9,7,7,7,-7,-7,-7,-7,0,13,11,8,8,7,7,7,6,7,8,8,7,8,11,10,9,9,9,11,13,11,11,10,9,10,10,12,11,9,7,8,7,-7,-7,-7,-7,-1,10,9,8,8,7,7,7,6,7,8,9,8,7,11,12,10,9,8,10,12,10,12,12,11,11,11,13,11,9,9,9,8,-7,-7,-7,-7,-2,7,8,8,8,7,7,6,6,8,8,8,8,7,11,14,11,10,9,10,10,9,12,13,12,12,12,14,11,10,10,9,9,-7,-7,-7,-7,-3,5,7,8,8,9,8,5,6,8,8,7,7,7,11,14,13,11,10,10,10,10,12,13,12,11,11,14,12,11,11,9,8,-6,-7,-7,-6,-2,4,7,8,8,10,9,5,4,7,8,7,7,8,11,14,13,11,11,11,10,10,12,13,11,10,10,13,13,12,11,9,8,-6,-7,-7,-4,-1,4,8,8,9,10,11,6,2,6,8,8,8,9,11,12,12,12,11,10,10,10,13,13,10,8,8,11,14,13,11,10,9,-5,-5,-5,-3,0,6,9,8,9,10,12,8,1,6,8,8,9,10,11,11,11,12,11,10,10,10,13,14,11,8,8,9,13,12,11,11,10,-2,-1,-2,0,3,9,11,7,7,8,10,10,3,5,8,8,9,9,11,12,12,13,10,9,10,10,12,14,12,10,9,7,10,11,9,11,11,0,0,0,1,6,11,12,7,6,6,7,9,3,4,7,8,8,8,11,13,14,15,11,9,9,9,12,13,12,11,10,6,8,10,9,11,10,0,1,0,3,8,12,10,5,4,4,4,4,0,3,7,8,8,9,10,12,16,19,15,10,8,9,11,12,12,12,10,5,8,11,9,10,9,2,1,1,5,10,12,9,4,2,2,2,0,-2,2,7,8,8,9,10,11,17,22,17,10,8,9,11,11,11,12,9,6,10,13,11,10,9,3,1,2,7,12,10,7,3,1,1,0,-1,-1,3,7,7,7,9,10,11,15,19,15,10,9,10,11,9,9,9,8,10,12,16,13,10,9,3,1,4,9,12,9,6,2,0,0,-1,-1,0,3,7,7,7,10,11,10,13,15,13,10,10,11,11,9,7,7,7,13,13,17,15,11,10,2,2,6,11,10,7,5,2,0,0,-1,0,1,4,6,7,8,10,11,10,12,13,12,10,10,11,11,9,7,6,6,11,12,16,14,11,11,1,3,7,11,9,6,4,3,0,-1,-1,0,3,5,5,6,8,9,10,11,12,12,10,10,11,10,11,9,8,7,5,9,12,15,13,12,12,2,3,9,10,7,5,3,3,0,-1,0,1,4,4,4,6,7,7,9,11,11,11,9,10,12,11,11,10,9,8,7,9,13,15,12,11,11,3,3,10,8,6,4,3,3,1,-1,0,3,4,3,2,4,5,5,7,10,10,10,8,10,14,12,11,10,10,9,9,10,14,14,12,11,11,3,3,8,7,5,3,3,3,3,0,1,4,3,2,2,3,3,4,7,9,9,8,8,10,15,12,11,10,10,10,10,10,13,13,12,11,11,3,3,4,5,4,3,3,4,4,2,3,3,2,2,2,1,2,4,7,8,8,7,8,10,14,13,10,10,10,11,11,10,12,12,12,11,11,3,1,1,4,3,3,3,4,5,3,4,3,2,1,1,0,2,4,6,8,8,8,8,9,12,12,10,10,10,10,12,11,11,11,12,12,12,3,0,0,3,3,3,4,5,5,4,4,2,2,0,0,0,1,4,6,8,8,8,8,8,9,9,10,10,11,10,12,12,10,10,11,12,12,4,0,1,4,3,3,4,5,5,5,4,2,1,0,0,0,1,4,7,9,9,9,9,8,8,9,9,10,10,10,12,12,9,9,11,11,11,5,2,5,6,3,4,5,5,5,5,4,2,0,0,-1,-1,0,4,9,10,10,9,10,9,8,9,9,10,10,9,12,12,9,9,10,9,9,6,4,8,8,4,5,5,5,5,5,6,3,0,-1,-2,-2,0,5,9,10,8,8,9,10,8,9,9,11,11,9,11,11,9,9,9,8,9,5,5,10,9,6,7,7,6,5,6,8,3,-1,-3,-3,-4,0,6,10,9,7,6,9,10,9,9,10,13,13,10,11,10,9,10,9,9,10,5,6,10,10,9,9,8,6,5,7,9,3,-1,-3,-4,-3,1,7,10,9,6,6,8,10,9,9,11,13,14,10,11,10,10,12,10,10,10,5,6,9,10,12,12,8,5,5,8,9,3,-2,-4,-5,-1,4,8,10,9,7,7,8,10,10,10,11,13,13,11,12,11,12,13,11,11,11,5,7,9,10,12,12,8,5,6,9,10,2,-3,-5,-4,1,7,10,11,9,8,8,9,10,10,10,10,11,12,11,11,11,12,13,12,11,11,6,7,9,12,11,9,6,5,8,10,11,0,-4,-6,-2,4,11,12,10,9,8,8,9,11,10,9,8,8,10,11,10,10,11,12,12,11,12,8,8,10,12,9,8,3,5,9,11,11,0,-5,-6,-1,5,10,10,9,8,7,7,9,10,10,9,7,8,9,10,9,10,9,11,12,11,11,11,9,10,10,7,7,1,7,11,12,12,0,-4,-5,-1,4,6,6,7,7,7,7,8,10,9,9,8,9,8,9,8,9,8,10,11,11,11,12,10,10,8,7,6,2,10,13,12,12,0,-4,-5,-2,2,4,4,6,7,7,7,8,9,9,9,9,9,9,9,8,9,8,10,11,12,11,10,10,10,7,7,5,6,14,14,13,13,1,-4,-4,-4,0,2,5,7,8,7,7,9,9,9,10,10,10,10,11,9,10,9,11,12,11,11,11,10,10,5,5,5,8,15,15,14,14,1,-4,-4,-4,-2,0,3,7,8,7,8,9,9,9,10,11,11,11,12,9,10,10,12,12,11,11,12,10,9,2,1,6,10,13,16,15,15,2,-3,-3,-4,-3,0,1,6,9,8,9,9,8,9,10,12,12,11,12,9,10,9,11,11,11,12,12,10,9,-1,-1,3,6,10,15,16,16,2,-3,-3,-4,-4,-2,0,5,9,9,10,9,8,9,10,13,12,10,11,8,8,9,11,11,11,12],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
