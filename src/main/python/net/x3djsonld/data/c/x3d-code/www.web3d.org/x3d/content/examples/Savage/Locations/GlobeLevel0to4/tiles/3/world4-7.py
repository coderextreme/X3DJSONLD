###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_47',geoSystem=['GDC'],position=(11.208336350785146,157.4583433915838,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(11.208336350785146,157.4583433915838,0.0),range=4495500.0,child1Url=['../../tiles/4/world8-14.x3d'],child2Url=['../../tiles/4/world8-15.x3d'],child3Url=['../../tiles/4/world9-14.x3d'],child4Url=['../../tiles/4/world9-15.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world4-7.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[442,437,88,182,-2159,-2212,-850,-2417,-1771,-1863,-1714,-2071,-2513,-4166,-4190,-3625,-3881,-4142,-5068,-5136,-5251,-37,-72,-29,-3572,-2129,-1087,-1079,-1352,-4864,-2391,-1589,-2222,-2744,-4181,-4419,-3622,-4232,-4321,-4624,-5104,-5476,-1381,-1849,-4196,-3257,-3786,-1782,-2130,-5369,-4269,-3040,-1902,-2246,-3980,-4401,-4402,-4202,-4393,-4505,-5244,-4412,-5478,-4067,-4552,-3642,-3460,-3338,-3638,-4393,-5148,-4470,-2544,-2100,-2379,-3913,-4433,-4365,-4388,-4214,-4500,-4872,-4948,-5250,-4011,-4143,-4217,-3207,-3830,-4430,-4345,-4461,-4268,-3025,-2324,-2702,-3719,-4372,-4253,-4160,-4394,-3928,-4569,-5197,-5364,-4121,-4216,-4291,-3196,-4272,-4547,-4604,-5223,-4218,-2852,-2722,-2879,-3708,-4343,-4266,-4446,-3941,-4161,-4788,-5563,-5411,-4857,-4776,-4381,-2913,-4023,-4523,-4026,-5105,-4290,-2910,-2737,-3584,-3500,-4413,-4399,-4471,-4338,-3783,-5019,-5615,-5471,-4639,-5263,-4244,-3223,-3350,-4402,-3182,-3813,-4615,-3211,-3303,-3786,-3679,-4408,-4596,-4544,-4434,-3008,-5040,-6077,-5674,-4393,-4504,-4269,-3673,-3221,-4369,-3685,-3963,-4735,-4106,-3490,-4017,-4508,-4779,-4891,-1078,-4424,-4031,-5256,-5815,-5877,-6006,-4384,-3984,-5028,-3025,-3478,-3898,-4380,-3135,-4684,-4050,-4565,-4847,-4977,-5115,-4878,-4534,-4608,-5171,-5509,-5725,-1663,-2386,-2704,-3654,-2239,-2114,-1432,-3957,-4281,-4089,-4772,-4903,-4547,-5121,-5155,-317,-4039,-4984,-5428,-5604,-5898,-3531,-4037,-3445,-2633,-3796,-3697,-3058,7,-3582,-5360,-5045,-5121,-5101,-5288,-2641,-4041,-3874,-4931,-5440,-5256,-5938,-4043,-4793,-3982,-3400,-4737,-2634,-4873,-5716,-5493,-5626,-5484,-5318,-3807,-4686,-2410,-4272,-3978,-5078,-5522,-5556,-6061,-5265,-4745,-7299,-7317,-6380,-4786,-5670,-5873,-5825,-5724,-2160,-5246,-2960,-5019,-4286,-4142,-4516,-5245,-5586,-5286,-6225,-4788,-5239,-4136,-4730,-3545,-6947,-5522,-6011,-5963,-6078,-5084,-5666,-4623,-3712,-4405,-4652,-4345,-5530,-5660,-5686,-5894,-2864,-5085,-4679,-4449,-3037,-4262,-3291,-5991,-5975,-6062,-5728,-5738,-4858,-4830,-5017,-5058,-5367,-5733,-5708,-5467,-5265,-3729,-5219,-5054,-4854,-3859,-3059,-3076,-5956,-6013,-4934,-3220,-5638,-5191,-4913,-1274,-5233,-5672,-5430,-4055,-5014,-5263,-3898,-5216,-5068,-4765,-3792,-1120,-5447,-5757,-5254,-4706,-5991,-5781,-5252,-5232,-4632,-5596,-5389,-5117,-5266,-4153,-5304,-5169,-4772,-5080,-4690,-2803,-2109,-7016,-5970,-5625,-5194,-5826,-5781,-5584,-5322,-4740,-5553,-5490,-5286,-4642,-3598,-5091,-5671,-5068,-4210,-4785,-3686,-2603,-8028,-5042,-5057,-5287,-5795,-5695,-5574,-5132,-5367,-5447,-5131,-3031,-4050,-4277,-4749,-5601,-4311,-4672,-4544,-4620,-1019,-6047,-5442,-5600,-5702,-5754,-5602,-5001,-5008,-5478,-5006,-3469,-2618,-3757,-3912,-4820,-5970,-4021,-4858,-4620,-4282,428,-6380,-5438,-5648,-5668,-5738,-5653,-4671,-4988,-5601,-5083,-3614,-2174,-3714,-4418,-4828],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
