###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore30-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4742146345398193,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[7,7,7,8,8,9,11,11,11,22,36,51,65,67,65,32,-13,-37,-53,-58,-59,-59,-59,-58,-58,-57,-56,-56,-56,-56,-54,-53,-50,-49,-46,-44,7,8,8,8,9,10,11,16,21,33,48,62,71,75,76,47,4,-29,-48,-58,-59,-59,-58,-58,-57,-56,-56,-56,-55,-55,-53,-52,-50,-49,-47,-45,8,8,8,9,11,11,11,22,36,50,66,72,76,76,77,49,8,-21,-48,-58,-59,-58,-58,-57,-56,-56,-56,-56,-55,-54,-53,-52,-50,-49,-47,-45,8,8,9,10,11,15,20,35,51,62,73,76,76,74,71,48,19,-11,-45,-58,-58,-58,-57,-56,-56,-56,-56,-55,-55,-54,-52,-51,-50,-48,-46,-45,8,9,11,11,11,22,34,50,66,71,75,76,77,70,61,46,29,-2,-43,-57,-58,-57,-56,-56,-56,-56,-55,-55,-54,-53,-52,-51,-49,-48,-46,-45,9,10,11,14,19,33,49,60,72,75,76,73,71,61,50,39,30,7,-23,-41,-52,-55,-56,-56,-56,-55,-55,-55,-54,-53,-52,-51,-49,-48,-46,-45,10,10,10,20,31,47,63,69,74,75,77,70,61,49,39,31,26,17,4,-15,-43,-55,-56,-56,-55,-55,-55,-55,-54,-53,-52,-51,-49,-48,-46,-45,10,13,15,29,44,57,70,73,75,73,71,61,50,39,31,26,22,19,15,-4,-39,-54,-56,-55,-55,-55,-55,-54,-54,-53,-51,-50,-49,-48,-46,-45,9,17,26,41,57,64,72,74,76,70,61,49,39,31,26,22,19,17,16,-4,-39,-54,-55,-55,-55,-55,-54,-54,-53,-52,-51,-50,-49,-48,-46,-45,11,24,36,50,64,69,74,72,71,61,49,39,31,26,22,19,17,16,16,0,-29,-43,-44,-45,-45,-45,-45,-44,-44,-43,-42,-41,-40,-40,-39,-38,16,32,45,56,66,71,76,68,59,49,38,31,26,22,19,17,16,16,16,5,-11,-21,-27,-29,-29,-29,-28,-28,-28,-28,-28,-27,-27,-26,-26,-26,21,37,51,60,69,69,69,59,48,39,30,26,22,19,17,16,16,16,15,9,0,-5,-10,-12,-12,-11,-12,-12,-12,-12,-12,-12,-12,-12,-12,-13,26,40,52,63,73,64,54,46,37,31,25,21,19,18,17,16,16,15,13,11,7,5,4,4,4,4,3,3,3,2,1,1,1,0,0,0,26,35,45,54,63,53,42,35,29,25,21,19,17,16,16,16,15,14,11,11,9,11,12,13,13,13,12,12,11,11,10,9,8,7,6,6,19,23,28,32,36,35,34,29,24,21,19,17,16,16,16,15,13,11,9,8,9,11,13,15,15,15,14,14,13,13,12,11,10,9,8,7,14,16,17,17,17,21,26,23,20,18,17,16,16,15,15,14,11,9,7,7,7,9,12,15,15,15,15,14,14,13,12,11,10,9,8,7,13,14,15,14,13,15,18,18,18,17,16,15,15,14,13,11,9,7,5,5,5,7,10,12,14,15,15,15,14,13,12,12,10,9,8,7,13,14,15,13,12,12,12,14,16,16,15,15,14,13,11,9,7,6,4,4,4,5,7,10,13,15,15,15,14,13,13,12,10,9,8,7,13,14,14,12,11,11,11,13,15,15,14,13,12,11,9,7,6,5,4,4,4,4,6,8,11,13,14,15,14,14,13,12,11,10,8,7,14,14,14,12,11,11,11,12,14,14,14,12,11,9,7,7,6,5,3,3,3,4,5,7,9,11,13,14,15,14,13,12,11,10,8,7,14,16,17,17,17,14,11,12,13,13,12,10,9,8,7,7,7,5,3,3,3,4,5,6,8,10,12,13,14,14,13,13,11,10,8,7,14,16,19,21,22,16,10,12,13,12,11,9,7,7,7,8,9,7,5,3,3,4,5,6,7,9,10,12,14,14,14,13,11,10,8,7,12,14,16,20,22,16,8,10,13,11,9,8,7,7,8,10,13,12,9,6,4,4,5,6,7,8,9,10,11,13,13,13,12,10,8,6],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
