###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore16-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.3519706612479037,103.79091847780627,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=36,xSpacing=4.103724E-4,zDimension=23,zSpacing=3.96896E-4,height=[50,56,61,62,62,62,63,61,59,56,52,51,50,50,49,51,54,57,58,56,54,52,49,46,44,41,38,37,40,44,49,53,53,53,49,45,56,59,62,62,62,63,64,62,61,58,54,52,51,50,49,49,51,52,53,53,53,52,51,48,44,41,39,39,43,48,51,53,54,54,51,46,63,64,65,64,63,64,65,64,62,60,56,54,53,51,49,48,48,48,48,50,51,52,51,48,44,42,40,42,47,51,53,54,54,54,51,47,69,69,68,67,66,66,67,65,64,61,58,55,53,51,49,48,47,46,45,46,48,49,48,45,42,41,42,45,50,54,54,55,55,54,49,45,73,73,72,71,69,68,67,66,64,61,58,55,52,49,47,46,46,45,43,43,45,45,44,43,42,42,45,49,53,56,56,56,54,53,47,41,75,75,76,74,72,69,64,63,61,58,55,52,49,46,44,43,44,43,41,41,41,42,42,43,44,46,49,53,56,58,57,55,53,50,43,38,74,76,76,75,73,68,63,60,58,55,53,50,47,44,41,41,42,42,41,40,40,40,42,44,47,50,53,56,58,58,56,54,51,48,40,36,71,72,71,71,70,67,64,60,56,54,52,49,46,44,42,42,44,43,42,41,40,42,44,47,51,55,56,58,58,57,55,52,49,45,39,35,66,66,65,64,64,64,63,60,56,54,51,49,46,44,43,44,45,45,44,43,42,44,46,49,53,55,57,58,56,55,52,49,46,43,39,37,62,60,58,57,57,58,58,58,57,54,51,49,47,46,45,45,45,44,43,43,44,44,46,48,51,52,53,54,53,51,49,46,44,42,40,38,58,54,51,50,50,52,53,55,56,54,51,50,49,48,47,45,43,43,43,44,44,45,47,47,48,48,49,50,50,49,47,45,44,42,41,41,55,52,48,48,47,49,50,52,54,53,51,51,51,49,47,44,42,42,44,46,47,48,49,48,47,47,47,48,49,50,48,46,45,45,44,43,52,50,48,48,47,48,49,49,50,50,50,51,52,50,47,44,42,43,47,49,50,50,51,50,48,47,47,48,51,52,51,49,48,47,46,45,49,49,48,48,47,47,47,46,46,47,47,50,52,49,47,45,43,45,49,51,51,51,51,51,50,49,48,49,52,54,53,51,50,49,47,46,47,48,50,49,46,46,45,44,42,43,44,47,50,49,47,46,46,48,51,51,51,50,50,50,52,52,51,51,54,55,54,52,50,49,48,47,46,48,50,48,45,45,44,43,41,41,41,44,48,48,47,48,49,50,52,52,50,50,50,51,54,55,54,55,57,58,55,52,50,48,49,49,48,49,49,46,43,43,44,43,42,41,40,43,46,48,49,50,51,52,52,51,49,49,50,52,55,57,58,59,61,60,56,53,50,48,50,51,51,50,49,46,43,44,45,44,42,41,41,44,48,49,50,51,52,52,51,50,49,50,52,55,58,60,60,60,62,61,57,53,51,50,52,54,53,51,49,47,44,46,47,45,43,43,44,47,51,51,51,51,52,51,50,49,49,51,56,59,60,61,60,60,61,60,56,54,53,54,56,56,55,52,50,48,46,46,48,46,44,44,45,48,52,52,51,51,51,51,50,49,49,51,55,56,58,58,58,58,59,58,55,53,54,56,58,59,54,54,52,50,47,47,46,45,44,44,46,48,51,51,51,50,50,50,50,50,50,50,50,50,51,52,53,54,55,55,53,52,54,56,59,61,54,54,54,52,50,48,46,44,43,44,46,48,50,50,50,49,49,49,49,49,50,49,46,45,46,47,49,51,51,50,49,48,52,54,59,61,52,53,54,53,52,49,46,43,41,43,45,47,49,50,49,48,48,48,48,49,49,47,44,43,44,45,47,47,47,45,43,43,47,52,58,61],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
