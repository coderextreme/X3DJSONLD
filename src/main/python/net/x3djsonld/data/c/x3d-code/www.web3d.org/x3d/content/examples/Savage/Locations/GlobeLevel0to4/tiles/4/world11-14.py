###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world11-14.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(33.7083370213374,134.95834272103156,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4034,-4421,-4170,-4289,-3894,-1921,-2097,-4365,-6937,-5839,-5730,-6098,-5953,-5631,-5464,-5703,-5958,-5220,-5672,-5147,-4535,-4172,-1520,-4448,-4543,-4075,-3874,-1162,-1735,-3618,-7687,-5311,-5804,-5914,-5971,-5988,-5811,-5909,-5920,-5717,-5469,-4743,-4519,-4713,-1065,-1673,-3524,-4197,-4006,-658,-956,-3397,-6448,-5064,-5930,-5883,-5938,-4127,-6188,-5949,-5762,-5760,-5653,-5415,-5031,-5093,-51,-1276,-1452,-1995,-3058,-1940,-426,-4673,-6983,-5387,-5773,-5782,-5849,-6263,-6377,-6080,-6046,-6026,-5987,-5643,-5717,-5498,948,-73,487,-1834,-3582,-1216,-1280,-6437,-6143,-5284,-5786,-5688,-5845,-6236,-6211,-6055,-5975,-5998,-6017,-5855,-5836,-5635,-1,-2,448,-152,-128,0,-2805,-7096,-5876,-5583,-5740,-5946,-5961,-6020,-6148,-5991,-5925,-6084,-5998,-5841,-5635,-5458,355,80,409,13,239,-1120,-1028,-4041,-6536,-5688,-5789,-5946,-5990,-6044,-6124,-6118,-6037,-6115,-5985,-5840,-5590,-5406,192,545,119,113,1864,348,5,-1562,-6770,-5666,-5678,-5868,-5829,-5739,-6085,-6042,-6074,-5863,-5742,-5741,-5536,-5258,-280,-186,267,1050,1695,320,1,-1744,-5265,-5780,-5683,-5933,-5688,-5779,-5972,-5995,-6015,-5742,-5849,-5746,-5488,-5469,-356,-1065,-111,904,770,161,106,-1260,-4668,-6299,-5691,-5569,-5682,-5817,-5845,-5864,-5826,-6595,-5697,-5758,-5695,-5616,-1505,-827,-470,-3,781,1758,530,-299,-3192,-6989,-3698,-5532,-5546,-5680,-5853,-5704,-5992,-5905,-5750,-5701,-5765,-5380,-1516,-2450,-1160,96,-471,870,246,-250,-1143,-7361,-5665,-5551,-5714,-5653,-5887,-5835,-5974,-5688,-5797,-5707,-5713,-5751,-633,-3020,-1511,-161,-281,-2,628,-117,-1043,-5345,-5634,-5357,-5559,-5686,-5788,-5919,-5805,-5812,-5860,-5902,-5811,-5819,-773,-3052,-2706,-1004,-669,-84,81,201,-1165,-3332,-5639,-5278,-5349,-5636,-5644,-5539,-5799,-5713,-5683,-5861,-5828,-5831,-1119,-2965,-1779,-2445,-995,-670,312,219,-1163,-2765,-6001,-5212,-5241,-5613,-5705,-5402,-5782,-5746,-5707,-5715,-5875,-5732,-1307,-597,-1480,-2421,-2130,-892,133,853,-1025,-3135,-5937,-5275,-5191,-5403,-5597,-5478,-5461,-5584,-5653,-5615,-5614,-5656,-453,-1362,-1276,-2125,-2669,-1553,368,887,-730,-2192,-6194,-5277,-5188,-5312,-5535,-5427,-5484,-5501,-5694,-5537,-5592,-5511,-3179,-2037,-2846,-1818,-3178,-2578,615,197,-1101,-2371,-6908,-5295,-5215,-5423,-5523,-5407,-5360,-5621,-5678,-5631,-5495,-5550,-3535,-3404,-3290,-3204,-3591,-3020,22,-37,-1436,-1977,-6187,-5528,-5211,-5386,-5274,-5250,-5525,-5411,-5509,-5588,-5555,-5539,-3546,-3252,-3467,-3546,-3642,-1782,-138,0,-1317,-2067,-3782,-6653,-5491,-5188,-5398,-5233,-5227,-5380,-5504,-5441,-5593,-5669,-3422,-3574,-3540,-3598,-3649,-2477,66,-355,-934,-151,-2059,-5831,-6535,-5318,-5426,-5178,-5199,-5295,-5257,-5478,-5441,-5502,-2931,-3603,-3681,-3626,-3639,-3312,-4,-113,40,-78,-1641,-3039,-5785,-6528,-5200,-4900,-4981,-5144,-5380,-5309,-5563,-5379,113,-1632,-3682,-3794,-3606,-2916,-74,304,574,202,-215,-978,-3578,-7117,-6432,-4893,-4905,-5094,-5208,-5384,-5479,-5439,715,-1368,-3587,-3768,-3584,-2936,-511,67,555,228,36,-401,-3088,-6425,-6739,-4999,-4826,-5004,-5191,-5375,-5466,-5442],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
