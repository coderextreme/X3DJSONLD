###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world12-0.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(44.95833735661353,-180.0416666667,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-5544,-6275,-5293,-5721,-5123,-5625,-6040,-5535,-5642,-5601,-5682,-5682,-5942,-5430,-5685,-5656,-5555,-5428,-5526,-5407,-5456,-5192,-5656,-6143,-5732,-6112,-5704,-6052,-5975,-5567,-5326,-5537,-5777,-5685,-5799,-5777,-5366,-5563,-5553,-5504,-5408,-5279,-5433,-5334,-5736,-5679,-5728,-5895,-5628,-5627,-6159,-5605,-5972,-5971,-6039,-5682,-5703,-5435,-5386,-5534,-5533,-5518,-5316,-5492,-5413,-5081,-5624,-5704,-5693,-5953,-5693,-5650,-5814,-6309,-6250,-5894,-5930,-5587,-5753,-5495,-5328,-5464,-5326,-5313,-5263,-5232,-5344,-5323,-5559,-5710,-5677,-5857,-5790,-6002,-5714,-5720,-5753,-5669,-5965,-5879,-5614,-5438,-5297,-5372,-5252,-5056,-5261,-5347,-5312,-5252,-5137,-5694,-5497,-5559,-5792,-5864,-5859,-5458,-5665,-5650,-5266,-5392,-5383,-5305,-5298,-5286,-5134,-5167,-5174,-5158,-5277,-5213,-5664,-5491,-5547,-5542,-5763,-5701,-5693,-5520,-5574,-5737,-5290,-5720,-5432,-5410,-5245,-5114,-5017,-5042,-5078,-5226,-5250,-5255,-5254,-5504,-5553,-5511,-5657,-5821,-5718,-5431,-5404,-5627,-5565,-5570,-5462,-5418,-5330,-5175,-4980,-5021,-4818,-5036,-5195,-5123,-5592,-5537,-5487,-5522,-5676,-5598,-5671,-5350,-5407,-5558,-5494,-5406,-5410,-5392,-5094,-5103,-5157,-4952,-4985,-5063,-5141,-5115,-4890,-5621,-5676,-5505,-5667,-5627,-5658,-5440,-5454,-5437,-5569,-5322,-5309,-5279,-5255,-5064,-5167,-4908,-5020,-4986,-5155,-4437,-5256,-5487,-5547,-5637,-5599,-5575,-5564,-5286,-5247,-5435,-5447,-5468,-5347,-5156,-5230,-5011,-4968,-5006,-4913,-4972,-5146,-5208,-5335,-5388,-5341,-5423,-5633,-5426,-5334,-5170,-5317,-5203,-5331,-5446,-5356,-5097,-5218,-4200,-4921,-5008,-4853,-4898,-5094,-5090,-5151,-4884,-4942,-5233,-5388,-5351,-5491,-4937,-5292,-5308,-5281,-5435,-5337,-5248,-5118,-5013,-5021,-5059,-4885,-5012,-5119,-4777,-4766,-4949,-4765,-4764,-5114,-5210,-4890,-5081,-5262,-5257,-5330,-5336,-5281,-5200,-5054,-4996,-4903,-5099,-4978,-4702,-5045,-4730,-5542,-5711,-5418,-5127,-5023,-4965,-4928,-5440,-5095,-5203,-5210,-5201,-5232,-5157,-4956,-4819,-4825,-4919,-4877,-5005,-4878,-4957,-5489,-5979,-6005,-7052,-7109,-6712,-5717,-5519,-5158,-5135,-4987,-4935,-5046,-4981,-4650,-4793,-4767,-4836,-4789,-4937,-4910,-4787,-4046,-3366,-4188,-3606,-3540,-4854,-5903,-6602,-7174,-5996,-5304,-5102,-4889,-4901,-4762,-4765,-4744,-4749,-4750,-4790,-4872,-4827,-1037,-412,-1093,-359,-3020,-4496,-4542,-3639,-4104,-4940,-6939,-6377,-4746,-4679,-4663,-4761,-4561,-4630,-4302,-4708,-4732,-4825,-613,-2150,-2195,-745,-2,-18,-32,-196,-2426,-3118,-4287,-4869,-7088,-5706,-5320,-4841,-4751,-4503,-4606,-4629,-4730,-4623,-284,-3391,-3588,-3620,-3390,-2121,-297,-216,-37,-212,-1563,-3910,-3829,-5719,-6776,-5338,-4855,-4609,-4578,-4650,-4689,-4676,-989,-3549,-3758,-3716,-3731,-3546,-2513,-2028,-1107,-178,-515,-231,-1827,-4194,-4120,-5065,-6504,-5169,-4673,-4719,-4695,-4651,-731,-3805,-3818,-3816,-3771,-3695,-3587,-3294,-2678,-2189,-1756,295,455,-163,-1872,-2757,-4491,-5052,-6727,-5387,-4906,-4636,-204,-3813,-3798,-3776,-3719,-3698,-3713,-3465,-3218,-1858,-1919,-1615,-513,-75,-107,-77,-774,-458,-2518,-3198,-5883,-5676,-451,-3820,-3807,-3794,-3732,-3692,-3695,-3507,-3214,-1838,-2140,-2074,-960,16,-54,-78,-195,-636,-1826,-2625,-4976,-5732],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
