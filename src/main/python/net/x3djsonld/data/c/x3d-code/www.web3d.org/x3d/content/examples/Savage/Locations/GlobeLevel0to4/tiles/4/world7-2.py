###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world7-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-11.291664319767108,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4412,-4187,-4160,-4104,-4078,-3989,-4169,-3985,-3949,-4074,-3857,-3979,-3748,-3765,-3713,-3610,-3588,-3147,-3105,-3268,-3319,-3209,-4305,-4232,-4136,-4008,-4018,-4045,-3962,-3926,-3947,-3766,-4005,-3796,-3862,-3685,-3563,-3578,-3515,-3810,-3484,-3344,-3327,-3209,-4341,-4134,-4122,-3932,-3839,-4127,-4031,-3863,-3871,-3639,-3961,-2587,-3167,-3743,-3984,-3910,-3696,-3867,-3567,-3561,-3450,-3215,-3797,-4215,-3820,-3924,-4148,-4162,-4201,-3895,-3882,-3848,-3829,-3736,-3917,-3852,-3602,-4200,-3927,-3848,-3639,-3570,-3414,-3356,-4528,-3540,-4028,-3801,-4135,-4077,-4069,-4180,-3781,-3993,-3738,-3318,-3975,-3902,-3977,-4129,-3810,-3910,-3820,-3366,-3404,-3403,-4086,-4324,-4482,-4167,-3896,-4272,-4328,-3919,-3970,-3932,-3917,-3976,-3975,-4148,-3869,-4186,-4171,-4017,-4465,-3689,-3416,-3378,-4192,-4361,-4570,-4421,-4241,-4669,-4648,-4274,-4140,-3795,-3915,-3842,-3973,-4222,-4285,-4359,-4370,-4026,-4187,-3737,-3492,-3503,-4536,-4505,-4667,-4689,-4605,-4821,-4695,-4571,-4453,-4308,-4333,-4052,-4195,-4301,-4529,-4361,-4409,-4017,-4120,-3723,-3707,-3394,-4529,-4576,-4695,-4675,-4592,-4714,-4580,-4670,-4564,-4462,-4484,-4233,-4292,-4470,-4302,-4199,-4401,-4363,-4237,-4060,-3548,-3361,-4572,-4695,-4712,-4603,-4667,-4614,-4499,-4686,-4503,-4354,-4443,-4632,-4403,-4415,-4436,-4323,-4410,-4422,-4205,-4052,-3556,-3538,-4445,-4704,-4561,-4705,-4654,-4550,-4482,-4556,-4363,-4451,-4506,-4654,-3837,-4341,-4272,-4377,-4343,-4437,-4079,-3961,-3687,-4120,-4382,-4580,-4637,-4450,-4657,-4491,-4491,-4652,-4261,-4389,-4609,-4552,-4281,-4359,-4316,-4287,-4335,-4270,-4264,-4106,-4142,-3918,-4514,-4531,-4616,-4633,-4705,-4680,-4550,-4589,-4323,-4204,-4669,-4525,-4415,-4378,-4298,-4253,-4249,-4252,-4235,-4159,-4061,-4110,-4557,-4588,-4801,-4598,-4623,-4561,-4449,-4590,-4268,-4525,-4555,-4520,-4423,-4350,-4268,-4234,-4355,-4172,-4170,-4204,-4248,-4138,-4528,-4625,-4595,-4646,-4668,-4521,-4584,-4702,-4410,-4075,-4504,-4425,-4296,-4282,-4253,-4268,-4253,-4168,-4195,-4193,-4163,-4060,-4641,-4638,-4703,-4602,-4655,-4550,-4530,-4704,-4496,-4419,-4553,-4416,-4243,-4212,-4243,-4217,-4194,-4129,-4241,-4280,-4204,-4046,-4656,-4579,-4598,-4824,-4638,-4591,-4643,-4638,-4501,-4345,-4513,-4346,-4255,-4253,-4182,-4258,-4234,-4235,-4262,-4250,-4122,-4053,-4552,-4442,-4641,-4904,-4580,-4636,-4583,-4521,-4478,-4538,-4484,-4357,-4264,-4317,-4285,-4235,-4184,-4245,-4292,-4279,-4187,-4060,-4470,-4552,-4710,-4649,-4740,-4611,-4509,-4600,-4559,-4568,-4555,-4388,-4369,-4286,-4283,-4192,-4334,-4241,-4278,-4347,-4170,-3998,-4522,-4474,-4482,-4344,-4685,-4663,-4429,-4546,-4668,-4677,-4644,-4442,-4387,-4279,-4332,-4241,-4302,-4207,-4286,-4313,-4187,-4040,-4357,-4548,-4464,-4331,-4624,-4591,-4407,-4471,-4610,-4696,-4647,-4479,-4421,-4377,-4384,-4257,-4288,-4286,-4195,-4300,-4213,-4106,-4370,-4585,-4454,-4465,-4454,-4612,-4320,-4465,-4625,-4659,-4675,-4508,-4461,-4371,-4259,-4238,-4352,-4243,-4106,-4314,-4246,-4113,-4342,-4489,-4408,-4467,-4462,-4587,-4444,-4518,-4646,-4603,-4662,-4528,-4443,-4365,-4210,-4182,-4245,-4229,-4147,-4293,-4221,-4104,-4471,-4334,-4358,-4519,-4422,-4559,-4361,-4531,-4632,-4612,-4636,-4511,-4440,-4354,-4234,-4178,-4211,-4217,-4145,-4275,-4220,-4109],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
