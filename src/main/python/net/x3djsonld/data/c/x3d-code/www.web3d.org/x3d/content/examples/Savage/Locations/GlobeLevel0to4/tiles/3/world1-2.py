###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    GeoViewpoint(description='GeoViewpoint_3_12',geoSystem=['GDC'],position=(-56.291665660871615,-67.54166331393873,3746250.1116469502),orientation=(-1,0,0,1.57),
      geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])),
    GeoLOD(center=(-56.291665660871615,-67.54166331393873,0.0),range=4495500.0,child1Url=['../../tiles/4/world2-4.x3d'],child2Url=['../../tiles/4/world2-5.x3d'],child3Url=['../../tiles/4/world3-4.x3d'],child4Url=['../../tiles/4/world3-5.x3d'],
      geoOrigin=GeoOrigin(USE='ORIGIN'),
      rootNode=[
      Group(
        children=[
        Shape(
          appearance=Appearance(
            material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
            texture=ImageTexture(url=['../../images/3/world1-2.jpg'],repeatS=False,repeatT=False)),
          geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-67.54166599614774,-90.04166398449098,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=21,xSpacing=2.25,zDimension=22,zSpacing=1.0714287,height=[-4243,-3932,-3798,-3773,-3751,-3934,-3319,-550,-288,-532,-212,832,-58,-62,-493,-461,-2388,-3103,-3397,-3521,-3779,-4350,-4349,-4259,-4276,-4144,-4005,-3689,-2924,-408,-527,-203,1386,-153,-160,-516,-666,-2486,-3314,-3883,-3986,-4134,-4427,-4460,-4434,-4425,-4270,-4085,-3645,-3707,-3035,-367,-482,-301,796,7,-347,-481,-1470,-3039,-3569,-4159,-4297,-4508,-4657,-4567,-4531,-4241,-4165,-3740,-3770,-3651,-3305,-451,-539,178,-25,-471,-407,-1008,-2896,-3594,-4057,-4433,-4697,-4301,-4700,-4637,-4360,-4257,-4104,-3875,-3724,-3498,-3089,-428,-378,-31,182,-409,-494,-1990,-3264,-3088,-4457,-4748,-4816,-4799,-4802,-4619,-4702,-4560,-4223,-4050,-3982,-3691,-3204,-1370,-193,-975,-179,-242,-2347,-3419,-3448,-2629,-4860,-4834,-4837,-4710,-4788,-4819,-4666,-4507,-4326,-4140,-4078,-2882,-3438,-3110,-238,-551,-333,-2588,-3259,-1347,-376,-4929,-4118,-4787,-4813,-4923,-4967,-4712,-4374,-4319,-4093,-3645,-3273,-3650,-3559,-4178,-4170,-2724,-3525,-1623,-1168,366,-4772,-5057,-5110,-5037,-5097,-5009,-4767,-4677,-4418,-3682,-3623,-3789,-3866,-3946,-3830,-3551,-3399,-3182,-3886,-3831,-1905,-4926,-5164,-5007,-5060,-4923,-4961,-4842,-4684,-4090,-3524,-3686,-3053,-3675,-2703,-3568,-3829,-4106,-3900,-3364,-3019,-2843,-4682,-5098,-5301,-4552,-4834,-4673,-4538,-4581,-4224,-3969,-4110,-4234,-3637,-4021,-3182,-4093,-4192,-3108,-3937,-3305,-3197,-5304,-5125,-5050,-5086,-4458,-4499,-4299,-4475,-3989,-1985,-180,-3760,-3955,-4307,-4043,-4584,-4518,-4520,-3632,-3775,-4084,-4572,-5148,-4830,-5005,-4426,-4318,-3980,-4357,-1911,0,30,-1049,-3255,-4209,-3916,-3391,-3361,-4245,-3992,-3941,-3876,-4828,-4995,-5082,-4738,-4590,-4202,-3932,-2448,2,-41,70,-100,-356,-125,-86,-1225,-1430,-3737,-3583,-3736,-3542,-4974,-4928,-5012,-4595,-4293,-4099,-4231,-2,418,214,-53,-124,-371,-480,-507,-1890,-3076,-2467,-2295,-1901,-2344,-4828,-4817,-4698,-4519,-4260,-3959,-3972,0,150,106,-84,-139,-222,9,40,-981,-1809,-2326,-2472,-2643,-2842,-4815,-4605,-4462,-4350,-4095,-3757,-3767,34,330,262,-67,-106,-148,-57,-137,-530,-1543,-2046,-2651,-2613,-1955,-4399,-4689,-4423,-4488,-4204,-3886,-2248,390,308,431,-27,-108,-161,-164,-321,-522,-1449,-2393,-3209,-2235,-3349,-4427,-4484,-4345,-4333,-4129,-3820,-2101,11,1582,459,165,-109,-164,-229,-788,-830,-3876,-6191,-6029,-5536,-5803,-4121,-4301,-4178,-3707,-3844,-3603,-3688,2,964,899,162,-42,-121,-325,-2215,-4538,-5859,-6258,-6112,-6018,-5985,-3811,-3536,-4242,-3550,-3223,-3485,-3119,16,502,282,307,-85,-69,-201,-2457,-4790,-6001,-6134,-5875,-5630,-5354,-3812,-3928,-4217,-3416,-3024,-3509,-3016,120,296,386,213,-79,-69,-196,-2388,-4844,-6045,-6089,-5827,-5619,-5330],
            geoOrigin=GeoOrigin(USE='ORIGIN')))])])])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
