###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world8-3.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-0.041663984490980965,-112.54166465504323,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4109,-4036,-3850,-3889,-3890,-3747,-3773,-3659,-3508,-3272,-3310,-3314,-3309,-3361,-3303,-3335,-3265,-3409,-3408,-3347,-3644,6,-4076,-3977,-3913,-3851,-3751,-3783,-3726,-3683,-3458,-3391,-3299,-3281,-3297,-3308,-3241,-3267,-3350,-3346,-3339,-3270,732,-132,-4062,-3925,-3915,-3816,-3738,-3792,-3725,-3711,-3440,-3302,-3233,-3244,-3248,-3252,-3275,-3320,-3277,-3381,-3200,-3341,152,-177,-3972,-3904,-3819,-3730,-3739,-3656,-3690,-3778,-3486,-3345,-3266,-3256,-3291,-3360,-3254,-3375,-3339,-3244,-3222,-2904,-2988,-955,-3942,-3929,-3835,-3728,-3620,-3682,-3658,-3618,-3500,-3332,-3325,-3193,-3357,-3390,-3242,-3282,-3398,-3106,-2843,-2714,-2196,-1594,-3930,-3879,-3753,-3654,-3607,-3623,-3586,-3530,-3462,-3406,-3324,-3415,-3477,-3461,-3267,-3097,-3248,-3140,-2822,-2265,-1892,-1875,-3842,-3822,-3779,-3748,-3674,-3664,-3660,-3516,-3458,-3396,-3258,-3225,-3368,-3216,-3010,-3272,-2920,-2858,-2622,-2278,-2253,-2044,-3817,-3740,-3731,-3746,-3775,-3679,-3601,-3543,-3536,-3403,-3154,-2807,-3151,-3515,-3235,-2467,-2552,-2670,-2569,-2112,-2142,-2050,-3843,-3791,-3767,-3794,-3822,-3778,-3533,-3572,-3537,-3379,-3185,-3317,-3398,-3081,-2940,-2883,-3044,-2597,-2655,-2487,-2272,-1939,-3867,-3850,-3836,-3833,-3768,-3779,-3645,-3613,-3609,-3330,-3177,-3317,-3586,-2921,-3710,-3281,-3222,-2887,-2743,-2614,-2187,-2205,-3902,-3977,-3869,-3833,-3818,-3817,-3751,-3676,-3504,-3287,-3325,-3330,-3303,-3486,-3402,-3585,-3359,-2915,-3002,-2614,-2681,-2515,-3983,-3974,-3941,-3870,-4010,-3801,-3734,-3641,-3526,-3330,-3246,-3380,-3421,-1867,-3544,-3376,-3626,-3316,-2803,-3056,-2909,-3009,-3932,-3906,-3915,-3900,-3914,-3842,-3745,-3762,-3415,-3232,-3181,-3334,-3507,-3443,-3585,-3539,-3554,-3455,-3584,-3216,-3416,-3143,-3979,-3982,-4020,-3956,-3809,-3772,-3810,-3629,-3364,-3263,-3283,-3238,-3444,-3478,-3532,-3581,-3498,-3543,-3539,-3564,-3510,-3289,-4027,-4110,-3857,-3880,-3825,-3785,-3775,-3666,-3445,-3195,-3226,-3324,-3349,-3541,-3622,-3655,-3570,-3577,-3565,-3741,-3717,-3548,-3963,-4187,-4018,-3724,-3835,-3870,-3768,-3651,-3374,-3150,-3196,-3325,-3195,-3533,-3494,-3369,-3644,-3564,-3616,-3668,-3696,-3625,-3866,-4188,-3950,-3758,-3836,-3825,-3764,-3703,-3384,-3177,-3239,-3351,-2931,-3525,-3660,-3709,-3697,-3633,-3593,-3638,-3621,-3640,-3877,-4160,-3871,-3650,-3972,-3822,-3750,-3624,-3397,-3052,-3132,-3242,-3357,-3547,-3443,-3634,-3684,-3737,-3629,-3554,-3668,-3564,-3936,-4021,-3647,-3940,-3734,-3776,-3657,-3539,-3339,-3127,-3172,-3381,-3485,-3134,-3649,-3240,-3673,-3660,-3624,-3592,-3607,-3445,-4024,-3855,-3801,-3972,-4061,-3602,-3674,-3706,-3154,-3041,-3210,-3269,-2548,-3459,-3673,-3662,-3650,-3649,-3567,-3415,-3462,-3421,-3976,-3879,-3646,-3822,-3601,-3397,-3410,-3179,-3178,-3246,-3379,-3275,-3528,-3899,-3791,-3745,-3608,-3461,-3647,-3606,-3495,-3423,-3933,-3801,-3507,-3682,-3405,-3543,-3367,-3215,-2972,-3318,-3410,-3367,-3456,-3731,-3929,-3802,-3663,-3771,-3629,-3679,-3726,-3485,-3943,-3770,-3971,-3807,-3442,-3669,-3452,-3067,-2978,-3326,-3225,-3538,-3781,-3796,-4000,-3824,-3964,-3748,-3733,-3699,-3632,-3684,-3955,-3640,-3802,-3714,-3350,-3469,-3346,-3217,-3006,-3259,-3400,-3628,-3767,-4092,-4286,-3904,-3874,-3829,-3690,-3674,-3713,-3695],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
