###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0.6,0.6,0.6)),
        texture=ImageTexture(url=['../../images/5/singapore23-13.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(1.4130926478938615,103.77655544367725,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=37,xSpacing=3.9897318E-4,zDimension=23,zSpacing=3.96896E-4,height=[25,27,32,38,45,51,54,54,50,44,39,34,34,35,38,42,46,50,53,56,62,68,69,67,63,56,51,48,47,50,54,57,59,57,55,50,47,25,26,32,40,46,52,53,54,50,45,40,36,33,32,35,39,43,46,50,54,60,67,68,65,62,55,51,48,48,51,54,57,59,59,58,55,52,28,28,33,39,46,51,51,51,47,42,39,37,34,32,33,37,41,45,49,53,58,64,66,65,62,56,52,50,50,52,54,56,59,60,60,58,56,31,30,34,38,45,50,49,47,43,39,38,38,35,32,33,35,39,43,48,52,56,60,63,64,63,58,55,53,52,53,53,56,58,60,61,60,60,31,32,36,39,46,51,49,46,44,41,41,41,38,34,34,35,39,43,46,49,53,56,59,62,62,59,57,55,53,54,54,55,57,58,59,59,58,30,33,36,41,46,51,49,47,46,46,46,46,42,37,35,36,38,42,44,46,48,51,54,59,61,60,59,57,55,55,55,55,56,56,57,55,54,28,31,35,40,45,50,49,48,49,50,50,50,45,39,37,37,38,40,42,44,46,48,51,56,58,59,60,59,58,56,54,53,52,52,51,50,50,26,27,32,38,43,48,48,49,51,53,54,54,49,42,39,37,38,38,40,42,44,46,48,52,55,59,61,61,60,57,54,51,48,46,44,45,46,26,26,30,35,40,44,46,49,52,56,56,54,50,44,42,40,39,38,38,41,43,45,47,50,53,57,60,60,59,57,54,49,45,42,40,41,43,28,25,28,32,36,41,45,49,53,58,57,55,51,47,45,44,41,38,38,39,41,44,46,49,51,56,58,57,57,57,54,49,44,40,37,39,41,32,26,29,31,36,41,46,50,54,58,58,56,53,51,49,48,45,41,39,40,42,45,47,50,52,54,56,56,57,57,55,49,43,40,36,37,38,37,30,31,31,37,43,47,52,55,59,58,58,57,56,55,53,49,46,44,42,43,46,48,51,53,54,55,56,58,59,57,50,44,40,36,36,35,39,34,33,31,36,42,46,51,54,58,58,59,59,59,58,56,52,48,45,43,44,47,50,53,56,56,57,58,59,60,58,52,45,41,37,36,35,41,37,34,32,35,38,43,47,52,56,57,59,59,60,59,57,53,47,44,44,45,48,51,56,59,61,62,63,62,61,58,53,48,43,39,37,35,43,41,38,34,36,37,40,44,49,54,56,58,58,59,58,57,52,46,43,43,45,49,53,58,61,63,64,64,63,61,58,54,50,46,41,38,35,47,45,43,40,38,37,39,40,46,52,55,57,57,57,55,53,48,43,42,43,46,51,56,61,64,64,64,64,63,61,59,56,52,48,43,39,36,51,50,48,46,43,39,39,39,43,49,52,55,55,55,53,50,47,43,42,44,47,52,57,62,64,65,64,64,64,62,60,57,54,49,44,40,37,56,55,54,53,49,45,42,39,41,45,48,52,52,52,51,50,48,46,46,48,51,54,57,61,64,67,67,66,65,64,62,59,55,50,44,40,37,60,61,61,61,56,51,45,40,41,42,45,49,51,52,52,51,51,50,51,52,54,54,56,60,64,69,70,68,66,63,61,58,54,50,45,41,37,65,67,67,68,63,58,51,45,42,40,43,47,51,54,56,57,58,58,57,56,55,53,55,59,64,71,73,70,67,63,59,56,52,50,46,42,40,70,72,72,73,69,65,58,50,45,40,42,46,50,56,60,64,66,67,64,59,55,52,53,58,63,71,74,72,68,63,57,54,51,50,47,45,43,74,74,74,73,73,72,65,59,51,44,44,45,50,58,65,72,75,76,71,61,54,50,50,55,61,68,72,73,69,62,56,53,51,50,49,49,48,75,73,73,73,75,76,72,66,58,50,47,45,50,57,66,77,81,82,74,63,54,49,48,52,58,66,71,73,70,62,55,53,51,51,52,52,52],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(1.3519706612479037,103.81964454606431,0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
