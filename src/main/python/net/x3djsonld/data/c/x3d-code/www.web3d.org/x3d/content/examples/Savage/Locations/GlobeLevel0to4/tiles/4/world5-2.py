###############################################
#
# Now available: developmental python x3d.py package on PyPi for import.
#   This approach greatly simplifies Python X3D deployment and use.
#   https://pypi.org/project/x3d
#
# Installation:
#       pip install x3d
# or
#       python -m pip install x3d
#
# Developer options for loading x3d package:
#
#    from x3d import *  # preferred approach, terser source that avoids x3d.* class prefixes
#
# or
#    import x3d         # traditional way to subclass x3d package, all classes require x3d.* prefix
#                       # but python source is very verbose, for example x3d.Material x3d.Shape etc.
#                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports this option.

from x3d import *

###############################################

newModel=X3D(profile='Immersive',version='3.1',
  head=head(
    children=[
    component(name='Geospatial',level=1)]),
  Scene=Scene(
    children=[
    Shape(
      appearance=Appearance(
        material=Material(diffuseColor=(0.4,0.6,0.3),emissiveColor=(0,0.05,0)),
        texture=ImageTexture(url=['../../images/4/world5-2.jpg'],repeatS=False,repeatT=False)),
      geometry=GeoElevationGrid(colorPerVertex=False,geoGridOrigin=(-33.79166499031936,-135.0416653255955,0.0),geoSystem=["GD"],normalPerVertex=False,xDimension=22,xSpacing=1.0714287,zDimension=24,zSpacing=0.48913044,height=[-4643,-4323,-3668,-2778,-4030,-3680,-3887,-3889,-3916,-2200,-4212,-4061,-4171,-3854,-3886,-3674,-3840,-3295,-3805,-3360,-3331,-3033,-4592,-4488,-4376,-3258,-4174,-4699,-2526,-3753,-4010,-4050,-3948,-4049,-3994,-3801,-3699,-3798,-3285,-3365,-3680,-3500,-3264,-2812,-4622,-4527,-4312,-3998,-3442,-3305,-3446,-3642,-3607,-3987,-4209,-4058,-3558,-3407,-3326,-3623,-3836,-2995,-3309,-2218,-2803,-2694,-4495,-4399,-4437,-3867,-4341,-4028,-3779,-3831,-3048,-2809,-3857,-3388,-3614,-3587,-3047,-2603,-3441,-3131,-2874,-2753,-2900,-2746,-4226,-4212,-4301,-4053,-3515,-3037,-4110,-2340,-3661,-2588,-3540,-3692,-3173,-3410,-3282,-3473,-3558,-3386,-2977,-2888,-2898,-2705,-4232,-4328,-4023,-3750,-4011,-3685,-3826,-4014,-3679,-3453,-3460,-2870,-3210,-3328,-3447,-3381,-3407,-3473,-3273,-3035,-2896,-2926,-4099,-3834,-4341,-3615,-3795,-3090,-3848,-3831,-3715,-3747,-3703,-3028,-3662,-3510,-3548,-3467,-3242,-3295,-3277,-3121,-2937,-2660,-4350,-4107,-4237,-3948,-4007,-3710,-3554,-3815,-3936,-3796,-3857,-3589,-3616,-3483,-3496,-3392,-3442,-3357,-3227,-3042,-3045,-2910,-4277,-3708,-3870,-4297,-4213,-3939,-3970,-3866,-3773,-3909,-3725,-3748,-3687,-3513,-3675,-3615,-3392,-3459,-3358,-2624,-2968,-2710,-4217,-4275,-4331,-4247,-4291,-4126,-4104,-3971,-3888,-3912,-3708,-3744,-3611,-3720,-3666,-3529,-2819,-3358,-3498,-3045,-2919,-2829,-4221,-4188,-4251,-4129,-4108,-3841,-4046,-3979,-3984,-3797,-3691,-3728,-3738,-3628,-3516,-3599,-3754,-3513,-3477,-3261,-3097,-2827,-4215,-4208,-4194,-4024,-4036,-3806,-3735,-4074,-4028,-3806,-3716,-3599,-3650,-3525,-3354,-3452,-3574,-3359,-3378,-3240,-3127,-2457,-4233,-4158,-4169,-4054,-3940,-3981,-4184,-4109,-3850,-3728,-3859,-3705,-3560,-3453,-3067,-3311,-3571,-3399,-3361,-3239,-3068,-2824,-4150,-4169,-4171,-4073,-3889,-4065,-3953,-3876,-3454,-3525,-3525,-3708,-3479,-3520,-3703,-3274,-3415,-3383,-3286,-3066,-3061,-2790,-4180,-4103,-4033,-4019,-4092,-3857,-3858,-3412,-3853,-3900,-3749,-3541,-3452,-3546,-3294,-3810,-3425,-3274,-3168,-3000,-2916,-2552,-4272,-4136,-3987,-3879,-3896,-4018,-3826,-3602,-3826,-3726,-3522,-3439,-3537,-3387,-3365,-3232,-3327,-3278,-3364,-2451,-2540,-2658,-4303,-4026,-4132,-3663,-3460,-3305,-3814,-3955,-3795,-3703,-3611,-3575,-3400,-3201,-3291,-3108,-3225,-3284,-2689,-3048,-2872,-2763,-4272,-4148,-4141,-3954,-3680,-3694,-3821,-3785,-3600,-3669,-3366,-3696,-3481,-3470,-3353,-2952,-2486,-3393,-2524,-2952,-2896,-2918,-4089,-3884,-4136,-4103,-4002,-4052,-3720,-3395,-3382,-3366,-3287,-3417,-3424,-3012,-2876,-3202,-3206,-2574,-2966,-3060,-2942,-3166,-4093,-3859,-4031,-3795,-3753,-3661,-3605,-3715,-3481,-3471,-3330,-3400,-3140,-3027,-2788,-3176,-3070,-2390,-2870,-3263,-3109,-3045,-4014,-3807,-3930,-3801,-3633,-3591,-3590,-3381,-2021,-3141,-2358,-3053,-3262,-3102,-3150,-2886,-2384,-2746,-3015,-3390,-3440,-3214,-4089,-4064,-3354,-3666,-4009,-3326,-2697,-2855,-3018,-3396,-3021,-3337,-3561,-3287,-3379,-2908,-3167,-3347,-2740,-3150,-3429,-3426,-3965,-4228,-3910,-2794,-3695,-3299,-2894,-3682,-3071,-3364,-3438,-3510,-3454,-3361,-3355,-3515,-3357,-3178,-2859,-2905,-3450,-3407,-3817,-3885,-3591,-3502,-3357,-3367,-3139,-3572,-3442,-3357,-3502,-3540,-3535,-3402,-3501,-3505,-3331,-3118,-2930,-3147,-3409,-3359],
        geoOrigin=GeoOrigin(DEF='ORIGIN',geoCoords=(0.0,0.0,-6378137.0),geoSystem=['GDC'])))])
) # X3D model complete

###############################################
# Self-test diagnostics
###############################################

if        metaDiagnostics(newModel): # built-in utility method in X3D class
    print(metaDiagnostics(newModel))
print('check  newModel.XML() serialization...')
newModelXML = newModel.XML() # test export method XML() for exceptions
# print(newModelXML) # debug

print ("python x3d.py load successful")
