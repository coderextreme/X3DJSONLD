<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Full" version="3.3" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.3.xsd" ><head><meta name="comment" content="World of Titania"></meta>
<meta name="created" content="Fri, 07 Oct 2016 02:56:59 GMT"></meta>
<meta name="creator" content="Holger Seelig"></meta>
<meta name="generator" content="Titania V2.0.1, http://titania.create3000.de"></meta>
<meta name="identifier" content="file:///home/holger/Projekte/Cobweb/excite/tests/Components/Shaders/PointFloatVertexAttribute.x3d"></meta>
<meta name="modified" content="Wed, 19 Oct 2016 08:51:04 GMT"></meta>
</head>
<Scene><ProtoDeclare name="Grid"><ProtoInterface><field name="translation" accessType="inputOutput" type="SFVec3f"></field>
<field name="rotation" accessType="inputOutput" type="SFRotation"></field>
<field name="scale" accessType="inputOutput" type="SFVec3f" value="1 1 1"></field>
<field name="dimension" accessType="inputOutput" type="MFInt32" value="10 10 10"></field>
<field name="majorLineEvery" accessType="inputOutput" type="MFInt32" value="5 5 5"></field>
<field name="majorLineOffset" accessType="inputOutput" type="MFInt32" value="0 0 0"></field>
<field name="color" accessType="inputOutput" type="SFColor" value="0.5 0.5 0.5"></field>
<field name="transparency" accessType="inputOutput" type="SFFloat" value="0.61803"></field>
<field name="lineColor" accessType="inputOutput" type="SFColor" value="1 0.7 0.7"></field>
<field name="lineTransparency" accessType="inputOutput" type="SFFloat" value="0.8"></field>
<field name="majorLineColor" accessType="inputOutput" type="SFColor" value="1 0.7 0.7"></field>
<field name="majorLineTransparency" accessType="inputOutput" type="SFFloat" value="0.6"></field>
<field name="solid" accessType="initializeOnly" type="SFBool" value="true"></field>
</ProtoInterface>
<ProtoBody><Transform><IS><connect nodeField="translation" protoField="translation"></connect>
<connect nodeField="rotation" protoField="rotation"></connect>
<connect nodeField="scale" protoField="scale"></connect>
</IS>
<Transform DEF="Plane" rotation="-3.09087122910219e-8 0.70710528118436 0.707108281185553 3.14159" scale="10 10 1"><Shape><Appearance><Material DEF="Material2" diffuseColor="0 0 0"><IS><connect nodeField="emissiveColor" protoField="color"></connect>
<connect nodeField="transparency" protoField="transparency"></connect>
</IS>
</Material>
</Appearance>
<Rectangle2D containerField="geometry" size="1 1"><IS><connect nodeField="solid" protoField="solid"></connect>
</IS>
</Rectangle2D>
</Shape>
</Transform>
<Shape DEF="MajorGrid"><Appearance><Material DEF="MajorMaterial"><IS><connect nodeField="emissiveColor" protoField="majorLineColor"></connect>
<connect nodeField="transparency" protoField="majorLineTransparency"></connect>
</IS>
</Material>
</Appearance>
<IndexedLineSet containerField="geometry" DEF="MajorGrid_1" coordIndex="0 1 -1 2 3 -1 4 5 -1 6 7 -1 8 9 -1 10 11 -1"><Coordinate containerField="coord" point="-5 0 -5.25 -5 0 5.25 0 0 -5.25 0 0 5.25 5 0 -5.25 5 0 5.25 -5.25 0 -5 5.25 0 -5 -5.25 0 0 5.25 0 0 -5.25 0 5 5.25 0 5"></Coordinate>
</IndexedLineSet>
</Shape>
<Shape DEF="MinorGrid"><Appearance><Material DEF="MinorMaterial"><IS><connect nodeField="emissiveColor" protoField="lineColor"></connect>
<connect nodeField="transparency" protoField="lineTransparency"></connect>
</IS>
</Material>
</Appearance>
<IndexedLineSet containerField="geometry" DEF="MinorGrid_1" coordIndex="0 1 -1 2 3 -1 4 5 -1 6 7 -1 8 9 -1 10 11 -1 12 13 -1 14 15 -1 16 17 -1 18 19 -1 20 21 -1 22 23 -1 24 25 -1 26 27 -1 28 29 -1 30 31 -1"><Coordinate containerField="coord" point="-4 0 -5 -4 0 5 -3 0 -5 -3 0 5 -2 0 -5 -2 0 5 -1 0 -5 -1 0 5 1 0 -5 1 0 5 2 0 -5 2 0 5 3 0 -5 3 0 5 4 0 -5 4 0 5 -5 0 -4 5 0 -4 -5 0 -3 5 0 -3 -5 0 -2 5 0 -2 -5 0 -1 5 0 -1 -5 0 1 5 0 1 -5 0 2 5 0 2 -5 0 3 5 0 3 -5 0 4 5 0 4"></Coordinate>
</IndexedLineSet>
</Shape>
<Shape DEF="MajorPoints"><Appearance><LineProperties linewidthScaleFactor="6"></LineProperties>
<Material USE="MajorMaterial"></Material>
</Appearance>
<PointSet containerField="geometry" DEF="MajorPoints_1"><Coordinate containerField="coord" point="0 -5 0 0 0 0 0 5 0"></Coordinate>
</PointSet>
</Shape>
<Shape DEF="MinorPoints"><Appearance><LineProperties linewidthScaleFactor="4"></LineProperties>
<Material USE="MinorMaterial"></Material>
</Appearance>
<PointSet containerField="geometry" DEF="MinorPoints_1"><Coordinate containerField="coord" point="0 -4 0 0 -3 0 0 -2 0 0 -1 0 0 1 0 0 2 0 0 3 0 0 4 0"></Coordinate>
</PointSet>
</Shape>
</Transform>
<Script DEF="GridScript" directOutput="true" mustEvaluate="true"><field name="dimension" accessType="inputOutput" type="MFInt32"></field>
<field name="majorLineEvery" accessType="inputOutput" type="MFInt32"></field>
<field name="majorLineOffset" accessType="inputOutput" type="MFInt32"></field>
<field name="plane" accessType="initializeOnly" type="SFNode"><Transform USE="Plane"></Transform>
</field>
<field name="majorGrid" accessType="initializeOnly" type="SFNode"><IndexedLineSet USE="MajorGrid_1"></IndexedLineSet>
</field>
<field name="minorGrid" accessType="initializeOnly" type="SFNode"><IndexedLineSet USE="MinorGrid_1"></IndexedLineSet>
</field>
<field name="majorPoints" accessType="initializeOnly" type="SFNode"><PointSet USE="MajorPoints_1"></PointSet>
</field>
<field name="minorPoints" accessType="initializeOnly" type="SFNode"><PointSet USE="MinorPoints_1"></PointSet>
</field>
<IS><connect nodeField="dimension" protoField="dimension"></connect>
<connect nodeField="majorLineEvery" protoField="majorLineEvery"></connect>
<connect nodeField="majorLineOffset" protoField="majorLineOffset"></connect>
</IS>
<![CDATA[javascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	// Plane

	plane .scale = new SFVec3f (dimension [0], dimension [2], 1);

	// Grid

	generateGrid (true, majorGrid);
	generateGrid (false, minorGrid);

	// Points

	generatePoints (true,  majorPoints .coord .point);
	generatePoints (false, minorPoints .coord .point);
}

function generateGrid (major, grid)
{
	var point       = grid .coord .point;
	var coordIndex  = new MFInt32 ();
	var scaleX1_2   = dimension [0] / 2;
	var scaleZ1_2   = dimension [2] / 2;
	var majorAdd    = major / 4;
	var p           = 0;

	for (var i = 0, size = dimension [0] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 0))
			continue;

		var x = -scaleX1_2 + i;

		point [p]     = new SFVec3f (x, 0, -scaleZ1_2 - majorAdd);
		point [p + 1] = new SFVec3f (x, 0,  scaleZ1_2 + majorAdd);
		coordIndex [coordIndex .length] = p;
		coordIndex [coordIndex .length] = p + 1;
		coordIndex [coordIndex .length] = -1;
			
		p += 2;
	}

	for (var i = 0, size = dimension [2] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 2))
			continue;

		var z = -scaleZ1_2 + i;

		point [p]     = new SFVec3f (-scaleX1_2 - majorAdd, 0, z);
		point [p + 1] = new SFVec3f ( scaleX1_2 + majorAdd, 0, z);
		coordIndex [coordIndex .length] = p;
		coordIndex [coordIndex .length] = p + 1;
		coordIndex [coordIndex .length] = -1;
		
		p += 2;
	}

	point .length = p;

	grid .set_coordIndex = coordIndex;
}

function generatePoints (major, point)
{
	var scaleY1_2 = -dimension [1] / 2;
	var p         = 0;

	for (var i = 0, size = dimension [1] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 1))
			continue;

		point [p] = new SFVec3f (0, scaleY1_2 + i, 0);
		++ p;
	}

	point .length = p;
}

function isMajorLine (i, index)
{
	for (var d = index; d < majorLineEvery .length; d += 3)
	{
		if (isMajor (i, dimension [index], majorLineEvery [d], majorLineOffset [d]))
			return true;
	}

	return false;
}

function isMajor (i, dimension, majorLineEvery, majorLineOffset)
{
	if (majorLineEvery)
	{
		var index = Math .floor (i - dimension / 2 - majorLineOffset);

		return !(index % majorLineEvery);
	}

	return false;
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<WorldInfo><MetadataSet containerField="metadata" name="Titania" DEF="Titania" reference="http://titania.create3000.de"><MetadataSet name="AngleGrid" DEF="AngleGrid" reference="http://titania.create3000.de" containerField="value"><MetadataBoolean name="enabled" DEF="enabled" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
</MetadataSet>
<MetadataSet name="Grid" DEF="Grid" reference="http://titania.create3000.de"><MetadataBoolean name="enabled" DEF="enabled_1" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
</MetadataSet>
<MetadataSet name="NavigationInfo" DEF="NavigationInfo" reference="http://titania.create3000.de"><MetadataString name="type" DEF="type" reference="http://titania.create3000.de" value="&quot;NONE&quot;" containerField="value"></MetadataString>
</MetadataSet>
<MetadataSet name="Viewpoint" DEF="Viewpoint" reference="http://titania.create3000.de"><MetadataDouble name="position" DEF="position" reference="http://titania.create3000.de" value="0 0 10" containerField="value"></MetadataDouble>
<MetadataDouble name="orientation" DEF="orientation" reference="http://titania.create3000.de" value="0 0 1 0"></MetadataDouble>
<MetadataDouble name="centerOfRotation" DEF="centerOfRotation" reference="http://titania.create3000.de" value="0 0 0"></MetadataDouble>
</MetadataSet>
<MetadataSet name="Selection" DEF="Selection" reference="http://titania.create3000.de"><MetadataSet name="previous" DEF="previous" reference="http://titania.create3000.de" containerField="value"><Transform DEF="Rectangle2D" containerField="value"><Shape><Appearance><LineProperties linewidthScaleFactor="10"></LineProperties>
<Material></Material>
<ComposedShader><ShaderPart type="VERTEX"><![CDATA[data:text/plain,

uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;

uniform float x3d_LinewidthScaleFactor;

attribute vec4 x3d_Vertex;
attribute vec4 offset;

void
main ()
{
	gl_PointSize = x3d_LinewidthScaleFactor;
	
	vec4 vertex = x3d_Vertex + offset;

	gl_Position = x3d_ProjectionMatrix * x3d_ModelViewMatrix * vertex;
}]]></ShaderPart>
<ShaderPart type="FRAGMENT"><![CDATA[data:text/plain,

void
main ()
{
	gl_FragColor = vec4 (1.0, 0.0, 0.0, 1.0);
}]]></ShaderPart>
</ComposedShader>
</Appearance>
<PointSet containerField="geometry"><FloatVertexAttribute name="offset" value="-1 -1 0 0 1 -1 0 0 1 1 0 0 -1 1 0 0"></FloatVertexAttribute>
<Coordinate containerField="coord" point="-1 -1 0 1 -1 0 1 1 0 -1 1 0"></Coordinate>
</PointSet>
</Shape>
</Transform>
</MetadataSet>
<MetadataSet name="children" DEF="children" reference="http://titania.create3000.de"><Transform DEF="Text" translation="-5.01454 -2.98505 0" containerField="value"><Shape><Appearance><Material></Material>
</Appearance>
<Text containerField="geometry" string="&quot;Must show a 4x4 rectangle.&quot;" solid="true"><FontStyle DEF="_1" size="0.39"></FontStyle>
</Text>
</Shape>
</Transform>
</MetadataSet>
</MetadataSet>
</MetadataSet>
</WorldInfo>
<Viewpoint></Viewpoint>
<ProtoInstance name="Grid"><fieldValue name="rotation" value="1 0 0 1.5707963267949"></fieldValue>
<fieldValue name="transparency" value="0.8"></fieldValue>
</ProtoInstance>
<Transform USE="Rectangle2D"></Transform>
<Transform USE="Text"></Transform>
</Scene>
</X3D>