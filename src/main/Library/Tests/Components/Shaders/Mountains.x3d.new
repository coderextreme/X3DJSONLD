<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Full" version="3.3" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.3.xsd" ><head><meta name="comment" content="World of Titania"></meta>
<meta name="created" content="Tue, 11 Apr 2017 00:24:19 GMT"></meta>
<meta name="creator" content="Holger Seelig"></meta>
<meta name="generator" content="Titania V3.0.2, http://titania.create3000.de"></meta>
<meta name="identifier" content="file:///home/holger/Projekte/Cobweb/excite/tests/Components/Shaders/Mountains.x3d"></meta>
<meta name="modified" content="Sun, 16 Apr 2017 03:38:37 GMT"></meta>
<meta name="outputStyle" content="Nicest"></meta>
</head>
<Scene><ExternProtoDeclare name="SFNode" url="&quot;, &quot; &quot;https://cdn.rawgit.com/create3000/Library/master/Prototypes/1/1.0/Fields/SFNode.x3dv, &quot; &quot;http://cdn.rawgit.com/create3000/Library/master/Prototypes/1/1.0/Fields/SFNode.x3dv, &quot; &quot;https://rawgit.com/create3000/Library/master/Prototypes/1/1.0/Fields/SFNode.x3dvhttp://rawgit.com/create3000/Library/master/Prototypes/1/1.0/Fields/SFNode.x3dv&quot;"><field name="set_triggerTime" accessType="inputOnly" type="SFTime"></field>
<field name="keyValue" accessType="inputOutput" type="SFNode"></field>
<field name="value_changed" accessType="outputOnly" type="SFNode"></field>
</ExternProtoDeclare>
<WorldInfo><MetadataSet containerField="metadata" name="Titania" DEF="Titania" reference="http://titania.create3000.de"><MetadataSet name="AngleGrid" DEF="AngleGrid" reference="http://titania.create3000.de" containerField="value"><MetadataBoolean name="enabled" DEF="enabled" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
</MetadataSet>
<MetadataSet name="Grid" DEF="Grid" reference="http://titania.create3000.de"><MetadataBoolean name="enabled" DEF="enabled_1" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
</MetadataSet>
<MetadataSet name="NavigationInfo" DEF="NavigationInfo" reference="http://titania.create3000.de"><MetadataString name="type" DEF="type" reference="http://titania.create3000.de" value="&quot;NONE&quot;" containerField="value"></MetadataString>
</MetadataSet>
<MetadataSet name="Viewpoint" DEF="Viewpoint" reference="http://titania.create3000.de"><MetadataDouble name="position" DEF="position" reference="http://titania.create3000.de" value="0 0 10" containerField="value"></MetadataDouble>
<MetadataDouble name="orientation" DEF="orientation" reference="http://titania.create3000.de" value="0 0 1 0"></MetadataDouble>
<MetadataDouble name="centerOfRotation" DEF="centerOfRotation" reference="http://titania.create3000.de" value="0 0 0"></MetadataDouble>
</MetadataSet>
<MetadataSet name="Selection" DEF="Selection" reference="http://titania.create3000.de"><MetadataSet name="previous" DEF="previous" reference="http://titania.create3000.de" containerField="value"><Transform DEF="Header" translation="-1.6905 0.857504 -1" scale="0.0672307 0.0672307 0.0672307" containerField="value"><Shape><Appearance><Material emissiveColor="1 1 1"></Material>
</Appearance>
<Text containerField="geometry" string="&quot;Mountains&quot;" solid="true"><FontStyle family="&quot;, &quot; &quot;UbuntuSANS&quot;" size="1.61" justify="&quot;, &quot; &quot;BEGINFIRST&quot;"></FontStyle>
</Text>
</Shape>
</Transform>
</MetadataSet>
<MetadataSet name="nodes" DEF="nodes" reference="http://titania.create3000.de"></MetadataSet>
</MetadataSet>
<MetadataSet name="AxonometricGrid" DEF="AxonometricGrid" reference="http://titania.create3000.de"><MetadataBoolean name="enabled" DEF="enabled_2" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
</MetadataSet>
<MetadataSet name="LayerSet" DEF="LayerSet" reference="http://titania.create3000.de"><MetadataInteger name="activeLayer" DEF="activeLayer" reference="http://titania.create3000.de" value="2" containerField="value"></MetadataInteger>
</MetadataSet>
</MetadataSet>
</WorldInfo>
<LayerSet order="1 2"><LayoutLayer><Layout size="1"></Layout>
<NavigationInfo type="&quot;NONE&quot;"></NavigationInfo>
<TimeSensor DEF="Timer" cycleInterval="10000" loop="true"></TimeSensor>
<ScalarInterpolator DEF="_1" key="0 1" keyValue="0 10000"></ScalarInterpolator>
<Transform DEF="Rectangle2D"><Shape><Appearance><Material></Material>
<ComposedShader DEF="WaterShader" language="GLSL"><field name="time" accessType="inputOutput" type="SFFloat"></field>
<field name="postEffects" accessType="inputOutput" type="SFBool" value="true"></field>
<field name="moveCamera" accessType="inputOutput" type="SFBool" value="true"></field>
<field name="cameraPos" accessType="inputOutput" type="SFVec3f" value="0 2 0"></field>
<field name="cameraLookat" accessType="inputOutput" type="SFVec3f" value="-2 -30 -80"></field>
<field name="sunDir" accessType="inputOutput" type="SFVec3f" value="3.2 1 -4"></field>
<field name="sunColour" accessType="inputOutput" type="SFColor" value="1 1 0.6"></field>
<field name="ambient" accessType="inputOutput" type="SFFloat" value="0.1"></field>
<field name="ao" accessType="inputOutput" type="SFBool"></field>
<field name="shadows" accessType="inputOutput" type="SFBool" value="true"></field>
<field name="fog" accessType="inputOutput" type="SFBool" value="true"></field>
<field name="fogC" accessType="inputOutput" type="SFFloat" value="0.14"></field>
<field name="fogB" accessType="inputOutput" type="SFFloat" value="0.28"></field>
<field name="snowLevel" accessType="inputOutput" type="SFFloat" value="0.276017"></field>
<field name="grassLevel" accessType="inputOutput" type="SFFloat" value="0.234662"></field>
<field name="offset" accessType="inputOutput" type="SFFloat" value="2.15753"></field>
<field name="param" accessType="inputOutput" type="SFFloat" value="0.1"></field>
<field name="texture0" accessType="initializeOnly" type="SFNode"><ImageTexture url="&quot;ggreynoise512.png&quot;"></ImageTexture>
</field>
<ShaderPart DEF="WaterVertexShader" type="VERTEX"><![CDATA[data:text/plain,

precision mediump float;

uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;

attribute vec4 x3d_Vertex;

varying vec4 vertex;

void main ()
{
	vertex = x3d_ModelViewMatrix * x3d_Vertex;

	gl_Position = x3d_ProjectionMatrix * vertex;
}]]></ShaderPart>
<ShaderPart DEF="WaterFragmentShader" type="FRAGMENT"><![CDATA[data:text/plain,

precision mediump float;

uniform float time;
uniform vec3 cameraPos;
uniform vec3 cameraLookat;
uniform vec3 sunDir;
uniform vec3 sunColour;
uniform float ambient;
uniform bool ao;
uniform bool shadows;
uniform bool postEffects;
uniform bool moveCamera;
uniform bool fog;
uniform float fogC;
uniform float fogB;
uniform float snowLevel;
uniform float grassLevel;
uniform float offset;
uniform float param;
uniform sampler2D texture0;

uniform ivec4 x3d_Viewport;

vec2 resolution = vec2 (0.0);

//#define AA

#define GAMMA 0.8
#define CONTRAST 1.2
#define SATURATION 1.4
#define BRIGHTNESS 1.4
#define SHADOW_RAY_DEPTH 64
#define AO_SAMPLES 4
#ifndef AA
#define RAY_DEPTH 200
#define MAX_DEPTH 40.0
#define FRACT_NOISE_DEPTH 7
#define DISTANCE_MIN 0.003
#else
#define RAY_DEPTH 250
#define MAX_DEPTH 50.0
#define FRACT_NOISE_DEPTH 9
#define DISTANCE_MIN 0.002
#endif
#define PI 3.14159265

const vec2 delta = vec2(DISTANCE_MIN, 0.);

const vec3 skyColour = vec3(.1, .2, .3);
const vec3 horizColour = vec3(.38, .36, .32);

#define TEXTURESIZE 512.0

float NoiseL(in vec2 x) 
{
   return texture2D(texture0,(x+vec2(0.5,0.5))/TEXTURESIZE,-100.0).x;
}

float Noise(in vec2 x)
{
   vec2 p = floor(x);
   vec2 f = fract(x);
   f = f*f*(3.0-2.0*f);
   float n = p.x + p.y*57.0;
   float res = mix(mix( texture2D(texture0,(n+vec2(0.5,0.5))/TEXTURESIZE,-100.0).x, texture2D(texture0,(n+1.0+vec2(0.5,0.5))/TEXTURESIZE,-100.0).x,f.x),
                   mix( texture2D(texture0,(n+57.0+vec2(0.5,0.5))/TEXTURESIZE,-100.0).x, texture2D(texture0,(n+58.0+vec2(0.5,0.5))/TEXTURESIZE,-100.0).x,f.x),f.y);
   return res;
}

const mat2 octave_m = mat2(2.5,0.6,-0.6,2.5);
#define AMPLITUDE 0.5
#define LACUNARITY 2.333
// ridge offset - see http://thebookofshaders.com/13/
#define OFFSET 1.55
float FractalNoiseM(in vec2 xy)
{
   mat2 oct = octave_m;
   float a = AMPLITUDE;
   float f = 0.0;
   float n = 0.0;
   for (int i = 0; i < FRACT_NOISE_DEPTH - 1; i++)
   {
      n = Noise(xy);
      n = offset - n - (float(i) * 0.2);
      f += n * n * a;
      a *= 0.5;
      xy *= LACUNARITY;
   }
   return f;
}

float FractalNoiseH(in vec2 xy)
{
   mat2 oct = octave_m;
   float a = AMPLITUDE;
   float f = 0.0;
   float n = 0.0;
   for (int i = 0; i < FRACT_NOISE_DEPTH; i++)
   {
      n = Noise(xy);
      // create small details on the larger surface
      //n = offset - n - (float(FRACT_NOISE_DEPTH - i) * 0.2);
      // creates interesting larger detail - but smoother overall
      n = offset - n - (float(i) * 0.2);
      f += n * n * a;
      a *= 0.5;
      xy *= LACUNARITY;
   }
   return f;
}

float Terrain(vec2 pos)
{
   return FractalNoiseH(pos.yx*0.571)*0.693 - Noise(cos(pos.yx*0.6)+sin(pos.xy*0.6));
}

float TerrainM(vec2 pos)
{
   return FractalNoiseM(pos.yx*0.571)*0.693 - Noise(cos(pos.yx*0.6)+sin(pos.xy*0.6));
}

// This should return continuous positive values when outside and negative values inside,
// which roughly indicate the distance of the nearest surface.
// NOTE! for increased performance, but lower Shadow/AO/intersect accuracy, change Terrain() to TerrainM() here
float Dist(vec3 pos)
{
   return pos.y - TerrainM(pos.xz);
}

vec3 CalcNormal(in vec3 pos, float t)
{
   // NOTE: subtle changes to this value affect the sharpness of the normal - 0.001 is about same as GetNormal() usually
   vec2 eps = vec2(0.001*t, 0.0);
   return normalize( vec3( Terrain(pos.xz-eps.xy) - Terrain(pos.xz+eps.xy),
                           2.0*eps.x,
                           Terrain(pos.xz-eps.yx) - Terrain(pos.xz+eps.yx) ) );
}

vec3 Sky(in vec3 ro, in vec3 rd)
{
   // background sky     
   vec3 col = 0.9*vec3(0.4,0.5,0.70) - rd.y*vec3(0.4,0.36,0.45);
   col = mix(col, vec3(1.0, 0.9, 0.9), 0.4);

   // sun glare    
   float sun = clamp( dot(normalize (sunDir),rd), 0.0, 1.0 );
   col += 0.6*vec3(1.0,0.6,0.3)*pow( sun, 64.0 );

   return col;
}

vec3 DepthFog(in vec3  rgb,in float distance, in vec3 rd, in vec3 ro)
{
   float fogAmount = 0.0;
   if (fog) fogAmount = fogC * exp(-ro.y*fogB) * (1.0-exp(-distance*rd.y*fogB))/rd.y;
   return mix(rgb, Sky(ro, rd), clamp(fogAmount, 0.0, 1.0));
}

// Based on original code by IQ
const float spread = 16.0;
float SoftShadow(vec3 ro, vec3 rd)
{
   float res = 1.0;
   float t = 0.01;    // min-t see http://www.iquilezles.org/www/articles/rmshadows/rmshadows.htm
   for (int i=0; i<SHADOW_RAY_DEPTH; i++)
   {
      if (t < 16.0)  // max-t
      {
         float h = Dist(ro + rd * t);
         res = min(res, spread*h/t);
         t += h;
      }
   }
   return clamp(res, 0.0, 1.0);
}

// Based on original code by IQ
float CalcAO(vec3 p, vec3 n)
{
   float r = 0.0;
   float w = 1.0;
   for (int i=1; i<=AO_SAMPLES; i++)
   {
      float d0 = float(i) * 0.2;
      r += w * (d0 - Dist(p + n * d0));
      w *= 0.5;
   }
   return 1.0 - clamp(r,0.0,1.0);
}

// "Natural light" shading - main sun light with soft shadows, sky light with AO and indirect sun bounce light with AO
// see http://iquilezles.org/www/articles/outdoorslighting/outdoorslighting.htm
const vec3 rockColour = vec3(0.8, 0.82, 0.82);
const vec3 peaksColour = vec3(1.5);
const vec3 grassColour = vec3(0.8, 0.9, 0.3);  //(0.1,0.7,0.2);
const float specularHardness = 64.0;
const float specular = 1.00;
vec3 Shading(vec3 pos, vec3 rd, vec3 norm, vec3 ro)
{
   float sun = clamp(dot(norm, normalize (sunDir)), 0.0, 1.0);
   vec3 heading = normalize(-rd + normalize (sunDir));

   // start with rock colour, add in snow on peaks and grass in valleys
   float dif = 0.5;
   float snow = NoiseL(norm.yz*2.111) - snowLevel;
   float grass = NoiseL(norm.xy*0.973) + grassLevel;

   vec3 colour = rockColour;

   // give a more abrubt cut-off where snow is mixed into rock colour
   // snow also has a specular reflective component
   float mixSnow = smoothstep(0.05, 0.4, pos.y - snow);
   colour = mix(colour, peaksColour, mixSnow);
   float spec = mix(0.0, pow(max(0.0, dot(heading, norm)), specularHardness), mixSnow);
   dif = mix(dif, 0.9, mixSnow);

   // mix grass colour
   float mixGrass = 1.0 - clamp(pos.y + grass - norm.y, 0.0, 1.0);
   colour = mix(colour, grassColour, mixGrass);
   dif = mix(dif, 0.8, mixGrass);

   vec3 light = sun * sunColour * dif + (spec * specular);

   if (shadows) {
      // colorize penumbras
      light *= pow(vec3(SoftShadow(pos, normalize (sunDir))), vec3(1.0, 1.2, 1.5));
   }

   // sky light with AO
   float occ = ambient;
   if (ao) occ = CalcAO(pos, norm) * ambient;
   float sky = clamp(0.5 + 0.5 * norm.y, 0.0, 1.0);
   light += sky * vec3(0.24, 0.20, 0.24) * occ;

   // indirect light with AO
   float ind = clamp(dot(norm, normalize(normalize (sunDir) * vec3(-1.0,0.0,-1.0))), 0.0, 1.0);
   light += ind * colour * 0.3 * occ;

   colour *= light;

   // fogging
   colour = DepthFog(colour, length(ro-pos), rd, ro);

   return colour;
}

// Original method by David Hoskins
vec3 PostEffects(vec3 rgb, vec2 xy)
{
   rgb = pow(rgb, vec3(GAMMA));
   rgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb*BRIGHTNESS)), rgb*BRIGHTNESS, SATURATION), CONTRAST);
   rgb *= .4+0.5*pow(40.0*xy.x*xy.y*(1.0-xy.x)*(1.0-xy.y), 0.2 ); 
   return rgb;
}

// Camera function by TekF
// Compute ray from camera parameters
vec3 GetRay(vec3 dir, vec2 pos)
{
   pos = pos - 0.5;
   pos.x *= resolution.x/resolution.y;

   dir = normalize(dir);
   vec3 right = normalize(cross(vec3(0.,1.,0.),dir));
   vec3 up = normalize(cross(dir,right));

   return dir + right*pos.x + up*pos.y;
}

#define ANTIALIAS_SAMPLES 8
void main()
{
   resolution = vec2 (x3d_Viewport .zw);

   vec3 off = vec3(0.0);
   if (moveCamera) {
      off.z -= time*1.0;
      off.y += cos(time*0.5)*0.5;
   }

   vec4 res = vec4(0.0);

#ifndef AA
   // position and ray direction
   vec2 p = gl_FragCoord.xy / resolution.xy;
   vec3 ro = cameraPos + off;
   vec3 rd = normalize(GetRay((cameraLookat-off)-cameraPos+off, p));

   // march ray
   float t = 0.0;
   float d = 0.0;
   for (int i=0; i<RAY_DEPTH; i++)
   {
      vec3 p = ro + rd * t;
      d = Dist(p);
      if (d < DISTANCE_MIN)
      {
         res = vec4(p, 1.0);  // HIT
         break;
      }
      // this is subtle - but makes a huge difference to the quality of the hit accuracy
      // ensure we walk a distance that is small enough to not miss the peaks as we get closer
      //t += d * min( max(0.2, (p.y-d)), 0.8 );
      t += d * 0.5;
      if (t > MAX_DEPTH) break;
   }

   if (res.a == 0.0)
   {
      res.rgb = Sky(ro, rd);
   }
   else
   {
      res.rgb = Shading(res.rgb, rd, CalcNormal(res.rgb, t), ro).rgb;
   }
#else
   vec2 p;
   float d_ang = 2.*PI / float(ANTIALIAS_SAMPLES);
   float ang = d_ang * 0.33333;
   float r = 0.3;
   for (int i = 0; i < ANTIALIAS_SAMPLES; i++)
   {
      p = vec2((gl_FragCoord.x + cos(ang)*r) / resolution.x, (gl_FragCoord.y + sin(ang)*r) / resolution.y);
      vec3 ro = cameraPos + off;
      vec3 rd = normalize(GetRay((cameraLookat-off)-cameraPos+off, p));
      vec4 _res = vec4(0.0);
      float t = 0.0;
      float d = 1.0;
      for (int i=0; i<RAY_DEPTH; i++)
      {
         vec3 p = ro + rd * t;
         d = Dist(p);
         if (d < DISTANCE_MIN)
         {
            _res = vec4(p, 1.0);  // HIT
            break;
         }
         t += d * 0.5;
         if (t > MAX_DEPTH) break;
      }

      if (_res.a == 0.0)
      {
         res.rgb += Sky(ro, rd);
      }
      else
      {
         res.rgb += Shading(_res.rgb, rd, CalcNormal(_res.rgb, t), ro).rgb;
      }
      ang += d_ang;
   }
   res.rgb /= float(ANTIALIAS_SAMPLES);
#endif

   if (postEffects) res.rgb = PostEffects(res.rgb, p);

   gl_FragColor = vec4(res.rgb, 1.0);
}]]></ShaderPart>
</ComposedShader>
</Appearance>
<Rectangle2D containerField="geometry" size="1 1"></Rectangle2D>
</Shape>
</Transform>
</LayoutLayer>
<Layer DEF="HUD"><MetadataSet containerField="metadata" name="Titania" DEF="Titania_1" reference="http://titania.create3000.de"><MetadataSet name="AngleGrid" DEF="AngleGrid_1" reference="http://titania.create3000.de" containerField="value"><MetadataBoolean name="enabled" DEF="enabled_3" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
</MetadataSet>
<MetadataSet name="Grid" DEF="Grid_1" reference="http://titania.create3000.de"><MetadataBoolean name="enabled" DEF="enabled_4" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
<MetadataFloat name="scale" DEF="scale" reference="http://titania.create3000.de" value="0.05 0.05 0.05"></MetadataFloat>
<MetadataInteger name="dimension" DEF="dimension" reference="http://titania.create3000.de" value="89 10 40"></MetadataInteger>
<MetadataDouble name="rotation" DEF="rotation" reference="http://titania.create3000.de" value="1 0 0 1.5707963267949"></MetadataDouble>
</MetadataSet>
<MetadataSet name="AxonometricGrid" DEF="AxonometricGrid_1" reference="http://titania.create3000.de"><MetadataBoolean name="enabled" DEF="enabled_5" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
</MetadataSet>
</MetadataSet>
<NavigationInfo type="&quot;NONE&quot;" headlight="false"></NavigationInfo>
<OrthoViewpoint></OrthoViewpoint>
<Transform USE="Header"></Transform>
<Transform DEF="Header_1" translation="1.675 -0.65 -1" scale="0.0672307 0.0672307 0.0672307"><Shape><Appearance><Material DEF="Artdeco31" ambientIntensity="0" diffuseColor="0 0 0" emissiveColor="1 1 1" shininess="0"></Material>
</Appearance>
<Text containerField="geometry" string="&quot;Camera&quot;" solid="true"><FontStyle family="&quot;, &quot; &quot;UbuntuSANS&quot;" style="BOLD" size="0.68" justify="&quot;END&quot;"></FontStyle>
</Text>
</Shape>
</Transform>
<Group DEF="Fields"><Transform DEF="XSlider" translation="0.275 -0.723 1.66533e-16" center="0 -0.027 0"><Transform DEF="IndexedLineSet"><Shape><Appearance><LineProperties linewidthScaleFactor="2"></LineProperties>
<Material DEF="Artdeco31_1" emissiveColor="1 1 1"></Material>
</Appearance>
<IndexedLineSet containerField="geometry" colorPerVertex="false" coordIndex="0 1 -1"><Coordinate containerField="coord" point="0 0 0 1 0 0"></Coordinate>
</IndexedLineSet>
</Shape>
</Transform>
<Transform><Transform DEF="Rectangle2D_1" translation="0.276017 0 0" scale="0.027 0.0267372 0.0267372"><Shape><Appearance><Material emissiveColor="1 1 1"></Material>
</Appearance>
<Disk2D containerField="geometry"></Disk2D>
</Shape>
</Transform>
<PlaneSensor DEF="_2" offset="0.276017 0 0" maxPosition="1 0"></PlaneSensor>
</Transform>
<Script DEF="XScript"><field name="set_translation" accessType="inputOnly" type="SFVec3f"></field>
<field name="description" accessType="inputOutput" type="SFString" value="snow"></field>
<field name="minValue" accessType="inputOutput" type="SFFloat"></field>
<field name="maxValue" accessType="inputOutput" type="SFFloat" value="1"></field>
<field name="value_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="string_changed" accessType="outputOnly" type="MFString"></field>
<field name="currentValue" accessType="initializeOnly" type="SFFloat" value="0.28"></field>
<![CDATA[ecmascript:

function initialized ()
{
	set_value (currentValue);
}

function set_translation (value)
{
	set_value (minValue + (value .x * (maxValue - minValue)));
}

function set_value (value)
{
	var rounded = value .toFixed (2);

	if (rounded == currentValue)
		return;

	currentValue       = rounded;
	string_changed [0] = description + " " + rounded;
	value_changed      = value;
}]]></Script>
</Transform>
<Transform DEF="XText" translation="1.675 -0.750004 -0.00000202108" scale="0.0672307 0.0672307 0.0672307"><Shape><Appearance><Material emissiveColor="1 1 1"></Material>
</Appearance>
<Text containerField="geometry" DEF="_3" string="&quot;snow 0.28&quot;" solid="true"><FontStyle family="&quot;, &quot; &quot;UbuntuSANS&quot;" justify="&quot;END&quot;"></FontStyle>
</Text>
</Shape>
</Transform>
<Transform DEF="YSlider" translation="0.275 -0.823 1.88738e-16" center="0 -0.027 0"><Transform DEF="IndexedLineSet_1"><Shape><Appearance><LineProperties linewidthScaleFactor="2"></LineProperties>
<Material DEF="Artdeco31_2" emissiveColor="1 1 1"></Material>
</Appearance>
<IndexedLineSet containerField="geometry" colorPerVertex="false" coordIndex="0 1 -1"><Coordinate containerField="coord" point="0 0 0 1 0 0"></Coordinate>
</IndexedLineSet>
</Shape>
</Transform>
<Transform><Transform DEF="Rectangle2D_2" translation="0.234662 0 0" scale="0.027 0.0267372 0.0267372"><Shape><Appearance><Material emissiveColor="1 1 1"></Material>
</Appearance>
<Disk2D containerField="geometry"></Disk2D>
</Shape>
</Transform>
<PlaneSensor DEF="_4" offset="0.234662 0 0" maxPosition="1 0"></PlaneSensor>
</Transform>
<Script DEF="YScript"><field name="set_translation" accessType="inputOnly" type="SFVec3f"></field>
<field name="description" accessType="inputOutput" type="SFString" value="grass"></field>
<field name="minValue" accessType="inputOutput" type="SFFloat"></field>
<field name="maxValue" accessType="inputOutput" type="SFFloat" value="1"></field>
<field name="value_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="string_changed" accessType="outputOnly" type="MFString"></field>
<field name="currentValue" accessType="initializeOnly" type="SFFloat" value="0.23"></field>
<![CDATA[ecmascript:

function initialized ()
{
	set_value (currentValue);
}

function set_translation (value)
{
	set_value (minValue + (value .x * (maxValue - minValue)));
}

function set_value (value)
{
	var rounded = value .toFixed (2);

	if (rounded == currentValue)
		return;

	currentValue       = rounded;
	string_changed [0] = description + " " + rounded;
	value_changed      = value;
}]]></Script>
</Transform>
<Transform DEF="YText" translation="1.675 -0.850004 -0.00000238855" scale="0.0672307 0.0672307 0.0672307"><Shape><Appearance><Material emissiveColor="1 1 1"></Material>
</Appearance>
<Text containerField="geometry" DEF="_5" string="&quot;grass 0.23&quot;" solid="true"><FontStyle family="&quot;, &quot; &quot;UbuntuSANS&quot;" justify="&quot;END&quot;"></FontStyle>
</Text>
</Shape>
</Transform>
<Transform DEF="ZText" translation="1.675 -0.950004 -0.00000275602" scale="0.0672307 0.0672307 0.0672307"><Shape><Appearance><Material emissiveColor="1 1 1"></Material>
</Appearance>
<Text containerField="geometry" DEF="_6" string="&quot;noise 2.16&quot;" solid="true"><FontStyle family="&quot;, &quot; &quot;UbuntuSANS&quot;" justify="&quot;END&quot;"></FontStyle>
</Text>
</Shape>
</Transform>
<Transform DEF="ZSlider" translation="0.275 -0.923 2.10943e-16" center="0 -0.027 0"><Transform DEF="IndexedLineSet_2"><Shape><Appearance><LineProperties linewidthScaleFactor="2"></LineProperties>
<Material DEF="Artdeco31_3" emissiveColor="1 1 1"></Material>
</Appearance>
<IndexedLineSet containerField="geometry" colorPerVertex="false" coordIndex="0 1 -1"><Coordinate containerField="coord" point="0 0 0 1 0 0"></Coordinate>
</IndexedLineSet>
</Shape>
</Transform>
<Transform><Transform DEF="Rectangle2D_3" translation="0.759294 0 0" scale="0.027 0.0267372 0.0267372"><Shape><Appearance><Material emissiveColor="1 1 1"></Material>
</Appearance>
<Disk2D containerField="geometry"></Disk2D>
</Shape>
</Transform>
<PlaneSensor DEF="_7" offset="0.759294 0 0" maxPosition="1 0"></PlaneSensor>
</Transform>
<Script DEF="ZScript"><field name="set_translation" accessType="inputOnly" type="SFVec3f"></field>
<field name="description" accessType="inputOutput" type="SFString" value="noise"></field>
<field name="minValue" accessType="inputOutput" type="SFFloat" value="-0.5"></field>
<field name="maxValue" accessType="inputOutput" type="SFFloat" value="3"></field>
<field name="value_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="string_changed" accessType="outputOnly" type="MFString"></field>
<field name="currentValue" accessType="initializeOnly" type="SFFloat" value="2.16"></field>
<![CDATA[ecmascript:

function initialized ()
{
	set_value (currentValue);
}

function set_translation (value)
{
	set_value (minValue + (value .x * (maxValue - minValue)));
}

function set_value (value)
{
	var rounded = value .toFixed (2);

	if (rounded == currentValue)
		return;

	currentValue       = rounded;
	string_changed [0] = description + " " + rounded;
	value_changed      = value;
}]]></Script>
</Transform>
</Group>
</Layer>
</LayerSet>
<ROUTE fromNode="_1" fromField="value_changed" toNode="WaterShader" toField="set_time"></ROUTE>
<ROUTE fromNode="Timer" fromField="fraction_changed" toNode="_1" toField="set_fraction"></ROUTE>
<ROUTE fromNode="_7" fromField="translation_changed" toNode="ZScript" toField="set_translation"></ROUTE>
<ROUTE fromNode="_7" fromField="translation_changed" toNode="Rectangle2D_3" toField="set_translation"></ROUTE>
<ROUTE fromNode="ZScript" fromField="string_changed" toNode="_6" toField="set_string"></ROUTE>
<ROUTE fromNode="YScript" fromField="string_changed" toNode="_5" toField="set_string"></ROUTE>
<ROUTE fromNode="_4" fromField="translation_changed" toNode="YScript" toField="set_translation"></ROUTE>
<ROUTE fromNode="_4" fromField="translation_changed" toNode="Rectangle2D_2" toField="set_translation"></ROUTE>
<ROUTE fromNode="XScript" fromField="string_changed" toNode="_3" toField="set_string"></ROUTE>
<ROUTE fromNode="_2" fromField="translation_changed" toNode="XScript" toField="set_translation"></ROUTE>
<ROUTE fromNode="_2" fromField="translation_changed" toNode="Rectangle2D_1" toField="set_translation"></ROUTE>
<ROUTE fromNode="XScript" fromField="value_changed" toNode="WaterShader" toField="set_snowLevel"></ROUTE>
<ROUTE fromNode="YScript" fromField="value_changed" toNode="WaterShader" toField="set_grassLevel"></ROUTE>
<ROUTE fromNode="ZScript" fromField="value_changed" toNode="WaterShader" toField="set_offset"></ROUTE>
</Scene>
</X3D>