{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Immersive",
    "@version":"3.3",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.3.xsd",
    "JSON schema":"https://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "component": [
          {
            "@name":"CADGeometry",
            "@level":1
          },
          {
            "@name":"Shaders",
            "@level":1
          },
          {
            "@name":"Texturing3D",
            "@level":1
          }
        ],
        "meta": [
          {
            "@name":"comment",
            "@content":"World of Titania"
          },
          {
            "@name":"created",
            "@content":"Tue, 14 May 2019 10:58:30 GMT"
          },
          {
            "@name":"creator",
            "@content":"Holger Seelig"
          },
          {
            "@name":"generator",
            "@content":"Titania V4.5.3, http://titania.create3000.de"
          },
          {
            "@name":"identifier",
            "@content":"file:///home/holger/Projekte/Library/Tests/Components/Texturing3D/Volume.x3d"
          },
          {
            "@name":"modified",
            "@content":"Tue, 14 May 2019 10:58:30 GMT"
          },
          {
            "@name":"titania-output-style",
            "@content":"Nicest"
          },
          {
            "@name":"translated",
            "@content":"12 April 2021"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, https://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"reference",
            "@content":"X3D JSON encoding: https://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "ProtoDeclare":
            {
              "@name":"Volume",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"dimensions",
                      "@accessType":"inputOutput",
                      "@type":"SFVec3f",
                      "@value":[1,1,1]
                    },
                    {
                      "@name":"voxels",
                      "@accessType":"inputOutput",
                      "@type":"SFNode"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "Group":
                      {
                        "-children":[
                          { "ProximitySensor":
                            {
                              "@DEF":"_1",
                              "@size":[-1,-1,-1]
                            }
                          },
                          { "Transform":
                            {
                              "@DEF":"_2",
                              "-children":[
                                { "Shape":
                                  {
                                    "-appearance":
                                      { "Appearance":
                                        {
                                          "IS": {
                                              "connect": [
                                                {
                                                  "@nodeField":"texture",
                                                  "@protoField":"voxels"
                                                }
                                              ]
                                          },
                                          "-textureTransform":
                                            { "TextureTransform3D":
                                              {
                                                "@DEF":"_3",
                                                "@translation":[0.5,0.5,0.5],
                                                "@center":[-0.5,-0.5,-0.5]
                                              }
                                            },
                                          "-shaders":[
                                            { "ComposedShader":
                                              {
                                                "@DEF":"ComposedShader",
                                                "@language":"GLSL",
                                                "-parts":[
                                                  { "ShaderPart":
                                                    {
                                                      "@DEF":"VertexShader",
                                                      "@type":"VERTEX",
                                                      "#sourceText":[
"",
"data:x-shader/x-vertex,#version 300 es",
"",
"precision mediump float;",
"",
"uniform mat4 x3d_ProjectionMatrix;",
"uniform mat4 x3d_ModelViewMatrix;",
"uniform mat4 x3d_TextureMatrix [1];",
"",
"in vec4 x3d_Vertex;",
"in vec4 x3d_TexCoord0;",
"",
"out vec3 vertex;",
"out vec4 texCoord;",
"",
"void",
"main ()",
"{",
"\tvec4 position = x3d_ModelViewMatrix * x3d_Vertex;",
"",
"\tvertex   = position .xyz;",
"\ttexCoord = x3d_TextureMatrix [0] * x3d_TexCoord0;",
"",
"\tgl_Position = x3d_ProjectionMatrix * position;",
"}",
""
]
                                                    }
                                                  },
                                                  { "ShaderPart":
                                                    {
                                                      "@DEF":"FragmentShader",
                                                      "@type":"FRAGMENT",
                                                      "#sourceText":[
"",
"data:x-shader/x-fragment,#version 300 es",
"",
"precision mediump float;",
"precision mediump sampler3D;",
"",
"uniform int       x3d_NumTextures;",
"uniform sampler3D x3d_Texture3D [1];",
"",
"uniform int  x3d_NumClipPlanes;",
"uniform vec4 x3d_ClipPlane [x3d_MaxClipPlanes];",
"",
"in vec3 vertex;",
"in vec4 texCoord;",
"",
"out vec4 x3d_FragColor;",
"",
"void",
"clip ()",
"{",
"\tfor (int i = 0; i < x3d_MaxClipPlanes; ++ i)",
"\t{",
"\t\tif (i == x3d_NumClipPlanes)",
"\t\t\tbreak;",
"",
"\t\tif (dot (vertex, x3d_ClipPlane [i] .xyz) - x3d_ClipPlane [i] .w < 0.0)",
"\t\t\tdiscard;",
"\t}",
"}",
"",
"vec4",
"getTextureColor (in vec3 texCoord)",
"{",
"\tif (x3d_NumTextures == 0)",
"\t\tvec4 (1.0, 1.0, 1.0, 1.0);",
"",
"\tif (texCoord .s < 0.0 || texCoord .s > 1.0)",
"\t\tdiscard;",
"",
"\tif (texCoord .t < 0.0 || texCoord .t > 1.0)",
"\t\tdiscard;",
"",
"\tif (texCoord .p < 0.0 || texCoord .p > 1.0)",
"\t\tdiscard;",
"",
"\tvec4 voxelColor   = texture (x3d_Texture3D [0], vec3 (texCoord .s, texCoord .t, 1.0 - texCoord .p));",
"",
"\treturn voxelColor;",
"}",
"",
"void",
"main ()",
"{",
"\tclip ();",
"",
"\tx3d_FragColor = getTextureColor (texCoord .stp / texCoord .q);",
"}",
""
]
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      },
                                    "-geometry":
                                      { "QuadSet":
                                        {
                                          "@DEF":"_4",
                                          "-texCoord":
                                            { "TextureCoordinate3D":
                                              {
                                              }
                                            },
                                          "-coord":
                                            { "Coordinate":
                                              {
                                              }
                                            }
                                        }
                                      }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    { "Script":
                      {
                        "@DEF":"VolumeScript",
                        "field": [
                          {
                            "@name":"dimensions",
                            "@accessType":"inputOutput",
                            "@type":"SFVec3f"
                          },
                          {
                            "@name":"textureTransform",
                            "@accessType":"initializeOnly",
                            "@type":"SFNode",
                            "-children":[
                              { "TextureTransform3D":
                                {
                                  "@USE":"_3"
                                }
                              }
                            ]
                          },
                          {
                            "@name":"geometry",
                            "@accessType":"initializeOnly",
                            "@type":"SFNode",
                            "-children":[
                              { "QuadSet":
                                {
                                  "@USE":"_4"
                                }
                              }
                            ]
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"dimensions",
                                "@protoField":"dimensions"
                              }
                            ]
                        },
                        "#sourceText":[
"",
"vrmlscript:",
"",
"var NUM_PLANES = 200;",
"",
"function initialize ()",
"{",
"\tset_dimension ();",
"}",
"",
"function set_dimension ()",
"{",
"\tvar",
"\t\tsize     = dimensions .length (),",
"\t\tsize1_2  = size / 2,",
"\t\tcoord    = geometry .coord,",
"\t\ttexCoord = geometry .texCoord;",
"",
"\tcoord .point .length = 0;",
"",
"\tfor (var i = 0; i < NUM_PLANES; ++ i)",
"\t{",
"\t\tvar z = i / (NUM_PLANES - 1) - 0.5;",
"",
"\t\tcoord .point .push (new SFVec3f ( size1_2,  size1_2, size * z),",
"\t\t                    new SFVec3f (-size1_2,  size1_2, size * z),",
"\t\t                    new SFVec3f (-size1_2, -size1_2, size * z),",
"\t\t                    new SFVec3f ( size1_2, -size1_2, size * z));",
"\t}",
"",
"\ttexCoord .point = coord .point;",
"",
"\ttextureTransform .scale = new SFVec3f (1 / dimensions .x, 1 / dimensions .y, 1 / dimensions .z);",
"}",
"",
""
]
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromNode":"_1",
                        "@fromField":"orientation_changed",
                        "@toNode":"_2",
                        "@toField":"set_rotation"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromNode":"_1",
                        "@fromField":"orientation_changed",
                        "@toNode":"_3",
                        "@toField":"set_rotation"
                      }
                    }
                  ]
              }
            }
          },
          { "WorldInfo":
            {
              "@title":"Volume"
            }
          }
        ]
    }
  }
}