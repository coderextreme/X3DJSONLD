{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Full",
    "@version":"3.3",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.3.xsd",
    "JSON schema":"https://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"comment",
            "@content":"World of Titania"
          },
          {
            "@name":"created",
            "@content":"Sun, 20 Sep 2015 06:48:36 GMT"
          },
          {
            "@name":"creator",
            "@content":"Holger Seelig"
          },
          {
            "@name":"generator",
            "@content":"Titania V1.1.0, http://titania.create3000.de"
          },
          {
            "@name":"modified",
            "@content":"Sun, 20 Sep 2015 06:48:36 GMT"
          },
          {
            "@name":"translated",
            "@content":"12 April 2021"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, https://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"reference",
            "@content":"X3D JSON encoding: https://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "ProtoDeclare":
            {
              "@name":"QuadSphere",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"uDimension",
                      "@accessType":"inputOutput",
                      "@type":"SFInt32",
                      "@value":21
                    },
                    {
                      "@name":"vDimension",
                      "@accessType":"inputOutput",
                      "@type":"SFInt32",
                      "@value":11
                    },
                    {
                      "@name":"radius",
                      "@accessType":"inputOutput",
                      "@type":"SFFloat",
                      "@value":1
                    },
                    {
                      "@name":"solid",
                      "@accessType":"initializeOnly",
                      "@type":"SFBool",
                      "@value":true
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "IndexedFaceSet":
                      {
                        "@DEF":"Geometry",
                        "@creaseAngle":3.14159,
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"solid",
                                "@protoField":"solid"
                              }
                            ]
                        },
                        "-texCoord":
                          { "TextureCoordinate":
                            {
                            }
                          },
                        "-coord":
                          { "Coordinate":
                            {
                            }
                          }
                      }
                    },
                    { "Script":
                      {
                        "@DEF":"QuadSphere",
                        "@directOutput":true,
                        "field": [
                          {
                            "@name":"uDimension",
                            "@accessType":"inputOutput",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"vDimension",
                            "@accessType":"inputOutput",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"radius",
                            "@accessType":"inputOutput",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"geometry",
                            "@accessType":"initializeOnly",
                            "@type":"SFNode",
                            "-children":[
                              { "IndexedFaceSet":
                                {
                                  "@USE":"Geometry"
                                }
                              }
                            ]
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"uDimension",
                                "@protoField":"uDimension"
                              },
                              {
                                "@nodeField":"vDimension",
                                "@protoField":"vDimension"
                              },
                              {
                                "@nodeField":"radius",
                                "@protoField":"radius"
                              }
                            ]
                        },
                        "#sourceText":[
"",
"ecmascript:",
"",
"function initialize ()",
"{",
"\teventsProcessed ();",
"}",
"",
"function eventsProcessed ()",
"{",
"\tgeometry .texCoord .point   = texCoord ();",
"\tgeometry .coord .point      = points ();",
"",
"\tgeometry .set_texCoordIndex = texCoordIndex ();",
"\tgeometry .set_coordIndex    = coordIndex ();",
"}",
"",
"function texCoordIndex ()",
"{",
"\tvar texIndices = new MFInt32 ();",
"\t",
"\tvar i = 0;",
"\t",
"\t// North pole",
"\t",
"\tfor (var u = 0; u < uDimension - 1; ++ u)",
"\t{",
"\t\ttexIndices [i ++] = u;",
"\t\ttexIndices [i ++] = u + uDimension - 1;",
"\t\ttexIndices [i ++] = u + uDimension;",
"\t\ttexIndices [i ++] = -1;",
"\t}",
"",
"\t// Sphere segments",
"\t",
"\tfor (var p = uDimension - 1, v = 0; v < vDimension - 3; ++ v, ++ p)",
"\t{",
"\t\tfor (var u = 0; u < uDimension - 1; ++ u, ++ p)",
"\t\t{",
"\t\t\ttexIndices [i ++] = p;",
"\t\t\ttexIndices [i ++] = p + uDimension;",
"\t\t\ttexIndices [i ++] = p + uDimension + 1;",
"\t\t\ttexIndices [i ++] = p + 1;",
"\t\t\ttexIndices [i ++] = -1;",
"\t\t}",
"\t}",
"\t",
"\t// South pole",
"",
"\tvar p = (vDimension - 2) * uDimension - 1;",
"",
"\tfor (var u = 0; u < uDimension - 1; ++ u, ++ p)",
"\t{",
"\t\ttexIndices [i ++] = p + uDimension;",
"\t\ttexIndices [i ++] = p + 1;",
"\t\ttexIndices [i ++] = p;",
"\t\ttexIndices [i ++] = -1;",
"\t}",
"",
"\treturn texIndices;",
"}",
"",
"function texCoord ()",
"{",
"\tvar texCoord = new MFVec2f ();",
"",
"\tvar poleOffset = -0.5 / (uDimension - 1);",
"\tvar i          = 0;",
"",
"\t// North pole",
"\t",
"\tfor (var u = 1; u < uDimension; ++ u)",
"\t{",
"\t\tvar x = u / (uDimension - 1) + poleOffset;",
"\t\t",
"\t\ttexCoord [i ++] = new SFVec2f (x, 1);",
"\t}",
"",
"\t// Sphere segments",
"\t",
"\tfor (var v = 1; v < vDimension - 1; ++ v)",
"\t{",
"\t\tvar y = 1 - v / (vDimension - 1);",
"\t\t",
"\t\tfor (var u = 0; u < uDimension; ++ u)",
"\t\t{",
"\t\t\tvar x = u / (uDimension - 1);",
"\t\t\t",
"\t\t\ttexCoord [i ++] = new SFVec2f (x, y);",
"\t\t}",
"\t}",
"",
"\t// South pole",
"\t",
"\tfor (var u = 1; u < uDimension; ++ u)",
"\t{",
"\t\tvar x = u / (uDimension - 1) + poleOffset;",
"\t\t",
"\t\ttexCoord [i ++] = new SFVec2f (x, 0);",
"\t}",
"",
"\treturn texCoord;",
"}",
"",
"function coordIndex ()",
"{",
"\tvar index = new MFInt32 ();",
"\t",
"\tvar i = 0;",
"",
"\t// North pole",
"\t",
"\tfor (var u = 1; u < uDimension - 1; ++ u)",
"\t{",
"\t\tindex [i ++] = 0;",
"\t\tindex [i ++] = u;",
"\t\tindex [i ++] = u + 1;",
"\t\tindex [i ++] = -1;",
"\t}",
"\tindex [i ++] = 0;",
"\tindex [i ++] = u;",
"\tindex [i ++] = 1;",
"\tindex [i ++] = -1;",
"",
"\t// Sphere segments",
"\t",
"\tvar p = 1;",
"\tfor (var v = 0; v < vDimension - 3; ++ v, ++ p)",
"\t{",
"\t\tfor (var u = 0; u < uDimension - 2; ++ u, ++ p)",
"\t\t{",
"\t\t\tindex [i ++] = p;",
"\t\t\tindex [i ++] = p + uDimension - 1;",
"\t\t\tindex [i ++] = p + uDimension;",
"\t\t\tindex [i ++] = p + 1;",
"\t\t\tindex [i ++] = -1;",
"\t\t}",
"\t\tindex [i ++] = p;",
"\t\tindex [i ++] = p + uDimension - 1;",
"\t\tindex [i ++] = p + 1;",
"\t\tindex [i ++] = p - uDimension + 2;",
"\t\tindex [i ++] = -1;",
"\t}",
"",
"\t// South pole",
"\t",
"\tvar last = p + uDimension - 1;",
"\tfor (var u = 0; u < uDimension - 2; ++ u, ++ p)",
"\t{",
"\t\tindex [i ++] = last;",
"\t\tindex [i ++] = p + 1;",
"\t\tindex [i ++] = p;",
"\t\tindex [i ++] = -1;",
"\t}",
"\tindex [i ++] = last;",
"\tindex [i ++] = last - uDimension + 1;",
"\tindex [i ++] = p;",
"\tindex [i ++] = -1;",
"",
"\treturn index;",
"}",
"",
"function points ()",
"{",
"\tvar point = new MFVec3f ();",
"\t",
"\t// North pole",
"\t",
"\tpoint [0] = new SFVec3f (0, 1, 0) .multiply (radius);",
"",
"\t// Sphere segments",
"\t",
"\tvar i = point .length;",
"",
"\tfor (var v = 1; v < vDimension - 1; ++ v)",
"\t{",
"\t\tvar p = Math .PI * (v / (vDimension - 1));",
"\t\tvar y = Math .cos (p);",
"\t\tvar r = Math .sin (p);",
"",
"\t\tfor (u = 0; u < uDimension - 1; ++ u)",
"\t\t{",
"\t\t\tvar t = 2 * Math .PI * (u / (uDimension - 1) + 0.5);",
"\t\t\tvar x = Math .sin (t) * r;",
"\t\t\tvar z = Math .cos (t) * r;",
"",
"\t\t\tpoint [i ++] = new SFVec3f (x, y, z) .multiply (radius);",
"\t\t}",
"\t}",
"\t\t",
"\t// South pole",
"",
"\tpoint [point .length] = new SFVec3f (0, -1, 0) .multiply (radius);",
"",
"\treturn point;",
"}",
"",
""
]
                      }
                    }
                  ]
              }
            }
          }
        ]
    }
  }
}