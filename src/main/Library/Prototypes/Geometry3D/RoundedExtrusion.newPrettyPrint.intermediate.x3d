<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Full' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='https://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <meta content='World of Titania' name='comment'/>
    <meta content='Sun, 03 Apr 2016 04:01:10 GMT' name='created'/>
    <meta content='Holger Seelig' name='creator'/>
    <meta content='Titania V4.3.9, http://titania.create3000.de' name='generator'/>
    <meta content='file:///home/holger/Projekte/Library/Prototypes/Geometry3D/RoundedExtrusion.x3d' name='identifier'/>
    <meta content='Mon, 07 Jan 2019 04:05:08 GMT' name='modified'/>
  </head>
  <Scene>
    <ProtoDeclare name='RoundedExtrusion'>
      <ProtoInterface>
        <field name='beginCap' accessType='initializeOnly' type='SFBool' value='true'/>
        <field name='endCap' accessType='initializeOnly' type='SFBool' value='true'/>
        <field name='solid' accessType='initializeOnly' type='SFBool' value='true'/>
        <field name='ccw' accessType='initializeOnly' type='SFBool' value='true'/>
        <field name='convex' accessType='initializeOnly' type='SFBool' value='true'/>
        <field name='creaseAngle' accessType='initializeOnly' type='SFFloat'/>
        <field name='crossSection' accessType='initializeOnly' type='MFVec2f' value='1 1 1 -1 -1 -1 -1 1 1 1'/>
        <field name='orientation' accessType='initializeOnly' type='MFRotation' value='0 0 1 0'/>
        <field name='scale' accessType='initializeOnly' type='MFVec2f' value='1 1'/>
        <field name='spine' accessType='inputOutput' type='MFVec3f' value='0 0 0 0 1 0'/>
        <field name='cornerRadius' accessType='inputOutput' type='SFFloat' value='1.0'/>
        <field name='cornerDimension' accessType='inputOutput' type='SFInt32' value='16'/>
      </ProtoInterface>
      <ProtoBody>
        <Extrusion DEF='_1'>
          <IS>
            <connect nodeField='beginCap' protoField='beginCap'/>
            <connect nodeField='endCap' protoField='endCap'/>
            <connect nodeField='solid' protoField='solid'/>
            <connect nodeField='ccw' protoField='ccw'/>
            <connect nodeField='convex' protoField='convex'/>
            <connect nodeField='creaseAngle' protoField='creaseAngle'/>
            <connect nodeField='crossSection' protoField='crossSection'/>
            <connect nodeField='orientation' protoField='orientation'/>
            <connect nodeField='scale' protoField='scale'/>
          </IS>
        </Extrusion>
        <Script DEF='RoundedExtrusionScript' directOutput='true'>
          <field name='spine' accessType='inputOutput' type='MFVec3f'/>
          <field name='cornerRadius' accessType='inputOutput' type='SFFloat'/>
          <field name='cornerDimension' accessType='inputOutput' type='SFInt32'/>
          <field name='geometry' accessType='initializeOnly' type='SFNode'>
            <Extrusion USE='_1'/>
          </field>
          <IS>
            <connect nodeField='spine' protoField='spine'/>
            <connect nodeField='cornerRadius' protoField='cornerRadius'/>
            <connect nodeField='cornerDimension' protoField='cornerDimension'/>
          </IS>
<![CDATA[
ecmascript:

var
	identity = new SFRotation (),
	center   = new SFVec3f ();

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var roundedSpine = new MFVec3f ();

	if (spine .length)
		roundedSpine [0] = spine [0];

	for (var i = 1, length = spine .length - 1; i < length; ++ i)
	{
		var
			vector1    = spine [i - 1] .subtract (spine [i]),
			vector2    = spine [i + 1] .subtract (spine [i]),
			normal1    = vector1 .normalize (),
			normal2    = vector2 .normalize (),
			normal     = normal1 .cross (normal2) .normalize (), // plane normal
			direction1 = normal1 .cross (normal),                // line direction
			direction2 = normal2 .cross (normal),                // line direction
			length1    = vector1 .length (),
			length2    = vector2 .length (),
			radius1    = cornerRadius < length1 / 2 ? cornerRadius : length1 / 2,
			radius2    = cornerRadius < length2 / 2 ? cornerRadius : length2 / 2,
			radius     = Math .min (radius1, radius2);

		var
			startPoint = spine [i] .add (normal1 .multiply (radius)),
			endPoint   = spine [i] .add (normal2 .multiply (radius)),
			theta      = get_closest_point (startPoint, direction1, endPoint, direction2, center);

		if (Math .abs (theta) >= 1)
			roundedSpine [roundedSpine .length] = spine [i];

		else
		{
		   var
		      segment1  = startPoint .subtract (center),
		      segment2  = endPoint   .subtract (center),
		      rotation  = new SFRotation (segment1, segment2);
				angle     = Math .PI - Math .acos (clamp (normal1 .dot (normal2), -1, 1)),
				dimension = Math .round (angle / (2 * Math .PI) * cornerDimension);
			
			if (dimension)
			{
				roundedSpine [roundedSpine .length] = startPoint;

				for (var d = 1;  d < dimension; ++ d)
				{
				   var r = identity .slerp (rotation, d / dimension);

					roundedSpine [roundedSpine .length] = center .add (r .multVec (segment1));
				}

				roundedSpine [roundedSpine .length] = endPoint;
			}
			else
			   roundedSpine [roundedSpine .length] = spine [i];
		}
	}

	if (spine .length > 1)
		roundedSpine [roundedSpine .length] = spine [spine .length - 1];

	geometry .set_spine = roundedSpine;
}

function get_closest_point (point1, direction1, point2, direction2, closestPoint)
{
	var
		theta = direction1 .dot (direction2), // angle between both lines
		u     = point2 .subtract (point1),
		t     = (u .dot (direction1) - theta * u .dot (direction2)) / (1 - theta * theta);

	var point = point1 .add (direction1 .multiply (t));

	closestPoint .x = point .x;
	closestPoint .y = point .y;
	closestPoint .z = point .z;

	return theta;
}

function clamp (value, min, max)
{
	return value < min ? min : (value > max ? max : value);
}
]]>
        </Script>
      </ProtoBody>
    </ProtoDeclare>
    <WorldInfo>
      <MetadataSet DEF='Titania' name='Titania' reference='http://titania.create3000.de'>
        <MetadataSet DEF='AngleGrid' name='AngleGrid' containerField='value' reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='enabled' name='enabled' containerField='value' reference='http://titania.create3000.de' value='false'/>
        </MetadataSet>
        <MetadataSet DEF='Grid' name='Grid' containerField='value' reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='enabled_2' name='enabled' containerField='value' reference='http://titania.create3000.de' value='true'/>
        </MetadataSet>
        <MetadataSet DEF='NavigationInfo' name='NavigationInfo' containerField='value' reference='http://titania.create3000.de'>
          <MetadataString DEF='type' name='type' containerField='value' reference='http://titania.create3000.de' value='"EXAMINE"'/>
        </MetadataSet>
        <MetadataSet DEF='Viewpoint' name='Viewpoint' containerField='value' reference='http://titania.create3000.de'>
          <MetadataDouble DEF='position' name='position' containerField='value' reference='http://titania.create3000.de' value='4.40744414009736 3.83242587352295 11.2482717533919'/>
          <MetadataDouble DEF='orientation' name='orientation' containerField='value' reference='http://titania.create3000.de' value='-0.654276237355678 0.756188680690693 0.0100640164430718 0.478951594373692'/>
          <MetadataDouble DEF='centerOfRotation' name='centerOfRotation' containerField='value' reference='http://titania.create3000.de' value='0 0 0'/>
        </MetadataSet>
        <MetadataSet DEF='Selection' name='Selection' containerField='value' reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='selectGeometry' name='selectGeometry' containerField='value' reference='http://titania.create3000.de' value='false'/>
          <MetadataSet DEF='nodes' name='nodes' containerField='value' reference='http://titania.create3000.de'>
            <!-- NULL -->
          </MetadataSet>
        </MetadataSet>
        <MetadataSet DEF='Page' name='Page' containerField='value' reference='http://titania.create3000.de'>
          <MetadataInteger DEF='activeView' name='activeView' containerField='value' reference='http://titania.create3000.de' value='1'/>
          <MetadataInteger DEF='multiView' name='multiView' containerField='value' reference='http://titania.create3000.de' value='0'/>
        </MetadataSet>
      </MetadataSet>
    </WorldInfo>
  </Scene>
</X3D>
