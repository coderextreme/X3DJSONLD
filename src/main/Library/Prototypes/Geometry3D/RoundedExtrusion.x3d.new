<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Full" version="3.3" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.3.xsd" ><head><meta name="comment" content="World of Titania"></meta>
<meta name="created" content="Sun, 03 Apr 2016 04:01:10 GMT"></meta>
<meta name="creator" content="Holger Seelig"></meta>
<meta name="generator" content="Titania V4.3.9, http://titania.create3000.de"></meta>
<meta name="identifier" content="file:///home/holger/Projekte/Library/Prototypes/Geometry3D/RoundedExtrusion.x3d"></meta>
<meta name="modified" content="Mon, 07 Jan 2019 04:05:08 GMT"></meta>
</head>
<Scene><ProtoDeclare name="RoundedExtrusion"><ProtoInterface><field name="beginCap" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="endCap" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="solid" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="ccw" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="convex" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="creaseAngle" accessType="initializeOnly" type="SFFloat"></field>
<field name="crossSection" accessType="initializeOnly" type="MFVec2f" value="1 1 1 -1 -1 -1 -1 1 1 1"></field>
<field name="orientation" accessType="initializeOnly" type="MFRotation" value="0 0 1 0"></field>
<field name="scale" accessType="initializeOnly" type="MFVec2f" value="1 1"></field>
<field name="spine" accessType="inputOutput" type="MFVec3f" value="0 0 0 0 1 0"></field>
<field name="cornerRadius" accessType="inputOutput" type="SFFloat" value="1"></field>
<field name="cornerDimension" accessType="inputOutput" type="SFInt32" value="16"></field>
</ProtoInterface>
<ProtoBody><Extrusion DEF="_1"><IS><connect nodeField="beginCap" protoField="beginCap"></connect>
<connect nodeField="endCap" protoField="endCap"></connect>
<connect nodeField="solid" protoField="solid"></connect>
<connect nodeField="ccw" protoField="ccw"></connect>
<connect nodeField="convex" protoField="convex"></connect>
<connect nodeField="creaseAngle" protoField="creaseAngle"></connect>
<connect nodeField="crossSection" protoField="crossSection"></connect>
<connect nodeField="orientation" protoField="orientation"></connect>
<connect nodeField="scale" protoField="scale"></connect>
</IS>
</Extrusion>
<Script DEF="RoundedExtrusionScript" directOutput="true"><field name="spine" accessType="inputOutput" type="MFVec3f"></field>
<field name="cornerRadius" accessType="inputOutput" type="SFFloat"></field>
<field name="cornerDimension" accessType="inputOutput" type="SFInt32"></field>
<field name="geometry" accessType="initializeOnly" type="SFNode"><Extrusion USE="_1"></Extrusion>
</field>
<IS><connect nodeField="spine" protoField="spine"></connect>
<connect nodeField="cornerRadius" protoField="cornerRadius"></connect>
<connect nodeField="cornerDimension" protoField="cornerDimension"></connect>
</IS>
<![CDATA[ecmascript:

var
	identity = new SFRotation (),
	center   = new SFVec3f ();

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var roundedSpine = new MFVec3f ();

	if (spine .length)
		roundedSpine [0] = spine [0];

	for (var i = 1, length = spine .length - 1; i < length; ++ i)
	{
		var
			vector1    = spine [i - 1] .subtract (spine [i]),
			vector2    = spine [i + 1] .subtract (spine [i]),
			normal1    = vector1 .normalize (),
			normal2    = vector2 .normalize (),
			normal     = normal1 .cross (normal2) .normalize (), // plane normal
			direction1 = normal1 .cross (normal),                // line direction
			direction2 = normal2 .cross (normal),                // line direction
			length1    = vector1 .length (),
			length2    = vector2 .length (),
			radius1    = cornerRadius < length1 / 2 ? cornerRadius : length1 / 2,
			radius2    = cornerRadius < length2 / 2 ? cornerRadius : length2 / 2,
			radius     = Math .min (radius1, radius2);

		var
			startPoint = spine [i] .add (normal1 .multiply (radius)),
			endPoint   = spine [i] .add (normal2 .multiply (radius)),
			theta      = get_closest_point (startPoint, direction1, endPoint, direction2, center);

		if (Math .abs (theta) >= 1)
			roundedSpine [roundedSpine .length] = spine [i];

		else
		{
		   var
		      segment1  = startPoint .subtract (center),
		      segment2  = endPoint   .subtract (center),
		      rotation  = new SFRotation (segment1, segment2);
				angle     = Math .PI - Math .acos (clamp (normal1 .dot (normal2), -1, 1)),
				dimension = Math .round (angle / (2 * Math .PI) * cornerDimension);
			
			if (dimension)
			{
				roundedSpine [roundedSpine .length] = startPoint;

				for (var d = 1;  d < dimension; ++ d)
				{
				   var r = identity .slerp (rotation, d / dimension);

					roundedSpine [roundedSpine .length] = center .add (r .multVec (segment1));
				}

				roundedSpine [roundedSpine .length] = endPoint;
			}
			else
			   roundedSpine [roundedSpine .length] = spine [i];
		}
	}

	if (spine .length > 1)
		roundedSpine [roundedSpine .length] = spine [spine .length - 1];

	geometry .set_spine = roundedSpine;
}

function get_closest_point (point1, direction1, point2, direction2, closestPoint)
{
	var
		theta = direction1 .dot (direction2), // angle between both lines
		u     = point2 .subtract (point1),
		t     = (u .dot (direction1) - theta * u .dot (direction2)) / (1 - theta * theta);

	var point = point1 .add (direction1 .multiply (t));

	closestPoint .x = point .x;
	closestPoint .y = point .y;
	closestPoint .z = point .z;

	return theta;
}

function clamp (value, min, max)
{
	return value < min ? min : (value > max ? max : value);
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<WorldInfo><MetadataSet containerField="metadata" name="Titania" DEF="Titania" reference="http://titania.create3000.de"><MetadataSet name="AngleGrid" DEF="AngleGrid" reference="http://titania.create3000.de" containerField="value"><MetadataBoolean name="enabled" DEF="enabled" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
</MetadataSet>
<MetadataSet name="Grid" DEF="Grid" reference="http://titania.create3000.de"><MetadataBoolean name="enabled" DEF="enabled_2" reference="http://titania.create3000.de" value="true" containerField="value"></MetadataBoolean>
</MetadataSet>
<MetadataSet name="NavigationInfo" DEF="NavigationInfo" reference="http://titania.create3000.de"><MetadataString name="type" DEF="type" reference="http://titania.create3000.de" value="&quot;EXAMINE&quot;" containerField="value"></MetadataString>
</MetadataSet>
<MetadataSet name="Viewpoint" DEF="Viewpoint" reference="http://titania.create3000.de"><MetadataDouble name="position" DEF="position" reference="http://titania.create3000.de" value="4.40744414009736 3.83242587352295 11.2482717533919" containerField="value"></MetadataDouble>
<MetadataDouble name="orientation" DEF="orientation" reference="http://titania.create3000.de" value="-0.654276237355678 0.756188680690693 0.0100640164430718 0.478951594373692"></MetadataDouble>
<MetadataDouble name="centerOfRotation" DEF="centerOfRotation" reference="http://titania.create3000.de" value="0 0 0"></MetadataDouble>
</MetadataSet>
<MetadataSet name="Selection" DEF="Selection" reference="http://titania.create3000.de"><MetadataBoolean name="selectGeometry" DEF="selectGeometry" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
<MetadataSet name="nodes" DEF="nodes" reference="http://titania.create3000.de"><!--NULL--></MetadataSet>
</MetadataSet>
<MetadataSet name="Page" DEF="Page" reference="http://titania.create3000.de"><MetadataInteger name="activeView" DEF="activeView" reference="http://titania.create3000.de" value="1" containerField="value"></MetadataInteger>
<MetadataInteger name="multiView" DEF="multiView" reference="http://titania.create3000.de" value="0"></MetadataInteger>
</MetadataSet>
</MetadataSet>
</WorldInfo>
</Scene>
</X3D>