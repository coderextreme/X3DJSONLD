{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Full",
    "@version":"3.3",
    "@xsd:noNamespaceSchemaLocation":"https://www.web3d.org/specifications/x3d-3.3.xsd",
    "JSON schema":"https://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"comment",
            "@content":"World of Titania"
          },
          {
            "@name":"created",
            "@content":"Fri, 21 Dec 2018 02:11:05 GMT"
          },
          {
            "@name":"creator",
            "@content":"Holger Seelig"
          },
          {
            "@name":"generator",
            "@content":"Titania V4.3.9, http://titania.create3000.de"
          },
          {
            "@name":"identifier",
            "@content":"file:///home/holger/Projekte/Library/Prototypes/Geometry2D/ArcOpen2D.x3d"
          },
          {
            "@name":"modified",
            "@content":"Mon, 07 Jan 2019 04:03:57 GMT"
          },
          {
            "@name":"translated",
            "@content":"06 September 2021"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, https://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"reference",
            "@content":"X3D JSON encoding: https://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "ProtoDeclare":
            {
              "@name":"ArcOpen2D",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"dimension",
                      "@accessType":"inputOutput",
                      "@type":"SFInt32",
                      "@value":16
                    },
                    {
                      "@name":"startAngle",
                      "@accessType":"inputOutput",
                      "@type":"SFFloat"
                    },
                    {
                      "@name":"endAngle",
                      "@accessType":"inputOutput",
                      "@type":"SFFloat",
                      "@value":1.5708
                    },
                    {
                      "@name":"innerRadius",
                      "@accessType":"inputOutput",
                      "@type":"SFFloat",
                      "@value":0.5
                    },
                    {
                      "@name":"outerRadius",
                      "@accessType":"inputOutput",
                      "@type":"SFFloat",
                      "@value":1.0
                    },
                    {
                      "@name":"solid",
                      "@accessType":"initializeOnly",
                      "@type":"SFBool"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "IndexedFaceSet":
                      {
                        "@DEF":"_1",
                        "@coordIndex":[0,1,3,2,-1,2,3,5,4,-1,4,5,7,6,-1,6,7,9,8,-1,8,9,7,6,-1,6,7,5,4,-1,4,5,3,2,-1,2,3,1,0,-1],
                        "@normalPerVertex":false,
                        "-coord":
                          { "Coordinate":
                            {
                              "@point":[0.5,0,0,1,0,0,0.46194,0.191342,0,0.923879,0.382684,0,0.353553,0.353554,0,0.707106,0.707108,0,0.19134,0.46194,0,0.382681,0.923881,0,-1.81E-6,0.5,0,-3.61999E-6,1,0]
                            }
                          },
                        "-texCoord":
                          { "TextureCoordinate":
                            {
                              "@point":[0.75,0.5,1,0.5,0.73097,0.595671,0.96194,0.691342,0.676776,0.676777,0.853553,0.853554,0.59567,0.73097,0.69134,0.96194,0.499999,0.75,0.499998,1]
                            }
                          }
                      }
                    },
                    { "Script":
                      {
                        "@DEF":"ArcOpen2DScript",
                        "@directOutput":true,
                        "field": [
                          {
                            "@name":"dimension",
                            "@accessType":"inputOutput",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"startAngle",
                            "@accessType":"inputOutput",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"endAngle",
                            "@accessType":"inputOutput",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"innerRadius",
                            "@accessType":"inputOutput",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"outerRadius",
                            "@accessType":"inputOutput",
                            "@type":"SFFloat"
                          },
                          {
                            "@name":"solid",
                            "@accessType":"inputOutput",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"geometry",
                            "@accessType":"initializeOnly",
                            "@type":"SFNode",
                            "-children":[
                              { "IndexedFaceSet":
                                {
                                  "@USE":"_1"
                                }
                              }
                            ]
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"dimension",
                                "@protoField":"dimension"
                              },
                              {
                                "@nodeField":"startAngle",
                                "@protoField":"startAngle"
                              },
                              {
                                "@nodeField":"endAngle",
                                "@protoField":"endAngle"
                              },
                              {
                                "@nodeField":"innerRadius",
                                "@protoField":"innerRadius"
                              },
                              {
                                "@nodeField":"outerRadius",
                                "@protoField":"outerRadius"
                              },
                              {
                                "@nodeField":"solid",
                                "@protoField":"solid"
                              }
                            ]
                        },
                        "#sourceText":[
"",
"",
"ecmascript:",
"",
"function initialize ()",
"{",
"\teventsProcessed ();",
"}",
"",
"function eventsProcessed ()",
"{",
"\tvar",
"\t\ttexCoord   = geometry .texCoord,",
"\t\tcoord      = geometry .coord,",
"\t\tr1         = Math .min (Math .abs (innerRadius), Math .abs (outerRadius)),",
"\t\tr2         = Math .max (Math .abs (innerRadius), Math .abs (outerRadius)),",
"\t\tsweepAngle = getSweepAngle (),",
"\t\tcircle     = sweepAngle === Math .PI * 2,",
"\t\tdisk       = r1 === 0,",
"\t\tsteps      = Math .floor (sweepAngle * dimension / (Math .PI * 2));",
"",
"\tsteps = Math .max (3, steps);",
"",
"\tif (! circle)",
"\t\t++ steps;",
"",
"\tvar steps_1 = circle ? steps : steps - 1;",
"\t",
"\tcoord .point .length         = 0;",
"\ttexCoord .point .length      = 0;",
"",
"\tif (r1 === r2)",
"\t\treturn;",
"\t\t",
"\tvar",
"\t\tcoordIndex = new MFInt32 (),",
"\t\ttexOffset  = new SFVec3f (r2, r2, 0);",
"",
"\tfor (var n = 0; n < steps; ++ n)",
"\t{",
"\t\tvar",
"\t\t\tt     = n / steps_1,",
"\t\t\ttheta = startAngle + (sweepAngle * t),",
"\t\t\tx     = Math .cos (theta),",
"\t\t\ty     = Math .sin (theta),",
"\t\t\tpoint = new SFVec3f (x, y, 0);",
"",
"\t\tif (! disk)",
"\t\t{",
"\t\t\tvar",
"\t\t\t\tpoint1 = point .multiply (r1),",
"\t\t\t\ttex1   = point1 .add (texOffset) .divide (r2 * 2);",
"\t\t\t\t",
"\t\t\tcoord .point .push (point1);",
"\t\t\ttexCoord .point .push (new SFVec2f (tex1 .x, tex1 .y));",
"\t\t}",
"",
"\t\tvar",
"\t\t\tpoint2 = point .multiply (r2),",
"\t\t\ttex2   = point2 .add (texOffset) .divide (r2 * 2);",
"",
"\t\tcoord .point .push (point2);",
"\t\ttexCoord .point .push (new SFVec2f (tex2 .x, tex2 .y));",
"\t}",
"",
"\tif (disk)",
"\t{",
"\t\tif (circle)",
"\t\t{",
"\t\t\tfor (var n = 0; n < steps; ++ n)",
"\t\t\t\tcoordIndex .push (n);",
"",
"\t\t\tcoordIndex .push (-1);",
"\t\t}",
"\t\telse",
"\t\t{",
"\t\t\tvar l = coord .point .length;",
"\t\t\t",
"\t\t\tcoord .point .push (new SFVec3f ());",
"\t\t\ttexCoord .point .push (new SFVec2f (0.5, 0.5));",
"\t\t",
"\t\t\tfor (var n = 0; n < steps - 1; ++ n)",
"\t\t\t{",
"\t\t\t\tcoordIndex .push (n);",
"\t\t\t\tcoordIndex .push (n + 1);",
"\t\t\t\tcoordIndex .push (l);",
"\t\t\t\tcoordIndex .push (-1);",
"\t\t\t}",
"\t\t}",
"\t}",
"\telse",
"\t{",
"\t\tfor (var n = 0; n < steps - 1; ++ n)",
"\t\t{",
"\t\t\tvar i = n * 2;",
"",
"\t\t\tcoordIndex .push (i);",
"\t\t\tcoordIndex .push (i + 1);",
"\t\t\tcoordIndex .push (i + 3);",
"\t\t\tcoordIndex .push (i + 2);",
"\t\t\tcoordIndex .push (-1);",
"\t\t}",
"\t}",
"\t\t",
"\tif (circle)",
"\t{",
"\t\tvar",
"\t\t\tl1 = coordIndex [coordIndex .length - 2],",
"\t\t\tl2 = coordIndex [coordIndex .length - 3];",
"\t",
"\t\tcoordIndex .push (l1);",
"\t\tcoordIndex .push (l2);",
"\t\tcoordIndex .push (coordIndex [1]);",
"\t\tcoordIndex .push (coordIndex [0]);",
"\t\tcoordIndex .push (-1);",
"\t}",
"",
"\tif (! solid)",
"\t{",
"\t\tfor (var i = 1, length = coordIndex .length; i < length; ++ i)",
"\t\t\tcoordIndex .push (coordIndex [length - 1 - i]);",
"",
"\t\tcoordIndex .push (-1);",
"\t}",
"\t",
"\tgeometry .set_coordIndex = coordIndex;",
"}",
"",
"function getSweepAngle ()",
"{",
"\tvar",
"\t\tstart = interval (startAngle, 0, Math .PI * 2),",
"\t\tend   = interval (endAngle,   0, Math .PI * 2);",
"",
"\tif (start === end)",
"\t\treturn Math .PI * 2;",
"",
"\tvar sweepAngle = Math .abs (end - start);",
"",
"\tif (start > end)",
"\t\treturn Math .PI * 2 - sweepAngle;",
"",
"\tif (! isNaN (sweepAngle))",
"\t\treturn sweepAngle;",
"\t",
"\t// We must test for NAN, as NAN to int32_t is undefined.",
"\treturn 0;",
"}",
"",
"function interval (value, low, high)",
"{",
"\tif (value >= high)",
"\t\treturn (value - low) % (high - low) + low;",
"",
"\tif (value < low)",
"\t\treturn (value - high) % (high - low) + high;",
"",
"\treturn value;",
"}",
"",
""
]
                      }
                    }
                  ]
              }
            }
          },
          { "WorldInfo":
            {
              "@title":"ArcOpen2D",
              "-metadata":
                { "MetadataSet":
                  {
                    "@name":"Titania",
                    "@DEF":"Titania",
                    "@reference":"http://titania.create3000.de",
                    "-value":[
                      { "MetadataSet":
                        {
                          "@name":"Page",
                          "@DEF":"Page",
                          "@reference":"http://titania.create3000.de",
                          "-value":[
                            { "MetadataInteger":
                              {
                                "@name":"activeView",
                                "@DEF":"activeView",
                                "@reference":"http://titania.create3000.de",
                                "@value":[1]
                              }
                            },
                            { "MetadataInteger":
                              {
                                "@name":"multiView",
                                "@DEF":"multiView",
                                "@reference":"http://titania.create3000.de",
                                "@value":[0]
                              }
                            }
                          ]
                        }
                      },
                      { "MetadataSet":
                        {
                          "@name":"Selection",
                          "@DEF":"Selection",
                          "@reference":"http://titania.create3000.de",
                          "-value":[
                            { "MetadataBoolean":
                              {
                                "@name":"selectGeometry",
                                "@DEF":"selectGeometry",
                                "@reference":"http://titania.create3000.de",
                                "@value":[false]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
            }
          }
        ]
    }
  }
}