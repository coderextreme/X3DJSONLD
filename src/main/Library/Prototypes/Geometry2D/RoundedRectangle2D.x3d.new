<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Full" version="3.3" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.3.xsd" ><head><meta name="comment" content="World of Titania"></meta>
<meta name="created" content="Sun, 20 Sep 2015 06:48:36 GMT"></meta>
<meta name="creator" content="Holger Seelig"></meta>
<meta name="generator" content="Titania V4.3.6, http://titania.create3000.de"></meta>
<meta name="identifier" content="file:///home/holger/Projekte/Library/Prototypes/Geometry2D/RoundedRectangle2D.x3d"></meta>
<meta name="modified" content="Fri, 21 Dec 2018 14:50:04 GMT"></meta>
</head>
<Scene><ProtoDeclare name="RoundedRectangle2D"><ProtoInterface><field name="cornerRadius" accessType="inputOutput" type="SFFloat" value="1"></field>
<field name="size" accessType="inputOutput" type="SFVec2f" value="2 2"></field>
<field name="solid" accessType="initializeOnly" type="SFBool"></field>
</ProtoInterface>
<ProtoBody><IndexedFaceSet DEF="Geometry" normalPerVertex="false"><TextureCoordinate containerField="texCoord"></TextureCoordinate>
<Coordinate containerField="coord"></Coordinate>
</IndexedFaceSet>
<Script DEF="RoundedRectangle2D" directOutput="true"><field name="cornerRadius" accessType="inputOutput" type="SFFloat"></field>
<field name="size" accessType="inputOutput" type="SFVec2f"></field>
<field name="cornerDimension" accessType="initializeOnly" type="SFFloat" value="10"></field>
<field name="solid" accessType="inputOutput" type="SFBool"></field>
<field name="geometry" accessType="initializeOnly" type="SFNode"><IndexedFaceSet USE="Geometry"></IndexedFaceSet>
</field>
<IS><connect nodeField="cornerRadius" protoField="cornerRadius"></connect>
<connect nodeField="size" protoField="size"></connect>
<connect nodeField="solid" protoField="solid"></connect>
</IS>
<![CDATA[ecmascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var radius = Math .min (Math .min (cornerRadius, size .x / 2), size .y / 2);

	var
		point         = new SFVec3f (radius, 0, 0),
		startRotation = new SFRotation (0, 0, 1, 0),
		endRotation   = new SFRotation (0, 0, 1, Math .PI / 2),
		maxSize       = Math .max (size .x, size .y),
		corner        = new MFVec3f (),
		coordIndex    = new MFInt32 (),
		coord         = geometry .coord .point,
		texCoord      = geometry .texCoord .point;

	coord    .length = 0;
	texCoord .length = 0;

	for (var i = 0, length = cornerDimension * 4; i < length; ++ i)
		coordIndex [coordIndex .length] = i;
		
	coordIndex [coordIndex .length] = -1;

	for (var i = 0; i < cornerDimension; ++i)
		corner [i] = startRotation .slerp (endRotation, i / (cornerDimension - 1)) .multVec (point);
	
	var translation = new SFVec3f (size .x / 2 - radius, size .y / 2 - radius, 0);

	for (var i = 0; i < cornerDimension; ++ i)
		coord [coord .length] = corner [i] .add (translation);

	var
		translation = new SFVec3f (-size .x / 2 + radius, size .y / 2 - radius, 0),
		rotation    = new SFRotation (0, 0, 1, Math .PI * 0.5);

	for (var i = 0; i < cornerDimension; ++ i)
		coord [coord .length] = rotation .multVec (corner [i]) .add (translation);

	var
		translation = new SFVec3f (-size .x / 2 + radius, -size .y / 2 + radius, 0),
		rotation    = new SFRotation (0, 0, 1, Math .PI);

	for (var i = 0; i < cornerDimension; ++ i)
		coord [coord .length] = rotation .multVec (corner [i]) .add (translation);

	var
		translation = new SFVec3f (size .x / 2 - radius, -size .y / 2 + radius, 0),
		rotation    = new SFRotation (0, 0, 1, Math .PI * 1.5);

	for (var i = 0; i < cornerDimension; ++ i)
		coord [coord .length] = rotation .multVec (corner [i]) .add (translation);

	var maxSize1_2 = new SFVec3f (maxSize / 2, maxSize / 2, 0);

	for (var i = 0, length = coord .length; i < length; ++ i)
	{
		var tex = coord [i] .add (maxSize1_2) .divide (maxSize);

		texCoord [i] = new SFVec2f (tex .x, tex .y);
	}

	if (! solid)
	{
		for (var i = 0, length = cornerDimension * 4; i < length; ++ i)
			coordIndex [coordIndex .length] = length - 1 - i;

		coordIndex [coordIndex .length] = -1;
	}

	geometry .set_coordIndex = coordIndex;
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<WorldInfo title="RoundedRectangle2D"><MetadataSet containerField="metadata" name="Titania" DEF="Titania" reference="http://titania.create3000.de"><MetadataSet name="Page" DEF="Page" reference="http://titania.create3000.de" containerField="value"><MetadataInteger name="activeView" DEF="activeView" reference="http://titania.create3000.de" value="1" containerField="value"></MetadataInteger>
<MetadataInteger name="multiView" DEF="multiView" reference="http://titania.create3000.de" value="1"></MetadataInteger>
</MetadataSet>
<MetadataSet name="Selection" DEF="Selection" reference="http://titania.create3000.de"><MetadataBoolean name="selectGeometry" DEF="selectGeometry" reference="http://titania.create3000.de" value="false" containerField="value"></MetadataBoolean>
<MetadataSet name="nodes" DEF="nodes" reference="http://titania.create3000.de"></MetadataSet>
</MetadataSet>
<MetadataSet name="Grid" DEF="Grid" reference="http://titania.create3000.de"><MetadataBoolean name="enabled" DEF="enabled" reference="http://titania.create3000.de" value="true" containerField="value"></MetadataBoolean>
</MetadataSet>
</MetadataSet>
</WorldInfo>
</Scene>
</X3D>