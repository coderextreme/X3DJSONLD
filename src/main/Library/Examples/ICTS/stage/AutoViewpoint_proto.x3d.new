<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Full" version="3.3" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.3.xsd" ><head><meta name="comment" content="World of Titania"></meta>
<meta name="created" content="Thu, 23 Apr 2015 06:06:56 GMT"></meta>
<meta name="creator" content="Holger Seelig"></meta>
<meta name="generator" content="Titania V0.7.8, http://titania.create3000.de"></meta>
<meta name="modified" content="Thu, 23 Apr 2015 06:06:56 GMT"></meta>
</head>
<Scene><ProtoDeclare name="AutoViewpoint"><ProtoInterface><field name="startTime" accessType="inputOutput" type="SFTime"></field>
<field name="set_isActive" accessType="inputOnly" type="SFBool"></field>
<field name="proximitySensor" accessType="initializeOnly" type="SFNode"><ProximitySensor DEF="_1"></ProximitySensor>
</field>
<field name="timeSensor" accessType="initializeOnly" type="SFNode"><TimeSensor DEF="_2"></TimeSensor>
</field>
<field name="positionInterpolator" accessType="initializeOnly" type="SFNode"><PositionInterpolator DEF="_3"></PositionInterpolator>
</field>
<field name="orientationInterpolator" accessType="initializeOnly" type="SFNode"><OrientationInterpolator DEF="_4"></OrientationInterpolator>
</field>
<field name="scalarInterpolator" accessType="initializeOnly" type="SFNode"><ScalarInterpolator DEF="_5"></ScalarInterpolator>
</field>
<field name="autoViewpoint" accessType="initializeOnly" type="SFNode"><Viewpoint DEF="_6"></Viewpoint>
</field>
<field name="viewpoint" accessType="initializeOnly" type="SFNode"><Viewpoint DEF="_7"></Viewpoint>
</field>
</ProtoInterface>
<ProtoBody><ProtoDeclare name="Data"><ProtoInterface><field name="startTime" accessType="inputOutput" type="SFTime"></field>
</ProtoInterface>
<ProtoBody><Group></Group>
</ProtoBody>
</ProtoDeclare>
<Group><Script DEF="avp" directOutput="true" mustEvaluate="true"><field name="set_startTime" accessType="inputOnly" type="SFTime"></field>
<field name="set_isActive" accessType="inputOnly" type="SFBool"></field>
<field name="proximitySensor" accessType="initializeOnly" type="SFNode"></field>
<field name="timeSensor" accessType="initializeOnly" type="SFNode"></field>
<field name="positionInterpolator" accessType="initializeOnly" type="SFNode"></field>
<field name="orientationInterpolator" accessType="initializeOnly" type="SFNode"></field>
<field name="scalarInterpolator" accessType="initializeOnly" type="SFNode"></field>
<field name="autoViewpoint" accessType="initializeOnly" type="SFNode"></field>
<field name="viewpoint" accessType="initializeOnly" type="SFNode"></field>
<field name="data" accessType="initializeOnly" type="SFNode"><ProtoInstance name="Data" DEF="Data"><IS><connect nodeField="startTime" protoField="startTime"></connect>
</IS>
</ProtoInstance>
</field>
<IS><connect nodeField="set_isActive" protoField="set_isActive"></connect>
<connect nodeField="proximitySensor" protoField="proximitySensor"></connect>
<connect nodeField="timeSensor" protoField="timeSensor"></connect>
<connect nodeField="positionInterpolator" protoField="positionInterpolator"></connect>
<connect nodeField="orientationInterpolator" protoField="orientationInterpolator"></connect>
<connect nodeField="scalarInterpolator" protoField="scalarInterpolator"></connect>
<connect nodeField="autoViewpoint" protoField="autoViewpoint"></connect>
<connect nodeField="viewpoint" protoField="viewpoint"></connect>
</IS>
<![CDATA[vrmlscript:
function initialize()
{
	timeSensor.enabled  = FALSE;
	timeSensor.stopTime = 0;

	if (positionInterpolator) {
		positionInterpolator.key      = new MFFloat(0, 1);
		positionInterpolator.keyValue = new MFVec3f(
			new SFVec3f(0, 0, 0),
			viewpoint.position
		);
	}

	if (orientationInterpolator) {
		orientationInterpolator.key      = new MFFloat(0, 1);
		orientationInterpolator.keyValue = new MFRotation(
			new SFRotation(0, 0, 1, 0),
			viewpoint.orientation
		);
	}

	if (scalarInterpolator) {
		scalarInterpolator.key		= new MFFloat(0, 1);
		scalarInterpolator.keyValue = new MFFloat(
			autoViewpoint.fieldOfView,
			viewpoint.fieldOfView
		);
	}
	autoViewpoint.jump = FALSE;
}

function set_startTime(value, time)
{
	if (timeSensor.isActive) return;

	timeSensor.enabled = TRUE;

	autoViewpoint.position    = proximitySensor.position_changed;
	autoViewpoint.orientation = proximitySensor.orientation_changed;

	if (positionInterpolator)    positionInterpolator.keyValue[0]    = autoViewpoint.position;
	if (orientationInterpolator) orientationInterpolator.keyValue[0] = autoViewpoint.orientation;

	autoViewpoint.set_bind = TRUE;
	timeSensor.startTime   = time;
}

function set_isActive(value, time)
{
	if (!value) {
		timeSensor.enabled = FALSE;
		if (autoViewpoint.isBound) {
			//autoViewpoint.set_bind = FALSE;
			viewpoint.set_bind = TRUE;
		}
	}
}]]></Script>
</Group>
<ROUTE fromNode="Data" fromField="startTime_changed" toNode="avp" toField="set_startTime"></ROUTE>
</ProtoBody>
</ProtoDeclare>
</Scene>
</X3D>