<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Full' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='https://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <meta content='World of Titania' name='comment'/>
    <meta content='Thu, 23 Apr 2015 06:07:04 GMT' name='created'/>
    <meta content='Holger Seelig' name='creator'/>
    <meta content='Titania V0.7.8, http://titania.create3000.de' name='generator'/>
    <meta content='Thu, 23 Apr 2015 06:07:04 GMT' name='modified'/>
  </head>
  <Scene>
    <ProtoDeclare name='Ghost'>
      <ProtoInterface>
        <field name='startPosition' accessType='inputOutput' type='SFVec2f'/>
        <field name='step' accessType='inputOutput' type='SFVec2f'/>
        <field name='visibilityLimit' accessType='inputOutput' type='SFFloat' value='40.0'/>
        <field name='cycleInterval' accessType='inputOutput' type='SFTime'/>
        <field name='freeze' accessType='inputOutput' type='SFBool'/>
        <field name='startTime' accessType='inputOutput' type='SFTime'/>
        <field name='stopTime' accessType='inputOutput' type='SFTime'/>
        <field name='isActive' accessType='outputOnly' type='SFBool'/>
        <field name='translation_changed' accessType='outputOnly' type='SFVec3f'/>
        <field name='matrix' accessType='inputOutput' type='SFNode'/>
        <field name='proximitySensor' accessType='inputOutput' type='SFNode'/>
      </ProtoInterface>
      <ProtoBody>
        <ProtoDeclare name='Data'>
          <ProtoInterface>
            <field name='startPosition' accessType='inputOutput' type='SFVec2f'/>
            <field name='step' accessType='inputOutput' type='SFVec2f'/>
            <field name='visibilityLimit' accessType='inputOutput' type='SFFloat'/>
            <field name='freeze' accessType='inputOutput' type='SFBool'/>
            <field name='startTime' accessType='inputOutput' type='SFTime'/>
            <field name='stopTime' accessType='inputOutput' type='SFTime'/>
            <field name='matrix' accessType='inputOutput' type='SFNode'/>
            <field name='proximitySensor' accessType='inputOutput' type='SFNode'/>
          </ProtoInterface>
          <ProtoBody>
            <Group/>
          </ProtoBody>
        </ProtoDeclare>
        <Script DEF='_ghost_1' directOutput='true'>
          <field name='translation_changed' accessType='outputOnly' type='SFVec3f'/>
          <field name='isActive' accessType='outputOnly' type='SFBool'/>
          <field name='set_startTime' accessType='inputOnly' type='SFTime'/>
          <field name='set_stopTime' accessType='inputOnly' type='SFTime'/>
          <field name='set_freeze' accessType='inputOnly' type='SFBool'/>
          <field name='go' accessType='inputOnly' type='SFBool'/>
          <field name='position' accessType='initializeOnly' type='SFInt32'/>
          <field name='lastPosition' accessType='initializeOnly' type='SFInt32'/>
          <field name='lastDirection' accessType='initializeOnly' type='SFVec2f'/>
          <field name='rd' accessType='initializeOnly' type='SFVec2f'/>
          <field name='v' accessType='initializeOnly' type='SFVec3f'/>
          <field name='data' accessType='initializeOnly' type='SFNode'>
            <ProtoInstance DEF='_1' name='Data'>
              <IS>
                <connect nodeField='startPosition' protoField='startPosition'/>
                <connect nodeField='step' protoField='step'/>
                <connect nodeField='visibilityLimit' protoField='visibilityLimit'/>
                <connect nodeField='freeze' protoField='freeze'/>
                <connect nodeField='startTime' protoField='startTime'/>
                <connect nodeField='stopTime' protoField='stopTime'/>
                <connect nodeField='matrix' protoField='matrix'/>
                <connect nodeField='proximitySensor' protoField='proximitySensor'/>
              </IS>
            </ProtoInstance>
          </field>
          <field name='timeSensor' accessType='initializeOnly' type='SFNode'>
            <TimeSensor DEF='_2'>
              <IS>
                <connect nodeField='cycleInterval' protoField='cycleInterval'/>
              </IS>
            </TimeSensor>
          </field>
          <field name='translationInterpolator' accessType='initializeOnly' type='SFNode'>
            <PositionInterpolator DEF='_3' key='0 1' keyValue='0 0 0 0 0 0'>
              <IS>
                <connect nodeField='value_changed' protoField='translation_changed'/>
              </IS>
            </PositionInterpolator>
          </field>
          <IS>
            <connect nodeField='translation_changed' protoField='translation_changed'/>
            <connect nodeField='isActive' protoField='isActive'/>
          </IS>
<![CDATA[
vrmlscript:
function random(value)
{
	return Math.round(Math.random() * value);
}

function getTranslation(value)
{
	y = Math.floor(value / data.matrix.size.x);
	x = value - (y * data.matrix.size.x);
	return new SFVec3f(x * data.step.x, 0, y * data.step.y);
}

function randomPosition()
{
	i = random(data.matrix.size.x * data.matrix.size.y - 1);
	while (!data.matrix.matrix[i]) {
		i = random(data.matrix.size.x * data.matrix.size.y - 1);
	}
	return i;
}

function randomDirection()
{
	d = new SFVec2f(0, 0);

	if (Math.random() > 0.5) d.x = Math.random() > 0.5 ? 1 : -1;
	else d.y = Math.random() > 0.5 ? 1 : -1;

	return d;
}

function aimDirection(value)
{
	direction = new SFVec2f(0, 0);
	v = translationInterpolator.keyValue[1].add(data.proximitySensor.position_changed.negate());
	if (data.proximitySensor.isActive && v.length() < data.visibilityLimit) {
		x = Math.abs(v.x);
		y = Math.abs(v.z);
		if (value) {
			if (x < y) direction.x = -(v.x / x);
			else direction.y = v.z / y;
		} else {
			if (x > y) direction.x = -(v.x / x);
			else direction.y = v.z / y;
		}
	} else {
			if (value) direction = new SFVec2f(-rd.y, -rd.x);
			else {
				rd = randomDirection();
				direction = rd;
			}
	}
	return direction;
}

function newPosition()
{
	ways = data.matrix.matrix[position];
	if (ways > 2) {
		direction = aimDirection(0);
		p = (position + direction.x) + direction.y * data.matrix.size.x;
		if (!data.matrix.matrix[p] || p == lastPosition) {
			d = direction;
			direction = aimDirection(1);
			p = (position + direction.x) + direction.y * data.matrix.size.x;
			if (!data.matrix.matrix[p] || p == lastPosition) {
				direction = direction.negate();
				p = (position + direction.x) + direction.y * data.matrix.size.x;
				if (!data.matrix.matrix[p]) {
					direction = d.negate();
					p = (position + direction.x) + direction.y * data.matrix.size.x;
				}
			}
		} else if (Math.random() < 0.5) {
			d = aimDirection(1);
			pr = (position + d.x) + d.y * data.matrix.size.x;
			if (data.matrix.matrix[pr] && pr != lastPosition) {
				direction = d;
				p = pr;
			}
		}
	} else if (ways > 1) {
		direction = lastDirection;
		p = (position + direction.x) + direction.y * data.matrix.size.x;
		if (!data.matrix.matrix[p]) {
			direction = aimDirection(0);
			p = (position + direction.x) + direction.y * data.matrix.size.x;
			if (!data.matrix.matrix[p]) {
				d = direction;
				direction = aimDirection(1);
				p = (position + direction.x) + direction.y * data.matrix.size.x;
				if (!data.matrix.matrix[p]) {
					direction = direction.negate();
					p = (position + direction.x) + direction.y * data.matrix.size.x;
					if (!data.matrix.matrix[p]) {
						direction = d.negate();
						p = (position + direction.x) + direction.y * data.matrix.size.x;
					}
				}
			}
		}
	} else {
		direction = lastDirection.negate();
		p = lastPosition;
	}
	lastDirection = direction;
	lastPosition = position;
	position = p;
	return p;
}

function go(value, time)
{
	if (!value) {
//		if (v.length() < data.step.length()) collideTime = time;
		if (!data.freeze) {
			translationInterpolator.keyValue[0] = translationInterpolator.keyValue[1];
			p = newPosition();
			translationInterpolator.keyValue[1] = getTranslation(p);
			timeSensor.startTime = time;
		}
	}
}

function set_freeze(value, time)
{
	if (!value && !timeSensor.isActive && isActive) go(FALSE, time);
}

function set_startTime(value, time)
{
	isActive = TRUE;
	timeSensor.enabled = TRUE;
	if(data.startPosition.length()) {
		position = data.startPosition.x + data.startPosition.y * data.matrix.size.x;
	} else {
		position = randomPosition();
	}
	translation_changed = getTranslation(position);

	v = new SFVec3f(data.step.x, 0, data.step.y);
	translationInterpolator.keyValue[1] = translation_changed;
	go(FALSE, value + 0.1);
}

function set_stopTime(value, time)
{
	timeSensor.enabled = FALSE;
	isActive = FALSE;
}
]]>
        </Script>
        <ROUTE fromField='fraction_changed' fromNode='_2' toField='set_fraction' toNode='_3'/>
        <ROUTE fromField='startTime_changed' fromNode='_1' toField='set_startTime' toNode='_ghost_1'/>
        <ROUTE fromField='stopTime_changed' fromNode='_1' toField='set_stopTime' toNode='_ghost_1'/>
        <ROUTE fromField='freeze_changed' fromNode='_1' toField='set_freeze' toNode='_ghost_1'/>
        <ROUTE fromField='isActive' fromNode='_2' toField='go' toNode='_ghost_1'/>
      </ProtoBody>
    </ProtoDeclare>
  </Scene>
</X3D>
