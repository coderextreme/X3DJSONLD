<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Full' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='https://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <meta content='World of Titania' name='comment'/>
    <meta content='Thu, 23 Apr 2015 06:07:16 GMT' name='created'/>
    <meta content='Holger Seelig' name='creator'/>
    <meta content='Titania V0.7.8, http://titania.create3000.de' name='generator'/>
    <meta content='Thu, 23 Apr 2015 06:07:16 GMT' name='modified'/>
  </head>
  <Scene>
    <ProtoDeclare name='ToggleAnim'>
      <ProtoInterface>
        <field name='direction' accessType='inputOutput' type='SFBool'/>
        <field name='startTime' accessType='inputOnly' type='SFTime'/>
        <field name='forward' accessType='inputOnly' type='SFTime'/>
        <field name='back' accessType='inputOnly' type='SFTime'/>
        <field name='state_changed' accessType='outputOnly' type='SFBool'/>
        <field name='set_isActive' accessType='inputOnly' type='SFBool'/>
        <field name='forwardTimer' accessType='initializeOnly' type='SFNode'>
          <TimeSensor DEF='_1'/>
        </field>
        <field name='backTimer' accessType='initializeOnly' type='SFNode'>
          <TimeSensor DEF='_2'/>
        </field>
      </ProtoInterface>
      <ProtoBody>
        <ProtoDeclare name='Data'>
          <ProtoInterface>
            <field name='direction' accessType='inputOutput' type='SFBool'/>
          </ProtoInterface>
          <ProtoBody>
            <Group/>
          </ProtoBody>
        </ProtoDeclare>
        <Group>
          <Script DEF='_toggleAnimScript' directOutput='true' mustEvaluate='true'>
            <field name='state_changed' accessType='outputOnly' type='SFBool'/>
            <field name='startTime' accessType='inputOnly' type='SFTime'/>
            <field name='forward' accessType='inputOnly' type='SFTime'/>
            <field name='back' accessType='inputOnly' type='SFTime'/>
            <field name='set_direction' accessType='inputOnly' type='SFBool'/>
            <field name='set_isActive' accessType='inputOnly' type='SFBool'/>
            <field name='direction' accessType='initializeOnly' type='SFBool'/>
            <field name='forwardTimer' accessType='initializeOnly' type='SFNode'/>
            <field name='backTimer' accessType='initializeOnly' type='SFNode'/>
            <field name='isActive' accessType='initializeOnly' type='SFBool'/>
            <field name='next' accessType='initializeOnly' type='SFBool'/>
            <field name='data' accessType='initializeOnly' type='SFNode'>
              <ProtoInstance DEF='Data_1' name='Data'>
                <IS>
                  <connect nodeField='direction' protoField='direction'/>
                </IS>
              </ProtoInstance>
            </field>
            <IS>
              <connect nodeField='state_changed' protoField='state_changed'/>
              <connect nodeField='startTime' protoField='startTime'/>
              <connect nodeField='forward' protoField='forward'/>
              <connect nodeField='back' protoField='back'/>
              <connect nodeField='set_isActive' protoField='set_isActive'/>
              <connect nodeField='forwardTimer' protoField='forwardTimer'/>
              <connect nodeField='backTimer' protoField='backTimer'/>
            </IS>
<![CDATA[
vrmlscript:
function initialize()
{
	forwardTimer.stopTime = 0;
	backTimer.stopTime    = 0;
	direction = data.direction;
	state_changed = direction;
}

function set_direction(value, time)
{
	if (value == direction) return;
	direction = value;
	if (direction == state_changed) {
		next = TRUE;
	} else {
		next = FALSE;
		if (direction) {
			forwardTimer.enabled   = TRUE;
			forwardTimer.startTime = time;			
		} else {
			backTimer.enabled	= TRUE;
			backTimer.startTime = time;
		}
	}
}

function startTime(value, time)
{
	if (!next) set_direction(!direction, time);
}

function forward(value, time)
{
	set_direction(TRUE, time);
}

function back(value, time)
{
	 set_direction(FALSE, time);
}

function set_isActive(value, time)
{
	isActive = value;
	if (!isActive) {
		if (next) {
			direction = !direction;
			state_changed = direction;
			set_direction(!direction, time);
		} else {
			state_changed = direction;
			forwardTimer.enabled = FALSE;
			backTimer.enabled	 = FALSE;			
		}
	}
}
]]>
          </Script>
        </Group>
        <ROUTE fromField='direction_changed' fromNode='Data_1' toField='set_direction' toNode='_toggleAnimScript'/>
      </ProtoBody>
    </ProtoDeclare>
  </Scene>
</X3D>
