{ "X3D": {
    "encoding":"UTF-8",
    "@profile":"Full",
    "@version":"3.3",
    "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.3.xsd",
    "JSON schema":"https://www.web3d.org/specifications/x3d-4.0-JSONSchema.json",
    "head": {
        "meta": [
          {
            "@name":"comment",
            "@content":"World of Titania"
          },
          {
            "@name":"created",
            "@content":"Thu, 23 Apr 2015 06:07:04 GMT"
          },
          {
            "@name":"creator",
            "@content":"Holger Seelig"
          },
          {
            "@name":"generator",
            "@content":"Titania V0.7.8, http://titania.create3000.de"
          },
          {
            "@name":"modified",
            "@content":"Thu, 23 Apr 2015 06:07:04 GMT"
          },
          {
            "@name":"translated",
            "@content":"24 November 2021"
          },
          {
            "@name":"generator",
            "@content":"X3dToJson.xslt, https://www.web3d.org/x3d/stylesheets/X3dToJson.html"
          },
          {
            "@name":"reference",
            "@content":"X3D JSON encoding: https://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
          }
        ]
    },
    "Scene": {
        "-children":[
          { "ProtoDeclare":
            {
              "@name":"Ghost",
              "ProtoInterface": {
                  "field": [
                    {
                      "@name":"startPosition",
                      "@accessType":"inputOutput",
                      "@type":"SFVec2f"
                    },
                    {
                      "@name":"step",
                      "@accessType":"inputOutput",
                      "@type":"SFVec2f"
                    },
                    {
                      "@name":"visibilityLimit",
                      "@accessType":"inputOutput",
                      "@type":"SFFloat",
                      "@value":40
                    },
                    {
                      "@name":"cycleInterval",
                      "@accessType":"inputOutput",
                      "@type":"SFTime",
                      "@value":1.5
                    },
                    {
                      "@name":"freeze",
                      "@accessType":"inputOutput",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"startTime",
                      "@accessType":"inputOutput",
                      "@type":"SFTime"
                    },
                    {
                      "@name":"stopTime",
                      "@accessType":"inputOutput",
                      "@type":"SFTime"
                    },
                    {
                      "@name":"isActive",
                      "@accessType":"outputOnly",
                      "@type":"SFBool"
                    },
                    {
                      "@name":"translation_changed",
                      "@accessType":"outputOnly",
                      "@type":"SFVec3f"
                    },
                    {
                      "@name":"matrix",
                      "@accessType":"inputOutput",
                      "@type":"SFNode"
                    },
                    {
                      "@name":"proximitySensor",
                      "@accessType":"inputOutput",
                      "@type":"SFNode"
                    }
                  ]
              },
              "ProtoBody": {
                  "-children":[
                    { "ProtoDeclare":
                      {
                        "@name":"Data",
                        "ProtoInterface": {
                            "field": [
                              {
                                "@name":"startPosition",
                                "@accessType":"inputOutput",
                                "@type":"SFVec2f"
                              },
                              {
                                "@name":"step",
                                "@accessType":"inputOutput",
                                "@type":"SFVec2f"
                              },
                              {
                                "@name":"visibilityLimit",
                                "@accessType":"inputOutput",
                                "@type":"SFFloat"
                              },
                              {
                                "@name":"freeze",
                                "@accessType":"inputOutput",
                                "@type":"SFBool"
                              },
                              {
                                "@name":"startTime",
                                "@accessType":"inputOutput",
                                "@type":"SFTime"
                              },
                              {
                                "@name":"stopTime",
                                "@accessType":"inputOutput",
                                "@type":"SFTime"
                              },
                              {
                                "@name":"matrix",
                                "@accessType":"inputOutput",
                                "@type":"SFNode"
                              },
                              {
                                "@name":"proximitySensor",
                                "@accessType":"inputOutput",
                                "@type":"SFNode"
                              }
                            ]
                        },
                        "ProtoBody": {
                            "-children":[
                              { "Group":
                                {
                                }
                              }
                            ]
                        }
                      }
                    },
                    { "Script":
                      {
                        "@DEF":"_ghost_1",
                        "@directOutput":true,
                        "field": [
                          {
                            "@name":"translation_changed",
                            "@accessType":"outputOnly",
                            "@type":"SFVec3f"
                          },
                          {
                            "@name":"isActive",
                            "@accessType":"outputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"set_startTime",
                            "@accessType":"inputOnly",
                            "@type":"SFTime"
                          },
                          {
                            "@name":"set_stopTime",
                            "@accessType":"inputOnly",
                            "@type":"SFTime"
                          },
                          {
                            "@name":"set_freeze",
                            "@accessType":"inputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"go",
                            "@accessType":"inputOnly",
                            "@type":"SFBool"
                          },
                          {
                            "@name":"position",
                            "@accessType":"initializeOnly",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"lastPosition",
                            "@accessType":"initializeOnly",
                            "@type":"SFInt32"
                          },
                          {
                            "@name":"lastDirection",
                            "@accessType":"initializeOnly",
                            "@type":"SFVec2f"
                          },
                          {
                            "@name":"rd",
                            "@accessType":"initializeOnly",
                            "@type":"SFVec2f"
                          },
                          {
                            "@name":"v",
                            "@accessType":"initializeOnly",
                            "@type":"SFVec3f"
                          },
                          {
                            "@name":"data",
                            "@accessType":"initializeOnly",
                            "@type":"SFNode",
                            "-children":[
                              { "ProtoInstance":
                                {
                                  "@name":"Data",
                                  "@DEF":"_1",
                                  "IS": {
                                      "connect": [
                                        {
                                          "@nodeField":"startPosition",
                                          "@protoField":"startPosition"
                                        },
                                        {
                                          "@nodeField":"step",
                                          "@protoField":"step"
                                        },
                                        {
                                          "@nodeField":"visibilityLimit",
                                          "@protoField":"visibilityLimit"
                                        },
                                        {
                                          "@nodeField":"freeze",
                                          "@protoField":"freeze"
                                        },
                                        {
                                          "@nodeField":"startTime",
                                          "@protoField":"startTime"
                                        },
                                        {
                                          "@nodeField":"stopTime",
                                          "@protoField":"stopTime"
                                        },
                                        {
                                          "@nodeField":"matrix",
                                          "@protoField":"matrix"
                                        },
                                        {
                                          "@nodeField":"proximitySensor",
                                          "@protoField":"proximitySensor"
                                        }
                                      ]
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "@name":"timeSensor",
                            "@accessType":"initializeOnly",
                            "@type":"SFNode",
                            "-children":[
                              { "TimeSensor":
                                {
                                  "@DEF":"_2",
                                  "IS": {
                                      "connect": [
                                        {
                                          "@nodeField":"cycleInterval",
                                          "@protoField":"cycleInterval"
                                        }
                                      ]
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "@name":"translationInterpolator",
                            "@accessType":"initializeOnly",
                            "@type":"SFNode",
                            "-children":[
                              { "PositionInterpolator":
                                {
                                  "@DEF":"_3",
                                  "@key":[0,1],
                                  "@keyValue":[0,0,0,0,0,0],
                                  "IS": {
                                      "connect": [
                                        {
                                          "@nodeField":"value_changed",
                                          "@protoField":"translation_changed"
                                        }
                                      ]
                                  }
                                }
                              }
                            ]
                          }
                        ],
                        "IS": {
                            "connect": [
                              {
                                "@nodeField":"translation_changed",
                                "@protoField":"translation_changed"
                              },
                              {
                                "@nodeField":"isActive",
                                "@protoField":"isActive"
                              }
                            ]
                        },
                        "#sourceText":[
"",
"vrmlscript:",
"function random(value)",
"{",
"\treturn Math.round(Math.random() * value);",
"}",
"",
"function getTranslation(value)",
"{",
"\ty = Math.floor(value / data.matrix.size.x);",
"\tx = value - (y * data.matrix.size.x);",
"\treturn new SFVec3f(x * data.step.x, 0, y * data.step.y);",
"}",
"",
"function randomPosition()",
"{",
"\ti = random(data.matrix.size.x * data.matrix.size.y - 1);",
"\twhile (!data.matrix.matrix[i]) {",
"\t\ti = random(data.matrix.size.x * data.matrix.size.y - 1);",
"\t}",
"\treturn i;",
"}",
"",
"function randomDirection()",
"{",
"\td = new SFVec2f(0, 0);",
"",
"\tif (Math.random() > 0.5) d.x = Math.random() > 0.5 ? 1 : -1;",
"\telse d.y = Math.random() > 0.5 ? 1 : -1;",
"",
"\treturn d;",
"}",
"",
"function aimDirection(value)",
"{",
"\tdirection = new SFVec2f(0, 0);",
"\tv = translationInterpolator.keyValue[1].add(data.proximitySensor.position_changed.negate());",
"\tif (data.proximitySensor.isActive && v.length() < data.visibilityLimit) {",
"\t\tx = Math.abs(v.x);",
"\t\ty = Math.abs(v.z);",
"\t\tif (value) {",
"\t\t\tif (x < y) direction.x = -(v.x / x);",
"\t\t\telse direction.y = v.z / y;",
"\t\t} else {",
"\t\t\tif (x > y) direction.x = -(v.x / x);",
"\t\t\telse direction.y = v.z / y;",
"\t\t}",
"\t} else {",
"\t\t\tif (value) direction = new SFVec2f(-rd.y, -rd.x);",
"\t\t\telse {",
"\t\t\t\trd = randomDirection();",
"\t\t\t\tdirection = rd;",
"\t\t\t}",
"\t}",
"\treturn direction;",
"}",
"",
"function newPosition()",
"{",
"\tways = data.matrix.matrix[position];",
"\tif (ways > 2) {",
"\t\tdirection = aimDirection(0);",
"\t\tp = (position + direction.x) + direction.y * data.matrix.size.x;",
"\t\tif (!data.matrix.matrix[p] || p == lastPosition) {",
"\t\t\td = direction;",
"\t\t\tdirection = aimDirection(1);",
"\t\t\tp = (position + direction.x) + direction.y * data.matrix.size.x;",
"\t\t\tif (!data.matrix.matrix[p] || p == lastPosition) {",
"\t\t\t\tdirection = direction.negate();",
"\t\t\t\tp = (position + direction.x) + direction.y * data.matrix.size.x;",
"\t\t\t\tif (!data.matrix.matrix[p]) {",
"\t\t\t\t\tdirection = d.negate();",
"\t\t\t\t\tp = (position + direction.x) + direction.y * data.matrix.size.x;",
"\t\t\t\t}",
"\t\t\t}",
"\t\t} else if (Math.random() < 0.5) {",
"\t\t\td = aimDirection(1);",
"\t\t\tpr = (position + d.x) + d.y * data.matrix.size.x;",
"\t\t\tif (data.matrix.matrix[pr] && pr != lastPosition) {",
"\t\t\t\tdirection = d;",
"\t\t\t\tp = pr;",
"\t\t\t}",
"\t\t}",
"\t} else if (ways > 1) {",
"\t\tdirection = lastDirection;",
"\t\tp = (position + direction.x) + direction.y * data.matrix.size.x;",
"\t\tif (!data.matrix.matrix[p]) {",
"\t\t\tdirection = aimDirection(0);",
"\t\t\tp = (position + direction.x) + direction.y * data.matrix.size.x;",
"\t\t\tif (!data.matrix.matrix[p]) {",
"\t\t\t\td = direction;",
"\t\t\t\tdirection = aimDirection(1);",
"\t\t\t\tp = (position + direction.x) + direction.y * data.matrix.size.x;",
"\t\t\t\tif (!data.matrix.matrix[p]) {",
"\t\t\t\t\tdirection = direction.negate();",
"\t\t\t\t\tp = (position + direction.x) + direction.y * data.matrix.size.x;",
"\t\t\t\t\tif (!data.matrix.matrix[p]) {",
"\t\t\t\t\t\tdirection = d.negate();",
"\t\t\t\t\t\tp = (position + direction.x) + direction.y * data.matrix.size.x;",
"\t\t\t\t\t}",
"\t\t\t\t}",
"\t\t\t}",
"\t\t}",
"\t} else {",
"\t\tdirection = lastDirection.negate();",
"\t\tp = lastPosition;",
"\t}",
"\tlastDirection = direction;",
"\tlastPosition = position;",
"\tposition = p;",
"\treturn p;",
"}",
"",
"function go(value, time)",
"{",
"\tif (!value) {",
"//\t\tif (v.length() < data.step.length()) collideTime = time;",
"\t\tif (!data.freeze) {",
"\t\t\ttranslationInterpolator.keyValue[0] = translationInterpolator.keyValue[1];",
"\t\t\tp = newPosition();",
"\t\t\ttranslationInterpolator.keyValue[1] = getTranslation(p);",
"\t\t\ttimeSensor.startTime = time;",
"\t\t}",
"\t}",
"}",
"",
"function set_freeze(value, time)",
"{",
"\tif (!value && !timeSensor.isActive && isActive) go(FALSE, time);",
"}",
"",
"function set_startTime(value, time)",
"{",
"\tisActive = TRUE;",
"\ttimeSensor.enabled = TRUE;",
"\tif(data.startPosition.length()) {",
"\t\tposition = data.startPosition.x + data.startPosition.y * data.matrix.size.x;",
"\t} else {",
"\t\tposition = randomPosition();",
"\t}",
"\ttranslation_changed = getTranslation(position);",
"",
"\tv = new SFVec3f(data.step.x, 0, data.step.y);",
"\ttranslationInterpolator.keyValue[1] = translation_changed;",
"\tgo(FALSE, value + 0.1);",
"}",
"",
"function set_stopTime(value, time)",
"{",
"\ttimeSensor.enabled = FALSE;",
"\tisActive = FALSE;",
"}",
"",
""
]
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromNode":"_2",
                        "@fromField":"fraction_changed",
                        "@toNode":"_3",
                        "@toField":"set_fraction"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromNode":"_1",
                        "@fromField":"startTime_changed",
                        "@toNode":"_ghost_1",
                        "@toField":"set_startTime"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromNode":"_1",
                        "@fromField":"stopTime_changed",
                        "@toNode":"_ghost_1",
                        "@toField":"set_stopTime"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromNode":"_1",
                        "@fromField":"freeze_changed",
                        "@toNode":"_ghost_1",
                        "@toField":"set_freeze"
                      }
                    },
                    { "ROUTE":
                      {
                        "@fromNode":"_2",
                        "@fromField":"isActive",
                        "@toNode":"_ghost_1",
                        "@toField":"go"
                      }
                    }
                  ]
              }
            }
          }
        ]
    }
  }
}