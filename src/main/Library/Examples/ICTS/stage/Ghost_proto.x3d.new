<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Full" version="3.3" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.3.xsd" ><head><meta name="comment" content="World of Titania"></meta>
<meta name="created" content="Thu, 23 Apr 2015 06:07:04 GMT"></meta>
<meta name="creator" content="Holger Seelig"></meta>
<meta name="generator" content="Titania V0.7.8, http://titania.create3000.de"></meta>
<meta name="modified" content="Thu, 23 Apr 2015 06:07:04 GMT"></meta>
</head>
<Scene><ProtoDeclare name="Ghost"><ProtoInterface><field name="startPosition" accessType="inputOutput" type="SFVec2f"></field>
<field name="step" accessType="inputOutput" type="SFVec2f"></field>
<field name="visibilityLimit" accessType="inputOutput" type="SFFloat" value="40"></field>
<field name="cycleInterval" accessType="inputOutput" type="SFTime" value="1.5"></field>
<field name="freeze" accessType="inputOutput" type="SFBool"></field>
<field name="startTime" accessType="inputOutput" type="SFTime"></field>
<field name="stopTime" accessType="inputOutput" type="SFTime"></field>
<field name="isActive" accessType="outputOnly" type="SFBool"></field>
<field name="translation_changed" accessType="outputOnly" type="SFVec3f"></field>
<field name="matrix" accessType="inputOutput" type="SFNode"></field>
<field name="proximitySensor" accessType="inputOutput" type="SFNode"></field>
</ProtoInterface>
<ProtoBody><ProtoDeclare name="Data"><ProtoInterface><field name="startPosition" accessType="inputOutput" type="SFVec2f"></field>
<field name="step" accessType="inputOutput" type="SFVec2f"></field>
<field name="visibilityLimit" accessType="inputOutput" type="SFFloat"></field>
<field name="freeze" accessType="inputOutput" type="SFBool"></field>
<field name="startTime" accessType="inputOutput" type="SFTime"></field>
<field name="stopTime" accessType="inputOutput" type="SFTime"></field>
<field name="matrix" accessType="inputOutput" type="SFNode"></field>
<field name="proximitySensor" accessType="inputOutput" type="SFNode"></field>
</ProtoInterface>
<ProtoBody><Group></Group>
</ProtoBody>
</ProtoDeclare>
<Script DEF="_ghost_1" directOutput="true"><field name="translation_changed" accessType="outputOnly" type="SFVec3f"></field>
<field name="isActive" accessType="outputOnly" type="SFBool"></field>
<field name="set_startTime" accessType="inputOnly" type="SFTime"></field>
<field name="set_stopTime" accessType="inputOnly" type="SFTime"></field>
<field name="set_freeze" accessType="inputOnly" type="SFBool"></field>
<field name="go" accessType="inputOnly" type="SFBool"></field>
<field name="position" accessType="initializeOnly" type="SFInt32"></field>
<field name="lastPosition" accessType="initializeOnly" type="SFInt32"></field>
<field name="lastDirection" accessType="initializeOnly" type="SFVec2f"></field>
<field name="rd" accessType="initializeOnly" type="SFVec2f"></field>
<field name="v" accessType="initializeOnly" type="SFVec3f"></field>
<field name="data" accessType="initializeOnly" type="SFNode"><ProtoInstance name="Data" DEF="_1"><IS><connect nodeField="startPosition" protoField="startPosition"></connect>
<connect nodeField="step" protoField="step"></connect>
<connect nodeField="visibilityLimit" protoField="visibilityLimit"></connect>
<connect nodeField="freeze" protoField="freeze"></connect>
<connect nodeField="startTime" protoField="startTime"></connect>
<connect nodeField="stopTime" protoField="stopTime"></connect>
<connect nodeField="matrix" protoField="matrix"></connect>
<connect nodeField="proximitySensor" protoField="proximitySensor"></connect>
</IS>
</ProtoInstance>
</field>
<field name="timeSensor" accessType="initializeOnly" type="SFNode"><TimeSensor DEF="_2"><IS><connect nodeField="cycleInterval" protoField="cycleInterval"></connect>
</IS>
</TimeSensor>
</field>
<field name="translationInterpolator" accessType="initializeOnly" type="SFNode"><PositionInterpolator DEF="_3" key="0 1" keyValue="0 0 0 0 0 0"><IS><connect nodeField="value_changed" protoField="translation_changed"></connect>
</IS>
</PositionInterpolator>
</field>
<IS><connect nodeField="translation_changed" protoField="translation_changed"></connect>
<connect nodeField="isActive" protoField="isActive"></connect>
</IS>
<![CDATA[vrmlscript:
function random(value)
{
	return Math.round(Math.random() * value);
}

function getTranslation(value)
{
	y = Math.floor(value / data.matrix.size.x);
	x = value - (y * data.matrix.size.x);
	return new SFVec3f(x * data.step.x, 0, y * data.step.y);
}

function randomPosition()
{
	i = random(data.matrix.size.x * data.matrix.size.y - 1);
	while (!data.matrix.matrix[i]) {
		i = random(data.matrix.size.x * data.matrix.size.y - 1);
	}
	return i;
}

function randomDirection()
{
	d = new SFVec2f(0, 0);

	if (Math.random() > 0.5) d.x = Math.random() > 0.5 ? 1 : -1;
	else d.y = Math.random() > 0.5 ? 1 : -1;

	return d;
}

function aimDirection(value)
{
	direction = new SFVec2f(0, 0);
	v = translationInterpolator.keyValue[1].add(data.proximitySensor.position_changed.negate());
	if (data.proximitySensor.isActive && v.length() < data.visibilityLimit) {
		x = Math.abs(v.x);
		y = Math.abs(v.z);
		if (value) {
			if (x < y) direction.x = -(v.x / x);
			else direction.y = v.z / y;
		} else {
			if (x > y) direction.x = -(v.x / x);
			else direction.y = v.z / y;
		}
	} else {
			if (value) direction = new SFVec2f(-rd.y, -rd.x);
			else {
				rd = randomDirection();
				direction = rd;
			}
	}
	return direction;
}

function newPosition()
{
	ways = data.matrix.matrix[position];
	if (ways > 2) {
		direction = aimDirection(0);
		p = (position + direction.x) + direction.y * data.matrix.size.x;
		if (!data.matrix.matrix[p] || p == lastPosition) {
			d = direction;
			direction = aimDirection(1);
			p = (position + direction.x) + direction.y * data.matrix.size.x;
			if (!data.matrix.matrix[p] || p == lastPosition) {
				direction = direction.negate();
				p = (position + direction.x) + direction.y * data.matrix.size.x;
				if (!data.matrix.matrix[p]) {
					direction = d.negate();
					p = (position + direction.x) + direction.y * data.matrix.size.x;
				}
			}
		} else if (Math.random() < 0.5) {
			d = aimDirection(1);
			pr = (position + d.x) + d.y * data.matrix.size.x;
			if (data.matrix.matrix[pr] && pr != lastPosition) {
				direction = d;
				p = pr;
			}
		}
	} else if (ways > 1) {
		direction = lastDirection;
		p = (position + direction.x) + direction.y * data.matrix.size.x;
		if (!data.matrix.matrix[p]) {
			direction = aimDirection(0);
			p = (position + direction.x) + direction.y * data.matrix.size.x;
			if (!data.matrix.matrix[p]) {
				d = direction;
				direction = aimDirection(1);
				p = (position + direction.x) + direction.y * data.matrix.size.x;
				if (!data.matrix.matrix[p]) {
					direction = direction.negate();
					p = (position + direction.x) + direction.y * data.matrix.size.x;
					if (!data.matrix.matrix[p]) {
						direction = d.negate();
						p = (position + direction.x) + direction.y * data.matrix.size.x;
					}
				}
			}
		}
	} else {
		direction = lastDirection.negate();
		p = lastPosition;
	}
	lastDirection = direction;
	lastPosition = position;
	position = p;
	return p;
}

function go(value, time)
{
	if (!value) {
//		if (v.length() < data.step.length()) collideTime = time;
		if (!data.freeze) {
			translationInterpolator.keyValue[0] = translationInterpolator.keyValue[1];
			p = newPosition();
			translationInterpolator.keyValue[1] = getTranslation(p);
			timeSensor.startTime = time;
		}
	}
}

function set_freeze(value, time)
{
	if (!value && !timeSensor.isActive && isActive) go(FALSE, time);
}

function set_startTime(value, time)
{
	isActive = TRUE;
	timeSensor.enabled = TRUE;
	if(data.startPosition.length()) {
		position = data.startPosition.x + data.startPosition.y * data.matrix.size.x;
	} else {
		position = randomPosition();
	}
	translation_changed = getTranslation(position);

	v = new SFVec3f(data.step.x, 0, data.step.y);
	translationInterpolator.keyValue[1] = translation_changed;
	go(FALSE, value + 0.1);
}

function set_stopTime(value, time)
{
	timeSensor.enabled = FALSE;
	isActive = FALSE;
}]]></Script>
<ROUTE fromNode="_2" fromField="fraction_changed" toNode="_3" toField="set_fraction"></ROUTE>
<ROUTE fromNode="_1" fromField="startTime_changed" toNode="_ghost_1" toField="set_startTime"></ROUTE>
<ROUTE fromNode="_1" fromField="stopTime_changed" toNode="_ghost_1" toField="set_stopTime"></ROUTE>
<ROUTE fromNode="_1" fromField="freeze_changed" toNode="_ghost_1" toField="set_freeze"></ROUTE>
<ROUTE fromNode="_2" fromField="isActive" toNode="_ghost_1" toField="go"></ROUTE>
</ProtoBody>
</ProtoDeclare>
</Scene>
</X3D>