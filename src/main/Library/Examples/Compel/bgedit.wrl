#VRML V2.0 utf8

WorldInfo{
 info[
 "CosmoWorlds VlipArt (c)1997 background editor - pioneer@sgi.com"
 ]
}

NavigationInfo{ type ["EXAMINE","ANY"]}
Viewpoint { position 0 0 0 description "~~V0~~"}
DEF Proximity0 ProximitySensor{center 0 0 0 size 20 20 20}

DEF BG Background{
 skyColor[0 0 0]
 skyAngle[]
 groundColor[0 0 0, 0 0 0]
 groundAngle[1.57079]
}

DEF HUD Transform{
 children[
  Transform{
   translation  0 0 -10
   children[
Transform{
 translation -2.5 0 0
 children[
  DEF A PlaneSensor{minPosition 0 0 maxPosition 5 0}
  DEF B Transform{
   children[
    Shape{
     appearance Appearance{
      material Material{
       diffuseColor 1 0 0
       emissiveColor .1 0 0
      }
     }
     geometry Box{size .2 .2 .2}
    }
   ]
  }
 ]
}
Transform{
 translation -2.5 -.3 0
 children[
  DEF C PlaneSensor{minPosition 0 0 maxPosition 5 0}
  DEF D Transform{
   children[
    Shape{
     appearance Appearance{
      material Material{
       diffuseColor 0 1 0
       emissiveColor 0 .1 0
      }
     }
     geometry Box{size .2 .2 .2}
    }
   ]
  }
 ]
}
Transform{
 translation -2.5 -.6 0
 children[
  DEF E PlaneSensor{minPosition 0 0 maxPosition 5 0}
  DEF F Transform{
   children[
    Shape{
     appearance Appearance{
      material Material{
       diffuseColor 0 0 1
       emissiveColor 0 0 .1
      }
     }
     geometry Box{size .2 .2 .2}
    }
   ]
  }
 ]
}
#Transform{
# translation -2.5 0 0
# children[
#  DEF LLL Shape{
#   geometry IndexedLineSet{
#    coord Coordinate{
#     point[0 0 0, 5 0 0]
#    }
#    coordIndex[0, 1, -1]
#    color Color{
#     color [1 0 0, 1 0 0]
#    }
#   }
#  }
#  Transform{translation 0 -.3 0 children[USE LLL ]}
#  Transform{translation 0 -.6 0 children[USE LLL ]}
# ]
#}
Transform{
 translation -2.5 -1.2 0
 children[
  DEF G TouchSensor{}
  DEF H Transform{
   children[
    DEF XCS Shape{
     appearance Appearance{
      material Material{
       diffuseColor .8 .8 .8 
       emissiveColor .08 .08 .08
      }
     }
     geometry Cylinder{height .5 radius .125}
    }
    Transform{
     rotation 0 0 1 1.57079
     children[USE XCS ]
    }
   ]
  }
 ]
}
DEF Pointer Transform{
 translation -3.5 -.6 0
 children[
  DEF PointerB Transform{
   children[
  DEF I TouchSensor{}
  Shape{
   appearance Appearance{
    texture DEF Pix PixelTexture{
     image 1 2 3 0xcccccc 0x009900
    }
    #material Material{
    # diffuseColor .8 .8 .8
    # emissiveColor .08 .08 .08
    #}
   }
   geometry Sphere{radius .3} #Cone{height .4 bottomRadius .2}
  }]}
 ]
}
]}]}
DEF Script0 Script{
 eventIn  SFBool  newColor
 eventIn  SFBool  setEdit
 eventIn  SFVec3f slideRd 
 eventIn  SFVec3f slideGr
 eventIn  SFVec3f slideBl
 eventIn  SFRotation setPointerRotation
 field    SFNode  bg USE BG
 field    SFNode  pointer USE Pointer
 field    SFNode  pointerb USE PointerB
 field    SFNode  proximity USE Proximity0
 field    MFRotation pointerRotation [1 0 0 0, 1 0 0 3.14]
 field    SFRotation rotationBuf 0 0 1 0
 field    SFRotation rotationBufb 0 0 1 0
 field    SFInt32 editSky 1 
 field    MFFloat newSkyAngle []
 field    MFFloat newGroundAngle []
 field    SFInt32 skyCount 0
 field    SFInt32 groundCount 0
 field    SFColor currentColor 0 0 0
 field    MFColor skyColorBuf []
 field    MFColor groundColorBuf []
 directOutput TRUE
 url "vrmlscript:
  function routeColor(rgb,v){
   currentColor[rgb] = v/5;
   if(editSky==1){
    skyColorBuf[skyCount-1] = currentColor;
    bg.set_skyColor = skyColorBuf;
    bg.set_groundColor = groundColorBuf;
   }else{
    groundColorBuf[groundCount] = currentColor;
    bg.set_groundColor = groundColorBuf;
    bg.set_skyColor = skyColorBuf;
   }
  }
  function slideRd(v){routeColor(0,v[0]);}
  function slideGr(v){routeColor(1,v[0]);}
  function slideBl(v){routeColor(2,v[0]);}
  function newColor(v){
   if(v==TRUE){
    if(editSky==1){
     for(i=1;i<=skyCount;i++){
      newSkyAngle[i-1] = (.5*Math.PI)*(i/skyCount);
     }
     angles = newSkyAngle;
     bg.set_skyAngle = newSkyAngle;
     skyCount++;
     skyColorBuf[skyCount] = currentColor;
    }else{
    }
    /*for(i=0;i<skyCount;i++){
     newSkyAngle[i] = (Math.PI*.5)/(Math.pow(2,i+1));
    }
    bg.set_skyAngle = newSkyAngle;
    skyCount++;
    skyColorBuf[skyCount] = currentColor;
    bg.set_skyColor = skyColorBuf;*/
   }
  }
  function setEdit(v){
   if(v==TRUE){
    rotationBufb = pointerRotation[editSky];
    pointerb.set_rotation = rotationBufb; 
    skyColorBuf[skyCount-1] = currentColor;
    groundColorBuf[groundCount] = currentColor;
    bg.set_skyColor = skyColorBuf;
    bg.set_groundColor = groundColorBuf;
    editSky = (editSky+1)%2;
   }
  }
  function setPointerRotation(v){
   rotationBuf = v;
   rotationBuf [3] = -1*v[3];
   pointer.set_rotation = rotationBuf;
  }
  function initialize(){
   skyColorBuf = bg.skyColor;
   groundColorBuf = bg.groundColor;
   newColor(TRUE);
  }
 "
}

ROUTE A.translation_changed TO B.set_translation
ROUTE A.translation_changed TO Script0.slideRd
ROUTE C.translation_changed TO D.set_translation
ROUTE C.translation_changed TO Script0.slideGr
ROUTE E.translation_changed TO F.set_translation
ROUTE E.translation_changed TO Script0.slideBl
ROUTE G.isActive            TO Script0.newColor
ROUTE I.isActive            TO Script0.setEdit

ROUTE Proximity0.position_changed TO Proximity0.set_center
ROUTE Proximity0.position_changed TO HUD.set_translation
ROUTE Proximity0.orientation_changed TO HUD.set_rotation
ROUTE Proximity0.orientation_changed TO Script0.setPointerRotation
