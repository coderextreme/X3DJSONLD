#VRML V2.0 utf8

#pioneer@sgi.com

PROTO Y[
 exposedField SFVec3f T 0 0 0
 field SFVec3f S 1 1 1
 exposedField SFRotation R 0 0 1 0
 field MFNode Q [] 
]
{
 Transform{
  translation IS T
  rotation IS R
  scale IS S
  children IS Q
 }
}
PROTO X[
 field SFColor C .8 .8 .8
 field SFNode G NULL 
]
{
 Shape{
  appearance Appearance{
   material Material{
    diffuseColor IS C
   }
  }
  geometry IS G
 }
}
PROTO S[
 exposedField SFInt32 wc 0
 field MFNode A [] 
 field MFNode B []
]
{
 Switch{
  whichChoice IS wc
  choice[
   Group{
    children IS A
   }
   Group{
    children IS B
   }
  ]
 }
}

NavigationInfo{ type ["EXAMINE","ANY"] }
DEF V0 Viewpoint{position 0 0 0 description "~~V0~~"}
DEF Proximity0 ProximitySensor{center 0 0 0 size 20 20 20}
DEF HUD Transform{children[
DEF Switch0 S{
 wc 0
 A[
  Y{T -2 0 -8 S .5 .2 .2 Q[DEF Touch1 TouchSensor{} X{C .8 0 0 G Sphere{}}]}
  Y{T 2 0 -8 S .5 .2 .2 Q[DEF Touch2 TouchSensor{} X{C 0 .8 0 G Sphere{}}]}
  Y{T -2.5 2 -8 S .1 .1 .1 Q[DEF Touch8 TouchSensor{} X{C 1 .5 0 G Box{}}]}
  Y{T -2.5 1.6 -8 S .13 .13 .1 Q[DEF Touch9 TouchSensor{} X{C 1 .5 0 G Cone{}}]}
 ]
 B[
  Y{T -2 0 -8 S .5 .2 .2 Q[DEF Touch3 TouchSensor{} X{C .8 0 0 G Sphere{}}]}
  Y{T 2 0 -8 S .5 .2 .2 Q[DEF Touch4 TouchSensor{} X{C 0 .8 0 G Sphere{}}]}
  Y{T -2 -1 -8 Q[
   DEF Touch5 PlaneSensor{minPosition -2 0 maxPosition 5 0}
   DEF ScaleSlider Y{Q[X{G Box{size .2 .2 .2}}
  ]}]}
  Y{T -2 -1.5 -8 Q[
   DEF Touch6 PlaneSensor{minPosition -2 0 maxPosition 5 0}
   DEF MoveZslider Y{Q[X{G Box{size .2 .2 .2}}
  ]}]}
  Y{T -2 -2 -8 R 0 0 1 1.57 Q[
   DEF Touch7 CylinderSensor{minAngle -3.14 maxAngle 3.14}
   DEF RotationDial Y{S .1 .1 .1 Q[X{G Cylinder{}}
  ]}]}
 ]
}]}
Y{T 0 0 -10 Q[
DEF Switch1 S{
 wc 0
 A[
  Y{ Q[ DEF Touch0 TouchSensor{} X{C .4 .4 .4 G Box{size 5 5 .1}}]}
  Y{T 0 0 .1 Q[X{G DEF Line0 IndexedLineSet{
   coord DEF Coord0 Coordinate{
    point[0 0 0, 0 0 0]
   }
   coordIndex[0, 1, -1]
   color DEF Color0 Color{
    color[1 0 0, 1 0 0]
   }
  }}]}
  DEF Pointer Y{Q[X{G Sphere{radius .1}}]}
 ]
 B[
    Y{Q[X{C 0 0 1 G DEF Ex Extrusion{
     spine[0 0 0] solid FALSE creaseAngle 1 convex FALSE
    }}]}
    DEF Block Y{Q[
     DEF Wall Y{Q[
      Y{T 0 0 1 Q[X{C 1 .5 0 G Box{size 5 5 .1}}]}
     ]}
    ]}
 ]
}]}

DEF Script0 Script{
 eventIn SFVec3f draw
 eventIn SFBool  reject
 eventIn SFBool  accept
 eventIn SFBool  createSection
 eventIn SFBool  reStart
 eventIn SFBool  drawShape
 eventIn SFVec3f moveZ
 eventIn SFVec3f scaleXY
 eventIn SFRotation rotationZ
 field   SFNode  touch USE Touch0
 field   SFNode  touch8 USE Touch8
 field   SFNode  ex USE Ex
 field   SFNode  view0 USE V0
 field   SFNode  prox USE Proximity0
 field   SFNode  block USE Block
 field   SFNode  wall USE Wall
 field   SFNode  scaleslider USE ScaleSlider
 field   SFNode  movezslider USE MoveZslider
 field   SFNode  rotationdial USE RotationDial
 field   SFNode  Vswitch USE Switch0
 field   SFNode  Wswitch USE Switch1
 field   SFNode  rejTouch USE Touch1
 field   SFNode  accTouch USE Touch2
 field   SFNode  moveTouch USE Touch5
 field   SFNode  coord USE Coord0
 field   SFNode  color USE Color0
 field   SFNode  line  USE Line0
 field   SFNode  point USE Pointer
 field   SFInt32 count 0
 field   SFBool  allowDraw FALSE
 field   MFInt32 newIndex []
 field   MFInt32 clearIndex []
 field   MFVec3f clearVec3f []
 field   SFVec3f clearWall 0 0 0
 field   MFVec2f clearVec2f [0 0]
 field   MFVec3f newLine []
 field   MFVec2f newSection [0 0]
 field   SFVec2f sectionBuff 0 0
 field   MFColor newColor []
 field   SFColor colorVal 1 0 0
 field   MFVec2f newScale [1 1]
 field   SFVec2f scaleBuff 1 1
 field   MFRotation newRotation [0 0 1 0]
 field   SFRotation rotationBuff 0 1 0 0
 field   SFVec3f moveBlockBuff 0 0 0
 field   MFVec3f newSpine []
 field   SFVec3f spineBuff 0 0 0
 field   SFVec3f blockScaleBuff 1 1 1
 field   SFVec3f shapeBuff 0 0 .1
 field   SFFloat shapeCount 2
 field   SFFloat theta 0
 directOutput TRUE
 url "vrmlscript:
  function makeLine(v){
    newLine[count] = v;
    coord.set_point = newLine;
    sectionBuff[0] = v[0];
    sectionBuff[1] = v[1];
    newSection[count] = sectionBuff;
    newIndex[count] = count;
    newIndex[count+1] = -1;
    line.set_coordIndex = newIndex;
    newColor[count] = colorVal;
    color.set_color = newColor;
    count++;
  }
  function draw(v){
   if(touch.isActive==TRUE){
    makeLine(v);
    point.set_T = touch.hitPoint_changed;
   }
  }
  function reject(v){
   if(v==TRUE){
    line.set_coordIndex = newIndex = clearIndex;
    count = 0;
    shapeCount = 2;
   }
  }
  function drawShape(v){
   if(v==TRUE){
    //reject(TRUE);
    line.set_coordIndex = newIndex = clearIndex;
    count = 0;
    shapeCount++;
    for(i=0;i<shapeCount;i++){
     theta = i*((2*Math.PI)/(shapeCount));
     shapeBuff[0] = Math.cos(theta);
     shapeBuff[1] = Math.sin(theta);
     makeLine(shapeBuff);
    }
    point.set_T = shapeBuff;
   }
  }
  function createSection(v){
   if(v==TRUE){
    moveBlockBuff[2]-=1;
    block.set_T = moveBlockBuff;
    spineBuff[2] = -count;
    newSpine[count] = spineBuff;
    newScale[count] = scaleBuff;
    newRotation[count] = rotationBuff;
    ex.set_spine = newSpine;
    ex.set_scale = newScale;
    count++;
   }
  }
  function accept(v){
   if(v==TRUE){
    newSection[newSection.length] = newSection[0];
    ex.set_crossSection = newSection;
    Vswitch.wc = 1;
    Wswitch.wc = 1;
    count = 0;
    createSection(TRUE);
    createSection(TRUE);
   }
  }
  function moveZ(v){
   movezslider.set_T = v;
   spineBuff[2] = 10+((-30-10)*((v[0]+1)/6));
   newSpine[count-1] = spineBuff;
   wall.set_T = spineBuff;
   ex.set_spine = newSpine;
  }
  function scaleXY(v){
   scaleslider.set_T = v;
   scaleBuff[0] = scaleBuff[1] = 30*((v[0]+1)/6);
   newScale[count-1] = scaleBuff;
   ex.set_scale = newScale;
  }
  function rotationZ(v){
   rotationdial.set_R = v;
   rotationBuff[0] = 0;
   rotationBuff[1] = 1;
   rotationBuff[2] = 0;
   rotationBuff[3] = v[3];
   newRotation[count-1] = rotationBuff;
   ex.set_orientation = newRotation;
  }
  function reStart(v){
   if(v==TRUE){
    prox.set_center = clearWall;
    view0.set_bind = TRUE;
    reject(TRUE);
    Vswitch.wc = 0;
    Wswitch.wc = 0;
    newSpine = clearVec3f;
    newSection = clearVec2f;
    newScale = clearVec2f;
    scaleBuff[0] = 1;
    scaleBuff[1] = 1;
    moveBlockBuff[2]=0;
    wall.set_T = clearWall;
   }
  }
 "
}

ROUTE Touch0.hitPoint_changed TO Script0.draw
ROUTE Touch1.isActive TO Script0.reject
ROUTE Touch2.isActive TO Script0.accept
ROUTE Touch3.isActive TO Script0.reStart
ROUTE Touch4.isActive TO Script0.createSection
ROUTE Touch5.translation_changed TO Script0.scaleXY
ROUTE Touch6.translation_changed TO Script0.moveZ
ROUTE Touch7.rotation_changed TO Script0.rotationZ
ROUTE Touch8.isActive TO Script0.drawShape

ROUTE Proximity0.position_changed TO HUD.set_translation
ROUTE Proximity0.position_changed TO Proximity0.set_center
ROUTE Proximity0.orientation_changed TO HUD.set_rotation
