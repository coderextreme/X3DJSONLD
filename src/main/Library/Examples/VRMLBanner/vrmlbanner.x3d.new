<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "https://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Full" version="3.3" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.3.xsd" ><head><meta name="comment" content="World of Titania"></meta>
<meta name="created" content="Sun, 01 Nov 2015 04:01:17 GMT"></meta>
<meta name="creator" content="Holger Seelig"></meta>
<meta name="generator" content="Titania V1.2.0, http://titania.create3000.de"></meta>
<meta name="modified" content="Sun, 01 Nov 2015 04:01:17 GMT"></meta>
</head>
<Scene><ProtoDeclare name="f"><ProtoInterface><field name="h" accessType="inputOnly" type="SFTime"></field>
<field name="i" accessType="outputOnly" type="SFTime"></field>
<field name="j" accessType="outputOnly" type="SFTime"></field>
</ProtoInterface>
<ProtoBody><Script DEF="k_1" directOutput="true"><field name="l" accessType="inputOnly" type="SFTime"></field>
<field name="h" accessType="inputOnly" type="SFTime"></field>
<field name="i" accessType="outputOnly" type="SFTime"></field>
<field name="m" accessType="outputOnly" type="SFTime"></field>
<field name="j" accessType="outputOnly" type="SFTime"></field>
<IS><connect nodeField="h" protoField="h"></connect>
<connect nodeField="i" protoField="i"></connect>
<connect nodeField="j" protoField="j"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
m=0;
}
function l(n,time){
j=time;
}
function h(n,time){
i=time;
}]]></Script>
<ROUTE fromNode="k_1" fromField="m" toNode="k_1" toField="l"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="o"><ProtoInterface><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="set_transparency" accessType="inputOnly" type="SFFloat"></field>
<field name="set_diffuseColor" accessType="inputOnly" type="SFColor"></field>
<field name="set_emissiveColor" accessType="inputOnly" type="SFColor"></field>
<field name="set_specularColor" accessType="inputOnly" type="SFColor"></field>
<field name="set_shininess" accessType="inputOnly" type="SFFloat"></field>
<field name="set_q" accessType="inputOnly" type="SFVec2f"></field>
<field name="set_s" accessType="inputOnly" type="SFFloat"></field>
<field name="set_t" accessType="inputOnly" type="SFVec2f"></field>
<field name="set_u" accessType="inputOnly" type="SFVec2f"></field>
<field name="set_v" accessType="inputOnly" type="SFNode"></field>
<field name="set_url" accessType="inputOnly" type="MFString"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="transparency_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="diffuseColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="emissiveColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="specularColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="shininess_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="q_changed" accessType="outputOnly" type="SFVec2f"></field>
<field name="s_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="t_changed" accessType="outputOnly" type="SFVec2f"></field>
<field name="u_changed" accessType="outputOnly" type="SFVec2f"></field>
<field name="v_changed" accessType="outputOnly" type="SFNode"></field>
<field name="url_changed" accessType="outputOnly" type="MFString"></field>
<field name="A_changed" accessType="outputOnly" type="MFNode"></field>
<field name="B" accessType="inputOutput" type="SFNode"></field>
<field name="C" accessType="inputOutput" type="MFNode"></field>
<field name="D" accessType="inputOutput" type="SFNode"></field>
<field name="F" accessType="inputOutput" type="SFInt32" value="-1"></field>
<field name="G" accessType="inputOutput" type="SFBool"></field>
<field name="children" accessType="initializeOnly" type="MFNode"></field>
<field name="H" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="p" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="A" accessType="initializeOnly" type="MFNode"></field>
</ProtoInterface>
<ProtoBody><Group><IS><connect nodeField="children" protoField="children"></connect>
</IS>
</Group>
<Script DEF="I" directOutput="true"><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="set_transparency" accessType="inputOnly" type="SFFloat"></field>
<field name="set_diffuseColor" accessType="inputOnly" type="SFColor"></field>
<field name="set_emissiveColor" accessType="inputOnly" type="SFColor"></field>
<field name="set_specularColor" accessType="inputOnly" type="SFColor"></field>
<field name="set_shininess" accessType="inputOnly" type="SFFloat"></field>
<field name="set_q" accessType="inputOnly" type="SFVec2f"></field>
<field name="set_s" accessType="inputOnly" type="SFFloat"></field>
<field name="set_t" accessType="inputOnly" type="SFVec2f"></field>
<field name="set_u" accessType="inputOnly" type="SFVec2f"></field>
<field name="set_url" accessType="inputOnly" type="MFString"></field>
<field name="set_v" accessType="inputOnly" type="SFNode"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="transparency_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="diffuseColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="emissiveColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="specularColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="shininess_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="q_changed" accessType="outputOnly" type="SFVec2f"></field>
<field name="s_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="t_changed" accessType="outputOnly" type="SFVec2f"></field>
<field name="u_changed" accessType="outputOnly" type="SFVec2f"></field>
<field name="url_changed" accessType="outputOnly" type="MFString"></field>
<field name="v_changed" accessType="outputOnly" type="SFNode"></field>
<field name="A_changed" accessType="outputOnly" type="MFNode"></field>
<field name="p" accessType="initializeOnly" type="SFBool"></field>
<field name="A" accessType="initializeOnly" type="MFNode"></field>
<IS><connect nodeField="set_p" protoField="set_p"></connect>
<connect nodeField="set_transparency" protoField="set_transparency"></connect>
<connect nodeField="set_diffuseColor" protoField="set_diffuseColor"></connect>
<connect nodeField="set_emissiveColor" protoField="set_emissiveColor"></connect>
<connect nodeField="set_specularColor" protoField="set_specularColor"></connect>
<connect nodeField="set_shininess" protoField="set_shininess"></connect>
<connect nodeField="set_q" protoField="set_q"></connect>
<connect nodeField="set_s" protoField="set_s"></connect>
<connect nodeField="set_t" protoField="set_t"></connect>
<connect nodeField="set_u" protoField="set_u"></connect>
<connect nodeField="set_url" protoField="set_url"></connect>
<connect nodeField="set_v" protoField="set_v"></connect>
<connect nodeField="w" protoField="w"></connect>
<connect nodeField="p_changed" protoField="p_changed"></connect>
<connect nodeField="transparency_changed" protoField="transparency_changed"></connect>
<connect nodeField="diffuseColor_changed" protoField="diffuseColor_changed"></connect>
<connect nodeField="emissiveColor_changed" protoField="emissiveColor_changed"></connect>
<connect nodeField="specularColor_changed" protoField="specularColor_changed"></connect>
<connect nodeField="shininess_changed" protoField="shininess_changed"></connect>
<connect nodeField="q_changed" protoField="q_changed"></connect>
<connect nodeField="s_changed" protoField="s_changed"></connect>
<connect nodeField="t_changed" protoField="t_changed"></connect>
<connect nodeField="u_changed" protoField="u_changed"></connect>
<connect nodeField="url_changed" protoField="url_changed"></connect>
<connect nodeField="v_changed" protoField="v_changed"></connect>
<connect nodeField="A_changed" protoField="A_changed"></connect>
<connect nodeField="p" protoField="p"></connect>
<connect nodeField="A" protoField="A"></connect>
</IS>
<![CDATA[javascript:
function set_p(n){
for(J=0;J<A.length;J++){
A[J].set_p=n;
}
p=n;
p_changed=n;
}
function initialize(){
p_changed=p;
A_changed=A;
}
function set_diffuseColor(n){
for(J=0;J<A.length;J++){
A[J].set_diffuseColor=n;
}
diffuseColor_changed=n;
}
function set_specularColor(n){
for(J=0;J<A.length;J++){
A[J].set_specularColor=n;
}
specularColor_changed=n;
}
function set_emissiveColor(n){
for(J=0;J<A.length;J++){
A[J].set_emissiveColor=n;
}
emissiveColor_changed=n;
}
function set_transparency(n){
for(J=0;J<A.length;J++){
A[J].set_transparency=n;
}
transparency_changed=n;
}
function set_shininess(n){
for(J=0;J<A.length;J++){
A[J].set_shininess=n;
}
shininess_changed=n;
}
function set_q(n){
for(J=0;J<A.length;J++){
A[J].set_q=n;
}
q_changed=n;
}
function set_u(n){
for(J=0;J<A.length;J++){
A[J].set_u=n;
}
u_changed=n;
}
function set_t(n){
for(J=0;J<A.length;J++){
A[J].set_t=n;
}
t_changed=n;
}
function set_s(n){
for(J=0;J<A.length;J++){
A[J].set_s=n;
}
s_changed=n;
}
function set_url(n){
for(J=0;J<A.length;J++){
A[J].set_url=n;
}
url_changed=n;
}
function set_v(n){
for(J=0;J<A.length;J++){
A[J].set_v=n;
}
v_changed=n;
}
function w(){
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="K"><ProtoInterface><field name="set_transparency" accessType="inputOnly" type="SFFloat"></field>
<field name="set_intensity" accessType="inputOnly" type="SFFloat"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="transparency_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="intensity_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="p" accessType="inputOutput" type="SFBool" value="true"></field>
<field name="diffuseColor" accessType="inputOutput" type="SFColor" value="1 1 1"></field>
<field name="B" accessType="inputOutput" type="SFNode"></field>
<field name="C" accessType="inputOutput" type="MFNode"></field>
<field name="D" accessType="inputOutput" type="SFNode"></field>
<field name="F" accessType="inputOutput" type="SFInt32" value="-1"></field>
<field name="type" accessType="initializeOnly" type="SFInt32"></field>
<field name="radius" accessType="initializeOnly" type="SFFloat" value="1000"></field>
<field name="L" accessType="initializeOnly" type="SFFloat"></field>
<field name="attenuation" accessType="initializeOnly" type="SFVec3f" value="1 0 0"></field>
<field name="direction" accessType="initializeOnly" type="SFVec3f" value="0 0 -1"></field>
<field name="beamWidth" accessType="initializeOnly" type="SFFloat" value="0.131"></field>
<field name="cutOffAngle" accessType="initializeOnly" type="SFFloat" value="1.57"></field>
<field name="intensity" accessType="initializeOnly" type="SFFloat" value="1"></field>
<field name="M" accessType="initializeOnly" type="MFNode"></field>
</ProtoInterface>
<ProtoBody><Group><Switch whichChoice="-1"><IS><connect nodeField="whichChoice" protoField="type"></connect>
</IS>
<PointLight DEF="N_1"><IS><connect nodeField="on" protoField="p"></connect>
<connect nodeField="color" protoField="diffuseColor"></connect>
<connect nodeField="intensity" protoField="intensity"></connect>
<connect nodeField="attenuation" protoField="attenuation"></connect>
<connect nodeField="radius" protoField="radius"></connect>
</IS>
</PointLight>
<SpotLight DEF="O_1"><IS><connect nodeField="on" protoField="p"></connect>
<connect nodeField="color" protoField="diffuseColor"></connect>
<connect nodeField="intensity" protoField="intensity"></connect>
<connect nodeField="attenuation" protoField="attenuation"></connect>
<connect nodeField="direction" protoField="direction"></connect>
<connect nodeField="beamWidth" protoField="beamWidth"></connect>
<connect nodeField="cutOffAngle" protoField="cutOffAngle"></connect>
</IS>
</SpotLight>
</Switch>
<Group><IS><connect nodeField="children" protoField="M"></connect>
</IS>
</Group>
</Group>
<Script DEF="P_1" directOutput="true"><field name="set_transparency" accessType="inputOnly" type="SFFloat"></field>
<field name="set_intensity" accessType="inputOnly" type="SFFloat"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="intensity_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="transparency_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="intensity" accessType="initializeOnly" type="SFFloat"></field>
<IS><connect nodeField="set_transparency" protoField="set_transparency"></connect>
<connect nodeField="set_intensity" protoField="set_intensity"></connect>
<connect nodeField="w" protoField="w"></connect>
<connect nodeField="intensity_changed" protoField="intensity_changed"></connect>
<connect nodeField="transparency_changed" protoField="transparency_changed"></connect>
<connect nodeField="intensity" protoField="intensity"></connect>
</IS>
<![CDATA[javascript:
function set_transparency(n){
intensity=1-n;
intensity_changed=intensity;
transparency_changed=n;
}
function set_intensity(n){
intensity=n;
intensity_changed=n;
transparency_changed=1-n;
}
function w(){
}]]></Script>
<ROUTE fromNode="P_1" fromField="intensity_changed" toNode="N_1" toField="set_intensity"></ROUTE>
<ROUTE fromNode="P_1" fromField="intensity_changed" toNode="O_1" toField="set_intensity"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="Q"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="translation" accessType="inputOutput" type="SFVec3f"></field>
<field name="scale" accessType="inputOutput" type="SFVec3f" value="1 1 1"></field>
<field name="center" accessType="inputOutput" type="SFVec3f"></field>
<field name="T" accessType="inputOutput" type="SFBool" value="true"></field>
<field name="rotation" accessType="inputOutput" type="SFRotation"></field>
<field name="scaleOrientation" accessType="inputOutput" type="SFRotation"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="children" accessType="initializeOnly" type="MFNode"></field>
<field name="V" accessType="initializeOnly" type="SFBool"></field>
<field name="W" accessType="initializeOnly" type="SFInt32"></field>
</ProtoInterface>
<ProtoBody><Transform DEF="X_1"><IS><connect nodeField="translation" protoField="translation"></connect>
<connect nodeField="rotation" protoField="rotation"></connect>
<connect nodeField="scale" protoField="scale"></connect>
<connect nodeField="scaleOrientation" protoField="scaleOrientation"></connect>
<connect nodeField="center" protoField="center"></connect>
<connect nodeField="children" protoField="children"></connect>
</IS>
</Transform>
<Script DEF="Y_1" directOutput="true"><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="Z_changed" accessType="outputOnly" type="SFRotation"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="V" accessType="initializeOnly" type="SFBool"></field>
<field name="W" accessType="initializeOnly" type="SFInt32"></field>
<field name="aa" accessType="initializeOnly" type="SFBool"></field>
<field name="Z" accessType="initializeOnly" type="SFRotation"></field>
<field name="ba" accessType="initializeOnly" type="SFFloat"></field>
<field name="ca" accessType="initializeOnly" type="SFFloat"></field>
<field name="da" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="ea" accessType="initializeOnly" type="SFTime"></field>
<field name="fa" accessType="initializeOnly" type="SFTime"></field>
<IS><connect nodeField="R" protoField="R"></connect>
<connect nodeField="S" protoField="S"></connect>
<connect nodeField="set_fraction" protoField="set_fraction"></connect>
<connect nodeField="R_changed" protoField="R_changed"></connect>
<connect nodeField="U" protoField="U"></connect>
<connect nodeField="V" protoField="V"></connect>
<connect nodeField="W" protoField="W"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
aa=FALSE;
if(W==0){
Z[0]=1.;
Z[1]=0.;
Z[2]=0.;
return;
}
if(W==1){
Z[0]=0.;
Z[1]=1.;
Z[2]=0.;
return;
}
if(W==2){
Z[0]=0.;
Z[1]=0.;
Z[2]=1.;
return;
}
}
function R(n){
if(fa==n){
return;
}
if(aa==TRUE){
ea=n;
return;
}
aa=TRUE;
da=TRUE;
R_changed=n;
fa=n;
}
function S(n){
aa=FALSE;
if(ea==n){
R(n);
}
}
function set_fraction(n){
if(da){
ba=n;
da=FALSE;
}else if(n<ca){
ba=(1.0-ca)+n;
}else{
ba=n-ca;
}
ca=n;
if(V==TRUE)Z[3]-=2.*Math.PI*ba;
else Z[3]+=2.*Math.PI*ba;
Z_changed=Z;
}]]></Script>
<ROUTE fromNode="Y_1" fromField="Z_changed" toNode="X_1" toField="set_rotation"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="ga"><ProtoInterface><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="set_v" accessType="inputOnly" type="SFNode"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="v_changed" accessType="outputOnly" type="SFNode"></field>
<field name="url" accessType="inputOutput" type="MFString"></field>
<field name="transparency" accessType="inputOutput" type="SFFloat"></field>
<field name="diffuseColor" accessType="inputOutput" type="SFColor" value="0 0.48 0.8"></field>
<field name="emissiveColor" accessType="inputOutput" type="SFColor" value="0 0.09 0.15"></field>
<field name="specularColor" accessType="inputOutput" type="SFColor" value="0.5 0.5 0.5"></field>
<field name="shininess" accessType="inputOutput" type="SFFloat" value="0.2"></field>
<field name="q" accessType="inputOutput" type="SFVec2f" value="-0.5 -0.5"></field>
<field name="s" accessType="inputOutput" type="SFFloat"></field>
<field name="t" accessType="inputOutput" type="SFVec2f" value="1 1"></field>
<field name="u" accessType="inputOutput" type="SFVec2f"></field>
<field name="B" accessType="inputOutput" type="SFNode"></field>
<field name="C" accessType="inputOutput" type="MFNode"></field>
<field name="D" accessType="inputOutput" type="SFNode"></field>
<field name="F" accessType="inputOutput" type="SFInt32" value="-1"></field>
<field name="p" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="geometry" accessType="initializeOnly" type="SFNode"></field>
<field name="choice" accessType="initializeOnly" type="SFInt32"></field>
<field name="ha" accessType="initializeOnly" type="SFVec3f" value="0 0 0.5"></field>
</ProtoInterface>
<ProtoBody><Switch DEF="ia_1" whichChoice="-1"><IS><connect nodeField="whichChoice" protoField="choice"></connect>
</IS>
<Shape><IS><connect nodeField="geometry" protoField="geometry"></connect>
</IS>
<Appearance DEF="ja_1"><Material><IS><connect nodeField="diffuseColor" protoField="diffuseColor"></connect>
<connect nodeField="specularColor" protoField="specularColor"></connect>
<connect nodeField="emissiveColor" protoField="emissiveColor"></connect>
<connect nodeField="shininess" protoField="shininess"></connect>
<connect nodeField="transparency" protoField="transparency"></connect>
</IS>
</Material>
<ImageTexture containerField="texture"><IS><connect nodeField="url" protoField="url"></connect>
</IS>
</ImageTexture>
<TextureTransform><IS><connect nodeField="translation" protoField="u"></connect>
<connect nodeField="rotation" protoField="s"></connect>
<connect nodeField="scale" protoField="t"></connect>
<connect nodeField="center" protoField="q"></connect>
</IS>
</TextureTransform>
</Appearance>
</Shape>
</Switch>
<Script DEF="ka" directOutput="true"><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="set_v" accessType="inputOnly" type="SFNode"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="v_changed" accessType="outputOnly" type="SFNode"></field>
<field name="p" accessType="initializeOnly" type="SFBool"></field>
<field name="la" accessType="initializeOnly" type="SFNode"><Appearance USE="ja_1"></Appearance>
</field>
<field name="ma" accessType="initializeOnly" type="SFNode"><Switch USE="ia_1"></Switch>
</field>
<IS><connect nodeField="set_p" protoField="set_p"></connect>
<connect nodeField="w" protoField="w"></connect>
<connect nodeField="set_v" protoField="set_v"></connect>
<connect nodeField="p_changed" protoField="p_changed"></connect>
<connect nodeField="v_changed" protoField="v_changed"></connect>
<connect nodeField="p" protoField="p"></connect>
</IS>
<![CDATA[javascript:
function set_p(n){
if(n==TRUE){
ma.whichChoice=0;
}else{
ma.whichChoice=-1;
}
p=n;
p_changed=n;
}
function initialize(){
v_changed=la.texture_changed;
set_p(p);
}
function set_v(n){
la.set_texture=n;
v_changed=n;
}
function w(){
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="na"><ProtoInterface><field name="set_enabled" accessType="inputOnly" type="SFBool"></field>
<field name="isOver" accessType="outputOnly" type="SFBool"></field>
<field name="isActive" accessType="outputOnly" type="SFBool"></field>
<field name="hitPoint_changed" accessType="outputOnly" type="SFVec3f"></field>
<field name="hitTexCoord_changed" accessType="outputOnly" type="SFVec2f"></field>
<field name="oa" accessType="initializeOnly" type="SFInt32"></field>
</ProtoInterface>
<ProtoBody><TouchSensor DEF="pa_1" enabled="false"><IS><connect nodeField="hitTexCoord_changed" protoField="hitTexCoord_changed"></connect>
<connect nodeField="hitPoint_changed" protoField="hitPoint_changed"></connect>
<connect nodeField="isOver" protoField="isOver"></connect>
<connect nodeField="isActive" protoField="isActive"></connect>
</IS>
</TouchSensor>
<Script DEF="qa_1" directOutput="true"><field name="set_enabled" accessType="inputOnly" type="SFBool"></field>
<field name="enabled_changed" accessType="outputOnly" type="SFBool"></field>
<field name="oa" accessType="initializeOnly" type="SFInt32"></field>
<IS><connect nodeField="set_enabled" protoField="set_enabled"></connect>
<connect nodeField="oa" protoField="oa"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
if(oa>0){
enabled_changed=TRUE;
}
}
function set_enabled(n){
if(n==TRUE){
if(oa==0){
enabled_changed=TRUE;
}
oa++;
}else{
if(oa==1){
enabled_changed=FALSE;
}
if(oa>0){
oa--;
}
}
}]]></Script>
<ROUTE fromNode="qa_1" fromField="enabled_changed" toNode="pa_1" toField="set_enabled"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="ra"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="sa" accessType="inputOnly" type="SFTime"></field>
<field name="ta" accessType="inputOnly" type="SFTime"></field>
<field name="fraction" accessType="outputOnly" type="SFFloat"></field>
<field name="ua" accessType="outputOnly" type="SFFloat"></field>
<field name="va" accessType="outputOnly" type="SFFloat"></field>
<field name="wa_changed" accessType="outputOnly" type="SFTime"></field>
<field name="xa_changed" accessType="outputOnly" type="SFTime"></field>
<field name="ya_changed" accessType="outputOnly" type="SFVec2f"></field>
<field name="startTime" accessType="outputOnly" type="SFTime"></field>
<field name="stopTime" accessType="outputOnly" type="SFTime"></field>
<field name="za" accessType="outputOnly" type="SFTime"></field>
<field name="Aa" accessType="outputOnly" type="SFTime"></field>
<field name="Ba" accessType="outputOnly" type="SFTime"></field>
<field name="cycleInterval" accessType="initializeOnly" type="SFTime" value="2"></field>
<field name="Ca" accessType="initializeOnly" type="SFTime"></field>
<field name="Da" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="xa" accessType="initializeOnly" type="SFTime" value="5"></field>
<field name="Ea" accessType="initializeOnly" type="SFTime"></field>
<field name="Fa" accessType="initializeOnly" type="SFTime"></field>
<field name="Ga" accessType="initializeOnly" type="SFTime"></field>
<field name="Ha" accessType="initializeOnly" type="SFBool"></field>
<field name="direction" accessType="initializeOnly" type="SFInt32"></field>
<field name="loop" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="Ia" accessType="initializeOnly" type="SFBool"></field>
<field name="Ja" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="Ka" accessType="initializeOnly" type="SFBool"></field>
</ProtoInterface>
<ProtoBody><TimeSensor DEF="La_1" enabled="false" loop="true" startTime="1"><IS><connect nodeField="cycleInterval" protoField="cycleInterval"></connect>
</IS>
</TimeSensor>
<Script DEF="Ma_1" directOutput="true"><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="sa" accessType="inputOnly" type="SFTime"></field>
<field name="ta" accessType="inputOnly" type="SFTime"></field>
<field name="fraction" accessType="outputOnly" type="SFFloat"></field>
<field name="ua" accessType="outputOnly" type="SFFloat"></field>
<field name="va" accessType="outputOnly" type="SFFloat"></field>
<field name="wa_changed" accessType="outputOnly" type="SFTime"></field>
<field name="xa_changed" accessType="outputOnly" type="SFTime"></field>
<field name="ya_changed" accessType="outputOnly" type="SFVec2f"></field>
<field name="startTime" accessType="outputOnly" type="SFTime"></field>
<field name="stopTime" accessType="outputOnly" type="SFTime"></field>
<field name="za" accessType="outputOnly" type="SFTime"></field>
<field name="Aa" accessType="outputOnly" type="SFTime"></field>
<field name="cycleInterval_changed" accessType="outputOnly" type="SFTime"></field>
<field name="Na" accessType="outputOnly" type="SFBool"></field>
<field name="Oa" accessType="outputOnly" type="SFTime"></field>
<field name="Pa" accessType="outputOnly" type="SFTime"></field>
<field name="Ba" accessType="outputOnly" type="SFTime"></field>
<field name="da" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="Qa" accessType="initializeOnly" type="SFFloat"></field>
<field name="Ra" accessType="initializeOnly" type="SFTime"></field>
<field name="direction" accessType="initializeOnly" type="SFInt32"></field>
<field name="Sa" accessType="initializeOnly" type="SFFloat"></field>
<field name="Ja" accessType="initializeOnly" type="SFBool"></field>
<field name="loop" accessType="initializeOnly" type="SFBool"></field>
<field name="Ia" accessType="initializeOnly" type="SFBool"></field>
<field name="cycleInterval" accessType="initializeOnly" type="SFTime"></field>
<field name="Ca" accessType="initializeOnly" type="SFTime"></field>
<field name="Da" accessType="initializeOnly" type="SFBool"></field>
<field name="xa" accessType="initializeOnly" type="SFTime"></field>
<field name="Ea" accessType="initializeOnly" type="SFTime"></field>
<field name="Fa" accessType="initializeOnly" type="SFTime"></field>
<field name="Ga" accessType="initializeOnly" type="SFTime"></field>
<field name="Ta" accessType="initializeOnly" type="SFTime"></field>
<field name="Ha" accessType="initializeOnly" type="SFBool"></field>
<field name="Ua" accessType="initializeOnly" type="SFTime"></field>
<field name="Va" accessType="initializeOnly" type="SFTime"></field>
<field name="ya" accessType="initializeOnly" type="SFVec2f"></field>
<field name="Ka" accessType="initializeOnly" type="SFBool"></field>
<IS><connect nodeField="R" protoField="R"></connect>
<connect nodeField="S" protoField="S"></connect>
<connect nodeField="sa" protoField="sa"></connect>
<connect nodeField="ta" protoField="ta"></connect>
<connect nodeField="fraction" protoField="fraction"></connect>
<connect nodeField="ua" protoField="ua"></connect>
<connect nodeField="va" protoField="va"></connect>
<connect nodeField="wa_changed" protoField="wa_changed"></connect>
<connect nodeField="xa_changed" protoField="xa_changed"></connect>
<connect nodeField="ya_changed" protoField="ya_changed"></connect>
<connect nodeField="startTime" protoField="startTime"></connect>
<connect nodeField="stopTime" protoField="stopTime"></connect>
<connect nodeField="za" protoField="za"></connect>
<connect nodeField="Aa" protoField="Aa"></connect>
<connect nodeField="Ba" protoField="Ba"></connect>
<connect nodeField="direction" protoField="direction"></connect>
<connect nodeField="Ja" protoField="Ja"></connect>
<connect nodeField="loop" protoField="loop"></connect>
<connect nodeField="Ia" protoField="Ia"></connect>
<connect nodeField="cycleInterval" protoField="cycleInterval"></connect>
<connect nodeField="Ca" protoField="Ca"></connect>
<connect nodeField="Da" protoField="Da"></connect>
<connect nodeField="xa" protoField="xa"></connect>
<connect nodeField="Ea" protoField="Ea"></connect>
<connect nodeField="Fa" protoField="Fa"></connect>
<connect nodeField="Ga" protoField="Ga"></connect>
<connect nodeField="Ha" protoField="Ha"></connect>
<connect nodeField="Ka" protoField="Ka"></connect>
</IS>
<![CDATA[javascript:
function Wa(){
var Xa=Math.random();
Va=
(cycleInterval-Ca)*(1-Xa)+
(cycleInterval+Ca)*Xa;
cycleInterval_changed=Va;
}
function Ya(){
var Xa=Math.random();
Ua=(xa-Ea)*(1-Xa)+
(xa+Ea)*Xa;
}
function initialize(){
if(direction==2){
cycleInterval*=2;
Ca*=2;
cycleInterval_changed=cycleInterval;
}
Wa();
if(Da==TRUE){
Ya();
}else{
Ua=-1;
}
if(Ka==FALSE){
Na=FALSE;
}else{
R(1,1);
}
}
function R(n,Za){
da=TRUE;
if((Ja==TRUE)||
((Ua>0)&&(ua==1))){
Sa=0;
if(Ca>0){
Wa();
}else{
Va=cycleInterval;
}
if(Da==TRUE){
if(Ea>0){
Ya();
}else{
Ua=xa;
}
}
}
ya[0]=Ua;
ya[1]=Va;
xa_changed=ya[0];
wa_changed=ya[1];
ya_changed=ya;
Na=TRUE;
startTime=Za;
Oa=Za;
}
function S(n,Za){
if((Ha==TRUE)||(Ga==0)){
Na=FALSE;
stopTime=Za;
}else{
Ta=Za;
}
}
function sa(n,Za){
if(Na==TRUE){
Na=FALSE;
stopTime=Za;
}
Ba=Za;
}
function ta(n,Za){
xa=n;
if(xa<(Fa+Ga)){
xa=Fa+Ga;
}
xa_changed=xa;
Ua=xa;
}
function ab(n,Za){
Na=FALSE;
stopTime=Za;
Ta=0;
va=0;
}
function bb(n,Za){
Na=FALSE;
stopTime=Za;
Ta=0;
va=0;
}
function cb(n,Za){
Na=FALSE;
stopTime=Ra+Ua;
if((Ca==0)&&
(Ea==0)){
var db=Ua;
while(db>cycleInterval){
db-=cycleInterval;
}
var eb=db/cycleInterval;
if(db>cycleInterval){
eb=1;
}
if((Ia==FALSE)||
((Fa==0)&&
(Ga==0))){
if(direction==0){
fraction=eb;
}else if(direction==1){
fraction=1-eb;
}else{
if(eb>.5){
fraction=2*(1-eb);
}else{
fraction=2*eb;
}
}
}
}
if(Ua>0){
ua=1;
if(direction==1){
ua=1-ua;
}
}
Ta=0;
va=0;
}
function set_fraction(n,Za){
if(Na==FALSE){
return;
}
if(da==FALSE){
if((Fa>0)&&
((Za-Ra)<=Fa)){
if(Ta>0){
if(Za-Ta>=Ga){
ab(n,Za);
}else{
fb=1-((Za-Ta)/Ga);
if(fb>va){
va=va;
}else{
va=fb;
}
}
}else{
va=(Za-Ra)/Fa;
}
}else if((Ga>0)&&
(Ua>0)&&
((Za-Ra)>=(Ua-Ga))){
fb=((Ua-(Za-Ra))/Ga);
if(fb>va){
va=va;
}else{
va=fb;
}
}else if((Ga>0)&&
(loop==FALSE)&&
((Za-Ra)>=(cycleInterval_changed-Ga))){
if(Sa>0){
fb=((cycleInterval_changed-(Za-Ra))/Ga);
if(fb>va){
va=va;
}else{
va=fb;
}
}
}else if(Ta>0){
if(Za-Ta>=Ga){
ab(n,Za);
}else{
fb=1-((Za-Ta)/Ga);
if(fb>va){
va=va;
}else{
va=fb;
}
}
}else{
va=1;
}
}else{
va=0;
}
if(da==TRUE){
da=FALSE;
if(!Ja&&(Ua>0)&&
(ua>0)&&(ua<1)){
Ra=Ra+(Za-stopTime);
}else{
Ra=Za;
if((loop==TRUE)&&(Ja)){
za=Za;
}
}
}else{
if(n>Qa){
if(Ia==FALSE){
Sa=Sa+(n-Qa);
}else{
Sa=Sa+(n-Qa)*va;
}
}else{
if(Ia==FALSE){
Sa=Sa+(1-Qa)+n;
}else{
Sa=Sa+((1-Qa)+n)*va;
}
}
if(direction==0){
fraction=Sa;
if(fraction>=1){
if(loop==TRUE){
fraction=fraction-1;
}else{
fraction=1;
}
}
}else if(direction==1){
fraction=1-Sa;
if(fraction<=0){
if(loop==TRUE){
fraction=fraction+1;
}else{
fraction=0;
}
}
}else if(direction==2){
fraction=Sa;
if(fraction>=1){
if(loop==TRUE){
fraction=fraction-1;
}else{
fraction=1;
}
}
if(fraction>.5){
fraction=2*(1-fraction);
}else{
fraction=2*fraction;
}
}
if(Sa>=1){
if(loop==TRUE){
Sa-=1;
Aa=Za;
za=Aa;
}else{
Sa=0;
bb(n,Za);
}
}
}
if(Ua>0){
if((Za-Ra)>Ua){
cb(n,Za);
}else{
ua=(Za-Ra)/Ua;
if(direction==1){
ua=1-ua;
}
}
}
Qa=n;
}]]></Script>
<ROUTE fromNode="Ma_1" fromField="Na" toNode="La_1" toField="set_enabled"></ROUTE>
<ROUTE fromNode="Ma_1" fromField="Oa" toNode="La_1" toField="set_startTime"></ROUTE>
<ROUTE fromNode="Ma_1" fromField="Pa" toNode="La_1" toField="set_stopTime"></ROUTE>
<ROUTE fromNode="Ma_1" fromField="cycleInterval_changed" toNode="La_1" toField="set_cycleInterval"></ROUTE>
<ROUTE fromNode="La_1" fromField="fraction_changed" toNode="Ma_1" toField="set_fraction"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="gb"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="direction" accessType="initializeOnly" type="SFInt32"></field>
<field name="hb" accessType="initializeOnly" type="SFBool"></field>
<field name="ib" accessType="initializeOnly" type="SFBool"></field>
</ProtoInterface>
<ProtoBody><Script DEF="jb" directOutput="true"><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="direction" accessType="initializeOnly" type="SFInt32"></field>
<field name="aa" accessType="initializeOnly" type="SFBool"></field>
<field name="kb" accessType="initializeOnly" type="MFVec2f"></field>
<field name="ba" accessType="initializeOnly" type="SFFloat"></field>
<field name="ca" accessType="initializeOnly" type="SFFloat"></field>
<field name="da" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="ea" accessType="initializeOnly" type="SFTime"></field>
<field name="fa" accessType="initializeOnly" type="SFTime"></field>
<field name="hb" accessType="initializeOnly" type="SFBool"></field>
<field name="ib" accessType="initializeOnly" type="SFBool"></field>
<field name="lb" accessType="initializeOnly" type="SFInt32"></field>
<field name="mb" accessType="initializeOnly" type="MFNode"></field>
<IS><connect nodeField="R" protoField="R"></connect>
<connect nodeField="S" protoField="S"></connect>
<connect nodeField="set_fraction" protoField="set_fraction"></connect>
<connect nodeField="R_changed" protoField="R_changed"></connect>
<connect nodeField="U" protoField="U"></connect>
<connect nodeField="direction" protoField="direction"></connect>
<connect nodeField="hb" protoField="hb"></connect>
<connect nodeField="ib" protoField="ib"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
U.w=TRUE;
aa=FALSE;
}
function R(n){
if(ib&&!hb){
return;
}
if(fa==n){
return;
}
if(aa==TRUE){
ea=n;
return;
}
aa=TRUE;
da=TRUE;
if(hb==FALSE){
mb.length=1;
mb[0]=U;
}else{
mb=U.A_changed;
}
kb.length=mb.length;
for(lb=0;lb<mb.length;lb++){
kb[lb].x=mb[lb].u_changed.x;
kb[lb].y=mb[lb].u_changed.y;
}
R_changed=n;
fa=n;
}
function S(n){
aa=FALSE;
if(ea==n){
R(n);
}
}
function set_fraction(n){
if(ib&&!hb){
return;
}
if(da){
ba=n;
da=FALSE;
}else if(n<ca){
ba=(1.0-ca)+n;
}else{
ba=n-ca;
}
ca=n;
for(lb=0;lb<mb.length;lb++){
if(direction==0)kb[lb].y+=-ba;
if(direction==1)kb[lb].y+=ba;
if(direction==2)kb[lb].x+=ba;
if(direction==3)kb[lb].x+=-ba;
mb[lb].set_u=kb[lb];
}
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="nb"><ProtoInterface><field name="ob" accessType="inputOnly" type="SFTime"></field>
<field name="pb" accessType="inputOnly" type="SFTime"></field>
<field name="qb" accessType="inputOnly" type="SFBool"></field>
<field name="rb" accessType="inputOnly" type="SFBool"></field>
<field name="sb" accessType="inputOnly" type="SFVec3f"></field>
<field name="tb" accessType="inputOnly" type="SFVec2f"></field>
<field name="ub" accessType="outputOnly" type="SFTime"></field>
<field name="vb" accessType="outputOnly" type="SFTime"></field>
<field name="enterTime" accessType="outputOnly" type="SFTime"></field>
<field name="exitTime" accessType="outputOnly" type="SFTime"></field>
<field name="wb" accessType="outputOnly" type="SFTime"></field>
<field name="xb" accessType="outputOnly" type="SFTime"></field>
<field name="coord" accessType="outputOnly" type="SFVec3f"></field>
<field name="texCoord" accessType="outputOnly" type="SFVec2f"></field>
<field name="yb_changed" accessType="outputOnly" type="SFBool"></field>
<field name="enabled" accessType="initializeOnly" type="SFBool" value="true"></field>
</ProtoInterface>
<ProtoBody><Script DEF="I_1" directOutput="true"><field name="ob" accessType="inputOnly" type="SFTime"></field>
<field name="pb" accessType="inputOnly" type="SFTime"></field>
<field name="qb" accessType="inputOnly" type="SFBool"></field>
<field name="rb" accessType="inputOnly" type="SFBool"></field>
<field name="sb" accessType="inputOnly" type="SFVec3f"></field>
<field name="tb" accessType="inputOnly" type="SFVec2f"></field>
<field name="ub" accessType="outputOnly" type="SFTime"></field>
<field name="vb" accessType="outputOnly" type="SFTime"></field>
<field name="wb" accessType="outputOnly" type="SFTime"></field>
<field name="xb" accessType="outputOnly" type="SFTime"></field>
<field name="enterTime" accessType="outputOnly" type="SFTime"></field>
<field name="exitTime" accessType="outputOnly" type="SFTime"></field>
<field name="coord" accessType="outputOnly" type="SFVec3f"></field>
<field name="texCoord" accessType="outputOnly" type="SFVec2f"></field>
<field name="yb_changed" accessType="outputOnly" type="SFBool"></field>
<field name="enabled" accessType="initializeOnly" type="SFBool"></field>
<IS><connect nodeField="ob" protoField="ob"></connect>
<connect nodeField="pb" protoField="pb"></connect>
<connect nodeField="qb" protoField="qb"></connect>
<connect nodeField="rb" protoField="rb"></connect>
<connect nodeField="sb" protoField="sb"></connect>
<connect nodeField="tb" protoField="tb"></connect>
<connect nodeField="ub" protoField="ub"></connect>
<connect nodeField="vb" protoField="vb"></connect>
<connect nodeField="wb" protoField="wb"></connect>
<connect nodeField="xb" protoField="xb"></connect>
<connect nodeField="enterTime" protoField="enterTime"></connect>
<connect nodeField="exitTime" protoField="exitTime"></connect>
<connect nodeField="coord" protoField="coord"></connect>
<connect nodeField="texCoord" protoField="texCoord"></connect>
<connect nodeField="yb_changed" protoField="yb_changed"></connect>
<connect nodeField="enabled" protoField="enabled"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
yb_changed=enabled;
}
function ob(n,time){
if(!enabled){
enabled=TRUE;
yb_changed=TRUE;
wb=time;
}
}
function pb(n,time){
if(enabled){
enabled=FALSE;
yb_changed=FALSE;
xb=time;
}
}
function rb(n,Za){
if(enabled){
if(n==TRUE){
ub=Za;
}else{
vb=Za;
}
}
}
function qb(n,Za){
if(enabled){
if(n==TRUE){
enterTime=Za;
}else{
exitTime=Za;
}
}
}
function sb(n,Za){
if(enabled){
coord=n;
}
}
function tb(n,Za){
if(enabled){
texCoord=n;
}
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="zb"><ProtoInterface><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="set_coord" accessType="inputOnly" type="MFVec3f"></field>
<field name="set_texCoord" accessType="inputOnly" type="MFVec2f"></field>
<field name="set_diffuseColor" accessType="inputOnly" type="SFColor"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="set_v" accessType="inputOnly" type="SFNode"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="coord_changed" accessType="outputOnly" type="MFVec3f"></field>
<field name="texCoord_changed" accessType="outputOnly" type="MFVec2f"></field>
<field name="diffuseColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="v_changed" accessType="outputOnly" type="SFNode"></field>
<field name="url" accessType="inputOutput" type="MFString"></field>
<field name="transparency" accessType="inputOutput" type="SFFloat"></field>
<field name="emissiveColor" accessType="inputOutput" type="SFColor" value="0 0.09 0.15"></field>
<field name="specularColor" accessType="inputOutput" type="SFColor" value="0.5 0.5 0.5"></field>
<field name="shininess" accessType="inputOutput" type="SFFloat" value="0.2"></field>
<field name="q" accessType="inputOutput" type="SFVec2f" value="-0.5 -0.5"></field>
<field name="s" accessType="inputOutput" type="SFFloat"></field>
<field name="t" accessType="inputOutput" type="SFVec2f" value="1 1"></field>
<field name="u" accessType="inputOutput" type="SFVec2f"></field>
<field name="Ab" accessType="inputOutput" type="SFVec2f" value="1 1"></field>
<field name="Bb" accessType="inputOutput" type="SFFloat"></field>
<field name="Cb" accessType="inputOutput" type="SFFloat"></field>
<field name="Db" accessType="inputOutput" type="SFFloat"></field>
<field name="Eb" accessType="inputOutput" type="SFFloat"></field>
<field name="B" accessType="inputOutput" type="SFNode"></field>
<field name="C" accessType="inputOutput" type="MFNode"></field>
<field name="D" accessType="inputOutput" type="SFNode"></field>
<field name="F" accessType="inputOutput" type="SFInt32" value="-1"></field>
<field name="p" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="Fb" accessType="initializeOnly" type="SFBool"></field>
<field name="Gb" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="Hb" accessType="initializeOnly" type="SFVec2f"></field>
<field name="Ib" accessType="initializeOnly" type="SFVec2f" value="1 1"></field>
<field name="Jb" accessType="initializeOnly" type="SFColor"></field>
<field name="Kb" accessType="initializeOnly" type="SFColor"></field>
<field name="Lb" accessType="initializeOnly" type="SFInt32" value="-1"></field>
<field name="coord" accessType="initializeOnly" type="MFVec3f"></field>
<field name="texCoord" accessType="initializeOnly" type="MFVec2f"></field>
<field name="coordIndex" accessType="initializeOnly" type="MFInt32"></field>
<field name="color" accessType="initializeOnly" type="MFColor"></field>
<field name="Mb" accessType="initializeOnly" type="SFNode"></field>
<field name="Nb" accessType="initializeOnly" type="SFNode"></field>
<field name="Ob" accessType="initializeOnly" type="SFFloat" value="0.02"></field>
<field name="Pb" accessType="initializeOnly" type="SFFloat" value="1"></field>
<field name="creaseAngle" accessType="initializeOnly" type="SFFloat" value="0.524"></field>
<field name="H" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="choice" accessType="initializeOnly" type="SFInt32"></field>
<field name="Qb" accessType="initializeOnly" type="MFString"></field>
<field name="Rb" accessType="initializeOnly" type="MFString" value="&quot;SERIF&quot;"></field>
<field name="fontStyle" accessType="initializeOnly" type="SFString" value="PLAIN"></field>
<field name="Sb" accessType="initializeOnly" type="SFString"></field>
<field name="diffuseColor" accessType="initializeOnly" type="SFColor" value="0 0.48 0.8"></field>
</ProtoInterface>
<ProtoBody><Switch DEF="Tb_1" whichChoice="-1"><IS><connect nodeField="whichChoice" protoField="choice"></connect>
</IS>
<Shape><Appearance DEF="Ub_1"><Material><IS><connect nodeField="diffuseColor" protoField="diffuseColor"></connect>
<connect nodeField="specularColor" protoField="specularColor"></connect>
<connect nodeField="emissiveColor" protoField="emissiveColor"></connect>
<connect nodeField="shininess" protoField="shininess"></connect>
<connect nodeField="transparency" protoField="transparency"></connect>
</IS>
</Material>
<ImageTexture containerField="texture" DEF="Vb_1"><IS><connect nodeField="url" protoField="url"></connect>
</IS>
</ImageTexture>
<TextureTransform DEF="Wb_1"><IS><connect nodeField="translation" protoField="u"></connect>
<connect nodeField="rotation" protoField="s"></connect>
<connect nodeField="scale" protoField="t"></connect>
<connect nodeField="center" protoField="q"></connect>
</IS>
</TextureTransform>
</Appearance>
<IndexedFaceSet containerField="geometry" DEF="Xb_1" convex="false"><IS><connect nodeField="solid" protoField="Gb"></connect>
<connect nodeField="creaseAngle" protoField="creaseAngle"></connect>
<connect nodeField="coordIndex" protoField="coordIndex"></connect>
</IS>
<TextureCoordinate containerField="texCoord" DEF="Zb_1"><IS><connect nodeField="point" protoField="texCoord"></connect>
</IS>
</TextureCoordinate>
<Coordinate containerField="coord" DEF="Yb_1"><IS><connect nodeField="point" protoField="coord"></connect>
</IS>
</Coordinate>
</IndexedFaceSet>
</Shape>
<Shape><Appearance DEF="ac_1"><ImageTexture containerField="texture" USE="Vb_1"></ImageTexture>
<TextureTransform USE="Wb_1"></TextureTransform>
</Appearance>
<IndexedFaceSet containerField="geometry" DEF="bc_1" convex="false"><IS><connect nodeField="solid" protoField="Gb"></connect>
<connect nodeField="creaseAngle" protoField="creaseAngle"></connect>
<connect nodeField="coordIndex" protoField="coordIndex"></connect>
</IS>
<Color DEF="dc_1"><IS><connect nodeField="color" protoField="color"></connect>
</IS>
</Color>
<TextureCoordinate containerField="texCoord" DEF="ec_1"><IS><connect nodeField="point" protoField="texCoord"></connect>
</IS>
</TextureCoordinate>
<Coordinate containerField="coord" DEF="cc_1"><IS><connect nodeField="point" protoField="coord"></connect>
</IS>
</Coordinate>
</IndexedFaceSet>
</Shape>
<Shape><Appearance USE="Ub_1"></Appearance>
<IndexedFaceSet containerField="geometry" USE="bc_1"></IndexedFaceSet>
</Shape>
<Shape><Appearance USE="ac_1"></Appearance>
<IndexedFaceSet containerField="geometry" USE="bc_1"></IndexedFaceSet>
</Shape>
<Shape><Appearance USE="Ub_1"></Appearance>
<Text containerField="geometry" DEF="fc_1"><IS><connect nodeField="string" protoField="Qb"></connect>
</IS>
<FontStyle><IS><connect nodeField="language" protoField="Sb"></connect>
<connect nodeField="family" protoField="Rb"></connect>
<connect nodeField="style" protoField="fontStyle"></connect>
</IS>
</FontStyle>
</Text>
</Shape>
<Shape><Appearance USE="ac_1"></Appearance>
<Text containerField="geometry" USE="fc_1"></Text>
</Shape>
</Switch>
<Script DEF="gc_1" directOutput="true"><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="set_coord" accessType="inputOnly" type="MFVec3f"></field>
<field name="set_texCoord" accessType="inputOnly" type="MFVec2f"></field>
<field name="set_diffuseColor" accessType="inputOnly" type="SFColor"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="set_v" accessType="inputOnly" type="SFNode"></field>
<field name="choice" accessType="outputOnly" type="SFInt32"></field>
<field name="coordIndex" accessType="outputOnly" type="MFInt32"></field>
<field name="color_changed" accessType="outputOnly" type="MFColor"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="coord_changed" accessType="outputOnly" type="MFVec3f"></field>
<field name="texCoord_changed" accessType="outputOnly" type="MFVec2f"></field>
<field name="diffuseColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="v_changed" accessType="outputOnly" type="SFNode"></field>
<field name="hc" accessType="initializeOnly" type="SFInt32"></field>
<field name="p" accessType="initializeOnly" type="SFBool"></field>
<field name="coord" accessType="initializeOnly" type="MFVec3f"></field>
<field name="texCoord" accessType="initializeOnly" type="MFVec2f"></field>
<field name="H" accessType="initializeOnly" type="SFBool"></field>
<field name="color" accessType="initializeOnly" type="MFColor"></field>
<field name="Hb" accessType="initializeOnly" type="SFVec2f"></field>
<field name="Ib" accessType="initializeOnly" type="SFVec2f"></field>
<field name="Jb" accessType="initializeOnly" type="SFColor"></field>
<field name="Kb" accessType="initializeOnly" type="SFColor"></field>
<field name="Lb" accessType="initializeOnly" type="SFInt32"></field>
<field name="diffuseColor" accessType="initializeOnly" type="SFColor"></field>
<field name="Mb" accessType="initializeOnly" type="SFNode"></field>
<field name="Nb" accessType="initializeOnly" type="SFNode"></field>
<field name="Ob" accessType="initializeOnly" type="SFFloat"></field>
<field name="Pb" accessType="initializeOnly" type="SFFloat"></field>
<field name="Fb" accessType="initializeOnly" type="SFBool"></field>
<field name="Gb" accessType="initializeOnly" type="SFBool"></field>
<field name="ma" accessType="initializeOnly" type="SFNode"><Switch USE="Tb_1"></Switch>
</field>
<field name="ic" accessType="initializeOnly" type="SFNode"><Appearance USE="Ub_1"></Appearance>
</field>
<field name="jc" accessType="initializeOnly" type="SFNode"><Appearance USE="ac_1"></Appearance>
</field>
<IS><connect nodeField="set_p" protoField="set_p"></connect>
<connect nodeField="set_coord" protoField="set_coord"></connect>
<connect nodeField="set_texCoord" protoField="set_texCoord"></connect>
<connect nodeField="set_diffuseColor" protoField="set_diffuseColor"></connect>
<connect nodeField="w" protoField="w"></connect>
<connect nodeField="set_v" protoField="set_v"></connect>
<connect nodeField="p_changed" protoField="p_changed"></connect>
<connect nodeField="coord_changed" protoField="coord_changed"></connect>
<connect nodeField="texCoord_changed" protoField="texCoord_changed"></connect>
<connect nodeField="diffuseColor_changed" protoField="diffuseColor_changed"></connect>
<connect nodeField="v_changed" protoField="v_changed"></connect>
<connect nodeField="hc" protoField="choice"></connect>
<connect nodeField="p" protoField="p"></connect>
<connect nodeField="H" protoField="H"></connect>
<connect nodeField="Hb" protoField="Hb"></connect>
<connect nodeField="Ib" protoField="Ib"></connect>
<connect nodeField="Jb" protoField="Jb"></connect>
<connect nodeField="Kb" protoField="Kb"></connect>
<connect nodeField="Lb" protoField="Lb"></connect>
<connect nodeField="diffuseColor" protoField="diffuseColor"></connect>
<connect nodeField="Mb" protoField="Mb"></connect>
<connect nodeField="Nb" protoField="Nb"></connect>
<connect nodeField="Ob" protoField="Ob"></connect>
<connect nodeField="Pb" protoField="Pb"></connect>
<connect nodeField="Fb" protoField="Fb"></connect>
<connect nodeField="Gb" protoField="Gb"></connect>
</IS>
<![CDATA[javascript:
function kc()
{
R=0;
lc=-1;
for(J=0;J<Mb.mc.length-1;J++){
R=J;
nc=Mb.mc[J];
oc=Mb.mc[J+1];
for(J+=2;J<Mb.mc.length-1
&&Mb.mc[J]!=-1;J++);
lc=J-1;
pc=Mb.mc[lc];
for(qc=R;qc<=lc;qc++){
rc=coord[pc].x;
sc=coord[pc].y;
tc=coord[nc].x;
uc=coord[nc].y;
vc=coord[oc].x;
wc=coord[oc].y;
xc=sc-uc;
yc=tc-rc;
zc=rc*(uc-sc)-sc*(tc-rc);
Ac=uc-wc;
Bc=vc-tc;
Cc=tc*(wc-uc)-uc*(vc-tc);
Dc=1.0/Math.sqrt(xc*xc+yc*yc);
xc*=Dc;
yc*=Dc;
zc*=Dc;
Ec=1.0/Math.sqrt(Ac*Ac+Bc*Bc);
Ac*=Ec;
Bc*=Ec;
Cc*=Ec;
for(Fc=0;Fc<Nb.Gc.length;Fc++){
Hc=Nb.Gc[Fc].y*Ob;
if(Hc==0)
continue;
Ic=zc+Hc;
Jc=Cc+Hc;
Kc=xc*Bc-Ac*yc;
if(Math.abs(Kc)<0.001){
Lc=yc;
Mc=-xc;
Nc=-xc*uc-yc*tc+Hc;
Oc=1.0/(xc*Mc-Lc*yc);
Pc=(yc*Jc-Bc*Ic)*Oc;
Qc=(Ac*Ic-xc*Jc)*Oc;
}else{
Oc=1.0/Kc;
Pc=(yc*Jc-Bc*Ic)*Oc;
Qc=(Ac*Ic-xc*Jc)*Oc;
}
Rc=nc+(Fc*Mb.coord.length);
coord[Rc].x=Pc;
coord[Rc].y=Qc;
}
pc=nc;
nc=oc;
if(qc<lc-1)
oc=Mb.mc[qc+2];
else
oc=Mb.mc[R];
}
}
}
function Sc()
{
coord.length=Mb.coord.length*Nb.Gc.length;
Tc=FALSE;
Uc=0;
for(Fc=0;Fc<Nb.Gc.length;Fc++){
Vc=-1*Nb.Gc[Fc].x*Pb;
if(Nb.Gc[Fc].y!=0)
Tc=TRUE;
for(Wc=0;Wc<Mb.coord.length;Wc++){
coord[Uc].x=Mb.coord[Wc].x;
coord[Uc].y=Mb.coord[Wc].y;
coord[Uc].z=Vc;
Uc++;
}
}
coordIndex=Mb.coordIndex;
coordIndex.length=Mb.coordIndex.length*2
+(Mb.mc.length-1)*(Nb.Gc.length-1);
Xc=TRUE;
for(qc=Mb.coordIndex.length,Fc=0;
Fc<Nb.Gc.length-1;Fc++){
Yc=Mb.coord.length*Fc;
for(J=0;J<Mb.mc.length-1;J++){
Zc=Mb.mc[J];
if(Xc){
R=Zc;
Xc=FALSE;
}
ad=Mb.mc[J+1];
if(J>=Mb.mc.length-2||ad==-1){
ad=R;
Xc=TRUE;
}
if(Zc!=-1&&ad!=-1){
Zc+=Yc;
ad+=Yc;
bd=Zc+Mb.coord.length;
cd=ad+Mb.coord.length;
coordIndex[qc++]=Zc;
coordIndex[qc++]=bd;
coordIndex[qc++]=ad;
coordIndex[qc++]=-1;
coordIndex[qc++]=ad;
coordIndex[qc++]=bd;
coordIndex[qc++]=cd;
coordIndex[qc++]=-1;
}
else
Xc=TRUE;
}
}
dd=Mb.coord.length*(Nb.Gc.length-1);
for(J=Mb.coordIndex.length-2;J>=0;J--,qc++){
ed=Mb.coordIndex[J];
if(ed!=-1){
ed+=dd;
}
coordIndex[qc]=ed;
}
coordIndex[qc]=-1;qc++;
coordIndex.length=qc;
if(Tc){
kc();
}
coord_changed=coord;
}
function fd(){
coord=Mb.coord;
coordIndex=Mb.coordIndex;
coord_changed=coord;
}
function gd(){
if((H==TRUE)&&(Lb==-1))return;
if(Lb==0){
min=Hb.x;
max=Ib.x;
}
else{
min=Hb.y;
max=Ib.y;
}
hd=max-min;
color.length=coord.length;
for(id=0;id<coord.length;id++){
if(hd==0.0){
fraction=0.0;
}else{
if(Lb==0){
fraction=(coord[id].x-min)/hd;
}else{
fraction=(coord[id].y-min)/hd;
}
}
jd=new SFColor(0,0,0);
if(Lb==-1){
jd=diffuseColor;
}else{
if(fraction<0){fraction=0;}
if(fraction>1){fraction=1;}
jd.r=Kb.r*(1-fraction)+
Jb.r*fraction;
jd.g=Kb.g*(1-fraction)+
Jb.g*fraction;
jd.b=Kb.b*(1-fraction)+
Jb.b*fraction;
}
color[id]=jd;
}
color_changed=color;
}
function kd(){
hd=new SFVec2f(0,0);
hd.x=Ib.x-Hb.x;
hd.y=Ib.y-Hb.y;
texCoord.length=coord.length;
for(id=0;id<coord.length;id++){
if(hd.x==0.0){
texCoord[id].x=0.0;
}else{
texCoord[id].x=(coord[id].x-Hb.x)/hd.x;
}
if(hd.y==0.0){
texCoord[id].y=0.0;
}else{
texCoord[id].y=(coord[id].y-Hb.y)/hd.y;
}
}
texCoord_changed=texCoord;
}
function set_p(n){
if(n==TRUE){
if(H==TRUE){
if(hc>=4){
ma.whichChoice=4;
choice=4;
}
else if(Lb>=0){
ma.whichChoice=2;
choice=2;
}else{
ma.whichChoice=0;
choice=0;
}
}else{
if(hc>=4){
ma.whichChoice=5;
choice=5;
}
else if(Lb>=0){
ma.whichChoice=3;
choice=3;
}else{
ma.whichChoice=1;
choice=1;
}
}
}else{
ma.whichChoice=-1;
choice=-1;
}
p=n;
p_changed=n;
}
function ld()
{
if(Fb){
fd();
}
else{
Sc();
}
}
function initialize(){
set_p(p);
v_changed=ic.texture_changed;
diffuseColor_changed=diffuseColor;
if(hc<4){
ld();
kd();
gd();
}
}
function set_diffuseColor(n){
diffuseColor=n;
diffuseColor_changed=n;
gd();
}
function set_v(n){
ic.set_texture=n;
jc.set_texture=n;
v_changed=n;
}
function w(){
}]]></Script>
<ROUTE fromNode="gc_1" fromField="coord_changed" toNode="Yb_1" toField="set_point"></ROUTE>
<ROUTE fromNode="gc_1" fromField="texCoord_changed" toNode="Zb_1" toField="set_point"></ROUTE>
<ROUTE fromNode="gc_1" fromField="coordIndex" toNode="Xb_1" toField="set_coordIndex"></ROUTE>
<ROUTE fromNode="gc_1" fromField="coord_changed" toNode="cc_1" toField="set_point"></ROUTE>
<ROUTE fromNode="gc_1" fromField="color_changed" toNode="dc_1" toField="set_color"></ROUTE>
<ROUTE fromNode="gc_1" fromField="texCoord_changed" toNode="ec_1" toField="set_point"></ROUTE>
<ROUTE fromNode="gc_1" fromField="coordIndex" toNode="bc_1" toField="set_coordIndex"></ROUTE>
<ROUTE fromNode="gc_1" fromField="coordIndex" toNode="bc_1" toField="set_colorIndex"></ROUTE>
<ROUTE fromNode="gc_1" fromField="choice" toNode="Tb_1" toField="set_whichChoice"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="md"><ProtoInterface><field name="coord" accessType="inputOutput" type="MFVec3f"></field>
<field name="coordIndex" accessType="inputOutput" type="MFInt32"></field>
<field name="mc" accessType="inputOutput" type="MFInt32"></field>
</ProtoInterface>
<ProtoBody><Group></Group>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="nd"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_od" accessType="inputOnly" type="SFFloat"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="hb" accessType="initializeOnly" type="SFBool"></field>
<field name="ib" accessType="initializeOnly" type="SFBool"></field>
<field name="pd" accessType="initializeOnly" type="SFBool"></field>
<field name="qd" accessType="initializeOnly" type="SFBool"></field>
<field name="rd" accessType="initializeOnly" type="SFBool"></field>
<field name="sd" accessType="initializeOnly" type="SFBool"></field>
<field name="td" accessType="initializeOnly" type="SFBool"></field>
<field name="ud" accessType="initializeOnly" type="SFBool"></field>
<field name="vd" accessType="initializeOnly" type="SFBool"></field>
<field name="wd" accessType="initializeOnly" type="SFBool"></field>
<field name="xd" accessType="initializeOnly" type="SFBool"></field>
<field name="diffuseColor" accessType="initializeOnly" type="SFColor" value="1 0 0"></field>
<field name="emissiveColor" accessType="initializeOnly" type="SFColor" value="0 0 1"></field>
<field name="specularColor" accessType="initializeOnly" type="SFColor" value="0 1 0"></field>
<field name="transparency" accessType="initializeOnly" type="SFFloat"></field>
<field name="shininess" accessType="initializeOnly" type="SFFloat" value="0.2"></field>
<field name="q" accessType="initializeOnly" type="SFVec2f" value="-0.5 -0.5"></field>
<field name="t" accessType="initializeOnly" type="SFVec2f" value="1 1"></field>
<field name="s" accessType="initializeOnly" type="SFFloat"></field>
<field name="u" accessType="initializeOnly" type="SFVec2f"></field>
<field name="ha" accessType="initializeOnly" type="SFVec3f"></field>
</ProtoInterface>
<ProtoBody><Script DEF="jb_1" directOutput="true"><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_od" accessType="inputOnly" type="SFFloat"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="hb" accessType="initializeOnly" type="SFBool"></field>
<field name="ib" accessType="initializeOnly" type="SFBool"></field>
<field name="pd" accessType="initializeOnly" type="SFBool"></field>
<field name="qd" accessType="initializeOnly" type="SFBool"></field>
<field name="rd" accessType="initializeOnly" type="SFBool"></field>
<field name="sd" accessType="initializeOnly" type="SFBool"></field>
<field name="td" accessType="initializeOnly" type="SFBool"></field>
<field name="ud" accessType="initializeOnly" type="SFBool"></field>
<field name="vd" accessType="initializeOnly" type="SFBool"></field>
<field name="wd" accessType="initializeOnly" type="SFBool"></field>
<field name="xd" accessType="initializeOnly" type="SFBool"></field>
<field name="diffuseColor" accessType="initializeOnly" type="SFColor"></field>
<field name="emissiveColor" accessType="initializeOnly" type="SFColor"></field>
<field name="specularColor" accessType="initializeOnly" type="SFColor"></field>
<field name="transparency" accessType="initializeOnly" type="SFFloat"></field>
<field name="shininess" accessType="initializeOnly" type="SFFloat"></field>
<field name="q" accessType="initializeOnly" type="SFVec2f"></field>
<field name="t" accessType="initializeOnly" type="SFVec2f"></field>
<field name="s" accessType="initializeOnly" type="SFFloat"></field>
<field name="u" accessType="initializeOnly" type="SFVec2f"></field>
<field name="yd" accessType="initializeOnly" type="MFColor" value="0 0 0"></field>
<field name="zd" accessType="initializeOnly" type="MFColor" value="0 0 0"></field>
<field name="Ad" accessType="initializeOnly" type="MFColor" value="0 0 0"></field>
<field name="Bd" accessType="initializeOnly" type="MFFloat" value="0"></field>
<field name="Cd" accessType="initializeOnly" type="MFFloat" value="0"></field>
<field name="Dd" accessType="initializeOnly" type="MFVec2f" value="0 0"></field>
<field name="Ed" accessType="initializeOnly" type="MFVec2f" value="0 0"></field>
<field name="Fd" accessType="initializeOnly" type="MFFloat" value="0"></field>
<field name="Gd" accessType="initializeOnly" type="MFVec2f" value="0 0"></field>
<field name="Hd" accessType="initializeOnly" type="MFColor" value="0 0 0"></field>
<field name="Id" accessType="initializeOnly" type="MFColor" value="0 0 0"></field>
<field name="Jd" accessType="initializeOnly" type="MFColor" value="0 0 0"></field>
<field name="Kd" accessType="initializeOnly" type="MFString"></field>
<field name="Ld" accessType="initializeOnly" type="SFColor"></field>
<field name="Md" accessType="initializeOnly" type="SFColor"></field>
<field name="aa" accessType="initializeOnly" type="SFBool"></field>
<field name="lb" accessType="initializeOnly" type="SFInt32"></field>
<field name="mb" accessType="initializeOnly" type="MFNode"></field>
<field name="Nd" accessType="initializeOnly" type="SFVec2f"></field>
<field name="od" accessType="initializeOnly" type="SFFloat"></field>
<field name="Od" accessType="initializeOnly" type="SFFloat"></field>
<field name="Pd" accessType="initializeOnly" type="SFFloat"></field>
<field name="Qd" accessType="initializeOnly" type="SFFloat"></field>
<field name="ea" accessType="initializeOnly" type="SFTime"></field>
<field name="fa" accessType="initializeOnly" type="SFTime"></field>
<field name="Rd" accessType="initializeOnly" type="SFBool"></field>
<field name="Sd" accessType="initializeOnly" type="SFVec2f" value="1 1"></field>
<field name="Td" accessType="initializeOnly" type="SFVec2f"></field>
<field name="Za" accessType="initializeOnly" type="SFVec2f"></field>
<field name="Ud" accessType="initializeOnly" type="SFFloat"></field>
<field name="Vd" accessType="initializeOnly" type="SFVec2f"></field>
<field name="Wd" accessType="initializeOnly" type="SFVec2f"></field>
<field name="Xd" accessType="initializeOnly" type="SFVec2f"></field>
<field name="Yd" accessType="initializeOnly" type="SFVec2f"></field>
<IS><connect nodeField="R" protoField="R"></connect>
<connect nodeField="S" protoField="S"></connect>
<connect nodeField="set_od" protoField="set_od"></connect>
<connect nodeField="set_fraction" protoField="set_fraction"></connect>
<connect nodeField="R_changed" protoField="R_changed"></connect>
<connect nodeField="U" protoField="U"></connect>
<connect nodeField="hb" protoField="hb"></connect>
<connect nodeField="ib" protoField="ib"></connect>
<connect nodeField="pd" protoField="pd"></connect>
<connect nodeField="qd" protoField="qd"></connect>
<connect nodeField="rd" protoField="rd"></connect>
<connect nodeField="sd" protoField="sd"></connect>
<connect nodeField="td" protoField="td"></connect>
<connect nodeField="ud" protoField="ud"></connect>
<connect nodeField="vd" protoField="vd"></connect>
<connect nodeField="wd" protoField="wd"></connect>
<connect nodeField="xd" protoField="xd"></connect>
<connect nodeField="diffuseColor" protoField="diffuseColor"></connect>
<connect nodeField="emissiveColor" protoField="emissiveColor"></connect>
<connect nodeField="specularColor" protoField="specularColor"></connect>
<connect nodeField="transparency" protoField="transparency"></connect>
<connect nodeField="shininess" protoField="shininess"></connect>
<connect nodeField="q" protoField="q"></connect>
<connect nodeField="t" protoField="t"></connect>
<connect nodeField="s" protoField="s"></connect>
<connect nodeField="u" protoField="u"></connect>
</IS>
<![CDATA[javascript:
function Zd(lb){
Sd.x=lb.t_changed.x;
Sd.y=lb.t_changed.y;
Td.x=lb.q_changed.x;
Td.y=lb.q_changed.y;
Za.x=lb.u_changed.x;
Za.y=lb.u_changed.y;
Ud=lb.s_changed;
var ae,be;
ae=Math.cos(Ud);
be=Math.sin(Ud);
Vd.x=q.x;
Vd.y=q.y;
Yd.x=((-Td.x)+(Sd.x*(Td.x-Vd.x+Za.x)*ae)-(Sd.x*(Td.y-Vd.y+Za.y)*be));
Yd.y=((-Td.y)+(Sd.y*(Td.y-Vd.y+Za.y)*ae)+(Sd.y*(Td.x-Vd.x+Za.x)*be));
Vd.x=-Yd.x;
Vd.y=-Yd.y;
lb.set_q=Vd;
Wd.x=(Td.x-Vd.x+Za.x-((Td.x-Vd.x)*Math.cos(Ud))/Sd.x-((Td.y-Vd.y)*Math.sin(Ud))/Sd.y);
Wd.y=(Td.y-Vd.y+Za.y-((Td.y-Vd.y)*Math.cos(Ud))/Sd.y+((Td.x-Vd.x)*Math.sin(Ud))/Sd.x);
lb.set_u=Wd;
Xd.x=Wd.x-Za.x;
Xd.y=Wd.y-Za.y;
u.x+=Xd.x;
u.y+=Xd.y;
}
function initialize(){
U.w=TRUE;
Rd=FALSE;
aa=FALSE;
od=0.;
}
function R(n){
if(ib&&!hb){
return;
}
if(fa==n){
return;
}
if(aa==TRUE){
ea=n;
return;
}
aa=TRUE;
od=0.;
if(hb==FALSE){
mb.length=1;
mb[0]=U;
}else{
mb=U.A_changed;
}
yd.length=
zd.length=
Ad.length=
Hd.length=
Id.length=
Jd.length=
Bd.length=
Cd.length=
Dd.length=
Ed.length=
Fd.length=
Gd.length=mb.length;
for(lb=0;lb<mb.length;lb++){
if(pd==TRUE){
ce(mb[lb].diffuseColor_changed,yd[lb]);
ce(diffuseColor,Hd[lb]);
if((yd[lb][1]<=Qd)||(yd[lb][2]<=Qd)){
yd[lb][0]=Hd[lb][0];
}else if((Hd[lb][1]<=Qd)||(Hd[lb][2]<=Qd)){
Hd[lb][0]=yd[lb][0];
}
}
if(rd==TRUE){
ce(mb[lb].specularColor_changed,Ad[lb]);
ce(specularColor,Jd[lb]);
if((Ad[lb][1]<=Qd)||(Ad[lb][2]<=Qd)){
Ad[lb][0]=Jd[lb][0];
}else if((Jd[lb][1]<=Qd)||(Jd[lb][2]<=Qd)){
Jd[lb][0]=Ad[lb][0];
}
}
if(qd==TRUE){
ce(mb[lb].emissiveColor_changed,zd[lb]);
ce(emissiveColor,Id[lb]);
if((zd[lb][1]<=Qd)||(zd[lb][2]<=Qd)){
zd[lb][0]=Id[lb][0];
}else if((Id[lb][1]<=Qd)||(Id[lb][2]<=Qd)){
Id[lb][0]=zd[lb][0];
}
}
if(sd==TRUE)Bd[lb]=mb[lb].transparency_changed;
if(td==TRUE)Cd[lb]=mb[lb].shininess_changed;
if(vd==TRUE||wd==TRUE||xd==TRUE){
Kd=mb[lb].v_changed.url;
if(Kd.length>0){
if(Kd[0].length>0){
if(lb==0)Rd=TRUE;
Zd(mb[lb]);
Ed[lb]=mb[lb].t_changed;
Fd[lb]=mb[lb].s_changed;
Gd[lb]=mb[lb].u_changed;
}
}
}
}
R_changed=n;
fa=n;
}
function S(n){
aa=FALSE;
if(ea==n){
R(n);
}
}
function set_od(n){
od=n;
if(od<0.)od=0.;
else if(od>1.)od=1.;
}
function set_fraction(n){
if(ib&&!hb){
return;
}
Pd=od*(1.+Math.sin(2.*Math.PI*n-(Math.PI/2.)))/2.;
Od=od*Math.sin(2.*Math.PI*n);
for(lb=0;lb<mb.length;lb++){
if(pd==TRUE){
Ld[0]=(1.-Pd)*yd[lb][0]+Pd*Hd[lb][0];
Ld[1]=(1.-Pd)*yd[lb][1]+Pd*Hd[lb][1];
Ld[2]=(1.-Pd)*yd[lb][2]+Pd*Hd[lb][2];
de(Ld,Md);
mb[lb].set_diffuseColor=Md;
}
if(rd==TRUE){
Ld[0]=(1.-Pd)*Ad[lb][0]+Pd*Jd[lb][0];
Ld[1]=(1.-Pd)*Ad[lb][1]+Pd*Jd[lb][1];
Ld[2]=(1.-Pd)*Ad[lb][2]+Pd*Jd[lb][2];
de(Ld,Md);
mb[lb].set_specularColor=Md;
}
if(qd==TRUE){
Ld[0]=(1.-Pd)*zd[lb][0]+Pd*Id[lb][0];
Ld[1]=(1.-Pd)*zd[lb][1]+Pd*Id[lb][1];
Ld[2]=(1.-Pd)*zd[lb][2]+Pd*Id[lb][2];
de(Ld,Md);
mb[lb].set_emissiveColor=Md;
}
if(sd==TRUE)mb[lb].set_transparency=(1.-Pd)*Bd[lb]+Pd*transparency;
if(td==TRUE)mb[lb].set_shininess=(1.-Pd)*Cd[lb]+Pd*shininess;
if(Rd==TRUE){
if(vd==TRUE){
Nd.x=(1.-Pd)*Ed[lb].x+Pd*t.x;
Nd.y=(1.-Pd)*Ed[lb].y+Pd*t.y;
mb[lb].set_t=Nd;
}
if(wd==TRUE){
mb[lb].set_s=Fd[lb]+Od*s;
}
if(xd==TRUE){
Nd.x=Gd[lb].x+Od*u.x;
Nd.y=Gd[lb].y+Od*u.y;
mb[lb].set_u=Nd;
}
}
}
}
function ce(ee,fe){
var max,min;
max=(ee[0]>ee[1])?
((ee[0]>ee[2])?ee[0]:ee[2]):
((ee[1]>ee[2])?ee[1]:ee[2]);
min=(ee[0]<ee[1])?
((ee[0]<ee[2])?ee[0]:ee[2]):
((ee[1]<ee[2])?ee[1]:ee[2]);
fe[2]=max;
if(max!=0.)fe[1]=(max-min)/max;
else fe[1]=0.;
if(fe[1]!=0.){
if(ee[0]==max)fe[0]=(ee[1]-ee[2])/(max-min);
else if(ee[1]==max)fe[0]=2.+(ee[2]-ee[0])/(max-min);
else fe[0]=4.+(ee[0]-ee[1])/(max-min);
if(fe[0]<0.)fe[0]+=6.;
fe[0]/=6.;
}else fe[0]=0.;
}
function de(fe,ee){
var ge,he,Za,ie;
var J;
if(fe[0]==1.)fe[0]=0.;
else fe[0]*=6.;
J=Math.floor(fe[0]);
ge=fe[0]-J;
ie=fe[2]*(1.-fe[1]);
he=fe[2]*(1.-(fe[1]*ge));
Za=fe[2]*(1.-(fe[1]*(1.-ge)));
switch(J){
case 0:ee[0]=fe[2];ee[1]=Za;ee[2]=ie;break;
case 1:ee[0]=he;ee[1]=fe[2];ee[2]=ie;break;
case 2:ee[0]=ie;ee[1]=fe[2];ee[2]=Za;break;
case 3:ee[0]=ie;ee[1]=he;ee[2]=fe[2];break;
case 4:ee[0]=Za;ee[1]=ie;ee[2]=fe[2];break;
case 5:ee[0]=fe[2];ee[1]=ie;ee[2]=he;break;
}
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="je"><ProtoInterface><field name="set_enabled" accessType="inputOnly" type="SFBool"></field>
<field name="isOver" accessType="outputOnly" type="SFBool"></field>
<field name="isActive" accessType="outputOnly" type="SFBool"></field>
<field name="trackPoint_changed" accessType="outputOnly" type="SFVec3f"></field>
<field name="rotation_changed" accessType="outputOnly" type="SFRotation"></field>
<field name="oa" accessType="initializeOnly" type="SFInt32"></field>
</ProtoInterface>
<ProtoBody><SphereSensor DEF="ke_1" enabled="false" autoOffset="false"><IS><connect nodeField="trackPoint_changed" protoField="trackPoint_changed"></connect>
<connect nodeField="rotation_changed" protoField="rotation_changed"></connect>
<connect nodeField="isActive" protoField="isActive"></connect>
</IS>
</SphereSensor>
<Script DEF="le_1" directOutput="true"><field name="set_enabled" accessType="inputOnly" type="SFBool"></field>
<field name="enabled_changed" accessType="outputOnly" type="SFBool"></field>
<field name="oa" accessType="initializeOnly" type="SFInt32"></field>
<IS><connect nodeField="set_enabled" protoField="set_enabled"></connect>
<connect nodeField="oa" protoField="oa"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
if(oa>0){
enabled_changed=TRUE;
}
}
function set_enabled(n){
if(n==TRUE){
enabled_changed=TRUE;
oa++;
}else{
enabled_changed=FALSE;
enabled_changed=TRUE;
if(oa>0){
oa--;
}
}
}]]></Script>
<ROUTE fromNode="le_1" fromField="enabled_changed" toNode="ke_1" toField="set_enabled"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="me"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="sa" accessType="inputOnly" type="SFTime"></field>
<field name="rb" accessType="inputOnly" type="SFBool"></field>
<field name="ne" accessType="inputOnly" type="SFRotation"></field>
<field name="oe" accessType="inputOnly" type="SFVec3f"></field>
<field name="yb_changed" accessType="outputOnly" type="SFBool"></field>
<field name="stopTime" accessType="outputOnly" type="SFTime"></field>
<field name="pe" accessType="initializeOnly" type="SFInt32"></field>
<field name="qe" accessType="initializeOnly" type="SFVec3f" value="0 0 1"></field>
<field name="enabled" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="re" accessType="initializeOnly" type="SFNode"></field>
<field name="center" accessType="initializeOnly" type="SFVec3f"></field>
</ProtoInterface>
<ProtoBody><Script DEF="I_2" directOutput="true"><field name="isActive" accessType="inputOnly" type="SFBool"></field>
<field name="se" accessType="inputOnly" type="SFRotation"></field>
<field name="te" accessType="inputOnly" type="SFVec3f"></field>
<field name="ob" accessType="inputOnly" type="SFTime"></field>
<field name="pb" accessType="inputOnly" type="SFTime"></field>
<field name="yb_changed" accessType="outputOnly" type="SFBool"></field>
<field name="stopTime" accessType="outputOnly" type="SFTime"></field>
<field name="pe" accessType="initializeOnly" type="SFInt32"></field>
<field name="qe" accessType="initializeOnly" type="SFVec3f"></field>
<field name="enabled" accessType="initializeOnly" type="SFBool"></field>
<field name="ue" accessType="initializeOnly" type="SFNode"></field>
<field name="ve" accessType="initializeOnly" type="SFRotation"></field>
<IS><connect nodeField="isActive" protoField="rb"></connect>
<connect nodeField="se" protoField="ne"></connect>
<connect nodeField="te" protoField="oe"></connect>
<connect nodeField="ob" protoField="R"></connect>
<connect nodeField="pb" protoField="sa"></connect>
<connect nodeField="yb_changed" protoField="yb_changed"></connect>
<connect nodeField="stopTime" protoField="stopTime"></connect>
<connect nodeField="pe" protoField="pe"></connect>
<connect nodeField="qe" protoField="qe"></connect>
<connect nodeField="enabled" protoField="enabled"></connect>
<connect nodeField="ue" protoField="re"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
yb_changed=enabled;
}
function ob(n,time){
if(!enabled){
enabled=TRUE;
yb_changed=TRUE;
ve=ue.rotation;
}
}
function pb(n,time){
if(enabled){
enabled=FALSE;
yb_changed=FALSE;
stopTime=time;
}
}
function isActive(n,Za){
ve=ue.rotation;
if(n==TRUE){
yb_changed=TRUE;
}
else{
yb_changed=FALSE;
}
}
function se(n){
if(pe==0){
ue.rotation=n.multiply(ve);
}
}
function te(n){
if(pe==1){
we=new SFRotation(qe,n);
ue.rotation=we.multiply(ve);
}
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="xe"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="startTime" accessType="outputOnly" type="SFTime"></field>
<field name="ye" accessType="initializeOnly" type="SFNode"></field>
<field name="ze" accessType="initializeOnly" type="SFNode"></field>
<field name="Ae" accessType="initializeOnly" type="SFNode"></field>
<field name="Be" accessType="initializeOnly" type="SFBool"></field>
<field name="Ce" accessType="initializeOnly" type="SFInt32" value="-1"></field>
<field name="De" accessType="initializeOnly" type="SFBool"></field>
</ProtoInterface>
<ProtoBody><Script directOutput="true"><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="startTime" accessType="outputOnly" type="SFTime"></field>
<field name="Ee" accessType="initializeOnly" type="SFNode"></field>
<field name="Fe" accessType="initializeOnly" type="SFNode"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="Be" accessType="initializeOnly" type="SFBool"></field>
<field name="Ce" accessType="initializeOnly" type="SFInt32"></field>
<field name="ea" accessType="initializeOnly" type="SFTime"></field>
<field name="De" accessType="initializeOnly" type="SFBool"></field>
<IS><connect nodeField="R" protoField="R"></connect>
<connect nodeField="S" protoField="S"></connect>
<connect nodeField="startTime" protoField="startTime"></connect>
<connect nodeField="Ee" protoField="ye"></connect>
<connect nodeField="Fe" protoField="ze"></connect>
<connect nodeField="U" protoField="Ae"></connect>
<connect nodeField="Be" protoField="Be"></connect>
<connect nodeField="Ce" protoField="Ce"></connect>
<connect nodeField="De" protoField="De"></connect>
</IS>
<![CDATA[javascript:
function R(n,Za){
if(startTime==Za){
return;
}
if(!Be){
if(U.D!=null){
if(U.F!=Ce){
if(!De){
U.D.sa=Za;
}
}
}
U.D=Fe;
U.F=Ce;
Ee.R=Za;
Be=TRUE;
startTime=Za;
}else{
ea=Za;
}
}
function S(n,Za){
Be=FALSE;
if(ea==Za){
R(n,Za);
}
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="Ge"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="He" accessType="outputOnly" type="SFTime"></field>
<field name="Ie" accessType="outputOnly" type="SFTime"></field>
<field name="Je" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="Ke" accessType="initializeOnly" type="SFFloat" value="5"></field>
<field name="qe" accessType="initializeOnly" type="SFVec3f" value="0 0 1"></field>
<field name="T" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="center" accessType="initializeOnly" type="SFVec3f"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="Le" accessType="initializeOnly" type="SFNode"></field>
</ProtoInterface>
<ProtoBody><Script directOutput="true"><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="He" accessType="outputOnly" type="SFTime"></field>
<field name="Ie" accessType="outputOnly" type="SFTime"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="Me" accessType="initializeOnly" type="SFNode"></field>
<field name="center" accessType="initializeOnly" type="SFVec3f"></field>
<field name="Je" accessType="initializeOnly" type="SFBool"></field>
<field name="Ke" accessType="initializeOnly" type="SFFloat"></field>
<field name="qe" accessType="initializeOnly" type="SFVec3f"></field>
<field name="Ne" accessType="initializeOnly" type="SFVec3f" value="0 1 0"></field>
<field name="Oe" accessType="initializeOnly" type="SFInt32" value="2"></field>
<field name="Pe" accessType="initializeOnly" type="SFVec3f"></field>
<field name="Qe" accessType="initializeOnly" type="SFRotation"></field>
<IS><connect nodeField="R" protoField="R"></connect>
<connect nodeField="set_fraction" protoField="set_fraction"></connect>
<connect nodeField="He" protoField="He"></connect>
<connect nodeField="Ie" protoField="Ie"></connect>
<connect nodeField="U" protoField="U"></connect>
<connect nodeField="Me" protoField="Le"></connect>
<connect nodeField="center" protoField="center"></connect>
<connect nodeField="Je" protoField="Je"></connect>
<connect nodeField="Ke" protoField="Ke"></connect>
<connect nodeField="qe" protoField="qe"></connect>
</IS>
<![CDATA[vrmlscript:
function Re(U,Se){
var Te=new VrmlMatrix();
for(var J=U.C.length-2;J>=0;J--){
Te.setTransform(U.C[J].translation,
U.C[J].rotation,
U.C[J].scale,
U.C[J].scaleOrientation,
U.C[J].center);
Se.multRight(Te);
}
}
function Ue(Ve,Se){
var We=Ve;
while(We.G==FALSE){
Re(We,Se);
We=We.B;
}
}
function Xe()
{
var Se=new VrmlMatrix();
Re(Me,Se);
Ue(Me.B,Se);
var Ye=Me.C[0].center;
return Se.multVecMatrix(Ye);
}
function Ze(Se)
{
Re(Me,Se);
Ue(Me.B,Se);
}
function af()
{
var Se=new VrmlMatrix();
Re(U,Se);
Ue(U.B,Se);
return Se;
}
function R(n,Za)
{
He=Za;
U.C[0].center=center;
Ne=new SFVec3f(0,1,0);
Oe=2;
if(Math.abs(qe.x)>0.5){
Oe=0;
}
else if(Math.abs(qe.y)>0.5){
Oe=1;
Ne=new SFVec3f(0,0,1);
}
}
function set_fraction(n)
{
var bf=new SFVec3f(0,0,0);
if(Je){
bf=new SFVec3f(0.0,0.0,Ke);
}
else{
bf=Xe();
}
var cf=af();
var df=cf.inverse();
var vec=df.multVecMatrix(bf);
vec=vec.subtract(U.C[0].center);
var we=new SFRotation(qe,vec);
if(n<1.0){
we=Qe.slerp(we,n);
}
U.C[0].rotation=we.multiply(U.C[0].rotation);
if(Je){
cf=af();
df=cf.inverse();
var ef=df.multVecMatrix(new SFVec3f(0,1,0));
var ff=new SFVec3f(0,0,0);
var gf=df.multVecMatrix(ff);
ef=ef.subtract(gf);
ef[Oe]=0.0;
we=new SFRotation(Ne,ef);
U.C[0].rotation=we.multiply(U.C[0].rotation);
}
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="hf"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_od" accessType="inputOnly" type="SFFloat"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="jf" accessType="inputOnly" type="SFFloat"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="translation" accessType="inputOutput" type="SFVec3f"></field>
<field name="scale" accessType="inputOutput" type="SFVec3f" value="1 1 1"></field>
<field name="center" accessType="inputOutput" type="SFVec3f"></field>
<field name="T" accessType="inputOutput" type="SFBool" value="true"></field>
<field name="rotation" accessType="inputOutput" type="SFRotation"></field>
<field name="scaleOrientation" accessType="inputOutput" type="SFRotation"></field>
<field name="children" accessType="initializeOnly" type="MFNode"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="kf" accessType="initializeOnly" type="SFInt32" value="8"></field>
<field name="lf" accessType="initializeOnly" type="SFFloat" value="1.5"></field>
<field name="mf" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="nf" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="of" accessType="initializeOnly" type="SFBool" value="true"></field>
</ProtoInterface>
<ProtoBody><Transform DEF="pf_1"><IS><connect nodeField="translation" protoField="translation"></connect>
<connect nodeField="rotation" protoField="rotation"></connect>
<connect nodeField="scale" protoField="scale"></connect>
<connect nodeField="scaleOrientation" protoField="scaleOrientation"></connect>
<connect nodeField="center" protoField="center"></connect>
<connect nodeField="children" protoField="children"></connect>
</IS>
</Transform>
<PositionInterpolator DEF="qf_1"></PositionInterpolator>
<Script DEF="rf_1" directOutput="true"><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_od" accessType="inputOnly" type="SFFloat"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="jf" accessType="inputOnly" type="SFFloat"></field>
<field name="set_sf" accessType="inputOnly" type="SFVec3f"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="key_changed" accessType="outputOnly" type="MFFloat"></field>
<field name="keyValue_changed" accessType="outputOnly" type="MFVec3f"></field>
<field name="sf_changed" accessType="outputOnly" type="SFVec3f"></field>
<field name="fraction_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="kf" accessType="initializeOnly" type="SFInt32"></field>
<field name="lf" accessType="initializeOnly" type="SFFloat"></field>
<field name="mf" accessType="initializeOnly" type="SFBool"></field>
<field name="nf" accessType="initializeOnly" type="SFBool"></field>
<field name="of" accessType="initializeOnly" type="SFBool"></field>
<field name="aa" accessType="initializeOnly" type="SFBool"></field>
<field name="tf" accessType="initializeOnly" type="SFFloat" value="1"></field>
<field name="key" accessType="initializeOnly" type="MFFloat" value="0"></field>
<field name="keyValue" accessType="initializeOnly" type="MFVec3f" value="0 0 0"></field>
<field name="uf" accessType="initializeOnly" type="SFNode"><Transform USE="pf_1"></Transform>
</field>
<field name="vf" accessType="initializeOnly" type="SFVec3f"></field>
<field name="sf" accessType="initializeOnly" type="SFVec3f"></field>
<field name="od" accessType="initializeOnly" type="SFFloat"></field>
<field name="wf" accessType="initializeOnly" type="SFFloat"></field>
<field name="xf" accessType="initializeOnly" type="SFFloat"></field>
<field name="ea" accessType="initializeOnly" type="SFTime"></field>
<field name="fa" accessType="initializeOnly" type="SFTime"></field>
<IS><connect nodeField="R" protoField="R"></connect>
<connect nodeField="S" protoField="S"></connect>
<connect nodeField="set_od" protoField="set_od"></connect>
<connect nodeField="set_fraction" protoField="set_fraction"></connect>
<connect nodeField="jf" protoField="jf"></connect>
<connect nodeField="R_changed" protoField="R_changed"></connect>
<connect nodeField="U" protoField="U"></connect>
<connect nodeField="kf" protoField="kf"></connect>
<connect nodeField="lf" protoField="lf"></connect>
<connect nodeField="mf" protoField="mf"></connect>
<connect nodeField="nf" protoField="nf"></connect>
<connect nodeField="of" protoField="of"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
aa=FALSE;
tf=1.;
sf.x=sf.y=sf.z=1.;
key.length=kf;
keyValue.length=kf;
ge=0.0;
g=kf-1.0;
g=1./g;
for(J=0;J<kf;J++){
key[J]=ge;
keyValue[J].x=keyValue[J].y=keyValue[J].z=1.;
if(mf==TRUE){
xf=Math.random();
wf=(1.-xf)+xf*(lf);
keyValue[J].x=wf;
}
if(nf==TRUE){
xf=Math.random();
wf=(1.-xf)+xf*(lf);
keyValue[J].y=wf;
}
if(of==TRUE){
xf=Math.random();
wf=(1.-xf)+xf*(lf);
keyValue[J].z=wf;
}
ge+=g;
}
}
function R(n){
if(fa==n){
return;
}
if(aa==TRUE){
ea=n;
return;
}
aa=TRUE;
vf=uf.scale_changed;
key_changed=key;
keyValue_changed=keyValue;
R_changed=n;
fa=n;
}
function S(n){
uf.set_scale=vf;
aa=FALSE;
if(ea==n){
R(n);
}
}
function set_od(n){
od=n;
if(od<0.)od=0.;
else if(od>1.)od=1.;
}
function set_sf(n){
if(mf==TRUE)sf.x=(1.-od)+od*(n.x);
if(nf==TRUE)sf.y=(1.-od)+od*(n.y);
if(of==TRUE)sf.z=(1.-od)+od*(n.z);
sf_changed=sf;
}
function set_fraction(n){
fraction_changed=n;
}
function jf(n){
if(n>tf){
tf=n;
return;
}
tf=n;
keyValue[0].x=keyValue[kf-1].x;
keyValue[0].y=keyValue[kf-1].y;
keyValue[0].z=keyValue[kf-1].z;
for(J=1;J<kf;J++){
if(mf==TRUE){
xf=Math.random();
wf=(1.-xf)+xf*(lf);
keyValue[J].x=wf;
}
if(nf==TRUE){
xf=Math.random();
wf=(1.-xf)+xf*(lf);
keyValue[J].y=wf;
}
if(of==TRUE){
xf=Math.random();
wf=(1.-xf)+xf*(lf);
keyValue[J].z=wf;
}
}
keyValue_changed=keyValue;
}]]></Script>
<ROUTE fromNode="rf_1" fromField="sf_changed" toNode="pf_1" toField="set_scale"></ROUTE>
<ROUTE fromNode="rf_1" fromField="key_changed" toNode="qf_1" toField="set_key"></ROUTE>
<ROUTE fromNode="rf_1" fromField="fraction_changed" toNode="qf_1" toField="set_fraction"></ROUTE>
<ROUTE fromNode="rf_1" fromField="keyValue_changed" toNode="qf_1" toField="set_keyValue"></ROUTE>
<ROUTE fromNode="qf_1" fromField="value_changed" toNode="rf_1" toField="set_sf"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="yf"><ProtoInterface><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="point_changed" accessType="outputOnly" type="MFVec3f"></field>
<field name="zf_changed" accessType="outputOnly" type="MFInt32"></field>
<field name="Sd_changed" accessType="outputOnly" type="MFFloat"></field>
<field name="Af_changed" accessType="outputOnly" type="MFVec2f"></field>
<field name="Bf_changed" accessType="outputOnly" type="MFInt32"></field>
<field name="Cf_changed" accessType="outputOnly" type="SFBool"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="diffuseColor" accessType="inputOutput" type="SFColor" value="0.3 0.5 1"></field>
<field name="B" accessType="inputOutput" type="SFNode"></field>
<field name="C" accessType="inputOutput" type="MFNode"></field>
<field name="D" accessType="inputOutput" type="SFNode"></field>
<field name="F" accessType="inputOutput" type="SFInt32" value="-1"></field>
<field name="G" accessType="inputOutput" type="SFBool"></field>
<field name="point" accessType="initializeOnly" type="MFVec3f"></field>
<field name="zf" accessType="initializeOnly" type="MFInt32"></field>
<field name="Sd" accessType="initializeOnly" type="MFFloat"></field>
<field name="Af" accessType="initializeOnly" type="MFVec2f"></field>
<field name="Bf" accessType="initializeOnly" type="MFInt32"></field>
<field name="Cf" accessType="initializeOnly" type="SFBool"></field>
<field name="p" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="coord" accessType="initializeOnly" type="MFVec3f"></field>
<field name="coordIndex" accessType="initializeOnly" type="MFInt32"></field>
<field name="choice" accessType="initializeOnly" type="SFInt32"></field>
<field name="Df" accessType="initializeOnly" type="SFInt32" value="8"></field>
<field name="scale" accessType="initializeOnly" type="SFVec3f" value="1 1 1"></field>
</ProtoInterface>
<ProtoBody><Switch DEF="Ef_1" whichChoice="-1"><IS><connect nodeField="whichChoice" protoField="choice"></connect>
</IS>
<Shape><Appearance><Material DEF="Ff"><IS><connect nodeField="emissiveColor" protoField="diffuseColor"></connect>
</IS>
</Material>
</Appearance>
<IndexedLineSet containerField="geometry" DEF="Gf_1"><IS><connect nodeField="coordIndex" protoField="coordIndex"></connect>
</IS>
<Coordinate containerField="coord" DEF="Hf_1"><IS><connect nodeField="point" protoField="coord"></connect>
</IS>
</Coordinate>
</IndexedLineSet>
</Shape>
</Switch>
<Script DEF="If_1" directOutput="true"><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="point_changed" accessType="outputOnly" type="MFVec3f"></field>
<field name="zf_changed" accessType="outputOnly" type="MFInt32"></field>
<field name="Sd_changed" accessType="outputOnly" type="MFFloat"></field>
<field name="Af_changed" accessType="outputOnly" type="MFVec2f"></field>
<field name="Bf_changed" accessType="outputOnly" type="MFInt32"></field>
<field name="Cf_changed" accessType="outputOnly" type="SFBool"></field>
<field name="coord" accessType="outputOnly" type="MFVec3f"></field>
<field name="coordIndex" accessType="outputOnly" type="MFInt32"></field>
<field name="p" accessType="initializeOnly" type="SFBool"></field>
<field name="point" accessType="initializeOnly" type="MFVec3f"></field>
<field name="zf" accessType="initializeOnly" type="MFInt32"></field>
<field name="Sd" accessType="initializeOnly" type="MFFloat"></field>
<field name="Af" accessType="initializeOnly" type="MFVec2f"></field>
<field name="Bf" accessType="initializeOnly" type="MFInt32"></field>
<field name="Cf" accessType="initializeOnly" type="SFBool"></field>
<field name="Df" accessType="initializeOnly" type="SFInt32"></field>
<field name="ma" accessType="initializeOnly" type="SFNode"><Switch USE="Ef_1"></Switch>
</field>
<IS><connect nodeField="set_p" protoField="set_p"></connect>
<connect nodeField="w" protoField="w"></connect>
<connect nodeField="p_changed" protoField="p_changed"></connect>
<connect nodeField="point_changed" protoField="point_changed"></connect>
<connect nodeField="zf_changed" protoField="zf_changed"></connect>
<connect nodeField="Sd_changed" protoField="Sd_changed"></connect>
<connect nodeField="Af_changed" protoField="Af_changed"></connect>
<connect nodeField="Bf_changed" protoField="Bf_changed"></connect>
<connect nodeField="Cf_changed" protoField="Cf_changed"></connect>
<connect nodeField="p" protoField="p"></connect>
<connect nodeField="point" protoField="point"></connect>
<connect nodeField="zf" protoField="zf"></connect>
<connect nodeField="Sd" protoField="Sd"></connect>
<connect nodeField="Af" protoField="Af"></connect>
<connect nodeField="Bf" protoField="Bf"></connect>
<connect nodeField="Cf" protoField="Cf"></connect>
<connect nodeField="Df" protoField="Df"></connect>
</IS>
<![CDATA[javascript:
function Jf(Kf,Lf,
Mf,Nf,Of,Pf,Qf,Rf){
Sf=coord.length;
coord.length+=Df;
for(J=0;J<Df;J++){
var Tf=Kf.multiply(Of[J]);
Tf=Tf.add(Lf.multiply(Pf[J]));
Tf=Tf.add(Mf.multiply(Qf[J]));
Tf=Tf.add(Nf.multiply(Rf[J]));
coord[Sf+J]=Tf;
}
}
function Uf(){
if(point.length==0)return;
var index=0;
var Vf=new SFVec3f();
var Kf=new SFVec3f();
var Lf=new SFVec3f();
var Mf=new SFVec3f();
var Nf=new SFVec3f();
var Wf=new SFVec3f();
var Xf=new SFVec3f();
var Yf=new SFVec3f();
var Zf=new SFVec3f();
var ag=FALSE;
var bg=FALSE;
var cg=FALSE;
var dg=FALSE;
var eg=FALSE;
var fg=FALSE;
if(zf[index]==1){
Vf=point[index];
ag=TRUE;
Xf=point[index];
cg=TRUE;
index++;
}
if(zf[index]==0){
Kf=point[index];
Yf=point[index];
index++;
}
if(zf[index]==2){
Lf=point[index];
dg=TRUE;
Zf=point[index];
fg=TRUE;
index++;
}
var Of=new MFFloat();
var Pf=new MFFloat();
var Qf=new MFFloat();
var Rf=new MFFloat();
Of.length=Pf.length=Qf.length=Rf.length=Df;
Of[0]=1;
Pf[0]=Qf[0]=Rf[0]=0;
for(J=1;J<Df;J++){
gg=(J*1.0)/Df;
Of[J]=(1-gg)*(1-gg)*(1-gg);
Pf[J]=3*gg*(1-gg)*(1-gg);
Qf[J]=3*gg*gg*(1-gg);
Rf[J]=gg*gg*gg;
}
while(index<zf.length){
bg=FALSE;
eg=FALSE;
if(zf[index]==1){
Mf=point[index];
bg=TRUE;
index++;
}
if((index<zf.length)&&(zf[index]==0)){
Nf=point[index];
index++;
}
if((index<zf.length)&&(zf[index]==2)){
Wf=point[index];
eg=TRUE;
index++;
}
if(dg&&bg){
Jf(Kf,Lf,
Mf,Nf,
Of,Pf,Qf,Rf);
}else if(dg){
Jf(Kf,Lf,
Nf,Nf,
Of,Pf,Qf,Rf);
}else if(bg){
Jf(Kf,Kf,
Mf,Nf,
Of,Pf,Qf,Rf);
}else{
coord[coord.length]=Kf;
}
Vf=Mf;
Kf=Nf;
Lf=Wf;
ag=bg;
dg=eg;
}
if(Cf){
if(eg&&cg){
Jf(Nf,Wf,
Xf,Yf,
Of,Pf,Qf,Rf);
}else if(eg){
Jf(Nf,Wf,
Yf,Yf,
Of,Pf,Qf,Rf);
}else if(cg){
Jf(Nf,Nf,
Xf,Yf,
Of,Pf,Qf,Rf);
}else{
coord[coord.length]=Nf;
}
coord[coord.length]=Yf;
}else{
coord[coord.length]=Nf;
}
coordIndex.length=coord.length+1;
for(J=0;J<coord.length;J++){
coordIndex[J]=J;
}
coordIndex[coordIndex.length-1]=-1;
}
function set_p(n){
if(n==TRUE){
ma.whichChoice=0;
}else{
ma.whichChoice=-1;
}
p=n;
p_changed=n;
}
function initialize(){
set_p(p);
Uf();
point_changed=point;
zf_changed=zf;
Sd_changed=Sd;
Af_changed=Af;
Bf_changed=Bf;
Cf_changed=Cf;
}
function w(){
}]]></Script>
<ROUTE fromNode="If_1" fromField="coord" toNode="Hf_1" toField="set_point"></ROUTE>
<ROUTE fromNode="If_1" fromField="coordIndex" toNode="Gf_1" toField="set_coordIndex"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="hg"><ProtoInterface><field name="set_position" accessType="inputOnly" type="SFVec3f"></field>
<field name="set_orientation" accessType="inputOnly" type="SFRotation"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="offset" accessType="initializeOnly" type="SFVec3f"></field>
<field name="ig" accessType="initializeOnly" type="SFRotation"></field>
<field name="jg" accessType="initializeOnly" type="SFFloat"></field>
<field name="center" accessType="initializeOnly" type="SFVec3f"></field>
<field name="T" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="kg" accessType="initializeOnly" type="SFBool" value="true"></field>
</ProtoInterface>
<ProtoBody><Script directOutput="true"><field name="set_position" accessType="inputOnly" type="SFVec3f"></field>
<field name="set_orientation" accessType="inputOnly" type="SFRotation"></field>
<field name="U" accessType="initializeOnly" type="SFNode"></field>
<field name="offset" accessType="initializeOnly" type="SFVec3f"></field>
<field name="ig" accessType="initializeOnly" type="SFRotation"></field>
<field name="kg" accessType="initializeOnly" type="SFBool"></field>
<field name="lg" accessType="initializeOnly" type="SFVec3f"></field>
<field name="ff" accessType="initializeOnly" type="SFVec3f"></field>
<IS><connect nodeField="set_position" protoField="set_position"></connect>
<connect nodeField="set_orientation" protoField="set_orientation"></connect>
<connect nodeField="U" protoField="U"></connect>
<connect nodeField="offset" protoField="offset"></connect>
<connect nodeField="ig" protoField="ig"></connect>
<connect nodeField="kg" protoField="kg"></connect>
</IS>
<![CDATA[javascript:
function Re(U,Se){
var Te=new VrmlMatrix();
for(var J=U.C.length-1;J>=0;J--){
Te.setTransform(U.C[J].translation,
U.C[J].rotation,
U.C[J].scale,
U.C[J].scaleOrientation,
U.C[J].center);
Se.multRight(Te);
}
}
function Ue(Ve,Se){
var We=Ve;
while(We.G==FALSE){
Re(We,Se);
We=We.B;
}
}
function set_orientation(mg)
{
if(!kg){
var ng=new VrmlMatrix();
Ue(U.B,ng);
var og=ng.inverse();
var pg=og.multVecMatrix(lg);
var qg=new SFVec3f();
var rg=new SFRotation();
var sg=new SFVec3f();
og.getTransform(qg,rg,sg);
var tg=mg.multiply(rg);
var ug=ig.multiply(tg);
var vg=ug.multVec(offset);
U.C[0].translation=pg.add(vg);
U.C[0].rotation=ug;
U.C[0].center=ff;
}
}
function set_position(wg)
{
if(kg){
var ng=new VrmlMatrix();
Ue(U.B,ng);
var og=ng.inverse();
var pg=og.multVecMatrix(wg);
xg=new VrmlMatrix();
xg.setTransform(ff,
U.C[0].rotation,
U.C[0].scale,
U.C[0].scaleOrientation,
U.C[0].center);
vg=xg.multVecMatrix(offset);
U.C[0].translation=pg.add(vg);
U.C[0].center=ff;
}else{
lg=wg;
}
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="yg"><ProtoInterface><field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="zg" accessType="outputOnly" type="SFVec3f"></field>
<field name="Ag" accessType="outputOnly" type="SFRotation"></field>
<field name="Bg" accessType="outputOnly" type="SFVec3f"></field>
<field name="Cg" accessType="outputOnly" type="SFRotation"></field>
<field name="Dg" accessType="outputOnly" type="SFTime"></field>
<field name="Eg" accessType="initializeOnly" type="SFNode"></field>
<field name="Fg" accessType="initializeOnly" type="SFBool"></field>
<field name="Gg" accessType="initializeOnly" type="SFFloat"></field>
<field name="Hg" accessType="initializeOnly" type="SFVec3f" value="0 0 1"></field>
<field name="reverse" accessType="initializeOnly" type="SFInt32"></field>
<field name="Ig" accessType="initializeOnly" type="SFBool"></field>
</ProtoInterface>
<ProtoBody><Script DEF="I_3" directOutput="true"><field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="zg" accessType="outputOnly" type="SFVec3f"></field>
<field name="Ag" accessType="outputOnly" type="SFRotation"></field>
<field name="Bg" accessType="outputOnly" type="SFVec3f"></field>
<field name="Cg" accessType="outputOnly" type="SFRotation"></field>
<field name="Dg" accessType="outputOnly" type="SFTime"></field>
<field name="Jg" accessType="initializeOnly" type="SFNode"></field>
<field name="Fg" accessType="initializeOnly" type="SFBool"></field>
<field name="Gg" accessType="initializeOnly" type="SFFloat"></field>
<field name="Hg" accessType="initializeOnly" type="SFVec3f"></field>
<field name="reverse" accessType="initializeOnly" type="SFInt32"></field>
<field name="Ig" accessType="initializeOnly" type="SFBool"></field>
<field name="Kg" accessType="initializeOnly" type="SFBool"></field>
<field name="Lg" accessType="initializeOnly" type="SFFloat"></field>
<field name="Qa" accessType="initializeOnly" type="SFFloat"></field>
<IS><connect nodeField="set_fraction" protoField="set_fraction"></connect>
<connect nodeField="R" protoField="R"></connect>
<connect nodeField="zg" protoField="zg"></connect>
<connect nodeField="Ag" protoField="Ag"></connect>
<connect nodeField="Bg" protoField="Bg"></connect>
<connect nodeField="Cg" protoField="Cg"></connect>
<connect nodeField="Dg" protoField="Dg"></connect>
<connect nodeField="Jg" protoField="Eg"></connect>
<connect nodeField="Fg" protoField="Fg"></connect>
<connect nodeField="Gg" protoField="Gg"></connect>
<connect nodeField="Hg" protoField="Hg"></connect>
<connect nodeField="reverse" protoField="reverse"></connect>
<connect nodeField="Ig" protoField="Ig"></connect>
</IS>
<![CDATA[javascript:
function Re(U,Se){
var Te=new VrmlMatrix();
for(var J=U.C.length-1;J>=0;J--){
Te.setTransform(U.C[J].translation,
U.C[J].rotation,
U.C[J].scale,
U.C[J].scaleOrientation,
U.C[J].center);
Se.multRight(Te);
}
}
function Ue(Ve,Se){
var We=Ve;
while(We.G==FALSE){
Re(We,Se);
We=We.B;
}
}
function Mg(Se){
Re(Jg,Se);
Ue(Jg.B,Se);
}
function R(n,Za)
{
Dg=Za;
var J=0;
var Ng=0;
while((J<Jg.zf_changed.length)&&(Ng<2)){
if(Jg.zf_changed[J]==0){
Ng=Ng+1;
}
J++;
}
if(Ng<2){
Kg=TRUE;
}
else{
Kg=FALSE;
}
if(Ig==FALSE){
Lg=0;
}else{
Lg=Qa;
}
}
function Og(Pg,Za)
{
Qg=new MFVec3f();
Qg[0]=Pg[0].add((Pg[1].add(Pg[0].negate())).multiply(Za));
Qg[1]=Pg[1].add((Pg[2].add(Pg[1].negate())).multiply(Za));
Qg[2]=Pg[2].add((Pg[3].add(Pg[2].negate())).multiply(Za));
Rg=new MFVec3f();
Rg[0]=Qg[0].add((Qg[1].add(Qg[0].negate())).multiply(Za));
Rg[1]=Qg[1].add((Qg[2].add(Qg[1].negate())).multiply(Za));
Sg=Rg[0].add((Rg[1].add(Rg[0].negate())).multiply(Za));
return Sg;
}
function Tg(index)
{
Pg=new MFVec3f();
Pg[0]=Jg.point_changed[index];
index=(index+1)%Jg.zf_changed.length;
if(Jg.zf_changed[index]==2)
{
Pg[1]=Jg.point_changed[index];
index=(index+1)%Jg.zf_changed.length;
}
else if(Jg.zf_changed[index]==0)
{
Pg[3]=Jg.point_changed[index];
Pg[1]=(Pg[3].subtract(Pg[0])).multiply(1.0/3.0).add(Pg[0]);
Pg[2]=(Pg[3].subtract(Pg[0])).multiply(2.0/3.0).add(Pg[0]);
return Pg;
}
else
{
Pg[1]=Pg[0];
}
Pg[2]=Jg.point_changed[index];
if(Jg.zf_changed[index]==1)
{
index=(index+1)%Jg.zf_changed.length;
}
Pg[3]=Jg.point_changed[index];
return Pg;
}
function Ug(n)
{
var Vg=0;
for(J=0;J<Jg.Sd_changed.length-1;J++){
if((n>=Jg.Sd_changed[J])&&
(n<=Jg.Sd_changed[J+1])){
Vg=J;
break;
}
}
return Vg;
}
function Wg(Za,Vg)
{
Sd=(Za-Jg.Sd_changed[Vg])/(Jg.Sd_changed[Vg+1]-Jg.Sd_changed[Vg]);
return Sd;
}
function Xg(Vg)
{
Yg=0;
Zg=-1;
for(J=0;J<Jg.zf_changed.length;J++){
if(Jg.zf_changed[J]==0){
if(Yg==Vg){
Zg=J;
break;
}
Yg++;
}
}
return Zg;
}
function ah(index,Za)
{
Pg=Tg(index);
bh=new MFVec3f();
bh[0]=Pg[1].add(Pg[0].negate());
bh[1]=Pg[2].add(Pg[1].negate());
bh[2]=Pg[3].add(Pg[2].negate());
ch=new MFVec3f();
ch[0]=bh[0].add((bh[1].add(bh[0].negate())).multiply(Za));
ch[1]=bh[1].add((bh[2].add(bh[1].negate())).multiply(Za));
dh=ch[0].add((ch[1].add(ch[0].negate())).multiply(Za));
eh=dh.length();
if(eh<1.e-5)
{
fh=Og(Pg,Za);
ba=(Za>0.5)?-0.01:0.01;
Yg=0;
while((eh<1.e-5)&&(Yg<10))
{
Yg=Yg+1;
Za=Za+ba;
gh=Og(Pg,Za);
dh=gh.subtract(fh);
eh=dh.length();
}
if(Za>0.5){dh=dh.negate();}
}
return dh;
}
function hh(index,Za,ih)
{
ih=ih+Gg;
if(ih>1.0)
{
if(Jg.Cf_changed==TRUE)
{
ih=ih-1.0;
}
else
{
ih=1.0;
if(Za>=1.0){
return ah(index,Za);
}
}
}
Vg=Ug(ih);
jh=Wg(ih,Vg);
kh=Xg(Vg);
Pg=Tg(index);
fh=Og(Pg,Za);
if(kh!=index)
{
Pg=Tg(kh);
}
gh=Og(Pg,jh);
dh=gh.subtract(fh);
if(dh.length()<1.e-4)
{
return ah(index,Za);
}
return dh;
}
function lh(index,Za,ih)
{
if(Kg){
return new SFVec3f(0,0,0);
}
if(Gg>0.0)
{
return hh(index,Za,ih);
}
else
{
return ah(index,Za);
}
}
function mh()
{
return new SFVec3f(1.0,0.0,0.0);
}
function nh(oh,ph)
{
if(Kg){
return 0.0;
}
if((oh.length()<0.0001)||(ph.length()<0.0001)){
return 0.0;
}
if(Hg.y>0.5){ph.y=0.0;}
oh=oh.normalize();
ph=ph.normalize();
dot=oh.dot(ph);
if(dot<-1.0){dot=-1.0;}
else if(dot>1.0){dot=1.0;}
angle=Math.acos(dot);
qh=oh.cross(ph);
if(qh.dot(Hg)<0.0)
{angle=-angle;}
return angle;
}
function set_fraction(n){
n+=Lg;
if(n>1){
n-=1;
}
Qa=n;
if(reverse!=0){
n=1.0-n;
}
var rh=new VrmlMatrix();
Mg(rh);
sh=new SFVec3f;
th=new SFRotation;
uh=new SFVec3f;
rh.getTransform(sh,th,uh);
if(Kg)
{
var J=0;
while(J<Jg.point_changed.length){
if(Jg.zf_changed[J]==0){
zg=Jg.point_changed[J];
Bg=rh.multVecMatrix(zg);
if(Fg)
{
Ag=new SFRotation(0.0,0.0,0.0,1.0);
Cg=Ag.multiply(th);
}
return;
}
J=J+1;
}
return;
}
if(n<=0.0){
vh=-1;
if(Jg.zf_changed[0]==0){
vh=0;
}else if(Jg.zf_changed[0]==1){
vh=1;
}
zg=Jg.point_changed[vh];
Bg=rh.multVecMatrix(zg);
if(Fg)
{
wh=lh(vh,0.0,n);
xh=mh();
angle=nh(xh,wh);
Ag=new SFRotation(Hg,angle);
Cg=Ag.multiply(th);
}
return;
}
if(n>=1.0){
if(Jg.Cf_changed==FALSE){
yh=Jg.point_changed.length-1;
if(Jg.zf_changed[yh]==0){
zg=Jg.point_changed[yh];
}else if(Jg.zf_changed[yh]==2){
zg=Jg.point_changed[yh-1];
}
}else{
if(Jg.zf_changed[0]==0){
zg=Jg.point_changed[0];
}else if(Jg.zf_changed[0]==1){
zg=Jg.point_changed[1];
}
}
Bg=rh.multVecMatrix(zg);
if(Fg)
{
J=Jg.point_changed.length;
Ng=1;
if(Jg.Cf_changed==FALSE){
Ng=Ng+1;
}
Yg=0;
while((J>=0)&&(Yg<Ng)){
J--;
if(Jg.zf_changed[J]==0){
Yg=Yg+1;
}
}
if(J>=0)
{
wh=lh(J,1.0,n);
xh=mh();
angle=nh(xh,wh);
Ag=new SFRotation(Hg,angle);
Cg=Ag.multiply(th);
}
else
{
Ag=new SFRotation(0.0,0.0,0.0,1.0);
Cg=Ag.multiply(th);
}
}
return;
}
Vg=Ug(n);
Sd=Wg(n,Vg);
zh=-1;
Zg=Xg(Vg);
if(Jg.zf_changed[(Zg+1)%Jg.zf_changed.length]==0){
zh=(Zg+1)%Jg.zf_changed.length;
Ah=Jg.point_changed[Zg].multiply(1-Sd);
Bh=Jg.point_changed[zh].multiply(Sd);
zg=Ah.add(Bh);
Bg=rh.multVecMatrix(zg);
if(Fg)
{
wh=lh(Zg,Sd,n);
xh=mh();
angle=nh(xh,wh);
Ag=new SFRotation(Hg,angle);
Cg=Ag.multiply(th);
}
return;
}
if(Jg.zf_changed[(Zg+2)%Jg.zf_changed.length]==0){
zh=(Zg+2)%Jg.zf_changed.length;
}else{
zh=(Zg+3)%Jg.zf_changed.length;
}
index=Jg.Bf_changed[Vg];
Ch=Jg.Af_changed[index][0];
while(Ch<=Jg.Af_changed[index][0]){
Dh=Jg.Af_changed[index+1][0];
if((Sd>=Ch)&&(Sd<=Dh)){
Eh=(Sd-Ch)/(Dh-Ch);
gg=Jg.Af_changed[index][1]*(1.0-Eh)+
Jg.Af_changed[index+1][1]*Eh;
break;
}
index++;
Ch=Dh;
}
Of=(1-gg)*(1-gg)*(1-gg);
Pf=3*(1-gg)*(1-gg)*gg;
Qf=3*(1-gg)*gg*gg;
Rf=gg*gg*gg;
Fh=(Zg+1)%Jg.point_changed.length;
if(((Zg+3)%Jg.point_changed.length)==zh){
Gh=Jg.point_changed[Zg].multiply(Of);
Ah=Jg.point_changed[Fh].multiply(Pf);
Bh=Jg.point_changed[zh-1].multiply(Qf);
Hh=Jg.point_changed[zh].multiply(Rf);
}else if(Jg.zf_changed[Fh]==2){
Gh=Jg.point_changed[Zg].multiply(Of);
Ah=Jg.point_changed[Fh].multiply(Pf);
Bh=Jg.point_changed[zh].multiply(Qf);
Hh=Jg.point_changed[zh].multiply(Rf);
}else if(Jg.zf_changed[Fh]==1){
Gh=Jg.point_changed[Zg].multiply(Of);
Ah=Jg.point_changed[Zg].multiply(Pf);
Bh=Jg.point_changed[zh-1].multiply(Qf);
Hh=Jg.point_changed[zh].multiply(Rf);
}
zg=Gh.add(Ah).add(Bh).add(Hh);
Bg=rh.multVecMatrix(zg);
if(Fg)
{
wh=lh(Zg,gg,n);
xh=mh();
Ag=new SFRotation(Hg,nh(xh,wh));
Cg=Ag.multiply(th);
}
}
function initialize(){
Jg.w=TRUE;
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="Ih"><ProtoInterface><field name="set_intensity" accessType="inputOnly" type="SFFloat"></field>
<field name="set_startTime" accessType="inputOnly" type="SFTime"></field>
<field name="set_stopTime" accessType="inputOnly" type="SFTime"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="intensity_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="Jh" accessType="outputOnly" type="SFTime"></field>
<field name="pitch" accessType="inputOutput" type="SFFloat" value="1"></field>
<field name="loop" accessType="inputOutput" type="SFBool"></field>
<field name="B" accessType="inputOutput" type="SFNode"></field>
<field name="C" accessType="inputOutput" type="MFNode"></field>
<field name="url" accessType="initializeOnly" type="MFString"></field>
<field name="intensity" accessType="initializeOnly" type="SFFloat" value="1"></field>
</ProtoInterface>
<ProtoBody><Sound DEF="Kh_1" spatialize="false" minBack="1000000" minFront="1000000" maxBack="1000000" maxFront="1000000"><IS><connect nodeField="intensity" protoField="intensity"></connect>
</IS>
<AudioClip containerField="source" DEF="Lh_1"><IS><connect nodeField="url" protoField="url"></connect>
<connect nodeField="pitch" protoField="pitch"></connect>
<connect nodeField="loop" protoField="loop"></connect>
<connect nodeField="duration_changed" protoField="Jh"></connect>
</IS>
</AudioClip>
</Sound>
<Script DEF="Mh_1" directOutput="true"><field name="set_intensity" accessType="inputOnly" type="SFFloat"></field>
<field name="set_startTime" accessType="inputOnly" type="SFTime"></field>
<field name="set_stopTime" accessType="inputOnly" type="SFTime"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="intensity_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="startTime_changed" accessType="outputOnly" type="SFTime"></field>
<field name="stopTime_changed" accessType="outputOnly" type="SFTime"></field>
<field name="intensity" accessType="initializeOnly" type="SFFloat"></field>
<IS><connect nodeField="set_intensity" protoField="set_intensity"></connect>
<connect nodeField="set_startTime" protoField="set_startTime"></connect>
<connect nodeField="set_stopTime" protoField="set_stopTime"></connect>
<connect nodeField="w" protoField="w"></connect>
<connect nodeField="intensity_changed" protoField="intensity_changed"></connect>
<connect nodeField="intensity" protoField="intensity"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
intensity_changed=intensity;
}
function set_intensity(n){
intensity=n;
intensity_changed=n;
}
function set_startTime(n){
startTime_changed=n;
}
function set_stopTime(n){
stopTime_changed=n;
}
function w(){
}]]></Script>
<ROUTE fromNode="Mh_1" fromField="startTime_changed" toNode="Lh_1" toField="set_startTime"></ROUTE>
<ROUTE fromNode="Mh_1" fromField="stopTime_changed" toNode="Lh_1" toField="set_stopTime"></ROUTE>
<ROUTE fromNode="Mh_1" fromField="intensity_changed" toNode="Kh_1" toField="set_intensity"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="Nh"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_intensity" accessType="inputOnly" type="SFFloat"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="Jh" accessType="inputOnly" type="SFTime"></field>
<field name="startTime" accessType="outputOnly" type="SFTime"></field>
<field name="stopTime" accessType="outputOnly" type="SFTime"></field>
<field name="Oh" accessType="initializeOnly" type="SFNode"></field>
<field name="loop" accessType="initializeOnly" type="SFBool"></field>
<field name="intensity" accessType="initializeOnly" type="SFFloat" value="1"></field>
<field name="pitch" accessType="initializeOnly" type="SFFloat" value="1"></field>
<field name="Qa" accessType="initializeOnly" type="SFFloat"></field>
<field name="Ph" accessType="initializeOnly" type="SFBool"></field>
<field name="duration" accessType="initializeOnly" type="SFTime"></field>
<field name="Qh" accessType="initializeOnly" type="SFBool"></field>
<field name="Rh" accessType="initializeOnly" type="SFBool"></field>
</ProtoInterface>
<ProtoBody><Script DEF="Sh" directOutput="true"><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="set_intensity" accessType="inputOnly" type="SFFloat"></field>
<field name="set_fraction" accessType="inputOnly" type="SFFloat"></field>
<field name="Jh" accessType="inputOnly" type="SFTime"></field>
<field name="startTime" accessType="outputOnly" type="SFTime"></field>
<field name="stopTime" accessType="outputOnly" type="SFTime"></field>
<field name="Oh" accessType="initializeOnly" type="SFNode"></field>
<field name="loop" accessType="initializeOnly" type="SFBool"></field>
<field name="intensity" accessType="initializeOnly" type="SFFloat"></field>
<field name="pitch" accessType="initializeOnly" type="SFFloat"></field>
<field name="duration" accessType="initializeOnly" type="SFTime"></field>
<field name="Qh" accessType="initializeOnly" type="SFBool"></field>
<field name="Rh" accessType="initializeOnly" type="SFBool"></field>
<field name="Th" accessType="initializeOnly" type="SFBool"></field>
<field name="Qa" accessType="initializeOnly" type="SFFloat"></field>
<field name="Ph" accessType="initializeOnly" type="SFBool"></field>
<field name="Uh" accessType="initializeOnly" type="SFBool"></field>
<field name="Vh" accessType="initializeOnly" type="SFTime" value="-1"></field>
<field name="ea" accessType="initializeOnly" type="SFTime"></field>
<field name="fa" accessType="initializeOnly" type="SFTime"></field>
<IS><connect nodeField="R" protoField="R"></connect>
<connect nodeField="S" protoField="S"></connect>
<connect nodeField="set_intensity" protoField="set_intensity"></connect>
<connect nodeField="set_fraction" protoField="set_fraction"></connect>
<connect nodeField="Jh" protoField="Jh"></connect>
<connect nodeField="startTime" protoField="startTime"></connect>
<connect nodeField="stopTime" protoField="stopTime"></connect>
<connect nodeField="Oh" protoField="Oh"></connect>
<connect nodeField="loop" protoField="loop"></connect>
<connect nodeField="intensity" protoField="intensity"></connect>
<connect nodeField="pitch" protoField="pitch"></connect>
<connect nodeField="duration" protoField="duration"></connect>
<connect nodeField="Qh" protoField="Qh"></connect>
<connect nodeField="Rh" protoField="Rh"></connect>
<connect nodeField="Qa" protoField="Qa"></connect>
<connect nodeField="Ph" protoField="Ph"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
if(Qh){
Oh.set_intensity=0;
}else{
Oh.set_intensity=intensity;
}
Oh.loop=loop;
Oh.pitch=pitch;
}
function R(n,time){
if(fa==n){
return;
}
if((Th==TRUE)&&(Vh==-1)){
ea=n;
return;
}
if(Uh==FALSE){
Vh=n;
startTime=n;
Th=TRUE;
return;
}
if(Qh){
Oh.set_intensity=0;
}else{
Oh.set_intensity=intensity;
}
Oh.loop=loop;
Oh.pitch=pitch;
if(Vh>0){
Oh.set_startTime=Vh;
Oh.set_stopTime=Vh-1;
}else{
var Wh=n-(duration/pitch)*Qa;
Oh.set_startTime=Wh;
Oh.set_stopTime=Wh-1;
}
if(Th==FALSE){
startTime=n;
Th=TRUE;
}
Vh=-1;
fa=n;
}
function S(n,time){
if(!Th){
return;
}
if(Ph==FALSE){
Qa=0;
}
if(Qa==1){
Qa=0;
}
Oh.set_stopTime=n;
stopTime=n;
Th=FALSE;
Vh=-1;
if(Qh){
Oh.set_intensity=0;
}else{
Oh.set_intensity=intensity;
}
if(ea==n){
R(n,time);
}
}
function set_intensity(n,time){
if(Qh||Rh){
Oh.set_intensity=n*intensity;
}
}
function set_fraction(n){
Qa=n;
}
function Jh(n,Za){
Uh=TRUE;
if(Vh>0){
R(Za,Za);
}
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="Xh"><ProtoInterface><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="Yh" accessType="outputOnly" type="SFTime"></field>
</ProtoInterface>
<ProtoBody><Script DEF="jb_2" directOutput="true"><field name="R" accessType="inputOnly" type="SFTime"></field>
<field name="S" accessType="inputOnly" type="SFTime"></field>
<field name="R_changed" accessType="outputOnly" type="SFTime"></field>
<field name="Yh" accessType="outputOnly" type="SFTime"></field>
<field name="aa" accessType="initializeOnly" type="SFBool"></field>
<field name="ea" accessType="initializeOnly" type="SFTime"></field>
<field name="fa" accessType="initializeOnly" type="SFTime"></field>
<IS><connect nodeField="R" protoField="R"></connect>
<connect nodeField="S" protoField="S"></connect>
<connect nodeField="R_changed" protoField="R_changed"></connect>
<connect nodeField="Yh" protoField="Yh"></connect>
</IS>
<![CDATA[javascript:
function initialize(){
aa=FALSE;
}
function R(n){
if(fa==n){
return;
}
if(aa==TRUE){
ea=n;
return;
}
aa=TRUE;
R_changed=n;
fa=n;
}
function S(n){
Yh=n;
aa=FALSE;
if(ea==n){
R(n);
}
}]]></Script>
</ProtoBody>
</ProtoDeclare>
<ProtoDeclare name="Zh"><ProtoInterface><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="set_coord" accessType="inputOnly" type="MFVec3f"></field>
<field name="set_texCoord" accessType="inputOnly" type="MFVec2f"></field>
<field name="set_hd" accessType="inputOnly" type="SFFloat"></field>
<field name="set_height" accessType="inputOnly" type="SFFloat"></field>
<field name="set_diffuseColor" accessType="inputOnly" type="SFColor"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="set_v" accessType="inputOnly" type="SFNode"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="coord_changed" accessType="outputOnly" type="MFVec3f"></field>
<field name="texCoord_changed" accessType="outputOnly" type="MFVec2f"></field>
<field name="hd_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="height_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="diffuseColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="v_changed" accessType="outputOnly" type="SFNode"></field>
<field name="url" accessType="inputOutput" type="MFString"></field>
<field name="transparency" accessType="inputOutput" type="SFFloat"></field>
<field name="emissiveColor" accessType="inputOutput" type="SFColor"></field>
<field name="specularColor" accessType="inputOutput" type="SFColor"></field>
<field name="shininess" accessType="inputOutput" type="SFFloat" value="0.2"></field>
<field name="q" accessType="inputOutput" type="SFVec2f" value="-0.5 -0.5"></field>
<field name="s" accessType="inputOutput" type="SFFloat"></field>
<field name="t" accessType="inputOutput" type="SFVec2f" value="1 1"></field>
<field name="u" accessType="inputOutput" type="SFVec2f"></field>
<field name="B" accessType="inputOutput" type="SFNode"></field>
<field name="C" accessType="inputOutput" type="MFNode"></field>
<field name="D" accessType="inputOutput" type="SFNode"></field>
<field name="F" accessType="inputOutput" type="SFInt32" value="-1"></field>
<field name="p" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="hd" accessType="initializeOnly" type="SFFloat" value="72"></field>
<field name="height" accessType="initializeOnly" type="SFFloat" value="72"></field>
<field name="ai" accessType="initializeOnly" type="MFInt32" value="1 1"></field>
<field name="bi" accessType="initializeOnly" type="SFInt32" value="-1"></field>
<field name="Jb" accessType="initializeOnly" type="SFColor"></field>
<field name="Kb" accessType="initializeOnly" type="SFColor"></field>
<field name="Lb" accessType="initializeOnly" type="SFInt32" value="-1"></field>
<field name="H" accessType="initializeOnly" type="SFBool" value="true"></field>
<field name="ci" accessType="initializeOnly" type="SFVec2f" value="1 1"></field>
<field name="diffuseColor" accessType="initializeOnly" type="SFColor" value="1 1 1"></field>
<field name="di" accessType="initializeOnly" type="SFBool"></field>
<field name="choice" accessType="initializeOnly" type="SFInt32"></field>
<field name="ha" accessType="initializeOnly" type="SFVec3f"></field>
<field name="coord" accessType="initializeOnly" type="MFVec3f"></field>
<field name="texCoord" accessType="initializeOnly" type="MFVec2f"></field>
<field name="coordIndex" accessType="initializeOnly" type="MFInt32"></field>
<field name="color" accessType="initializeOnly" type="MFColor"></field>
</ProtoInterface>
<ProtoBody><Switch DEF="ei_1" whichChoice="-1"><IS><connect nodeField="whichChoice" protoField="choice"></connect>
</IS>
<Shape><Appearance DEF="fi_1"><Material><IS><connect nodeField="diffuseColor" protoField="diffuseColor"></connect>
<connect nodeField="specularColor" protoField="specularColor"></connect>
<connect nodeField="emissiveColor" protoField="emissiveColor"></connect>
<connect nodeField="shininess" protoField="shininess"></connect>
<connect nodeField="transparency" protoField="transparency"></connect>
</IS>
</Material>
<ImageTexture containerField="texture" DEF="gi_1"><IS><connect nodeField="url" protoField="url"></connect>
</IS>
</ImageTexture>
<TextureTransform DEF="hi_1"><IS><connect nodeField="translation" protoField="u"></connect>
<connect nodeField="rotation" protoField="s"></connect>
<connect nodeField="scale" protoField="t"></connect>
<connect nodeField="center" protoField="q"></connect>
</IS>
</TextureTransform>
</Appearance>
<IndexedFaceSet containerField="geometry" DEF="ii_1" solid="false" creaseAngle="3"><IS><connect nodeField="coordIndex" protoField="coordIndex"></connect>
</IS>
<TextureCoordinate containerField="texCoord" DEF="ki_1"><IS><connect nodeField="point" protoField="texCoord"></connect>
</IS>
</TextureCoordinate>
<Coordinate containerField="coord" DEF="ji_1"><IS><connect nodeField="point" protoField="coord"></connect>
</IS>
</Coordinate>
</IndexedFaceSet>
</Shape>
<Shape><Appearance DEF="li_1"><ImageTexture containerField="texture" USE="gi_1"></ImageTexture>
<TextureTransform USE="hi_1"></TextureTransform>
</Appearance>
<IndexedFaceSet containerField="geometry" DEF="mi_1" solid="false" creaseAngle="3"><IS><connect nodeField="coordIndex" protoField="coordIndex"></connect>
</IS>
<Color DEF="oi_1"><IS><connect nodeField="color" protoField="color"></connect>
</IS>
</Color>
<TextureCoordinate containerField="texCoord" DEF="pi_1"><IS><connect nodeField="point" protoField="texCoord"></connect>
</IS>
</TextureCoordinate>
<Coordinate containerField="coord" DEF="ni_1"><IS><connect nodeField="point" protoField="coord"></connect>
</IS>
</Coordinate>
</IndexedFaceSet>
</Shape>
<Shape><Appearance USE="fi_1"></Appearance>
<IndexedFaceSet containerField="geometry" USE="mi_1"></IndexedFaceSet>
</Shape>
<Shape><Appearance USE="li_1"></Appearance>
<IndexedFaceSet containerField="geometry" USE="mi_1"></IndexedFaceSet>
</Shape>
</Switch>
<Script DEF="qi_1" directOutput="true"><field name="set_p" accessType="inputOnly" type="SFBool"></field>
<field name="set_coord" accessType="inputOnly" type="MFVec3f"></field>
<field name="set_texCoord" accessType="inputOnly" type="MFVec2f"></field>
<field name="set_hd" accessType="inputOnly" type="SFFloat"></field>
<field name="set_height" accessType="inputOnly" type="SFFloat"></field>
<field name="set_diffuseColor" accessType="inputOnly" type="SFColor"></field>
<field name="w" accessType="inputOnly" type="SFBool"></field>
<field name="set_v" accessType="inputOnly" type="SFNode"></field>
<field name="coordIndex" accessType="outputOnly" type="MFInt32"></field>
<field name="p_changed" accessType="outputOnly" type="SFBool"></field>
<field name="coord_changed" accessType="outputOnly" type="MFVec3f"></field>
<field name="texCoord_changed" accessType="outputOnly" type="MFVec2f"></field>
<field name="color_changed" accessType="outputOnly" type="MFColor"></field>
<field name="hd_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="height_changed" accessType="outputOnly" type="SFFloat"></field>
<field name="diffuseColor_changed" accessType="outputOnly" type="SFColor"></field>
<field name="v_changed" accessType="outputOnly" type="SFNode"></field>
<field name="p" accessType="initializeOnly" type="SFBool"></field>
<field name="coord" accessType="initializeOnly" type="MFVec3f"></field>
<field name="texCoord" accessType="initializeOnly" type="MFVec2f"></field>
<field name="color" accessType="initializeOnly" type="MFColor"></field>
<field name="ai" accessType="initializeOnly" type="MFInt32"></field>
<field name="H" accessType="initializeOnly" type="SFBool"></field>
<field name="Jb" accessType="initializeOnly" type="SFColor"></field>
<field name="Kb" accessType="initializeOnly" type="SFColor"></field>
<field name="Lb" accessType="initializeOnly" type="SFInt32"></field>
<field name="hd" accessType="initializeOnly" type="SFFloat"></field>
<field name="height" accessType="initializeOnly" type="SFFloat"></field>
<field name="di" accessType="initializeOnly" type="SFBool"></field>
<field name="diffuseColor" accessType="initializeOnly" type="SFColor"></field>
<field name="ma" accessType="initializeOnly" type="SFNode"><Switch USE="ei_1"></Switch>
</field>
<field name="ic" accessType="initializeOnly" type="SFNode"><Appearance USE="fi_1"></Appearance>
</field>
<field name="jc" accessType="initializeOnly" type="SFNode"><Appearance USE="li_1"></Appearance>
</field>
<field name="ci" accessType="initializeOnly" type="SFVec2f"></field>
<IS><connect nodeField="set_p" protoField="set_p"></connect>
<connect nodeField="set_coord" protoField="set_coord"></connect>
<connect nodeField="set_texCoord" protoField="set_texCoord"></connect>
<connect nodeField="set_hd" protoField="set_hd"></connect>
<connect nodeField="set_height" protoField="set_height"></connect>
<connect nodeField="set_diffuseColor" protoField="set_diffuseColor"></connect>
<connect nodeField="w" protoField="w"></connect>
<connect nodeField="set_v" protoField="set_v"></connect>
<connect nodeField="p_changed" protoField="p_changed"></connect>
<connect nodeField="coord_changed" protoField="coord_changed"></connect>
<connect nodeField="texCoord_changed" protoField="texCoord_changed"></connect>
<connect nodeField="hd_changed" protoField="hd_changed"></connect>
<connect nodeField="height_changed" protoField="height_changed"></connect>
<connect nodeField="diffuseColor_changed" protoField="diffuseColor_changed"></connect>
<connect nodeField="v_changed" protoField="v_changed"></connect>
<connect nodeField="p" protoField="p"></connect>
<connect nodeField="ai" protoField="ai"></connect>
<connect nodeField="H" protoField="H"></connect>
<connect nodeField="Jb" protoField="Jb"></connect>
<connect nodeField="Kb" protoField="Kb"></connect>
<connect nodeField="Lb" protoField="Lb"></connect>
<connect nodeField="hd" protoField="hd"></connect>
<connect nodeField="height" protoField="height"></connect>
<connect nodeField="di" protoField="di"></connect>
<connect nodeField="diffuseColor" protoField="diffuseColor"></connect>
<connect nodeField="ci" protoField="ci"></connect>
</IS>
<![CDATA[javascript:
function ld(){
ri=-0.5*hd/72;
si=-ri;
ti=-0.5*height/72;
ui=-ti;
if(di==FALSE){
vi=(si-ri)/ai[0];
wi=(ui-ti)/ai[1];
xi=1/ai[0];
yi=1/ai[1];
coord.length=(ai[0]+1)*(ai[1]+1);
texCoord.length=coord.length;
for(J=0;J<=ai[1];J++){
for(qc=0;qc<=ai[0];qc++){
index=J*(ai[0]+1)+qc;
if(qc==ai[0]){
coord[index].x=si;
}else{
coord[index].x=ri+qc*vi;
}
if(J==ai[1]){
coord[index].y=ui;
}else{
coord[index].y=ti+J*wi;
}
coord[index].z=0;
if(qc==ai[0]){
texCoord[index].x=.5+.5*ci[0];
}else{
texCoord[index].x=.5-.5*ci[0]+qc*xi*ci[0];
}
if(J==ai[1]){
texCoord[index].y=.5+.5*ci[1];
}else{
texCoord[index].y=.5-.5*ci[1]+J*yi*ci[1];
}
}
}
index=0;
for(J=0;J<ai[1];J++){
for(qc=0;qc<ai[0];qc++){
coordIndex[index++]=J*(ai[0]+1)+qc;
coordIndex[index++]=J*(ai[0]+1)+qc+1;
coordIndex[index++]=(J+1)*(ai[0]+1)+qc+1;
coordIndex[index++]=(J+1)*(ai[0]+1)+qc;
coordIndex[index++]=-1;
}
}
}else{
coord.length=1+(ai[0])*(ai[1]);
texCoord.length=1+(ai[0])*(ai[1]);
index=0;
coord[index].x=0;
coord[index].y=0;
coord[index].z=0;
texCoord[index].x=.5;
texCoord[index].y=.5;
zi=new MFVec3f();
zi.length=ai[0];
angle=0;
Ai=2*Math.PI/ai[0];
for(J=0;J<ai[0];J++){
zi[J].x=Math.cos(angle);
zi[J].y=Math.sin(angle);
zi[J].z=0;
angle+=Ai;
}
for(J=0;J<ai[1];J++){
Bi=0.5*hd*(J+1)/(ai[1]*72);
Ci=0.5*height*(J+1)/(ai[1]*72);
Di=0.5*(J+1)/ai[1];
for(qc=0;qc<ai[0];qc++){
index=1+J*(ai[0])+qc;
coord[index].x=zi[qc].x*Bi;
coord[index].y=zi[qc].y*Ci;
texCoord[index].x=0.5+zi[qc].x*Di*ci[0];
texCoord[index].y=0.5+zi[qc].y*Di*ci[1];
coord[index].z=0;
}
}
index=0;
for(J=0;J<ai[1];J++){
if(J==0){
for(qc=0;qc<ai[0];qc++){
coordIndex[index++]=0;
coordIndex[index++]=1+(J*ai[0])+qc;
Ei=(qc+1)%ai[0];
coordIndex[index++]=1+(J*ai[0])+Ei;
coordIndex[index++]=-1;
}
}else{
for(qc=0;qc<ai[0];qc++){
coordIndex[index++]=1+((J-1)*ai[0])+qc;
Ei=(qc+1)%ai[0];
coordIndex[index++]=1+(J*ai[0])+qc;
coordIndex[index++]=1+(J*ai[0])+Ei;
coordIndex[index++]=1+((J-1)*ai[0])+Ei;
coordIndex[index++]=-1;
}
}
}
}
hd_changed=hd;
height_changed=height;
coord_changed=coord;
texCoord_changed=texCoord;
}
function gd(){
if((H==TRUE)&&(Lb==-1))return;
ri=-0.5*hd/72;
si=-ri;
ti=-0.5*height/72;
ui=-ti;
for(id=0;id<coord.length;id++){
if(Lb==0){
fraction=(coord[id].x-ri)/(si-ri);
}else if(Lb==1){
fraction=(coord[id].y-ti)/(ui-ti);
}else if((Lb==2)&&(di==TRUE)){
if(id==0){
fraction=0;
Fi=1;
}else{
fraction=Fi/ai[1];
if((id%ai[0])==0){
Fi++;
}
}
}
jd=new SFColor(0,0,0);
if(Lb==-1){
jd=diffuseColor;
}else{
jd.r=Kb.r*(1-fraction)+
Jb.r*fraction;
jd.g=Kb.g*(1-fraction)+
Jb.g*fraction;
jd.b=Kb.b*(1-fraction)+
Jb.b*fraction;
}
color[id]=jd;
}
color_changed=color;
}
function set_p(n){
if(n==TRUE){
if(H==TRUE){
if(Lb>=0){
ma.whichChoice=2;
}else{
ma.whichChoice=0;
}
}else{
if(Lb>=0){
ma.whichChoice=3;
}else{
ma.whichChoice=1;
}
}
}else{
ma.whichChoice=-1;
}
p=n;
p_changed=n;
}
function initialize(){
ld();
v_changed=ic.texture_changed;
diffuseColor_changed=diffuseColor;
gd();
set_p(p);
}
function set_coord(n){
coord_changed=n;
}
function set_texCoord(n){
texCoord_changed=n;
}
function set_v(n){
ic.set_texture=n;
jc.set_texture=n;
v_changed=n;
}
function set_hd(n){
hd=n;
ld();
}
function set_height(n){
height=n;
ld();
}
function set_diffuseColor(n){
diffuseColor=n;
diffuseColor_changed=n;
gd();
}
function w(){
}]]></Script>
<ROUTE fromNode="qi_1" fromField="coord_changed" toNode="ji_1" toField="set_point"></ROUTE>
<ROUTE fromNode="qi_1" fromField="texCoord_changed" toNode="ki_1" toField="set_point"></ROUTE>
<ROUTE fromNode="qi_1" fromField="coordIndex" toNode="ii_1" toField="set_coordIndex"></ROUTE>
<ROUTE fromNode="qi_1" fromField="coord_changed" toNode="ni_1" toField="set_point"></ROUTE>
<ROUTE fromNode="qi_1" fromField="color_changed" toNode="oi_1" toField="set_color"></ROUTE>
<ROUTE fromNode="qi_1" fromField="texCoord_changed" toNode="pi_1" toField="set_point"></ROUTE>
<ROUTE fromNode="qi_1" fromField="coordIndex" toNode="mi_1" toField="set_coordIndex"></ROUTE>
<ROUTE fromNode="qi_1" fromField="coordIndex" toNode="mi_1" toField="set_colorIndex"></ROUTE>
</ProtoBody>
</ProtoDeclare>
<WorldInfo info="&quot;Published by Cosmo PageFX V1.0&quot;"><MetadataSet containerField="metadata" name="Titania" DEF="Titania" reference="http://titania.create3000.de"><MetadataSet name="NavigationInfo" DEF="NavigationInfo" reference="http://titania.create3000.de" containerField="value"><MetadataString name="type" DEF="type" reference="http://titania.create3000.de" value="&quot;EXAMINE&quot;" containerField="value"></MetadataString>
</MetadataSet>
<MetadataSet name="Viewpoint" DEF="Viewpoint" reference="http://titania.create3000.de"><MetadataDouble name="position" DEF="position" reference="http://titania.create3000.de" value="0 0 5" containerField="value"></MetadataDouble>
<MetadataDouble name="orientation" DEF="orientation" reference="http://titania.create3000.de" value="0 0 1 0"></MetadataDouble>
<MetadataDouble name="centerOfRotation" DEF="centerOfRotation" reference="http://titania.create3000.de" value="0 0 0"></MetadataDouble>
</MetadataSet>
</MetadataSet>
</WorldInfo>
<Group DEF="Gi"><ProtoInstance name="f" DEF="Hi"></ProtoInstance>
<Viewpoint DEF="Ii" description="Home" position="0 0 5" fieldOfView="0.3519"></Viewpoint>
<NavigationInfo DEF="Ji" type="&quot;NONE&quot;"></NavigationInfo>
<Background DEF="Ki" skyColor="0.749 0.749 0.749"></Background>
<ProtoInstance name="o" DEF="Li"><fieldValue name="G" value="true"></fieldValue>
<fieldValue name="children"><Transform DEF="Mi" translation="-0.951 0.2225 2.99" rotation="-0.145494 -0.989359 0 0.7418"><Transform DEF="Ni"><ProtoInstance name="K" DEF="Oi"><fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="Mi"></Transform>
<Transform USE="Ni"></Transform>
</fieldValue>
<fieldValue name="L" value="1.528"></fieldValue>
<fieldValue name="attenuation" value="0.001 0.6545 0"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="Pi" translation="-1.271 -0.1785 0.68" rotation="1 0 0 3.166" center="0 0 1.94e-8"><ProtoInstance name="Q" DEF="Qi"><fieldValue name="center" value="0 0 1.94e-8"></fieldValue>
<fieldValue name="U"><ProtoInstance name="ga" DEF="Ri"><fieldValue name="url" value="&quot;stripe.png&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="1 0 1"></fieldValue>
<fieldValue name="emissiveColor" value="0 0 0"></fieldValue>
<fieldValue name="specularColor" value="0.04 0.16 0.28"></fieldValue>
<fieldValue name="shininess" value="0.02"></fieldValue>
<fieldValue name="s" value="1.047"></fieldValue>
<fieldValue name="t" value="2 2"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="Pi"></Transform>
<ProtoInstance USE="Qi"></ProtoInstance>
<Transform DEF="Si" scale="0.5154 0.6149 0.5154"><ProtoInstance name="na" DEF="Ti"><fieldValue name="oa" value="1"></fieldValue>
</ProtoInstance>
<ProtoInstance USE="Ri"></ProtoInstance>
<ProtoInstance name="ra" DEF="Ui"><fieldValue name="cycleInterval" value="3"></fieldValue>
<fieldValue name="Da" value="false"></fieldValue>
<fieldValue name="Ia" value="true"></fieldValue>
</ProtoInstance>
<ProtoInstance name="gb" DEF="Vi"><fieldValue name="U"><ProtoInstance USE="Ri"></ProtoInstance>
</fieldValue>
<fieldValue name="direction" value="1"></fieldValue>
</ProtoInstance>
<ProtoInstance name="nb" DEF="Wi"></ProtoInstance>
<ProtoInstance name="ra" DEF="Xi"><fieldValue name="Da" value="false"></fieldValue>
<fieldValue name="Ia" value="true"></fieldValue>
</ProtoInstance>
</Transform>
</fieldValue>
<fieldValue name="geometry"><Cone DEF="_1" height="1" bottomRadius="0.5"></Cone>
</fieldValue>
<fieldValue name="ha" value="0 0 0.25"></fieldValue>
</ProtoInstance>
</fieldValue>
<fieldValue name="children"><Transform USE="Si"></Transform>
</fieldValue>
</ProtoInstance>
</Transform>
<Transform DEF="Yi" translation="-0.6985 -0.1547 0.7377" rotation="0 0 1 0.3252" center="0 0 -1.282e-8"><ProtoInstance name="Q" DEF="Zi"><fieldValue name="center" value="0 0 -1.282e-8"></fieldValue>
<fieldValue name="U"><ProtoInstance name="ga" DEF="aj"><fieldValue name="url" value="&quot;globe.jpg&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="0.6 0.6 0.6"></fieldValue>
<fieldValue name="emissiveColor" value="0.2 0.2 0.12"></fieldValue>
<fieldValue name="specularColor" value="0.8 0.8 0.8"></fieldValue>
<fieldValue name="shininess" value="0.15"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="Yi"></Transform>
<ProtoInstance USE="Zi"></ProtoInstance>
<Transform DEF="bj" scale="0.4064 0.4064 0.4064"><ProtoInstance USE="aj"></ProtoInstance>
<ProtoInstance name="ra" DEF="cj"><fieldValue name="cycleInterval" value="6"></fieldValue>
<fieldValue name="Da" value="false"></fieldValue>
<fieldValue name="Ia" value="true"></fieldValue>
</ProtoInstance>
</Transform>
</fieldValue>
<fieldValue name="geometry"><Sphere DEF="_2" radius="0.5"></Sphere>
</fieldValue>
</ProtoInstance>
</fieldValue>
<fieldValue name="children"><Transform USE="bj"></Transform>
</fieldValue>
<fieldValue name="W" value="1"></fieldValue>
</ProtoInstance>
</Transform>
<Transform DEF="dj" translation="-0.7941 -0.386 0.7019" center="0 0 -5.221e-9"><Transform DEF="ej" scale="0.0876 0.3115 0.0876"><ProtoInstance name="ga" DEF="fj"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="0.8 0 0"></fieldValue>
<fieldValue name="emissiveColor" value="0.15 0 0"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="dj"></Transform>
<Transform USE="ej"></Transform>
</fieldValue>
<fieldValue name="geometry"><Cylinder DEF="_3" height="1" radius="0.5"></Cylinder>
</fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="gj" translation="-0.5524 -0.4097 0.6894" rotation="0 0 1 0.7457" center="0 0 -5.221e-9"><Transform DEF="hj" scale="0.0876 0.3115 0.0876"><ProtoInstance name="ga" DEF="ij"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="1 0 0"></fieldValue>
<fieldValue name="emissiveColor" value="0.2 0 0"></fieldValue>
<fieldValue name="specularColor" value="0 0 0"></fieldValue>
<fieldValue name="shininess" value="0"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="gj"></Transform>
<Transform USE="hj"></Transform>
</fieldValue>
<fieldValue name="geometry"><Cylinder DEF="_4" height="1" radius="0.5"></Cylinder>
</fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="jj" translation="-0.4473 -0.3719 0.6801"><Transform DEF="kj" scale="0.9219 0.9219 0.9219"><ProtoInstance name="o" DEF="lj"><fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="jj"></Transform>
<Transform USE="kj"></Transform>
</fieldValue>
<fieldValue name="children"><Transform DEF="mj" translation="0 0 -0.005423"><Transform DEF="nj" scale="0.96 0.96 1"><ProtoInstance name="zb" DEF="oj"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="emissiveColor" value="0.01 0.18 0.1"></fieldValue>
<fieldValue name="specularColor" value="0 0 0"></fieldValue>
<fieldValue name="shininess" value="0"></fieldValue>
<fieldValue name="Cb" value="0.9888"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="lj"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="mj"></Transform>
<Transform USE="nj"></Transform>
</fieldValue>
<fieldValue name="Fb" value="true"></fieldValue>
<fieldValue name="Gb" value="false"></fieldValue>
<fieldValue name="Hb" value="0.01 0"></fieldValue>
<fieldValue name="Ib" value="0.79 0.6"></fieldValue>
<fieldValue name="Mb"><ProtoInstance name="md" DEF="pj"><fieldValue name="coord" value="0.37 0 0 0.38 0 0 0.62 0.51 0 0.62 0.11 0 0.61 0.07 0 0.6 0.04 0 0.58 0.02 0 0.55 0.01 0 0.53 0.01 0 0.53 0 0 0.79 0 0 0.79 0.01 0 0.76 0.01 0 0.73 0.02 0 0.71 0.04 0 0.7 0.06 0 0.7 0.54 0 0.71 0.57 0 0.73 0.59 0 0.79 0.59 0 0.79 0.6 0 0.62 0.6 0 0.39 0.13 0 0.18 0.6 0 0.01 0.6 0 0.01 0.59 0 0.04 0.59 0 0.06 0.58 0 0.09 0.56 0 0.09 0.53 0 0.1 0.49 0 0.1 0.11 0 0.09 0.07 0 0.08 0.04 0 0.06 0.02 0 0.03 0.01 0 0.01 0.01 0 0.01 0 0 0.23 0 0 0.23 0.01 0 0.2 0.01 0 0.17 0.02 0 0.15 0.04 0 0.14 0.06 0 0.14 0.51 0"></fieldValue>
<fieldValue name="coordIndex" value="30 28 29 -1 38 36 37 -1 36 38 35 -1 35 38 34 -1 34 38 33 -1 33 38 40 -1 33 40 41 -1 33 41 32 -1 32 41 42 -1 32 42 31 -1 31 42 43 -1 31 43 30 -1 40 38 39 -1 10 8 9 -1 8 10 7 -1 7 10 6 -1 6 10 5 -1 5 10 13 -1 5 13 4 -1 4 13 3 -1 3 13 14 -1 3 14 15 -1 3 15 2 -1 2 15 21 -1 13 10 12 -1 12 10 11 -1 21 18 20 -1 18 21 17 -1 17 21 16 -1 16 21 15 -1 20 18 19 -1 26 24 25 -1 24 26 23 -1 23 26 27 -1 23 27 28 -1 23 28 30 -1 23 30 44 -1 44 30 43 -1 23 44 0 -1 23 0 22 -1 22 0 1 -1 22 1 2 -1 22 2 21 -1"></fieldValue>
<fieldValue name="mc" value="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 -1"></fieldValue>
</ProtoInstance>
</fieldValue>
<fieldValue name="Ob" value="0.04"></fieldValue>
<fieldValue name="Pb" value="0.1389"></fieldValue>
<fieldValue name="creaseAngle" value="0"></fieldValue>
<fieldValue name="diffuseColor" value="0.03 0.49 0.22"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
</fieldValue>
<fieldValue name="A"><ProtoInstance USE="oj"></ProtoInstance>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="qj"><fieldValue name="cycleInterval" value="4"></fieldValue>
<fieldValue name="Ca" value="3"></fieldValue>
<fieldValue name="Da" value="false"></fieldValue>
</ProtoInstance>
<ProtoInstance name="nd" DEF="rj"><fieldValue name="U"><ProtoInstance USE="lj"></ProtoInstance>
</fieldValue>
<fieldValue name="hb" value="true"></fieldValue>
<fieldValue name="ib" value="true"></fieldValue>
<fieldValue name="pd" value="true"></fieldValue>
<fieldValue name="qd" value="true"></fieldValue>
<fieldValue name="rd" value="true"></fieldValue>
<fieldValue name="sd" value="true"></fieldValue>
<fieldValue name="td" value="true"></fieldValue>
<fieldValue name="vd" value="true"></fieldValue>
<fieldValue name="wd" value="true"></fieldValue>
<fieldValue name="xd" value="true"></fieldValue>
<fieldValue name="diffuseColor" value="0.76 1 0.76"></fieldValue>
<fieldValue name="emissiveColor" value="0.04 0 0.06"></fieldValue>
<fieldValue name="specularColor" value="0 0 0"></fieldValue>
<fieldValue name="shininess" value="0"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="sj" translation="1.264 -0.3495 0.7311" center="1.639e-7 0.2337 -0.007482"><Transform DEF="tj"><ProtoInstance name="je" DEF="uj"><fieldValue name="oa" value="1"></fieldValue>
</ProtoInstance>
<ProtoInstance name="na" DEF="vj"><fieldValue name="oa" value="1"></fieldValue>
</ProtoInstance>
<ProtoInstance name="o" DEF="wj"><fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="sj"></Transform>
<Transform USE="tj"></Transform>
</fieldValue>
<fieldValue name="children"><Transform DEF="xj" translation="-0.3425 0 -0.004982"><Transform DEF="yj" scale="0.72 0.72 1"><ProtoInstance name="zb" DEF="zj"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="emissiveColor" value="0.1 0.02 0"></fieldValue>
<fieldValue name="specularColor" value="0.1 0.1 0.1"></fieldValue>
<fieldValue name="shininess" value="0.08"></fieldValue>
<fieldValue name="Cb" value="0.4848"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="wj"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="xj"></Transform>
<Transform USE="yj"></Transform>
</fieldValue>
<fieldValue name="Fb" value="true"></fieldValue>
<fieldValue name="Gb" value="false"></fieldValue>
<fieldValue name="Hb" value="0.03214 -0.006429"></fieldValue>
<fieldValue name="Ib" value="0.9193 0.6557"></fieldValue>
<fieldValue name="Mb"><ProtoInstance name="md" DEF="Aj"><fieldValue name="coord" value="0.3793 0.07071 0 0.1221 0.07071 0 0.1479 0.1157 0 0.1736 0.1479 0 0.2186 0.1993 0 0.2636 0.2443 0 0.2957 0.2893 0 0.3471 0.3536 0 0.3664 0.4114 0 0.3793 0.4757 0 0.3664 0.54 0 0.3343 0.6043 0 0.315 0.63 0 0.2507 0.6557 0 0.2121 0.6557 0 0.1479 0.6493 0 0.09643 0.6107 0 0.05786 0.5464 0 0.045 0.4629 0 0.1093 0.4564 0 0.1157 0.5143 0 0.135 0.5593 0 0.1671 0.585 0 0.2121 0.5914 0 0.2507 0.585 0 0.2829 0.5593 0 0.3021 0.5271 0 0.315 0.4821 0 0.3021 0.4307 0 0.2829 0.3857 0 0.2636 0.3536 0 0.2379 0.3214 0 0.2057 0.2829 0 0.1671 0.2379 0 0.09643 0.1671 0 0.05786 0.1029 0 0.03857 0.05143 0 0.03214 0 0 0.3793 0 0"></fieldValue>
<fieldValue name="coordIndex" value="38 36 37 -1 36 38 1 -1 36 1 35 -1 35 1 34 -1 1 38 0 -1 1 33 34 -1 33 1 2 -1 33 2 3 -1 33 3 32 -1 32 3 4 -1 32 4 31 -1 31 4 5 -1 31 5 30 -1 30 5 6 -1 30 6 29 -1 29 6 28 -1 28 6 7 -1 28 7 27 -1 27 7 12 -1 12 7 11 -1 11 7 10 -1 10 7 8 -1 10 8 9 -1 19 17 18 -1 17 19 16 -1 16 19 20 -1 16 20 15 -1 15 20 21 -1 15 21 22 -1 15 22 14 -1 14 22 23 -1 14 23 24 -1 14 24 13 -1 13 24 25 -1 13 25 12 -1 12 25 26 -1 12 26 27 -1"></fieldValue>
<fieldValue name="mc" value="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 -1"></fieldValue>
</ProtoInstance>
</fieldValue>
<fieldValue name="Ob" value="0.04"></fieldValue>
<fieldValue name="Pb" value="0.1389"></fieldValue>
<fieldValue name="creaseAngle" value="0"></fieldValue>
<fieldValue name="diffuseColor" value="0.9 0.15 0"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="Bj" translation="-0.07406 0 -0.009982"><Transform DEF="Cj" scale="0.72 0.72 1"><ProtoInstance name="zb" DEF="Dj"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="emissiveColor" value="0.1 0.02 0"></fieldValue>
<fieldValue name="specularColor" value="0.1 0.1 0.1"></fieldValue>
<fieldValue name="shininess" value="0.08"></fieldValue>
<fieldValue name="Cb" value="0.4848"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="wj"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="Bj"></Transform>
<Transform USE="Cj"></Transform>
</fieldValue>
<fieldValue name="Fb" value="true"></fieldValue>
<fieldValue name="Gb" value="false"></fieldValue>
<fieldValue name="Hb" value="-0.3407 -0.006429"></fieldValue>
<fieldValue name="Ib" value="0.5464 0.6557"></fieldValue>
<fieldValue name="Mb"><ProtoInstance name="md" DEF="Ej"><fieldValue name="coord" value="0.06429 0 0 0.135 0 0 0.135 0.09 0 0.06429 0.09 0"></fieldValue>
<fieldValue name="coordIndex" value="1 3 0 -1 3 1 2 -1"></fieldValue>
<fieldValue name="mc" value="0 1 2 3 -1"></fieldValue>
</ProtoInstance>
</fieldValue>
<fieldValue name="Ob" value="0.04"></fieldValue>
<fieldValue name="Pb" value="0.1389"></fieldValue>
<fieldValue name="creaseAngle" value="0"></fieldValue>
<fieldValue name="diffuseColor" value="0.9 0.15 0"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="Fj" translation="0.04629 0 -0.005"><Transform DEF="Gj" scale="0.72 0.72 1"><ProtoInstance name="zb" DEF="Hj"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="emissiveColor" value="0.1 0.02 0"></fieldValue>
<fieldValue name="specularColor" value="0.1 0.1 0.1"></fieldValue>
<fieldValue name="shininess" value="0.08"></fieldValue>
<fieldValue name="Cb" value="0.4848"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="wj"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="Fj"></Transform>
<Transform USE="Gj"></Transform>
</fieldValue>
<fieldValue name="Fb" value="true"></fieldValue>
<fieldValue name="Gb" value="false"></fieldValue>
<fieldValue name="Hb" value="-0.5079 -0.006429"></fieldValue>
<fieldValue name="Ib" value="0.3793 0.6557"></fieldValue>
<fieldValue name="Mb"><ProtoInstance name="md" DEF="Ij"><fieldValue name="coord" value="0.09643 0.3986 0 0.1029 0.4564 0 0.1093 0.5079 0 0.1221 0.54 0 0.1414 0.5657 0 0.18 0.5914 0 0.225 0.5914 0 0.2636 0.5657 0 0.2829 0.54 0 0.2957 0.5079 0 0.3021 0.4629 0 0.3086 0.3986 0 0.315 0.3279 0 0.3086 0.2571 0 0.3021 0.1929 0 0.2957 0.1479 0 0.2829 0.1157 0 0.2636 0.09 0 0.225 0.06429 0 0.2057 0.05786 0 0.18 0.06429 0 0.1414 0.09 0 0.1221 0.1157 0 0.1093 0.1479 0 0.1029 0.1929 0 0.09643 0.2571 0 0.03214 0.2443 0 0.03857 0.1736 0 0.05786 0.1157 0 0.07714 0.07071 0 0.1029 0.03857 0 0.135 0.01286 0 0.1671 0 0 0.1993 -0.006429 0 0.2443 0 0 0.2764 0.01929 0 0.3086 0.045 0 0.3343 0.08357 0 0.3536 0.1286 0 0.3664 0.1864 0 0.3729 0.2507 0 0.3793 0.3279 0 0.3729 0.4114 0 0.36 0.4821 0 0.3471 0.54 0 0.3214 0.5914 0 0.3021 0.6171 0 0.27 0.6429 0 0.2379 0.6557 0 0.1607 0.6557 0 0.1286 0.6364 0 0.09643 0.6107 0 0.07071 0.5721 0 0.05143 0.5271 0 0.03857 0.4693 0 0.03214 0.405 0"></fieldValue>
<fieldValue name="coordIndex" value="30 25 29 -1 25 30 24 -1 24 30 23 -1 23 30 31 -1 23 31 22 -1 22 31 21 -1 21 31 32 -1 21 32 20 -1 20 32 33 -1 20 33 19 -1 19 33 34 -1 19 34 18 -1 18 34 17 -1 17 34 35 -1 17 35 16 -1 16 35 36 -1 16 36 15 -1 15 36 14 -1 14 36 13 -1 13 36 37 -1 13 37 12 -1 12 37 45 -1 45 37 44 -1 44 37 38 -1 44 38 43 -1 43 38 39 -1 43 39 42 -1 42 39 40 -1 42 40 41 -1 27 55 26 -1 55 27 54 -1 54 27 28 -1 54 28 53 -1 53 28 52 -1 52 28 29 -1 52 29 51 -1 51 29 25 -1 51 25 0 -1 51 0 1 -1 51 1 2 -1 51 2 50 -1 50 2 3 -1 50 3 4 -1 50 4 49 -1 49 4 5 -1 49 5 48 -1 48 5 6 -1 48 6 7 -1 48 7 47 -1 47 7 8 -1 47 8 46 -1 46 8 9 -1 46 9 10 -1 46 10 11 -1 46 11 45 -1 45 11 12 -1"></fieldValue>
<fieldValue name="mc" value="0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 -1 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 -1"></fieldValue>
</ProtoInstance>
</fieldValue>
<fieldValue name="Ob" value="0.04"></fieldValue>
<fieldValue name="Pb" value="0.1389"></fieldValue>
<fieldValue name="creaseAngle" value="0"></fieldValue>
<fieldValue name="diffuseColor" value="0.9 0.15 0"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
</fieldValue>
<fieldValue name="A"><ProtoInstance USE="zj"></ProtoInstance>
<ProtoInstance USE="Dj"></ProtoInstance>
<ProtoInstance USE="Hj"></ProtoInstance>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="me" DEF="Jj"><fieldValue name="re"><Transform USE="sj"></Transform>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="xe" DEF="Kj"><fieldValue name="ye"><ProtoInstance USE="Jj"></ProtoInstance>
</fieldValue>
<fieldValue name="ze"><ProtoInstance USE="Jj"></ProtoInstance>
</fieldValue>
<fieldValue name="Ae"><ProtoInstance USE="wj"></ProtoInstance>
</fieldValue>
<fieldValue name="Ce" value="86"></fieldValue>
</ProtoInstance>
<ProtoInstance name="nb" DEF="Lj"></ProtoInstance>
<ProtoInstance name="ra" DEF="Mj"><fieldValue name="Da" value="false"></fieldValue>
<fieldValue name="Fa" value="0.5"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Ge" DEF="Nj"><fieldValue name="center" value="1.639e-7 0.2337 -0.007482"></fieldValue>
<fieldValue name="U"><ProtoInstance USE="wj"></ProtoInstance>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="xe" DEF="Oj"><fieldValue name="ye"><ProtoInstance USE="Nj"></ProtoInstance>
</fieldValue>
<fieldValue name="ze"><ProtoInstance USE="Mj"></ProtoInstance>
</fieldValue>
<fieldValue name="Ae"><ProtoInstance USE="wj"></ProtoInstance>
</fieldValue>
<fieldValue name="Ce" value="90"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="Pj" translation="0.3736 -0.7009 0.7521" rotation="1 0 0 3.13" center="0.253 0.2677 0"><ProtoInstance name="hf" DEF="Qj"><fieldValue name="center" value="0.253 0.2677 0"></fieldValue>
<fieldValue name="children"><Transform DEF="Rj" scale="0.1293 0.7015 0.1824"><ProtoInstance name="ga" DEF="Sj"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="0.8 0.8 0"></fieldValue>
<fieldValue name="emissiveColor" value="0.15 0.15 0"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="Pj"></Transform>
<ProtoInstance USE="Qj"></ProtoInstance>
<Transform USE="Rj"></Transform>
</fieldValue>
<fieldValue name="geometry"><Cone DEF="_5" height="1" bottomRadius="0.5"></Cone>
</fieldValue>
<fieldValue name="ha" value="0 0 0.25"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="Tj"><fieldValue name="Da" value="false"></fieldValue>
</ProtoInstance>
</Transform>
</fieldValue>
<fieldValue name="U"><ProtoInstance USE="Sj"></ProtoInstance>
</fieldValue>
<fieldValue name="kf" value="17"></fieldValue>
<fieldValue name="lf" value="0.6"></fieldValue>
</ProtoInstance>
</Transform>
<Transform DEF="Uj" translation="0.5037 -0.3512 0.749" rotation="0.767059 -0.641566 0.0036798 3.133" scaleOrientation="0.1555 -0.1734 -0.972498 0.7118" center="0 0 -2.608e-8"><ProtoInstance name="hf" DEF="Vj"><fieldValue name="center" value="0 0 -2.608e-8"></fieldValue>
<fieldValue name="children"><Transform DEF="Wj" scale="0.1583 0.4654 0.1583"><ProtoInstance name="ga" DEF="Xj"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="0.8 0.8 0"></fieldValue>
<fieldValue name="emissiveColor" value="0.15 0.15 0"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="Uj"></Transform>
<ProtoInstance USE="Vj"></ProtoInstance>
<Transform USE="Wj"></Transform>
</fieldValue>
<fieldValue name="geometry"><Cone DEF="_6" height="1" bottomRadius="0.5"></Cone>
</fieldValue>
<fieldValue name="ha" value="0 0 0.25"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="Yj"><fieldValue name="Da" value="false"></fieldValue>
</ProtoInstance>
</Transform>
</fieldValue>
<fieldValue name="U"><ProtoInstance USE="Xj"></ProtoInstance>
</fieldValue>
<fieldValue name="kf" value="4"></fieldValue>
<fieldValue name="lf" value="0.5"></fieldValue>
</ProtoInstance>
</Transform>
<Transform DEF="Zj" translation="-0.1469 -0.05878 1.385" rotation="0.97098 -0.144597 -0.190496 4.532" center="0 0 1.49e-8"><Transform DEF="ak"><ProtoInstance name="yf" DEF="bk"><fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="Zj"></Transform>
<Transform USE="ak"></Transform>
</fieldValue>
<fieldValue name="point" value="-0.7965 -0.8007 0 -0.7965 0 0 -0.7965 0.8007 0 -0.4399 1.45 0 0 1.45 0 0.4399 1.45 0 0.7965 0.8007 0 0.7965 0 0 0.7965 -0.8007 0 0.4399 -1.45 0 0 -1.45 0 -0.4399 -1.45 0"></fieldValue>
<fieldValue name="zf" value="1 0 2 1 0 2 1 0 2 1 0 2"></fieldValue>
<fieldValue name="Sd" value="0 0.25 0.5 0.75 1"></fieldValue>
<fieldValue name="Af" value="0 0 0.3311 0.263 0.5893 0.5 0.7889 0.72 1 1 0 0 0.2111 0.28 0.4107 0.5 0.6689 0.737 1 1 0 0 0.3311 0.263 0.5893 0.5 0.7889 0.72 1 1 0 0 0.2111 0.28 0.4107 0.5 0.6689 0.737 1 1"></fieldValue>
<fieldValue name="Bf" value="0 5 10 15"></fieldValue>
<fieldValue name="Cf" value="true"></fieldValue>
<fieldValue name="scale" value="1.593 2.9 1"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="ck" translation="0.9488 0.05581 4.768e-7" rotation="0 0 1 0.1762" center="-1.063 -0.7111 -0.02255"><ProtoInstance name="Q" DEF="dk"><fieldValue name="center" value="-1.063 -0.7111 -0.02255"></fieldValue>
<fieldValue name="U"><ProtoInstance name="o" DEF="ek"><fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="ck"></Transform>
<ProtoInstance USE="dk"></ProtoInstance>
<ProtoInstance name="Q" DEF="rk"><fieldValue name="center" value="-1.063 -0.7111 -0.02255"></fieldValue>
<fieldValue name="U"><ProtoInstance USE="ek"></ProtoInstance>
</fieldValue>
<fieldValue name="children"><Transform DEF="sk"><ProtoInstance USE="ek"></ProtoInstance>
<ProtoInstance name="ra" DEF="tk"><fieldValue name="cycleInterval" value="3"></fieldValue>
<fieldValue name="Da" value="false"></fieldValue>
<fieldValue name="Ia" value="true"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="uk"><fieldValue name="Da" value="false"></fieldValue>
<fieldValue name="Ia" value="true"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="vk"><fieldValue name="cycleInterval" value="12"></fieldValue>
<fieldValue name="Da" value="false"></fieldValue>
<fieldValue name="Ia" value="true"></fieldValue>
</ProtoInstance>
<ProtoInstance name="hg" DEF="wk"><fieldValue name="U"><ProtoInstance USE="ek"></ProtoInstance>
</fieldValue>
<fieldValue name="offset" value="1.063 0.7111 0.02255"></fieldValue>
<fieldValue name="center" value="-1.063 -0.7111 -0.02255"></fieldValue>
<fieldValue name="T" value="false"></fieldValue>
</ProtoInstance>
<ProtoInstance name="yg" DEF="xk"><fieldValue name="Eg"><ProtoInstance USE="bk"></ProtoInstance>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="xe" DEF="yk"><fieldValue name="ye"><ProtoInstance USE="xk"></ProtoInstance>
</fieldValue>
<fieldValue name="ze"><ProtoInstance USE="vk"></ProtoInstance>
</fieldValue>
<fieldValue name="Ae"><ProtoInstance USE="ek"></ProtoInstance>
</fieldValue>
<fieldValue name="Ce" value="103"></fieldValue>
</ProtoInstance>
</Transform>
</fieldValue>
</ProtoInstance>
<Transform USE="sk"></Transform>
</fieldValue>
<fieldValue name="children"><Transform DEF="fk" translation="-1.064 -0.7111 -0.02"><Transform DEF="gk" scale="0.02196 0.2431 0.02196"><ProtoInstance name="ga" DEF="hk"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="0.38 0.38 0.38"></fieldValue>
<fieldValue name="emissiveColor" value="0.18 0.18 0.18"></fieldValue>
<fieldValue name="specularColor" value="1 0.86 0.46"></fieldValue>
<fieldValue name="shininess" value="0.23"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="ek"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="fk"></Transform>
<Transform USE="gk"></Transform>
</fieldValue>
<fieldValue name="geometry"><Box DEF="_7" size="1 1 1"></Box>
</fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="ik" translation="-1.063 -0.7072 -0.02" rotation="0 0 1 4.711" scaleOrientation="0 0 -1 0.120801"><Transform DEF="jk" scale="0.02196 0.2431 0.02196"><ProtoInstance name="ga" DEF="kk"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="0.38 0.38 0.38"></fieldValue>
<fieldValue name="emissiveColor" value="0.18 0.18 0.18"></fieldValue>
<fieldValue name="specularColor" value="1 0.86 0.46"></fieldValue>
<fieldValue name="shininess" value="0.23"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="ek"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="ik"></Transform>
<Transform USE="jk"></Transform>
</fieldValue>
<fieldValue name="geometry"><Box DEF="_8" size="1 1 1"></Box>
</fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="lk" translation="-1.065 -0.7075 -0.02255" rotation="1 0 0 1.571"><Transform DEF="mk" scale="0.02196 0.2431 0.02196"><ProtoInstance name="ga" DEF="nk"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="0.38 0.38 0.38"></fieldValue>
<fieldValue name="emissiveColor" value="0.18 0.18 0.18"></fieldValue>
<fieldValue name="specularColor" value="1 0.86 0.46"></fieldValue>
<fieldValue name="shininess" value="0.23"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="ek"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="lk"></Transform>
<Transform USE="mk"></Transform>
</fieldValue>
<fieldValue name="geometry"><Box DEF="_9" size="1 1 1"></Box>
</fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="ok" translation="-1.063 -0.7112 -0.02"><Transform DEF="pk" scale="0.1604 0.1604 0.1604"><ProtoInstance name="ga" DEF="qk"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="diffuseColor" value="0.38 0.38 0.38"></fieldValue>
<fieldValue name="emissiveColor" value="0.18 0.18 0.18"></fieldValue>
<fieldValue name="specularColor" value="1 0.86 0.46"></fieldValue>
<fieldValue name="shininess" value="0.23"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="ek"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="ok"></Transform>
<Transform USE="pk"></Transform>
</fieldValue>
<fieldValue name="geometry"><Sphere DEF="_10" radius="0.5"></Sphere>
</fieldValue>
</ProtoInstance>
</Transform>
</Transform>
</fieldValue>
<fieldValue name="A"><ProtoInstance USE="hk"></ProtoInstance>
<ProtoInstance USE="kk"></ProtoInstance>
<ProtoInstance USE="nk"></ProtoInstance>
<ProtoInstance USE="qk"></ProtoInstance>
</fieldValue>
</ProtoInstance>
</fieldValue>
<fieldValue name="children"><ProtoInstance USE="rk"></ProtoInstance>
</fieldValue>
<fieldValue name="W" value="2"></fieldValue>
</ProtoInstance>
</Transform>
<Transform DEF="zk" translation="2.022 0.2389 1.5" rotation="-0.145494 0.989359 0 0.7418"><Transform DEF="Ak"><ProtoInstance name="K" DEF="Bk"><fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="zk"></Transform>
<Transform USE="Ak"></Transform>
</fieldValue>
<fieldValue name="L" value="1.528"></fieldValue>
<fieldValue name="attenuation" value="0.001 0.6545 0"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
<Transform DEF="Ck"><Transform DEF="Dk"><ProtoInstance name="Ih" DEF="Ek"><fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="Ck"></Transform>
<Transform USE="Dk"></Transform>
</fieldValue>
<fieldValue name="url" value="&quot;tonerow3d_16_22.wav&quot;"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="Fk"><fieldValue name="cycleInterval" value="0.232925"></fieldValue>
<fieldValue name="xa" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Nh" DEF="Gk"><fieldValue name="Oh"><ProtoInstance USE="Ek"></ProtoInstance>
</fieldValue>
<fieldValue name="intensity" value="0.49"></fieldValue>
<fieldValue name="duration" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="Hk"><fieldValue name="xa" value="1.268"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Xh" DEF="Ik"></ProtoInstance>
<ProtoInstance name="ra" DEF="Jk"><fieldValue name="cycleInterval" value="0.232925"></fieldValue>
<fieldValue name="xa" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Nh" DEF="Kk"><fieldValue name="Oh"><ProtoInstance USE="Ek"></ProtoInstance>
</fieldValue>
<fieldValue name="intensity" value="0.3"></fieldValue>
<fieldValue name="duration" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="Lk"><fieldValue name="xa" value="1.268"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Xh" DEF="Mk"></ProtoInstance>
<ProtoInstance name="ra" DEF="Nk"><fieldValue name="cycleInterval" value="0.232925"></fieldValue>
<fieldValue name="xa" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Nh" DEF="Ok"><fieldValue name="Oh"><ProtoInstance USE="Ek"></ProtoInstance>
</fieldValue>
<fieldValue name="intensity" value="0.2"></fieldValue>
<fieldValue name="duration" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="Pk"><fieldValue name="xa" value="1.268"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Xh" DEF="Qk"></ProtoInstance>
<ProtoInstance name="ra" DEF="Rk"><fieldValue name="cycleInterval" value="0.232925"></fieldValue>
<fieldValue name="xa" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Nh" DEF="Sk"><fieldValue name="Oh"><ProtoInstance USE="Ek"></ProtoInstance>
</fieldValue>
<fieldValue name="intensity" value="0.3"></fieldValue>
<fieldValue name="duration" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="Tk"><fieldValue name="xa" value="1.268"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Xh" DEF="Uk"></ProtoInstance>
<ProtoInstance name="ra" DEF="Vk"><fieldValue name="cycleInterval" value="0.232925"></fieldValue>
<fieldValue name="xa" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Nh" DEF="Wk"><fieldValue name="Oh"><ProtoInstance USE="Ek"></ProtoInstance>
</fieldValue>
<fieldValue name="intensity" value="0.49"></fieldValue>
<fieldValue name="duration" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="Xk"><fieldValue name="xa" value="1.268"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Xh" DEF="Yk"></ProtoInstance>
<ProtoInstance name="ra" DEF="Zk"><fieldValue name="cycleInterval" value="0.232925"></fieldValue>
<fieldValue name="xa" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Nh" DEF="al"><fieldValue name="Oh"><ProtoInstance USE="Ek"></ProtoInstance>
</fieldValue>
<fieldValue name="intensity" value="0.75"></fieldValue>
<fieldValue name="duration" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="bl"><fieldValue name="xa" value="1.268"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Xh" DEF="cl"></ProtoInstance>
<ProtoInstance name="ra" DEF="dl"><fieldValue name="cycleInterval" value="0.232925"></fieldValue>
<fieldValue name="xa" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Nh" DEF="el"><fieldValue name="Oh"><ProtoInstance USE="Ek"></ProtoInstance>
</fieldValue>
<fieldValue name="duration" value="0.232925"></fieldValue>
</ProtoInstance>
<ProtoInstance name="ra" DEF="fl"><fieldValue name="xa" value="1.268"></fieldValue>
</ProtoInstance>
<ProtoInstance name="Xh" DEF="gl"></ProtoInstance>
</Transform>
</Transform>
<Transform DEF="hl" translation="-1.192e-7 -0.006944 0"><Transform DEF="il" scale="4.181 1.778 4.181"><ProtoInstance name="Zh" DEF="jl"><fieldValue name="url" value="&quot;&quot;"></fieldValue>
<fieldValue name="emissiveColor" value="0 0.09 0.15"></fieldValue>
<fieldValue name="specularColor" value="0.5 0.5 0.5"></fieldValue>
<fieldValue name="B"><ProtoInstance USE="Li"></ProtoInstance>
</fieldValue>
<fieldValue name="C"><Transform USE="hl"></Transform>
<Transform USE="il"></Transform>
</fieldValue>
<fieldValue name="ai" value="4 4"></fieldValue>
<fieldValue name="H" value="false"></fieldValue>
<fieldValue name="diffuseColor" value="0 0 0"></fieldValue>
<fieldValue name="choice" value="1"></fieldValue>
</ProtoInstance>
</Transform>
</Transform>
</fieldValue>
<fieldValue name="A"><ProtoInstance USE="Oi"></ProtoInstance>
<ProtoInstance USE="Ri"></ProtoInstance>
<ProtoInstance USE="aj"></ProtoInstance>
<ProtoInstance USE="fj"></ProtoInstance>
<ProtoInstance USE="ij"></ProtoInstance>
<ProtoInstance USE="lj"></ProtoInstance>
<ProtoInstance USE="wj"></ProtoInstance>
<ProtoInstance USE="Sj"></ProtoInstance>
<ProtoInstance USE="Xj"></ProtoInstance>
<ProtoInstance USE="bk"></ProtoInstance>
<ProtoInstance USE="ek"></ProtoInstance>
<ProtoInstance USE="Bk"></ProtoInstance>
<ProtoInstance USE="Ek"></ProtoInstance>
<ProtoInstance USE="jl"></ProtoInstance>
</fieldValue>
</ProtoInstance>
<ProtoInstance name="f" DEF="kl"></ProtoInstance>
</Group>
<ROUTE fromNode="kl" fromField="j" toNode="Hi" toField="h"></ROUTE>
<ROUTE fromNode="Wi" fromField="yb_changed" toNode="Ti" toField="set_enabled"></ROUTE>
<ROUTE fromNode="Vi" fromField="R_changed" toNode="Ui" toField="R"></ROUTE>
<ROUTE fromNode="Hi" fromField="i" toNode="Vi" toField="R"></ROUTE>
<ROUTE fromNode="Ui" fromField="stopTime" toNode="Vi" toField="S"></ROUTE>
<ROUTE fromNode="Ui" fromField="fraction" toNode="Vi" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Ti" fromField="isOver" toNode="Wi" toField="qb"></ROUTE>
<ROUTE fromNode="Ti" fromField="isActive" toNode="Wi" toField="rb"></ROUTE>
<ROUTE fromNode="Ti" fromField="hitPoint_changed" toNode="Wi" toField="sb"></ROUTE>
<ROUTE fromNode="Ti" fromField="hitTexCoord_changed" toNode="Wi" toField="tb"></ROUTE>
<ROUTE fromNode="Qi" fromField="R_changed" toNode="Xi" toField="R"></ROUTE>
<ROUTE fromNode="Wi" fromField="exitTime" toNode="Xi" toField="S"></ROUTE>
<ROUTE fromNode="Wi" fromField="enterTime" toNode="Qi" toField="R"></ROUTE>
<ROUTE fromNode="Xi" fromField="stopTime" toNode="Qi" toField="S"></ROUTE>
<ROUTE fromNode="Xi" fromField="fraction" toNode="Qi" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Zi" fromField="R_changed" toNode="cj" toField="R"></ROUTE>
<ROUTE fromNode="Hi" fromField="i" toNode="Zi" toField="R"></ROUTE>
<ROUTE fromNode="cj" fromField="stopTime" toNode="Zi" toField="S"></ROUTE>
<ROUTE fromNode="cj" fromField="fraction" toNode="Zi" toField="set_fraction"></ROUTE>
<ROUTE fromNode="rj" fromField="R_changed" toNode="qj" toField="R"></ROUTE>
<ROUTE fromNode="Hi" fromField="i" toNode="rj" toField="R"></ROUTE>
<ROUTE fromNode="qj" fromField="stopTime" toNode="rj" toField="S"></ROUTE>
<ROUTE fromNode="qj" fromField="va" toNode="rj" toField="set_od"></ROUTE>
<ROUTE fromNode="qj" fromField="fraction" toNode="rj" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Jj" fromField="yb_changed" toNode="uj" toField="set_enabled"></ROUTE>
<ROUTE fromNode="Lj" fromField="yb_changed" toNode="vj" toField="set_enabled"></ROUTE>
<ROUTE fromNode="Lj" fromField="vb" toNode="Jj" toField="sa"></ROUTE>
<ROUTE fromNode="uj" fromField="isActive" toNode="Jj" toField="rb"></ROUTE>
<ROUTE fromNode="uj" fromField="rotation_changed" toNode="Jj" toField="ne"></ROUTE>
<ROUTE fromNode="uj" fromField="trackPoint_changed" toNode="Jj" toField="oe"></ROUTE>
<ROUTE fromNode="Lj" fromField="ub" toNode="Kj" toField="R"></ROUTE>
<ROUTE fromNode="Jj" fromField="stopTime" toNode="Kj" toField="S"></ROUTE>
<ROUTE fromNode="vj" fromField="isOver" toNode="Lj" toField="qb"></ROUTE>
<ROUTE fromNode="vj" fromField="isActive" toNode="Lj" toField="rb"></ROUTE>
<ROUTE fromNode="vj" fromField="hitPoint_changed" toNode="Lj" toField="sb"></ROUTE>
<ROUTE fromNode="vj" fromField="hitTexCoord_changed" toNode="Lj" toField="tb"></ROUTE>
<ROUTE fromNode="Nj" fromField="He" toNode="Mj" toField="R"></ROUTE>
<ROUTE fromNode="Mj" fromField="ua" toNode="Nj" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Mj" fromField="va" toNode="Nj" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Lj" fromField="vb" toNode="Oj" toField="R"></ROUTE>
<ROUTE fromNode="Mj" fromField="stopTime" toNode="Oj" toField="S"></ROUTE>
<ROUTE fromNode="Nj" fromField="Ie" toNode="Oj" toField="S"></ROUTE>
<ROUTE fromNode="Qj" fromField="R_changed" toNode="Tj" toField="R"></ROUTE>
<ROUTE fromNode="Hi" fromField="i" toNode="Qj" toField="R"></ROUTE>
<ROUTE fromNode="Tj" fromField="stopTime" toNode="Qj" toField="S"></ROUTE>
<ROUTE fromNode="Tj" fromField="va" toNode="Qj" toField="set_od"></ROUTE>
<ROUTE fromNode="Tj" fromField="fraction" toNode="Qj" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Tj" fromField="fraction" toNode="Qj" toField="jf"></ROUTE>
<ROUTE fromNode="Vj" fromField="R_changed" toNode="Yj" toField="R"></ROUTE>
<ROUTE fromNode="Hi" fromField="i" toNode="Vj" toField="R"></ROUTE>
<ROUTE fromNode="Yj" fromField="stopTime" toNode="Vj" toField="S"></ROUTE>
<ROUTE fromNode="Yj" fromField="va" toNode="Vj" toField="set_od"></ROUTE>
<ROUTE fromNode="Yj" fromField="fraction" toNode="Vj" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Yj" fromField="fraction" toNode="Vj" toField="jf"></ROUTE>
<ROUTE fromNode="dk" fromField="R_changed" toNode="tk" toField="R"></ROUTE>
<ROUTE fromNode="rk" fromField="R_changed" toNode="uk" toField="R"></ROUTE>
<ROUTE fromNode="xk" fromField="Dg" toNode="vk" toField="R"></ROUTE>
<ROUTE fromNode="xk" fromField="Bg" toNode="wk" toField="set_position"></ROUTE>
<ROUTE fromNode="vk" fromField="fraction" toNode="xk" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Hi" fromField="i" toNode="yk" toField="R"></ROUTE>
<ROUTE fromNode="vk" fromField="stopTime" toNode="yk" toField="S"></ROUTE>
<ROUTE fromNode="vk" fromField="Ba" toNode="yk" toField="S"></ROUTE>
<ROUTE fromNode="Hi" fromField="i" toNode="rk" toField="R"></ROUTE>
<ROUTE fromNode="uk" fromField="stopTime" toNode="rk" toField="S"></ROUTE>
<ROUTE fromNode="uk" fromField="fraction" toNode="rk" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Hi" fromField="i" toNode="dk" toField="R"></ROUTE>
<ROUTE fromNode="tk" fromField="stopTime" toNode="dk" toField="S"></ROUTE>
<ROUTE fromNode="tk" fromField="fraction" toNode="dk" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Gk" fromField="startTime" toNode="Fk" toField="R"></ROUTE>
<ROUTE fromNode="vk" fromField="Aa" toNode="Gk" toField="R"></ROUTE>
<ROUTE fromNode="vk" fromField="startTime" toNode="Gk" toField="R"></ROUTE>
<ROUTE fromNode="Fk" fromField="stopTime" toNode="Gk" toField="S"></ROUTE>
<ROUTE fromNode="Fk" fromField="va" toNode="Gk" toField="set_intensity"></ROUTE>
<ROUTE fromNode="Fk" fromField="fraction" toNode="Gk" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Ek" fromField="Jh" toNode="Gk" toField="Jh"></ROUTE>
<ROUTE fromNode="Ik" fromField="R_changed" toNode="Hk" toField="R"></ROUTE>
<ROUTE fromNode="Gk" fromField="stopTime" toNode="Ik" toField="R"></ROUTE>
<ROUTE fromNode="Hk" fromField="stopTime" toNode="Ik" toField="S"></ROUTE>
<ROUTE fromNode="Kk" fromField="startTime" toNode="Jk" toField="R"></ROUTE>
<ROUTE fromNode="Hk" fromField="stopTime" toNode="Kk" toField="R"></ROUTE>
<ROUTE fromNode="Jk" fromField="stopTime" toNode="Kk" toField="S"></ROUTE>
<ROUTE fromNode="Jk" fromField="va" toNode="Kk" toField="set_intensity"></ROUTE>
<ROUTE fromNode="Jk" fromField="fraction" toNode="Kk" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Ek" fromField="Jh" toNode="Kk" toField="Jh"></ROUTE>
<ROUTE fromNode="Mk" fromField="R_changed" toNode="Lk" toField="R"></ROUTE>
<ROUTE fromNode="Kk" fromField="stopTime" toNode="Mk" toField="R"></ROUTE>
<ROUTE fromNode="Lk" fromField="stopTime" toNode="Mk" toField="S"></ROUTE>
<ROUTE fromNode="Ok" fromField="startTime" toNode="Nk" toField="R"></ROUTE>
<ROUTE fromNode="Lk" fromField="stopTime" toNode="Ok" toField="R"></ROUTE>
<ROUTE fromNode="Nk" fromField="stopTime" toNode="Ok" toField="S"></ROUTE>
<ROUTE fromNode="Nk" fromField="va" toNode="Ok" toField="set_intensity"></ROUTE>
<ROUTE fromNode="Nk" fromField="fraction" toNode="Ok" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Ek" fromField="Jh" toNode="Ok" toField="Jh"></ROUTE>
<ROUTE fromNode="Qk" fromField="R_changed" toNode="Pk" toField="R"></ROUTE>
<ROUTE fromNode="Ok" fromField="stopTime" toNode="Qk" toField="R"></ROUTE>
<ROUTE fromNode="Pk" fromField="stopTime" toNode="Qk" toField="S"></ROUTE>
<ROUTE fromNode="Sk" fromField="startTime" toNode="Rk" toField="R"></ROUTE>
<ROUTE fromNode="Pk" fromField="stopTime" toNode="Sk" toField="R"></ROUTE>
<ROUTE fromNode="Rk" fromField="stopTime" toNode="Sk" toField="S"></ROUTE>
<ROUTE fromNode="Rk" fromField="va" toNode="Sk" toField="set_intensity"></ROUTE>
<ROUTE fromNode="Rk" fromField="fraction" toNode="Sk" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Ek" fromField="Jh" toNode="Sk" toField="Jh"></ROUTE>
<ROUTE fromNode="Uk" fromField="R_changed" toNode="Tk" toField="R"></ROUTE>
<ROUTE fromNode="Sk" fromField="stopTime" toNode="Uk" toField="R"></ROUTE>
<ROUTE fromNode="Tk" fromField="stopTime" toNode="Uk" toField="S"></ROUTE>
<ROUTE fromNode="Wk" fromField="startTime" toNode="Vk" toField="R"></ROUTE>
<ROUTE fromNode="Tk" fromField="stopTime" toNode="Wk" toField="R"></ROUTE>
<ROUTE fromNode="Vk" fromField="stopTime" toNode="Wk" toField="S"></ROUTE>
<ROUTE fromNode="Vk" fromField="va" toNode="Wk" toField="set_intensity"></ROUTE>
<ROUTE fromNode="Vk" fromField="fraction" toNode="Wk" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Ek" fromField="Jh" toNode="Wk" toField="Jh"></ROUTE>
<ROUTE fromNode="Yk" fromField="R_changed" toNode="Xk" toField="R"></ROUTE>
<ROUTE fromNode="Wk" fromField="stopTime" toNode="Yk" toField="R"></ROUTE>
<ROUTE fromNode="Xk" fromField="stopTime" toNode="Yk" toField="S"></ROUTE>
<ROUTE fromNode="al" fromField="startTime" toNode="Zk" toField="R"></ROUTE>
<ROUTE fromNode="Xk" fromField="stopTime" toNode="al" toField="R"></ROUTE>
<ROUTE fromNode="Zk" fromField="stopTime" toNode="al" toField="S"></ROUTE>
<ROUTE fromNode="Zk" fromField="va" toNode="al" toField="set_intensity"></ROUTE>
<ROUTE fromNode="Zk" fromField="fraction" toNode="al" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Ek" fromField="Jh" toNode="al" toField="Jh"></ROUTE>
<ROUTE fromNode="cl" fromField="R_changed" toNode="bl" toField="R"></ROUTE>
<ROUTE fromNode="al" fromField="stopTime" toNode="cl" toField="R"></ROUTE>
<ROUTE fromNode="bl" fromField="stopTime" toNode="cl" toField="S"></ROUTE>
<ROUTE fromNode="el" fromField="startTime" toNode="dl" toField="R"></ROUTE>
<ROUTE fromNode="bl" fromField="stopTime" toNode="el" toField="R"></ROUTE>
<ROUTE fromNode="dl" fromField="stopTime" toNode="el" toField="S"></ROUTE>
<ROUTE fromNode="dl" fromField="va" toNode="el" toField="set_intensity"></ROUTE>
<ROUTE fromNode="dl" fromField="fraction" toNode="el" toField="set_fraction"></ROUTE>
<ROUTE fromNode="Ek" fromField="Jh" toNode="el" toField="Jh"></ROUTE>
<ROUTE fromNode="gl" fromField="R_changed" toNode="fl" toField="R"></ROUTE>
<ROUTE fromNode="el" fromField="stopTime" toNode="gl" toField="R"></ROUTE>
<ROUTE fromNode="fl" fromField="stopTime" toNode="gl" toField="S"></ROUTE>
<ROUTE fromNode="Hi" fromField="j" toNode="kl" toField="h"></ROUTE>
</Scene>
</X3D>